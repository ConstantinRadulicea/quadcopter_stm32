
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fb48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf4  0801fcd8  0801fcd8  00020cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080228cc  080228cc  0002431c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080228cc  080228cc  000238cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080228d4  080228d4  0002431c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080228d4  080228d4  000238d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080228d8  080228d8  000238d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  080228dc  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002431c  2**0
                  CONTENTS
 10 .bss          0000c110  2000031c  2000031c  0002431c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000c42c  2000c42c  0002431c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002431c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003999c  00000000  00000000  0002434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000086f9  00000000  00000000  0005dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e20  00000000  00000000  000663e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002386  00000000  00000000  00069208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3a9  00000000  00000000  0006b58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000398d8  00000000  00000000  00095937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc4b4  00000000  00000000  000cf20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ab6c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ddd8  00000000  00000000  001ab708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001b94e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fcc0 	.word	0x0801fcc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801fcc0 	.word	0x0801fcc0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	ed87 0a02 	vstr	s0, [r7, #8]
 800104c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001050:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800105a:	2234      	movs	r2, #52	@ 0x34
 800105c:	2100      	movs	r1, #0
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f01a ffb0 	bl	801bfc4 <memset>

	fc->rate_gain = rate_gain;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	e000      	b.n	800107a <attitude_controller_init+0x3a>
        return;
 8001078:	bf00      	nop

}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09c      	sub	sp, #112	@ 0x70
 8001084:	af00      	add	r7, sp, #0
 8001086:	eeb0 6a40 	vmov.f32	s12, s0
 800108a:	eef0 6a60 	vmov.f32	s13, s1
 800108e:	eeb0 7a41 	vmov.f32	s14, s2
 8001092:	eef0 7a61 	vmov.f32	s15, s3
 8001096:	ed87 6a04 	vstr	s12, [r7, #16]
 800109a:	edc7 6a05 	vstr	s13, [r7, #20]
 800109e:	ed87 7a06 	vstr	s14, [r7, #24]
 80010a2:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 ffb6 	bl	800301c <quatnormalize>
 80010b0:	eeb0 6a40 	vmov.f32	s12, s0
 80010b4:	eef0 6a60 	vmov.f32	s13, s1
 80010b8:	eeb0 7a41 	vmov.f32	s14, s2
 80010bc:	eef0 7a61 	vmov.f32	s15, s3
 80010c0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010c4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010c8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010cc:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 ff97 	bl	800301c <quatnormalize>
 80010ee:	eeb0 6a40 	vmov.f32	s12, s0
 80010f2:	eef0 6a60 	vmov.f32	s13, s1
 80010f6:	eeb0 7a41 	vmov.f32	s14, s2
 80010fa:	eef0 7a61 	vmov.f32	s15, s3
 80010fe:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 8001102:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 8001106:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 800110a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 800110e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ff46 	bl	8002fa4 <quatconj>
 8001118:	eeb0 6a40 	vmov.f32	s12, s0
 800111c:	eef0 6a60 	vmov.f32	s13, s1
 8001120:	eeb0 7a41 	vmov.f32	s14, s2
 8001124:	eef0 7a61 	vmov.f32	s15, s3
 8001128:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800112c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001130:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001134:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001138:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f002 f825 	bl	8003192 <quatmultiply>
 8001148:	eeb0 6a40 	vmov.f32	s12, s0
 800114c:	eef0 6a60 	vmov.f32	s13, s1
 8001150:	eeb0 7a41 	vmov.f32	s14, s2
 8001154:	eef0 7a61 	vmov.f32	s15, s3
 8001158:	ed87 6a08 	vstr	s12, [r7, #32]
 800115c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001160:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001164:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f001 ff55 	bl	800301c <quatnormalize>
 8001172:	eeb0 6a40 	vmov.f32	s12, s0
 8001176:	eef0 6a60 	vmov.f32	s13, s1
 800117a:	eeb0 7a41 	vmov.f32	s14, s2
 800117e:	eef0 7a61 	vmov.f32	s15, s3
 8001182:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001186:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800118a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800118e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001192:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001194:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001196:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119a:	ee06 0a10 	vmov	s12, r0
 800119e:	ee06 1a90 	vmov	s13, r1
 80011a2:	ee07 2a10 	vmov	s14, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a46 	vmov.f32	s0, s12
 80011ae:	eef0 0a66 	vmov.f32	s1, s13
 80011b2:	eeb0 1a47 	vmov.f32	s2, s14
 80011b6:	eef0 1a67 	vmov.f32	s3, s15
 80011ba:	3770      	adds	r7, #112	@ 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0a7      	sub	sp, #156	@ 0x9c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	61f8      	str	r0, [r7, #28]
 80011c8:	eeb0 6a40 	vmov.f32	s12, s0
 80011cc:	eef0 6a60 	vmov.f32	s13, s1
 80011d0:	eeb0 7a41 	vmov.f32	s14, s2
 80011d4:	eef0 7a61 	vmov.f32	s15, s3
 80011d8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011dc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011e0:	ed87 3a00 	vstr	s6, [r7]
 80011e4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011e8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011ec:	ed87 7a05 	vstr	s14, [r7, #20]
 80011f0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 81b0 	beq.w	800155c <attitude_controller_angle_mode_update+0x39c>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001202:	eef1 7a67 	vneg.f32	s15, s15
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d505      	bpl.n	8001220 <attitude_controller_angle_mode_update+0x60>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	eef1 7a67 	vneg.f32	s15, s15
 800121e:	e00f      	b.n	8001240 <attitude_controller_angle_mode_update+0x80>
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	edd3 7a05 	vldr	s15, [r3, #20]
 8001226:	ed97 7a02 	vldr	s14, [r7, #8]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd03      	ble.n	800123c <attitude_controller_angle_mode_update+0x7c>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	edd3 7a05 	vldr	s15, [r3, #20]
 800123a:	e001      	b.n	8001240 <attitude_controller_angle_mode_update+0x80>
 800123c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001240:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	edd3 7a05 	vldr	s15, [r3, #20]
 800124a:	eef1 7a67 	vneg.f32	s15, s15
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d505      	bpl.n	8001268 <attitude_controller_angle_mode_update+0xa8>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	eef1 7a67 	vneg.f32	s15, s15
 8001266:	e00f      	b.n	8001288 <attitude_controller_angle_mode_update+0xc8>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	edd3 7a05 	vldr	s15, [r3, #20]
 800126e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd03      	ble.n	8001284 <attitude_controller_angle_mode_update+0xc4>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001282:	e001      	b.n	8001288 <attitude_controller_angle_mode_update+0xc8>
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001292:	eef1 7a67 	vneg.f32	s15, s15
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d505      	bpl.n	80012b0 <attitude_controller_angle_mode_update+0xf0>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	eef1 7a67 	vneg.f32	s15, s15
 80012ae:	e00f      	b.n	80012d0 <attitude_controller_angle_mode_update+0x110>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b6:	ed97 7a00 	vldr	s14, [r7]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd03      	ble.n	80012cc <attitude_controller_angle_mode_update+0x10c>
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ca:	e001      	b.n	80012d0 <attitude_controller_angle_mode_update+0x110>
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	461c      	mov	r4, r3
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 8001308:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f9b9 	bl	8003684 <angle2quat>
 8001312:	eeb0 6a40 	vmov.f32	s12, s0
 8001316:	eef0 6a60 	vmov.f32	s13, s1
 800131a:	eeb0 7a41 	vmov.f32	s14, s2
 800131e:	eef0 7a61 	vmov.f32	s15, s3
 8001322:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001326:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800132a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800132e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001332:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	673b      	str	r3, [r7, #112]	@ 0x70
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	677b      	str	r3, [r7, #116]	@ 0x74
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800134a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800134e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f001 ff1c 	bl	8003192 <quatmultiply>
 800135a:	eeb0 6a40 	vmov.f32	s12, s0
 800135e:	eef0 6a60 	vmov.f32	s13, s1
 8001362:	eeb0 7a41 	vmov.f32	s14, s2
 8001366:	eef0 7a61 	vmov.f32	s15, s3
 800136a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800136e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001372:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001376:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fae6 	bl	8003954 <quat_error>
 8001388:	eeb0 6a40 	vmov.f32	s12, s0
 800138c:	eef0 6a60 	vmov.f32	s13, s1
 8001390:	eeb0 7a41 	vmov.f32	s14, s2
 8001394:	eef0 7a61 	vmov.f32	s15, s3
 8001398:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800139c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 80013a0:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 80013a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 80013a8:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 80013ac:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013b0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80013b4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013b8:	eeb0 0a46 	vmov.f32	s0, s12
 80013bc:	eef0 0a66 	vmov.f32	s1, s13
 80013c0:	eeb0 1a47 	vmov.f32	s2, s14
 80013c4:	eef0 1a67 	vmov.f32	s3, s15
 80013c8:	f7ff fe5a 	bl	8001080 <quat_remove_yaw>
 80013cc:	eeb0 6a40 	vmov.f32	s12, s0
 80013d0:	eef0 6a60 	vmov.f32	s13, s1
 80013d4:	eeb0 7a41 	vmov.f32	s14, s2
 80013d8:	eef0 7a61 	vmov.f32	s15, s3
 80013dc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013e0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013e4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013ec:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013f0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013fc:	eeb0 0a46 	vmov.f32	s0, s12
 8001400:	eef0 0a66 	vmov.f32	s1, s13
 8001404:	eeb0 1a47 	vmov.f32	s2, s14
 8001408:	eef0 1a67 	vmov.f32	s3, s15
 800140c:	f002 f884 	bl	8003518 <quat2rotvec>
 8001410:	eef0 6a40 	vmov.f32	s13, s0
 8001414:	eeb0 7a60 	vmov.f32	s14, s1
 8001418:	eef0 7a41 	vmov.f32	s15, s2
 800141c:	edc7 6a08 	vstr	s13, [r7, #32]
 8001420:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001424:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles3D rotvec_err = quat2rotvec(error_q);

    rotvec_err.z = 0.0f;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 800142e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	edd3 7a04 	vldr	s15, [r3, #16]
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 8001442:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	edd3 7a04 	vldr	s15, [r3, #16]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	ed93 7a04 	vldr	s14, [r3, #16]
 800145c:	edd7 7a00 	vldr	s15, [r7]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	edd3 7a06 	vldr	s15, [r3, #24]
 8001476:	eef1 7a67 	vneg.f32	s15, s15
 800147a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	d505      	bpl.n	8001490 <attitude_controller_angle_mode_update+0x2d0>
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	edd3 7a06 	vldr	s15, [r3, #24]
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	e011      	b.n	80014b4 <attitude_controller_angle_mode_update+0x2f4>
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	edd3 7a06 	vldr	s15, [r3, #24]
 800149c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd03      	ble.n	80014ae <attitude_controller_angle_mode_update+0x2ee>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ac:	e002      	b.n	80014b4 <attitude_controller_angle_mode_update+0x2f4>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014c6:	eef1 7a67 	vneg.f32	s15, s15
 80014ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d505      	bpl.n	80014e0 <attitude_controller_angle_mode_update+0x320>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014da:	eef1 7a67 	vneg.f32	s15, s15
 80014de:	e011      	b.n	8001504 <attitude_controller_angle_mode_update+0x344>
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd03      	ble.n	80014fe <attitude_controller_angle_mode_update+0x33e>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014fc:	e002      	b.n	8001504 <attitude_controller_angle_mode_update+0x344>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	edd3 7a06 	vldr	s15, [r3, #24]
 8001516:	eef1 7a67 	vneg.f32	s15, s15
 800151a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d505      	bpl.n	8001530 <attitude_controller_angle_mode_update+0x370>
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	edd3 7a06 	vldr	s15, [r3, #24]
 800152a:	eef1 7a67 	vneg.f32	s15, s15
 800152e:	e011      	b.n	8001554 <attitude_controller_angle_mode_update+0x394>
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	edd3 7a06 	vldr	s15, [r3, #24]
 800153c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	dd03      	ble.n	800154e <attitude_controller_angle_mode_update+0x38e>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	edd3 7a06 	vldr	s15, [r3, #24]
 800154c:	e002      	b.n	8001554 <attitude_controller_angle_mode_update+0x394>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800155a:	e000      	b.n	800155e <attitude_controller_angle_mode_update+0x39e>
        return;
 800155c:	bf00      	nop

}
 800155e:	379c      	adds	r7, #156	@ 0x9c
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e000      	b.n	80015a6 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 80015a4:	bf00      	nop
	}
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 80015b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	460a      	mov	r2, r1
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4613      	mov	r3, r2
 80015d0:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	4053      	eors	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e014      	b.n	8001614 <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da0a      	bge.n	8001608 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b21b      	sxth	r3, r3
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	e002      	b.n	800160e <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d9e7      	bls.n	80015ea <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 800161a:	88fb      	ldrh	r3, [r7, #6]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00d      	b.n	8001658 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffba 	bl	80015c2 <crc16_ccitt_add>
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3ed      	bcc.n	800163c <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 8001660:	89fb      	ldrh	r3, [r7, #14]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	0000      	movs	r0, r0
 800166c:	0000      	movs	r0, r0
	...

08001670 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	ed87 0a02 	vstr	s0, [r7, #8]
 800167c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001730 <pt1_filter_init_lowpass+0xc0>
 8001688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d908      	bls.n	80016a4 <pt1_filter_init_lowpass+0x34>
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001730 <pt1_filter_init_lowpass+0xc0>
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d804      	bhi.n	80016ae <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e02b      	b.n	8001706 <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 80016ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe ff52 	bl	8000568 <__aeabi_f2d>
 80016c4:	a318      	add	r3, pc, #96	@ (adr r3, 8001728 <pt1_filter_init_lowpass+0xb8>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ffa5 	bl	8000618 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	4917      	ldr	r1, [pc, #92]	@ (8001734 <pt1_filter_init_lowpass+0xc4>)
 80016d8:	f7ff f8c8 	bl	800086c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa90 	bl	8000c08 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80016fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	54442d18 	.word	0x54442d18
 800172c:	401921fb 	.word	0x401921fb
 8001730:	34000000 	.word	0x34000000
 8001734:	3ff00000 	.word	0x3ff00000

08001738 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	ed93 7a03 	vldr	s14, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a03 	vldr	s15, [r3, #12]
 8001756:	ed97 6a00 	vldr	s12, [r7]
 800175a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	ee07 3a90 	vmov	s15, r3
}
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80017aa:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80017b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff59 	bl	8001670 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3310      	adds	r3, #16
 80017c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff50 	bl	8001670 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0410 	add.w	r4, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	ed97 0a00 	vldr	s0, [r7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff9b 	bl	8001738 <pt1_filter_apply_lowpass>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ff94 	bl	8001738 <pt1_filter_apply_lowpass>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
}
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffaa 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3310      	adds	r3, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffa5 	bl	8001782 <pt1_filter_reset>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <flight_control_loop_arm_esc>:
// https://articulatedrobotics.xyz/tools/rotation-calculator/
//static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };	// angle2quat();
static quaternion ground_default_position_q = { .w = 0.999698f, .x = 0.007852f, .y = 0.023297f, .z = 0.000183f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800184e:	f04f 31ff 	mov.w	r1, #4294967295
 8001852:	4618      	mov	r0, r3
 8001854:	f014 fa92 	bl	8015d7c <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800186c:	2300      	movs	r3, #0
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	f014 f801 	bl	8015878 <xQueueGenericSend>
	#endif
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	4618      	mov	r0, r3
 8001892:	f014 fa73 	bl	8015d7c <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018aa:	2300      	movs	r3, #0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	f013 ffe2 	bl	8015878 <xQueueGenericSend>
	#endif
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	4618      	mov	r0, r3
 80018d0:	f014 fa54 	bl	8015d7c <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018da:	f343 0300 	sbfx	r3, r3, #0, #1
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018e8:	2300      	movs	r3, #0
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	f013 ffc3 	bl	8015878 <xQueueGenericSend>
	#endif
	return flag;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 8001904:	f240 4204 	movw	r2, #1028	@ 0x404
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f01a fb5a 	bl	801bfc4 <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b30 <flight_control_loop_init+0x234>
 8001916:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b30 <flight_control_loop_init+0x234>
 800191a:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b30 <flight_control_loop_init+0x234>
 800191e:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b34 <flight_control_loop_init+0x238>
 8001922:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f85a 	bl	80039e0 <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <flight_control_loop_init+0x23c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	4b80      	ldr	r3, [pc, #512]	@ (8001b38 <flight_control_loop_init+0x23c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <flight_control_loop_init+0x23c>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	edd7 6a05 	vldr	s13, [r7, #20]
 8001944:	ed97 7a06 	vldr	s14, [r7, #24]
 8001948:	edd7 7a07 	vldr	s15, [r7, #28]
 800194c:	497b      	ldr	r1, [pc, #492]	@ (8001b3c <flight_control_loop_init+0x240>)
 800194e:	eeb0 0a66 	vmov.f32	s0, s13
 8001952:	eef0 0a47 	vmov.f32	s1, s14
 8001956:	eeb0 1a67 	vmov.f32	s2, s15
 800195a:	4610      	mov	r0, r2
 800195c:	f002 fa98 	bl	8003e90 <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4b77      	ldr	r3, [pc, #476]	@ (8001b40 <flight_control_loop_init+0x244>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	4b75      	ldr	r3, [pc, #468]	@ (8001b40 <flight_control_loop_init+0x244>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b74      	ldr	r3, [pc, #464]	@ (8001b40 <flight_control_loop_init+0x244>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	edd7 6a02 	vldr	s13, [r7, #8]
 8001978:	ed97 7a03 	vldr	s14, [r7, #12]
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	eef0 0a47 	vmov.f32	s1, s14
 8001988:	eeb0 1a67 	vmov.f32	s2, s15
 800198c:	4610      	mov	r0, r2
 800198e:	f002 fa5d 	bl	8003e4c <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4b6b      	ldr	r3, [pc, #428]	@ (8001b44 <flight_control_loop_init+0x248>)
 8001996:	ed93 6a00 	vldr	s12, [r3]
 800199a:	edd3 6a01 	vldr	s13, [r3, #4]
 800199e:	ed93 7a02 	vldr	s14, [r3, #8]
 80019a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019a6:	eeb0 0a46 	vmov.f32	s0, s12
 80019aa:	eef0 0a66 	vmov.f32	s1, s13
 80019ae:	eeb0 1a47 	vmov.f32	s2, s14
 80019b2:	eef0 1a67 	vmov.f32	s3, s15
 80019b6:	4610      	mov	r0, r2
 80019b8:	f002 f8a2 	bl	8003b00 <imu_set_leveled_attitude>

	attitude_controller_init(
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80019c2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001b48 <flight_control_loop_init+0x24c>
 80019c6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001b4c <flight_control_loop_init+0x250>
 80019ca:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb36 	bl	8001040 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019da:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8001b50 <flight_control_loop_init+0x254>
 80019de:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019e2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b30 <flight_control_loop_init+0x234>
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f838 	bl	8004a5c <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019f2:	ed9f 2a58 	vldr	s4, [pc, #352]	@ 8001b54 <flight_control_loop_init+0x258>
 80019f6:	eddf 1a58 	vldr	s3, [pc, #352]	@ 8001b58 <flight_control_loop_init+0x25c>
 80019fa:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8001b54 <flight_control_loop_init+0x258>
 80019fe:	eef0 0a0c 	vmov.f32	s1, #12	@ 0x40600000  3.5
 8001a02:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001b5c <flight_control_loop_init+0x260>
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f8b6 	bl	8004b78 <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a12:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a16:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8001b58 <flight_control_loop_init+0x25c>
 8001a1a:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a1e:	eef0 0a0c 	vmov.f32	s1, #12	@ 0x40600000  3.5
 8001a22:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8001b5c <flight_control_loop_init+0x260>
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f8d8 	bl	8004bdc <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a32:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a36:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8001b60 <flight_control_loop_init+0x264>
 8001a3a:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a3e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001a42:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f8fa 	bl	8004c40 <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a52:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a56:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a5a:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001b4c <flight_control_loop_init+0x250>
 8001a5e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001a62:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001b50 <flight_control_loop_init+0x254>
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fbff 	bl	800526c <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a74:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a78:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a7c:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001b4c <flight_control_loop_init+0x250>
 8001a80:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001a84:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001b50 <flight_control_loop_init+0x254>
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fc4b 	bl	8005326 <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a96:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a9a:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a9e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001b4c <flight_control_loop_init+0x250>
 8001aa2:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001aa6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001b50 <flight_control_loop_init+0x254>
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fc99 	bl	80053e4 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001ab8:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001b64 <flight_control_loop_init+0x268>
 8001abc:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001b54 <flight_control_loop_init+0x258>
 8001ac0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001ac4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001ac8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001b50 <flight_control_loop_init+0x254>
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fce8 	bl	80054a4 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f013 feb6 	bl	8015846 <xQueueCreateMutex>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f013 feaf 	bl	8015846 <xQueueCreateMutex>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001af0:	2001      	movs	r0, #1
 8001af2:	f013 fea8 	bl	8015846 <xQueueCreateMutex>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001afe:	2001      	movs	r0, #1
 8001b00:	f013 fea1 	bl	8015846 <xQueueCreateMutex>
 8001b04:	4602      	mov	r2, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f013 fe9a 	bl	8015846 <xQueueCreateMutex>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f013 fe93 	bl	8015846 <xQueueCreateMutex>
 8001b20:	4602      	mov	r2, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	447a0000 	.word	0x447a0000
 8001b34:	42a00000 	.word	0x42a00000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	20000030 	.word	0x20000030
 8001b44:	2000003c 	.word	0x2000003c
 8001b48:	40a78d36 	.word	0x40a78d36
 8001b4c:	3f1c61aa 	.word	0x3f1c61aa
 8001b50:	42200000 	.word	0x42200000
 8001b54:	00000000 	.word	0x00000000
 8001b58:	3f3f7cd0 	.word	0x3f3f7cd0
 8001b5c:	3f19999a 	.word	0x3f19999a
 8001b60:	3e5f66f3 	.word	0x3e5f66f3
 8001b64:	42c80000 	.word	0x42c80000
 8001b68:	3d75c28f 	.word	0x3d75c28f

08001b6c <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b09b      	sub	sp, #108	@ 0x6c
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	4618      	mov	r0, r3
 8001b92:	f014 f8f3 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ba0:	f103 0408 	add.w	r4, r3, #8
 8001ba4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ba8:	1d1a      	adds	r2, r3, #4
 8001baa:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001bae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	f003 fcf5 	bl	80055a4 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f013 fe57 	bl	8015878 <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f014 f8d1 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001be0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001be4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001be8:	f002 f9a0 	bl	8003f2c <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f013 fe3e 	bl	8015878 <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001c02:	f04f 31ff 	mov.w	r1, #4294967295
 8001c06:	4618      	mov	r0, r3
 8001c08:	f014 f8b8 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001c12:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001c16:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001c1a:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001c1e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001c22:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c26:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c2a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c2e:	eeb0 3a64 	vmov.f32	s6, s9
 8001c32:	eef0 2a45 	vmov.f32	s5, s10
 8001c36:	eeb0 2a65 	vmov.f32	s4, s11
 8001c3a:	eeb0 0a46 	vmov.f32	s0, s12
 8001c3e:	eef0 0a66 	vmov.f32	s1, s13
 8001c42:	eeb0 1a47 	vmov.f32	s2, s14
 8001c46:	eef0 1a67 	vmov.f32	s3, s15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fab8 	bl	80011c0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	f107 021c 	add.w	r2, r7, #28
 8001c70:	f107 0120 	add.w	r1, r7, #32
 8001c74:	f7ff fc76 	bl	8001564 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	f013 fdf8 	bl	8015878 <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f014 f869 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001caa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001cae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001dd4 <flight_control_loop_tick+0x268>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd1e      	ble.n	8001cfa <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001cc2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cc6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cca:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001cce:	ed97 6a08 	vldr	s12, [r7, #32]
 8001cd2:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cd6:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cda:	eef0 2a45 	vmov.f32	s5, s10
 8001cde:	eeb0 2a65 	vmov.f32	s4, s11
 8001ce2:	eef0 1a46 	vmov.f32	s3, s12
 8001ce6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cea:	eef0 0a47 	vmov.f32	s1, s14
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 ffd6 	bl	8004ca4 <rate_controller_update>
 8001cf8:	e005      	b.n	8001d06 <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 f95d 	bl	8004fc0 <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	f107 0114 	add.w	r1, r7, #20
 8001d18:	f003 f9a6 	bl	8005068 <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	f013 fda6 	bl	8015878 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295
 8001d36:	4618      	mov	r0, r3
 8001d38:	f014 f820 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fdbd 	bl	80018bc <flight_control_loop_are_esc_armed>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d018      	beq.n	8001d7a <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d48:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d50:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d54:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d5e:	4618      	mov	r0, r3
 8001d60:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001dd4 <flight_control_loop_tick+0x268>
 8001d64:	eef0 1a46 	vmov.f32	s3, s12
 8001d68:	eeb0 1a66 	vmov.f32	s2, s13
 8001d6c:	eef0 0a47 	vmov.f32	s1, s14
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	f002 fb78 	bl	8004468 <motor_mixer_quad_x>
 8001d78:	e010      	b.n	8001d9c <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d7e:	e00a      	b.n	8001d96 <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d84:	33ec      	adds	r3, #236	@ 0xec
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d92:	3301      	adds	r3, #1
 8001d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	ddf1      	ble.n	8001d80 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f013 fd56 	bl	8015878 <xQueueGenericSend>
#endif

}
 8001dcc:	bf00      	nop
 8001dce:	3764      	adds	r7, #100	@ 0x64
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	3d6147ae 	.word	0x3d6147ae

08001dd8 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6178      	str	r0, [r7, #20]
 8001de0:	eef0 6a40 	vmov.f32	s13, s0
 8001de4:	eeb0 7a60 	vmov.f32	s14, s1
 8001de8:	eef0 7a41 	vmov.f32	s15, s2
 8001dec:	edc7 1a01 	vstr	s3, [r7, #4]
 8001df0:	edc7 6a02 	vstr	s13, [r7, #8]
 8001df4:	ed87 7a03 	vstr	s14, [r7, #12]
 8001df8:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e00:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d501      	bpl.n	8001e12 <flight_control_loop_update_rc_control+0x3a>
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e10:	e00c      	b.n	8001e2c <flight_control_loop_update_rc_control+0x54>
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	dd02      	ble.n	8001e2a <flight_control_loop_update_rc_control+0x52>
 8001e24:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e28:	e000      	b.n	8001e2c <flight_control_loop_update_rc_control+0x54>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d501      	bpl.n	8001e44 <flight_control_loop_update_rc_control+0x6c>
 8001e40:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e42:	e00c      	b.n	8001e5e <flight_control_loop_update_rc_control+0x86>
 8001e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dd02      	ble.n	8001e5c <flight_control_loop_update_rc_control+0x84>
 8001e56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e5a:	e000      	b.n	8001e5e <flight_control_loop_update_rc_control+0x86>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e64:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d501      	bpl.n	8001e76 <flight_control_loop_update_rc_control+0x9e>
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e74:	e00c      	b.n	8001e90 <flight_control_loop_update_rc_control+0xb8>
 8001e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	dd02      	ble.n	8001e8e <flight_control_loop_update_rc_control+0xb6>
 8001e88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e8c:	e000      	b.n	8001e90 <flight_control_loop_update_rc_control+0xb8>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d502      	bpl.n	8001ea6 <flight_control_loop_update_rc_control+0xce>
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e00c      	b.n	8001ec0 <flight_control_loop_update_rc_control+0xe8>
 8001ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd02      	ble.n	8001ebe <flight_control_loop_update_rc_control+0xe6>
 8001eb8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ebc:	e000      	b.n	8001ec0 <flight_control_loop_update_rc_control+0xe8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f013 ff55 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001edc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ee4:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ee8:	eeb0 1a66 	vmov.f32	s2, s13
 8001eec:	eef0 0a47 	vmov.f32	s1, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fb31 	bl	800555c <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001f00:	2300      	movs	r3, #0
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	f013 fcb7 	bl	8015878 <xQueueGenericSend>
#endif
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	bf800000 	.word	0xbf800000

08001f18 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	61f8      	str	r0, [r7, #28]
 8001f20:	eeb0 5a40 	vmov.f32	s10, s0
 8001f24:	eef0 5a60 	vmov.f32	s11, s1
 8001f28:	eeb0 6a41 	vmov.f32	s12, s2
 8001f2c:	eef0 6a61 	vmov.f32	s13, s3
 8001f30:	eeb0 7a42 	vmov.f32	s14, s4
 8001f34:	eef0 7a62 	vmov.f32	s15, s5
 8001f38:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f3c:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f40:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f44:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f48:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f4c:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f013 ff0e 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f66:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f6a:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f6e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7a:	eef0 1a45 	vmov.f32	s3, s10
 8001f7e:	eeb0 2a65 	vmov.f32	s4, s11
 8001f82:	eef0 2a46 	vmov.f32	s5, s12
 8001f86:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8a:	eef0 0a47 	vmov.f32	s1, s14
 8001f8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 ff19 	bl	8003dca <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f013 fc68 	bl	8015878 <xQueueGenericSend>
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f013 fed9 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e00d      	b.n	8001fec <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	32ec      	adds	r2, #236	@ 0xec
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	440a      	add	r2, r1
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d9ee      	bls.n	8001fd0 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f013 fc3b 	bl	8015878 <xQueueGenericSend>
#endif
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <rate_controller_roll_pid_set_fn>:
static const char rate_controller_yaw_pid[] = "rate_controller_yaw_pid";
static const char level_p[] = "level_p";
static const char max_angle[] = "max_angle";

/*=================================================================================*/
int32_t rate_controller_roll_pid_set_fn(int32_t argc, char** argv){
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	if(argc < 5){return -1;}
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b04      	cmp	r3, #4
 800201a:	dc02      	bgt.n	8002022 <rate_controller_roll_pid_set_fn+0x16>
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	e08e      	b.n	8002140 <rate_controller_roll_pid_set_fn+0x134>
	int32_t argc_index = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002026:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002028:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	4618      	mov	r0, r3
 8002032:	f013 fea3 	bl	8015d7c <xQueueSemaphoreTake>
			#endif
				int error_detected = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
				float kp, ki, kd, max_integral_error, kff;
				if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f107 021c 	add.w	r2, r7, #28
 8002048:	4940      	ldr	r1, [pc, #256]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 800204a:	4618      	mov	r0, r3
 800204c:	f019 fe5e 	bl	801bd0c <siscanf>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <rate_controller_roll_pid_set_fn+0x4e>
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	3301      	adds	r3, #1
 800205e:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f107 0218 	add.w	r2, r7, #24
 800206e:	4937      	ldr	r1, [pc, #220]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 8002070:	4618      	mov	r0, r3
 8002072:	f019 fe4b 	bl	801bd0c <siscanf>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <rate_controller_roll_pid_set_fn+0x74>
 800207c:	2301      	movs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	3301      	adds	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f107 0214 	add.w	r2, r7, #20
 8002094:	492d      	ldr	r1, [pc, #180]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 8002096:	4618      	mov	r0, r3
 8002098:	f019 fe38 	bl	801bd0c <siscanf>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <rate_controller_roll_pid_set_fn+0x9a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	3301      	adds	r3, #1
 80020aa:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f107 0210 	add.w	r2, r7, #16
 80020ba:	4924      	ldr	r1, [pc, #144]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f019 fe25 	bl	801bd0c <siscanf>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d001      	beq.n	80020cc <rate_controller_roll_pid_set_fn+0xc0>
 80020c8:	2301      	movs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	3301      	adds	r3, #1
 80020d0:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kff) != 1) {error_detected = 1;}
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f107 020c 	add.w	r2, r7, #12
 80020e0:	491a      	ldr	r1, [pc, #104]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f019 fe12 	bl	801bd0c <siscanf>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <rate_controller_roll_pid_set_fn+0xe6>
 80020ee:	2301      	movs	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24

				if(error_detected == 0){
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d114      	bne.n	8002122 <rate_controller_roll_pid_set_fn+0x116>
					fcl.rate_controller.pid_roll.Kp = kp;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 80020fc:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
					fcl.rate_controller.pid_roll.Ki = ki;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002104:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
					fcl.rate_controller.pid_roll.Kd = kd;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 800210c:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
					fcl.rate_controller.pid_roll.integral_max_error = max_integral_error;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002114:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
					fcl.rate_controller.pid_roll_k_ff = kff;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 800211c:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
 8002120:	e005      	b.n	800212e <rate_controller_roll_pid_set_fn+0x122>
				}
				else{
					OUT_PRINTF("\r\n");
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <rate_controller_roll_pid_set_fn+0x144>)
 8002124:	f016 fbf6 	bl	8018914 <usb_printf>
					OUT_PRINTF("ERROR: Parsing error\r\n");
 8002128:	480a      	ldr	r0, [pc, #40]	@ (8002154 <rate_controller_roll_pid_set_fn+0x148>)
 800212a:	f016 fbf3 	bl	8018914 <usb_printf>
				}
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreGive(fcl.rate_controller_mutex);
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002130:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002134:	2300      	movs	r3, #0
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	f013 fb9d 	bl	8015878 <xQueueGenericSend>
			#endif
	return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3728      	adds	r7, #40	@ 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20001314 	.word	0x20001314
 800214c:	0801fcd8 	.word	0x0801fcd8
 8002150:	0801fcdc 	.word	0x0801fcdc
 8002154:	0801fce0 	.word	0x0801fce0

08002158 <rate_controller_roll_pid_set_info_fn>:

int32_t rate_controller_roll_pid_set_info_fn(){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 800215c:	4804      	ldr	r0, [pc, #16]	@ (8002170 <rate_controller_roll_pid_set_info_fn+0x18>)
 800215e:	f016 fbd9 	bl	8018914 <usb_printf>
	OUT_PRINTF("set %s (float)kp (float)ki (float)kd (float)max_integral_error (float)Kff\r\n", rate_controller_roll_pid);
 8002162:	4904      	ldr	r1, [pc, #16]	@ (8002174 <rate_controller_roll_pid_set_info_fn+0x1c>)
 8002164:	4804      	ldr	r0, [pc, #16]	@ (8002178 <rate_controller_roll_pid_set_info_fn+0x20>)
 8002166:	f016 fbd5 	bl	8018914 <usb_printf>
}
 800216a:	bf00      	nop
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	0801fcdc 	.word	0x0801fcdc
 8002174:	08021f94 	.word	0x08021f94
 8002178:	0801fcf8 	.word	0x0801fcf8

0800217c <rate_controller_roll_pid_get_fn>:

int32_t rate_controller_roll_pid_get_fn(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", rate_controller_roll_pid);
 8002180:	492c      	ldr	r1, [pc, #176]	@ (8002234 <rate_controller_roll_pid_get_fn+0xb8>)
 8002182:	482d      	ldr	r0, [pc, #180]	@ (8002238 <rate_controller_roll_pid_get_fn+0xbc>)
 8002184:	f016 fbc6 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002188:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 800218a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800218e:	f04f 31ff 	mov.w	r1, #4294967295
 8002192:	4618      	mov	r0, r3
 8002194:	f013 fdf2 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("Kp: %f\r\n", fcl.rate_controller.pid_roll.Kp);
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 800219a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9e2 	bl	8000568 <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4825      	ldr	r0, [pc, #148]	@ (8002240 <rate_controller_roll_pid_get_fn+0xc4>)
 80021aa:	f016 fbb3 	bl	8018914 <usb_printf>
	OUT_PRINTF("Ki: %f\r\n", fcl.rate_controller.pid_roll.Ki);
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021b0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9d7 	bl	8000568 <__aeabi_f2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4821      	ldr	r0, [pc, #132]	@ (8002244 <rate_controller_roll_pid_get_fn+0xc8>)
 80021c0:	f016 fba8 	bl	8018914 <usb_printf>
	OUT_PRINTF("Kd: %f\r\n", fcl.rate_controller.pid_roll.Kd);
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021c6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9cc 	bl	8000568 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	481c      	ldr	r0, [pc, #112]	@ (8002248 <rate_controller_roll_pid_get_fn+0xcc>)
 80021d6:	f016 fb9d 	bl	8018914 <usb_printf>
	OUT_PRINTF("integral_max_error: %f\r\n", fcl.rate_controller.pid_roll.integral_max_error);
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021dc:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9c1 	bl	8000568 <__aeabi_f2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4818      	ldr	r0, [pc, #96]	@ (800224c <rate_controller_roll_pid_get_fn+0xd0>)
 80021ec:	f016 fb92 	bl	8018914 <usb_printf>
	OUT_PRINTF("Kff: %f\r\n", fcl.rate_controller.pid_roll_k_ff);
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021f2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f9b6 	bl	8000568 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4813      	ldr	r0, [pc, #76]	@ (8002250 <rate_controller_roll_pid_get_fn+0xd4>)
 8002202:	f016 fb87 	bl	8018914 <usb_printf>
	OUT_PRINTF("Max Output: +/- %f\r\n", fcl.rate_controller.pid_roll.max_output);
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 8002208:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9ab 	bl	8000568 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	480f      	ldr	r0, [pc, #60]	@ (8002254 <rate_controller_roll_pid_get_fn+0xd8>)
 8002218:	f016 fb7c 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 800221e:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002222:	2300      	movs	r3, #0
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	f013 fb26 	bl	8015878 <xQueueGenericSend>
#endif
}
 800222c:	bf00      	nop
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	08021f94 	.word	0x08021f94
 8002238:	0801fd44 	.word	0x0801fd44
 800223c:	20001314 	.word	0x20001314
 8002240:	0801fd58 	.word	0x0801fd58
 8002244:	0801fd64 	.word	0x0801fd64
 8002248:	0801fd70 	.word	0x0801fd70
 800224c:	0801fd7c 	.word	0x0801fd7c
 8002250:	0801fd98 	.word	0x0801fd98
 8002254:	0801fda4 	.word	0x0801fda4

08002258 <rate_controller_pitch_pid_set_fn>:
/*=================================================================================*/

/*=================================================================================*/
int32_t rate_controller_pitch_pid_set_fn(int32_t argc, char** argv){
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	if(argc < 5){return -1;}
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b04      	cmp	r3, #4
 8002266:	dc02      	bgt.n	800226e <rate_controller_pitch_pid_set_fn+0x16>
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	e08e      	b.n	800238c <rate_controller_pitch_pid_set_fn+0x134>
	int32_t argc_index = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002272:	4b48      	ldr	r3, [pc, #288]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002274:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	4618      	mov	r0, r3
 800227e:	f013 fd7d 	bl	8015d7c <xQueueSemaphoreTake>
			#endif
				int error_detected = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
				float kp, ki, kd, max_integral_error, kff;
				if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f107 021c 	add.w	r2, r7, #28
 8002294:	4940      	ldr	r1, [pc, #256]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 8002296:	4618      	mov	r0, r3
 8002298:	f019 fd38 	bl	801bd0c <siscanf>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <rate_controller_pitch_pid_set_fn+0x4e>
 80022a2:	2301      	movs	r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	3301      	adds	r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f107 0218 	add.w	r2, r7, #24
 80022ba:	4937      	ldr	r1, [pc, #220]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f019 fd25 	bl	801bd0c <siscanf>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d001      	beq.n	80022cc <rate_controller_pitch_pid_set_fn+0x74>
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	3301      	adds	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f107 0214 	add.w	r2, r7, #20
 80022e0:	492d      	ldr	r1, [pc, #180]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f019 fd12 	bl	801bd0c <siscanf>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <rate_controller_pitch_pid_set_fn+0x9a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	3301      	adds	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f107 0210 	add.w	r2, r7, #16
 8002306:	4924      	ldr	r1, [pc, #144]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 8002308:	4618      	mov	r0, r3
 800230a:	f019 fcff 	bl	801bd0c <siscanf>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d001      	beq.n	8002318 <rate_controller_pitch_pid_set_fn+0xc0>
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3301      	adds	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kff) != 1) {error_detected = 1;}
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f107 020c 	add.w	r2, r7, #12
 800232c:	491a      	ldr	r1, [pc, #104]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 800232e:	4618      	mov	r0, r3
 8002330:	f019 fcec 	bl	801bd0c <siscanf>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <rate_controller_pitch_pid_set_fn+0xe6>
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24

				if(error_detected == 0){
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d114      	bne.n	800236e <rate_controller_pitch_pid_set_fn+0x116>
					fcl.rate_controller.pid_pitch.Kp = kp;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002348:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
					fcl.rate_controller.pid_pitch.Ki = ki;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002350:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
					fcl.rate_controller.pid_pitch.Kd = kd;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	4a0f      	ldr	r2, [pc, #60]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002358:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
					fcl.rate_controller.pid_pitch.integral_max_error = max_integral_error;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002360:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
					fcl.rate_controller.pid_pitch_k_ff = kff;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a0b      	ldr	r2, [pc, #44]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002368:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
 800236c:	e005      	b.n	800237a <rate_controller_pitch_pid_set_fn+0x122>
				}
				else{
					OUT_PRINTF("\r\n");
 800236e:	480b      	ldr	r0, [pc, #44]	@ (800239c <rate_controller_pitch_pid_set_fn+0x144>)
 8002370:	f016 fad0 	bl	8018914 <usb_printf>
					OUT_PRINTF("ERROR: Parsing error\r\n");
 8002374:	480a      	ldr	r0, [pc, #40]	@ (80023a0 <rate_controller_pitch_pid_set_fn+0x148>)
 8002376:	f016 facd 	bl	8018914 <usb_printf>
				}
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreGive(fcl.rate_controller_mutex);
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 800237c:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002380:	2300      	movs	r3, #0
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	f013 fa77 	bl	8015878 <xQueueGenericSend>
			#endif
	return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20001314 	.word	0x20001314
 8002398:	0801fcd8 	.word	0x0801fcd8
 800239c:	0801fcdc 	.word	0x0801fcdc
 80023a0:	0801fce0 	.word	0x0801fce0

080023a4 <rate_controller_pitch_pid_set_info_fn>:

int32_t rate_controller_pitch_pid_set_info_fn(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 80023a8:	4804      	ldr	r0, [pc, #16]	@ (80023bc <rate_controller_pitch_pid_set_info_fn+0x18>)
 80023aa:	f016 fab3 	bl	8018914 <usb_printf>
	OUT_PRINTF("set %s (float)kp (float)ki (float)kd (float)max_integral_error (float)Kff\r\n", rate_controller_pitch_pid);
 80023ae:	4904      	ldr	r1, [pc, #16]	@ (80023c0 <rate_controller_pitch_pid_set_info_fn+0x1c>)
 80023b0:	4804      	ldr	r0, [pc, #16]	@ (80023c4 <rate_controller_pitch_pid_set_info_fn+0x20>)
 80023b2:	f016 faaf 	bl	8018914 <usb_printf>
}
 80023b6:	bf00      	nop
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	0801fcdc 	.word	0x0801fcdc
 80023c0:	08021fb0 	.word	0x08021fb0
 80023c4:	0801fcf8 	.word	0x0801fcf8

080023c8 <rate_controller_pitch_pid_get_fn>:

int32_t rate_controller_pitch_pid_get_fn(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", rate_controller_pitch_pid);
 80023cc:	492c      	ldr	r1, [pc, #176]	@ (8002480 <rate_controller_pitch_pid_get_fn+0xb8>)
 80023ce:	482d      	ldr	r0, [pc, #180]	@ (8002484 <rate_controller_pitch_pid_get_fn+0xbc>)
 80023d0:	f016 faa0 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 80023d6:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 80023da:	f04f 31ff 	mov.w	r1, #4294967295
 80023de:	4618      	mov	r0, r3
 80023e0:	f013 fccc 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("Kp: %f\r\n", fcl.rate_controller.pid_pitch.Kp);
 80023e4:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 80023e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8bc 	bl	8000568 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4825      	ldr	r0, [pc, #148]	@ (800248c <rate_controller_pitch_pid_get_fn+0xc4>)
 80023f6:	f016 fa8d 	bl	8018914 <usb_printf>
	OUT_PRINTF("Ki: %f\r\n", fcl.rate_controller.pid_pitch.Ki);
 80023fa:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 80023fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f8b1 	bl	8000568 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4821      	ldr	r0, [pc, #132]	@ (8002490 <rate_controller_pitch_pid_get_fn+0xc8>)
 800240c:	f016 fa82 	bl	8018914 <usb_printf>
	OUT_PRINTF("Kd: %f\r\n", fcl.rate_controller.pid_pitch.Kd);
 8002410:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 8002412:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f8a6 	bl	8000568 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	481c      	ldr	r0, [pc, #112]	@ (8002494 <rate_controller_pitch_pid_get_fn+0xcc>)
 8002422:	f016 fa77 	bl	8018914 <usb_printf>
	OUT_PRINTF("integral_max_error: %f\r\n", fcl.rate_controller.pid_pitch.integral_max_error);
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 8002428:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f89b 	bl	8000568 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4818      	ldr	r0, [pc, #96]	@ (8002498 <rate_controller_pitch_pid_get_fn+0xd0>)
 8002438:	f016 fa6c 	bl	8018914 <usb_printf>
	OUT_PRINTF("Kff: %f\r\n", fcl.rate_controller.pid_pitch_k_ff);
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 800243e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f890 	bl	8000568 <__aeabi_f2d>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4813      	ldr	r0, [pc, #76]	@ (800249c <rate_controller_pitch_pid_get_fn+0xd4>)
 800244e:	f016 fa61 	bl	8018914 <usb_printf>
	OUT_PRINTF("Max Output: +/- %f\r\n", fcl.rate_controller.pid_pitch.max_output);
 8002452:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 8002454:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f885 	bl	8000568 <__aeabi_f2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	480f      	ldr	r0, [pc, #60]	@ (80024a0 <rate_controller_pitch_pid_get_fn+0xd8>)
 8002464:	f016 fa56 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8002468:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 800246a:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800246e:	2300      	movs	r3, #0
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	f013 fa00 	bl	8015878 <xQueueGenericSend>
#endif
}
 8002478:	bf00      	nop
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	08021fb0 	.word	0x08021fb0
 8002484:	0801fd44 	.word	0x0801fd44
 8002488:	20001314 	.word	0x20001314
 800248c:	0801fd58 	.word	0x0801fd58
 8002490:	0801fd64 	.word	0x0801fd64
 8002494:	0801fd70 	.word	0x0801fd70
 8002498:	0801fd7c 	.word	0x0801fd7c
 800249c:	0801fd98 	.word	0x0801fd98
 80024a0:	0801fda4 	.word	0x0801fda4

080024a4 <rate_controller_yaw_pid_set_fn>:
/*=================================================================================*/

/*=================================================================================*/
int32_t rate_controller_yaw_pid_set_fn(int32_t argc, char** argv){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	if(argc < 5){return -1;}
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	dc02      	bgt.n	80024ba <rate_controller_yaw_pid_set_fn+0x16>
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
 80024b8:	e08e      	b.n	80025d8 <rate_controller_yaw_pid_set_fn+0x134>
	int32_t argc_index = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 80024be:	4b48      	ldr	r3, [pc, #288]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80024c0:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	4618      	mov	r0, r3
 80024ca:	f013 fc57 	bl	8015d7c <xQueueSemaphoreTake>
			#endif
				int error_detected = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
				float kp, ki, kd, max_integral_error, kff;
				if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f107 021c 	add.w	r2, r7, #28
 80024e0:	4940      	ldr	r1, [pc, #256]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f019 fc12 	bl	801bd0c <siscanf>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <rate_controller_yaw_pid_set_fn+0x4e>
 80024ee:	2301      	movs	r3, #1
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	3301      	adds	r3, #1
 80024f6:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f107 0218 	add.w	r2, r7, #24
 8002506:	4937      	ldr	r1, [pc, #220]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 8002508:	4618      	mov	r0, r3
 800250a:	f019 fbff 	bl	801bd0c <siscanf>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <rate_controller_yaw_pid_set_fn+0x74>
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	3301      	adds	r3, #1
 800251c:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f107 0214 	add.w	r2, r7, #20
 800252c:	492d      	ldr	r1, [pc, #180]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 800252e:	4618      	mov	r0, r3
 8002530:	f019 fbec 	bl	801bd0c <siscanf>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <rate_controller_yaw_pid_set_fn+0x9a>
 800253a:	2301      	movs	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	3301      	adds	r3, #1
 8002542:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f107 0210 	add.w	r2, r7, #16
 8002552:	4924      	ldr	r1, [pc, #144]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 8002554:	4618      	mov	r0, r3
 8002556:	f019 fbd9 	bl	801bd0c <siscanf>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <rate_controller_yaw_pid_set_fn+0xc0>
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	3301      	adds	r3, #1
 8002568:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kff) != 1) {error_detected = 1;}
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4413      	add	r3, r2
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	491a      	ldr	r1, [pc, #104]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 800257a:	4618      	mov	r0, r3
 800257c:	f019 fbc6 	bl	801bd0c <siscanf>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <rate_controller_yaw_pid_set_fn+0xe6>
 8002586:	2301      	movs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24

				if(error_detected == 0){
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d114      	bne.n	80025ba <rate_controller_yaw_pid_set_fn+0x116>
					fcl.rate_controller.pid_yaw.Kp = kp;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 8002594:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
					fcl.rate_controller.pid_yaw.Ki = ki;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 800259c:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
					fcl.rate_controller.pid_yaw.Kd = kd;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025a4:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
					fcl.rate_controller.pid_yaw.integral_max_error = max_integral_error;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025ac:	f8c2 31e8 	str.w	r3, [r2, #488]	@ 0x1e8
					fcl.rate_controller.pid_yaw_k_ff = kff;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025b4:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 80025b8:	e005      	b.n	80025c6 <rate_controller_yaw_pid_set_fn+0x122>
				}
				else{
					OUT_PRINTF("\r\n");
 80025ba:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <rate_controller_yaw_pid_set_fn+0x144>)
 80025bc:	f016 f9aa 	bl	8018914 <usb_printf>
					OUT_PRINTF("ERROR: Parsing error\r\n");
 80025c0:	480a      	ldr	r0, [pc, #40]	@ (80025ec <rate_controller_yaw_pid_set_fn+0x148>)
 80025c2:	f016 f9a7 	bl	8018914 <usb_printf>
				}
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreGive(fcl.rate_controller_mutex);
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025c8:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 80025cc:	2300      	movs	r3, #0
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	f013 f951 	bl	8015878 <xQueueGenericSend>
			#endif
	return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20001314 	.word	0x20001314
 80025e4:	0801fcd8 	.word	0x0801fcd8
 80025e8:	0801fcdc 	.word	0x0801fcdc
 80025ec:	0801fce0 	.word	0x0801fce0

080025f0 <rate_controller_yaw_pid_set_info_fn>:

int32_t rate_controller_yaw_pid_set_info_fn(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 80025f4:	4804      	ldr	r0, [pc, #16]	@ (8002608 <rate_controller_yaw_pid_set_info_fn+0x18>)
 80025f6:	f016 f98d 	bl	8018914 <usb_printf>
	OUT_PRINTF("set %s (float)kp (float)ki (float)kd (float)max_integral_error (float)Kff\r\n", rate_controller_yaw_pid);
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <rate_controller_yaw_pid_set_info_fn+0x1c>)
 80025fc:	4804      	ldr	r0, [pc, #16]	@ (8002610 <rate_controller_yaw_pid_set_info_fn+0x20>)
 80025fe:	f016 f989 	bl	8018914 <usb_printf>
}
 8002602:	bf00      	nop
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	0801fcdc 	.word	0x0801fcdc
 800260c:	08021fcc 	.word	0x08021fcc
 8002610:	0801fcf8 	.word	0x0801fcf8

08002614 <rate_controller_yaw_pid_get_fn>:

int32_t rate_controller_yaw_pid_get_fn(){
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", rate_controller_yaw_pid);
 8002618:	492c      	ldr	r1, [pc, #176]	@ (80026cc <rate_controller_yaw_pid_get_fn+0xb8>)
 800261a:	482d      	ldr	r0, [pc, #180]	@ (80026d0 <rate_controller_yaw_pid_get_fn+0xbc>)
 800261c:	f016 f97a 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002622:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8002626:	f04f 31ff 	mov.w	r1, #4294967295
 800262a:	4618      	mov	r0, r3
 800262c:	f013 fba6 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("Kp: %f\r\n", fcl.rate_controller.pid_yaw.Kp);
 8002630:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002632:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff96 	bl	8000568 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4825      	ldr	r0, [pc, #148]	@ (80026d8 <rate_controller_yaw_pid_get_fn+0xc4>)
 8002642:	f016 f967 	bl	8018914 <usb_printf>
	OUT_PRINTF("Ki: %f\r\n", fcl.rate_controller.pid_yaw.Ki);
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002648:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff8b 	bl	8000568 <__aeabi_f2d>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4821      	ldr	r0, [pc, #132]	@ (80026dc <rate_controller_yaw_pid_get_fn+0xc8>)
 8002658:	f016 f95c 	bl	8018914 <usb_printf>
	OUT_PRINTF("Kd: %f\r\n", fcl.rate_controller.pid_yaw.Kd);
 800265c:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 800265e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff80 	bl	8000568 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	481c      	ldr	r0, [pc, #112]	@ (80026e0 <rate_controller_yaw_pid_get_fn+0xcc>)
 800266e:	f016 f951 	bl	8018914 <usb_printf>
	OUT_PRINTF("integral_max_error: %f\r\n", fcl.rate_controller.pid_yaw.integral_max_error);
 8002672:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002674:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff75 	bl	8000568 <__aeabi_f2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4818      	ldr	r0, [pc, #96]	@ (80026e4 <rate_controller_yaw_pid_get_fn+0xd0>)
 8002684:	f016 f946 	bl	8018914 <usb_printf>
	OUT_PRINTF("Kff: %f\r\n", fcl.rate_controller.pid_yaw_k_ff);
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 800268a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff6a 	bl	8000568 <__aeabi_f2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4813      	ldr	r0, [pc, #76]	@ (80026e8 <rate_controller_yaw_pid_get_fn+0xd4>)
 800269a:	f016 f93b 	bl	8018914 <usb_printf>
	OUT_PRINTF("Max Output: +/- %f\r\n", fcl.rate_controller.pid_yaw.max_output);
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 80026a0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff5f 	bl	8000568 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	480f      	ldr	r0, [pc, #60]	@ (80026ec <rate_controller_yaw_pid_get_fn+0xd8>)
 80026b0:	f016 f930 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 80026b6:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	f013 f8da 	bl	8015878 <xQueueGenericSend>
#endif
}
 80026c4:	bf00      	nop
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	08021fcc 	.word	0x08021fcc
 80026d0:	0801fd44 	.word	0x0801fd44
 80026d4:	20001314 	.word	0x20001314
 80026d8:	0801fd58 	.word	0x0801fd58
 80026dc:	0801fd64 	.word	0x0801fd64
 80026e0:	0801fd70 	.word	0x0801fd70
 80026e4:	0801fd7c 	.word	0x0801fd7c
 80026e8:	0801fd98 	.word	0x0801fd98
 80026ec:	0801fda4 	.word	0x0801fda4

080026f0 <attitude_controller_level_p_set_info_fn>:
				xSemaphoreGive(fcl.attitude_controller_mutex);
			#endif
	return 0;
}

int32_t attitude_controller_level_p_set_info_fn(){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 80026f4:	4804      	ldr	r0, [pc, #16]	@ (8002708 <attitude_controller_level_p_set_info_fn+0x18>)
 80026f6:	f016 f90d 	bl	8018914 <usb_printf>
	OUT_PRINTF("set %s (float)level_p\r\n", level_p);
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <attitude_controller_level_p_set_info_fn+0x1c>)
 80026fc:	4804      	ldr	r0, [pc, #16]	@ (8002710 <attitude_controller_level_p_set_info_fn+0x20>)
 80026fe:	f016 f909 	bl	8018914 <usb_printf>
}
 8002702:	bf00      	nop
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	0801fcdc 	.word	0x0801fcdc
 800270c:	08021fe4 	.word	0x08021fe4
 8002710:	0801fdbc 	.word	0x0801fdbc

08002714 <attitude_controller_level_p_get_fn>:

int32_t attitude_controller_level_p_get_fn(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", level_p);
 8002718:	4910      	ldr	r1, [pc, #64]	@ (800275c <attitude_controller_level_p_get_fn+0x48>)
 800271a:	4811      	ldr	r0, [pc, #68]	@ (8002760 <attitude_controller_level_p_get_fn+0x4c>)
 800271c:	f016 f8fa 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <attitude_controller_level_p_get_fn+0x50>)
 8002722:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8002726:	f04f 31ff 	mov.w	r1, #4294967295
 800272a:	4618      	mov	r0, r3
 800272c:	f013 fb26 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("level_p: %f\r\n", fcl.attitude_controller.rate_gain);
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <attitude_controller_level_p_get_fn+0x50>)
 8002732:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff16 	bl	8000568 <__aeabi_f2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4809      	ldr	r0, [pc, #36]	@ (8002768 <attitude_controller_level_p_get_fn+0x54>)
 8002742:	f016 f8e7 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <attitude_controller_level_p_get_fn+0x50>)
 8002748:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	f013 f891 	bl	8015878 <xQueueGenericSend>
#endif
}
 8002756:	bf00      	nop
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	08021fe4 	.word	0x08021fe4
 8002760:	0801fd44 	.word	0x0801fd44
 8002764:	20001314 	.word	0x20001314
 8002768:	0801fdd4 	.word	0x0801fdd4

0800276c <attitude_controller_max_angle_set_info_fn>:
				xSemaphoreGive(fcl.attitude_controller_mutex);
			#endif
	return 0;
}

int32_t attitude_controller_max_angle_set_info_fn(){
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 8002770:	4804      	ldr	r0, [pc, #16]	@ (8002784 <attitude_controller_max_angle_set_info_fn+0x18>)
 8002772:	f016 f8cf 	bl	8018914 <usb_printf>
	OUT_PRINTF("set %s (float radians)max_angle\r\n", max_angle);
 8002776:	4904      	ldr	r1, [pc, #16]	@ (8002788 <attitude_controller_max_angle_set_info_fn+0x1c>)
 8002778:	4804      	ldr	r0, [pc, #16]	@ (800278c <attitude_controller_max_angle_set_info_fn+0x20>)
 800277a:	f016 f8cb 	bl	8018914 <usb_printf>
}
 800277e:	bf00      	nop
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0801fcdc 	.word	0x0801fcdc
 8002788:	08021fec 	.word	0x08021fec
 800278c:	0801fde4 	.word	0x0801fde4

08002790 <attitude_controller_max_angle_get_fn>:

int32_t attitude_controller_max_angle_get_fn(){
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", level_p);
 8002794:	4910      	ldr	r1, [pc, #64]	@ (80027d8 <attitude_controller_max_angle_get_fn+0x48>)
 8002796:	4811      	ldr	r0, [pc, #68]	@ (80027dc <attitude_controller_max_angle_get_fn+0x4c>)
 8002798:	f016 f8bc 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <attitude_controller_max_angle_get_fn+0x50>)
 800279e:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 80027a2:	f04f 31ff 	mov.w	r1, #4294967295
 80027a6:	4618      	mov	r0, r3
 80027a8:	f013 fae8 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("max_angle [radians]: %f\r\n", fcl.attitude_controller.max_angle);
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <attitude_controller_max_angle_get_fn+0x50>)
 80027ae:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fed8 	bl	8000568 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <attitude_controller_max_angle_get_fn+0x54>)
 80027be:	f016 f8a9 	bl	8018914 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <attitude_controller_max_angle_get_fn+0x50>)
 80027c4:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 80027c8:	2300      	movs	r3, #0
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	f013 f853 	bl	8015878 <xQueueGenericSend>
#endif
}
 80027d2:	bf00      	nop
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	08021fe4 	.word	0x08021fe4
 80027dc:	0801fd44 	.word	0x0801fd44
 80027e0:	20001314 	.word	0x20001314
 80027e4:	0801fe08 	.word	0x0801fe08

080027e8 <init_parameters_arr>:
/*=================================================================================*/

void init_parameters_arr(){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	memset(parameters_arr, 0, sizeof(parameters_arr));
 80027ee:	22c8      	movs	r2, #200	@ 0xc8
 80027f0:	2100      	movs	r1, #0
 80027f2:	4886      	ldr	r0, [pc, #536]	@ (8002a0c <init_parameters_arr+0x224>)
 80027f4:	f019 fbe6 	bl	801bfc4 <memset>
	int param_index = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = rate_controller_roll_pid;
 80027fc:	4983      	ldr	r1, [pc, #524]	@ (8002a0c <init_parameters_arr+0x224>)
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	4a81      	ldr	r2, [pc, #516]	@ (8002a10 <init_parameters_arr+0x228>)
 800280c:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 5;
 800280e:	497f      	ldr	r1, [pc, #508]	@ (8002a0c <init_parameters_arr+0x224>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3304      	adds	r3, #4
 800281e:	2205      	movs	r2, #5
 8002820:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = rate_controller_roll_pid_set_fn;
 8002822:	497a      	ldr	r1, [pc, #488]	@ (8002a0c <init_parameters_arr+0x224>)
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3308      	adds	r3, #8
 8002832:	4a78      	ldr	r2, [pc, #480]	@ (8002a14 <init_parameters_arr+0x22c>)
 8002834:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = rate_controller_roll_pid_set_info_fn;
 8002836:	4975      	ldr	r1, [pc, #468]	@ (8002a0c <init_parameters_arr+0x224>)
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	330c      	adds	r3, #12
 8002846:	4a74      	ldr	r2, [pc, #464]	@ (8002a18 <init_parameters_arr+0x230>)
 8002848:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = rate_controller_roll_pid_get_fn;
 800284a:	4970      	ldr	r1, [pc, #448]	@ (8002a0c <init_parameters_arr+0x224>)
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3310      	adds	r3, #16
 800285a:	4a70      	ldr	r2, [pc, #448]	@ (8002a1c <init_parameters_arr+0x234>)
 800285c:	601a      	str	r2, [r3, #0]

	param_index++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3301      	adds	r3, #1
 8002862:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = rate_controller_pitch_pid;
 8002864:	4969      	ldr	r1, [pc, #420]	@ (8002a0c <init_parameters_arr+0x224>)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	4a6b      	ldr	r2, [pc, #428]	@ (8002a20 <init_parameters_arr+0x238>)
 8002874:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 5;
 8002876:	4965      	ldr	r1, [pc, #404]	@ (8002a0c <init_parameters_arr+0x224>)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3304      	adds	r3, #4
 8002886:	2205      	movs	r2, #5
 8002888:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = rate_controller_pitch_pid_set_fn;
 800288a:	4960      	ldr	r1, [pc, #384]	@ (8002a0c <init_parameters_arr+0x224>)
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3308      	adds	r3, #8
 800289a:	4a62      	ldr	r2, [pc, #392]	@ (8002a24 <init_parameters_arr+0x23c>)
 800289c:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = rate_controller_pitch_pid_set_info_fn;
 800289e:	495b      	ldr	r1, [pc, #364]	@ (8002a0c <init_parameters_arr+0x224>)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	330c      	adds	r3, #12
 80028ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002a28 <init_parameters_arr+0x240>)
 80028b0:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = rate_controller_pitch_pid_get_fn;
 80028b2:	4956      	ldr	r1, [pc, #344]	@ (8002a0c <init_parameters_arr+0x224>)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3310      	adds	r3, #16
 80028c2:	4a5a      	ldr	r2, [pc, #360]	@ (8002a2c <init_parameters_arr+0x244>)
 80028c4:	601a      	str	r2, [r3, #0]

	param_index++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3301      	adds	r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = rate_controller_yaw_pid;
 80028cc:	494f      	ldr	r1, [pc, #316]	@ (8002a0c <init_parameters_arr+0x224>)
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	4a55      	ldr	r2, [pc, #340]	@ (8002a30 <init_parameters_arr+0x248>)
 80028dc:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 5;
 80028de:	494b      	ldr	r1, [pc, #300]	@ (8002a0c <init_parameters_arr+0x224>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3304      	adds	r3, #4
 80028ee:	2205      	movs	r2, #5
 80028f0:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = rate_controller_yaw_pid_set_fn;
 80028f2:	4946      	ldr	r1, [pc, #280]	@ (8002a0c <init_parameters_arr+0x224>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3308      	adds	r3, #8
 8002902:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <init_parameters_arr+0x24c>)
 8002904:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = rate_controller_yaw_pid_set_info_fn;
 8002906:	4941      	ldr	r1, [pc, #260]	@ (8002a0c <init_parameters_arr+0x224>)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	330c      	adds	r3, #12
 8002916:	4a48      	ldr	r2, [pc, #288]	@ (8002a38 <init_parameters_arr+0x250>)
 8002918:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = rate_controller_yaw_pid_get_fn;
 800291a:	493c      	ldr	r1, [pc, #240]	@ (8002a0c <init_parameters_arr+0x224>)
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3310      	adds	r3, #16
 800292a:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <init_parameters_arr+0x254>)
 800292c:	601a      	str	r2, [r3, #0]

	param_index++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3301      	adds	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = level_p;
 8002934:	4935      	ldr	r1, [pc, #212]	@ (8002a0c <init_parameters_arr+0x224>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	4a3f      	ldr	r2, [pc, #252]	@ (8002a40 <init_parameters_arr+0x258>)
 8002944:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 1;
 8002946:	4931      	ldr	r1, [pc, #196]	@ (8002a0c <init_parameters_arr+0x224>)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3304      	adds	r3, #4
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = attitude_controller_level_p_set_info_fn;
 800295a:	492c      	ldr	r1, [pc, #176]	@ (8002a0c <init_parameters_arr+0x224>)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3308      	adds	r3, #8
 800296a:	4a36      	ldr	r2, [pc, #216]	@ (8002a44 <init_parameters_arr+0x25c>)
 800296c:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = attitude_controller_level_p_set_info_fn;
 800296e:	4927      	ldr	r1, [pc, #156]	@ (8002a0c <init_parameters_arr+0x224>)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	330c      	adds	r3, #12
 800297e:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <init_parameters_arr+0x25c>)
 8002980:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = attitude_controller_level_p_get_fn;
 8002982:	4922      	ldr	r1, [pc, #136]	@ (8002a0c <init_parameters_arr+0x224>)
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3310      	adds	r3, #16
 8002992:	4a2d      	ldr	r2, [pc, #180]	@ (8002a48 <init_parameters_arr+0x260>)
 8002994:	601a      	str	r2, [r3, #0]

	param_index++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3301      	adds	r3, #1
 800299a:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = max_angle;
 800299c:	491b      	ldr	r1, [pc, #108]	@ (8002a0c <init_parameters_arr+0x224>)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	4a28      	ldr	r2, [pc, #160]	@ (8002a4c <init_parameters_arr+0x264>)
 80029ac:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 1;
 80029ae:	4917      	ldr	r1, [pc, #92]	@ (8002a0c <init_parameters_arr+0x224>)
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3304      	adds	r3, #4
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = attitude_controller_max_angle_set_info_fn;
 80029c2:	4912      	ldr	r1, [pc, #72]	@ (8002a0c <init_parameters_arr+0x224>)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3308      	adds	r3, #8
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <init_parameters_arr+0x268>)
 80029d4:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = attitude_controller_max_angle_set_info_fn;
 80029d6:	490d      	ldr	r1, [pc, #52]	@ (8002a0c <init_parameters_arr+0x224>)
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	330c      	adds	r3, #12
 80029e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a50 <init_parameters_arr+0x268>)
 80029e8:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = attitude_controller_max_angle_get_fn;
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <init_parameters_arr+0x224>)
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3310      	adds	r3, #16
 80029fa:	4a16      	ldr	r2, [pc, #88]	@ (8002a54 <init_parameters_arr+0x26c>)
 80029fc:	601a      	str	r2, [r3, #0]

	param_index++;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3301      	adds	r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000044c 	.word	0x2000044c
 8002a10:	08021f94 	.word	0x08021f94
 8002a14:	0800200d 	.word	0x0800200d
 8002a18:	08002159 	.word	0x08002159
 8002a1c:	0800217d 	.word	0x0800217d
 8002a20:	08021fb0 	.word	0x08021fb0
 8002a24:	08002259 	.word	0x08002259
 8002a28:	080023a5 	.word	0x080023a5
 8002a2c:	080023c9 	.word	0x080023c9
 8002a30:	08021fcc 	.word	0x08021fcc
 8002a34:	080024a5 	.word	0x080024a5
 8002a38:	080025f1 	.word	0x080025f1
 8002a3c:	08002615 	.word	0x08002615
 8002a40:	08021fe4 	.word	0x08021fe4
 8002a44:	080026f1 	.word	0x080026f1
 8002a48:	08002715 	.word	0x08002715
 8002a4c:	08021fec 	.word	0x08021fec
 8002a50:	0800276d 	.word	0x0800276d
 8002a54:	08002791 	.word	0x08002791

08002a58 <command_set_list>:

void command_set_list(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	e022      	b.n	8002aaa <command_set_list+0x52>
		if(parameters_arr[i].set_info_fn != NULL && parameters_arr[i].set_fn != NULL){
 8002a64:	4915      	ldr	r1, [pc, #84]	@ (8002abc <command_set_list+0x64>)
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	330c      	adds	r3, #12
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d014      	beq.n	8002aa4 <command_set_list+0x4c>
 8002a7a:	4910      	ldr	r1, [pc, #64]	@ (8002abc <command_set_list+0x64>)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3308      	adds	r3, #8
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <command_set_list+0x4c>
			parameters_arr[i].set_info_fn();
 8002a90:	490a      	ldr	r1, [pc, #40]	@ (8002abc <command_set_list+0x64>)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4798      	blx	r3
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	ddd9      	ble.n	8002a64 <command_set_list+0xc>
		}
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000044c 	.word	0x2000044c

08002ac0 <command_get_list>:

void command_get_list(){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	e026      	b.n	8002b1a <command_get_list+0x5a>
		if(parameters_arr[i].get_fn != NULL && parameters_arr[i].name != NULL){
 8002acc:	4917      	ldr	r1, [pc, #92]	@ (8002b2c <command_get_list+0x6c>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3310      	adds	r3, #16
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d018      	beq.n	8002b14 <command_get_list+0x54>
 8002ae2:	4912      	ldr	r1, [pc, #72]	@ (8002b2c <command_get_list+0x6c>)
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <command_get_list+0x54>
			OUT_PRINTF("\r\n");
 8002af6:	480e      	ldr	r0, [pc, #56]	@ (8002b30 <command_get_list+0x70>)
 8002af8:	f015 ff0c 	bl	8018914 <usb_printf>
			OUT_PRINTF("%s\r\n", parameters_arr[i].name);
 8002afc:	490b      	ldr	r1, [pc, #44]	@ (8002b2c <command_get_list+0x6c>)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <command_get_list+0x74>)
 8002b10:	f015 ff00 	bl	8018914 <usb_printf>
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3301      	adds	r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	ddd5      	ble.n	8002acc <command_get_list+0xc>
		}
	}
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000044c 	.word	0x2000044c
 8002b30:	0801fcdc 	.word	0x0801fcdc
 8002b34:	0801fe24 	.word	0x0801fe24

08002b38 <set_cmd_fn>:




/* Command to get called */
int32_t set_cmd_fn(int32_t argc, char** argv) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
	if(argc < 2) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	dc07      	bgt.n	8002b58 <set_cmd_fn+0x20>
		OUT_PRINTF("\r\n");
 8002b48:	484b      	ldr	r0, [pc, #300]	@ (8002c78 <set_cmd_fn+0x140>)
 8002b4a:	f015 fee3 	bl	8018914 <usb_printf>
		OUT_PRINTF("Type \"set list\" to list all parameters that can be set.\r\n");
 8002b4e:	484b      	ldr	r0, [pc, #300]	@ (8002c7c <set_cmd_fn+0x144>)
 8002b50:	f015 fee0 	bl	8018914 <usb_printf>
		return 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e08b      	b.n	8002c70 <set_cmd_fn+0x138>
	}

	int argc_index = 1;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
	int parameter_found = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

	if(strcmp(argv[argc_index], "list") == 0){
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4945      	ldr	r1, [pc, #276]	@ (8002c80 <set_cmd_fn+0x148>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fb2f 	bl	80001d0 <strcmp>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <set_cmd_fn+0x4a>
		command_set_list();
 8002b78:	f7ff ff6e 	bl	8002a58 <command_set_list>
		parameter_found = 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e06c      	b.n	8002c5c <set_cmd_fn+0x124>
	}
	else{
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e066      	b.n	8002c56 <set_cmd_fn+0x11e>
			if(parameters_arr[i].name == NULL) continue;
 8002b88:	493e      	ldr	r1, [pc, #248]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d058      	beq.n	8002c4e <set_cmd_fn+0x116>

			if(strcmp(argv[argc_index], parameters_arr[i].name) == 0){
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	4937      	ldr	r1, [pc, #220]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd fb0a 	bl	80001d0 <strcmp>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d146      	bne.n	8002c50 <set_cmd_fn+0x118>
				parameter_found = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
				if(argc < (1+1+parameters_arr[i].total_input_parameters)) {
 8002bc6:	492f      	ldr	r1, [pc, #188]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dc10      	bgt.n	8002c02 <set_cmd_fn+0xca>
					OUT_PRINTF("\r\n");
 8002be0:	4825      	ldr	r0, [pc, #148]	@ (8002c78 <set_cmd_fn+0x140>)
 8002be2:	f015 fe97 	bl	8018914 <usb_printf>
					OUT_PRINTF("ERROR: Missing parameter\r\n");
 8002be6:	4828      	ldr	r0, [pc, #160]	@ (8002c88 <set_cmd_fn+0x150>)
 8002be8:	f015 fe94 	bl	8018914 <usb_printf>
					parameters_arr[i].set_info_fn();
 8002bec:	4925      	ldr	r1, [pc, #148]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4798      	blx	r3
 8002c00:	e026      	b.n	8002c50 <set_cmd_fn+0x118>
				}
				else{
					if(parameters_arr[i].set_fn == NULL){
 8002c02:	4920      	ldr	r1, [pc, #128]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3308      	adds	r3, #8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <set_cmd_fn+0xec>
						OUT_PRINTF("\r\n");
 8002c18:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <set_cmd_fn+0x140>)
 8002c1a:	f015 fe7b 	bl	8018914 <usb_printf>
						OUT_PRINTF("ERROR: Parameter Cannot be set\r\n");
 8002c1e:	481b      	ldr	r0, [pc, #108]	@ (8002c8c <set_cmd_fn+0x154>)
 8002c20:	f015 fe78 	bl	8018914 <usb_printf>
					}
					parameters_arr[i].set_fn(argc - argc_index - 1, &(argv[argc_index + 1]));
 8002c24:	4917      	ldr	r1, [pc, #92]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3308      	adds	r3, #8
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	1a8a      	subs	r2, r1, r2
 8002c3c:	1e50      	subs	r0, r2, #1
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	3201      	adds	r2, #1
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	440a      	add	r2, r1
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4798      	blx	r3
					break;
 8002c4c:	e006      	b.n	8002c5c <set_cmd_fn+0x124>
			if(parameters_arr[i].name == NULL) continue;
 8002c4e:	bf00      	nop
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3301      	adds	r3, #1
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b09      	cmp	r3, #9
 8002c5a:	dd95      	ble.n	8002b88 <set_cmd_fn+0x50>
				}
			}
		}
	}

	if(parameter_found == 0){
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <set_cmd_fn+0x136>
		OUT_PRINTF("\r\n");
 8002c62:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <set_cmd_fn+0x140>)
 8002c64:	f015 fe56 	bl	8018914 <usb_printf>
		OUT_PRINTF("ERROR: Not found\r\n");
 8002c68:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <set_cmd_fn+0x158>)
 8002c6a:	f015 fe53 	bl	8018914 <usb_printf>
	}

    /* Successful execution */
    return 0;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	0801fcdc 	.word	0x0801fcdc
 8002c7c:	0801fe2c 	.word	0x0801fe2c
 8002c80:	0801fe68 	.word	0x0801fe68
 8002c84:	2000044c 	.word	0x2000044c
 8002c88:	0801fe70 	.word	0x0801fe70
 8002c8c:	0801fe8c 	.word	0x0801fe8c
 8002c90:	0801feb0 	.word	0x0801feb0

08002c94 <get_cmd_fn>:

int32_t get_cmd_fn(int32_t argc, char** argv) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
	if(argc < 2) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	dc07      	bgt.n	8002cb4 <get_cmd_fn+0x20>
		OUT_PRINTF("\r\n");
 8002ca4:	4838      	ldr	r0, [pc, #224]	@ (8002d88 <get_cmd_fn+0xf4>)
 8002ca6:	f015 fe35 	bl	8018914 <usb_printf>
		OUT_PRINTF("Type \"get list\" to list all parameters that can be set.\r\n");
 8002caa:	4838      	ldr	r0, [pc, #224]	@ (8002d8c <get_cmd_fn+0xf8>)
 8002cac:	f015 fe32 	bl	8018914 <usb_printf>
		return 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e064      	b.n	8002d7e <get_cmd_fn+0xea>
	}

	int argc_index = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
	int parameter_found = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

	if(strcmp(argv[argc_index], "list") == 0){
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4932      	ldr	r1, [pc, #200]	@ (8002d90 <get_cmd_fn+0xfc>)
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fa81 	bl	80001d0 <strcmp>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <get_cmd_fn+0x4a>
		command_get_list();
 8002cd4:	f7ff fef4 	bl	8002ac0 <command_get_list>
		parameter_found = 1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e045      	b.n	8002d6a <get_cmd_fn+0xd6>
	}
	else{
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e03f      	b.n	8002d64 <get_cmd_fn+0xd0>
			if(parameters_arr[i].name == NULL) continue;
 8002ce4:	492b      	ldr	r1, [pc, #172]	@ (8002d94 <get_cmd_fn+0x100>)
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d031      	beq.n	8002d5c <get_cmd_fn+0xc8>

			if(strcmp(argv[argc_index], parameters_arr[i].name) == 0){
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	4924      	ldr	r1, [pc, #144]	@ (8002d94 <get_cmd_fn+0x100>)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7fd fa5c 	bl	80001d0 <strcmp>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11f      	bne.n	8002d5e <get_cmd_fn+0xca>
				parameter_found = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
				if(parameters_arr[i].get_fn == NULL){
 8002d22:	491c      	ldr	r1, [pc, #112]	@ (8002d94 <get_cmd_fn+0x100>)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3310      	adds	r3, #16
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <get_cmd_fn+0xb2>
					OUT_PRINTF("\r\n");
 8002d38:	4813      	ldr	r0, [pc, #76]	@ (8002d88 <get_cmd_fn+0xf4>)
 8002d3a:	f015 fdeb 	bl	8018914 <usb_printf>
					OUT_PRINTF("ERROR: Parameter Cannot be get\r\n");
 8002d3e:	4816      	ldr	r0, [pc, #88]	@ (8002d98 <get_cmd_fn+0x104>)
 8002d40:	f015 fde8 	bl	8018914 <usb_printf>
 8002d44:	e00b      	b.n	8002d5e <get_cmd_fn+0xca>
				}
				else{
					parameters_arr[i].get_fn();
 8002d46:	4913      	ldr	r1, [pc, #76]	@ (8002d94 <get_cmd_fn+0x100>)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3310      	adds	r3, #16
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4798      	blx	r3
					break;
 8002d5a:	e006      	b.n	8002d6a <get_cmd_fn+0xd6>
			if(parameters_arr[i].name == NULL) continue;
 8002d5c:	bf00      	nop
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3301      	adds	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	ddbc      	ble.n	8002ce4 <get_cmd_fn+0x50>
				}
			}
		}
	}

	if(parameter_found == 0){
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <get_cmd_fn+0xe8>
		OUT_PRINTF("\r\n");
 8002d70:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <get_cmd_fn+0xf4>)
 8002d72:	f015 fdcf 	bl	8018914 <usb_printf>
		OUT_PRINTF("ERROR: Not found\r\n");
 8002d76:	4809      	ldr	r0, [pc, #36]	@ (8002d9c <get_cmd_fn+0x108>)
 8002d78:	f015 fdcc 	bl	8018914 <usb_printf>
	}

    /* Successful execution */
    return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	0801fcdc 	.word	0x0801fcdc
 8002d8c:	0801fec4 	.word	0x0801fec4
 8002d90:	0801fe68 	.word	0x0801fe68
 8002d94:	2000044c 	.word	0x2000044c
 8002d98:	0801ff00 	.word	0x0801ff00
 8002d9c:	0801feb0 	.word	0x0801feb0

08002da0 <output_fn>:
	memset(&get_telemetry_active, 0, sizeof(get_telemetry_active));
	get_telemetry_active.get_telemetry_active = 0;

}

void output_fn(const char* str, struct lwshell* lwobj){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	OUT_PRINTF("%s", str);
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4803      	ldr	r0, [pc, #12]	@ (8002dbc <output_fn+0x1c>)
 8002dae:	f015 fdb1 	bl	8018914 <usb_printf>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	0801ff24 	.word	0x0801ff24

08002dc0 <fp_cli_example_minimal_init>:

/* Example code */
void fp_cli_example_minimal_init(void) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
    /* Init library */
	init_parameters_arr();
 8002dc4:	f7ff fd10 	bl	80027e8 <init_parameters_arr>
    lwshell_init_ex(&lwshell_cli);
 8002dc8:	480a      	ldr	r0, [pc, #40]	@ (8002df4 <fp_cli_example_minimal_init+0x34>)
 8002dca:	f002 fdd9 	bl	8005980 <lwshell_init_ex>

    lwshellr_t lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn);
    lwshell_set_output_fn_ex(&lwshell_cli, output_fn);
 8002dce:	490a      	ldr	r1, [pc, #40]	@ (8002df8 <fp_cli_example_minimal_init+0x38>)
 8002dd0:	4808      	ldr	r0, [pc, #32]	@ (8002df4 <fp_cli_example_minimal_init+0x34>)
 8002dd2:	f002 fded 	bl	80059b0 <lwshell_set_output_fn_ex>

    /* Define shell commands */
    lwshell_register_cmd_ex(&lwshell_cli, "set", set_cmd_fn, "set a parameter");
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <fp_cli_example_minimal_init+0x3c>)
 8002dd8:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <fp_cli_example_minimal_init+0x40>)
 8002dda:	490a      	ldr	r1, [pc, #40]	@ (8002e04 <fp_cli_example_minimal_init+0x44>)
 8002ddc:	4805      	ldr	r0, [pc, #20]	@ (8002df4 <fp_cli_example_minimal_init+0x34>)
 8002dde:	f002 fdff 	bl	80059e0 <lwshell_register_cmd_ex>
    lwshell_register_cmd_ex(&lwshell_cli, "get", get_cmd_fn, "get a parameter");
 8002de2:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <fp_cli_example_minimal_init+0x48>)
 8002de4:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <fp_cli_example_minimal_init+0x4c>)
 8002de6:	490a      	ldr	r1, [pc, #40]	@ (8002e10 <fp_cli_example_minimal_init+0x50>)
 8002de8:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <fp_cli_example_minimal_init+0x34>)
 8002dea:	f002 fdf9 	bl	80059e0 <lwshell_register_cmd_ex>

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000338 	.word	0x20000338
 8002df8:	08002da1 	.word	0x08002da1
 8002dfc:	0801ff28 	.word	0x0801ff28
 8002e00:	08002b39 	.word	0x08002b39
 8002e04:	0801ff38 	.word	0x0801ff38
 8002e08:	0801ff3c 	.word	0x0801ff3c
 8002e0c:	08002c95 	.word	0x08002c95
 8002e10:	0801ff4c 	.word	0x0801ff4c

08002e14 <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	edd3 7a00 	vldr	s15, [r3]
 8002e3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e42:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e56:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6a:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	ed93 7a00 	vldr	s14, [r3]
 8002e74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7e:	330c      	adds	r3, #12
 8002e80:	edd3 6a00 	vldr	s13, [r3]
 8002e84:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	3318      	adds	r3, #24
 8002e94:	edd3 6a00 	vldr	s13, [r3]
 8002e98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea4:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	ed93 7a01 	vldr	s14, [r3, #4]
 8002eae:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	330c      	adds	r3, #12
 8002eba:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	3318      	adds	r3, #24
 8002ece:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ed2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ede:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ee8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ef8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	3318      	adds	r3, #24
 8002f08:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	ed93 7a00 	vldr	s14, [r3]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f92:	f016 f9bb 	bl	801930c <sqrtf>
 8002f96:	eef0 7a40 	vmov.f32	s15, s0
}
 8002f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <quatconj>:

quaternion quatconj(quaternion* q) {
 8002fa4:	b490      	push	{r4, r7}
 8002fa6:	b08e      	sub	sp, #56	@ 0x38
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fb8:	eef1 7a67 	vneg.f32	s15, s15
 8002fbc:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fc6:	eef1 7a67 	vneg.f32	s15, s15
 8002fca:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd4:	eef1 7a67 	vneg.f32	s15, s15
 8002fd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 8002fdc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002fe0:	f107 0318 	add.w	r3, r7, #24
 8002fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	ee06 0a10 	vmov	s12, r0
 8002ff6:	ee06 1a90 	vmov	s13, r1
 8002ffa:	ee07 2a10 	vmov	s14, r2
 8002ffe:	ee07 3a90 	vmov	s15, r3
}
 8003002:	eeb0 0a46 	vmov.f32	s0, s12
 8003006:	eef0 0a66 	vmov.f32	s1, s13
 800300a:	eeb0 1a47 	vmov.f32	s2, s14
 800300e:	eef0 1a67 	vmov.f32	s3, s15
 8003012:	3738      	adds	r7, #56	@ 0x38
 8003014:	46bd      	mov	sp, r7
 8003016:	bc90      	pop	{r4, r7}
 8003018:	4770      	bx	lr
	...

0800301c <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b091      	sub	sp, #68	@ 0x44
 8003020:	af00      	add	r7, sp, #0
 8003022:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	f7ff ff88 	bl	8002f3a <quatnorm>
 800302a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 800302e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003032:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80030fc <quatnormalize+0xe0>
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d813      	bhi.n	8003068 <quatnormalize+0x4c>
	    result.w = 1.0f;
 8003040:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003044:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 8003058:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800305c:	f107 0318 	add.w	r3, r7, #24
 8003060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003066:	e032      	b.n	80030ce <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 8003068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800306c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003074:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	ed93 7a00 	vldr	s14, [r3]
 800307e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003086:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003090:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003098:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	ed93 7a02 	vldr	s14, [r3, #8]
 80030a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80030b4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80030b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 80030c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80030ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d6:	ee06 0a10 	vmov	s12, r0
 80030da:	ee06 1a90 	vmov	s13, r1
 80030de:	ee07 2a10 	vmov	s14, r2
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eeb0 0a46 	vmov.f32	s0, s12
 80030ea:	eef0 0a66 	vmov.f32	s1, s13
 80030ee:	eeb0 1a47 	vmov.f32	s2, s14
 80030f2:	eef0 1a67 	vmov.f32	s3, s15
 80030f6:	3744      	adds	r7, #68	@ 0x44
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}
 80030fc:	34000000 	.word	0x34000000

08003100 <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 8003100:	b490      	push	{r4, r7}
 8003102:	b08e      	sub	sp, #56	@ 0x38
 8003104:	af00      	add	r7, sp, #0
 8003106:	6178      	str	r0, [r7, #20]
 8003108:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	ed93 7a00 	vldr	s14, [r3]
 8003112:	edd7 7a04 	vldr	s15, [r7, #16]
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	ed93 7a01 	vldr	s14, [r3, #4]
 8003124:	edd7 7a04 	vldr	s15, [r7, #16]
 8003128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312c:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	ed93 7a02 	vldr	s14, [r3, #8]
 8003136:	edd7 7a04 	vldr	s15, [r7, #16]
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	ed93 7a03 	vldr	s14, [r3, #12]
 8003148:	edd7 7a04 	vldr	s15, [r7, #16]
 800314c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003150:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8003154:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800315e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003164:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	ee06 0a10 	vmov	s12, r0
 800316e:	ee06 1a90 	vmov	s13, r1
 8003172:	ee07 2a10 	vmov	s14, r2
 8003176:	ee07 3a90 	vmov	s15, r3
}
 800317a:	eeb0 0a46 	vmov.f32	s0, s12
 800317e:	eef0 0a66 	vmov.f32	s1, s13
 8003182:	eeb0 1a47 	vmov.f32	s2, s14
 8003186:	eef0 1a67 	vmov.f32	s3, s15
 800318a:	3738      	adds	r7, #56	@ 0x38
 800318c:	46bd      	mov	sp, r7
 800318e:	bc90      	pop	{r4, r7}
 8003190:	4770      	bx	lr

08003192 <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 8003192:	b490      	push	{r4, r7}
 8003194:	b096      	sub	sp, #88	@ 0x58
 8003196:	af00      	add	r7, sp, #0
 8003198:	6178      	str	r0, [r7, #20]
 800319a:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 80031cc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80031d0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80031d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d8:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80031dc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80031e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031e8:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80031ec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80031f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80031fc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003208:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 800320c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003210:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003218:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800321c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003228:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800322c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003238:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800323c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 800324c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003250:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003258:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800325c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003268:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800326c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800327c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003288:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 800328c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003290:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003298:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800329c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a8:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80032ac:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80032b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032b8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80032bc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80032c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 80032cc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80032d0:	f107 0318 	add.w	r3, r7, #24
 80032d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e2:	ee06 0a10 	vmov	s12, r0
 80032e6:	ee06 1a90 	vmov	s13, r1
 80032ea:	ee07 2a10 	vmov	s14, r2
 80032ee:	ee07 3a90 	vmov	s15, r3
}
 80032f2:	eeb0 0a46 	vmov.f32	s0, s12
 80032f6:	eef0 0a66 	vmov.f32	s1, s13
 80032fa:	eeb0 1a47 	vmov.f32	s2, s14
 80032fe:	eef0 1a67 	vmov.f32	s3, s15
 8003302:	3758      	adds	r7, #88	@ 0x58
 8003304:	46bd      	mov	sp, r7
 8003306:	bc90      	pop	{r4, r7}
 8003308:	4770      	bx	lr

0800330a <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 800330a:	b580      	push	{r7, lr}
 800330c:	b094      	sub	sp, #80	@ 0x50
 800330e:	af00      	add	r7, sp, #0
 8003310:	6178      	str	r0, [r7, #20]
 8003312:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	@ 0x34
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 800332c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003330:	4619      	mov	r1, r3
 8003332:	6978      	ldr	r0, [r7, #20]
 8003334:	f7ff ff2d 	bl	8003192 <quatmultiply>
 8003338:	eeb0 6a40 	vmov.f32	s12, s0
 800333c:	eef0 6a60 	vmov.f32	s13, s1
 8003340:	eeb0 7a41 	vmov.f32	s14, s2
 8003344:	eef0 7a61 	vmov.f32	s15, s3
 8003348:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800334c:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8003350:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8003354:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 8003358:	6978      	ldr	r0, [r7, #20]
 800335a:	f7ff fe23 	bl	8002fa4 <quatconj>
 800335e:	eeb0 6a40 	vmov.f32	s12, s0
 8003362:	eef0 6a60 	vmov.f32	s13, s1
 8003366:	eeb0 7a41 	vmov.f32	s14, s2
 800336a:	eef0 7a61 	vmov.f32	s15, s3
 800336e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8003372:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8003376:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800337a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 800337e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003382:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff02 	bl	8003192 <quatmultiply>
 800338e:	eeb0 6a40 	vmov.f32	s12, s0
 8003392:	eef0 6a60 	vmov.f32	s13, s1
 8003396:	eeb0 7a41 	vmov.f32	s14, s2
 800339a:	eef0 7a61 	vmov.f32	s15, s3
 800339e:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80033a2:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80033a6:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80033aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 80033b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b4:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 80033b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b8:	623b      	str	r3, [r7, #32]
	return result;
 80033ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033be:	f107 0218 	add.w	r2, r7, #24
 80033c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80033ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ce:	ee06 1a90 	vmov	s13, r1
 80033d2:	ee07 2a10 	vmov	s14, r2
 80033d6:	ee07 3a90 	vmov	s15, r3
}
 80033da:	eeb0 0a66 	vmov.f32	s0, s13
 80033de:	eef0 0a47 	vmov.f32	s1, s14
 80033e2:	eeb0 1a67 	vmov.f32	s2, s15
 80033e6:	3750      	adds	r7, #80	@ 0x50
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b090      	sub	sp, #64	@ 0x40
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 800340c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003410:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003418:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800341c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800342c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003430:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003434:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800343c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003440:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344c:	eef0 0a67 	vmov.f32	s1, s15
 8003450:	eeb0 0a66 	vmov.f32	s0, s13
 8003454:	f015 ff00 	bl	8019258 <atan2f>
 8003458:	eef0 7a40 	vmov.f32	s15, s0
 800345c:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 8003460:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003464:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003470:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	f015 febc 	bl	8019200 <asinf>
 8003488:	eef0 7a40 	vmov.f32	s15, s0
 800348c:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 8003490:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003494:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80034a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80034a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80034b0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80034b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80034b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80034bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d0:	eef0 0a67 	vmov.f32	s1, s15
 80034d4:	eeb0 0a66 	vmov.f32	s0, s13
 80034d8:	f015 febe 	bl	8019258 <atan2f>
 80034dc:	eef0 7a40 	vmov.f32	s15, s0
 80034e0:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 80034e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e8:	f107 0218 	add.w	r2, r7, #24
 80034ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f8:	ee06 1a90 	vmov	s13, r1
 80034fc:	ee07 2a10 	vmov	s14, r2
 8003500:	ee07 3a90 	vmov	s15, r3
}
 8003504:	eeb0 0a66 	vmov.f32	s0, s13
 8003508:	eef0 0a47 	vmov.f32	s1, s14
 800350c:	eeb0 1a67 	vmov.f32	s2, s15
 8003510:	3740      	adds	r7, #64	@ 0x40
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b090      	sub	sp, #64	@ 0x40
 800351c:	af00      	add	r7, sp, #0
 800351e:	eeb0 6a40 	vmov.f32	s12, s0
 8003522:	eef0 6a60 	vmov.f32	s13, s1
 8003526:	eeb0 7a41 	vmov.f32	s14, s2
 800352a:	eef0 7a61 	vmov.f32	s15, s3
 800352e:	ed87 6a04 	vstr	s12, [r7, #16]
 8003532:	edc7 6a05 	vstr	s13, [r7, #20]
 8003536:	ed87 7a06 	vstr	s14, [r7, #24]
 800353a:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 800353e:	f107 0310 	add.w	r3, r7, #16
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fd6a 	bl	800301c <quatnormalize>
 8003548:	eeb0 6a40 	vmov.f32	s12, s0
 800354c:	eef0 6a60 	vmov.f32	s13, s1
 8003550:	eeb0 7a41 	vmov.f32	s14, s2
 8003554:	eef0 7a61 	vmov.f32	s15, s3
 8003558:	ed87 6a04 	vstr	s12, [r7, #16]
 800355c:	edc7 6a05 	vstr	s13, [r7, #20]
 8003560:	ed87 7a06 	vstr	s14, [r7, #24]
 8003564:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 8003568:	edd7 7a04 	vldr	s15, [r7, #16]
 800356c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d517      	bpl.n	80035a6 <quat2rotvec+0x8e>
        q.w = -q.w;
 8003576:	edd7 7a04 	vldr	s15, [r7, #16]
 800357a:	eef1 7a67 	vneg.f32	s15, s15
 800357e:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	eef1 7a67 	vneg.f32	s15, s15
 800358a:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 800358e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003592:	eef1 7a67 	vneg.f32	s15, s15
 8003596:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 800359a:	edd7 7a07 	vldr	s15, [r7, #28]
 800359e:	eef1 7a67 	vneg.f32	s15, s15
 80035a2:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 80035a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035aa:	eeb0 0a67 	vmov.f32	s0, s15
 80035ae:	f015 fdfb 	bl	80191a8 <acosf>
 80035b2:	eef0 7a40 	vmov.f32	s15, s0
 80035b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 80035be:	ed97 7a04 	vldr	s14, [r7, #16]
 80035c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d2:	eeb0 0a67 	vmov.f32	s0, s15
 80035d6:	f015 fe99 	bl	801930c <sqrtf>
 80035da:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 80035de:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80035e2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003680 <quat2rotvec+0x168>
 80035e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d809      	bhi.n	8003604 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003602:	e023      	b.n	800364c <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 8003604:	edd7 6a05 	vldr	s13, [r7, #20]
 8003608:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800360c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003610:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003618:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 800361c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003620:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003628:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 8003634:	edd7 6a07 	vldr	s13, [r7, #28]
 8003638:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800363c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003640:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 800364c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003650:	f107 0220 	add.w	r2, r7, #32
 8003654:	ca07      	ldmia	r2, {r0, r1, r2}
 8003656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800365a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800365c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	ee06 1a90 	vmov	s13, r1
 8003664:	ee07 2a10 	vmov	s14, r2
 8003668:	ee07 3a90 	vmov	s15, r3
}
 800366c:	eeb0 0a66 	vmov.f32	s0, s13
 8003670:	eef0 0a47 	vmov.f32	s1, s14
 8003674:	eeb0 1a67 	vmov.f32	s2, s15
 8003678:	3740      	adds	r7, #64	@ 0x40
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	34000000 	.word	0x34000000

08003684 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b095      	sub	sp, #84	@ 0x54
 8003688:	af00      	add	r7, sp, #0
 800368a:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003692:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	f015 ff27 	bl	80194f0 <cosf>
 80036a2:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80036ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b4:	eeb0 0a67 	vmov.f32	s0, s15
 80036b8:	f015 ff66 	bl	8019588 <sinf>
 80036bc:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80036c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ce:	eeb0 0a67 	vmov.f32	s0, s15
 80036d2:	f015 ff0d 	bl	80194f0 <cosf>
 80036d6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80036e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ec:	f015 ff4c 	bl	8019588 <sinf>
 80036f0:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003702:	eeb0 0a67 	vmov.f32	s0, s15
 8003706:	f015 fef3 	bl	80194f0 <cosf>
 800370a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371c:	eeb0 0a67 	vmov.f32	s0, s15
 8003720:	f015 ff32 	bl	8019588 <sinf>
 8003724:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 8003728:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800372c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003734:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003740:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003744:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003748:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800374c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003754:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 8003758:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800375c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003764:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800376c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8003770:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003774:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003778:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800377c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003784:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 8003788:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800378c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003794:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800379c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80037a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80037a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037a8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80037ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b4:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 80037b8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80037bc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80037c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80037c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037cc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80037d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80037d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037d8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80037dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 80037e8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80037ec:	f107 0318 	add.w	r3, r7, #24
 80037f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fe:	ee06 0a10 	vmov	s12, r0
 8003802:	ee06 1a90 	vmov	s13, r1
 8003806:	ee07 2a10 	vmov	s14, r2
 800380a:	ee07 3a90 	vmov	s15, r3
}
 800380e:	eeb0 0a46 	vmov.f32	s0, s12
 8003812:	eef0 0a66 	vmov.f32	s1, s13
 8003816:	eeb0 1a47 	vmov.f32	s2, s14
 800381a:	eef0 1a67 	vmov.f32	s3, s15
 800381e:	3754      	adds	r7, #84	@ 0x54
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}

08003824 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 8003824:	b490      	push	{r4, r7}
 8003826:	b08e      	sub	sp, #56	@ 0x38
 8003828:	af00      	add	r7, sp, #0
 800382a:	6178      	str	r0, [r7, #20]
 800382c:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	ed93 7a00 	vldr	s14, [r3]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383e:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	ed93 7a01 	vldr	s14, [r3, #4]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	edd3 7a01 	vldr	s15, [r3, #4]
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	ed93 7a02 	vldr	s14, [r3, #8]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003866:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	edd3 7a03 	vldr	s15, [r3, #12]
 8003876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800387a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 800387e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003882:	f107 0318 	add.w	r3, r7, #24
 8003886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800388c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800388e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	ee06 0a10 	vmov	s12, r0
 8003898:	ee06 1a90 	vmov	s13, r1
 800389c:	ee07 2a10 	vmov	s14, r2
 80038a0:	ee07 3a90 	vmov	s15, r3
}
 80038a4:	eeb0 0a46 	vmov.f32	s0, s12
 80038a8:	eef0 0a66 	vmov.f32	s1, s13
 80038ac:	eeb0 1a47 	vmov.f32	s2, s14
 80038b0:	eef0 1a67 	vmov.f32	s3, s15
 80038b4:	3738      	adds	r7, #56	@ 0x38
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc90      	pop	{r4, r7}
 80038ba:	4770      	bx	lr

080038bc <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 80038bc:	b490      	push	{r4, r7}
 80038be:	b08e      	sub	sp, #56	@ 0x38
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6178      	str	r0, [r7, #20]
 80038c4:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	ed93 7a00 	vldr	s14, [r3]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d6:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80038e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80038fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fe:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	ed93 7a03 	vldr	s14, [r3, #12]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	edd3 7a03 	vldr	s15, [r3, #12]
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003912:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8003916:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800391a:	f107 0318 	add.w	r3, r7, #24
 800391e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392c:	ee06 0a10 	vmov	s12, r0
 8003930:	ee06 1a90 	vmov	s13, r1
 8003934:	ee07 2a10 	vmov	s14, r2
 8003938:	ee07 3a90 	vmov	s15, r3
}
 800393c:	eeb0 0a46 	vmov.f32	s0, s12
 8003940:	eef0 0a66 	vmov.f32	s1, s13
 8003944:	eeb0 1a47 	vmov.f32	s2, s14
 8003948:	eef0 1a67 	vmov.f32	s3, s15
 800394c:	3738      	adds	r7, #56	@ 0x38
 800394e:	46bd      	mov	sp, r7
 8003950:	bc90      	pop	{r4, r7}
 8003952:	4770      	bx	lr

08003954 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	@ 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	6178      	str	r0, [r7, #20]
 800395c:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff fb20 	bl	8002fa4 <quatconj>
 8003964:	eeb0 6a40 	vmov.f32	s12, s0
 8003968:	eef0 6a60 	vmov.f32	s13, s1
 800396c:	eeb0 7a41 	vmov.f32	s14, s2
 8003970:	eef0 7a61 	vmov.f32	s15, s3
 8003974:	ed87 6a06 	vstr	s12, [r7, #24]
 8003978:	edc7 6a07 	vstr	s13, [r7, #28]
 800397c:	ed87 7a08 	vstr	s14, [r7, #32]
 8003980:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8003984:	f107 0318 	add.w	r3, r7, #24
 8003988:	4619      	mov	r1, r3
 800398a:	6938      	ldr	r0, [r7, #16]
 800398c:	f7ff fc01 	bl	8003192 <quatmultiply>
 8003990:	eeb0 6a40 	vmov.f32	s12, s0
 8003994:	eef0 6a60 	vmov.f32	s13, s1
 8003998:	eeb0 7a41 	vmov.f32	s14, s2
 800399c:	eef0 7a61 	vmov.f32	s15, s3
 80039a0:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 80039a4:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 80039a8:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 80039ac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 80039b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b8:	ee06 0a10 	vmov	s12, r0
 80039bc:	ee06 1a90 	vmov	s13, r1
 80039c0:	ee07 2a10 	vmov	s14, r2
 80039c4:	ee07 3a90 	vmov	s15, r3
}
 80039c8:	eeb0 0a46 	vmov.f32	s0, s12
 80039cc:	eef0 0a66 	vmov.f32	s1, s13
 80039d0:	eeb0 1a47 	vmov.f32	s2, s14
 80039d4:	eef0 1a67 	vmov.f32	s3, s15
 80039d8:	3738      	adds	r7, #56	@ 0x38
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b08b      	sub	sp, #44	@ 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6178      	str	r0, [r7, #20]
 80039e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80039ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80039f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80039f4:	edc7 1a01 	vstr	s3, [r7, #4]
 80039f8:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 80039fc:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8003a00:	2100      	movs	r1, #0
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f018 fade 	bl	801bfc4 <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8003a08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	ed97 6a06 	vldr	s12, [r7, #24]
 8003a24:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a28:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a2c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a30:	eeb0 0a46 	vmov.f32	s0, s12
 8003a34:	eef0 0a66 	vmov.f32	s1, s13
 8003a38:	eeb0 1a47 	vmov.f32	s2, s14
 8003a3c:	eef0 1a67 	vmov.f32	s3, s15
 8003a40:	6978      	ldr	r0, [r7, #20]
 8003a42:	f000 f85d 	bl	8003b00 <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8003a4e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a5e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a68:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a72:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3388      	adds	r3, #136	@ 0x88
 8003a7a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003a7e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fdf4 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3398      	adds	r3, #152	@ 0x98
 8003a8c:	edd7 0a02 	vldr	s1, [r7, #8]
 8003a90:	ed97 0a04 	vldr	s0, [r7, #16]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd fdeb 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	33a8      	adds	r3, #168	@ 0xa8
 8003a9e:	edd7 0a02 	vldr	s1, [r7, #8]
 8003aa2:	ed97 0a04 	vldr	s0, [r7, #16]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fde2 	bl	8001670 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	33b8      	adds	r3, #184	@ 0xb8
 8003ab0:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ab4:	ed97 0a03 	vldr	s0, [r7, #12]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fdd9 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	33c8      	adds	r3, #200	@ 0xc8
 8003ac2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ac6:	ed97 0a03 	vldr	s0, [r7, #12]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fdd0 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	33d8      	adds	r3, #216	@ 0xd8
 8003ad4:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ad8:	ed97 0a03 	vldr	s0, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd fdc7 	bl	8001670 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3370      	adds	r3, #112	@ 0x70
 8003ae6:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003afc <imu_init+0x11c>
 8003aea:	ed97 0a00 	vldr	s0, [r7]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fa70 	bl	8003fd4 <madgwick_filter_init>
}
 8003af4:	bf00      	nop
 8003af6:	372c      	adds	r7, #44	@ 0x2c
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	3db2b8c2 	.word	0x3db2b8c2

08003b00 <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b08f      	sub	sp, #60	@ 0x3c
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6178      	str	r0, [r7, #20]
 8003b08:	eeb0 6a40 	vmov.f32	s12, s0
 8003b0c:	eef0 6a60 	vmov.f32	s13, s1
 8003b10:	eeb0 7a41 	vmov.f32	s14, s2
 8003b14:	eef0 7a61 	vmov.f32	s15, s3
 8003b18:	ed87 6a01 	vstr	s12, [r7, #4]
 8003b1c:	edc7 6a02 	vstr	s13, [r7, #8]
 8003b20:	ed87 7a03 	vstr	s14, [r7, #12]
 8003b24:	edc7 7a04 	vstr	s15, [r7, #16]
	quaternion q_ref = IMU_DEFAULT_LEVELD_ATTITUDE_Q;      // "leveled = identity"
 8003b28:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
	im->q_offset = quat_error(&q_ref, &leveld_attitude_q);
 8003b40:	697c      	ldr	r4, [r7, #20]
 8003b42:	1d3a      	adds	r2, r7, #4
 8003b44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff02 	bl	8003954 <quat_error>
 8003b50:	eeb0 6a40 	vmov.f32	s12, s0
 8003b54:	eef0 6a60 	vmov.f32	s13, s1
 8003b58:	eeb0 7a41 	vmov.f32	s14, s2
 8003b5c:	eef0 7a61 	vmov.f32	s15, s3
 8003b60:	ed84 6a4d 	vstr	s12, [r4, #308]	@ 0x134
 8003b64:	edc4 6a4e 	vstr	s13, [r4, #312]	@ 0x138
 8003b68:	ed84 7a4f 	vstr	s14, [r4, #316]	@ 0x13c
 8003b6c:	edc4 7a50 	vstr	s15, [r4, #320]	@ 0x140
}
 8003b70:	bf00      	nop
 8003b72:	373c      	adds	r7, #60	@ 0x3c
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}

08003b78 <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	eef0 6a40 	vmov.f32	s13, s0
 8003b84:	eeb0 7a60 	vmov.f32	s14, s1
 8003b88:	eef0 7a41 	vmov.f32	s15, s2
 8003b8c:	edc7 6a00 	vstr	s13, [r7]
 8003b90:	ed87 7a01 	vstr	s14, [r7, #4]
 8003b94:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	463a      	mov	r2, r7
 8003b9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 8003ba4:	ed97 7a00 	vldr	s14, [r7]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8003bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 8003bb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8003bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 8003bcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8003bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003bec:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7fd fda1 	bl	8001738 <pt1_filter_apply_lowpass>
 8003bf6:	eef0 7a40 	vmov.f32	s15, s0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c10:	4610      	mov	r0, r2
 8003c12:	f7fd fd91 	bl	8001738 <pt1_filter_apply_lowpass>
 8003c16:	eef0 7a40 	vmov.f32	s15, s0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7fd fd81 	bl	8001738 <pt1_filter_apply_lowpass>
 8003c36:	eef0 7a40 	vmov.f32	s15, s0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	333c      	adds	r3, #60	@ 0x3c
 8003c4a:	68fc      	ldr	r4, [r7, #12]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7ff fb5b 	bl	800330a <quatrotate>
 8003c54:	eef0 6a40 	vmov.f32	s13, s0
 8003c58:	eeb0 7a60 	vmov.f32	s14, s1
 8003c5c:	eef0 7a41 	vmov.f32	s15, s2
 8003c60:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8003c64:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8003c68:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}

08003c74 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	eef0 6a40 	vmov.f32	s13, s0
 8003c80:	eeb0 7a60 	vmov.f32	s14, s1
 8003c84:	eef0 7a41 	vmov.f32	s15, s2
 8003c88:	edc7 6a00 	vstr	s13, [r7]
 8003c8c:	ed87 7a01 	vstr	s14, [r7, #4]
 8003c90:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	461c      	mov	r4, r3
 8003c98:	463b      	mov	r3, r7
 8003c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	33f4      	adds	r3, #244	@ 0xf4
 8003cac:	463a      	mov	r2, r7
 8003cae:	f102 0408 	add.w	r4, r2, #8
 8003cb2:	463a      	mov	r2, r7
 8003cb4:	1d11      	adds	r1, r2, #4
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	f7ff f8a9 	bl	8002e14 <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3318      	adds	r3, #24
 8003cc6:	463a      	mov	r2, r7
 8003cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3388      	adds	r3, #136	@ 0x88
 8003cd2:	edd7 7a00 	vldr	s15, [r7]
 8003cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fd2c 	bl	8001738 <pt1_filter_apply_lowpass>
 8003ce0:	eef0 7a40 	vmov.f32	s15, s0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3398      	adds	r3, #152	@ 0x98
 8003cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fd1e 	bl	8001738 <pt1_filter_apply_lowpass>
 8003cfc:	eef0 7a40 	vmov.f32	s15, s0
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	33a8      	adds	r3, #168	@ 0xa8
 8003d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fd10 	bl	8001738 <pt1_filter_apply_lowpass>
 8003d18:	eef0 7a40 	vmov.f32	s15, s0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3330      	adds	r3, #48	@ 0x30
 8003d2c:	68fc      	ldr	r4, [r7, #12]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7ff faea 	bl	800330a <quatrotate>
 8003d36:	eef0 6a40 	vmov.f32	s13, s0
 8003d3a:	eeb0 7a60 	vmov.f32	s14, s1
 8003d3e:	eef0 7a41 	vmov.f32	s15, s2
 8003d42:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8003d46:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8003d4a:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bdb0      	pop	{r4, r5, r7, pc}

08003d56 <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8003d56:	b590      	push	{r4, r7, lr}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 8003d6a:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 8003d74:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 8003d7e:	eef1 7a67 	vneg.f32	s15, s15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 8003d94:	eef0 2a45 	vmov.f32	s5, s10
 8003d98:	eeb0 2a65 	vmov.f32	s4, s11
 8003d9c:	eef0 1a46 	vmov.f32	s3, s12
 8003da0:	eeb0 1a67 	vmov.f32	s2, s15
 8003da4:	eef0 0a66 	vmov.f32	s1, s13
 8003da8:	eeb0 0a47 	vmov.f32	s0, s14
 8003dac:	4610      	mov	r0, r2
 8003dae:	f000 f935 	bl	800401c <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8003dba:	3370      	adds	r3, #112	@ 0x70
 8003dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}

08003dca <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b088      	sub	sp, #32
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	61f8      	str	r0, [r7, #28]
 8003dd2:	eeb0 5a40 	vmov.f32	s10, s0
 8003dd6:	eef0 5a60 	vmov.f32	s11, s1
 8003dda:	eeb0 6a41 	vmov.f32	s12, s2
 8003dde:	eef0 6a61 	vmov.f32	s13, s3
 8003de2:	eeb0 7a42 	vmov.f32	s14, s4
 8003de6:	eef0 7a62 	vmov.f32	s15, s5
 8003dea:	ed87 5a04 	vstr	s10, [r7, #16]
 8003dee:	edc7 5a05 	vstr	s11, [r7, #20]
 8003df2:	ed87 6a06 	vstr	s12, [r7, #24]
 8003df6:	edc7 6a01 	vstr	s13, [r7, #4]
 8003dfa:	ed87 7a02 	vstr	s14, [r7, #8]
 8003dfe:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 8003e02:	edd7 6a04 	vldr	s13, [r7, #16]
 8003e06:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e0e:	eeb0 0a66 	vmov.f32	s0, s13
 8003e12:	eef0 0a47 	vmov.f32	s1, s14
 8003e16:	eeb0 1a67 	vmov.f32	s2, s15
 8003e1a:	69f8      	ldr	r0, [r7, #28]
 8003e1c:	f7ff ff2a 	bl	8003c74 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 8003e20:	edd7 6a01 	vldr	s13, [r7, #4]
 8003e24:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e2c:	eeb0 0a66 	vmov.f32	s0, s13
 8003e30:	eef0 0a47 	vmov.f32	s1, s14
 8003e34:	eeb0 1a67 	vmov.f32	s2, s15
 8003e38:	69f8      	ldr	r0, [r7, #28]
 8003e3a:	f7ff fe9d 	bl	8003b78 <imu_update_gyro>
	imu_update_madgwick(im);
 8003e3e:	69f8      	ldr	r0, [r7, #28]
 8003e40:	f7ff ff89 	bl	8003d56 <imu_update_madgwick>
}
 8003e44:	bf00      	nop
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	eef0 6a40 	vmov.f32	s13, s0
 8003e58:	eeb0 7a60 	vmov.f32	s14, s1
 8003e5c:	eef0 7a41 	vmov.f32	s15, s2
 8003e60:	edc7 6a00 	vstr	s13, [r7]
 8003e64:	ed87 7a01 	vstr	s14, [r7, #4]
 8003e68:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	@ 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6178      	str	r0, [r7, #20]
 8003e98:	eef0 6a40 	vmov.f32	s13, s0
 8003e9c:	eeb0 7a60 	vmov.f32	s14, s1
 8003ea0:	eef0 7a41 	vmov.f32	s15, s2
 8003ea4:	6079      	str	r1, [r7, #4]
 8003ea6:	edc7 6a02 	vstr	s13, [r7, #8]
 8003eaa:	ed87 7a03 	vstr	s14, [r7, #12]
 8003eae:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e023      	b.n	8003f18 <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	e01a      	b.n	8003f0c <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4413      	add	r3, r2
 8003efc:	333c      	adds	r3, #60	@ 0x3c
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4403      	add	r3, r0
 8003f02:	3304      	adds	r3, #4
 8003f04:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d9e1      	bls.n	8003ed6 <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d9d8      	bls.n	8003ed0 <imu_set_accel_bias+0x40>
		}
	}
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	3724      	adds	r7, #36	@ 0x24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 8003f2c:	b490      	push	{r4, r7}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4614      	mov	r4, r2
 8003f46:	3360      	adds	r3, #96	@ 0x60
 8003f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4614      	mov	r4, r2
 8003f5a:	3348      	adds	r3, #72	@ 0x48
 8003f5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4614      	mov	r4, r2
 8003f70:	3354      	adds	r3, #84	@ 0x54
 8003f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc90      	pop	{r4, r7}
 8003f82:	4770      	bx	lr

08003f84 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 8003faa:	b490      	push	{r4, r7}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc90      	pop	{r4, r7}
 8003fd2:	4770      	bx	lr

08003fd4 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fe0:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003fea:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	615a      	str	r2, [r3, #20]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b0b1      	sub	sp, #196	@ 0xc4
 8004020:	af00      	add	r7, sp, #0
 8004022:	61f8      	str	r0, [r7, #28]
 8004024:	ed87 0a06 	vstr	s0, [r7, #24]
 8004028:	edc7 0a05 	vstr	s1, [r7, #20]
 800402c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004030:	edc7 1a03 	vstr	s3, [r7, #12]
 8004034:	ed87 2a02 	vstr	s4, [r7, #8]
 8004038:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8004042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 8004048:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 800404c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8004050:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 8004056:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 800407e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 800408a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800408e:	2230      	movs	r2, #48	@ 0x30
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f017 ff96 	bl	801bfc4 <memset>

    struct quaternion gradient = {0.0f};
 8004098:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 80040b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040bc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff f81d 	bl	8003100 <quatmultiply_scalar>
 80040c6:	eeb0 6a40 	vmov.f32	s12, s0
 80040ca:	eef0 6a60 	vmov.f32	s13, s1
 80040ce:	eeb0 7a41 	vmov.f32	s14, s2
 80040d2:	eef0 7a61 	vmov.f32	s15, s3
 80040d6:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80040da:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 80040de:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 80040e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 80040e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80040ea:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff f84e 	bl	8003192 <quatmultiply>
 80040f6:	eeb0 6a40 	vmov.f32	s12, s0
 80040fa:	eef0 6a60 	vmov.f32	s13, s1
 80040fe:	eeb0 7a41 	vmov.f32	s14, s2
 8004102:	eef0 7a61 	vmov.f32	s15, s3
 8004106:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800410a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800410e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8004112:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8004116:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe ff7e 	bl	800301c <quatnormalize>
 8004120:	eeb0 6a40 	vmov.f32	s12, s0
 8004124:	eef0 6a60 	vmov.f32	s13, s1
 8004128:	eeb0 7a41 	vmov.f32	s14, s2
 800412c:	eef0 7a61 	vmov.f32	s15, s3
 8004130:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 8004134:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 8004138:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 800413c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 8004140:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004144:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414c:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 8004150:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004160:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004168:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 800416c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8004170:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004178:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 800417c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004188:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800418c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004194:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 8004198:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800419c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ac:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80041b0:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80041b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041c0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80041c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 80041cc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80041d0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80041d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 80041dc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80041e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041e4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 80041e8:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80041ec:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80041f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 80041f8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80041fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004200:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 8004204:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800420c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 8004210:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004214:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004218:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 800421c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004220:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004224:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 8004228:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800422c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004230:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 800423a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800423e:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8004242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004246:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 800424a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800424e:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8004252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004256:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8004260:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004264:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8004270:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800427c:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8004280:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8004284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8004290:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004294:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800429c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80042a0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80042a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042ac:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 80042b0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80042b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042bc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 80042c0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80042c4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80042c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042cc:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80042d0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80042d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042dc:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80042e0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80042e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ec:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 80042f0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80042f4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80042f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042fc:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004300:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800430c:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8004310:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8004314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 8004320:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fe79 	bl	800301c <quatnormalize>
 800432a:	eeb0 6a40 	vmov.f32	s12, s0
 800432e:	eef0 6a60 	vmov.f32	s13, s1
 8004332:	eeb0 7a41 	vmov.f32	s14, s2
 8004336:	eef0 7a61 	vmov.f32	s15, s3
 800433a:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800433e:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8004342:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8004346:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004350:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8004464 <madgwick_filter_apply+0x448>
 8004354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004358:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800435c:	eeb0 0a67 	vmov.f32	s0, s15
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fecd 	bl	8003100 <quatmultiply_scalar>
 8004366:	eeb0 6a40 	vmov.f32	s12, s0
 800436a:	eef0 6a60 	vmov.f32	s13, s1
 800436e:	eeb0 7a41 	vmov.f32	s14, s2
 8004372:	eef0 7a61 	vmov.f32	s15, s3
 8004376:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800437a:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 800437e:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8004382:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 8004386:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800438a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fa93 	bl	80038bc <quatsub>
 8004396:	eeb0 6a40 	vmov.f32	s12, s0
 800439a:	eef0 6a60 	vmov.f32	s13, s1
 800439e:	eeb0 7a41 	vmov.f32	s14, s2
 80043a2:	eef0 7a61 	vmov.f32	s15, s3
 80043a6:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 80043aa:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 80043ae:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 80043b2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80043bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80043c8:	eeb0 0a47 	vmov.f32	s0, s14
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fe97 	bl	8003100 <quatmultiply_scalar>
 80043d2:	eeb0 6a40 	vmov.f32	s12, s0
 80043d6:	eef0 6a60 	vmov.f32	s13, s1
 80043da:	eeb0 7a41 	vmov.f32	s14, s2
 80043de:	eef0 7a61 	vmov.f32	s15, s3
 80043e2:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 80043e6:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 80043ea:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 80043ee:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 80043f2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80043f6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fa11 	bl	8003824 <quatadd>
 8004402:	eeb0 6a40 	vmov.f32	s12, s0
 8004406:	eef0 6a60 	vmov.f32	s13, s1
 800440a:	eeb0 7a41 	vmov.f32	s14, s2
 800440e:	eef0 7a61 	vmov.f32	s15, s3
 8004412:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8004416:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 800441a:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 800441e:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 8004422:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fdf8 	bl	800301c <quatnormalize>
 800442c:	eeb0 6a40 	vmov.f32	s12, s0
 8004430:	eef0 6a60 	vmov.f32	s13, s1
 8004434:	eeb0 7a41 	vmov.f32	s14, s2
 8004438:	eef0 7a61 	vmov.f32	s15, s3
 800443c:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8004440:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 8004444:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 8004448:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	461c      	mov	r4, r3
 8004450:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8004454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800445a:	bf00      	nop
 800445c:	37c4      	adds	r7, #196	@ 0xc4
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}
 8004462:	bf00      	nop
 8004464:	3f5db3d7 	.word	0x3f5db3d7

08004468 <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 8004468:	b480      	push	{r7}
 800446a:	b097      	sub	sp, #92	@ 0x5c
 800446c:	af00      	add	r7, sp, #0
 800446e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004472:	edc7 0a04 	vstr	s1, [r7, #16]
 8004476:	ed87 1a03 	vstr	s2, [r7, #12]
 800447a:	edc7 1a02 	vstr	s3, [r7, #8]
 800447e:	ed87 2a01 	vstr	s4, [r7, #4]
 8004482:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 8004484:	edd7 7a05 	vldr	s15, [r7, #20]
 8004488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d502      	bpl.n	8004498 <motor_mixer_quad_x+0x30>
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e00c      	b.n	80044b2 <motor_mixer_quad_x+0x4a>
 8004498:	edd7 7a05 	vldr	s15, [r7, #20]
 800449c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	dd02      	ble.n	80044b0 <motor_mixer_quad_x+0x48>
 80044aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80044ae:	e000      	b.n	80044b2 <motor_mixer_quad_x+0x4a>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 80044b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80044b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c0:	d502      	bpl.n	80044c8 <motor_mixer_quad_x+0x60>
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e00c      	b.n	80044e2 <motor_mixer_quad_x+0x7a>
 80044c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	dd02      	ble.n	80044e0 <motor_mixer_quad_x+0x78>
 80044da:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80044de:	e000      	b.n	80044e2 <motor_mixer_quad_x+0x7a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 80044e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80044e8:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8004740 <motor_mixer_quad_x+0x2d8>
 80044ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044f0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 80044f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f8:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8004740 <motor_mixer_quad_x+0x2d8>
 80044fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004500:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 8004504:	edd7 7a02 	vldr	s15, [r7, #8]
 8004508:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8004740 <motor_mixer_quad_x+0x2d8>
 800450c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004510:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 8004514:	2300      	movs	r3, #0
 8004516:	657b      	str	r3, [r7, #84]	@ 0x54
 8004518:	e03a      	b.n	8004590 <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 800451a:	498a      	ldr	r1, [pc, #552]	@ (8004744 <motor_mixer_quad_x+0x2dc>)
 800451c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	ed93 7a00 	vldr	s14, [r3]
 800452c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004534:	edd7 7a05 	vldr	s15, [r7, #20]
 8004538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800453c:	4981      	ldr	r1, [pc, #516]	@ (8004744 <motor_mixer_quad_x+0x2dc>)
 800453e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3304      	adds	r3, #4
 800454c:	edd3 6a00 	vldr	s13, [r3]
 8004550:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800455c:	4979      	ldr	r1, [pc, #484]	@ (8004744 <motor_mixer_quad_x+0x2dc>)
 800455e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3308      	adds	r3, #8
 800456c:	edd3 6a00 	vldr	s13, [r3]
 8004570:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800457c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	3358      	adds	r3, #88	@ 0x58
 8004582:	443b      	add	r3, r7
 8004584:	3b40      	subs	r3, #64	@ 0x40
 8004586:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 800458a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458c:	3301      	adds	r3, #1
 800458e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004592:	2b03      	cmp	r3, #3
 8004594:	ddc1      	ble.n	800451a <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	653b      	str	r3, [r7, #80]	@ 0x50
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 800459e:	2301      	movs	r3, #1
 80045a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a2:	e02c      	b.n	80045fe <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 80045a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	3358      	adds	r3, #88	@ 0x58
 80045aa:	443b      	add	r3, r7
 80045ac:	3b40      	subs	r3, #64	@ 0x40
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80045b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045be:	dd06      	ble.n	80045ce <motor_mixer_quad_x+0x166>
 80045c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3358      	adds	r3, #88	@ 0x58
 80045c6:	443b      	add	r3, r7
 80045c8:	3b40      	subs	r3, #64	@ 0x40
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 80045ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	3358      	adds	r3, #88	@ 0x58
 80045d4:	443b      	add	r3, r7
 80045d6:	3b40      	subs	r3, #64	@ 0x40
 80045d8:	edd3 7a00 	vldr	s15, [r3]
 80045dc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80045e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	d506      	bpl.n	80045f8 <motor_mixer_quad_x+0x190>
 80045ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	3358      	adds	r3, #88	@ 0x58
 80045f0:	443b      	add	r3, r7
 80045f2:	3b40      	subs	r3, #64	@ 0x40
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 80045f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045fa:	3301      	adds	r3, #1
 80045fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004600:	2b03      	cmp	r3, #3
 8004602:	ddcf      	ble.n	80045a4 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 8004604:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800460c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004614:	dd22      	ble.n	800465c <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 8004616:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800461a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800461e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004622:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 8004626:	2300      	movs	r3, #0
 8004628:	647b      	str	r3, [r7, #68]	@ 0x44
 800462a:	e014      	b.n	8004656 <motor_mixer_quad_x+0x1ee>
 800462c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	3358      	adds	r3, #88	@ 0x58
 8004632:	443b      	add	r3, r7
 8004634:	3b40      	subs	r3, #64	@ 0x40
 8004636:	ed93 7a00 	vldr	s14, [r3]
 800463a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800463e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	3358      	adds	r3, #88	@ 0x58
 8004648:	443b      	add	r3, r7
 800464a:	3b40      	subs	r3, #64	@ 0x40
 800464c:	edc3 7a00 	vstr	s15, [r3]
 8004650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004652:	3301      	adds	r3, #1
 8004654:	647b      	str	r3, [r7, #68]	@ 0x44
 8004656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004658:	2b03      	cmp	r3, #3
 800465a:	dde7      	ble.n	800462c <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 800465c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	d522      	bpl.n	80046b0 <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 800466a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8004748 <motor_mixer_quad_x+0x2e0>
 800466e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004676:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 800467a:	2300      	movs	r3, #0
 800467c:	643b      	str	r3, [r7, #64]	@ 0x40
 800467e:	e014      	b.n	80046aa <motor_mixer_quad_x+0x242>
 8004680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	3358      	adds	r3, #88	@ 0x58
 8004686:	443b      	add	r3, r7
 8004688:	3b40      	subs	r3, #64	@ 0x40
 800468a:	ed93 7a00 	vldr	s14, [r3]
 800468e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	3358      	adds	r3, #88	@ 0x58
 800469c:	443b      	add	r3, r7
 800469e:	3b40      	subs	r3, #64	@ 0x40
 80046a0:	edc3 7a00 	vstr	s15, [r3]
 80046a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a6:	3301      	adds	r3, #1
 80046a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	dde7      	ble.n	8004680 <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 80046b0:	2300      	movs	r3, #0
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b4:	e03a      	b.n	800472c <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 80046b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3358      	adds	r3, #88	@ 0x58
 80046bc:	443b      	add	r3, r7
 80046be:	3b40      	subs	r3, #64	@ 0x40
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80046c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	dd01      	ble.n	80046d6 <motor_mixer_quad_x+0x26e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	e016      	b.n	8004704 <motor_mixer_quad_x+0x29c>
 80046d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	3358      	adds	r3, #88	@ 0x58
 80046dc:	443b      	add	r3, r7
 80046de:	3b40      	subs	r3, #64	@ 0x40
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	dd02      	ble.n	80046f8 <motor_mixer_quad_x+0x290>
 80046f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046f6:	e005      	b.n	8004704 <motor_mixer_quad_x+0x29c>
 80046f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	3358      	adds	r3, #88	@ 0x58
 80046fe:	443b      	add	r3, r7
 8004700:	3b40      	subs	r3, #64	@ 0x40
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004706:	0092      	lsls	r2, r2, #2
 8004708:	3258      	adds	r2, #88	@ 0x58
 800470a:	443a      	add	r2, r7
 800470c:	3a40      	subs	r2, #64	@ 0x40
 800470e:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 8004710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	4413      	add	r3, r2
 8004718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	3258      	adds	r2, #88	@ 0x58
 800471e:	443a      	add	r2, r7
 8004720:	3a40      	subs	r2, #64	@ 0x40
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	3301      	adds	r3, #1
 800472a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800472c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472e:	2b03      	cmp	r3, #3
 8004730:	ddc1      	ble.n	80046b6 <motor_mixer_quad_x+0x24e>
    }
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	375c      	adds	r7, #92	@ 0x5c
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	3ceaaefa 	.word	0x3ceaaefa
 8004744:	08021ff8 	.word	0x08021ff8
 8004748:	00000000 	.word	0x00000000

0800474c <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6178      	str	r0, [r7, #20]
 8004754:	ed87 0a04 	vstr	s0, [r7, #16]
 8004758:	edc7 0a03 	vstr	s1, [r7, #12]
 800475c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004760:	edc7 1a01 	vstr	s3, [r7, #4]
 8004764:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4a07      	ldr	r2, [pc, #28]	@ (80047c0 <pid_init+0x74>)
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	61da      	str	r2, [r3, #28]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	bf800000 	.word	0xbf800000

080047c4 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	61f8      	str	r0, [r7, #28]
 80047cc:	ed87 0a06 	vstr	s0, [r7, #24]
 80047d0:	edc7 0a05 	vstr	s1, [r7, #20]
 80047d4:	ed87 1a04 	vstr	s2, [r7, #16]
 80047d8:	edc7 1a03 	vstr	s3, [r7, #12]
 80047dc:	ed87 2a02 	vstr	s4, [r7, #8]
 80047e0:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 80047e4:	ed97 2a02 	vldr	s4, [r7, #8]
 80047e8:	edd7 1a03 	vldr	s3, [r7, #12]
 80047ec:	ed97 1a04 	vldr	s2, [r7, #16]
 80047f0:	edd7 0a05 	vldr	s1, [r7, #20]
 80047f4:	ed97 0a06 	vldr	s0, [r7, #24]
 80047f8:	69f8      	ldr	r0, [r7, #28]
 80047fa:	f7ff ffa7 	bl	800474c <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 80047fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004802:	69f8      	ldr	r0, [r7, #28]
 8004804:	f000 f8d4 	bl	80049b0 <pid_set_integral_limit>
}
 8004808:	bf00      	nop
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <pid_calculate>:

float pid_calculate(pid_t *pid, float setpoint, float process_value, float dt) {
 8004810:	b480      	push	{r7}
 8004812:	b08b      	sub	sp, #44	@ 0x2c
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	ed87 0a02 	vstr	s0, [r7, #8]
 800481c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004820:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 8004824:	ed97 7a02 	vldr	s14, [r7, #8]
 8004828:	edd7 7a01 	vldr	s15, [r7, #4]
 800482c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004830:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	edd3 7a02 	vldr	s15, [r3, #8]
 800483a:	ed97 7a05 	vldr	s14, [r7, #20]
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 8004858:	edd7 7a00 	vldr	s15, [r7]
 800485c:	eef0 7ae7 	vabs.f32	s15, s15
 8004860:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 8004870:	edd7 7a00 	vldr	s15, [r7]
 8004874:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80049ac <pid_calculate+0x19c>
 8004878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004880:	dd5c      	ble.n	800493c <pid_calculate+0x12c>
        pid->integral += error * dt;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	ed93 7a08 	vldr	s14, [r3, #32]
 8004888:	edd7 6a05 	vldr	s13, [r7, #20]
 800488c:	edd7 7a00 	vldr	s15, [r7]
 8004890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80048a4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80049ac <pid_calculate+0x19c>
 80048a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	dd24      	ble.n	80048fc <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80048be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	dd04      	ble.n	80048d2 <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]
 80048d0:	e014      	b.n	80048fc <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80048de:	eef1 7a67 	vneg.f32	s15, s15
 80048e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	d507      	bpl.n	80048fc <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80048f2:	eef1 7a67 	vneg.f32	s15, s15
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	edd3 7a08 	vldr	s15, [r3, #32]
 8004908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	edd3 7a06 	vldr	s15, [r3, #24]
 8004916:	ed97 7a05 	vldr	s14, [r7, #20]
 800491a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800491e:	ed97 7a00 	vldr	s14, [r7]
 8004922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004930:	ed97 7a07 	vldr	s14, [r7, #28]
 8004934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004938:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 800493c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004940:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004948:	ed97 7a08 	vldr	s14, [r7, #32]
 800494c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004950:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	ed97 7a06 	vldr	s14, [r7, #24]
 800495e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004966:	dd03      	ble.n	8004970 <pid_calculate+0x160>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e00c      	b.n	800498a <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	edd3 7a01 	vldr	s15, [r3, #4]
 8004976:	ed97 7a06 	vldr	s14, [r7, #24]
 800497a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	d502      	bpl.n	800498a <pid_calculate+0x17a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	619a      	str	r2, [r3, #24]
    return output;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	ee07 3a90 	vmov	s15, r3
}
 800499c:	eeb0 0a67 	vmov.f32	s0, s15
 80049a0:	372c      	adds	r7, #44	@ 0x2c
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	34000000 	.word	0x34000000

080049b0 <pid_set_integral_limit>:
void pid_set_min_output(pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(pid_t *pid, float val) {
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 80049bc:	edd7 7a00 	vldr	s15, [r7]
 80049c0:	eef0 7ae7 	vabs.f32	s15, s15
 80049c4:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80049d4:	ed97 7a00 	vldr	s14, [r7]
 80049d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e0:	d503      	bpl.n	80049ea <pid_set_integral_limit+0x3a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 80049e8:	e013      	b.n	8004a12 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	ed93 7a08 	vldr	s14, [r3, #32]
 80049f0:	edd7 7a00 	vldr	s15, [r7]
 80049f4:	eef1 7a67 	vneg.f32	s15, s15
 80049f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	d400      	bmi.n	8004a04 <pid_set_integral_limit+0x54>
}
 8004a02:	e006      	b.n	8004a12 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8004a04:	edd7 7a00 	vldr	s15, [r7]
 8004a08:	eef1 7a67 	vneg.f32	s15, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <pid_reset>:
float pid_get_Kp(pid_t *pid) { return pid->Kp; }
float pid_get_Ki(pid_t *pid) { return pid->Ki; }
float pid_get_Kd(pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(pid_t *pid) { return pid->integral; }

void pid_reset(pid_t *pid) {
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a68:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a6c:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d076      	beq.n	8004b64 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8004a76:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f017 faa1 	bl	801bfc4 <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	33c4      	adds	r3, #196	@ 0xc4
 8004a8c:	edd7 0a02 	vldr	s1, [r7, #8]
 8004a90:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fc fe82 	bl	800179e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	33ec      	adds	r3, #236	@ 0xec
 8004a9e:	edd7 0a02 	vldr	s1, [r7, #8]
 8004aa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc fe79 	bl	800179e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8004ab2:	edd7 0a02 	vldr	s1, [r7, #8]
 8004ab6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc fe6f 	bl	800179e <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004ac6:	edd7 0a02 	vldr	s1, [r7, #8]
 8004aca:	ed97 0a00 	vldr	s0, [r7]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc fdce 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004ada:	edd7 0a02 	vldr	s1, [r7, #8]
 8004ade:	ed97 0a00 	vldr	s0, [r7]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc fdc4 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004aee:	edd7 0a02 	vldr	s1, [r7, #8]
 8004af2:	ed97 0a00 	vldr	s0, [r7]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fc fdba 	bl	8001670 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3328      	adds	r3, #40	@ 0x28
 8004b00:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 8004b6c <rate_controller_init+0x110>
 8004b04:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8004b70 <rate_controller_init+0x114>
 8004b08:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8004b74 <rate_controller_init+0x118>
 8004b0c:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8004b6c <rate_controller_init+0x110>
 8004b10:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8004b6c <rate_controller_init+0x110>
 8004b14:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8004b6c <rate_controller_init+0x110>
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fe53 	bl	80047c4 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3354      	adds	r3, #84	@ 0x54
 8004b22:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8004b6c <rate_controller_init+0x110>
 8004b26:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8004b70 <rate_controller_init+0x114>
 8004b2a:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8004b74 <rate_controller_init+0x118>
 8004b2e:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8004b6c <rate_controller_init+0x110>
 8004b32:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8004b6c <rate_controller_init+0x110>
 8004b36:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8004b6c <rate_controller_init+0x110>
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fe42 	bl	80047c4 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3380      	adds	r3, #128	@ 0x80
 8004b44:	eddf 2a09 	vldr	s5, [pc, #36]	@ 8004b6c <rate_controller_init+0x110>
 8004b48:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8004b70 <rate_controller_init+0x114>
 8004b4c:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8004b74 <rate_controller_init+0x118>
 8004b50:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8004b6c <rate_controller_init+0x110>
 8004b54:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8004b6c <rate_controller_init+0x110>
 8004b58:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8004b6c <rate_controller_init+0x110>
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fe31 	bl	80047c4 <pid_init_with_integral_limit>
 8004b62:	e000      	b.n	8004b66 <rate_controller_init+0x10a>
        return;
 8004b64:	bf00      	nop
}
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	410ba058 	.word	0x410ba058
 8004b74:	c10ba058 	.word	0xc10ba058

08004b78 <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6178      	str	r0, [r7, #20]
 8004b80:	ed87 0a04 	vstr	s0, [r7, #16]
 8004b84:	edc7 0a03 	vstr	s1, [r7, #12]
 8004b88:	ed87 1a02 	vstr	s2, [r7, #8]
 8004b8c:	edc7 1a01 	vstr	s3, [r7, #4]
 8004b90:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3328      	adds	r3, #40	@ 0x28
 8004b98:	edd7 2a01 	vldr	s5, [r7, #4]
 8004b9c:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004bd0 <rate_controller_init_roll_pid+0x58>
 8004ba0:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004bd4 <rate_controller_init_roll_pid+0x5c>
 8004ba4:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004bd8 <rate_controller_init_roll_pid+0x60>
 8004ba8:	edd7 0a03 	vldr	s1, [r7, #12]
 8004bac:	ed97 0a04 	vldr	s0, [r7, #16]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fe07 	bl	80047c4 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	410ba058 	.word	0x410ba058
 8004bd4:	c10ba058 	.word	0xc10ba058
 8004bd8:	00000000 	.word	0x00000000

08004bdc <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6178      	str	r0, [r7, #20]
 8004be4:	ed87 0a04 	vstr	s0, [r7, #16]
 8004be8:	edc7 0a03 	vstr	s1, [r7, #12]
 8004bec:	ed87 1a02 	vstr	s2, [r7, #8]
 8004bf0:	edc7 1a01 	vstr	s3, [r7, #4]
 8004bf4:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	3354      	adds	r3, #84	@ 0x54
 8004bfc:	edd7 2a01 	vldr	s5, [r7, #4]
 8004c00:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004c34 <rate_controller_init_pitch_pid+0x58>
 8004c04:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004c38 <rate_controller_init_pitch_pid+0x5c>
 8004c08:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004c3c <rate_controller_init_pitch_pid+0x60>
 8004c0c:	edd7 0a03 	vldr	s1, [r7, #12]
 8004c10:	ed97 0a04 	vldr	s0, [r7, #16]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fdd5 	bl	80047c4 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	410ba058 	.word	0x410ba058
 8004c38:	c10ba058 	.word	0xc10ba058
 8004c3c:	00000000 	.word	0x00000000

08004c40 <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6178      	str	r0, [r7, #20]
 8004c48:	ed87 0a04 	vstr	s0, [r7, #16]
 8004c4c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004c50:	ed87 1a02 	vstr	s2, [r7, #8]
 8004c54:	edc7 1a01 	vstr	s3, [r7, #4]
 8004c58:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3380      	adds	r3, #128	@ 0x80
 8004c60:	edd7 2a01 	vldr	s5, [r7, #4]
 8004c64:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004c98 <rate_controller_init_yaw_pid+0x58>
 8004c68:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004c9c <rate_controller_init_yaw_pid+0x5c>
 8004c6c:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004ca0 <rate_controller_init_yaw_pid+0x60>
 8004c70:	edd7 0a03 	vldr	s1, [r7, #12]
 8004c74:	ed97 0a04 	vldr	s0, [r7, #16]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fda3 	bl	80047c4 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	410ba058 	.word	0x410ba058
 8004c9c:	c10ba058 	.word	0xc10ba058
 8004ca0:	00000000 	.word	0x00000000

08004ca4 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b092      	sub	sp, #72	@ 0x48
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	61f8      	str	r0, [r7, #28]
 8004cac:	ed87 0a06 	vstr	s0, [r7, #24]
 8004cb0:	edc7 0a05 	vstr	s1, [r7, #20]
 8004cb4:	ed87 1a04 	vstr	s2, [r7, #16]
 8004cb8:	edc7 1a03 	vstr	s3, [r7, #12]
 8004cbc:	ed87 2a02 	vstr	s4, [r7, #8]
 8004cc0:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 816c 	beq.w	8004fa4 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d16:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 8004d1a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004d1e:	eef0 7ae7 	vabs.f32	s15, s15
 8004d22:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004fac <rate_controller_update+0x308>
 8004d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2e:	f340 80e4 	ble.w	8004efa <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3328      	adds	r3, #40	@ 0x28
 8004d36:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004d3a:	edd7 0a06 	vldr	s1, [r7, #24]
 8004d3e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fd64 	bl	8004810 <pid_calculate>
 8004d48:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3354      	adds	r3, #84	@ 0x54
 8004d50:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004d54:	edd7 0a05 	vldr	s1, [r7, #20]
 8004d58:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fd57 	bl	8004810 <pid_calculate>
 8004d62:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3380      	adds	r3, #128	@ 0x80
 8004d6a:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004d6e:	edd7 0a04 	vldr	s1, [r7, #16]
 8004d72:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fd4a 	bl	8004810 <pid_calculate>
 8004d7c:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	edd3 6a03 	vldr	s13, [r3, #12]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d92:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004d96:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004d9a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	edd3 6a04 	vldr	s13, [r3, #16]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004db8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004dbc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004dc0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	edd3 6a05 	vldr	s13, [r3, #20]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	edd3 7a08 	vldr	s15, [r3, #32]
 8004dde:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004de2:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004de6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004df8:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fc fc9b 	bl	8001738 <pt1_filter_apply_lowpass>
 8004e02:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004e0c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fc fc91 	bl	8001738 <pt1_filter_apply_lowpass>
 8004e16:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004e20:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fc fc87 	bl	8001738 <pt1_filter_apply_lowpass>
 8004e2a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8004e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e44:	eeb0 0a67 	vmov.f32	s0, s15
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7fc fccb 	bl	80017e4 <pt2_filter_apply_lowpass>
 8004e4e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e68:	eeb0 0a67 	vmov.f32	s0, s15
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f7fc fcb9 	bl	80017e4 <pt2_filter_apply_lowpass>
 8004e72:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8004e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fc fca7 	bl	80017e4 <pt2_filter_apply_lowpass>
 8004e96:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 8004e9a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004e9e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 8004eaa:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004eae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 8004eba:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004ebe:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 8004eca:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004ece:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 8004eda:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004ede:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 8004eea:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004eee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004efa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004efe:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004fb0 <rate_controller_update+0x30c>
 8004f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	d501      	bpl.n	8004f10 <rate_controller_update+0x26c>
 8004f0c:	4b29      	ldr	r3, [pc, #164]	@ (8004fb4 <rate_controller_update+0x310>)
 8004f0e:	e00b      	b.n	8004f28 <rate_controller_update+0x284>
 8004f10:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f14:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004fb8 <rate_controller_update+0x314>
 8004f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f20:	dd01      	ble.n	8004f26 <rate_controller_update+0x282>
 8004f22:	4b26      	ldr	r3, [pc, #152]	@ (8004fbc <rate_controller_update+0x318>)
 8004f24:	e000      	b.n	8004f28 <rate_controller_update+0x284>
 8004f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f28:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004f2a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004f2e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004fb0 <rate_controller_update+0x30c>
 8004f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	d501      	bpl.n	8004f40 <rate_controller_update+0x29c>
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb4 <rate_controller_update+0x310>)
 8004f3e:	e00b      	b.n	8004f58 <rate_controller_update+0x2b4>
 8004f40:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004f44:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004fb8 <rate_controller_update+0x314>
 8004f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f50:	dd01      	ble.n	8004f56 <rate_controller_update+0x2b2>
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <rate_controller_update+0x318>)
 8004f54:	e000      	b.n	8004f58 <rate_controller_update+0x2b4>
 8004f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f58:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004f5a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004f5e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004fb0 <rate_controller_update+0x30c>
 8004f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6a:	d501      	bpl.n	8004f70 <rate_controller_update+0x2cc>
 8004f6c:	4b11      	ldr	r3, [pc, #68]	@ (8004fb4 <rate_controller_update+0x310>)
 8004f6e:	e00b      	b.n	8004f88 <rate_controller_update+0x2e4>
 8004f70:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004f74:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004fb8 <rate_controller_update+0x314>
 8004f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	dd01      	ble.n	8004f86 <rate_controller_update+0x2e2>
 8004f82:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <rate_controller_update+0x318>)
 8004f84:	e000      	b.n	8004f88 <rate_controller_update+0x2e4>
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f8e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f96:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f9e:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8004fa2:	e000      	b.n	8004fa6 <rate_controller_update+0x302>
        return;
 8004fa4:	bf00      	nop
}
 8004fa6:	3748      	adds	r7, #72	@ 0x48
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	34000000 	.word	0x34000000
 8004fb0:	c10ba058 	.word	0xc10ba058
 8004fb4:	c10ba058 	.word	0xc10ba058
 8004fb8:	410ba058 	.word	0x410ba058
 8004fbc:	410ba058 	.word	0x410ba058

08004fc0 <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	33c4      	adds	r3, #196	@ 0xc4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc fc26 	bl	800181e <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	33ec      	adds	r3, #236	@ 0xec
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc fc21 	bl	800181e <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fc fc1b 	bl	800181e <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fc fbc7 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fc fbc1 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005006:	4618      	mov	r0, r3
 8005008:	f7fc fbbb 	bl	8001782 <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3328      	adds	r3, #40	@ 0x28
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fd04 	bl	8004a1e <pid_reset>
    pid_reset(&(fc->pid_pitch));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3354      	adds	r3, #84	@ 0x54
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fcff 	bl	8004a1e <pid_reset>
    pid_reset(&(fc->pid_yaw));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3380      	adds	r3, #128	@ 0x80
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fcfa 	bl	8004a1e <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d018      	beq.n	80050ae <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e000      	b.n	80050b0 <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 80050ae:	bf00      	nop
    }
}
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b088      	sub	sp, #32
 80050be:	af00      	add	r7, sp, #0
 80050c0:	61f8      	str	r0, [r7, #28]
 80050c2:	61b9      	str	r1, [r7, #24]
 80050c4:	ed87 0a05 	vstr	s0, [r7, #20]
 80050c8:	edc7 0a04 	vstr	s1, [r7, #16]
 80050cc:	ed87 1a03 	vstr	s2, [r7, #12]
 80050d0:	edc7 1a02 	vstr	s3, [r7, #8]
 80050d4:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 80050d8:	2230      	movs	r2, #48	@ 0x30
 80050da:	2100      	movs	r1, #0
 80050dc:	69f8      	ldr	r0, [r7, #28]
 80050de:	f016 ff71 	bl	801bfc4 <memset>

	channel->enable_lpf = enable_lpf;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3304      	adds	r3, #4
 80050f2:	edd7 0a01 	vldr	s1, [r7, #4]
 80050f6:	ed97 0a05 	vldr	s0, [r7, #20]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc fab8 	bl	8001670 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005130:	bf00      	nop
 8005132:	3720      	adds	r7, #32
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 8005156:	edd7 7a03 	vldr	s15, [r7, #12]
 800515a:	eeb0 7ae7 	vabs.f32	s14, s15
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	edd3 7a08 	vldr	s15, [r3, #32]
 8005164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	d503      	bpl.n	8005176 <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e02b      	b.n	80051ce <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 8005176:	edd7 7a03 	vldr	s15, [r7, #12]
 800517a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005182:	dd12      	ble.n	80051aa <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	edd3 7a08 	vldr	s15, [r3, #32]
 800518a:	ed97 7a03 	vldr	s14, [r7, #12]
 800518e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	edd3 7a08 	vldr	s15, [r3, #32]
 8005198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800519c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a4:	edc7 7a03 	vstr	s15, [r7, #12]
 80051a8:	e011      	b.n	80051ce <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80051b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051b4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80051be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ca:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80051d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	d01a      	beq.n	8005214 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 80051de:	edd7 7a03 	vldr	s15, [r7, #12]
 80051e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80051ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f4:	eef0 0a67 	vmov.f32	s1, s15
 80051f8:	eeb0 0a47 	vmov.f32	s0, s14
 80051fc:	f014 f82e 	bl	801925c <powf>
 8005200:	eef0 7a40 	vmov.f32	s15, s0
 8005204:	edd7 0a03 	vldr	s1, [r7, #12]
 8005208:	eeb0 0a67 	vmov.f32	s0, s15
 800520c:	f014 fa0c 	bl	8019628 <copysignf>
 8005210:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800521a:	ed97 7a03 	vldr	s14, [r7, #12]
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	ed97 0a03 	vldr	s0, [r7, #12]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fa7e 	bl	8001738 <pt1_filter_apply_lowpass>
 800523c:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	615a      	str	r2, [r3, #20]
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	ee07 3a90 	vmov	s15, r3
}
 800525e:	eeb0 0a67 	vmov.f32	s0, s15
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	61f8      	str	r0, [r7, #28]
 8005274:	61b9      	str	r1, [r7, #24]
 8005276:	ed87 0a05 	vstr	s0, [r7, #20]
 800527a:	edc7 0a04 	vstr	s1, [r7, #16]
 800527e:	ed87 1a03 	vstr	s2, [r7, #12]
 8005282:	edc7 1a02 	vstr	s3, [r7, #8]
 8005286:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	ed97 2a01 	vldr	s4, [r7, #4]
 8005290:	edd7 1a02 	vldr	s3, [r7, #8]
 8005294:	ed97 1a03 	vldr	s2, [r7, #12]
 8005298:	edd7 0a04 	vldr	s1, [r7, #16]
 800529c:	ed97 0a05 	vldr	s0, [r7, #20]
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff09 	bl	80050ba <rc_channel_filter_init>
}
 80052a8:	bf00      	nop
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80052bc:	edd7 7a00 	vldr	s15, [r7]
 80052c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80052c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052cc:	d501      	bpl.n	80052d2 <rc_attitude_control_update_roll+0x22>
 80052ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <rc_attitude_control_update_roll+0x54>)
 80052d0:	e00c      	b.n	80052ec <rc_attitude_control_update_roll+0x3c>
 80052d2:	edd7 7a00 	vldr	s15, [r7]
 80052d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e2:	dd02      	ble.n	80052ea <rc_attitude_control_update_roll+0x3a>
 80052e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80052e8:	e000      	b.n	80052ec <rc_attitude_control_update_roll+0x3c>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	ed97 0a00 	vldr	s0, [r7]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff ff1f 	bl	8005138 <rc_channel_filter_update>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	bf800000 	.word	0xbf800000

08005308 <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ff9b 	bl	800524e <rc_channel_filter_get_processed>
 8005318:	eef0 7a40 	vmov.f32	s15, s0
}
 800531c:	eeb0 0a67 	vmov.f32	s0, s15
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8005326:	b580      	push	{r7, lr}
 8005328:	b088      	sub	sp, #32
 800532a:	af00      	add	r7, sp, #0
 800532c:	61f8      	str	r0, [r7, #28]
 800532e:	61b9      	str	r1, [r7, #24]
 8005330:	ed87 0a05 	vstr	s0, [r7, #20]
 8005334:	edc7 0a04 	vstr	s1, [r7, #16]
 8005338:	ed87 1a03 	vstr	s2, [r7, #12]
 800533c:	edc7 1a02 	vstr	s3, [r7, #8]
 8005340:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3330      	adds	r3, #48	@ 0x30
 8005348:	ed97 2a01 	vldr	s4, [r7, #4]
 800534c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005350:	ed97 1a03 	vldr	s2, [r7, #12]
 8005354:	edd7 0a04 	vldr	s1, [r7, #16]
 8005358:	ed97 0a05 	vldr	s0, [r7, #20]
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff feab 	bl	80050ba <rc_channel_filter_init>
}
 8005364:	bf00      	nop
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8005378:	edd7 7a00 	vldr	s15, [r7]
 800537c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005388:	d501      	bpl.n	800538e <rc_attitude_control_update_pitch+0x22>
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <rc_attitude_control_update_pitch+0x54>)
 800538c:	e00c      	b.n	80053a8 <rc_attitude_control_update_pitch+0x3c>
 800538e:	edd7 7a00 	vldr	s15, [r7]
 8005392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539e:	dd02      	ble.n	80053a6 <rc_attitude_control_update_pitch+0x3a>
 80053a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053a4:	e000      	b.n	80053a8 <rc_attitude_control_update_pitch+0x3c>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3330      	adds	r3, #48	@ 0x30
 80053ae:	ed97 0a00 	vldr	s0, [r7]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fec0 	bl	8005138 <rc_channel_filter_update>
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	bf800000 	.word	0xbf800000

080053c4 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3330      	adds	r3, #48	@ 0x30
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff ff3c 	bl	800524e <rc_channel_filter_get_processed>
 80053d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80053da:	eeb0 0a67 	vmov.f32	s0, s15
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	61f8      	str	r0, [r7, #28]
 80053ec:	61b9      	str	r1, [r7, #24]
 80053ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80053f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80053f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80053fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80053fe:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3360      	adds	r3, #96	@ 0x60
 8005406:	ed97 2a01 	vldr	s4, [r7, #4]
 800540a:	edd7 1a02 	vldr	s3, [r7, #8]
 800540e:	ed97 1a03 	vldr	s2, [r7, #12]
 8005412:	edd7 0a04 	vldr	s1, [r7, #16]
 8005416:	ed97 0a05 	vldr	s0, [r7, #20]
 800541a:	69b9      	ldr	r1, [r7, #24]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fe4c 	bl	80050ba <rc_channel_filter_init>
}
 8005422:	bf00      	nop
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8005438:	edd7 7a00 	vldr	s15, [r7]
 800543c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005448:	d501      	bpl.n	800544e <rc_attitude_control_update_yaw+0x22>
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <rc_attitude_control_update_yaw+0x54>)
 800544c:	e00c      	b.n	8005468 <rc_attitude_control_update_yaw+0x3c>
 800544e:	edd7 7a00 	vldr	s15, [r7]
 8005452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545e:	dd02      	ble.n	8005466 <rc_attitude_control_update_yaw+0x3a>
 8005460:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005464:	e000      	b.n	8005468 <rc_attitude_control_update_yaw+0x3c>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3360      	adds	r3, #96	@ 0x60
 800546e:	ed97 0a00 	vldr	s0, [r7]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fe60 	bl	8005138 <rc_channel_filter_update>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	bf800000 	.word	0xbf800000

08005484 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3360      	adds	r3, #96	@ 0x60
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fedc 	bl	800524e <rc_channel_filter_get_processed>
 8005496:	eef0 7a40 	vmov.f32	s15, s0
}
 800549a:	eeb0 0a67 	vmov.f32	s0, s15
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	61f8      	str	r0, [r7, #28]
 80054ac:	61b9      	str	r1, [r7, #24]
 80054ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80054b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80054b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80054ba:	edc7 1a02 	vstr	s3, [r7, #8]
 80054be:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3390      	adds	r3, #144	@ 0x90
 80054c6:	ed97 2a01 	vldr	s4, [r7, #4]
 80054ca:	edd7 1a02 	vldr	s3, [r7, #8]
 80054ce:	ed97 1a03 	vldr	s2, [r7, #12]
 80054d2:	edd7 0a04 	vldr	s1, [r7, #16]
 80054d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80054da:	69b9      	ldr	r1, [r7, #24]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fdec 	bl	80050ba <rc_channel_filter_init>
}
 80054e2:	bf00      	nop
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 80054f6:	edd7 7a00 	vldr	s15, [r7]
 80054fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005502:	d502      	bpl.n	800550a <rc_attitude_control_update_throttle+0x20>
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e00c      	b.n	8005524 <rc_attitude_control_update_throttle+0x3a>
 800550a:	edd7 7a00 	vldr	s15, [r7]
 800550e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	dd02      	ble.n	8005522 <rc_attitude_control_update_throttle+0x38>
 800551c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005520:	e000      	b.n	8005524 <rc_attitude_control_update_throttle+0x3a>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3390      	adds	r3, #144	@ 0x90
 800552a:	ed97 0a00 	vldr	s0, [r7]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fe02 	bl	8005138 <rc_channel_filter_update>
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3390      	adds	r3, #144	@ 0x90
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fe80 	bl	800524e <rc_channel_filter_get_processed>
 800554e:	eef0 7a40 	vmov.f32	s15, s0
}
 8005552:	eeb0 0a67 	vmov.f32	s0, s15
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6178      	str	r0, [r7, #20]
 8005564:	ed87 0a04 	vstr	s0, [r7, #16]
 8005568:	edc7 0a03 	vstr	s1, [r7, #12]
 800556c:	ed87 1a02 	vstr	s2, [r7, #8]
 8005570:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 8005574:	ed97 0a04 	vldr	s0, [r7, #16]
 8005578:	6978      	ldr	r0, [r7, #20]
 800557a:	f7ff fe99 	bl	80052b0 <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 800557e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff fef2 	bl	800536c <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 8005588:	ed97 0a02 	vldr	s0, [r7, #8]
 800558c:	6978      	ldr	r0, [r7, #20]
 800558e:	f7ff ff4d 	bl	800542c <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 8005592:	ed97 0a01 	vldr	s0, [r7, #4]
 8005596:	6978      	ldr	r0, [r7, #20]
 8005598:	f7ff ffa7 	bl	80054ea <rc_attitude_control_update_throttle>

}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
	if (roll) {
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fea5 	bl	8005308 <rc_attitude_control_get_processed_roll>
 80055be:	eef0 7a40 	vmov.f32	s15, s0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7ff fef8 	bl	80053c4 <rc_attitude_control_get_processed_pitch>
 80055d4:	eef0 7a40 	vmov.f32	s15, s0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff4d 	bl	8005484 <rc_attitude_control_get_processed_yaw>
 80055ea:	eef0 7a40 	vmov.f32	s15, s0
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff ff9e 	bl	800553c <rc_attitude_control_get_processed_throttle>
 8005600:	eef0 7a40 	vmov.f32	s15, s0
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	edc3 7a00 	vstr	s15, [r3]
	}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <prv_parse_input>:
/**
 * \brief           Parse input string
 * \param[in]       lwobj: LwSHELL instance
 */
static void
prv_parse_input(lwshell_t* lwobj) {
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b089      	sub	sp, #36	@ 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

    /*
     * Check string length and compare with buffer pointer
     * Must be more than `1` character since we have to include end of line
     */
    s_len = strlen(lwobj->buff);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f7fa fe35 	bl	8000290 <strlen>
 8005626:	60f8      	str	r0, [r7, #12]
    if (s_len != lwobj->buff_ptr || lwobj->buff_ptr == 0) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	f040 8197 	bne.w	8005964 <prv_parse_input+0x350>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8191 	beq.w	8005964 <prv_parse_input+0x350>
        return;
    }

    /* Set default values */
    lwobj->argc = 0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    lwobj->argv[0] = lwobj->buff;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Process complete input */
    str = lwobj->buff;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	61fb      	str	r3, [r7, #28]

    /* Process complete string */
    while (*str != '\0') {
 800565a:	e072      	b.n	8005742 <prv_parse_input+0x12e>
        while (*str == ' ' && ++str) {} /* Remove leading spaces */
 800565c:	bf00      	nop
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b20      	cmp	r3, #32
 8005664:	d105      	bne.n	8005672 <prv_parse_input+0x5e>
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f5      	bne.n	800565e <prv_parse_input+0x4a>
        if (*str == '\0') {
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d068      	beq.n	800574c <prv_parse_input+0x138>
            break;
        }

        /* Check if it starts with quote to handle escapes */
        if (*str == '"') {
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b22      	cmp	r3, #34	@ 0x22
 8005680:	d131      	bne.n	80056e6 <prv_parse_input+0xd2>
            ++str;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument after quotes */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	3324      	adds	r3, #36	@ 0x24
 800569a:	69f9      	ldr	r1, [r7, #28]
 800569c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            /* Process until end of quote */
            while (*str != '\0') {
 80056a0:	e01c      	b.n	80056dc <prv_parse_input+0xc8>
                if (*str == '\\') {
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b5c      	cmp	r3, #92	@ 0x5c
 80056a8:	d10a      	bne.n	80056c0 <prv_parse_input+0xac>
                    ++str;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3301      	adds	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
                    if (*str == '"') {
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b22      	cmp	r3, #34	@ 0x22
 80056b6:	d111      	bne.n	80056dc <prv_parse_input+0xc8>
                        ++str;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e00d      	b.n	80056dc <prv_parse_input+0xc8>
                    }
                } else if (*str == '"') {
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b22      	cmp	r3, #34	@ 0x22
 80056c6:	d106      	bne.n	80056d6 <prv_parse_input+0xc2>
                    *str = '\0';
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
                    ++str;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3301      	adds	r3, #1
 80056d2:	61fb      	str	r3, [r7, #28]
                    break;
 80056d4:	e030      	b.n	8005738 <prv_parse_input+0x124>
                } else {
                    ++str;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3301      	adds	r3, #1
 80056da:	61fb      	str	r3, [r7, #28]
            while (*str != '\0') {
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1de      	bne.n	80056a2 <prv_parse_input+0x8e>
 80056e4:	e028      	b.n	8005738 <prv_parse_input+0x124>
                }
            }
        } else {
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument directly on character */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	3324      	adds	r3, #36	@ 0x24
 80056f8:	69f9      	ldr	r1, [r7, #28]
 80056fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            while (*str != ' ' && *str != '\0') {
 80056fe:	e009      	b.n	8005714 <prv_parse_input+0x100>
                if (*str == '"') { /* Quote should not be here... */
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b22      	cmp	r3, #34	@ 0x22
 8005706:	d102      	bne.n	800570e <prv_parse_input+0xfa>
                    *str = '\0';   /* ...add NULL termination to end token */
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
                }
                ++str;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
            while (*str != ' ' && *str != '\0') {
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b20      	cmp	r3, #32
 800571a:	d003      	beq.n	8005724 <prv_parse_input+0x110>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1ed      	bne.n	8005700 <prv_parse_input+0xec>
            }
            if (*str == '\0') {
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <prv_parse_input+0x13c>
                break;
            }
            *str = '\0';
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
            ++str;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
        }

        /* Check for number of arguments */
        if (lwobj->argc == LWSHELL_ARRAYSIZE(lwobj->argv)) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800573e:	2b08      	cmp	r3, #8
 8005740:	d008      	beq.n	8005754 <prv_parse_input+0x140>
    while (*str != '\0') {
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d188      	bne.n	800565c <prv_parse_input+0x48>
 800574a:	e004      	b.n	8005756 <prv_parse_input+0x142>
            break;
 800574c:	bf00      	nop
 800574e:	e002      	b.n	8005756 <prv_parse_input+0x142>
                break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <prv_parse_input+0x142>
            break;
 8005754:	bf00      	nop
        }
    }

    /* Check for command */
    if (lwobj->argc > 0) {
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800575c:	2b00      	cmp	r3, #0
 800575e:	f340 8102 	ble.w	8005966 <prv_parse_input+0x352>
        const lwshell_cmd_t* ccmd = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
        size_t arg_len = strlen(lwobj->argv[0]);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa fd8f 	bl	8000290 <strlen>
 8005772:	60b8      	str	r0, [r7, #8]

#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
        /* Process all dynamic commands */
        if (ccmd == NULL && lwobj->dynamic_cmds_cnt > 0) {
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d13d      	bne.n	80057f6 <prv_parse_input+0x1e2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005780:	2b00      	cmp	r3, #0
 8005782:	d038      	beq.n	80057f6 <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e02f      	b.n	80057ea <prv_parse_input+0x1d6>
                if (arg_len == strlen(lwobj->dynamic_cmds[idx].name)
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	33b4      	adds	r3, #180	@ 0xb4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fd77 	bl	8000290 <strlen>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d11c      	bne.n	80057e4 <prv_parse_input+0x1d0>
                    && strncmp(lwobj->dynamic_cmds[idx].name, lwobj->argv[0], arg_len) == 0) {
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	33b4      	adds	r3, #180	@ 0xb4
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4619      	mov	r1, r3
 80057c6:	f016 fc05 	bl	801bfd4 <strncmp>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <prv_parse_input+0x1d0>
                    ccmd = &lwobj->dynamic_cmds[idx];
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	33b0      	adds	r3, #176	@ 0xb0
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
                    break;
 80057e2:	e008      	b.n	80057f6 <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	3301      	adds	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d3c9      	bcc.n	800578a <prv_parse_input+0x176>
            }
        }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */

        /* Valid command ready? */
        if (ccmd != NULL) {
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d03c      	beq.n	8005876 <prv_parse_input+0x262>
            if (lwobj->argc == 2U && lwobj->argv[1][0] == '-' && lwobj->argv[1][1] == 'h'
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005802:	2b02      	cmp	r3, #2
 8005804:	d12d      	bne.n	8005862 <prv_parse_input+0x24e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b2d      	cmp	r3, #45	@ 0x2d
 8005810:	d127      	bne.n	8005862 <prv_parse_input+0x24e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005818:	3301      	adds	r3, #1
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b68      	cmp	r3, #104	@ 0x68
 800581e:	d120      	bne.n	8005862 <prv_parse_input+0x24e>
                && lwobj->argv[1][2] == '\0') {
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005826:	3302      	adds	r3, #2
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d119      	bne.n	8005862 <prv_parse_input+0x24e>
                /* Here we can print version */
                LWSHELL_OUTPUT(lwobj, ccmd->desc);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <prv_parse_input+0x238>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <prv_parse_input+0x238>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	6892      	ldr	r2, [r2, #8]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4610      	mov	r0, r2
 800584a:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, "\r\n");
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8088 	beq.w	8005966 <prv_parse_input+0x352>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4843      	ldr	r0, [pc, #268]	@ (800596c <prv_parse_input+0x358>)
 800585e:	4798      	blx	r3
 8005860:	e081      	b.n	8005966 <prv_parse_input+0x352>
            } else {
                ccmd->fn(lwobj->argc, lwobj->argv);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	3290      	adds	r2, #144	@ 0x90
 8005870:	4611      	mov	r1, r2
 8005872:	4798      	blx	r3
 8005874:	e077      	b.n	8005966 <prv_parse_input+0x352>
            }
#if LWSHELL_CFG_USE_LIST_CMD
        } else if (strncmp(lwobj->argv[0], "listcmd", 7U) == 0) {
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	2207      	movs	r2, #7
 800587e:	493c      	ldr	r1, [pc, #240]	@ (8005970 <prv_parse_input+0x35c>)
 8005880:	4618      	mov	r0, r3
 8005882:	f016 fba7 	bl	801bfd4 <strncmp>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d161      	bne.n	8005950 <prv_parse_input+0x33c>
            LWSHELL_OUTPUT(lwobj, "List of registered commands\r\n");
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <prv_parse_input+0x28a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4836      	ldr	r0, [pc, #216]	@ (8005974 <prv_parse_input+0x360>)
 800589c:	4798      	blx	r3
#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	e04e      	b.n	8005942 <prv_parse_input+0x32e>
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].name);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d018      	beq.n	80058de <prv_parse_input+0x2ca>
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	33b4      	adds	r3, #180	@ 0xb4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00d      	beq.n	80058de <prv_parse_input+0x2ca>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681c      	ldr	r4, [r3, #0]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4613      	mov	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	33b4      	adds	r3, #180	@ 0xb4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\t\t\t");
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <prv_parse_input+0x2dc>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4822      	ldr	r0, [pc, #136]	@ (8005978 <prv_parse_input+0x364>)
 80058ee:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].desc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d018      	beq.n	800592a <prv_parse_input+0x316>
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4613      	mov	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	33b8      	adds	r3, #184	@ 0xb8
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00d      	beq.n	800592a <prv_parse_input+0x316>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681c      	ldr	r4, [r3, #0]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4613      	mov	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	33b8      	adds	r3, #184	@ 0xb8
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4618      	mov	r0, r3
 8005928:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\r\n");
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <prv_parse_input+0x328>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	480c      	ldr	r0, [pc, #48]	@ (800596c <prv_parse_input+0x358>)
 800593a:	4798      	blx	r3
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3301      	adds	r3, #1
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	429a      	cmp	r2, r3
 800594c:	d3aa      	bcc.n	80058a4 <prv_parse_input+0x290>
 800594e:	e00a      	b.n	8005966 <prv_parse_input+0x352>
                LWSHELL_OUTPUT(lwobj, "\r\n");
            }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */
#endif /* LWSHELL_CFG_USE_LIST_CMD */
        } else {
            LWSHELL_OUTPUT(lwobj, LWSHELL_CFG_USE_LIST_CMD
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d006      	beq.n	8005966 <prv_parse_input+0x352>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4807      	ldr	r0, [pc, #28]	@ (800597c <prv_parse_input+0x368>)
 8005960:	4798      	blx	r3
 8005962:	e000      	b.n	8005966 <prv_parse_input+0x352>
        return;
 8005964:	bf00      	nop
                                      ? "Unknown command, use listcmd to list available commands\r\n"
                                      : "Unknown command\r\n");
        }
    }
}
 8005966:	3724      	adds	r7, #36	@ 0x24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd90      	pop	{r4, r7, pc}
 800596c:	0801ff50 	.word	0x0801ff50
 8005970:	0801ff54 	.word	0x0801ff54
 8005974:	0801ff5c 	.word	0x0801ff5c
 8005978:	0801ff7c 	.word	0x0801ff7c
 800597c:	0801ff80 	.word	0x0801ff80

08005980 <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <lwshell_init_ex+0x12>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	e000      	b.n	8005994 <lwshell_init_ex+0x14>
 8005992:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <lwshell_init_ex+0x2c>)
 8005994:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 8005996:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800599a:	2100      	movs	r1, #0
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f016 fb11 	bl	801bfc4 <memset>
    return lwshellOK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000514 	.word	0x20000514

080059b0 <lwshell_set_output_fn_ex>:
 * \param[in]       out_fn: Output function to print library data.
 *                      Set to `NULL` to disable the feature
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn) {
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <lwshell_set_output_fn_ex+0x14>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	e000      	b.n	80059c6 <lwshell_set_output_fn_ex+0x16>
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <lwshell_set_output_fn_ex+0x2c>)
 80059c6:	607b      	str	r3, [r7, #4]
    lwobj->out_fn = out_fn;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
    return lwshellOK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000514 	.word	0x20000514

080059e0 <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <lwshell_register_cmd_ex+0x18>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	e000      	b.n	80059fa <lwshell_register_cmd_ex+0x1a>
 80059f8:	4b23      	ldr	r3, [pc, #140]	@ (8005a88 <lwshell_register_cmd_ex+0xa8>)
 80059fa:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d006      	beq.n	8005a10 <lwshell_register_cmd_ex+0x30>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <lwshell_register_cmd_ex+0x30>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e032      	b.n	8005a7a <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005a1a:	2b07      	cmp	r3, #7
 8005a1c:	d82c      	bhi.n	8005a78 <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005a24:	68f9      	ldr	r1, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	33b4      	adds	r3, #180	@ 0xb4
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	33b0      	adds	r3, #176	@ 0xb0
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	33b8      	adds	r3, #184	@ 0xb8
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        return lwshellOK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e000      	b.n	8005a7a <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 8005a78:	2302      	movs	r3, #2
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000514 	.word	0x20000514

08005a8c <lwshell_input_ex>:
 * \param[in]       in_data: Input data to process
 * \param[in]       len: Length of data for input
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
    const char* p_data = in_data;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	61bb      	str	r3, [r7, #24]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <lwshell_input_ex+0x1a>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	e000      	b.n	8005aa8 <lwshell_input_ex+0x1c>
 8005aa6:	4b54      	ldr	r3, [pc, #336]	@ (8005bf8 <lwshell_input_ex+0x16c>)
 8005aa8:	60fb      	str	r3, [r7, #12]

    if (in_data == NULL || len == 0) {
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <lwshell_input_ex+0x2a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <lwshell_input_ex+0x2e>
        return lwshellERRPAR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e09a      	b.n	8005bf0 <lwshell_input_ex+0x164>
    }

    /* Process all bytes */
    for (size_t idx = 0; idx < len; ++idx) {
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e091      	b.n	8005be4 <lwshell_input_ex+0x158>
        switch (p_data[idx]) {
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b0d      	cmp	r3, #13
 8005aca:	d005      	beq.n	8005ad8 <lwshell_input_ex+0x4c>
 8005acc:	2b0d      	cmp	r3, #13
 8005ace:	dc48      	bgt.n	8005b62 <lwshell_input_ex+0xd6>
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d029      	beq.n	8005b28 <lwshell_input_ex+0x9c>
 8005ad4:	2b0a      	cmp	r3, #10
 8005ad6:	d144      	bne.n	8005b62 <lwshell_input_ex+0xd6>
            case LWSHELL_ASCII_CR:
            case LWSHELL_ASCII_LF: {
                LWSHELL_OUTPUT(lwobj, p_data[idx] == LWSHELL_ASCII_CR ? "\r" : "\n");
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <lwshell_input_ex+0x70>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	440a      	add	r2, r1
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	2a0d      	cmp	r2, #13
 8005aee:	d101      	bne.n	8005af4 <lwshell_input_ex+0x68>
 8005af0:	4a42      	ldr	r2, [pc, #264]	@ (8005bfc <lwshell_input_ex+0x170>)
 8005af2:	e000      	b.n	8005af6 <lwshell_input_ex+0x6a>
 8005af4:	4a42      	ldr	r2, [pc, #264]	@ (8005c00 <lwshell_input_ex+0x174>)
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
                prv_parse_input(lwobj);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fd89 	bl	8005614 <prv_parse_input>
                LWSHELL_RESET_BUFF(lwobj);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3304      	adds	r3, #4
 8005b06:	2281      	movs	r2, #129	@ 0x81
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f016 fa5a 	bl	801bfc4 <memset>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3390      	adds	r3, #144	@ 0x90
 8005b14:	2220      	movs	r2, #32
 8005b16:	2100      	movs	r1, #0
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f016 fa53 	bl	801bfc4 <memset>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                break;
 8005b26:	e05a      	b.n	8005bde <lwshell_input_ex+0x152>
            }
            case LWSHELL_ASCII_BACKSPACE: {
                /* Try to delete character from buffer */
                if (lwobj->buff_ptr > 0) {
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d054      	beq.n	8005bdc <lwshell_input_ex+0x150>
                    --lwobj->buff_ptr;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	1e5a      	subs	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                    lwobj->buff[lwobj->buff_ptr] = '\0';
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	711a      	strb	r2, [r3, #4]
                    LWSHELL_OUTPUT(lwobj, "\b \b");
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d042      	beq.n	8005bdc <lwshell_input_ex+0x150>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	4829      	ldr	r0, [pc, #164]	@ (8005c04 <lwshell_input_ex+0x178>)
 8005b5e:	4798      	blx	r3
                }
                break;
 8005b60:	e03c      	b.n	8005bdc <lwshell_input_ex+0x150>
            }
            default: {
#if LWSHELL_CFG_USE_OUTPUT
                char str[2] = {p_data[idx], 0};
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	753b      	strb	r3, [r7, #20]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	757b      	strb	r3, [r7, #21]
                LWSHELL_OUTPUT(lwobj, str);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <lwshell_input_ex+0xfa>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f107 0214 	add.w	r2, r7, #20
 8005b80:	68f9      	ldr	r1, [r7, #12]
 8005b82:	4610      	mov	r0, r2
 8005b84:	4798      	blx	r3
#endif /* LWSHELL_CFG_USE_OUTPUT */
                if (p_data[idx] >= 0x20 && p_data[idx] < 0x7F) {
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b1f      	cmp	r3, #31
 8005b90:	d925      	bls.n	8005bde <lwshell_input_ex+0x152>
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b7e      	cmp	r3, #126	@ 0x7e
 8005b9c:	d81f      	bhi.n	8005bde <lwshell_input_ex+0x152>
                    LWSHELL_ADD_CH(lwobj, p_data[idx]);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba6:	d81a      	bhi.n	8005bde <lwshell_input_ex+0x152>
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	441a      	add	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb4:	7811      	ldrb	r1, [r2, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	460a      	mov	r2, r1
 8005bbc:	711a      	strb	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	711a      	strb	r2, [r3, #4]
 8005bda:	e000      	b.n	8005bde <lwshell_input_ex+0x152>
                break;
 8005bdc:	bf00      	nop
    for (size_t idx = 0; idx < len; ++idx) {
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	3301      	adds	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	f4ff af69 	bcc.w	8005ac0 <lwshell_input_ex+0x34>
                }
            }
        }
    }
    return lwshellOK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3720      	adds	r7, #32
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000514 	.word	0x20000514
 8005bfc:	0801ffbc 	.word	0x0801ffbc
 8005c00:	0801ffc0 	.word	0x0801ffc0
 8005c04:	0801ffc4 	.word	0x0801ffc4

08005c08 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	460a      	mov	r2, r1
 8005c12:	71fb      	strb	r3, [r7, #7]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 8005c18:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	48a4      	ldr	r0, [pc, #656]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c20:	f016 f9d0 	bl	801bfc4 <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 8005c24:	4ba2      	ldr	r3, [pc, #648]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c26:	4aa3      	ldr	r2, [pc, #652]	@ (8005eb4 <mpu6500_basic_init+0x2ac>)
 8005c28:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 8005c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c2c:	4aa2      	ldr	r2, [pc, #648]	@ (8005eb8 <mpu6500_basic_init+0x2b0>)
 8005c2e:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 8005c30:	4b9f      	ldr	r3, [pc, #636]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c32:	4aa2      	ldr	r2, [pc, #648]	@ (8005ebc <mpu6500_basic_init+0x2b4>)
 8005c34:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 8005c36:	4b9e      	ldr	r3, [pc, #632]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c38:	4aa1      	ldr	r2, [pc, #644]	@ (8005ec0 <mpu6500_basic_init+0x2b8>)
 8005c3a:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 8005c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c3e:	4aa1      	ldr	r2, [pc, #644]	@ (8005ec4 <mpu6500_basic_init+0x2bc>)
 8005c40:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 8005c42:	4b9b      	ldr	r3, [pc, #620]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c44:	4aa0      	ldr	r2, [pc, #640]	@ (8005ec8 <mpu6500_basic_init+0x2c0>)
 8005c46:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 8005c48:	4b99      	ldr	r3, [pc, #612]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c4a:	4aa0      	ldr	r2, [pc, #640]	@ (8005ecc <mpu6500_basic_init+0x2c4>)
 8005c4c:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 8005c4e:	4b98      	ldr	r3, [pc, #608]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c50:	4a9f      	ldr	r2, [pc, #636]	@ (8005ed0 <mpu6500_basic_init+0x2c8>)
 8005c52:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 8005c54:	4b96      	ldr	r3, [pc, #600]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c56:	4a9f      	ldr	r2, [pc, #636]	@ (8005ed4 <mpu6500_basic_init+0x2cc>)
 8005c58:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 8005c5a:	4b95      	ldr	r3, [pc, #596]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c5c:	4a9e      	ldr	r2, [pc, #632]	@ (8005ed8 <mpu6500_basic_init+0x2d0>)
 8005c5e:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 8005c60:	4b93      	ldr	r3, [pc, #588]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c62:	4a9e      	ldr	r2, [pc, #632]	@ (8005edc <mpu6500_basic_init+0x2d4>)
 8005c64:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4891      	ldr	r0, [pc, #580]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c6c:	f000 fd86 	bl	800677c <mpu6500_set_interface>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 8005c7a:	4899      	ldr	r0, [pc, #612]	@ (8005ee0 <mpu6500_basic_init+0x2d8>)
 8005c7c:	f000 fca2 	bl	80065c4 <mpu6500_interface_debug_print>
       
        return 1;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e3ce      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 8005c84:	79bb      	ldrb	r3, [r7, #6]
 8005c86:	4619      	mov	r1, r3
 8005c88:	4889      	ldr	r0, [pc, #548]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005c8a:	f000 fd8d 	bl	80067a8 <mpu6500_set_addr_pin>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 8005c98:	4892      	ldr	r0, [pc, #584]	@ (8005ee4 <mpu6500_basic_init+0x2dc>)
 8005c9a:	f000 fc93 	bl	80065c4 <mpu6500_interface_debug_print>
       
        return 1;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e3bf      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 8005ca2:	4883      	ldr	r0, [pc, #524]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005ca4:	f000 fd96 	bl	80067d4 <mpu6500_init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 8005cb2:	488d      	ldr	r0, [pc, #564]	@ (8005ee8 <mpu6500_basic_init+0x2e0>)
 8005cb4:	f000 fc86 	bl	80065c4 <mpu6500_interface_debug_print>
       
        return 1;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e3b2      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 8005cbc:	2064      	movs	r0, #100	@ 0x64
 8005cbe:	f000 fc6b 	bl	8006598 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	487a      	ldr	r0, [pc, #488]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005cc6:	f001 ff61 	bl	8007b8c <mpu6500_set_sleep>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 8005cd4:	4885      	ldr	r0, [pc, #532]	@ (8005eec <mpu6500_basic_init+0x2e4>)
 8005cd6:	f000 fc75 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005cda:	4875      	ldr	r0, [pc, #468]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005cdc:	f000 fea6 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e39e      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d110      	bne.n	8005d0c <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8005cea:	2101      	movs	r1, #1
 8005cec:	4870      	ldr	r0, [pc, #448]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005cee:	f001 fe17 	bl	8007920 <mpu6500_set_disable_iic_slave>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 8005cfc:	487c      	ldr	r0, [pc, #496]	@ (8005ef0 <mpu6500_basic_init+0x2e8>)
 8005cfe:	f000 fc61 	bl	80065c4 <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d02:	486b      	ldr	r0, [pc, #428]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d04:	f000 fe92 	bl	8006a2c <mpu6500_deinit>
           
            return 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e38a      	b.n	8006422 <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 8005d0c:	4868      	ldr	r0, [pc, #416]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d0e:	f002 fae7 	bl	80082e0 <mpu6500_set_fifo_1024kb>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 8005d1c:	4875      	ldr	r0, [pc, #468]	@ (8005ef4 <mpu6500_basic_init+0x2ec>)
 8005d1e:	f000 fc51 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d22:	4863      	ldr	r0, [pc, #396]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d24:	f000 fe82 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e37a      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4860      	ldr	r0, [pc, #384]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d30:	f001 fe44 	bl	80079bc <mpu6500_set_clock_source>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 8005d3e:	486e      	ldr	r0, [pc, #440]	@ (8005ef8 <mpu6500_basic_init+0x2f0>)
 8005d40:	f000 fc40 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d44:	485a      	ldr	r0, [pc, #360]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d46:	f000 fe71 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e369      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4857      	ldr	r0, [pc, #348]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d52:	f002 f811 	bl	8007d78 <mpu6500_set_sample_rate_divider>
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 8005d60:	4866      	ldr	r0, [pc, #408]	@ (8005efc <mpu6500_basic_init+0x2f4>)
 8005d62:	f000 fc2f 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d66:	4852      	ldr	r0, [pc, #328]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d68:	f000 fe60 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e358      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8005d70:	2101      	movs	r1, #1
 8005d72:	484f      	ldr	r0, [pc, #316]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d74:	f001 fe6c 	bl	8007a50 <mpu6500_set_ptat>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 8005d82:	485f      	ldr	r0, [pc, #380]	@ (8005f00 <mpu6500_basic_init+0x2f8>)
 8005d84:	f000 fc1e 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d88:	4849      	ldr	r0, [pc, #292]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d8a:	f000 fe4f 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e347      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8005d92:	2100      	movs	r1, #0
 8005d94:	4846      	ldr	r0, [pc, #280]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005d96:	f001 feab 	bl	8007af0 <mpu6500_set_cycle_wake_up>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 8005da4:	4857      	ldr	r0, [pc, #348]	@ (8005f04 <mpu6500_basic_init+0x2fc>)
 8005da6:	f000 fc0d 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005daa:	4841      	ldr	r0, [pc, #260]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005dac:	f000 fe3e 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e336      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 8005db4:	2200      	movs	r2, #0
 8005db6:	2105      	movs	r1, #5
 8005db8:	483d      	ldr	r0, [pc, #244]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005dba:	f001 ff83 	bl	8007cc4 <mpu6500_set_standby_mode>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005dc8:	484f      	ldr	r0, [pc, #316]	@ (8005f08 <mpu6500_basic_init+0x300>)
 8005dca:	f000 fbfb 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005dce:	4838      	ldr	r0, [pc, #224]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005dd0:	f000 fe2c 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e324      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2104      	movs	r1, #4
 8005ddc:	4834      	ldr	r0, [pc, #208]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005dde:	f001 ff71 	bl	8007cc4 <mpu6500_set_standby_mode>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005dec:	4846      	ldr	r0, [pc, #280]	@ (8005f08 <mpu6500_basic_init+0x300>)
 8005dee:	f000 fbe9 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005df2:	482f      	ldr	r0, [pc, #188]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005df4:	f000 fe1a 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e312      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2103      	movs	r1, #3
 8005e00:	482b      	ldr	r0, [pc, #172]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e02:	f001 ff5f 	bl	8007cc4 <mpu6500_set_standby_mode>
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e10:	483d      	ldr	r0, [pc, #244]	@ (8005f08 <mpu6500_basic_init+0x300>)
 8005e12:	f000 fbd7 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e16:	4826      	ldr	r0, [pc, #152]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e18:	f000 fe08 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e300      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8005e20:	2200      	movs	r2, #0
 8005e22:	2102      	movs	r1, #2
 8005e24:	4822      	ldr	r0, [pc, #136]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e26:	f001 ff4d 	bl	8007cc4 <mpu6500_set_standby_mode>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e34:	4834      	ldr	r0, [pc, #208]	@ (8005f08 <mpu6500_basic_init+0x300>)
 8005e36:	f000 fbc5 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e3a:	481d      	ldr	r0, [pc, #116]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e3c:	f000 fdf6 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e2ee      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8005e44:	2200      	movs	r2, #0
 8005e46:	2101      	movs	r1, #1
 8005e48:	4819      	ldr	r0, [pc, #100]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e4a:	f001 ff3b 	bl	8007cc4 <mpu6500_set_standby_mode>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e58:	482b      	ldr	r0, [pc, #172]	@ (8005f08 <mpu6500_basic_init+0x300>)
 8005e5a:	f000 fbb3 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e5e:	4814      	ldr	r0, [pc, #80]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e60:	f000 fde4 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e2dc      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4810      	ldr	r0, [pc, #64]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e6e:	f001 ff29 	bl	8007cc4 <mpu6500_set_standby_mode>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e7c:	4822      	ldr	r0, [pc, #136]	@ (8005f08 <mpu6500_basic_init+0x300>)
 8005e7e:	f000 fba1 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e82:	480b      	ldr	r0, [pc, #44]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e84:	f000 fdd2 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e2ca      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2107      	movs	r1, #7
 8005e90:	4807      	ldr	r0, [pc, #28]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005e92:	f002 f881 	bl	8007f98 <mpu6500_set_gyroscope_test>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d037      	beq.n	8005f10 <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005ea0:	481a      	ldr	r0, [pc, #104]	@ (8005f0c <mpu6500_basic_init+0x304>)
 8005ea2:	f000 fb8f 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005ea6:	4802      	ldr	r0, [pc, #8]	@ (8005eb0 <mpu6500_basic_init+0x2a8>)
 8005ea8:	f000 fdc0 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e2b8      	b.n	8006422 <mpu6500_basic_init+0x81a>
 8005eb0:	20000628 	.word	0x20000628
 8005eb4:	08006471 	.word	0x08006471
 8005eb8:	08006481 	.word	0x08006481
 8005ebc:	08006491 	.word	0x08006491
 8005ec0:	080064b5 	.word	0x080064b5
 8005ec4:	080064d9 	.word	0x080064d9
 8005ec8:	080064e9 	.word	0x080064e9
 8005ecc:	080064f9 	.word	0x080064f9
 8005ed0:	08006549 	.word	0x08006549
 8005ed4:	08006599 	.word	0x08006599
 8005ed8:	080065c5 	.word	0x080065c5
 8005edc:	080065f5 	.word	0x080065f5
 8005ee0:	0801ffc8 	.word	0x0801ffc8
 8005ee4:	0801ffe8 	.word	0x0801ffe8
 8005ee8:	08020008 	.word	0x08020008
 8005eec:	08020020 	.word	0x08020020
 8005ef0:	0802003c 	.word	0x0802003c
 8005ef4:	08020064 	.word	0x08020064
 8005ef8:	08020088 	.word	0x08020088
 8005efc:	080200ac 	.word	0x080200ac
 8005f00:	080200d8 	.word	0x080200d8
 8005f04:	080200f4 	.word	0x080200f4
 8005f08:	08020118 	.word	0x08020118
 8005f0c:	0802013c 	.word	0x0802013c
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8005f10:	2200      	movs	r2, #0
 8005f12:	2106      	movs	r1, #6
 8005f14:	48b0      	ldr	r0, [pc, #704]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f16:	f002 f83f 	bl	8007f98 <mpu6500_set_gyroscope_test>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005f24:	48ad      	ldr	r0, [pc, #692]	@ (80061dc <mpu6500_basic_init+0x5d4>)
 8005f26:	f000 fb4d 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005f2a:	48ab      	ldr	r0, [pc, #684]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f2c:	f000 fd7e 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e276      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8005f34:	2200      	movs	r2, #0
 8005f36:	2105      	movs	r1, #5
 8005f38:	48a7      	ldr	r0, [pc, #668]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f3a:	f002 f82d 	bl	8007f98 <mpu6500_set_gyroscope_test>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005f48:	48a4      	ldr	r0, [pc, #656]	@ (80061dc <mpu6500_basic_init+0x5d4>)
 8005f4a:	f000 fb3b 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005f4e:	48a2      	ldr	r0, [pc, #648]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f50:	f000 fd6c 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e264      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2107      	movs	r1, #7
 8005f5c:	489e      	ldr	r0, [pc, #632]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f5e:	f002 f917 	bl	8008190 <mpu6500_set_accelerometer_test>
 8005f62:	4603      	mov	r3, r0
 8005f64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8005f6c:	489c      	ldr	r0, [pc, #624]	@ (80061e0 <mpu6500_basic_init+0x5d8>)
 8005f6e:	f000 fb29 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005f72:	4899      	ldr	r0, [pc, #612]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f74:	f000 fd5a 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e252      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2106      	movs	r1, #6
 8005f80:	4895      	ldr	r0, [pc, #596]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f82:	f002 f905 	bl	8008190 <mpu6500_set_accelerometer_test>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8005f90:	4893      	ldr	r0, [pc, #588]	@ (80061e0 <mpu6500_basic_init+0x5d8>)
 8005f92:	f000 fb17 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005f96:	4890      	ldr	r0, [pc, #576]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005f98:	f000 fd48 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e240      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2105      	movs	r1, #5
 8005fa4:	488c      	ldr	r0, [pc, #560]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005fa6:	f002 f8f3 	bl	8008190 <mpu6500_set_accelerometer_test>
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8005fb4:	488a      	ldr	r0, [pc, #552]	@ (80061e0 <mpu6500_basic_init+0x5d8>)
 8005fb6:	f000 fb05 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005fba:	4887      	ldr	r0, [pc, #540]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005fbc:	f000 fd36 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e22e      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4884      	ldr	r0, [pc, #528]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005fc8:	f001 fc0e 	bl	80077e8 <mpu6500_set_fifo>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8005fd6:	4883      	ldr	r0, [pc, #524]	@ (80061e4 <mpu6500_basic_init+0x5dc>)
 8005fd8:	f000 faf4 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005fdc:	487e      	ldr	r0, [pc, #504]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005fde:	f000 fd25 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e21d      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2107      	movs	r1, #7
 8005fea:	487b      	ldr	r0, [pc, #492]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8005fec:	f002 fb4a 	bl	8008684 <mpu6500_set_fifo_enable>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8005ffa:	487b      	ldr	r0, [pc, #492]	@ (80061e8 <mpu6500_basic_init+0x5e0>)
 8005ffc:	f000 fae2 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006000:	4875      	ldr	r0, [pc, #468]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006002:	f000 fd13 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006006:	2301      	movs	r3, #1
 8006008:	e20b      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 800600a:	2200      	movs	r2, #0
 800600c:	2106      	movs	r1, #6
 800600e:	4872      	ldr	r0, [pc, #456]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006010:	f002 fb38 	bl	8008684 <mpu6500_set_fifo_enable>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 800601e:	4872      	ldr	r0, [pc, #456]	@ (80061e8 <mpu6500_basic_init+0x5e0>)
 8006020:	f000 fad0 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006024:	486c      	ldr	r0, [pc, #432]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006026:	f000 fd01 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800602a:	2301      	movs	r3, #1
 800602c:	e1f9      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 800602e:	2200      	movs	r2, #0
 8006030:	2105      	movs	r1, #5
 8006032:	4869      	ldr	r0, [pc, #420]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006034:	f002 fb26 	bl	8008684 <mpu6500_set_fifo_enable>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8006042:	4869      	ldr	r0, [pc, #420]	@ (80061e8 <mpu6500_basic_init+0x5e0>)
 8006044:	f000 fabe 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006048:	4863      	ldr	r0, [pc, #396]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800604a:	f000 fcef 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800604e:	2301      	movs	r3, #1
 8006050:	e1e7      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 8006052:	2200      	movs	r2, #0
 8006054:	2104      	movs	r1, #4
 8006056:	4860      	ldr	r0, [pc, #384]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006058:	f002 fb14 	bl	8008684 <mpu6500_set_fifo_enable>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8006066:	4860      	ldr	r0, [pc, #384]	@ (80061e8 <mpu6500_basic_init+0x5e0>)
 8006068:	f000 faac 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800606c:	485a      	ldr	r0, [pc, #360]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800606e:	f000 fcdd 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006072:	2301      	movs	r3, #1
 8006074:	e1d5      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 8006076:	2200      	movs	r2, #0
 8006078:	2103      	movs	r1, #3
 800607a:	4857      	ldr	r0, [pc, #348]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800607c:	f002 fb02 	bl	8008684 <mpu6500_set_fifo_enable>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 800608a:	4857      	ldr	r0, [pc, #348]	@ (80061e8 <mpu6500_basic_init+0x5e0>)
 800608c:	f000 fa9a 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006090:	4851      	ldr	r0, [pc, #324]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006092:	f000 fccb 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006096:	2301      	movs	r3, #1
 8006098:	e1c3      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 800609a:	2101      	movs	r1, #1
 800609c:	484e      	ldr	r0, [pc, #312]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800609e:	f002 fb4b 	bl	8008738 <mpu6500_set_interrupt_level>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 80060ac:	484f      	ldr	r0, [pc, #316]	@ (80061ec <mpu6500_basic_init+0x5e4>)
 80060ae:	f000 fa89 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80060b2:	4849      	ldr	r0, [pc, #292]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80060b4:	f000 fcba 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e1b2      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 80060bc:	2100      	movs	r1, #0
 80060be:	4846      	ldr	r0, [pc, #280]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80060c0:	f002 fb88 	bl	80087d4 <mpu6500_set_interrupt_pin_type>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 80060ce:	4848      	ldr	r0, [pc, #288]	@ (80061f0 <mpu6500_basic_init+0x5e8>)
 80060d0:	f000 fa78 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80060d4:	4840      	ldr	r0, [pc, #256]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80060d6:	f000 fca9 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80060da:	2301      	movs	r3, #1
 80060dc:	e1a1      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 80060de:	2200      	movs	r2, #0
 80060e0:	2106      	movs	r1, #6
 80060e2:	483d      	ldr	r0, [pc, #244]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80060e4:	f002 fd4c 	bl	8008b80 <mpu6500_set_interrupt>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 80060f2:	4840      	ldr	r0, [pc, #256]	@ (80061f4 <mpu6500_basic_init+0x5ec>)
 80060f4:	f000 fa66 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80060f8:	4837      	ldr	r0, [pc, #220]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80060fa:	f000 fc97 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	e18f      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8006102:	2200      	movs	r2, #0
 8006104:	2104      	movs	r1, #4
 8006106:	4834      	ldr	r0, [pc, #208]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006108:	f002 fd3a 	bl	8008b80 <mpu6500_set_interrupt>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8006116:	4837      	ldr	r0, [pc, #220]	@ (80061f4 <mpu6500_basic_init+0x5ec>)
 8006118:	f000 fa54 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800611c:	482e      	ldr	r0, [pc, #184]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800611e:	f000 fc85 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006122:	2301      	movs	r3, #1
 8006124:	e17d      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 8006126:	2200      	movs	r2, #0
 8006128:	2101      	movs	r1, #1
 800612a:	482b      	ldr	r0, [pc, #172]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800612c:	f002 fd28 	bl	8008b80 <mpu6500_set_interrupt>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 800613a:	482e      	ldr	r0, [pc, #184]	@ (80061f4 <mpu6500_basic_init+0x5ec>)
 800613c:	f000 fa42 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006140:	4825      	ldr	r0, [pc, #148]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006142:	f000 fc73 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006146:	2301      	movs	r3, #1
 8006148:	e16b      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 800614a:	2200      	movs	r2, #0
 800614c:	2103      	movs	r1, #3
 800614e:	4822      	ldr	r0, [pc, #136]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006150:	f002 fd16 	bl	8008b80 <mpu6500_set_interrupt>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 800615e:	4825      	ldr	r0, [pc, #148]	@ (80061f4 <mpu6500_basic_init+0x5ec>)
 8006160:	f000 fa30 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006164:	481c      	ldr	r0, [pc, #112]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006166:	f000 fc61 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800616a:	2301      	movs	r3, #1
 800616c:	e159      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	4819      	ldr	r0, [pc, #100]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006174:	f002 fd04 	bl	8008b80 <mpu6500_set_interrupt>
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8006182:	481c      	ldr	r0, [pc, #112]	@ (80061f4 <mpu6500_basic_init+0x5ec>)
 8006184:	f000 fa1e 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006188:	4813      	ldr	r0, [pc, #76]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 800618a:	f000 fc4f 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800618e:	2301      	movs	r3, #1
 8006190:	e147      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 8006192:	2101      	movs	r1, #1
 8006194:	4810      	ldr	r0, [pc, #64]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 8006196:	f002 fb6b 	bl	8008870 <mpu6500_set_interrupt_latch>
 800619a:	4603      	mov	r3, r0
 800619c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 80061a4:	4814      	ldr	r0, [pc, #80]	@ (80061f8 <mpu6500_basic_init+0x5f0>)
 80061a6:	f000 fa0d 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80061aa:	480b      	ldr	r0, [pc, #44]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80061ac:	f000 fc3e 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e136      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 80061b4:	2101      	movs	r1, #1
 80061b6:	4808      	ldr	r0, [pc, #32]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80061b8:	f002 fbaa 	bl	8008910 <mpu6500_set_interrupt_read_clear>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01c      	beq.n	8006200 <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 80061c6:	480d      	ldr	r0, [pc, #52]	@ (80061fc <mpu6500_basic_init+0x5f4>)
 80061c8:	f000 f9fc 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80061cc:	4802      	ldr	r0, [pc, #8]	@ (80061d8 <mpu6500_basic_init+0x5d0>)
 80061ce:	f000 fc2d 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e125      	b.n	8006422 <mpu6500_basic_init+0x81a>
 80061d6:	bf00      	nop
 80061d8:	20000628 	.word	0x20000628
 80061dc:	0802013c 	.word	0x0802013c
 80061e0:	08020164 	.word	0x08020164
 80061e4:	08020190 	.word	0x08020190
 80061e8:	080201ac 	.word	0x080201ac
 80061ec:	080201d0 	.word	0x080201d0
 80061f0:	080201f8 	.word	0x080201f8
 80061f4:	08020224 	.word	0x08020224
 80061f8:	08020244 	.word	0x08020244
 80061fc:	0802026c 	.word	0x0802026c
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 8006200:	2100      	movs	r1, #0
 8006202:	488a      	ldr	r0, [pc, #552]	@ (800642c <mpu6500_basic_init+0x824>)
 8006204:	f001 fde2 	bl	8007dcc <mpu6500_set_extern_sync>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 8006212:	4887      	ldr	r0, [pc, #540]	@ (8006430 <mpu6500_basic_init+0x828>)
 8006214:	f000 f9d6 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006218:	4884      	ldr	r0, [pc, #528]	@ (800642c <mpu6500_basic_init+0x824>)
 800621a:	f000 fc07 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800621e:	2301      	movs	r3, #1
 8006220:	e0ff      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8006222:	2100      	movs	r1, #0
 8006224:	4881      	ldr	r0, [pc, #516]	@ (800642c <mpu6500_basic_init+0x824>)
 8006226:	f002 fc0f 	bl	8008a48 <mpu6500_set_fsync_interrupt>
 800622a:	4603      	mov	r3, r0
 800622c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 8006234:	487f      	ldr	r0, [pc, #508]	@ (8006434 <mpu6500_basic_init+0x82c>)
 8006236:	f000 f9c5 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800623a:	487c      	ldr	r0, [pc, #496]	@ (800642c <mpu6500_basic_init+0x824>)
 800623c:	f000 fbf6 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006240:	2301      	movs	r3, #1
 8006242:	e0ee      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8006244:	2101      	movs	r1, #1
 8006246:	4879      	ldr	r0, [pc, #484]	@ (800642c <mpu6500_basic_init+0x824>)
 8006248:	f002 fbb0 	bl	80089ac <mpu6500_set_fsync_interrupt_level>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 8006256:	4878      	ldr	r0, [pc, #480]	@ (8006438 <mpu6500_basic_init+0x830>)
 8006258:	f000 f9b4 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800625c:	4873      	ldr	r0, [pc, #460]	@ (800642c <mpu6500_basic_init+0x824>)
 800625e:	f000 fbe5 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006262:	2301      	movs	r3, #1
 8006264:	e0dd      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 8006266:	2100      	movs	r1, #0
 8006268:	4870      	ldr	r0, [pc, #448]	@ (800642c <mpu6500_basic_init+0x824>)
 800626a:	f001 fb0b 	bl	8007884 <mpu6500_set_iic_master>
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 8006278:	4870      	ldr	r0, [pc, #448]	@ (800643c <mpu6500_basic_init+0x834>)
 800627a:	f000 f9a3 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800627e:	486b      	ldr	r0, [pc, #428]	@ (800642c <mpu6500_basic_init+0x824>)
 8006280:	f000 fbd4 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006284:	2301      	movs	r3, #1
 8006286:	e0cc      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 8006288:	2100      	movs	r1, #0
 800628a:	4868      	ldr	r0, [pc, #416]	@ (800642c <mpu6500_basic_init+0x824>)
 800628c:	f002 fc2a 	bl	8008ae4 <mpu6500_set_iic_bypass>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 800629a:	4869      	ldr	r0, [pc, #420]	@ (8006440 <mpu6500_basic_init+0x838>)
 800629c:	f000 f992 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80062a0:	4862      	ldr	r0, [pc, #392]	@ (800642c <mpu6500_basic_init+0x824>)
 80062a2:	f000 fbc3 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e0bb      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 80062aa:	2103      	movs	r1, #3
 80062ac:	485f      	ldr	r0, [pc, #380]	@ (800642c <mpu6500_basic_init+0x824>)
 80062ae:	f001 ffc9 	bl	8008244 <mpu6500_set_accelerometer_range>
 80062b2:	4603      	mov	r3, r0
 80062b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 80062bc:	4861      	ldr	r0, [pc, #388]	@ (8006444 <mpu6500_basic_init+0x83c>)
 80062be:	f000 f981 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80062c2:	485a      	ldr	r0, [pc, #360]	@ (800642c <mpu6500_basic_init+0x824>)
 80062c4:	f000 fbb2 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0aa      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 80062cc:	2103      	movs	r1, #3
 80062ce:	4857      	ldr	r0, [pc, #348]	@ (800642c <mpu6500_basic_init+0x824>)
 80062d0:	f001 febc 	bl	800804c <mpu6500_set_gyroscope_range>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 80062de:	485a      	ldr	r0, [pc, #360]	@ (8006448 <mpu6500_basic_init+0x840>)
 80062e0:	f000 f970 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80062e4:	4851      	ldr	r0, [pc, #324]	@ (800642c <mpu6500_basic_init+0x824>)
 80062e6:	f000 fba1 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e099      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 80062ee:	2100      	movs	r1, #0
 80062f0:	484e      	ldr	r0, [pc, #312]	@ (800642c <mpu6500_basic_init+0x824>)
 80062f2:	f001 fc99 	bl	8007c28 <mpu6500_set_gyro_standby>
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 8006300:	4852      	ldr	r0, [pc, #328]	@ (800644c <mpu6500_basic_init+0x844>)
 8006302:	f000 f95f 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006306:	4849      	ldr	r0, [pc, #292]	@ (800642c <mpu6500_basic_init+0x824>)
 8006308:	f000 fb90 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800630c:	2301      	movs	r3, #1
 800630e:	e088      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 8006310:	2101      	movs	r1, #1
 8006312:	4846      	ldr	r0, [pc, #280]	@ (800642c <mpu6500_basic_init+0x824>)
 8006314:	f001 fdf2 	bl	8007efc <mpu6500_set_fifo_mode>
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 8006322:	484b      	ldr	r0, [pc, #300]	@ (8006450 <mpu6500_basic_init+0x848>)
 8006324:	f000 f94e 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006328:	4840      	ldr	r0, [pc, #256]	@ (800642c <mpu6500_basic_init+0x824>)
 800632a:	f000 fb7f 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800632e:	2301      	movs	r3, #1
 8006330:	e077      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8006332:	2100      	movs	r1, #0
 8006334:	483d      	ldr	r0, [pc, #244]	@ (800642c <mpu6500_basic_init+0x824>)
 8006336:	f001 fed7 	bl	80080e8 <mpu6500_set_gyroscope_choice>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 8006344:	4843      	ldr	r0, [pc, #268]	@ (8006454 <mpu6500_basic_init+0x84c>)
 8006346:	f000 f93d 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800634a:	4838      	ldr	r0, [pc, #224]	@ (800642c <mpu6500_basic_init+0x824>)
 800634c:	f000 fb6e 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006350:	2301      	movs	r3, #1
 8006352:	e066      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 8006354:	2102      	movs	r1, #2
 8006356:	4835      	ldr	r0, [pc, #212]	@ (800642c <mpu6500_basic_init+0x824>)
 8006358:	f001 fd86 	bl	8007e68 <mpu6500_set_low_pass_filter>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 8006366:	483c      	ldr	r0, [pc, #240]	@ (8006458 <mpu6500_basic_init+0x850>)
 8006368:	f000 f92c 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800636c:	482f      	ldr	r0, [pc, #188]	@ (800642c <mpu6500_basic_init+0x824>)
 800636e:	f000 fb5d 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006372:	2301      	movs	r3, #1
 8006374:	e055      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8006376:	2100      	movs	r1, #0
 8006378:	482c      	ldr	r0, [pc, #176]	@ (800642c <mpu6500_basic_init+0x824>)
 800637a:	f001 fff9 	bl	8008370 <mpu6500_set_accelerometer_choice>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 8006388:	4834      	ldr	r0, [pc, #208]	@ (800645c <mpu6500_basic_init+0x854>)
 800638a:	f000 f91b 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800638e:	4827      	ldr	r0, [pc, #156]	@ (800642c <mpu6500_basic_init+0x824>)
 8006390:	f000 fb4c 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 8006394:	2301      	movs	r3, #1
 8006396:	e044      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 8006398:	2104      	movs	r1, #4
 800639a:	4824      	ldr	r0, [pc, #144]	@ (800642c <mpu6500_basic_init+0x824>)
 800639c:	f002 f842 	bl	8008424 <mpu6500_set_accelerometer_low_pass_filter>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 80063aa:	482d      	ldr	r0, [pc, #180]	@ (8006460 <mpu6500_basic_init+0x858>)
 80063ac:	f000 f90a 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80063b0:	481e      	ldr	r0, [pc, #120]	@ (800642c <mpu6500_basic_init+0x824>)
 80063b2:	f000 fb3b 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e033      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 80063ba:	2108      	movs	r1, #8
 80063bc:	481b      	ldr	r0, [pc, #108]	@ (800642c <mpu6500_basic_init+0x824>)
 80063be:	f002 f87b 	bl	80084b8 <mpu6500_set_low_power_accel_output_rate>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 80063cc:	4825      	ldr	r0, [pc, #148]	@ (8006464 <mpu6500_basic_init+0x85c>)
 80063ce:	f000 f8f9 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80063d2:	4816      	ldr	r0, [pc, #88]	@ (800642c <mpu6500_basic_init+0x824>)
 80063d4:	f000 fb2a 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80063d8:	2301      	movs	r3, #1
 80063da:	e022      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 80063dc:	2100      	movs	r1, #0
 80063de:	4813      	ldr	r0, [pc, #76]	@ (800642c <mpu6500_basic_init+0x824>)
 80063e0:	f002 f8b4 	bl	800854c <mpu6500_set_wake_on_motion>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 80063ee:	481e      	ldr	r0, [pc, #120]	@ (8006468 <mpu6500_basic_init+0x860>)
 80063f0:	f000 f8e8 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80063f4:	480d      	ldr	r0, [pc, #52]	@ (800642c <mpu6500_basic_init+0x824>)
 80063f6:	f000 fb19 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e011      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 80063fe:	2101      	movs	r1, #1
 8006400:	480a      	ldr	r0, [pc, #40]	@ (800642c <mpu6500_basic_init+0x824>)
 8006402:	f002 f8f1 	bl	80085e8 <mpu6500_set_accel_compare_with_previous_sample>
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 8006410:	4816      	ldr	r0, [pc, #88]	@ (800646c <mpu6500_basic_init+0x864>)
 8006412:	f000 f8d7 	bl	80065c4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006416:	4805      	ldr	r0, [pc, #20]	@ (800642c <mpu6500_basic_init+0x824>)
 8006418:	f000 fb08 	bl	8006a2c <mpu6500_deinit>
       
        return 1;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000628 	.word	0x20000628
 8006430:	08020298 	.word	0x08020298
 8006434:	080202bc 	.word	0x080202bc
 8006438:	080202e4 	.word	0x080202e4
 800643c:	08020310 	.word	0x08020310
 8006440:	08020334 	.word	0x08020334
 8006444:	08020358 	.word	0x08020358
 8006448:	08020384 	.word	0x08020384
 800644c:	080203ac 	.word	0x080203ac
 8006450:	080203d0 	.word	0x080203d0
 8006454:	080203f0 	.word	0x080203f0
 8006458:	08020418 	.word	0x08020418
 800645c:	08020440 	.word	0x08020440
 8006460:	0802046c 	.word	0x0802046c
 8006464:	080204a0 	.word	0x080204a0
 8006468:	080204d4 	.word	0x080204d4
 800646c:	080204fc 	.word	0x080204fc

08006470 <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
    return 0;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
    return 0;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	603a      	str	r2, [r7, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
 800649e:	460b      	mov	r3, r1
 80064a0:	71bb      	strb	r3, [r7, #6]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80bb      	strh	r3, [r7, #4]
    return 0;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	603a      	str	r2, [r7, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
 80064c2:	460b      	mov	r3, r1
 80064c4:	71bb      	strb	r3, [r7, #6]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80bb      	strh	r3, [r7, #4]
    return 0;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
    return 0;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
    return 0;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	71fb      	strb	r3, [r7, #7]
 8006504:	4613      	mov	r3, r2
 8006506:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8006508:	2200      	movs	r2, #0
 800650a:	2110      	movs	r1, #16
 800650c:	480c      	ldr	r0, [pc, #48]	@ (8006540 <mpu6500_interface_spi_read+0x48>)
 800650e:	f006 fb07 	bl	800cb20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 8006512:	1df9      	adds	r1, r7, #7
 8006514:	2364      	movs	r3, #100	@ 0x64
 8006516:	2201      	movs	r2, #1
 8006518:	480a      	ldr	r0, [pc, #40]	@ (8006544 <mpu6500_interface_spi_read+0x4c>)
 800651a:	f008 fac0 	bl	800ea9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 800651e:	88ba      	ldrh	r2, [r7, #4]
 8006520:	2364      	movs	r3, #100	@ 0x64
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	4807      	ldr	r0, [pc, #28]	@ (8006544 <mpu6500_interface_spi_read+0x4c>)
 8006526:	f008 fbfe 	bl	800ed26 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800652a:	2201      	movs	r2, #1
 800652c:	2110      	movs	r1, #16
 800652e:	4804      	ldr	r0, [pc, #16]	@ (8006540 <mpu6500_interface_spi_read+0x48>)
 8006530:	f006 faf6 	bl	800cb20 <HAL_GPIO_WritePin>
    return 0;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40020000 	.word	0x40020000
 8006544:	2000441c 	.word	0x2000441c

08006548 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	6039      	str	r1, [r7, #0]
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	4613      	mov	r3, r2
 8006556:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8006558:	2200      	movs	r2, #0
 800655a:	2110      	movs	r1, #16
 800655c:	480c      	ldr	r0, [pc, #48]	@ (8006590 <mpu6500_interface_spi_write+0x48>)
 800655e:	f006 fadf 	bl	800cb20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8006562:	1df9      	adds	r1, r7, #7
 8006564:	2364      	movs	r3, #100	@ 0x64
 8006566:	2201      	movs	r2, #1
 8006568:	480a      	ldr	r0, [pc, #40]	@ (8006594 <mpu6500_interface_spi_write+0x4c>)
 800656a:	f008 fa98 	bl	800ea9e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 800656e:	2364      	movs	r3, #100	@ 0x64
 8006570:	2201      	movs	r2, #1
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	4807      	ldr	r0, [pc, #28]	@ (8006594 <mpu6500_interface_spi_write+0x4c>)
 8006576:	f008 fa92 	bl	800ea9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800657a:	2201      	movs	r2, #1
 800657c:	2110      	movs	r1, #16
 800657e:	4804      	ldr	r0, [pc, #16]	@ (8006590 <mpu6500_interface_spi_write+0x48>)
 8006580:	f006 face 	bl	800cb20 <HAL_GPIO_WritePin>
    return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40020000 	.word	0x40020000
 8006594:	2000441c 	.word	0x2000441c

08006598 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(ms));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	4a05      	ldr	r2, [pc, #20]	@ (80065c0 <mpu6500_interface_delay_ms+0x28>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	099b      	lsrs	r3, r3, #6
 80065b2:	4618      	mov	r0, r3
 80065b4:	f010 f836 	bl	8016624 <vTaskDelay>
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	10624dd3 	.word	0x10624dd3

080065c4 <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 80065c4:	b40f      	push	{r0, r1, r2, r3}
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 80065cc:	f107 0314 	add.w	r3, r7, #20
 80065d0:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 80065d2:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <mpu6500_interface_debug_print+0x2c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6939      	ldr	r1, [r7, #16]
 80065dc:	4618      	mov	r0, r3
 80065de:	f014 fe95 	bl	801b30c <vfiprintf>
    va_end(args);
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ec:	b004      	add	sp, #16
 80065ee:	4770      	bx	lr
 80065f0:	20000160 	.word	0x20000160

080065f4 <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]
    switch (type)
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	2b06      	cmp	r3, #6
 8006602:	d825      	bhi.n	8006650 <mpu6500_interface_receive_callback+0x5c>
 8006604:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <mpu6500_interface_receive_callback+0x18>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006649 	.word	0x08006649
 8006610:	08006641 	.word	0x08006641
 8006614:	08006651 	.word	0x08006651
 8006618:	08006639 	.word	0x08006639
 800661c:	08006631 	.word	0x08006631
 8006620:	08006651 	.word	0x08006651
 8006624:	08006629 	.word	0x08006629
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 8006628:	480d      	ldr	r0, [pc, #52]	@ (8006660 <mpu6500_interface_receive_callback+0x6c>)
 800662a:	f7ff ffcb 	bl	80065c4 <mpu6500_interface_debug_print>
            
            break;
 800662e:	e013      	b.n	8006658 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 8006630:	480c      	ldr	r0, [pc, #48]	@ (8006664 <mpu6500_interface_receive_callback+0x70>)
 8006632:	f7ff ffc7 	bl	80065c4 <mpu6500_interface_debug_print>
            
            break;
 8006636:	e00f      	b.n	8006658 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 8006638:	480b      	ldr	r0, [pc, #44]	@ (8006668 <mpu6500_interface_receive_callback+0x74>)
 800663a:	f7ff ffc3 	bl	80065c4 <mpu6500_interface_debug_print>
            
            break;
 800663e:	e00b      	b.n	8006658 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 8006640:	480a      	ldr	r0, [pc, #40]	@ (800666c <mpu6500_interface_receive_callback+0x78>)
 8006642:	f7ff ffbf 	bl	80065c4 <mpu6500_interface_debug_print>
            
            break;
 8006646:	e007      	b.n	8006658 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 8006648:	4809      	ldr	r0, [pc, #36]	@ (8006670 <mpu6500_interface_receive_callback+0x7c>)
 800664a:	f7ff ffbb 	bl	80065c4 <mpu6500_interface_debug_print>
            
            break;
 800664e:	e003      	b.n	8006658 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 8006650:	4808      	ldr	r0, [pc, #32]	@ (8006674 <mpu6500_interface_receive_callback+0x80>)
 8006652:	f7ff ffb7 	bl	80065c4 <mpu6500_interface_debug_print>
            
            break;
 8006656:	bf00      	nop
        }
    }
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	08020538 	.word	0x08020538
 8006664:	08020550 	.word	0x08020550
 8006668:	08020570 	.word	0x08020570
 800666c:	0802058c 	.word	0x0802058c
 8006670:	080205a0 	.word	0x080205a0
 8006674:	080205bc 	.word	0x080205bc

08006678 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006678:	b590      	push	{r4, r7, lr}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	461a      	mov	r2, r3
 8006684:	460b      	mov	r3, r1
 8006686:	72fb      	strb	r3, [r7, #11]
 8006688:	4613      	mov	r3, r2
 800668a:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10e      	bne.n	80066b4 <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68dc      	ldr	r4, [r3, #12]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	7818      	ldrb	r0, [r3, #0]
 800669e:	893b      	ldrh	r3, [r7, #8]
 80066a0:	7af9      	ldrb	r1, [r7, #11]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	47a0      	blx	r4
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 80066ac:	2301      	movs	r3, #1
 80066ae:	e010      	b.n	80066d2 <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 80066b0:	2300      	movs	r3, #0
 80066b2:	e00e      	b.n	80066d2 <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	7afa      	ldrb	r2, [r7, #11]
 80066ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066be:	b2d0      	uxtb	r0, r2
 80066c0:	893a      	ldrh	r2, [r7, #8]
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 80066d0:	2300      	movs	r3, #0
        }
    }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd90      	pop	{r4, r7, pc}

080066da <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80066da:	b590      	push	{r4, r7, lr}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	461a      	mov	r2, r3
 80066e6:	460b      	mov	r3, r1
 80066e8:	72fb      	strb	r3, [r7, #11]
 80066ea:	4613      	mov	r3, r2
 80066ec:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10e      	bne.n	8006716 <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	691c      	ldr	r4, [r3, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	7818      	ldrb	r0, [r3, #0]
 8006700:	893b      	ldrh	r3, [r7, #8]
 8006702:	7af9      	ldrb	r1, [r7, #11]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	47a0      	blx	r4
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 800670e:	2301      	movs	r3, #1
 8006710:	e010      	b.n	8006734 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8006712:	2300      	movs	r3, #0
 8006714:	e00e      	b.n	8006734 <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	7afa      	ldrb	r2, [r7, #11]
 800671c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006720:	b2d0      	uxtb	r0, r2
 8006722:	893a      	ldrh	r2, [r7, #8]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8006732:	2300      	movs	r3, #0
        }
    }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}

0800673c <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 800675a:	2301      	movs	r3, #1
 800675c:	e00a      	b.n	8006774 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 800675e:	2300      	movs	r3, #0
 8006760:	e008      	b.n	8006774 <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	4798      	blx	r3
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8006772:	2300      	movs	r3, #0
        }
    }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 800678e:	2302      	movs	r3, #2
 8006790:	e004      	b.n	800679c <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80067ba:	2302      	movs	r3, #2
 80067bc:	e003      	b.n	80067c6 <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0fb      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 80067ee:	2303      	movs	r3, #3
 80067f0:	e0f5      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	487a      	ldr	r0, [pc, #488]	@ (80069e8 <mpu6500_init+0x214>)
 8006800:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8006802:	2303      	movs	r3, #3
 8006804:	e0eb      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	4876      	ldr	r0, [pc, #472]	@ (80069ec <mpu6500_init+0x218>)
 8006814:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8006816:	2303      	movs	r3, #3
 8006818:	e0e1      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	4872      	ldr	r0, [pc, #456]	@ (80069f0 <mpu6500_init+0x21c>)
 8006828:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800682a:	2303      	movs	r3, #3
 800682c:	e0d7      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683a:	486e      	ldr	r0, [pc, #440]	@ (80069f4 <mpu6500_init+0x220>)
 800683c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800683e:	2303      	movs	r3, #3
 8006840:	e0cd      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	486a      	ldr	r0, [pc, #424]	@ (80069f8 <mpu6500_init+0x224>)
 8006850:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8006852:	2303      	movs	r3, #3
 8006854:	e0c3      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	4866      	ldr	r0, [pc, #408]	@ (80069fc <mpu6500_init+0x228>)
 8006864:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8006866:	2303      	movs	r3, #3
 8006868:	e0b9      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	4862      	ldr	r0, [pc, #392]	@ (8006a00 <mpu6500_init+0x22c>)
 8006878:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800687a:	2303      	movs	r3, #3
 800687c:	e0af      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	485e      	ldr	r0, [pc, #376]	@ (8006a04 <mpu6500_init+0x230>)
 800688c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800688e:	2303      	movs	r3, #3
 8006890:	e0a5      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	485a      	ldr	r0, [pc, #360]	@ (8006a08 <mpu6500_init+0x234>)
 80068a0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068a2:	2303      	movs	r3, #3
 80068a4:	e09b      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	4856      	ldr	r0, [pc, #344]	@ (8006a0c <mpu6500_init+0x238>)
 80068b4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068b6:	2303      	movs	r3, #3
 80068b8:	e091      	b.n	80069de <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4798      	blx	r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	484d      	ldr	r0, [pc, #308]	@ (8006a10 <mpu6500_init+0x23c>)
 80068da:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80068dc:	2301      	movs	r3, #1
 80068de:	e07e      	b.n	80069de <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	4798      	blx	r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	4847      	ldr	r0, [pc, #284]	@ (8006a14 <mpu6500_init+0x240>)
 80068f6:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80068f8:	2301      	movs	r3, #1
 80068fa:	e070      	b.n	80069de <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 80068fc:	f107 020a 	add.w	r2, r7, #10
 8006900:	2301      	movs	r3, #1
 8006902:	2175      	movs	r1, #117	@ 0x75
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff feb7 	bl	8006678 <a_mpu6500_read>
 800690a:	4603      	mov	r3, r0
 800690c:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	483f      	ldr	r0, [pc, #252]	@ (8006a18 <mpu6500_init+0x244>)
 800691a:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ff0d 	bl	800673c <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 8006922:	2305      	movs	r3, #5
 8006924:	e05b      	b.n	80069de <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 8006926:	7abb      	ldrb	r3, [r7, #10]
 8006928:	2b70      	cmp	r3, #112	@ 0x70
 800692a:	d008      	beq.n	800693e <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	483a      	ldr	r0, [pc, #232]	@ (8006a1c <mpu6500_init+0x248>)
 8006932:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff01 	bl	800673c <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 800693a:	2305      	movs	r3, #5
 800693c:	e04f      	b.n	80069de <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 800693e:	2380      	movs	r3, #128	@ 0x80
 8006940:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 8006942:	f107 020a 	add.w	r2, r7, #10
 8006946:	2301      	movs	r3, #1
 8006948:	216b      	movs	r1, #107	@ 0x6b
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fec5 	bl	80066da <a_mpu6500_write>
 8006950:	4603      	mov	r3, r0
 8006952:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	4830      	ldr	r0, [pc, #192]	@ (8006a20 <mpu6500_init+0x24c>)
 8006960:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff feea 	bl	800673c <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 8006968:	2304      	movs	r3, #4
 800696a:	e038      	b.n	80069de <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	200a      	movs	r0, #10
 8006972:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8006974:	2364      	movs	r3, #100	@ 0x64
 8006976:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8006978:	e029      	b.n	80069ce <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 800697a:	f107 020a 	add.w	r2, r7, #10
 800697e:	2301      	movs	r3, #1
 8006980:	216b      	movs	r1, #107	@ 0x6b
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fe78 	bl	8006678 <a_mpu6500_read>
 8006988:	4603      	mov	r3, r0
 800698a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	4823      	ldr	r0, [pc, #140]	@ (8006a24 <mpu6500_init+0x250>)
 8006998:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff fece 	bl	800673c <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 80069a0:	2304      	movs	r3, #4
 80069a2:	e01c      	b.n	80069de <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 80069a4:	7abb      	ldrb	r3, [r7, #10]
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	db09      	blt.n	80069c0 <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 80069bc:	2300      	movs	r3, #0
 80069be:	e00e      	b.n	80069de <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	200a      	movs	r0, #10
 80069c6:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1d2      	bne.n	800697a <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	4813      	ldr	r0, [pc, #76]	@ (8006a28 <mpu6500_init+0x254>)
 80069da:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 80069dc:	2304      	movs	r3, #4
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	08020b94 	.word	0x08020b94
 80069ec:	08020bb0 	.word	0x08020bb0
 80069f0:	08020bd0 	.word	0x08020bd0
 80069f4:	08020bec 	.word	0x08020bec
 80069f8:	08020c0c 	.word	0x08020c0c
 80069fc:	08020c28 	.word	0x08020c28
 8006a00:	08020c48 	.word	0x08020c48
 8006a04:	08020c64 	.word	0x08020c64
 8006a08:	08020c84 	.word	0x08020c84
 8006a0c:	08020ca0 	.word	0x08020ca0
 8006a10:	08020cc4 	.word	0x08020cc4
 8006a14:	08020ce0 	.word	0x08020ce0
 8006a18:	08020cfc 	.word	0x08020cfc
 8006a1c:	08020d1c 	.word	0x08020d1c
 8006a20:	08020d38 	.word	0x08020d38
 8006a24:	08020d5c 	.word	0x08020d5c
 8006a28:	08020d80 	.word	0x08020d80

08006a2c <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e031      	b.n	8006aa2 <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d001      	beq.n	8006a4c <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e02a      	b.n	8006aa2 <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 8006a4c:	234f      	movs	r3, #79	@ 0x4f
 8006a4e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8006a50:	f107 020e 	add.w	r2, r7, #14
 8006a54:	2301      	movs	r3, #1
 8006a56:	216b      	movs	r1, #107	@ 0x6b
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fe3e 	bl	80066da <a_mpu6500_write>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6c:	480f      	ldr	r0, [pc, #60]	@ (8006aac <mpu6500_deinit+0x80>)
 8006a6e:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 8006a70:	2304      	movs	r3, #4
 8006a72:	e016      	b.n	8006aa2 <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fe61 	bl	800673c <a_mpu6500_deinit>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	4809      	ldr	r0, [pc, #36]	@ (8006ab0 <mpu6500_deinit+0x84>)
 8006a8a:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e008      	b.n	8006aa2 <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	08020d38 	.word	0x08020d38
 8006ab0:	08020d98 	.word	0x08020d98

08006ab4 <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f000 be88 	b.w	80077de <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d002      	beq.n	8006ade <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8006ad8:	2303      	movs	r3, #3
 8006ada:	f000 be80 	b.w	80077de <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aea:	486a      	ldr	r0, [pc, #424]	@ (8006c94 <mpu6500_read+0x1e0>)
 8006aec:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 8006aee:	2304      	movs	r3, #4
 8006af0:	f000 be75 	b.w	80077de <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b02:	4865      	ldr	r0, [pc, #404]	@ (8006c98 <mpu6500_read+0x1e4>)
 8006b04:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8006b06:	2305      	movs	r3, #5
 8006b08:	f000 be69 	b.w	80077de <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8006b0c:	f107 0219 	add.w	r2, r7, #25
 8006b10:	2301      	movs	r3, #1
 8006b12:	216a      	movs	r1, #106	@ 0x6a
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fdaf 	bl	8006678 <a_mpu6500_read>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006b1e:	7f7b      	ldrb	r3, [r7, #29]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	485c      	ldr	r0, [pc, #368]	@ (8006c9c <mpu6500_read+0x1e8>)
 8006b2a:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f000 be56 	b.w	80077de <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 8006b32:	f107 0218 	add.w	r2, r7, #24
 8006b36:	2301      	movs	r3, #1
 8006b38:	211c      	movs	r1, #28
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fd9c 	bl	8006678 <a_mpu6500_read>
 8006b40:	4603      	mov	r3, r0
 8006b42:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006b44:	7f7b      	ldrb	r3, [r7, #29]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d006      	beq.n	8006b58 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	4854      	ldr	r0, [pc, #336]	@ (8006ca0 <mpu6500_read+0x1ec>)
 8006b50:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006b52:	2301      	movs	r3, #1
 8006b54:	f000 be43 	b.w	80077de <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8006b58:	f107 0217 	add.w	r2, r7, #23
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	211b      	movs	r1, #27
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7ff fd89 	bl	8006678 <a_mpu6500_read>
 8006b66:	4603      	mov	r3, r0
 8006b68:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006b6a:	7f7b      	ldrb	r3, [r7, #29]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b74:	484b      	ldr	r0, [pc, #300]	@ (8006ca4 <mpu6500_read+0x1f0>)
 8006b76:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f000 be30 	b.w	80077de <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8006b7e:	7e3b      	ldrb	r3, [r7, #24]
 8006b80:	08db      	lsrs	r3, r3, #3
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	08db      	lsrs	r3, r3, #3
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8006b9a:	7e7b      	ldrb	r3, [r7, #25]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8436 	beq.w	8007412 <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8006ba6:	f107 0216 	add.w	r2, r7, #22
 8006baa:	2301      	movs	r3, #1
 8006bac:	2123      	movs	r1, #35	@ 0x23
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7ff fd62 	bl	8006678 <a_mpu6500_read>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006bb8:	7f7b      	ldrb	r3, [r7, #29]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d006      	beq.n	8006bcc <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc2:	4839      	ldr	r0, [pc, #228]	@ (8006ca8 <mpu6500_read+0x1f4>)
 8006bc4:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f000 be09 	b.w	80077de <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 8006bcc:	7dbb      	ldrb	r3, [r7, #22]
 8006bce:	2b78      	cmp	r3, #120	@ 0x78
 8006bd0:	d006      	beq.n	8006be0 <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	4835      	ldr	r0, [pc, #212]	@ (8006cac <mpu6500_read+0x1f8>)
 8006bd8:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8006bda:	2306      	movs	r3, #6
 8006bdc:	f000 bdff 	b.w	80077de <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8006be0:	f107 0214 	add.w	r2, r7, #20
 8006be4:	2302      	movs	r3, #2
 8006be6:	2172      	movs	r1, #114	@ 0x72
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fd45 	bl	8006678 <a_mpu6500_read>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006bf2:	7f7b      	ldrb	r3, [r7, #29]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	482c      	ldr	r0, [pc, #176]	@ (8006cb0 <mpu6500_read+0x1fc>)
 8006bfe:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006c00:	2301      	movs	r3, #1
 8006c02:	f000 bdec 	b.w	80077de <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8006c06:	7d3b      	ldrb	r3, [r7, #20]
 8006c08:	b21b      	sxth	r3, r3
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	7d7b      	ldrb	r3, [r7, #21]
 8006c10:	b21b      	sxth	r3, r3
 8006c12:	4313      	orrs	r3, r2
 8006c14:	b21b      	sxth	r3, r3
 8006c16:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8006c18:	8b7b      	ldrh	r3, [r7, #26]
 8006c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1e:	bf28      	it	cs
 8006c20:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006c24:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	461a      	mov	r2, r3
 8006c36:	8b7b      	ldrh	r3, [r7, #26]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	bfa8      	it	ge
 8006c3c:	4613      	movge	r3, r2
 8006c3e:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 8006c40:	8b7b      	ldrh	r3, [r7, #26]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb4 <mpu6500_read+0x200>)
 8006c44:	fba2 2303 	umull	r2, r3, r2, r3
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	0052      	lsls	r2, r2, #1
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8006c56:	8b7b      	ldrh	r3, [r7, #26]
 8006c58:	4a16      	ldr	r2, [pc, #88]	@ (8006cb4 <mpu6500_read+0x200>)
 8006c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5e:	08db      	lsrs	r3, r3, #3
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006c6c:	8b7b      	ldrh	r3, [r7, #26]
 8006c6e:	2174      	movs	r1, #116	@ 0x74
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fd01 	bl	8006678 <a_mpu6500_read>
 8006c76:	4603      	mov	r3, r0
 8006c78:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006c7a:	7f7b      	ldrb	r3, [r7, #29]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	480c      	ldr	r0, [pc, #48]	@ (8006cb8 <mpu6500_read+0x204>)
 8006c86:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f000 bda8 	b.w	80077de <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006c8e:	2300      	movs	r3, #0
 8006c90:	83fb      	strh	r3, [r7, #30]
 8006c92:	e3b6      	b.n	8007402 <mpu6500_read+0x94e>
 8006c94:	08020db4 	.word	0x08020db4
 8006c98:	08020884 	.word	0x08020884
 8006c9c:	08020b4c 	.word	0x08020b4c
 8006ca0:	08020b04 	.word	0x08020b04
 8006ca4:	08020b28 	.word	0x08020b28
 8006ca8:	08020dd0 	.word	0x08020dd0
 8006cac:	08020df4 	.word	0x08020df4
 8006cb0:	08020a88 	.word	0x08020a88
 8006cb4:	aaaaaaab 	.word	0xaaaaaaab
 8006cb8:	08020aac 	.word	0x08020aac
 8006cbc:	46800000 	.word	0x46800000
 8006cc0:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8006cc4:	8bfa      	ldrh	r2, [r7, #30]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cd8:	b21b      	sxth	r3, r3
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 8006cde:	8bfa      	ldrh	r2, [r7, #30]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	3301      	adds	r3, #1
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cf2:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8006cf4:	8bfa      	ldrh	r2, [r7, #30]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4413      	add	r3, r2
 8006d04:	ea40 0201 	orr.w	r2, r0, r1
 8006d08:	b212      	sxth	r2, r2
 8006d0a:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8006d0c:	8bfa      	ldrh	r2, [r7, #30]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	3302      	adds	r3, #2
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d20:	b21b      	sxth	r3, r3
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8006d26:	8bfa      	ldrh	r2, [r7, #30]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	3303      	adds	r3, #3
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d3a:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8006d3c:	8bfa      	ldrh	r2, [r7, #30]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	461a      	mov	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	ea40 0201 	orr.w	r2, r0, r1
 8006d50:	b212      	sxth	r2, r2
 8006d52:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8006d54:	8bfa      	ldrh	r2, [r7, #30]
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d68:	b21b      	sxth	r3, r3
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8006d6e:	8bfa      	ldrh	r2, [r7, #30]
 8006d70:	4613      	mov	r3, r2
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	3305      	adds	r3, #5
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d82:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8006d84:	8bfa      	ldrh	r2, [r7, #30]
 8006d86:	4613      	mov	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4413      	add	r3, r2
 8006d94:	ea40 0201 	orr.w	r2, r0, r1
 8006d98:	b212      	sxth	r2, r2
 8006d9a:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8006d9c:	8bfa      	ldrh	r2, [r7, #30]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	3306      	adds	r3, #6
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006db0:	b21b      	sxth	r3, r3
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8006db6:	8bfa      	ldrh	r2, [r7, #30]
 8006db8:	4613      	mov	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dca:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8006dcc:	8bfa      	ldrh	r2, [r7, #30]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	4413      	add	r3, r2
 8006ddc:	ea40 0201 	orr.w	r2, r0, r1
 8006de0:	b212      	sxth	r2, r2
 8006de2:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8006de4:	8bfa      	ldrh	r2, [r7, #30]
 8006de6:	4613      	mov	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	3308      	adds	r3, #8
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006df8:	b21b      	sxth	r3, r3
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 8006dfe:	8bfa      	ldrh	r2, [r7, #30]
 8006e00:	4613      	mov	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	3309      	adds	r3, #9
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e12:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8006e14:	8bfa      	ldrh	r2, [r7, #30]
 8006e16:	4613      	mov	r3, r2
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	461a      	mov	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	ea40 0201 	orr.w	r2, r0, r1
 8006e28:	b212      	sxth	r2, r2
 8006e2a:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8006e2c:	8bfa      	ldrh	r2, [r7, #30]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	330a      	adds	r3, #10
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e40:	b21b      	sxth	r3, r3
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8006e46:	8bfa      	ldrh	r2, [r7, #30]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	330b      	adds	r3, #11
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e5a:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8006e5c:	8bfa      	ldrh	r2, [r7, #30]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	4413      	add	r3, r2
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	461a      	mov	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	ea40 0201 	orr.w	r2, r0, r1
 8006e70:	b212      	sxth	r2, r2
 8006e72:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 8006e74:	7e3b      	ldrb	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d154      	bne.n	8006f24 <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8006e7a:	8bfa      	ldrh	r2, [r7, #30]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4413      	add	r3, r2
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	461a      	mov	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e96:	8bfa      	ldrh	r2, [r7, #30]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 8006cbc <mpu6500_read+0x208>
 8006eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eae:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8006eb2:	8bfa      	ldrh	r2, [r7, #30]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	4413      	add	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ece:	8bfa      	ldrh	r2, [r7, #30]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 8006cbc <mpu6500_read+0x208>
 8006ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ee6:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8006eea:	8bfa      	ldrh	r2, [r7, #30]
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f06:	8bfa      	ldrh	r2, [r7, #30]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 8006cbc <mpu6500_read+0x208>
 8006f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f1e:	edc3 7a02 	vstr	s15, [r3, #8]
 8006f22:	e103      	b.n	800712c <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8006f24:	7e3b      	ldrb	r3, [r7, #24]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d154      	bne.n	8006fd4 <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8006f2a:	8bfa      	ldrh	r2, [r7, #30]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	4413      	add	r3, r2
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	461a      	mov	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f46:	8bfa      	ldrh	r2, [r7, #30]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	461a      	mov	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4413      	add	r3, r2
 8006f56:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 8006cc0 <mpu6500_read+0x20c>
 8006f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f5e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8006f62:	8bfa      	ldrh	r2, [r7, #30]
 8006f64:	4613      	mov	r3, r2
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	4413      	add	r3, r2
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4413      	add	r3, r2
 8006f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f7e:	8bfa      	ldrh	r2, [r7, #30]
 8006f80:	4613      	mov	r3, r2
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 8006cc0 <mpu6500_read+0x20c>
 8006f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f96:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8006f9a:	8bfa      	ldrh	r2, [r7, #30]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fb6:	8bfa      	ldrh	r2, [r7, #30]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 8006cc0 <mpu6500_read+0x20c>
 8006fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fce:	edc3 7a02 	vstr	s15, [r3, #8]
 8006fd2:	e0ab      	b.n	800712c <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8006fd4:	7e3b      	ldrb	r3, [r7, #24]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d154      	bne.n	8007084 <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8006fda:	8bfa      	ldrh	r2, [r7, #30]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	4413      	add	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff6:	8bfa      	ldrh	r2, [r7, #30]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	461a      	mov	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	eddf 6acd 	vldr	s13, [pc, #820]	@ 800733c <mpu6500_read+0x888>
 800700a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800700e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8007012:	8bfa      	ldrh	r2, [r7, #30]
 8007014:	4613      	mov	r3, r2
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	4413      	add	r3, r2
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	461a      	mov	r2, r3
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800702e:	8bfa      	ldrh	r2, [r7, #30]
 8007030:	4613      	mov	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	eddf 6abf 	vldr	s13, [pc, #764]	@ 800733c <mpu6500_read+0x888>
 8007042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007046:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 800704a:	8bfa      	ldrh	r2, [r7, #30]
 800704c:	4613      	mov	r3, r2
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	461a      	mov	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007066:	8bfa      	ldrh	r2, [r7, #30]
 8007068:	4613      	mov	r3, r2
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 800733c <mpu6500_read+0x888>
 800707a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800707e:	edc3 7a02 	vstr	s15, [r3, #8]
 8007082:	e053      	b.n	800712c <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8007084:	8bfa      	ldrh	r2, [r7, #30]
 8007086:	4613      	mov	r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	4413      	add	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	461a      	mov	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4413      	add	r3, r2
 8007094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070a0:	8bfa      	ldrh	r2, [r7, #30]
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4413      	add	r3, r2
 80070b0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8007340 <mpu6500_read+0x88c>
 80070b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070b8:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 80070bc:	8bfa      	ldrh	r2, [r7, #30]
 80070be:	4613      	mov	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	461a      	mov	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4413      	add	r3, r2
 80070cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070d8:	8bfa      	ldrh	r2, [r7, #30]
 80070da:	4613      	mov	r3, r2
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8007340 <mpu6500_read+0x88c>
 80070ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f0:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 80070f4:	8bfa      	ldrh	r2, [r7, #30]
 80070f6:	4613      	mov	r3, r2
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4413      	add	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	461a      	mov	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4413      	add	r3, r2
 8007104:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007110:	8bfa      	ldrh	r2, [r7, #30]
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8007340 <mpu6500_read+0x88c>
 8007124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007128:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d154      	bne.n	80071dc <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8007132:	8bfa      	ldrh	r2, [r7, #30]
 8007134:	4613      	mov	r3, r2
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	4413      	add	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	461a      	mov	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	4413      	add	r3, r2
 8007142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800714e:	8bfa      	ldrh	r2, [r7, #30]
 8007150:	4613      	mov	r3, r2
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	461a      	mov	r2, r3
 800715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715c:	4413      	add	r3, r2
 800715e:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8007344 <mpu6500_read+0x890>
 8007162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007166:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 800716a:	8bfa      	ldrh	r2, [r7, #30]
 800716c:	4613      	mov	r3, r2
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	4413      	add	r3, r2
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	461a      	mov	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	4413      	add	r3, r2
 800717a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007186:	8bfa      	ldrh	r2, [r7, #30]
 8007188:	4613      	mov	r3, r2
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	461a      	mov	r2, r3
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	4413      	add	r3, r2
 8007196:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8007344 <mpu6500_read+0x890>
 800719a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800719e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 80071a2:	8bfa      	ldrh	r2, [r7, #30]
 80071a4:	4613      	mov	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	461a      	mov	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	4413      	add	r3, r2
 80071b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071be:	8bfa      	ldrh	r2, [r7, #30]
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	461a      	mov	r2, r3
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	4413      	add	r3, r2
 80071ce:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8007344 <mpu6500_read+0x890>
 80071d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071d6:	edc3 7a02 	vstr	s15, [r3, #8]
 80071da:	e10f      	b.n	80073fc <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d154      	bne.n	800728c <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 80071e2:	8bfa      	ldrh	r2, [r7, #30]
 80071e4:	4613      	mov	r3, r2
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	4413      	add	r3, r2
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	461a      	mov	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071fe:	8bfa      	ldrh	r2, [r7, #30]
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	461a      	mov	r2, r3
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	4413      	add	r3, r2
 800720e:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007348 <mpu6500_read+0x894>
 8007212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007216:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 800721a:	8bfa      	ldrh	r2, [r7, #30]
 800721c:	4613      	mov	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	4413      	add	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	461a      	mov	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	4413      	add	r3, r2
 800722a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007236:	8bfa      	ldrh	r2, [r7, #30]
 8007238:	4613      	mov	r3, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	461a      	mov	r2, r3
 8007242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007244:	4413      	add	r3, r2
 8007246:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8007348 <mpu6500_read+0x894>
 800724a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800724e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8007252:	8bfa      	ldrh	r2, [r7, #30]
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	461a      	mov	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	4413      	add	r3, r2
 8007262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800726e:	8bfa      	ldrh	r2, [r7, #30]
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	461a      	mov	r2, r3
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	4413      	add	r3, r2
 800727e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007348 <mpu6500_read+0x894>
 8007282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007286:	edc3 7a02 	vstr	s15, [r3, #8]
 800728a:	e0b7      	b.n	80073fc <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d160      	bne.n	8007354 <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8007292:	8bfa      	ldrh	r2, [r7, #30]
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	461a      	mov	r2, r3
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	4413      	add	r3, r2
 80072a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072ae:	8bfa      	ldrh	r2, [r7, #30]
 80072b0:	4613      	mov	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	461a      	mov	r2, r3
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	4413      	add	r3, r2
 80072be:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800734c <mpu6500_read+0x898>
 80072c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072c6:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 80072ca:	8bfa      	ldrh	r2, [r7, #30]
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	461a      	mov	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	4413      	add	r3, r2
 80072da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072e6:	8bfa      	ldrh	r2, [r7, #30]
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	461a      	mov	r2, r3
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	4413      	add	r3, r2
 80072f6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800734c <mpu6500_read+0x898>
 80072fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072fe:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8007302:	8bfa      	ldrh	r2, [r7, #30]
 8007304:	4613      	mov	r3, r2
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	4413      	add	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	461a      	mov	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	4413      	add	r3, r2
 8007312:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800731e:	8bfa      	ldrh	r2, [r7, #30]
 8007320:	4613      	mov	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	461a      	mov	r2, r3
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	4413      	add	r3, r2
 800732e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800734c <mpu6500_read+0x898>
 8007332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007336:	edc3 7a02 	vstr	s15, [r3, #8]
 800733a:	e05f      	b.n	80073fc <mpu6500_read+0x948>
 800733c:	45800000 	.word	0x45800000
 8007340:	45000000 	.word	0x45000000
 8007344:	43030000 	.word	0x43030000
 8007348:	42830000 	.word	0x42830000
 800734c:	42033333 	.word	0x42033333
 8007350:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8007354:	8bfa      	ldrh	r2, [r7, #30]
 8007356:	4613      	mov	r3, r2
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	4413      	add	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	461a      	mov	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	4413      	add	r3, r2
 8007364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007370:	8bfa      	ldrh	r2, [r7, #30]
 8007372:	4613      	mov	r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	461a      	mov	r2, r3
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	4413      	add	r3, r2
 8007380:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 8007350 <mpu6500_read+0x89c>
 8007384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007388:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 800738c:	8bfa      	ldrh	r2, [r7, #30]
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	461a      	mov	r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	4413      	add	r3, r2
 800739c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80073a0:	ee07 3a90 	vmov	s15, r3
 80073a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073a8:	8bfa      	ldrh	r2, [r7, #30]
 80073aa:	4613      	mov	r3, r2
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	461a      	mov	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	4413      	add	r3, r2
 80073b8:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8007350 <mpu6500_read+0x89c>
 80073bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073c0:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 80073c4:	8bfa      	ldrh	r2, [r7, #30]
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	461a      	mov	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	4413      	add	r3, r2
 80073d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073e0:	8bfa      	ldrh	r2, [r7, #30]
 80073e2:	4613      	mov	r3, r2
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	461a      	mov	r2, r3
 80073ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ee:	4413      	add	r3, r2
 80073f0:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8007350 <mpu6500_read+0x89c>
 80073f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073f8:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 80073fc:	8bfb      	ldrh	r3, [r7, #30]
 80073fe:	3301      	adds	r3, #1
 8007400:	83fb      	strh	r3, [r7, #30]
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	8bfa      	ldrh	r2, [r7, #30]
 8007408:	429a      	cmp	r2, r3
 800740a:	f4ff ac5b 	bcc.w	8006cc4 <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 800740e:	2300      	movs	r3, #0
 8007410:	e1e5      	b.n	80077de <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	2201      	movs	r2, #1
 8007416:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800741e:	230e      	movs	r3, #14
 8007420:	213b      	movs	r1, #59	@ 0x3b
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff f928 	bl	8006678 <a_mpu6500_read>
 8007428:	4603      	mov	r3, r0
 800742a:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800742c:	7f7b      	ldrb	r3, [r7, #29]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	48b4      	ldr	r0, [pc, #720]	@ (8007708 <mpu6500_read+0xc54>)
 8007438:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 800743a:	2301      	movs	r3, #1
 800743c:	e1cf      	b.n	80077de <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007444:	b21b      	sxth	r3, r3
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	b21a      	sxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007450:	b21b      	sxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b21a      	sxth	r2, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007460:	b21b      	sxth	r3, r3
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	b21a      	sxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800746c:	b21b      	sxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b21a      	sxth	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800747c:	b21b      	sxth	r3, r3
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	b21a      	sxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007488:	b21b      	sxth	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b21a      	sxth	r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007498:	b21b      	sxth	r3, r3
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	b21a      	sxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b21a      	sxth	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	b21a      	sxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80074c0:	b21b      	sxth	r3, r3
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b21a      	sxth	r2, r3
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80074d0:	b21b      	sxth	r3, r3
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	b21a      	sxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21a      	sxth	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 80074e6:	7e3b      	ldrb	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d12a      	bne.n	8007542 <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074fa:	eddf 6a84 	vldr	s13, [pc, #528]	@ 800770c <mpu6500_read+0xc58>
 80074fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007516:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 800770c <mpu6500_read+0xc58>
 800751a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007532:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800770c <mpu6500_read+0xc58>
 8007536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	edc3 7a02 	vstr	s15, [r3, #8]
 8007540:	e085      	b.n	800764e <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8007542:	7e3b      	ldrb	r3, [r7, #24]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d12a      	bne.n	800759e <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007556:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007710 <mpu6500_read+0xc5c>
 800755a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007572:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8007710 <mpu6500_read+0xc5c>
 8007576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800758e:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8007710 <mpu6500_read+0xc5c>
 8007592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	edc3 7a02 	vstr	s15, [r3, #8]
 800759c:	e057      	b.n	800764e <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 800759e:	7e3b      	ldrb	r3, [r7, #24]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d12a      	bne.n	80075fa <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007714 <mpu6500_read+0xc60>
 80075b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ce:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8007714 <mpu6500_read+0xc60>
 80075d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ea:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8007714 <mpu6500_read+0xc60>
 80075ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	edc3 7a02 	vstr	s15, [r3, #8]
 80075f8:	e029      	b.n	800764e <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007608:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007718 <mpu6500_read+0xc64>
 800760c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007624:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8007718 <mpu6500_read+0xc64>
 8007628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007640:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8007718 <mpu6500_read+0xc64>
 8007644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d12a      	bne.n	80076aa <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007662:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 800771c <mpu6500_read+0xc68>
 8007666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800767e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800771c <mpu6500_read+0xc68>
 8007682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800769a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800771c <mpu6500_read+0xc68>
 800769e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	edc3 7a02 	vstr	s15, [r3, #8]
 80076a8:	e098      	b.n	80077dc <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d13d      	bne.n	800772c <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076be:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8007720 <mpu6500_read+0xc6c>
 80076c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076da:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8007720 <mpu6500_read+0xc6c>
 80076de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e4:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076f6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007720 <mpu6500_read+0xc6c>
 80076fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	edc3 7a02 	vstr	s15, [r3, #8]
 8007704:	e06a      	b.n	80077dc <mpu6500_read+0xd28>
 8007706:	bf00      	nop
 8007708:	08020aac 	.word	0x08020aac
 800770c:	46800000 	.word	0x46800000
 8007710:	46000000 	.word	0x46000000
 8007714:	45800000 	.word	0x45800000
 8007718:	45000000 	.word	0x45000000
 800771c:	43030000 	.word	0x43030000
 8007720:	42830000 	.word	0x42830000
 8007724:	42033333 	.word	0x42033333
 8007728:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d12a      	bne.n	8007788 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007740:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8007724 <mpu6500_read+0xc70>
 8007744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800775c:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8007724 <mpu6500_read+0xc70>
 8007760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007778:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 8007724 <mpu6500_read+0xc70>
 800777c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007782:	edc3 7a02 	vstr	s15, [r3, #8]
 8007786:	e029      	b.n	80077dc <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007796:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8007728 <mpu6500_read+0xc74>
 800779a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077b2:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8007728 <mpu6500_read+0xc74>
 80077b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077ce:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 8007728 <mpu6500_read+0xc74>
 80077d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 80077dc:	2300      	movs	r3, #0
    }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3720      	adds	r7, #32
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop

080077e8 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 80077fa:	2302      	movs	r3, #2
 80077fc:	e03a      	b.n	8007874 <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007804:	2b01      	cmp	r3, #1
 8007806:	d001      	beq.n	800780c <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8007808:	2303      	movs	r3, #3
 800780a:	e033      	b.n	8007874 <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 800780c:	f107 020e 	add.w	r2, r7, #14
 8007810:	2301      	movs	r3, #1
 8007812:	216a      	movs	r1, #106	@ 0x6a
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fe ff2f 	bl	8006678 <a_mpu6500_read>
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	4814      	ldr	r0, [pc, #80]	@ (800787c <mpu6500_set_fifo+0x94>)
 800782a:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 800782c:	2301      	movs	r3, #1
 800782e:	e021      	b.n	8007874 <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007836:	b2db      	uxtb	r3, r3
 8007838:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 800783a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800783e:	019b      	lsls	r3, r3, #6
 8007840:	b25a      	sxtb	r2, r3
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	b25b      	sxtb	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b25b      	sxtb	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800784e:	f107 020e 	add.w	r2, r7, #14
 8007852:	2301      	movs	r3, #1
 8007854:	216a      	movs	r1, #106	@ 0x6a
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fe ff3f 	bl	80066da <a_mpu6500_write>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	4805      	ldr	r0, [pc, #20]	@ (8007880 <mpu6500_set_fifo+0x98>)
 800786c:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08020b4c 	.word	0x08020b4c
 8007880:	08020b70 	.word	0x08020b70

08007884 <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8007896:	2302      	movs	r3, #2
 8007898:	e03a      	b.n	8007910 <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d001      	beq.n	80078a8 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 80078a4:	2303      	movs	r3, #3
 80078a6:	e033      	b.n	8007910 <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80078a8:	f107 020e 	add.w	r2, r7, #14
 80078ac:	2301      	movs	r3, #1
 80078ae:	216a      	movs	r1, #106	@ 0x6a
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fe fee1 	bl	8006678 <a_mpu6500_read>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	4814      	ldr	r0, [pc, #80]	@ (8007918 <mpu6500_set_iic_master+0x94>)
 80078c6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80078c8:	2301      	movs	r3, #1
 80078ca:	e021      	b.n	8007910 <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	f023 0320 	bic.w	r3, r3, #32
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 80078d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078da:	015b      	lsls	r3, r3, #5
 80078dc:	b25a      	sxtb	r2, r3
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b25b      	sxtb	r3, r3
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80078ea:	f107 020e 	add.w	r2, r7, #14
 80078ee:	2301      	movs	r3, #1
 80078f0:	216a      	movs	r1, #106	@ 0x6a
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fe fef1 	bl	80066da <a_mpu6500_write>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	4805      	ldr	r0, [pc, #20]	@ (800791c <mpu6500_set_iic_master+0x98>)
 8007908:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	08020b4c 	.word	0x08020b4c
 800791c:	08020b70 	.word	0x08020b70

08007920 <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 8007932:	2302      	movs	r3, #2
 8007934:	e03a      	b.n	80079ac <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800793c:	2b01      	cmp	r3, #1
 800793e:	d001      	beq.n	8007944 <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 8007940:	2303      	movs	r3, #3
 8007942:	e033      	b.n	80079ac <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8007944:	f107 020e 	add.w	r2, r7, #14
 8007948:	2301      	movs	r3, #1
 800794a:	216a      	movs	r1, #106	@ 0x6a
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7fe fe93 	bl	8006678 <a_mpu6500_read>
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	4814      	ldr	r0, [pc, #80]	@ (80079b4 <mpu6500_set_disable_iic_slave+0x94>)
 8007962:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007964:	2301      	movs	r3, #1
 8007966:	e021      	b.n	80079ac <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	b2db      	uxtb	r3, r3
 8007970:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8007972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	b25a      	sxtb	r2, r3
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	b25b      	sxtb	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b25b      	sxtb	r3, r3
 8007982:	b2db      	uxtb	r3, r3
 8007984:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8007986:	f107 020e 	add.w	r2, r7, #14
 800798a:	2301      	movs	r3, #1
 800798c:	216a      	movs	r1, #106	@ 0x6a
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fe fea3 	bl	80066da <a_mpu6500_write>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	4805      	ldr	r0, [pc, #20]	@ (80079b8 <mpu6500_set_disable_iic_slave+0x98>)
 80079a4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	08020b4c 	.word	0x08020b4c
 80079b8:	08020b70 	.word	0x08020b70

080079bc <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 80079ce:	2302      	movs	r3, #2
 80079d0:	e035      	b.n	8007a3e <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d001      	beq.n	80079e0 <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 80079dc:	2303      	movs	r3, #3
 80079de:	e02e      	b.n	8007a3e <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80079e0:	f107 020e 	add.w	r2, r7, #14
 80079e4:	2301      	movs	r3, #1
 80079e6:	216b      	movs	r1, #107	@ 0x6b
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe fe45 	bl	8006678 <a_mpu6500_read>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fc:	4812      	ldr	r0, [pc, #72]	@ (8007a48 <mpu6500_set_clock_source+0x8c>)
 80079fe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007a00:	2301      	movs	r3, #1
 8007a02:	e01c      	b.n	8007a3e <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8007a0e:	7bba      	ldrb	r2, [r7, #14]
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007a18:	f107 020e 	add.w	r2, r7, #14
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	216b      	movs	r1, #107	@ 0x6b
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7fe fe5a 	bl	80066da <a_mpu6500_write>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	4805      	ldr	r0, [pc, #20]	@ (8007a4c <mpu6500_set_clock_source+0x90>)
 8007a36:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	08020e38 	.word	0x08020e38
 8007a4c:	08020e64 	.word	0x08020e64

08007a50 <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8007a62:	2302      	movs	r3, #2
 8007a64:	e03c      	b.n	8007ae0 <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d001      	beq.n	8007a74 <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8007a70:	2303      	movs	r3, #3
 8007a72:	e035      	b.n	8007ae0 <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007a74:	f107 020e 	add.w	r2, r7, #14
 8007a78:	2301      	movs	r3, #1
 8007a7a:	216b      	movs	r1, #107	@ 0x6b
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fe fdfb 	bl	8006678 <a_mpu6500_read>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	4815      	ldr	r0, [pc, #84]	@ (8007ae8 <mpu6500_set_ptat+0x98>)
 8007a92:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007a94:	2301      	movs	r3, #1
 8007a96:	e023      	b.n	8007ae0 <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	f023 0308 	bic.w	r3, r3, #8
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <mpu6500_set_ptat+0x5c>
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	e000      	b.n	8007aae <mpu6500_set_ptat+0x5e>
 8007aac:	2200      	movs	r2, #0
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	b25b      	sxtb	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007aba:	f107 020e 	add.w	r2, r7, #14
 8007abe:	2301      	movs	r3, #1
 8007ac0:	216b      	movs	r1, #107	@ 0x6b
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fe fe09 	bl	80066da <a_mpu6500_write>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad6:	4805      	ldr	r0, [pc, #20]	@ (8007aec <mpu6500_set_ptat+0x9c>)
 8007ad8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	08020e38 	.word	0x08020e38
 8007aec:	08020e64 	.word	0x08020e64

08007af0 <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 8007b02:	2302      	movs	r3, #2
 8007b04:	e03a      	b.n	8007b7c <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d001      	beq.n	8007b14 <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8007b10:	2303      	movs	r3, #3
 8007b12:	e033      	b.n	8007b7c <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007b14:	f107 020e 	add.w	r2, r7, #14
 8007b18:	2301      	movs	r3, #1
 8007b1a:	216b      	movs	r1, #107	@ 0x6b
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7fe fdab 	bl	8006678 <a_mpu6500_read>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	4814      	ldr	r0, [pc, #80]	@ (8007b84 <mpu6500_set_cycle_wake_up+0x94>)
 8007b32:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007b34:	2301      	movs	r3, #1
 8007b36:	e021      	b.n	8007b7c <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8007b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b46:	015b      	lsls	r3, r3, #5
 8007b48:	b25a      	sxtb	r2, r3
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	b25b      	sxtb	r3, r3
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007b56:	f107 020e 	add.w	r2, r7, #14
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	216b      	movs	r1, #107	@ 0x6b
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fe fdbb 	bl	80066da <a_mpu6500_write>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b72:	4805      	ldr	r0, [pc, #20]	@ (8007b88 <mpu6500_set_cycle_wake_up+0x98>)
 8007b74:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	08020e38 	.word	0x08020e38
 8007b88:	08020e64 	.word	0x08020e64

08007b8c <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e03a      	b.n	8007c18 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d001      	beq.n	8007bb0 <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8007bac:	2303      	movs	r3, #3
 8007bae:	e033      	b.n	8007c18 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007bb0:	f107 020e 	add.w	r2, r7, #14
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	216b      	movs	r1, #107	@ 0x6b
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe fd5d 	bl	8006678 <a_mpu6500_read>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	4814      	ldr	r0, [pc, #80]	@ (8007c20 <mpu6500_set_sleep+0x94>)
 8007bce:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e021      	b.n	8007c18 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 8007bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007be2:	019b      	lsls	r3, r3, #6
 8007be4:	b25a      	sxtb	r2, r3
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	b25b      	sxtb	r3, r3
 8007bea:	4313      	orrs	r3, r2
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007bf2:	f107 020e 	add.w	r2, r7, #14
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	216b      	movs	r1, #107	@ 0x6b
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fe fd6d 	bl	80066da <a_mpu6500_write>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	4805      	ldr	r0, [pc, #20]	@ (8007c24 <mpu6500_set_sleep+0x98>)
 8007c10:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	08020e38 	.word	0x08020e38
 8007c24:	08020e64 	.word	0x08020e64

08007c28 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e03a      	b.n	8007cb4 <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d001      	beq.n	8007c4c <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e033      	b.n	8007cb4 <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007c4c:	f107 020e 	add.w	r2, r7, #14
 8007c50:	2301      	movs	r3, #1
 8007c52:	216b      	movs	r1, #107	@ 0x6b
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7fe fd0f 	bl	8006678 <a_mpu6500_read>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c68:	4814      	ldr	r0, [pc, #80]	@ (8007cbc <mpu6500_set_gyro_standby+0x94>)
 8007c6a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e021      	b.n	8007cb4 <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	f023 0310 	bic.w	r3, r3, #16
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8007c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	b25a      	sxtb	r2, r3
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	b25b      	sxtb	r3, r3
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007c8e:	f107 020e 	add.w	r2, r7, #14
 8007c92:	2301      	movs	r3, #1
 8007c94:	216b      	movs	r1, #107	@ 0x6b
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fe fd1f 	bl	80066da <a_mpu6500_write>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007caa:	4805      	ldr	r0, [pc, #20]	@ (8007cc0 <mpu6500_set_gyro_standby+0x98>)
 8007cac:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	08020e38 	.word	0x08020e38
 8007cc0:	08020e64 	.word	0x08020e64

08007cc4 <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e043      	b.n	8007d66 <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e03c      	b.n	8007d66 <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8007cec:	f107 020e 	add.w	r2, r7, #14
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	216c      	movs	r1, #108	@ 0x6c
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7fe fcbf 	bl	8006678 <a_mpu6500_read>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	4819      	ldr	r0, [pc, #100]	@ (8007d70 <mpu6500_set_standby_mode+0xac>)
 8007d0a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e02a      	b.n	8007d66 <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2201      	movs	r2, #1
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	b25a      	sxtb	r2, r3
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	b25b      	sxtb	r3, r3
 8007d22:	4013      	ands	r3, r2
 8007d24:	b25b      	sxtb	r3, r3
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 8007d2a:	78ba      	ldrb	r2, [r7, #2]
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	b25a      	sxtb	r2, r3
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8007d40:	f107 020e 	add.w	r2, r7, #14
 8007d44:	2301      	movs	r3, #1
 8007d46:	216c      	movs	r1, #108	@ 0x6c
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe fcc6 	bl	80066da <a_mpu6500_write>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	4805      	ldr	r0, [pc, #20]	@ (8007d74 <mpu6500_set_standby_mode+0xb0>)
 8007d5e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	08020e90 	.word	0x08020e90
 8007d74:	08020ebc 	.word	0x08020ebc

08007d78 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e018      	b.n	8007dc0 <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d001      	beq.n	8007d9c <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e011      	b.n	8007dc0 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8007d9c:	1cfa      	adds	r2, r7, #3
 8007d9e:	2301      	movs	r3, #1
 8007da0:	2119      	movs	r1, #25
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fe fc99 	bl	80066da <a_mpu6500_write>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db6:	4804      	ldr	r0, [pc, #16]	@ (8007dc8 <mpu6500_set_sample_rate_divider+0x50>)
 8007db8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	08020f7c 	.word	0x08020f7c

08007dcc <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8007dde:	2302      	movs	r3, #2
 8007de0:	e03a      	b.n	8007e58 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d001      	beq.n	8007df0 <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 8007dec:	2303      	movs	r3, #3
 8007dee:	e033      	b.n	8007e58 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007df0:	f107 020e 	add.w	r2, r7, #14
 8007df4:	2301      	movs	r3, #1
 8007df6:	211a      	movs	r1, #26
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7fe fc3d 	bl	8006678 <a_mpu6500_read>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	4814      	ldr	r0, [pc, #80]	@ (8007e60 <mpu6500_set_extern_sync+0x94>)
 8007e0e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007e10:	2301      	movs	r3, #1
 8007e12:	e021      	b.n	8007e58 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 8007e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	b25a      	sxtb	r2, r3
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007e32:	f107 020e 	add.w	r2, r7, #14
 8007e36:	2301      	movs	r3, #1
 8007e38:	211a      	movs	r1, #26
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fe fc4d 	bl	80066da <a_mpu6500_write>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	4805      	ldr	r0, [pc, #20]	@ (8007e64 <mpu6500_set_extern_sync+0x98>)
 8007e50:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	08020fc4 	.word	0x08020fc4
 8007e64:	08020fe4 	.word	0x08020fe4

08007e68 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e035      	b.n	8007eea <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d001      	beq.n	8007e8c <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e02e      	b.n	8007eea <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007e8c:	f107 020e 	add.w	r2, r7, #14
 8007e90:	2301      	movs	r3, #1
 8007e92:	211a      	movs	r1, #26
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fe fbef 	bl	8006678 <a_mpu6500_read>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea8:	4812      	ldr	r0, [pc, #72]	@ (8007ef4 <mpu6500_set_low_pass_filter+0x8c>)
 8007eaa:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007eac:	2301      	movs	r3, #1
 8007eae:	e01c      	b.n	8007eea <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	f023 0307 	bic.w	r3, r3, #7
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 8007eba:	7bba      	ldrb	r2, [r7, #14]
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007ec4:	f107 020e 	add.w	r2, r7, #14
 8007ec8:	2301      	movs	r3, #1
 8007eca:	211a      	movs	r1, #26
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7fe fc04 	bl	80066da <a_mpu6500_write>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	4805      	ldr	r0, [pc, #20]	@ (8007ef8 <mpu6500_set_low_pass_filter+0x90>)
 8007ee2:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	08020fc4 	.word	0x08020fc4
 8007ef8:	08020fe4 	.word	0x08020fe4

08007efc <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e03a      	b.n	8007f88 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d001      	beq.n	8007f20 <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e033      	b.n	8007f88 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007f20:	f107 020e 	add.w	r2, r7, #14
 8007f24:	2301      	movs	r3, #1
 8007f26:	211a      	movs	r1, #26
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7fe fba5 	bl	8006678 <a_mpu6500_read>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	4814      	ldr	r0, [pc, #80]	@ (8007f90 <mpu6500_set_fifo_mode+0x94>)
 8007f3e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007f40:	2301      	movs	r3, #1
 8007f42:	e021      	b.n	8007f88 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8007f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f52:	019b      	lsls	r3, r3, #6
 8007f54:	b25a      	sxtb	r2, r3
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	b25b      	sxtb	r3, r3
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007f62:	f107 020e 	add.w	r2, r7, #14
 8007f66:	2301      	movs	r3, #1
 8007f68:	211a      	movs	r1, #26
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fe fbb5 	bl	80066da <a_mpu6500_write>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	4805      	ldr	r0, [pc, #20]	@ (8007f94 <mpu6500_set_fifo_mode+0x98>)
 8007f80:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	08020fc4 	.word	0x08020fc4
 8007f94:	08020fe4 	.word	0x08020fe4

08007f98 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e043      	b.n	800803a <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d001      	beq.n	8007fc0 <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e03c      	b.n	800803a <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007fc0:	f107 020e 	add.w	r2, r7, #14
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	211b      	movs	r1, #27
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fe fb55 	bl	8006678 <a_mpu6500_read>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fdc:	4819      	ldr	r0, [pc, #100]	@ (8008044 <mpu6500_set_gyroscope_test+0xac>)
 8007fde:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e02a      	b.n	800803a <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	b25b      	sxtb	r3, r3
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	b25a      	sxtb	r2, r3
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	b25b      	sxtb	r3, r3
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8007ffe:	78ba      	ldrb	r2, [r7, #2]
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	b25a      	sxtb	r2, r3
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	b25b      	sxtb	r3, r3
 800800c:	4313      	orrs	r3, r2
 800800e:	b25b      	sxtb	r3, r3
 8008010:	b2db      	uxtb	r3, r3
 8008012:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8008014:	f107 020e 	add.w	r2, r7, #14
 8008018:	2301      	movs	r3, #1
 800801a:	211b      	movs	r1, #27
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fe fb5c 	bl	80066da <a_mpu6500_write>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	4805      	ldr	r0, [pc, #20]	@ (8008048 <mpu6500_set_gyroscope_test+0xb0>)
 8008032:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008034:	2301      	movs	r3, #1
 8008036:	e000      	b.n	800803a <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	08021004 	.word	0x08021004
 8008048:	0802102c 	.word	0x0802102c

0800804c <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 800805e:	2302      	movs	r3, #2
 8008060:	e03a      	b.n	80080d8 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008068:	2b01      	cmp	r3, #1
 800806a:	d001      	beq.n	8008070 <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 800806c:	2303      	movs	r3, #3
 800806e:	e033      	b.n	80080d8 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8008070:	f107 020e 	add.w	r2, r7, #14
 8008074:	2301      	movs	r3, #1
 8008076:	211b      	movs	r1, #27
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fe fafd 	bl	8006678 <a_mpu6500_read>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808c:	4814      	ldr	r0, [pc, #80]	@ (80080e0 <mpu6500_set_gyroscope_range+0x94>)
 800808e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008090:	2301      	movs	r3, #1
 8008092:	e021      	b.n	80080d8 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	f023 0318 	bic.w	r3, r3, #24
 800809a:	b2db      	uxtb	r3, r3
 800809c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 800809e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	b25a      	sxtb	r2, r3
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	b25b      	sxtb	r3, r3
 80080aa:	4313      	orrs	r3, r2
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80080b2:	f107 020e 	add.w	r2, r7, #14
 80080b6:	2301      	movs	r3, #1
 80080b8:	211b      	movs	r1, #27
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fe fb0d 	bl	80066da <a_mpu6500_write>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ce:	4805      	ldr	r0, [pc, #20]	@ (80080e4 <mpu6500_set_gyroscope_range+0x98>)
 80080d0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08021004 	.word	0x08021004
 80080e4:	0802102c 	.word	0x0802102c

080080e8 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 80080fa:	2302      	movs	r3, #2
 80080fc:	e03e      	b.n	800817c <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008104:	2b01      	cmp	r3, #1
 8008106:	d001      	beq.n	800810c <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8008108:	2303      	movs	r3, #3
 800810a:	e037      	b.n	800817c <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d905      	bls.n	800811e <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008116:	481b      	ldr	r0, [pc, #108]	@ (8008184 <mpu6500_set_gyroscope_choice+0x9c>)
 8008118:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800811a:	2304      	movs	r3, #4
 800811c:	e02e      	b.n	800817c <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 800811e:	f107 020e 	add.w	r2, r7, #14
 8008122:	2301      	movs	r3, #1
 8008124:	211b      	movs	r1, #27
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fe faa6 	bl	8006678 <a_mpu6500_read>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	4813      	ldr	r0, [pc, #76]	@ (8008188 <mpu6500_set_gyroscope_choice+0xa0>)
 800813c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800813e:	2301      	movs	r3, #1
 8008140:	e01c      	b.n	800817c <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	f023 0303 	bic.w	r3, r3, #3
 8008148:	b2db      	uxtb	r3, r3
 800814a:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 800814c:	7bba      	ldrb	r2, [r7, #14]
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	4313      	orrs	r3, r2
 8008152:	b2db      	uxtb	r3, r3
 8008154:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8008156:	f107 020e 	add.w	r2, r7, #14
 800815a:	2301      	movs	r3, #1
 800815c:	211b      	movs	r1, #27
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe fabb 	bl	80066da <a_mpu6500_write>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	4806      	ldr	r0, [pc, #24]	@ (800818c <mpu6500_set_gyroscope_choice+0xa4>)
 8008174:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	08021058 	.word	0x08021058
 8008188:	08021004 	.word	0x08021004
 800818c:	0802102c 	.word	0x0802102c

08008190 <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
 800819c:	4613      	mov	r3, r2
 800819e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 80081a6:	2302      	movs	r3, #2
 80081a8:	e043      	b.n	8008232 <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 80081b4:	2303      	movs	r3, #3
 80081b6:	e03c      	b.n	8008232 <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80081b8:	f107 020e 	add.w	r2, r7, #14
 80081bc:	2301      	movs	r3, #1
 80081be:	211c      	movs	r1, #28
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fe fa59 	bl	8006678 <a_mpu6500_read>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	4819      	ldr	r0, [pc, #100]	@ (800823c <mpu6500_set_accelerometer_test+0xac>)
 80081d6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80081d8:	2301      	movs	r3, #1
 80081da:	e02a      	b.n	8008232 <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	2201      	movs	r2, #1
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	b25b      	sxtb	r3, r3
 80081e6:	43db      	mvns	r3, r3
 80081e8:	b25a      	sxtb	r2, r3
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	4013      	ands	r3, r2
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 80081f6:	78ba      	ldrb	r2, [r7, #2]
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	b25a      	sxtb	r2, r3
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	b25b      	sxtb	r3, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	b25b      	sxtb	r3, r3
 8008208:	b2db      	uxtb	r3, r3
 800820a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 800820c:	f107 020e 	add.w	r2, r7, #14
 8008210:	2301      	movs	r3, #1
 8008212:	211c      	movs	r1, #28
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fe fa60 	bl	80066da <a_mpu6500_write>
 800821a:	4603      	mov	r3, r0
 800821c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	4805      	ldr	r0, [pc, #20]	@ (8008240 <mpu6500_set_accelerometer_test+0xb0>)
 800822a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800822c:	2301      	movs	r3, #1
 800822e:	e000      	b.n	8008232 <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	080209b4 	.word	0x080209b4
 8008240:	08021070 	.word	0x08021070

08008244 <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8008256:	2302      	movs	r3, #2
 8008258:	e03a      	b.n	80082d0 <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008260:	2b01      	cmp	r3, #1
 8008262:	d001      	beq.n	8008268 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8008264:	2303      	movs	r3, #3
 8008266:	e033      	b.n	80082d0 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8008268:	f107 020e 	add.w	r2, r7, #14
 800826c:	2301      	movs	r3, #1
 800826e:	211c      	movs	r1, #28
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7fe fa01 	bl	8006678 <a_mpu6500_read>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008284:	4814      	ldr	r0, [pc, #80]	@ (80082d8 <mpu6500_set_accelerometer_range+0x94>)
 8008286:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008288:	2301      	movs	r3, #1
 800828a:	e021      	b.n	80082d0 <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	f023 0318 	bic.w	r3, r3, #24
 8008292:	b2db      	uxtb	r3, r3
 8008294:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8008296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	b25a      	sxtb	r2, r3
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 80082aa:	f107 020e 	add.w	r2, r7, #14
 80082ae:	2301      	movs	r3, #1
 80082b0:	211c      	movs	r1, #28
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fe fa11 	bl	80066da <a_mpu6500_write>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c6:	4805      	ldr	r0, [pc, #20]	@ (80082dc <mpu6500_set_accelerometer_range+0x98>)
 80082c8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	080209b4 	.word	0x080209b4
 80082dc:	08021070 	.word	0x08021070

080082e0 <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 80082ee:	2302      	movs	r3, #2
 80082f0:	e035      	b.n	800835e <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d001      	beq.n	8008300 <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 80082fc:	2303      	movs	r3, #3
 80082fe:	e02e      	b.n	800835e <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8008300:	f107 020e 	add.w	r2, r7, #14
 8008304:	2301      	movs	r3, #1
 8008306:	211d      	movs	r1, #29
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7fe f9b5 	bl	8006678 <a_mpu6500_read>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	4812      	ldr	r0, [pc, #72]	@ (8008368 <mpu6500_set_fifo_1024kb+0x88>)
 800831e:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8008320:	2301      	movs	r3, #1
 8008322:	e01c      	b.n	800835e <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800832a:	b2db      	uxtb	r3, r3
 800832c:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008334:	b2db      	uxtb	r3, r3
 8008336:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8008338:	f107 020e 	add.w	r2, r7, #14
 800833c:	2301      	movs	r3, #1
 800833e:	211d      	movs	r1, #29
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7fe f9ca 	bl	80066da <a_mpu6500_write>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	4805      	ldr	r0, [pc, #20]	@ (800836c <mpu6500_set_fifo_1024kb+0x8c>)
 8008356:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8008358:	2301      	movs	r3, #1
 800835a:	e000      	b.n	800835e <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	080210a0 	.word	0x080210a0
 800836c:	080210d0 	.word	0x080210d0

08008370 <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8008382:	2302      	movs	r3, #2
 8008384:	e043      	b.n	800840e <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800838c:	2b01      	cmp	r3, #1
 800838e:	d001      	beq.n	8008394 <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8008390:	2303      	movs	r3, #3
 8008392:	e03c      	b.n	800840e <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d905      	bls.n	80083a6 <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839e:	481e      	ldr	r0, [pc, #120]	@ (8008418 <mpu6500_set_accelerometer_choice+0xa8>)
 80083a0:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 80083a2:	2304      	movs	r3, #4
 80083a4:	e033      	b.n	800840e <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 80083a6:	f107 020e 	add.w	r2, r7, #14
 80083aa:	2301      	movs	r3, #1
 80083ac:	211d      	movs	r1, #29
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fe f962 	bl	8006678 <a_mpu6500_read>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	4816      	ldr	r0, [pc, #88]	@ (800841c <mpu6500_set_accelerometer_choice+0xac>)
 80083c4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80083c6:	2301      	movs	r3, #1
 80083c8:	e021      	b.n	800840e <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	f023 0308 	bic.w	r3, r3, #8
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 80083d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	b25a      	sxtb	r2, r3
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	b25b      	sxtb	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 80083e8:	f107 020e 	add.w	r2, r7, #14
 80083ec:	2301      	movs	r3, #1
 80083ee:	211d      	movs	r1, #29
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7fe f972 	bl	80066da <a_mpu6500_write>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008404:	4806      	ldr	r0, [pc, #24]	@ (8008420 <mpu6500_set_accelerometer_choice+0xb0>)
 8008406:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	08021100 	.word	0x08021100
 800841c:	080210a0 	.word	0x080210a0
 8008420:	080210d0 	.word	0x080210d0

08008424 <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 8008436:	2302      	movs	r3, #2
 8008438:	e035      	b.n	80084a6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008440:	2b01      	cmp	r3, #1
 8008442:	d001      	beq.n	8008448 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 8008444:	2303      	movs	r3, #3
 8008446:	e02e      	b.n	80084a6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8008448:	f107 020e 	add.w	r2, r7, #14
 800844c:	2301      	movs	r3, #1
 800844e:	211d      	movs	r1, #29
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe f911 	bl	8006678 <a_mpu6500_read>
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008464:	4812      	ldr	r0, [pc, #72]	@ (80084b0 <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 8008466:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8008468:	2301      	movs	r3, #1
 800846a:	e01c      	b.n	80084a6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f023 0307 	bic.w	r3, r3, #7
 8008472:	b2db      	uxtb	r3, r3
 8008474:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 8008476:	7bba      	ldrb	r2, [r7, #14]
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	4313      	orrs	r3, r2
 800847c:	b2db      	uxtb	r3, r3
 800847e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8008480:	f107 020e 	add.w	r2, r7, #14
 8008484:	2301      	movs	r3, #1
 8008486:	211d      	movs	r1, #29
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7fe f926 	bl	80066da <a_mpu6500_write>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849c:	4805      	ldr	r0, [pc, #20]	@ (80084b4 <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 800849e:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	080210a0 	.word	0x080210a0
 80084b4:	080210d0 	.word	0x080210d0

080084b8 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 80084ca:	2302      	movs	r3, #2
 80084cc:	e035      	b.n	800853a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d001      	beq.n	80084dc <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 80084d8:	2303      	movs	r3, #3
 80084da:	e02e      	b.n	800853a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 80084dc:	f107 020e 	add.w	r2, r7, #14
 80084e0:	2301      	movs	r3, #1
 80084e2:	211e      	movs	r1, #30
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe f8c7 	bl	8006678 <a_mpu6500_read>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	4812      	ldr	r0, [pc, #72]	@ (8008544 <mpu6500_set_low_power_accel_output_rate+0x8c>)
 80084fa:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80084fc:	2301      	movs	r3, #1
 80084fe:	e01c      	b.n	800853a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	f023 030f 	bic.w	r3, r3, #15
 8008506:	b2db      	uxtb	r3, r3
 8008508:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 800850a:	7bba      	ldrb	r2, [r7, #14]
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	4313      	orrs	r3, r2
 8008510:	b2db      	uxtb	r3, r3
 8008512:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 8008514:	f107 020e 	add.w	r2, r7, #14
 8008518:	2301      	movs	r3, #1
 800851a:	211e      	movs	r1, #30
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fe f8dc 	bl	80066da <a_mpu6500_write>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008530:	4805      	ldr	r0, [pc, #20]	@ (8008548 <mpu6500_set_low_power_accel_output_rate+0x90>)
 8008532:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	08021118 	.word	0x08021118
 8008548:	08021144 	.word	0x08021144

0800854c <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 800855e:	2302      	movs	r3, #2
 8008560:	e03a      	b.n	80085d8 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008568:	2b01      	cmp	r3, #1
 800856a:	d001      	beq.n	8008570 <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 800856c:	2303      	movs	r3, #3
 800856e:	e033      	b.n	80085d8 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8008570:	f107 020e 	add.w	r2, r7, #14
 8008574:	2301      	movs	r3, #1
 8008576:	2169      	movs	r1, #105	@ 0x69
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7fe f87d 	bl	8006678 <a_mpu6500_read>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	4814      	ldr	r0, [pc, #80]	@ (80085e0 <mpu6500_set_wake_on_motion+0x94>)
 800858e:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8008590:	2301      	movs	r3, #1
 8008592:	e021      	b.n	80085d8 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859a:	b2db      	uxtb	r3, r3
 800859c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 800859e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a2:	01db      	lsls	r3, r3, #7
 80085a4:	b25a      	sxtb	r2, r3
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	b25b      	sxtb	r3, r3
 80085aa:	4313      	orrs	r3, r2
 80085ac:	b25b      	sxtb	r3, r3
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80085b2:	f107 020e 	add.w	r2, r7, #14
 80085b6:	2301      	movs	r3, #1
 80085b8:	2169      	movs	r1, #105	@ 0x69
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fe f88d 	bl	80066da <a_mpu6500_write>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	4805      	ldr	r0, [pc, #20]	@ (80085e4 <mpu6500_set_wake_on_motion+0x98>)
 80085d0:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	08021174 	.word	0x08021174
 80085e4:	080211a0 	.word	0x080211a0

080085e8 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 80085fa:	2302      	movs	r3, #2
 80085fc:	e03a      	b.n	8008674 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008604:	2b01      	cmp	r3, #1
 8008606:	d001      	beq.n	800860c <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8008608:	2303      	movs	r3, #3
 800860a:	e033      	b.n	8008674 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 800860c:	f107 020e 	add.w	r2, r7, #14
 8008610:	2301      	movs	r3, #1
 8008612:	2169      	movs	r1, #105	@ 0x69
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fe f82f 	bl	8006678 <a_mpu6500_read>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008628:	4814      	ldr	r0, [pc, #80]	@ (800867c <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 800862a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800862c:	2301      	movs	r3, #1
 800862e:	e021      	b.n	8008674 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008636:	b2db      	uxtb	r3, r3
 8008638:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 800863a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800863e:	019b      	lsls	r3, r3, #6
 8008640:	b25a      	sxtb	r2, r3
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	b25b      	sxtb	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b25b      	sxtb	r3, r3
 800864a:	b2db      	uxtb	r3, r3
 800864c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800864e:	f107 020e 	add.w	r2, r7, #14
 8008652:	2301      	movs	r3, #1
 8008654:	2169      	movs	r1, #105	@ 0x69
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe f83f 	bl	80066da <a_mpu6500_write>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	4805      	ldr	r0, [pc, #20]	@ (8008680 <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 800866c:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	08021174 	.word	0x08021174
 8008680:	080211a0 	.word	0x080211a0

08008684 <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
 8008690:	4613      	mov	r3, r2
 8008692:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 800869a:	2302      	movs	r3, #2
 800869c:	e043      	b.n	8008726 <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d001      	beq.n	80086ac <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 80086a8:	2303      	movs	r3, #3
 80086aa:	e03c      	b.n	8008726 <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 80086ac:	f107 020e 	add.w	r2, r7, #14
 80086b0:	2301      	movs	r3, #1
 80086b2:	2123      	movs	r1, #35	@ 0x23
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fd ffdf 	bl	8006678 <a_mpu6500_read>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c8:	4819      	ldr	r0, [pc, #100]	@ (8008730 <mpu6500_set_fifo_enable+0xac>)
 80086ca:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80086cc:	2301      	movs	r3, #1
 80086ce:	e02a      	b.n	8008726 <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	2201      	movs	r2, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	43db      	mvns	r3, r3
 80086dc:	b25a      	sxtb	r2, r3
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	4013      	ands	r3, r2
 80086e4:	b25b      	sxtb	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 80086ea:	78ba      	ldrb	r2, [r7, #2]
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	b25a      	sxtb	r2, r3
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	b25b      	sxtb	r3, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b25b      	sxtb	r3, r3
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8008700:	f107 020e 	add.w	r2, r7, #14
 8008704:	2301      	movs	r3, #1
 8008706:	2123      	movs	r1, #35	@ 0x23
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7fd ffe6 	bl	80066da <a_mpu6500_write>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871c:	4805      	ldr	r0, [pc, #20]	@ (8008734 <mpu6500_set_fifo_enable+0xb0>)
 800871e:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	080211cc 	.word	0x080211cc
 8008734:	080211f8 	.word	0x080211f8

08008738 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 800874a:	2302      	movs	r3, #2
 800874c:	e03a      	b.n	80087c4 <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8008758:	2303      	movs	r3, #3
 800875a:	e033      	b.n	80087c4 <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800875c:	f107 020e 	add.w	r2, r7, #14
 8008760:	2301      	movs	r3, #1
 8008762:	2137      	movs	r1, #55	@ 0x37
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fd ff87 	bl	8006678 <a_mpu6500_read>
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008778:	4814      	ldr	r0, [pc, #80]	@ (80087cc <mpu6500_set_interrupt_level+0x94>)
 800877a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800877c:	2301      	movs	r3, #1
 800877e:	e021      	b.n	80087c4 <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008786:	b2db      	uxtb	r3, r3
 8008788:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 800878a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800878e:	01db      	lsls	r3, r3, #7
 8008790:	b25a      	sxtb	r2, r3
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	b25b      	sxtb	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	b25b      	sxtb	r3, r3
 800879a:	b2db      	uxtb	r3, r3
 800879c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800879e:	f107 020e 	add.w	r2, r7, #14
 80087a2:	2301      	movs	r3, #1
 80087a4:	2137      	movs	r1, #55	@ 0x37
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fd ff97 	bl	80066da <a_mpu6500_write>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d005      	beq.n	80087c2 <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ba:	4805      	ldr	r0, [pc, #20]	@ (80087d0 <mpu6500_set_interrupt_level+0x98>)
 80087bc:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	08021224 	.word	0x08021224
 80087d0:	0802124c 	.word	0x0802124c

080087d4 <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 80087e6:	2302      	movs	r3, #2
 80087e8:	e03a      	b.n	8008860 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d001      	beq.n	80087f8 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 80087f4:	2303      	movs	r3, #3
 80087f6:	e033      	b.n	8008860 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80087f8:	f107 020e 	add.w	r2, r7, #14
 80087fc:	2301      	movs	r3, #1
 80087fe:	2137      	movs	r1, #55	@ 0x37
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fd ff39 	bl	8006678 <a_mpu6500_read>
 8008806:	4603      	mov	r3, r0
 8008808:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d005      	beq.n	800881c <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	4814      	ldr	r0, [pc, #80]	@ (8008868 <mpu6500_set_interrupt_pin_type+0x94>)
 8008816:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008818:	2301      	movs	r3, #1
 800881a:	e021      	b.n	8008860 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008822:	b2db      	uxtb	r3, r3
 8008824:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8008826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800882a:	019b      	lsls	r3, r3, #6
 800882c:	b25a      	sxtb	r2, r3
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	b25b      	sxtb	r3, r3
 8008832:	4313      	orrs	r3, r2
 8008834:	b25b      	sxtb	r3, r3
 8008836:	b2db      	uxtb	r3, r3
 8008838:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800883a:	f107 020e 	add.w	r2, r7, #14
 800883e:	2301      	movs	r3, #1
 8008840:	2137      	movs	r1, #55	@ 0x37
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fd ff49 	bl	80066da <a_mpu6500_write>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008856:	4805      	ldr	r0, [pc, #20]	@ (800886c <mpu6500_set_interrupt_pin_type+0x98>)
 8008858:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	08021224 	.word	0x08021224
 800886c:	0802124c 	.word	0x0802124c

08008870 <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 8008882:	2302      	movs	r3, #2
 8008884:	e03c      	b.n	8008900 <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800888c:	2b01      	cmp	r3, #1
 800888e:	d001      	beq.n	8008894 <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8008890:	2303      	movs	r3, #3
 8008892:	e035      	b.n	8008900 <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008894:	f107 020e 	add.w	r2, r7, #14
 8008898:	2301      	movs	r3, #1
 800889a:	2137      	movs	r1, #55	@ 0x37
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7fd feeb 	bl	8006678 <a_mpu6500_read>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	4815      	ldr	r0, [pc, #84]	@ (8008908 <mpu6500_set_interrupt_latch+0x98>)
 80088b2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80088b4:	2301      	movs	r3, #1
 80088b6:	e023      	b.n	8008900 <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	f023 0320 	bic.w	r3, r3, #32
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <mpu6500_set_interrupt_latch+0x5c>
 80088c8:	2220      	movs	r2, #32
 80088ca:	e000      	b.n	80088ce <mpu6500_set_interrupt_latch+0x5e>
 80088cc:	2200      	movs	r2, #0
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	4313      	orrs	r3, r2
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80088da:	f107 020e 	add.w	r2, r7, #14
 80088de:	2301      	movs	r3, #1
 80088e0:	2137      	movs	r1, #55	@ 0x37
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fd fef9 	bl	80066da <a_mpu6500_write>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f6:	4805      	ldr	r0, [pc, #20]	@ (800890c <mpu6500_set_interrupt_latch+0x9c>)
 80088f8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	08021224 	.word	0x08021224
 800890c:	0802124c 	.word	0x0802124c

08008910 <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 8008922:	2302      	movs	r3, #2
 8008924:	e03a      	b.n	800899c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800892c:	2b01      	cmp	r3, #1
 800892e:	d001      	beq.n	8008934 <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 8008930:	2303      	movs	r3, #3
 8008932:	e033      	b.n	800899c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008934:	f107 020e 	add.w	r2, r7, #14
 8008938:	2301      	movs	r3, #1
 800893a:	2137      	movs	r1, #55	@ 0x37
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fd fe9b 	bl	8006678 <a_mpu6500_read>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	4814      	ldr	r0, [pc, #80]	@ (80089a4 <mpu6500_set_interrupt_read_clear+0x94>)
 8008952:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008954:	2301      	movs	r3, #1
 8008956:	e021      	b.n	800899c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	b2db      	uxtb	r3, r3
 8008960:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 8008962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	b25a      	sxtb	r2, r3
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	b25b      	sxtb	r3, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	b25b      	sxtb	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008976:	f107 020e 	add.w	r2, r7, #14
 800897a:	2301      	movs	r3, #1
 800897c:	2137      	movs	r1, #55	@ 0x37
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fd feab 	bl	80066da <a_mpu6500_write>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	4805      	ldr	r0, [pc, #20]	@ (80089a8 <mpu6500_set_interrupt_read_clear+0x98>)
 8008994:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	08021224 	.word	0x08021224
 80089a8:	0802124c 	.word	0x0802124c

080089ac <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 80089be:	2302      	movs	r3, #2
 80089c0:	e03a      	b.n	8008a38 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d001      	beq.n	80089d0 <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 80089cc:	2303      	movs	r3, #3
 80089ce:	e033      	b.n	8008a38 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80089d0:	f107 020e 	add.w	r2, r7, #14
 80089d4:	2301      	movs	r3, #1
 80089d6:	2137      	movs	r1, #55	@ 0x37
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fd fe4d 	bl	8006678 <a_mpu6500_read>
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	4814      	ldr	r0, [pc, #80]	@ (8008a40 <mpu6500_set_fsync_interrupt_level+0x94>)
 80089ee:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80089f0:	2301      	movs	r3, #1
 80089f2:	e021      	b.n	8008a38 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	f023 0308 	bic.w	r3, r3, #8
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 80089fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	b25a      	sxtb	r2, r3
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008a12:	f107 020e 	add.w	r2, r7, #14
 8008a16:	2301      	movs	r3, #1
 8008a18:	2137      	movs	r1, #55	@ 0x37
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fd fe5d 	bl	80066da <a_mpu6500_write>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2e:	4805      	ldr	r0, [pc, #20]	@ (8008a44 <mpu6500_set_fsync_interrupt_level+0x98>)
 8008a30:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	08021224 	.word	0x08021224
 8008a44:	0802124c 	.word	0x0802124c

08008a48 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e03a      	b.n	8008ad4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d001      	beq.n	8008a6c <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e033      	b.n	8008ad4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008a6c:	f107 020e 	add.w	r2, r7, #14
 8008a70:	2301      	movs	r3, #1
 8008a72:	2137      	movs	r1, #55	@ 0x37
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fd fdff 	bl	8006678 <a_mpu6500_read>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a88:	4814      	ldr	r0, [pc, #80]	@ (8008adc <mpu6500_set_fsync_interrupt+0x94>)
 8008a8a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e021      	b.n	8008ad4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f023 0304 	bic.w	r3, r3, #4
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8008a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	b25a      	sxtb	r2, r3
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008aae:	f107 020e 	add.w	r2, r7, #14
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	2137      	movs	r1, #55	@ 0x37
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fd fe0f 	bl	80066da <a_mpu6500_write>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aca:	4805      	ldr	r0, [pc, #20]	@ (8008ae0 <mpu6500_set_fsync_interrupt+0x98>)
 8008acc:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	08021224 	.word	0x08021224
 8008ae0:	0802124c 	.word	0x0802124c

08008ae4 <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8008af6:	2302      	movs	r3, #2
 8008af8:	e03a      	b.n	8008b70 <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d001      	beq.n	8008b08 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8008b04:	2303      	movs	r3, #3
 8008b06:	e033      	b.n	8008b70 <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8008b08:	f107 020e 	add.w	r2, r7, #14
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	2137      	movs	r1, #55	@ 0x37
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7fd fdb1 	bl	8006678 <a_mpu6500_read>
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b24:	4814      	ldr	r0, [pc, #80]	@ (8008b78 <mpu6500_set_iic_bypass+0x94>)
 8008b26:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e021      	b.n	8008b70 <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	f023 0302 	bic.w	r3, r3, #2
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8008b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	b25a      	sxtb	r2, r3
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	b25b      	sxtb	r3, r3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008b4a:	f107 020e 	add.w	r2, r7, #14
 8008b4e:	2301      	movs	r3, #1
 8008b50:	2137      	movs	r1, #55	@ 0x37
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fd fdc1 	bl	80066da <a_mpu6500_write>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	4805      	ldr	r0, [pc, #20]	@ (8008b7c <mpu6500_set_iic_bypass+0x98>)
 8008b68:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	08021224 	.word	0x08021224
 8008b7c:	0802124c 	.word	0x0802124c

08008b80 <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8008b96:	2302      	movs	r3, #2
 8008b98:	e043      	b.n	8008c22 <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d001      	beq.n	8008ba8 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e03c      	b.n	8008c22 <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8008ba8:	f107 020e 	add.w	r2, r7, #14
 8008bac:	2301      	movs	r3, #1
 8008bae:	2138      	movs	r1, #56	@ 0x38
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7fd fd61 	bl	8006678 <a_mpu6500_read>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	4819      	ldr	r0, [pc, #100]	@ (8008c2c <mpu6500_set_interrupt+0xac>)
 8008bc6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e02a      	b.n	8008c22 <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	b25a      	sxtb	r2, r3
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	4013      	ands	r3, r2
 8008be0:	b25b      	sxtb	r3, r3
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8008be6:	78ba      	ldrb	r2, [r7, #2]
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	b25a      	sxtb	r2, r3
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	b25b      	sxtb	r3, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	b25b      	sxtb	r3, r3
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8008bfc:	f107 020e 	add.w	r2, r7, #14
 8008c00:	2301      	movs	r3, #1
 8008c02:	2138      	movs	r1, #56	@ 0x38
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7fd fd68 	bl	80066da <a_mpu6500_write>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	4805      	ldr	r0, [pc, #20]	@ (8008c30 <mpu6500_set_interrupt+0xb0>)
 8008c1a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e000      	b.n	8008c22 <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08021274 	.word	0x08021274
 8008c30:	0802129c 	.word	0x0802129c

08008c34 <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008c46:	2302      	movs	r3, #2
 8008c48:	e022      	b.n	8008c90 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d001      	beq.n	8008c58 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008c54:	2303      	movs	r3, #3
 8008c56:	e01b      	b.n	8008c90 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c5c:	121b      	asrs	r3, r3, #8
 8008c5e:	b21b      	sxth	r3, r3
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008c64:	887b      	ldrh	r3, [r7, #2]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 8008c6a:	f107 020c 	add.w	r2, r7, #12
 8008c6e:	2302      	movs	r3, #2
 8008c70:	2177      	movs	r1, #119	@ 0x77
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fd fd31 	bl	80066da <a_mpu6500_write>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c86:	4804      	ldr	r0, [pc, #16]	@ (8008c98 <mpu6500_set_accelerometer_x_offset+0x64>)
 8008c88:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	080213c8 	.word	0x080213c8

08008c9c <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e022      	b.n	8008cf8 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d001      	beq.n	8008cc0 <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e01b      	b.n	8008cf8 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cc4:	121b      	asrs	r3, r3, #8
 8008cc6:	b21b      	sxth	r3, r3
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008ccc:	887b      	ldrh	r3, [r7, #2]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 8008cd2:	f107 020c 	add.w	r2, r7, #12
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	217a      	movs	r1, #122	@ 0x7a
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fd fcfd 	bl	80066da <a_mpu6500_write>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cee:	4804      	ldr	r0, [pc, #16]	@ (8008d00 <mpu6500_set_accelerometer_y_offset+0x64>)
 8008cf0:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	08021410 	.word	0x08021410

08008d04 <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008d16:	2302      	movs	r3, #2
 8008d18:	e022      	b.n	8008d60 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d001      	beq.n	8008d28 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008d24:	2303      	movs	r3, #3
 8008d26:	e01b      	b.n	8008d60 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008d28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d2c:	121b      	asrs	r3, r3, #8
 8008d2e:	b21b      	sxth	r3, r3
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008d34:	887b      	ldrh	r3, [r7, #2]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 8008d3a:	f107 020c 	add.w	r2, r7, #12
 8008d3e:	2302      	movs	r3, #2
 8008d40:	217d      	movs	r1, #125	@ 0x7d
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fd fcc9 	bl	80066da <a_mpu6500_write>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d56:	4804      	ldr	r0, [pc, #16]	@ (8008d68 <mpu6500_set_accelerometer_z_offset+0x64>)
 8008d58:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	08021458 	.word	0x08021458

08008d6c <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	ed87 0a02 	vstr	s0, [r7, #8]
 8008d78:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 8008d80:	2302      	movs	r3, #2
 8008d82:	e014      	b.n	8008dae <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d001      	beq.n	8008d92 <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e00d      	b.n	8008dae <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 8008d92:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d96:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008dbc <mpu6500_accelerometer_offset_convert_to_register+0x50>
 8008d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008da2:	ee17 3a90 	vmov	r3, s15
 8008da6:	b21a      	sxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	3f7ae148 	.word	0x3f7ae148

08008dc0 <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e022      	b.n	8008e1c <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d001      	beq.n	8008de4 <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008de0:	2303      	movs	r3, #3
 8008de2:	e01b      	b.n	8008e1c <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008de4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008de8:	121b      	asrs	r3, r3, #8
 8008dea:	b21b      	sxth	r3, r3
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008df0:	887b      	ldrh	r3, [r7, #2]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 8008df6:	f107 020c 	add.w	r2, r7, #12
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	2113      	movs	r1, #19
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7fd fc6b 	bl	80066da <a_mpu6500_write>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	4804      	ldr	r0, [pc, #16]	@ (8008e24 <mpu6500_set_gyro_x_offset+0x64>)
 8008e14:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008e16:	2301      	movs	r3, #1
 8008e18:	e000      	b.n	8008e1c <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	080214a0 	.word	0x080214a0

08008e28 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	e022      	b.n	8008e84 <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d001      	beq.n	8008e4c <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e01b      	b.n	8008e84 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e50:	121b      	asrs	r3, r3, #8
 8008e52:	b21b      	sxth	r3, r3
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008e58:	887b      	ldrh	r3, [r7, #2]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 8008e5e:	f107 020c 	add.w	r2, r7, #12
 8008e62:	2302      	movs	r3, #2
 8008e64:	2115      	movs	r1, #21
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7fd fc37 	bl	80066da <a_mpu6500_write>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d005      	beq.n	8008e82 <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7a:	4804      	ldr	r0, [pc, #16]	@ (8008e8c <mpu6500_set_gyro_y_offset+0x64>)
 8008e7c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	080214e8 	.word	0x080214e8

08008e90 <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e022      	b.n	8008eec <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d001      	beq.n	8008eb4 <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e01b      	b.n	8008eec <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eb8:	121b      	asrs	r3, r3, #8
 8008eba:	b21b      	sxth	r3, r3
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008ec0:	887b      	ldrh	r3, [r7, #2]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 8008ec6:	f107 020c 	add.w	r2, r7, #12
 8008eca:	2302      	movs	r3, #2
 8008ecc:	2117      	movs	r1, #23
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fd fc03 	bl	80066da <a_mpu6500_write>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	4804      	ldr	r0, [pc, #16]	@ (8008ef4 <mpu6500_set_gyro_z_offset+0x64>)
 8008ee4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	08021530 	.word	0x08021530

08008ef8 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	ed87 0a02 	vstr	s0, [r7, #8]
 8008f04:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e014      	b.n	8008f3a <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d001      	beq.n	8008f1e <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e00d      	b.n	8008f3a <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 8008f1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f22:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008f48 <mpu6500_gyro_offset_convert_to_register+0x50>
 8008f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f2e:	ee17 3a90 	vmov	r3, s15
 8008f32:	b21a      	sxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	3cf9db23 	.word	0x3cf9db23

08008f4c <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d005      	beq.n	8008f6a <ring_buffer_init+0x1e>
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <ring_buffer_init+0x1e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d801      	bhi.n	8008f6e <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e00c      	b.n	8008f88 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	601a      	str	r2, [r3, #0]
	rb->size = size;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6852      	ldr	r2, [r2, #4]
 8008fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fb6:	fb01 f202 	mul.w	r2, r1, r2
 8008fba:	1a9b      	subs	r3, r3, r2
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	441a      	add	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6852      	ldr	r2, [r2, #4]
 8008fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fe8:	fb01 f202 	mul.w	r2, r1, r2
 8008fec:	1a9b      	subs	r3, r3, r2
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	429a      	cmp	r2, r3
 800900c:	d310      	bcc.n	8009030 <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d106      	bne.n	8009024 <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	e00b      	b.n	800903c <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	e005      	b.n	800903c <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	3b01      	subs	r3, #1
	}
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	429a      	cmp	r2, r3
 800905a:	d305      	bcc.n	8009068 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	e004      	b.n	8009072 <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	1ad3      	subs	r3, r2, r3
	}
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	4413      	add	r3, r2
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4413      	add	r3, r2
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b088      	sub	sp, #32
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff ff64 	bl	8008f94 <ring_buffer_free_space>
 80090cc:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4293      	cmp	r3, r2
 80090d4:	bf28      	it	cs
 80090d6:	4613      	movcs	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff ff8d 	bl	8008ffa <ring_buffer_linear_free_space>
 80090e0:	4602      	mov	r2, r0
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d904      	bls.n	80090f2 <ring_buffer_enqueue_arr+0x38>
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7ff ff86 	bl	8008ffa <ring_buffer_linear_free_space>
 80090ee:	4603      	mov	r3, r0
 80090f0:	e000      	b.n	80090f4 <ring_buffer_enqueue_arr+0x3a>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	4413      	add	r3, r2
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	4618      	mov	r0, r3
 8009106:	f013 f84c 	bl	801c1a2 <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	4413      	add	r3, r2
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	6852      	ldr	r2, [r2, #4]
 8009116:	fbb3 f1f2 	udiv	r1, r3, r2
 800911a:	fb01 f202 	mul.w	r2, r1, r2
 800911e:	1a9a      	subs	r2, r3, r2
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d018      	beq.n	8009164 <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	18d0      	adds	r0, r2, r3
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4413      	add	r3, r2
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4619      	mov	r1, r3
 8009146:	f013 f82c 	bl	801c1a2 <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	4413      	add	r3, r2
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	6852      	ldr	r2, [r2, #4]
 8009156:	fbb3 f1f2 	udiv	r1, r3, r2
 800915a:	fb01 f202 	mul.w	r2, r1, r2
 800915e:	1a9a      	subs	r2, r3, r2
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 8009164:	69bb      	ldr	r3, [r7, #24]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 800916e:	b580      	push	{r7, lr}
 8009170:	b08a      	sub	sp, #40	@ 0x28
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff ff24 	bl	8008fc8 <ring_buffer_used_space>
 8009180:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 8009188:	2300      	movs	r3, #0
 800918a:	e048      	b.n	800921e <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 800918c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4293      	cmp	r3, r2
 8009192:	bf28      	it	cs
 8009194:	4613      	movcs	r3, r2
 8009196:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff ff55 	bl	8009048 <ring_buffer_linear_used_space>
 800919e:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	4293      	cmp	r3, r2
 80091a6:	bf28      	it	cs
 80091a8:	4613      	movcs	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	4619      	mov	r1, r3
 80091ba:	68b8      	ldr	r0, [r7, #8]
 80091bc:	f012 fff1 	bl	801c1a2 <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	4413      	add	r3, r2
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	6852      	ldr	r2, [r2, #4]
 80091cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80091d0:	fb01 f202 	mul.w	r2, r1, r2
 80091d4:	1a9a      	subs	r2, r3, r2
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 80091da:	6a3a      	ldr	r2, [r7, #32]
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d91c      	bls.n	800921c <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 80091e2:	6a3a      	ldr	r2, [r7, #32]
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	18d0      	adds	r0, r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4619      	mov	r1, r3
 80091fe:	f012 ffd0 	bl	801c1a2 <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	4413      	add	r3, r2
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	6852      	ldr	r2, [r2, #4]
 800920e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009212:	fb01 f202 	mul.w	r2, r1, r2
 8009216:	1a9a      	subs	r2, r3, r2
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 800921c:	6a3b      	ldr	r3, [r7, #32]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3728      	adds	r7, #40	@ 0x28
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff fec9 	bl	8008fc8 <ring_buffer_used_space>
 8009236:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	4293      	cmp	r3, r2
 800923e:	bf28      	it	cs
 8009240:	4613      	movcs	r3, r2
 8009242:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6852      	ldr	r2, [r2, #4]
 8009250:	fbb3 f1f2 	udiv	r1, r3, r2
 8009254:	fb01 f202 	mul.w	r2, r1, r2
 8009258:	1a9a      	subs	r2, r3, r2
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60da      	str	r2, [r3, #12]
}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	60da      	str	r2, [r3, #12]
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <MX_DMA_Init+0x4c>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009296:	4a0f      	ldr	r2, [pc, #60]	@ (80092d4 <MX_DMA_Init+0x4c>)
 8009298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800929c:	6313      	str	r3, [r2, #48]	@ 0x30
 800929e:	4b0d      	ldr	r3, [pc, #52]	@ (80092d4 <MX_DMA_Init+0x4c>)
 80092a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092a6:	607b      	str	r3, [r7, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80092aa:	2200      	movs	r2, #0
 80092ac:	2105      	movs	r1, #5
 80092ae:	203a      	movs	r0, #58	@ 0x3a
 80092b0:	f002 fd06 	bl	800bcc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80092b4:	203a      	movs	r0, #58	@ 0x3a
 80092b6:	f002 fd1f 	bl	800bcf8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2105      	movs	r1, #5
 80092be:	2046      	movs	r0, #70	@ 0x46
 80092c0:	f002 fcfe 	bl	800bcc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80092c4:	2046      	movs	r0, #70	@ 0x46
 80092c6:	f002 fd17 	bl	800bcf8 <HAL_NVIC_EnableIRQ>

}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40023800 	.word	0x40023800

080092d8 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 80092e4:	edd7 7a00 	vldr	s15, [r7]
 80092e8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009350 <arr_from_freqf+0x78>
 80092ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	d501      	bpl.n	80092fa <arr_from_freqf+0x22>
 80092f6:	4b17      	ldr	r3, [pc, #92]	@ (8009354 <arr_from_freqf+0x7c>)
 80092f8:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009304:	edd7 7a00 	vldr	s15, [r7]
 8009308:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800930c:	ee16 0a90 	vmov	r0, s13
 8009310:	f7f7 f92a 	bl	8000568 <__aeabi_f2d>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <arr_from_freqf+0x80>)
 8009322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009326:	f7f6 ffc1 	bl	80002ac <__adddf3>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f7f7 fc49 	bl	8000bc8 <__aeabi_d2uiz>
 8009336:	4603      	mov	r3, r0
 8009338:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <arr_from_freqf+0x6c>
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	3b01      	subs	r3, #1
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	3a83126f 	.word	0x3a83126f
 8009354:	3a83126f 	.word	0x3a83126f
 8009358:	3fe00000 	.word	0x3fe00000

0800935c <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 8009368:	edd7 7a00 	vldr	s15, [r7]
 800936c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009374:	d502      	bpl.n	800937c <ccr_from_duty+0x20>
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 800937c:	edd7 7a00 	vldr	s15, [r7]
 8009380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938c:	dd02      	ble.n	8009394 <ccr_from_duty+0x38>
 800938e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009392:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3301      	adds	r3, #1
 8009398:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	ee07 3a90 	vmov	s15, r3
 80093a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093a4:	edd7 7a00 	vldr	s15, [r7]
 80093a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80093b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b8:	ee17 3a90 	vmov	r3, s15
 80093bc:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d901      	bls.n	80093ca <ccr_from_duty+0x6e>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
    return ccr;
 80093ca:	68fb      	ldr	r3, [r7, #12]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b09c      	sub	sp, #112	@ 0x70
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6178      	str	r0, [r7, #20]
 80093e0:	6139      	str	r1, [r7, #16]
 80093e2:	60fa      	str	r2, [r7, #12]
 80093e4:	60bb      	str	r3, [r7, #8]
 80093e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80093ea:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <pwm_init+0x22>
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <pwm_init+0x26>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e0de      	b.n	80095bc <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4a70      	ldr	r2, [pc, #448]	@ (80095c4 <pwm_init+0x1ec>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d801      	bhi.n	800940a <pwm_init+0x32>
 8009406:	2301      	movs	r3, #1
 8009408:	e0d8      	b.n	80095bc <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800940a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009414:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	605a      	str	r2, [r3, #4]
 800941e:	609a      	str	r2, [r3, #8]
 8009420:	60da      	str	r2, [r3, #12]
 8009422:	611a      	str	r2, [r3, #16]
 8009424:	615a      	str	r2, [r3, #20]
 8009426:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009428:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	ee07 3a90 	vmov	s15, r3
 8009448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 8009452:	edd7 7a01 	vldr	s15, [r7, #4]
 8009456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945e:	d801      	bhi.n	8009464 <pwm_init+0x8c>
 8009460:	4b59      	ldr	r3, [pc, #356]	@ (80095c8 <pwm_init+0x1f0>)
 8009462:	e000      	b.n	8009466 <pwm_init+0x8e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 800946a:	edd7 7a00 	vldr	s15, [r7]
 800946e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	d502      	bpl.n	800947e <pwm_init+0xa6>
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	e00c      	b.n	8009498 <pwm_init+0xc0>
 800947e:	edd7 7a00 	vldr	s15, [r7]
 8009482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	dd02      	ble.n	8009496 <pwm_init+0xbe>
 8009490:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009494:	e000      	b.n	8009498 <pwm_init+0xc0>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4a4b      	ldr	r2, [pc, #300]	@ (80095cc <pwm_init+0x1f4>)
 80094a0:	fba2 2303 	umull	r2, r3, r2, r3
 80094a4:	0c9b      	lsrs	r3, r3, #18
 80094a6:	3b01      	subs	r3, #1
 80094a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 80094aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b0:	d301      	bcc.n	80094b6 <pwm_init+0xde>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e082      	b.n	80095bc <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 80094b6:	6938      	ldr	r0, [r7, #16]
 80094b8:	f006 f9b1 	bl	800f81e <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094c0:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2200      	movs	r2, #0
 80094c6:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80094ce:	eeb0 0a67 	vmov.f32	s0, s15
 80094d2:	483f      	ldr	r0, [pc, #252]	@ (80095d0 <pwm_init+0x1f8>)
 80094d4:	f7ff ff00 	bl	80092d8 <arr_from_freqf>
 80094d8:	4602      	mov	r2, r0
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2200      	movs	r2, #0
 80094e2:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2280      	movs	r2, #128	@ 0x80
 80094e8:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 80094ea:	6938      	ldr	r0, [r7, #16]
 80094ec:	f006 f820 	bl	800f530 <HAL_TIM_Base_Init>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 80094f6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <pwm_init+0x12c>
 80094fe:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009502:	e05b      	b.n	80095bc <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009508:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 800950a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800950e:	4619      	mov	r1, r3
 8009510:	6938      	ldr	r0, [r7, #16]
 8009512:	f006 fc67 	bl	800fde4 <HAL_TIM_ConfigClockSource>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 800951c:	6938      	ldr	r0, [r7, #16]
 800951e:	f006 f92f 	bl	800f780 <HAL_TIM_PWM_Init>
 8009522:	4603      	mov	r3, r0
 8009524:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8009528:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <pwm_init+0x15e>
 8009530:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009534:	e042      	b.n	80095bc <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009536:	2300      	movs	r3, #0
 8009538:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800953a:	2300      	movs	r3, #0
 800953c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 800953e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009542:	4619      	mov	r1, r3
 8009544:	6938      	ldr	r0, [r7, #16]
 8009546:	f007 f859 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 800954a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <pwm_init+0x180>
 8009552:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009556:	e031      	b.n	80095bc <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 8009558:	f107 0318 	add.w	r3, r7, #24
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	609a      	str	r2, [r3, #8]
 8009564:	60da      	str	r2, [r3, #12]
 8009566:	611a      	str	r2, [r3, #16]
 8009568:	615a      	str	r2, [r3, #20]
 800956a:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 800956c:	2360      	movs	r3, #96	@ 0x60
 800956e:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009570:	2300      	movs	r3, #0
 8009572:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8009574:	2300      	movs	r3, #0
 8009576:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009582:	eeb0 0a67 	vmov.f32	s0, s15
 8009586:	4610      	mov	r0, r2
 8009588:	f7ff fee8 	bl	800935c <ccr_from_duty>
 800958c:	4603      	mov	r3, r0
 800958e:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 8009590:	f107 0318 	add.w	r3, r7, #24
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4619      	mov	r1, r3
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f006 fb61 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 800959e:	4603      	mov	r3, r0
 80095a0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 80095a4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <pwm_init+0x1da>
 80095ac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80095b0:	e004      	b.n	80095bc <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	6938      	ldr	r0, [r7, #16]
 80095b6:	f006 f99b 	bl	800f8f0 <HAL_TIM_PWM_Start>
 80095ba:	4603      	mov	r3, r0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3770      	adds	r7, #112	@ 0x70
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	000f423f 	.word	0x000f423f
 80095c8:	42480000 	.word	0x42480000
 80095cc:	431bde83 	.word	0x431bde83
 80095d0:	000f4240 	.word	0x000f4240

080095d4 <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d04a      	beq.n	800967c <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 80095e6:	edd7 7a00 	vldr	s15, [r7]
 80095ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f2:	d502      	bpl.n	80095fa <pwm_set_duty+0x26>
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	e00c      	b.n	8009614 <pwm_set_duty+0x40>
 80095fa:	edd7 7a00 	vldr	s15, [r7]
 80095fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960a:	dd02      	ble.n	8009612 <pwm_set_duty+0x3e>
 800960c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009610:	e000      	b.n	8009614 <pwm_set_duty+0x40>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	edd3 7a04 	vldr	s15, [r3, #16]
 8009628:	eeb0 0a67 	vmov.f32	s0, s15
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff fe95 	bl	800935c <ccr_from_duty>
 8009632:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <pwm_set_duty+0x74>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	635a      	str	r2, [r3, #52]	@ 0x34
 8009646:	e01a      	b.n	800967e <pwm_set_duty+0xaa>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b04      	cmp	r3, #4
 800964e:	d105      	bne.n	800965c <pwm_set_duty+0x88>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6393      	str	r3, [r2, #56]	@ 0x38
 800965a:	e010      	b.n	800967e <pwm_set_duty+0xaa>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b08      	cmp	r3, #8
 8009662:	d105      	bne.n	8009670 <pwm_set_duty+0x9c>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800966e:	e006      	b.n	800967e <pwm_set_duty+0xaa>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6413      	str	r3, [r2, #64]	@ 0x40
 800967a:	e000      	b.n	800967e <pwm_set_duty+0xaa>
    if (!esc) return;
 800967c:	bf00      	nop
}
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 8009684:	b480      	push	{r7}
 8009686:	b089      	sub	sp, #36	@ 0x24
 8009688:	af00      	add	r7, sp, #0
 800968a:	ed87 0a03 	vstr	s0, [r7, #12]
 800968e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009692:	ed87 1a01 	vstr	s2, [r7, #4]
 8009696:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 800969a:	edd7 7a00 	vldr	s15, [r7]
 800969e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a6:	d502      	bpl.n	80096ae <esc_pwm_throttle_to_duty_cycle+0x2a>
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 80096ae:	edd7 7a00 	vldr	s15, [r7]
 80096b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096be:	dd02      	ble.n	80096c6 <esc_pwm_throttle_to_duty_cycle+0x42>
 80096c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80096c4:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 80096c6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009748 <esc_pwm_throttle_to_duty_cycle+0xc4>
 80096ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80096ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 80096d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80096da:	edd7 7a02 	vldr	s15, [r7, #8]
 80096de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096e2:	edd7 7a00 	vldr	s15, [r7]
 80096e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80096ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 80096f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80096fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80096fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009702:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 8009706:	edd7 7a07 	vldr	s15, [r7, #28]
 800970a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800970e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009712:	d502      	bpl.n	800971a <esc_pwm_throttle_to_duty_cycle+0x96>
 8009714:	f04f 0300 	mov.w	r3, #0
 8009718:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 800971a:	edd7 7a07 	vldr	s15, [r7, #28]
 800971e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972a:	dd02      	ble.n	8009732 <esc_pwm_throttle_to_duty_cycle+0xae>
 800972c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009730:	61fb      	str	r3, [r7, #28]

    return duty;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	ee07 3a90 	vmov	s15, r3
}
 8009738:	eeb0 0a67 	vmov.f32	s0, s15
 800973c:	3724      	adds	r7, #36	@ 0x24
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	49742400 	.word	0x49742400

0800974c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	app_main_start(NULL);
 8009750:	2000      	movs	r0, #0
 8009752:	f000 ffed 	bl	800a730 <app_main_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009756:	4a05      	ldr	r2, [pc, #20]	@ (800976c <MX_FREERTOS_Init+0x20>)
 8009758:	2100      	movs	r1, #0
 800975a:	4805      	ldr	r0, [pc, #20]	@ (8009770 <MX_FREERTOS_Init+0x24>)
 800975c:	f00b fd7e 	bl	801525c <osThreadNew>
 8009760:	4603      	mov	r3, r0
 8009762:	4a04      	ldr	r2, [pc, #16]	@ (8009774 <MX_FREERTOS_Init+0x28>)
 8009764:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8009766:	bf00      	nop
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	08022028 	.word	0x08022028
 8009770:	08009779 	.word	0x08009779
 8009774:	20000a68 	.word	0x20000a68

08009778 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8009780:	f00e feba 	bl	80184f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000));
 8009784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009788:	f00b fdfa 	bl	8015380 <osDelay>
 800978c:	e7fa      	b.n	8009784 <StartDefaultTask+0xc>
	...

08009790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08a      	sub	sp, #40	@ 0x28
 8009794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009796:	f107 0314 	add.w	r3, r7, #20
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	609a      	str	r2, [r3, #8]
 80097a2:	60da      	str	r2, [r3, #12]
 80097a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	4b26      	ldr	r3, [pc, #152]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ae:	4a25      	ldr	r2, [pc, #148]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097b0:	f043 0304 	orr.w	r3, r3, #4
 80097b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80097b6:	4b23      	ldr	r3, [pc, #140]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ba:	f003 0304 	and.w	r3, r3, #4
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80097d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097de:	2300      	movs	r3, #0
 80097e0:	60bb      	str	r3, [r7, #8]
 80097e2:	4b18      	ldr	r3, [pc, #96]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e6:	4a17      	ldr	r2, [pc, #92]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097e8:	f043 0301 	orr.w	r3, r3, #1
 80097ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80097ee:	4b15      	ldr	r3, [pc, #84]	@ (8009844 <MX_GPIO_Init+0xb4>)
 80097f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	60bb      	str	r3, [r7, #8]
 80097f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097fa:	2300      	movs	r3, #0
 80097fc:	607b      	str	r3, [r7, #4]
 80097fe:	4b11      	ldr	r3, [pc, #68]	@ (8009844 <MX_GPIO_Init+0xb4>)
 8009800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009802:	4a10      	ldr	r2, [pc, #64]	@ (8009844 <MX_GPIO_Init+0xb4>)
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	6313      	str	r3, [r2, #48]	@ 0x30
 800980a:	4b0e      	ldr	r3, [pc, #56]	@ (8009844 <MX_GPIO_Init+0xb4>)
 800980c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8009816:	2200      	movs	r2, #0
 8009818:	2110      	movs	r1, #16
 800981a:	480b      	ldr	r0, [pc, #44]	@ (8009848 <MX_GPIO_Init+0xb8>)
 800981c:	f003 f980 	bl	800cb20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8009820:	2310      	movs	r3, #16
 8009822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009824:	2301      	movs	r3, #1
 8009826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009828:	2300      	movs	r3, #0
 800982a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800982c:	2300      	movs	r3, #0
 800982e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8009830:	f107 0314 	add.w	r3, r7, #20
 8009834:	4619      	mov	r1, r3
 8009836:	4804      	ldr	r0, [pc, #16]	@ (8009848 <MX_GPIO_Init+0xb8>)
 8009838:	f002 feda 	bl	800c5f0 <HAL_GPIO_Init>

}
 800983c:	bf00      	nop
 800983e:	3728      	adds	r7, #40	@ 0x28
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40023800 	.word	0x40023800
 8009848:	40020000 	.word	0x40020000

0800984c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b02      	cmp	r3, #2
 8009860:	d103      	bne.n	800986a <_write+0x1e>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
        usart1_send_data(err_header, sizeof(err_header) - 1);
 8009862:	2107      	movs	r1, #7
 8009864:	4807      	ldr	r0, [pc, #28]	@ (8009884 <_write+0x38>)
 8009866:	f001 ffd1 	bl	800b80c <usart1_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = usart1_send_data(data, len);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4619      	mov	r1, r3
 800986e:	68b8      	ldr	r0, [r7, #8]
 8009870:	f001 ffcc 	bl	800b80c <usart1_send_data>
 8009874:	4603      	mov	r3, r0
 8009876:	617b      	str	r3, [r7, #20]
    return sent_size;
 8009878:	697b      	ldr	r3, [r7, #20]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	2000004c 	.word	0x2000004c

08009888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800988c:	f002 f8d6 	bl	800ba3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009890:	f000 f818 	bl	80098c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009894:	f7ff ff7c 	bl	8009790 <MX_GPIO_Init>
  MX_DMA_Init();
 8009898:	f7ff fcf6 	bl	8009288 <MX_DMA_Init>
  MX_SPI1_Init();
 800989c:	f001 f88e 	bl	800a9bc <MX_SPI1_Init>
  MX_TIM4_Init();
 80098a0:	f001 fb6c 	bl	800af7c <MX_TIM4_Init>
  MX_TIM2_Init();
 80098a4:	f001 fad4 	bl	800ae50 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80098a8:	f001 fc50 	bl	800b14c <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80098ac:	f00b fc8c 	bl	80151c8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80098b0:	f7ff ff4c 	bl	800974c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80098b4:	f00b fcac 	bl	8015210 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 80098b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80098bc:	f002 f900 	bl	800bac0 <HAL_Delay>
 80098c0:	e7fa      	b.n	80098b8 <main+0x30>
	...

080098c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b094      	sub	sp, #80	@ 0x50
 80098c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80098ca:	f107 0320 	add.w	r3, r7, #32
 80098ce:	2230      	movs	r2, #48	@ 0x30
 80098d0:	2100      	movs	r1, #0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f012 fb76 	bl	801bfc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80098d8:	f107 030c 	add.w	r3, r7, #12
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	605a      	str	r2, [r3, #4]
 80098e2:	609a      	str	r2, [r3, #8]
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80098e8:	2300      	movs	r3, #0
 80098ea:	60bb      	str	r3, [r7, #8]
 80098ec:	4b28      	ldr	r3, [pc, #160]	@ (8009990 <SystemClock_Config+0xcc>)
 80098ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f0:	4a27      	ldr	r2, [pc, #156]	@ (8009990 <SystemClock_Config+0xcc>)
 80098f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80098f8:	4b25      	ldr	r3, [pc, #148]	@ (8009990 <SystemClock_Config+0xcc>)
 80098fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009904:	2300      	movs	r3, #0
 8009906:	607b      	str	r3, [r7, #4]
 8009908:	4b22      	ldr	r3, [pc, #136]	@ (8009994 <SystemClock_Config+0xd0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a21      	ldr	r2, [pc, #132]	@ (8009994 <SystemClock_Config+0xd0>)
 800990e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	4b1f      	ldr	r3, [pc, #124]	@ (8009994 <SystemClock_Config+0xd0>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800991c:	607b      	str	r3, [r7, #4]
 800991e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009920:	2301      	movs	r3, #1
 8009922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009928:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800992a:	2302      	movs	r3, #2
 800992c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800992e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009934:	2304      	movs	r3, #4
 8009936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009938:	23a8      	movs	r3, #168	@ 0xa8
 800993a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800993c:	2302      	movs	r3, #2
 800993e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009940:	2307      	movs	r3, #7
 8009942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009944:	f107 0320 	add.w	r3, r7, #32
 8009948:	4618      	mov	r0, r3
 800994a:	f004 fb55 	bl	800dff8 <HAL_RCC_OscConfig>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009954:	f000 f832 	bl	80099bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009958:	230f      	movs	r3, #15
 800995a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800995c:	2302      	movs	r3, #2
 800995e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009964:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800996a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800996e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	2105      	movs	r1, #5
 8009976:	4618      	mov	r0, r3
 8009978:	f004 fdb6 	bl	800e4e8 <HAL_RCC_ClockConfig>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009982:	f000 f81b 	bl	80099bc <Error_Handler>
  }
}
 8009986:	bf00      	nop
 8009988:	3750      	adds	r7, #80	@ 0x50
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	40023800 	.word	0x40023800
 8009994:	40007000 	.word	0x40007000

08009998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a04      	ldr	r2, [pc, #16]	@ (80099b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d101      	bne.n	80099ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80099aa:	f002 f869 	bl	800ba80 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	40010000 	.word	0x40010000

080099bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80099c0:	b672      	cpsid	i
}
 80099c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <Error_Handler+0x8>

080099c8 <ctrl_timer_cb>:


#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

static void ctrl_timer_cb(TimerHandle_t arg)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 80099d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a08 <ctrl_timer_cb+0x40>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f107 020c 	add.w	r2, r7, #12
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f00d fca4 	bl	801732c <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <ctrl_timer_cb+0x38>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d007      	beq.n	8009a00 <ctrl_timer_cb+0x38>
 80099f0:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <ctrl_timer_cb+0x44>)
 80099f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	2000177c 	.word	0x2000177c
 8009a0c:	e000ed04 	.word	0xe000ed04

08009a10 <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 8009a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a50 <write_motor_timer_cb+0x40>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f107 020c 	add.w	r2, r7, #12
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f00d fc80 	bl	801732c <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <write_motor_timer_cb+0x38>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d007      	beq.n	8009a48 <write_motor_timer_cb+0x38>
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <write_motor_timer_cb+0x44>)
 8009a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 8009a48:	bf00      	nop
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20001780 	.word	0x20001780
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <init_imu>:

static void init_imu(){
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 8009a5e:	2168      	movs	r1, #104	@ 0x68
 8009a60:	2001      	movs	r0, #1
 8009a62:	f7fc f8d1 	bl	8005c08 <mpu6500_basic_init>
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d14e      	bne.n	8009b0e <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009a70:	1d3b      	adds	r3, r7, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8009b1c <init_imu+0xc4>
 8009a78:	4829      	ldr	r0, [pc, #164]	@ (8009b20 <init_imu+0xc8>)
 8009a7a:	f7ff fa3d 	bl	8008ef8 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 8009a7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009a82:	4619      	mov	r1, r3
 8009a84:	4826      	ldr	r0, [pc, #152]	@ (8009b20 <init_imu+0xc8>)
 8009a86:	f7ff f99b 	bl	8008dc0 <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009a8a:	1d3b      	adds	r3, r7, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8009b1c <init_imu+0xc4>
 8009a92:	4823      	ldr	r0, [pc, #140]	@ (8009b20 <init_imu+0xc8>)
 8009a94:	f7ff fa30 	bl	8008ef8 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8009a98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4820      	ldr	r0, [pc, #128]	@ (8009b20 <init_imu+0xc8>)
 8009aa0:	f7ff f9c2 	bl	8008e28 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009aa4:	1d3b      	adds	r3, r7, #4
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009b1c <init_imu+0xc4>
 8009aac:	481c      	ldr	r0, [pc, #112]	@ (8009b20 <init_imu+0xc8>)
 8009aae:	f7ff fa23 	bl	8008ef8 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8009ab2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4819      	ldr	r0, [pc, #100]	@ (8009b20 <init_imu+0xc8>)
 8009aba:	f7ff f9e9 	bl	8008e90 <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009abe:	1d3b      	adds	r3, r7, #4
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8009b1c <init_imu+0xc4>
 8009ac6:	4816      	ldr	r0, [pc, #88]	@ (8009b20 <init_imu+0xc8>)
 8009ac8:	f7ff f950 	bl	8008d6c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 8009acc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4813      	ldr	r0, [pc, #76]	@ (8009b20 <init_imu+0xc8>)
 8009ad4:	f7ff f8ae 	bl	8008c34 <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009ad8:	1d3b      	adds	r3, r7, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8009b1c <init_imu+0xc4>
 8009ae0:	480f      	ldr	r0, [pc, #60]	@ (8009b20 <init_imu+0xc8>)
 8009ae2:	f7ff f943 	bl	8008d6c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8009ae6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009aea:	4619      	mov	r1, r3
 8009aec:	480c      	ldr	r0, [pc, #48]	@ (8009b20 <init_imu+0xc8>)
 8009aee:	f7ff f8d5 	bl	8008c9c <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009af2:	1d3b      	adds	r3, r7, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8009b1c <init_imu+0xc4>
 8009afa:	4809      	ldr	r0, [pc, #36]	@ (8009b20 <init_imu+0xc8>)
 8009afc:	f7ff f936 	bl	8008d6c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8009b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009b04:	4619      	mov	r1, r3
 8009b06:	4806      	ldr	r0, [pc, #24]	@ (8009b20 <init_imu+0xc8>)
 8009b08:	f7ff f8fc 	bl	8008d04 <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 8009b0c:	e002      	b.n	8009b14 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 8009b0e:	4805      	ldr	r0, [pc, #20]	@ (8009b24 <init_imu+0xcc>)
 8009b10:	f012 f862 	bl	801bbd8 <iprintf>
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	00000000 	.word	0x00000000
 8009b20:	20000628 	.word	0x20000628
 8009b24:	08021e1c 	.word	0x08021e1c

08009b28 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 8009b28:	b590      	push	{r4, r7, lr}
 8009b2a:	b095      	sub	sp, #84	@ 0x54
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 8009b30:	f00d fa12 	bl	8016f58 <xTaskGetCurrentTaskHandle>
 8009b34:	4603      	mov	r3, r0
 8009b36:	4a4d      	ldr	r2, [pc, #308]	@ (8009c6c <flight_controller_main+0x144>)
 8009b38:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 8009b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8009c70 <flight_controller_main+0x148>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <flight_controller_main+0x30>
        	tmr = xTimerCreate(
 8009b42:	4b4c      	ldr	r3, [pc, #304]	@ (8009c74 <flight_controller_main+0x14c>)
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	2201      	movs	r2, #1
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	484a      	ldr	r0, [pc, #296]	@ (8009c78 <flight_controller_main+0x150>)
 8009b4e:	f00d fd21 	bl	8017594 <xTimerCreate>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4a46      	ldr	r2, [pc, #280]	@ (8009c70 <flight_controller_main+0x148>)
 8009b56:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 8009b58:	4b45      	ldr	r3, [pc, #276]	@ (8009c70 <flight_controller_main+0x148>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <flight_controller_main+0x50>
            xTimerStart(tmr, 0);
 8009b60:	4b43      	ldr	r3, [pc, #268]	@ (8009c70 <flight_controller_main+0x148>)
 8009b62:	681c      	ldr	r4, [r3, #0]
 8009b64:	f00c feb0 	bl	80168c8 <xTaskGetTickCount>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2101      	movs	r1, #1
 8009b72:	4620      	mov	r0, r4
 8009b74:	f00d fd6c 	bl	8017650 <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009b78:	f04f 31ff 	mov.w	r1, #4294967295
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	f00d fb89 	bl	8017294 <ulTaskNotifyTake>

        len = 1;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 8009b88:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8009b8c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009b90:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009b94:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	f107 0320 	add.w	r3, r7, #32
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4836      	ldr	r0, [pc, #216]	@ (8009c7c <flight_controller_main+0x154>)
 8009ba4:	f7fc ff86 	bl	8006ab4 <mpu6500_read>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d006      	beq.n	8009bbc <flight_controller_main+0x94>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 8009bae:	4834      	ldr	r0, [pc, #208]	@ (8009c80 <flight_controller_main+0x158>)
 8009bb0:	f012 f882 	bl	801bcb8 <puts>
            flight_control_loop_disarm_esc(&fcl);
 8009bb4:	4833      	ldr	r0, [pc, #204]	@ (8009c84 <flight_controller_main+0x15c>)
 8009bb6:	f7f7 fe62 	bl	800187e <flight_control_loop_disarm_esc>
 8009bba:	e052      	b.n	8009c62 <flight_controller_main+0x13a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 8009bbc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8009bc0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009c88 <flight_controller_main+0x160>
 8009bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bc8:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 8009bcc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8009bd0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8009c88 <flight_controller_main+0x160>
 8009bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bd8:	eef1 7a67 	vneg.f32	s15, s15
 8009bdc:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 8009be0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009be4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8009c88 <flight_controller_main+0x160>
 8009be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bec:	eef1 7a67 	vneg.f32	s15, s15
 8009bf0:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 8009bf4:	edd7 7a08 	vldr	s15, [r7, #32]
 8009bf8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8009c8c <flight_controller_main+0x164>
 8009bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c00:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 8009c04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009c08:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009c8c <flight_controller_main+0x164>
 8009c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c10:	eef1 7a67 	vneg.f32	s15, s15
 8009c14:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 8009c18:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8009c1c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8009c8c <flight_controller_main+0x164>
 8009c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c24:	eef1 7a67 	vneg.f32	s15, s15
 8009c28:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 8009c2c:	ed97 5a02 	vldr	s10, [r7, #8]
 8009c30:	edd7 5a03 	vldr	s11, [r7, #12]
 8009c34:	ed97 6a04 	vldr	s12, [r7, #16]
 8009c38:	edd7 6a05 	vldr	s13, [r7, #20]
 8009c3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8009c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c44:	eef0 1a45 	vmov.f32	s3, s10
 8009c48:	eeb0 2a65 	vmov.f32	s4, s11
 8009c4c:	eef0 2a46 	vmov.f32	s5, s12
 8009c50:	eeb0 0a66 	vmov.f32	s0, s13
 8009c54:	eef0 0a47 	vmov.f32	s1, s14
 8009c58:	eeb0 1a67 	vmov.f32	s2, s15
 8009c5c:	4809      	ldr	r0, [pc, #36]	@ (8009c84 <flight_controller_main+0x15c>)
 8009c5e:	f7f8 f95b 	bl	8001f18 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 8009c62:	4808      	ldr	r0, [pc, #32]	@ (8009c84 <flight_controller_main+0x15c>)
 8009c64:	f7f7 ff82 	bl	8001b6c <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009c68:	e786      	b.n	8009b78 <flight_controller_main+0x50>
 8009c6a:	bf00      	nop
 8009c6c:	2000177c 	.word	0x2000177c
 8009c70:	20004414 	.word	0x20004414
 8009c74:	080099c9 	.word	0x080099c9
 8009c78:	08021e3c 	.word	0x08021e3c
 8009c7c:	20000628 	.word	0x20000628
 8009c80:	08021e50 	.word	0x08021e50
 8009c84:	20001314 	.word	0x20001314
 8009c88:	411ce80a 	.word	0x411ce80a
 8009c8c:	3c8efa35 	.word	0x3c8efa35

08009c90 <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b091      	sub	sp, #68	@ 0x44
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 8009c98:	f00d f95e 	bl	8016f58 <xTaskGetCurrentTaskHandle>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	4a54      	ldr	r2, [pc, #336]	@ (8009df0 <write_motor_main+0x160>)
 8009ca0:	6013      	str	r3, [r2, #0]

    float duty_cycle;
    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 8009ca2:	4b54      	ldr	r3, [pc, #336]	@ (8009df4 <write_motor_main+0x164>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <write_motor_main+0x30>
        s_writeMotorTimer = xTimerCreate(
 8009caa:	4b53      	ldr	r3, [pc, #332]	@ (8009df8 <write_motor_main+0x168>)
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4851      	ldr	r0, [pc, #324]	@ (8009dfc <write_motor_main+0x16c>)
 8009cb6:	f00d fc6d 	bl	8017594 <xTimerCreate>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8009df4 <write_motor_main+0x164>)
 8009cbe:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 8009cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8009df4 <write_motor_main+0x164>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <write_motor_main+0x50>
        xTimerStart(s_writeMotorTimer, 0);
 8009cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8009df4 <write_motor_main+0x164>)
 8009cca:	681c      	ldr	r4, [r3, #0]
 8009ccc:	f00c fdfc 	bl	80168c8 <xTaskGetTickCount>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2101      	movs	r1, #1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f00d fcb8 	bl	8017650 <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	f00b fdb0 	bl	8015846 <xQueueCreateMutex>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	4a45      	ldr	r2, [pc, #276]	@ (8009e00 <write_motor_main+0x170>)
 8009cea:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 8009cec:	2210      	movs	r2, #16
 8009cee:	2100      	movs	r1, #0
 8009cf0:	4844      	ldr	r0, [pc, #272]	@ (8009e04 <write_motor_main+0x174>)
 8009cf2:	f012 f967 	bl	801bfc4 <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 8009cf6:	4b42      	ldr	r3, [pc, #264]	@ (8009e00 <write_motor_main+0x170>)
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	f00b fdba 	bl	8015878 <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009d04:	f04f 31ff 	mov.w	r1, #4294967295
 8009d08:	2001      	movs	r0, #1
 8009d0a:	f00d fac3 	bl	8017294 <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 8009d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e00 <write_motor_main+0x170>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f04f 31ff 	mov.w	r1, #4294967295
 8009d16:	4618      	mov	r0, r3
 8009d18:	f00c f830 	bl	8015d7c <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 8009d1c:	4939      	ldr	r1, [pc, #228]	@ (8009e04 <write_motor_main+0x174>)
 8009d1e:	483a      	ldr	r0, [pc, #232]	@ (8009e08 <write_motor_main+0x178>)
 8009d20:	f7f8 f946 	bl	8001fb0 <flight_control_loop_get_motors_throttle>
				for(int i=0; i<4; i++){
					g_motors_throttle[i] = target_throttle;
				}
		#endif

        for (size_t i = 0; i < 4; i++) {
 8009d24:	2300      	movs	r3, #0
 8009d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d28:	e057      	b.n	8009dda <write_motor_main+0x14a>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 8009d2a:	4a36      	ldr	r2, [pc, #216]	@ (8009e04 <write_motor_main+0x174>)
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	edd3 7a00 	vldr	s15, [r3]
 8009d36:	eef0 1a67 	vmov.f32	s3, s15
 8009d3a:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8009e0c <write_motor_main+0x17c>
 8009d3e:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8009e10 <write_motor_main+0x180>
 8009d42:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8009e14 <write_motor_main+0x184>
 8009d46:	f7ff fc9d 	bl	8009684 <esc_pwm_throttle_to_duty_cycle>
 8009d4a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8009d4e:	2300      	movs	r3, #0
 8009d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d52:	f3ef 8310 	mrs	r3, PRIMASK
 8009d56:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009d5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d5c:	b672      	cpsid	i
}
 8009d5e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009d60:	f3bf 8f4f 	dsb	sy
}
 8009d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d66:	f3bf 8f6f 	isb	sy
}
 8009d6a:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009d6e:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d001      	beq.n	8009d7a <write_motor_main+0xea>
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	e000      	b.n	8009d7c <write_motor_main+0xec>
 8009d7a:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009d7c:	60fb      	str	r3, [r7, #12]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d82:	e00d      	b.n	8009da0 <write_motor_main+0x110>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 8009d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4a22      	ldr	r2, [pc, #136]	@ (8009e18 <write_motor_main+0x188>)
 8009d90:	4413      	add	r3, r2
 8009d92:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fc1c 	bl	80095d4 <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1ee      	bne.n	8009d84 <write_motor_main+0xf4>
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	61bb      	str	r3, [r7, #24]
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8009db2:	f3bf 8f5f 	dmb	sy
}
 8009db6:	bf00      	nop
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f383 8810 	msr	PRIMASK, r3
}
 8009dc2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009dc4:	f3bf 8f4f 	dsb	sy
}
 8009dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009dca:	f3bf 8f6f 	isb	sy
}
 8009dce:	bf00      	nop
}
 8009dd0:	bf00      	nop
}
 8009dd2:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 8009dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d9a4      	bls.n	8009d2a <write_motor_main+0x9a>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 8009de0:	4b07      	ldr	r3, [pc, #28]	@ (8009e00 <write_motor_main+0x170>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	f00b fd45 	bl	8015878 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009dee:	e789      	b.n	8009d04 <write_motor_main+0x74>
 8009df0:	20001780 	.word	0x20001780
 8009df4:	20004418 	.word	0x20004418
 8009df8:	08009a11 	.word	0x08009a11
 8009dfc:	08021e64 	.word	0x08021e64
 8009e00:	20001718 	.word	0x20001718
 8009e04:	2000171c 	.word	0x2000171c
 8009e08:	20001314 	.word	0x20001314
 8009e0c:	44fa0000 	.word	0x44fa0000
 8009e10:	447a0000 	.word	0x447a0000
 8009e14:	43c80000 	.word	0x43c80000
 8009e18:	2000172c 	.word	0x2000172c

08009e1c <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d804      	bhi.n	8009e42 <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
        return 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e029      	b.n	8009e96 <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	6011      	str	r1, [r2, #0]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	7bfa      	ldrb	r2, [r7, #15]
 8009e52:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d91b      	bls.n	8009e94 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3b02      	subs	r3, #2
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	4413      	add	r3, r2
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b0d      	cmp	r3, #13
 8009e6a:	d113      	bne.n	8009e94 <line_buffer_add_char+0x78>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	4413      	add	r3, r2
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b0a      	cmp	r3, #10
 8009e7a:	d10b      	bne.n	8009e94 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3b02      	subs	r3, #2
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	4413      	add	r3, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <rc_control_main>:

static void rc_control_main(void *arg)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b0f6      	sub	sp, #472	@ 0x1d8
 8009ea8:	af0a      	add	r7, sp, #40	@ 0x28
 8009eaa:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009eae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8009eb2:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 8009eb4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009eb8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    float temp_target_throttle = 0;
 8009ec8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009ecc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009ed0:	f04f 0200 	mov.w	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 8009ed6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009eda:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8009ede:	461a      	mov	r2, r3
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	6053      	str	r3, [r2, #4]
 8009ee6:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 8009ee8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009eec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6013      	str	r3, [r2, #0]
 8009ef6:	6053      	str	r3, [r2, #4]
 8009ef8:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 8009efa:	f04f 0300 	mov.w	r3, #0
 8009efe:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    float temp_arm_flag = 0;
 8009f02:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f06:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009f0a:	f04f 0200 	mov.w	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 8009f10:	f04f 0300 	mov.w	r3, #0
 8009f14:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    float temp_disarm_flag = 0;
 8009f18:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009f20:	f04f 0200 	mov.w	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]

    int errors = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    int current_message_corrupted = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 8009f32:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
    float pid_p = 0.0f;
 8009f3e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f42:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
    float pid_i = 0.0f;
 8009f4c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f50:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
    float pid_d = 0.0f;
 8009f5a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f5e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
    float level_p = 0.0f;
 8009f68:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f6c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
    float pid_apply = 0.0f;
 8009f76:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f7a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
      while (usart1_data_available_for_read() > 0)
 8009f8a:	e087      	b.n	800a09c <rc_control_main+0x1f8>
      {
          recv_data = usart1_recv_data((char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 8009f8c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8009f90:	2140      	movs	r1, #64	@ 0x40
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 fc8e 	bl	800b8b4 <usart1_recv_data>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
          for(int i=0; i<recv_data; i++){
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8009fa4:	e074      	b.n	800a090 <rc_control_main+0x1ec>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 8009fa6:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 8009faa:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8009fae:	4413      	add	r3, r2
 8009fb0:	7818      	ldrb	r0, [r3, #0]
 8009fb2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009fb6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8009fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fbe:	f7ff ff2d 	bl	8009e1c <line_buffer_add_char>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d05e      	beq.n	800a086 <rc_control_main+0x1e2>

				  int temp_str_len = strlen(linebuf);
 8009fc8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7f6 f95f 	bl	8000290 <strlen>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  temp_str_len -= 6;
 8009fd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009fdc:	3b06      	subs	r3, #6
 8009fde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  crc_calculated = crc16_ccitt_init();
 8009fe2:	f7f7 fae5 	bl	80015b0 <crc16_ccitt_init>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 8009fec:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8009ff0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8009ff4:	f8b7 318e 	ldrh.w	r3, [r7, #398]	@ 0x18e
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f7 fb15 	bl	8001628 <crc16_ccitt_add_arr>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%x",
 800a004:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800a008:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a00c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800a010:	f107 0320 	add.w	r3, r7, #32
 800a014:	9309      	str	r3, [sp, #36]	@ 0x24
 800a016:	f107 030c 	add.w	r3, r7, #12
 800a01a:	9308      	str	r3, [sp, #32]
 800a01c:	f107 0310 	add.w	r3, r7, #16
 800a020:	9307      	str	r3, [sp, #28]
 800a022:	f107 0314 	add.w	r3, r7, #20
 800a026:	9306      	str	r3, [sp, #24]
 800a028:	f107 0318 	add.w	r3, r7, #24
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	f107 031c 	add.w	r3, r7, #28
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a038:	9303      	str	r3, [sp, #12]
 800a03a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a03e:	9302      	str	r3, [sp, #8]
 800a040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a044:	3308      	adds	r3, #8
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a04c:	3304      	adds	r3, #4
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	460b      	mov	r3, r1
 800a052:	499b      	ldr	r1, [pc, #620]	@ (800a2c0 <rc_control_main+0x41c>)
 800a054:	f011 fe5a 	bl	801bd0c <siscanf>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b0c      	cmp	r3, #12
 800a05c:	d103      	bne.n	800a066 <rc_control_main+0x1c2>
						  &level_p,
						  &pid_apply,
						  &crc_received

						  ) == 12) {
					  current_message_corrupted = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800a064:	e002      	b.n	800a06c <rc_control_main+0x1c8>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 800a066:	2301      	movs	r3, #1
 800a068:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 800a06c:	f8b7 218e 	ldrh.w	r2, [r7, #398]	@ 0x18e
 800a070:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a074:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d003      	beq.n	800a086 <rc_control_main+0x1e2>
					  current_message_corrupted = 1;
 800a07e:	2301      	movs	r3, #1
 800a080:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					  continue;
 800a084:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 800a086:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800a08a:	3301      	adds	r3, #1
 800a08c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800a090:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800a094:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800a098:	429a      	cmp	r2, r3
 800a09a:	db84      	blt.n	8009fa6 <rc_control_main+0x102>
      while (usart1_data_available_for_read() > 0)
 800a09c:	f001 fc5e 	bl	800b95c <usart1_data_available_for_read>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f47f af72 	bne.w	8009f8c <rc_control_main+0xe8>
			  }
          }
      }


      if(current_message_corrupted == 0){
 800a0a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 80a1 	bne.w	800a1f4 <rc_control_main+0x350>
    	  errors = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

          target_attitude = temp_target_attitude;
 800a0b8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a0bc:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 800a0c0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a0c4:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 800a0d0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a0d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
          disarm_flag = (temp_disarm_flag);
 800a0de:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a0e2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
          target_throttle = temp_target_throttle;
 800a0ec:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a0f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
          if(pid_apply > 0.5f){
 800a0fa:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a0fe:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800a102:	edd3 7a00 	vldr	s15, [r3]
 800a106:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a10a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a112:	dd6f      	ble.n	800a1f4 <rc_control_main+0x350>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 800a114:	4b6b      	ldr	r3, [pc, #428]	@ (800a2c4 <rc_control_main+0x420>)
 800a116:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800a11a:	f04f 31ff 	mov.w	r1, #4294967295
 800a11e:	4618      	mov	r0, r3
 800a120:	f00b fe2c 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	fcl.rate_controller.pid_pitch.Kp = pid_p;
 800a124:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a128:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a65      	ldr	r2, [pc, #404]	@ (800a2c4 <rc_control_main+0x420>)
 800a130:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	fcl.rate_controller.pid_pitch.Ki = pid_i;
 800a134:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a138:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a61      	ldr	r2, [pc, #388]	@ (800a2c4 <rc_control_main+0x420>)
 800a140:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	fcl.rate_controller.pid_pitch.Kd = pid_d;
 800a144:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a148:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a5d      	ldr	r2, [pc, #372]	@ (800a2c4 <rc_control_main+0x420>)
 800a150:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8

	fcl.rate_controller.pid_roll.Kp = pid_p;
 800a154:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a158:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a59      	ldr	r2, [pc, #356]	@ (800a2c4 <rc_control_main+0x420>)
 800a160:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
	fcl.rate_controller.pid_roll.Ki = pid_i;
 800a164:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a168:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a55      	ldr	r2, [pc, #340]	@ (800a2c4 <rc_control_main+0x420>)
 800a170:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	fcl.rate_controller.pid_roll.Kd = pid_d;
 800a174:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a178:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a51      	ldr	r2, [pc, #324]	@ (800a2c4 <rc_control_main+0x420>)
 800a180:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c

	fcl.rate_controller.pid_yaw.Kp = pid_p;
 800a184:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a188:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a4d      	ldr	r2, [pc, #308]	@ (800a2c4 <rc_control_main+0x420>)
 800a190:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
	fcl.rate_controller.pid_yaw.Ki = pid_i;
 800a194:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a198:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a49      	ldr	r2, [pc, #292]	@ (800a2c4 <rc_control_main+0x420>)
 800a1a0:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	fcl.rate_controller.pid_yaw.Kd = pid_d;
 800a1a4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a1a8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a45      	ldr	r2, [pc, #276]	@ (800a2c4 <rc_control_main+0x420>)
 800a1b0:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800a1b4:	4b43      	ldr	r3, [pc, #268]	@ (800a2c4 <rc_control_main+0x420>)
 800a1b6:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	f00b fb5a 	bl	8015878 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 800a1c4:	4b3f      	ldr	r3, [pc, #252]	@ (800a2c4 <rc_control_main+0x420>)
 800a1c6:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 800a1ca:	f04f 31ff 	mov.w	r1, #4294967295
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f00b fdd4 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	fcl.attitude_controller.rate_gain = level_p;
 800a1d4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a1d8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a39      	ldr	r2, [pc, #228]	@ (800a2c4 <rc_control_main+0x420>)
 800a1e0:	f8c2 32cc 	str.w	r3, [r2, #716]	@ 0x2cc
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 800a1e4:	4b37      	ldr	r3, [pc, #220]	@ (800a2c4 <rc_control_main+0x420>)
 800a1e6:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	f00b fb42 	bl	8015878 <xQueueGenericSend>
#endif
          }
      }

      errors += current_message_corrupted;
 800a1f4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800a1f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 800a202:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a20e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800a2c8 <rc_control_main+0x424>
 800a212:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21a:	db20      	blt.n	800a25e <rc_control_main+0x3ba>
    	  target_attitude.x = 0.0f;
 800a21c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a220:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 800a22a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a22e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a232:	f04f 0200 	mov.w	r2, #0
 800a236:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 800a238:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a23c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    	  disarm_flag = 1.0f;
 800a24e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800a252:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	  arm_flag = 0.0f;
 800a256:	f04f 0300 	mov.w	r3, #0
 800a25a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      }


      if (arm_flag > 0.5f){
 800a25e:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800a262:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26e:	dd02      	ble.n	800a276 <rc_control_main+0x3d2>
    	  flight_control_loop_arm_esc(&fcl);
 800a270:	4814      	ldr	r0, [pc, #80]	@ (800a2c4 <rc_control_main+0x420>)
 800a272:	f7f7 fae5 	bl	8001840 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 800a276:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800a27a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a27e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a286:	dd02      	ble.n	800a28e <rc_control_main+0x3ea>
    	  flight_control_loop_disarm_esc(&fcl);
 800a288:	480e      	ldr	r0, [pc, #56]	@ (800a2c4 <rc_control_main+0x420>)
 800a28a:	f7f7 faf8 	bl	800187e <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 800a28e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a292:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a296:	edd3 6a00 	vldr	s13, [r3]
 800a29a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a29e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a2a2:	edd7 1a6b 	vldr	s3, [r7, #428]	@ 0x1ac
 800a2a6:	eeb0 0a66 	vmov.f32	s0, s13
 800a2aa:	eef0 0a47 	vmov.f32	s1, s14
 800a2ae:	eeb0 1a67 	vmov.f32	s2, s15
 800a2b2:	4804      	ldr	r0, [pc, #16]	@ (800a2c4 <rc_control_main+0x420>)
 800a2b4:	f7f7 fd90 	bl	8001dd8 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 800a2b8:	200a      	movs	r0, #10
 800a2ba:	f00c f9b3 	bl	8016624 <vTaskDelay>
	  current_message_corrupted = 1;
 800a2be:	e661      	b.n	8009f84 <rc_control_main+0xe0>
 800a2c0:	08021e74 	.word	0x08021e74
 800a2c4:	20001314 	.word	0x20001314
 800a2c8:	42480000 	.word	0x42480000

0800a2cc <print_telemetry_data>:
  }
}


static void print_telemetry_data(void *arg){
 800a2cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2d0:	b0aa      	sub	sp, #168	@ 0xa8
 800a2d2:	af06      	add	r7, sp, #24
 800a2d4:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 800a2d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	605a      	str	r2, [r3, #4]
 800a2e0:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	633b      	str	r3, [r7, #48]	@ 0x30

    for (;;)
    {
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 800a2e8:	4bb3      	ldr	r3, [pc, #716]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a2ea:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 800a2ee:	f04f 31ff 	mov.w	r1, #4294967295
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f00b fd42 	bl	8015d7c <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 800a2f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	48ae      	ldr	r0, [pc, #696]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a300:	f7f9 fe40 	bl	8003f84 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 800a304:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a308:	4619      	mov	r1, r3
 800a30a:	48ab      	ldr	r0, [pc, #684]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a30c:	f7f9 fe4d 	bl	8003faa <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 800a310:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a314:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a318:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800a31c:	48a6      	ldr	r0, [pc, #664]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a31e:	f7f9 fe05 	bl	8003f2c <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 800a322:	4ba5      	ldr	r3, [pc, #660]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a324:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 800a328:	2300      	movs	r3, #0
 800a32a:	2200      	movs	r2, #0
 800a32c:	2100      	movs	r1, #0
 800a32e:	f00b faa3 	bl	8015878 <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 800a332:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a336:	4619      	mov	r1, r3
 800a338:	489f      	ldr	r0, [pc, #636]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a33a:	f7f7 fe39 	bl	8001fb0 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 800a33e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a342:	4618      	mov	r0, r3
 800a344:	f7f9 f852 	bl	80033ec <quat2angle>
 800a348:	eef0 6a40 	vmov.f32	s13, s0
 800a34c:	eeb0 7a60 	vmov.f32	s14, s1
 800a350:	eef0 7a41 	vmov.f32	s15, s2
 800a354:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 800a358:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800a35c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 800a360:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a364:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 800a5bc <print_telemetry_data+0x2f0>
 800a368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a36c:	ee17 0a90 	vmov	r0, s15
 800a370:	f7f6 f8fa 	bl	8000568 <__aeabi_f2d>
 800a374:	4680      	mov	r8, r0
 800a376:	4689      	mov	r9, r1
 800a378:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a37c:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800a5bc <print_telemetry_data+0x2f0>
 800a380:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a384:	ee17 0a90 	vmov	r0, s15
 800a388:	f7f6 f8ee 	bl	8000568 <__aeabi_f2d>
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a394:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800a5bc <print_telemetry_data+0x2f0>
 800a398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a39c:	ee17 0a90 	vmov	r0, s15
 800a3a0:	f7f6 f8e2 	bl	8000568 <__aeabi_f2d>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ac:	e9cd 4500 	strd	r4, r5, [sp]
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	4882      	ldr	r0, [pc, #520]	@ (800a5c0 <print_telemetry_data+0x2f4>)
 800a3b6:	f011 fc0f 	bl	801bbd8 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
 800a3ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f6 f8d2 	bl	8000568 <__aeabi_f2d>
 800a3c4:	4680      	mov	r8, r0
 800a3c6:	4689      	mov	r9, r1
 800a3c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7f6 f8cb 	bl	8000568 <__aeabi_f2d>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f6 f8c4 	bl	8000568 <__aeabi_f2d>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3e8:	e9cd 4500 	strd	r4, r5, [sp]
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	4873      	ldr	r0, [pc, #460]	@ (800a5c0 <print_telemetry_data+0x2f4>)
 800a3f2:	f011 fbf1 	bl	801bbd8 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
 800a3f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7f6 f8b5 	bl	8000568 <__aeabi_f2d>
 800a3fe:	4680      	mov	r8, r0
 800a400:	4689      	mov	r9, r1
 800a402:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a404:	4618      	mov	r0, r3
 800a406:	f7f6 f8af 	bl	8000568 <__aeabi_f2d>
 800a40a:	4604      	mov	r4, r0
 800a40c:	460d      	mov	r5, r1
 800a40e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a412:	4618      	mov	r0, r3
 800a414:	f7f6 f8a8 	bl	8000568 <__aeabi_f2d>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a420:	e9cd 4500 	strd	r4, r5, [sp]
 800a424:	4642      	mov	r2, r8
 800a426:	464b      	mov	r3, r9
 800a428:	4865      	ldr	r0, [pc, #404]	@ (800a5c0 <print_telemetry_data+0x2f4>)
 800a42a:	f011 fbd5 	bl	801bbd8 <iprintf>
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);
 800a42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a430:	4618      	mov	r0, r3
 800a432:	f7f6 f899 	bl	8000568 <__aeabi_f2d>
 800a436:	4682      	mov	sl, r0
 800a438:	468b      	mov	fp, r1
 800a43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f6 f893 	bl	8000568 <__aeabi_f2d>
 800a442:	4604      	mov	r4, r0
 800a444:	460d      	mov	r5, r1
 800a446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a448:	4618      	mov	r0, r3
 800a44a:	f7f6 f88d 	bl	8000568 <__aeabi_f2d>
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a454:	4618      	mov	r0, r3
 800a456:	f7f6 f887 	bl	8000568 <__aeabi_f2d>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a462:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a466:	e9cd 4500 	strd	r4, r5, [sp]
 800a46a:	4652      	mov	r2, sl
 800a46c:	465b      	mov	r3, fp
 800a46e:	4855      	ldr	r0, [pc, #340]	@ (800a5c4 <print_telemetry_data+0x2f8>)
 800a470:	f011 fbb2 	bl	801bbd8 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 800a474:	4b50      	ldr	r3, [pc, #320]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a476:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800a47a:	f04f 31ff 	mov.w	r1, #4294967295
 800a47e:	4618      	mov	r0, r3
 800a480:	f00b fc7c 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 800a484:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a488:	f103 0008 	add.w	r0, r3, #8
 800a48c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a490:	1d1a      	adds	r2, r3, #4
 800a492:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800a496:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	4603      	mov	r3, r0
 800a49e:	484a      	ldr	r0, [pc, #296]	@ (800a5c8 <print_telemetry_data+0x2fc>)
 800a4a0:	f7fb f880 	bl	80055a4 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 800a4a4:	4b44      	ldr	r3, [pc, #272]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a4a6:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	f00b f9e2 	bl	8015878 <xQueueGenericSend>
#endif
	//	printf("%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z);
	printf("%.3f;", target_throttle);
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f6 f856 	bl	8000568 <__aeabi_f2d>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4842      	ldr	r0, [pc, #264]	@ (800a5cc <print_telemetry_data+0x300>)
 800a4c2:	f011 fb89 	bl	801bbd8 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 800a4c6:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a4c8:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 800a4cc:	f04f 31ff 	mov.w	r1, #4294967295
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f00b fc53 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 800a4d6:	f04f 0300 	mov.w	r3, #0
 800a4da:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 800a4dc:	f04f 0300 	mov.w	r3, #0
 800a4e0:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 800a4e2:	f04f 0300 	mov.w	r3, #0
 800a4e6:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 800a4e8:	f107 0318 	add.w	r3, r7, #24
 800a4ec:	f107 021c 	add.w	r2, r7, #28
 800a4f0:	f107 0120 	add.w	r1, r7, #32
 800a4f4:	4836      	ldr	r0, [pc, #216]	@ (800a5d0 <print_telemetry_data+0x304>)
 800a4f6:	f7f7 f835 	bl	8001564 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 800a4fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a4fc:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800a500:	2300      	movs	r3, #0
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	f00b f9b7 	bl	8015878 <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 800a50a:	4b2b      	ldr	r3, [pc, #172]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a50c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800a510:	f04f 31ff 	mov.w	r1, #4294967295
 800a514:	4618      	mov	r0, r3
 800a516:	f00b fc31 	bl	8015d7c <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 800a51a:	f04f 0300 	mov.w	r3, #0
 800a51e:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 800a526:	f04f 0300 	mov.w	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 800a52c:	f107 030c 	add.w	r3, r7, #12
 800a530:	f107 0210 	add.w	r2, r7, #16
 800a534:	f107 0114 	add.w	r1, r7, #20
 800a538:	4826      	ldr	r0, [pc, #152]	@ (800a5d4 <print_telemetry_data+0x308>)
 800a53a:	f7fa fd95 	bl	8005068 <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800a53e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b8 <print_telemetry_data+0x2ec>)
 800a540:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800a544:	2300      	movs	r3, #0
 800a546:	2200      	movs	r2, #0
 800a548:	2100      	movs	r1, #0
 800a54a:	f00b f995 	bl	8015878 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", degrees(pid_roll_output), degrees(pid_pitch_output), degrees(pid_yaw_output));
 800a54e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a552:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800a5bc <print_telemetry_data+0x2f0>
 800a556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a55a:	ee17 0a90 	vmov	r0, s15
 800a55e:	f7f6 f803 	bl	8000568 <__aeabi_f2d>
 800a562:	4680      	mov	r8, r0
 800a564:	4689      	mov	r9, r1
 800a566:	edd7 7a04 	vldr	s15, [r7, #16]
 800a56a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a5bc <print_telemetry_data+0x2f0>
 800a56e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a572:	ee17 0a90 	vmov	r0, s15
 800a576:	f7f5 fff7 	bl	8000568 <__aeabi_f2d>
 800a57a:	4604      	mov	r4, r0
 800a57c:	460d      	mov	r5, r1
 800a57e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a582:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a5bc <print_telemetry_data+0x2f0>
 800a586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a58a:	ee17 0a90 	vmov	r0, s15
 800a58e:	f7f5 ffeb 	bl	8000568 <__aeabi_f2d>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a59a:	e9cd 4500 	strd	r4, r5, [sp]
 800a59e:	4642      	mov	r2, r8
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	4807      	ldr	r0, [pc, #28]	@ (800a5c0 <print_telemetry_data+0x2f4>)
 800a5a4:	f011 fb18 	bl	801bbd8 <iprintf>
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)write_h) * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)rc_h)     * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)telem_h)  * sizeof(StackType_t)));


    printf("\n");
 800a5a8:	200a      	movs	r0, #10
 800a5aa:	f011 fb27 	bl	801bbfc <putchar>
    vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 800a5ae:	2032      	movs	r0, #50	@ 0x32
 800a5b0:	f00c f838 	bl	8016624 <vTaskDelay>
    {
 800a5b4:	bf00      	nop
 800a5b6:	e697      	b.n	800a2e8 <print_telemetry_data+0x1c>
 800a5b8:	20001314 	.word	0x20001314
 800a5bc:	42652ee1 	.word	0x42652ee1
 800a5c0:	08021e98 	.word	0x08021e98
 800a5c4:	08021ea8 	.word	0x08021ea8
 800a5c8:	20001604 	.word	0x20001604
 800a5cc:	08021ec0 	.word	0x08021ec0
 800a5d0:	200015d0 	.word	0x200015d0
 800a5d4:	20001458 	.word	0x20001458

0800a5d8 <fp_cli_func>:

#include "fp_cli.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
char fp_cli_read_buffer[128];
static void fp_cli_func(void *arg){
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	size_t read_bytes = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
	//CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
	fp_cli_example_minimal_init();
 800a5e4:	f7f8 fbec 	bl	8002dc0 <fp_cli_example_minimal_init>
	//lwshellr_t lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len);
	for(;;){
		read_bytes = CDC_recv_data(fp_cli_read_buffer, sizeof(fp_cli_read_buffer)-1);
 800a5e8:	217f      	movs	r1, #127	@ 0x7f
 800a5ea:	4807      	ldr	r0, [pc, #28]	@ (800a608 <fp_cli_func+0x30>)
 800a5ec:	f00e f93e 	bl	801886c <CDC_recv_data>
 800a5f0:	60f8      	str	r0, [r7, #12]
		lwshell_input_ex(&lwshell_cli, fp_cli_read_buffer, read_bytes);
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4904      	ldr	r1, [pc, #16]	@ (800a608 <fp_cli_func+0x30>)
 800a5f6:	4805      	ldr	r0, [pc, #20]	@ (800a60c <fp_cli_func+0x34>)
 800a5f8:	f7fb fa48 	bl	8005a8c <lwshell_input_ex>
		vTaskDelay(pdMS_TO_TICKS(100));
 800a5fc:	2064      	movs	r0, #100	@ 0x64
 800a5fe:	f00c f811 	bl	8016624 <vTaskDelay>
		read_bytes = CDC_recv_data(fp_cli_read_buffer, sizeof(fp_cli_read_buffer)-1);
 800a602:	bf00      	nop
 800a604:	e7f0      	b.n	800a5e8 <fp_cli_func+0x10>
 800a606:	bf00      	nop
 800a608:	20004394 	.word	0x20004394
 800a60c:	20000338 	.word	0x20000338

0800a610 <app_init>:
	}

}


void app_init(){
 800a610:	b580      	push	{r7, lr}
 800a612:	b08a      	sub	sp, #40	@ 0x28
 800a614:	af00      	add	r7, sp, #0
    init_imu();
 800a616:	f7ff fa1f 	bl	8009a58 <init_imu>
    flight_control_loop_init(&fcl);
 800a61a:	483a      	ldr	r0, [pc, #232]	@ (800a704 <app_init+0xf4>)
 800a61c:	f7f7 f96e 	bl	80018fc <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 800a620:	4838      	ldr	r0, [pc, #224]	@ (800a704 <app_init+0xf4>)
 800a622:	f7f7 f92c 	bl	800187e <flight_control_loop_disarm_esc>

    float duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 800a626:	eddf 1a38 	vldr	s3, [pc, #224]	@ 800a708 <app_init+0xf8>
 800a62a:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 800a70c <app_init+0xfc>
 800a62e:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800a710 <app_init+0x100>
 800a632:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800a714 <app_init+0x104>
 800a636:	f7ff f825 	bl	8009684 <esc_pwm_throttle_to_duty_cycle>
 800a63a:	ed87 0a08 	vstr	s0, [r7, #32]
 800a63e:	2300      	movs	r3, #0
 800a640:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a642:	f3ef 8310 	mrs	r3, PRIMASK
 800a646:	61bb      	str	r3, [r7, #24]
  return(result);
 800a648:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a64a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a64c:	b672      	cpsid	i
}
 800a64e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a650:	f3bf 8f4f 	dsb	sy
}
 800a654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a656:	f3bf 8f6f 	isb	sy
}
 800a65a:	bf00      	nop
    return old;
 800a65c:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a65e:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d001      	beq.n	800a66a <app_init+0x5a>
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	e000      	b.n	800a66c <app_init+0x5c>
 800a66a:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a66c:	603b      	str	r3, [r7, #0]
 800a66e:	2301      	movs	r3, #1
 800a670:	627b      	str	r3, [r7, #36]	@ 0x24
 800a672:	e029      	b.n	800a6c8 <app_init+0xb8>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800a674:	edd7 0a08 	vldr	s1, [r7, #32]
 800a678:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800a714 <app_init+0x104>
 800a67c:	4b26      	ldr	r3, [pc, #152]	@ (800a718 <app_init+0x108>)
 800a67e:	2200      	movs	r2, #0
 800a680:	4926      	ldr	r1, [pc, #152]	@ (800a71c <app_init+0x10c>)
 800a682:	4827      	ldr	r0, [pc, #156]	@ (800a720 <app_init+0x110>)
 800a684:	f7fe fea8 	bl	80093d8 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800a688:	edd7 0a08 	vldr	s1, [r7, #32]
 800a68c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800a714 <app_init+0x104>
 800a690:	4b21      	ldr	r3, [pc, #132]	@ (800a718 <app_init+0x108>)
 800a692:	2204      	movs	r2, #4
 800a694:	4921      	ldr	r1, [pc, #132]	@ (800a71c <app_init+0x10c>)
 800a696:	4823      	ldr	r0, [pc, #140]	@ (800a724 <app_init+0x114>)
 800a698:	f7fe fe9e 	bl	80093d8 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800a69c:	edd7 0a08 	vldr	s1, [r7, #32]
 800a6a0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800a714 <app_init+0x104>
 800a6a4:	4b1c      	ldr	r3, [pc, #112]	@ (800a718 <app_init+0x108>)
 800a6a6:	2208      	movs	r2, #8
 800a6a8:	491c      	ldr	r1, [pc, #112]	@ (800a71c <app_init+0x10c>)
 800a6aa:	481f      	ldr	r0, [pc, #124]	@ (800a728 <app_init+0x118>)
 800a6ac:	f7fe fe94 	bl	80093d8 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800a6b0:	edd7 0a08 	vldr	s1, [r7, #32]
 800a6b4:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800a714 <app_init+0x104>
 800a6b8:	4b17      	ldr	r3, [pc, #92]	@ (800a718 <app_init+0x108>)
 800a6ba:	220c      	movs	r2, #12
 800a6bc:	4917      	ldr	r1, [pc, #92]	@ (800a71c <app_init+0x10c>)
 800a6be:	481b      	ldr	r0, [pc, #108]	@ (800a72c <app_init+0x11c>)
 800a6c0:	f7fe fe8a 	bl	80093d8 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1d2      	bne.n	800a674 <app_init+0x64>
 800a6ce:	463b      	mov	r3, r7
 800a6d0:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800a6d8:	f3bf 8f5f 	dmb	sy
}
 800a6dc:	bf00      	nop
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f383 8810 	msr	PRIMASK, r3
}
 800a6e8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a6ea:	f3bf 8f4f 	dsb	sy
}
 800a6ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a6f0:	f3bf 8f6f 	isb	sy
}
 800a6f4:	bf00      	nop
}
 800a6f6:	bf00      	nop
}
 800a6f8:	bf00      	nop
	}
}
 800a6fa:	bf00      	nop
 800a6fc:	3728      	adds	r7, #40	@ 0x28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20001314 	.word	0x20001314
 800a708:	00000000 	.word	0x00000000
 800a70c:	44fa0000 	.word	0x44fa0000
 800a710:	447a0000 	.word	0x447a0000
 800a714:	43c80000 	.word	0x43c80000
 800a718:	0501bd00 	.word	0x0501bd00
 800a71c:	200044c0 	.word	0x200044c0
 800a720:	2000172c 	.word	0x2000172c
 800a724:	20001740 	.word	0x20001740
 800a728:	20001754 	.word	0x20001754
 800a72c:	20001768 	.word	0x20001768

0800a730 <app_main_start>:


void app_main_start(void *argument)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b0b4      	sub	sp, #208	@ 0xd0
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	app_init();
 800a738:	f7ff ff6a 	bl	800a610 <app_init>
    //   original 13  -> normal
    //   original 5   -> below normal
    //
    // If you need finer spacing, use osPriorityHigh1..7, osPriorityAboveNormal1..7 (if available).

    flight_attr = (osThreadAttr_t){
 800a73c:	4b81      	ldr	r3, [pc, #516]	@ (800a944 <app_main_start+0x214>)
 800a73e:	4618      	mov	r0, r3
 800a740:	2324      	movs	r3, #36	@ 0x24
 800a742:	461a      	mov	r2, r3
 800a744:	2100      	movs	r1, #0
 800a746:	f011 fc3d 	bl	801bfc4 <memset>
 800a74a:	4b7e      	ldr	r3, [pc, #504]	@ (800a944 <app_main_start+0x214>)
 800a74c:	4a7e      	ldr	r2, [pc, #504]	@ (800a948 <app_main_start+0x218>)
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	4b7c      	ldr	r3, [pc, #496]	@ (800a944 <app_main_start+0x214>)
 800a752:	4a7e      	ldr	r2, [pc, #504]	@ (800a94c <app_main_start+0x21c>)
 800a754:	609a      	str	r2, [r3, #8]
 800a756:	4b7b      	ldr	r3, [pc, #492]	@ (800a944 <app_main_start+0x214>)
 800a758:	22a8      	movs	r2, #168	@ 0xa8
 800a75a:	60da      	str	r2, [r3, #12]
 800a75c:	4b79      	ldr	r3, [pc, #484]	@ (800a944 <app_main_start+0x214>)
 800a75e:	4a7c      	ldr	r2, [pc, #496]	@ (800a950 <app_main_start+0x220>)
 800a760:	611a      	str	r2, [r3, #16]
 800a762:	4b78      	ldr	r3, [pc, #480]	@ (800a944 <app_main_start+0x214>)
 800a764:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a768:	615a      	str	r2, [r3, #20]
 800a76a:	4b76      	ldr	r3, [pc, #472]	@ (800a944 <app_main_start+0x214>)
 800a76c:	2230      	movs	r2, #48	@ 0x30
 800a76e:	619a      	str	r2, [r3, #24]
        .stack_mem  = flight_stack,
        .stack_size = sizeof(flight_stack),
		.cb_mem = &flight_h_taskControlBlock,
		.cb_size = sizeof(flight_h_taskControlBlock)
    };
    flight_h = osThreadNew(flight_controller_main, NULL, &flight_attr);
 800a770:	4a74      	ldr	r2, [pc, #464]	@ (800a944 <app_main_start+0x214>)
 800a772:	2100      	movs	r1, #0
 800a774:	4877      	ldr	r0, [pc, #476]	@ (800a954 <app_main_start+0x224>)
 800a776:	f00a fd71 	bl	801525c <osThreadNew>
 800a77a:	4603      	mov	r3, r0
 800a77c:	4a76      	ldr	r2, [pc, #472]	@ (800a958 <app_main_start+0x228>)
 800a77e:	6013      	str	r3, [r2, #0]
    configASSERT(flight_h != NULL);
 800a780:	4b75      	ldr	r3, [pc, #468]	@ (800a958 <app_main_start+0x228>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10c      	bne.n	800a7a2 <app_main_start+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	e7fd      	b.n	800a79e <app_main_start+0x6e>

    write_attr = (osThreadAttr_t){
 800a7a2:	4b6e      	ldr	r3, [pc, #440]	@ (800a95c <app_main_start+0x22c>)
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	2324      	movs	r3, #36	@ 0x24
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	f011 fc0a 	bl	801bfc4 <memset>
 800a7b0:	4b6a      	ldr	r3, [pc, #424]	@ (800a95c <app_main_start+0x22c>)
 800a7b2:	4a6b      	ldr	r2, [pc, #428]	@ (800a960 <app_main_start+0x230>)
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	4b69      	ldr	r3, [pc, #420]	@ (800a95c <app_main_start+0x22c>)
 800a7b8:	4a6a      	ldr	r2, [pc, #424]	@ (800a964 <app_main_start+0x234>)
 800a7ba:	609a      	str	r2, [r3, #8]
 800a7bc:	4b67      	ldr	r3, [pc, #412]	@ (800a95c <app_main_start+0x22c>)
 800a7be:	22a8      	movs	r2, #168	@ 0xa8
 800a7c0:	60da      	str	r2, [r3, #12]
 800a7c2:	4b66      	ldr	r3, [pc, #408]	@ (800a95c <app_main_start+0x22c>)
 800a7c4:	4a68      	ldr	r2, [pc, #416]	@ (800a968 <app_main_start+0x238>)
 800a7c6:	611a      	str	r2, [r3, #16]
 800a7c8:	4b64      	ldr	r3, [pc, #400]	@ (800a95c <app_main_start+0x22c>)
 800a7ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7ce:	615a      	str	r2, [r3, #20]
 800a7d0:	4b62      	ldr	r3, [pc, #392]	@ (800a95c <app_main_start+0x22c>)
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	619a      	str	r2, [r3, #24]
        .stack_mem  = write_stack,
        .stack_size = sizeof(write_stack),
		.cb_mem = &write_h_taskControlBlock,
		.cb_size = sizeof(write_h_taskControlBlock)
    };
    write_h = osThreadNew(write_motor_main, NULL, &write_attr);
 800a7d6:	4a61      	ldr	r2, [pc, #388]	@ (800a95c <app_main_start+0x22c>)
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4864      	ldr	r0, [pc, #400]	@ (800a96c <app_main_start+0x23c>)
 800a7dc:	f00a fd3e 	bl	801525c <osThreadNew>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4a63      	ldr	r2, [pc, #396]	@ (800a970 <app_main_start+0x240>)
 800a7e4:	6013      	str	r3, [r2, #0]
    configASSERT(write_h != NULL);
 800a7e6:	4b62      	ldr	r3, [pc, #392]	@ (800a970 <app_main_start+0x240>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10c      	bne.n	800a808 <app_main_start+0xd8>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <app_main_start+0xd4>

    rc_attr = (osThreadAttr_t){
 800a808:	4b5a      	ldr	r3, [pc, #360]	@ (800a974 <app_main_start+0x244>)
 800a80a:	4618      	mov	r0, r3
 800a80c:	2324      	movs	r3, #36	@ 0x24
 800a80e:	461a      	mov	r2, r3
 800a810:	2100      	movs	r1, #0
 800a812:	f011 fbd7 	bl	801bfc4 <memset>
 800a816:	4b57      	ldr	r3, [pc, #348]	@ (800a974 <app_main_start+0x244>)
 800a818:	4a57      	ldr	r2, [pc, #348]	@ (800a978 <app_main_start+0x248>)
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	4b55      	ldr	r3, [pc, #340]	@ (800a974 <app_main_start+0x244>)
 800a81e:	4a57      	ldr	r2, [pc, #348]	@ (800a97c <app_main_start+0x24c>)
 800a820:	609a      	str	r2, [r3, #8]
 800a822:	4b54      	ldr	r3, [pc, #336]	@ (800a974 <app_main_start+0x244>)
 800a824:	22a8      	movs	r2, #168	@ 0xa8
 800a826:	60da      	str	r2, [r3, #12]
 800a828:	4b52      	ldr	r3, [pc, #328]	@ (800a974 <app_main_start+0x244>)
 800a82a:	4a55      	ldr	r2, [pc, #340]	@ (800a980 <app_main_start+0x250>)
 800a82c:	611a      	str	r2, [r3, #16]
 800a82e:	4b51      	ldr	r3, [pc, #324]	@ (800a974 <app_main_start+0x244>)
 800a830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a834:	615a      	str	r2, [r3, #20]
 800a836:	4b4f      	ldr	r3, [pc, #316]	@ (800a974 <app_main_start+0x244>)
 800a838:	2218      	movs	r2, #24
 800a83a:	619a      	str	r2, [r3, #24]
        .stack_mem  = rc_stack,
        .stack_size = sizeof(rc_stack),
		.cb_mem = &rc_h_taskControlBlock,
		.cb_size = sizeof(rc_h_taskControlBlock)
    };
    rc_h = osThreadNew(rc_control_main, NULL, &rc_attr);
 800a83c:	4a4d      	ldr	r2, [pc, #308]	@ (800a974 <app_main_start+0x244>)
 800a83e:	2100      	movs	r1, #0
 800a840:	4850      	ldr	r0, [pc, #320]	@ (800a984 <app_main_start+0x254>)
 800a842:	f00a fd0b 	bl	801525c <osThreadNew>
 800a846:	4603      	mov	r3, r0
 800a848:	4a4f      	ldr	r2, [pc, #316]	@ (800a988 <app_main_start+0x258>)
 800a84a:	6013      	str	r3, [r2, #0]
    configASSERT(rc_h != NULL);
 800a84c:	4b4e      	ldr	r3, [pc, #312]	@ (800a988 <app_main_start+0x258>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10c      	bne.n	800a86e <app_main_start+0x13e>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <app_main_start+0x13a>

    telem_attr = (osThreadAttr_t){
 800a86e:	4b47      	ldr	r3, [pc, #284]	@ (800a98c <app_main_start+0x25c>)
 800a870:	4618      	mov	r0, r3
 800a872:	2324      	movs	r3, #36	@ 0x24
 800a874:	461a      	mov	r2, r3
 800a876:	2100      	movs	r1, #0
 800a878:	f011 fba4 	bl	801bfc4 <memset>
 800a87c:	4b43      	ldr	r3, [pc, #268]	@ (800a98c <app_main_start+0x25c>)
 800a87e:	4a44      	ldr	r2, [pc, #272]	@ (800a990 <app_main_start+0x260>)
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	4b42      	ldr	r3, [pc, #264]	@ (800a98c <app_main_start+0x25c>)
 800a884:	4a43      	ldr	r2, [pc, #268]	@ (800a994 <app_main_start+0x264>)
 800a886:	609a      	str	r2, [r3, #8]
 800a888:	4b40      	ldr	r3, [pc, #256]	@ (800a98c <app_main_start+0x25c>)
 800a88a:	22a8      	movs	r2, #168	@ 0xa8
 800a88c:	60da      	str	r2, [r3, #12]
 800a88e:	4b3f      	ldr	r3, [pc, #252]	@ (800a98c <app_main_start+0x25c>)
 800a890:	4a41      	ldr	r2, [pc, #260]	@ (800a998 <app_main_start+0x268>)
 800a892:	611a      	str	r2, [r3, #16]
 800a894:	4b3d      	ldr	r3, [pc, #244]	@ (800a98c <app_main_start+0x25c>)
 800a896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a89a:	615a      	str	r2, [r3, #20]
 800a89c:	4b3b      	ldr	r3, [pc, #236]	@ (800a98c <app_main_start+0x25c>)
 800a89e:	2210      	movs	r2, #16
 800a8a0:	619a      	str	r2, [r3, #24]
        .stack_mem  = telem_stack,
        .stack_size = sizeof(telem_stack),
		.cb_mem = &telem_h_taskControlBlock,
		.cb_size = sizeof(telem_h_taskControlBlock)
    };
    telem_h = osThreadNew(print_telemetry_data, NULL, &telem_attr);
 800a8a2:	4a3a      	ldr	r2, [pc, #232]	@ (800a98c <app_main_start+0x25c>)
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	483d      	ldr	r0, [pc, #244]	@ (800a99c <app_main_start+0x26c>)
 800a8a8:	f00a fcd8 	bl	801525c <osThreadNew>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	4a3c      	ldr	r2, [pc, #240]	@ (800a9a0 <app_main_start+0x270>)
 800a8b0:	6013      	str	r3, [r2, #0]
    configASSERT(telem_h != NULL);
 800a8b2:	4b3b      	ldr	r3, [pc, #236]	@ (800a9a0 <app_main_start+0x270>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10c      	bne.n	800a8d4 <app_main_start+0x1a4>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	e7fd      	b.n	800a8d0 <app_main_start+0x1a0>


    fp_cli_attr = (osThreadAttr_t){
 800a8d4:	4b33      	ldr	r3, [pc, #204]	@ (800a9a4 <app_main_start+0x274>)
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	2324      	movs	r3, #36	@ 0x24
 800a8da:	461a      	mov	r2, r3
 800a8dc:	2100      	movs	r1, #0
 800a8de:	f011 fb71 	bl	801bfc4 <memset>
 800a8e2:	4b30      	ldr	r3, [pc, #192]	@ (800a9a4 <app_main_start+0x274>)
 800a8e4:	4a30      	ldr	r2, [pc, #192]	@ (800a9a8 <app_main_start+0x278>)
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	4b2e      	ldr	r3, [pc, #184]	@ (800a9a4 <app_main_start+0x274>)
 800a8ea:	4a30      	ldr	r2, [pc, #192]	@ (800a9ac <app_main_start+0x27c>)
 800a8ec:	609a      	str	r2, [r3, #8]
 800a8ee:	4b2d      	ldr	r3, [pc, #180]	@ (800a9a4 <app_main_start+0x274>)
 800a8f0:	22a8      	movs	r2, #168	@ 0xa8
 800a8f2:	60da      	str	r2, [r3, #12]
 800a8f4:	4b2b      	ldr	r3, [pc, #172]	@ (800a9a4 <app_main_start+0x274>)
 800a8f6:	4a2e      	ldr	r2, [pc, #184]	@ (800a9b0 <app_main_start+0x280>)
 800a8f8:	611a      	str	r2, [r3, #16]
 800a8fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a4 <app_main_start+0x274>)
 800a8fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a900:	615a      	str	r2, [r3, #20]
 800a902:	4b28      	ldr	r3, [pc, #160]	@ (800a9a4 <app_main_start+0x274>)
 800a904:	2210      	movs	r2, #16
 800a906:	619a      	str	r2, [r3, #24]
        .stack_mem  = fp_cli_stack,
        .stack_size = sizeof(fp_cli_stack),
		.cb_mem = &fp_cli_h_taskControlBlock,
		.cb_size = sizeof(fp_cli_h_taskControlBlock)
    };
    fp_cli_h = osThreadNew(fp_cli_func, NULL, &fp_cli_attr);
 800a908:	4a26      	ldr	r2, [pc, #152]	@ (800a9a4 <app_main_start+0x274>)
 800a90a:	2100      	movs	r1, #0
 800a90c:	4829      	ldr	r0, [pc, #164]	@ (800a9b4 <app_main_start+0x284>)
 800a90e:	f00a fca5 	bl	801525c <osThreadNew>
 800a912:	4603      	mov	r3, r0
 800a914:	4a28      	ldr	r2, [pc, #160]	@ (800a9b8 <app_main_start+0x288>)
 800a916:	6013      	str	r3, [r2, #0]
    configASSERT(fp_cli_h != NULL);
 800a918:	4b27      	ldr	r3, [pc, #156]	@ (800a9b8 <app_main_start+0x288>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10c      	bne.n	800a93a <app_main_start+0x20a>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop
 800a938:	e7fd      	b.n	800a936 <app_main_start+0x206>

}
 800a93a:	bf00      	nop
 800a93c:	37d0      	adds	r7, #208	@ 0xd0
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20003f84 	.word	0x20003f84
 800a948:	08021ec8 	.word	0x08021ec8
 800a94c:	20004038 	.word	0x20004038
 800a950:	20001784 	.word	0x20001784
 800a954:	08009b29 	.word	0x08009b29
 800a958:	20004380 	.word	0x20004380
 800a95c:	20003fa8 	.word	0x20003fa8
 800a960:	08021ee0 	.word	0x08021ee0
 800a964:	200040e0 	.word	0x200040e0
 800a968:	20001f84 	.word	0x20001f84
 800a96c:	08009c91 	.word	0x08009c91
 800a970:	20004384 	.word	0x20004384
 800a974:	20003fcc 	.word	0x20003fcc
 800a978:	08021ef4 	.word	0x08021ef4
 800a97c:	20004188 	.word	0x20004188
 800a980:	20002784 	.word	0x20002784
 800a984:	08009ea5 	.word	0x08009ea5
 800a988:	20004388 	.word	0x20004388
 800a98c:	20003ff0 	.word	0x20003ff0
 800a990:	08021f04 	.word	0x08021f04
 800a994:	20004230 	.word	0x20004230
 800a998:	20002f84 	.word	0x20002f84
 800a99c:	0800a2cd 	.word	0x0800a2cd
 800a9a0:	2000438c 	.word	0x2000438c
 800a9a4:	20004014 	.word	0x20004014
 800a9a8:	08021f1c 	.word	0x08021f1c
 800a9ac:	200042d8 	.word	0x200042d8
 800a9b0:	20003784 	.word	0x20003784
 800a9b4:	0800a5d9 	.word	0x0800a5d9
 800a9b8:	20004390 	.word	0x20004390

0800a9bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a9c0:	4b17      	ldr	r3, [pc, #92]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9c2:	4a18      	ldr	r2, [pc, #96]	@ (800aa24 <MX_SPI1_Init+0x68>)
 800a9c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a9c6:	4b16      	ldr	r3, [pc, #88]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a9cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a9ce:	4b14      	ldr	r3, [pc, #80]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a9d4:	4b12      	ldr	r3, [pc, #72]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a9da:	4b11      	ldr	r3, [pc, #68]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9dc:	2202      	movs	r2, #2
 800a9de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a9fa:	4b09      	ldr	r3, [pc, #36]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa00:	4b07      	ldr	r3, [pc, #28]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800aa06:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800aa08:	220a      	movs	r2, #10
 800aa0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800aa0c:	4804      	ldr	r0, [pc, #16]	@ (800aa20 <MX_SPI1_Init+0x64>)
 800aa0e:	f003 ffbd 	bl	800e98c <HAL_SPI_Init>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800aa18:	f7fe ffd0 	bl	80099bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800aa1c:	bf00      	nop
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	2000441c 	.word	0x2000441c
 800aa24:	40013000 	.word	0x40013000

0800aa28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	@ 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa30:	f107 0314 	add.w	r3, r7, #20
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	609a      	str	r2, [r3, #8]
 800aa3c:	60da      	str	r2, [r3, #12]
 800aa3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a19      	ldr	r2, [pc, #100]	@ (800aaac <HAL_SPI_MspInit+0x84>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d12b      	bne.n	800aaa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	613b      	str	r3, [r7, #16]
 800aa4e:	4b18      	ldr	r3, [pc, #96]	@ (800aab0 <HAL_SPI_MspInit+0x88>)
 800aa50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa52:	4a17      	ldr	r2, [pc, #92]	@ (800aab0 <HAL_SPI_MspInit+0x88>)
 800aa54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aa58:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa5a:	4b15      	ldr	r3, [pc, #84]	@ (800aab0 <HAL_SPI_MspInit+0x88>)
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa62:	613b      	str	r3, [r7, #16]
 800aa64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <HAL_SPI_MspInit+0x88>)
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6e:	4a10      	ldr	r2, [pc, #64]	@ (800aab0 <HAL_SPI_MspInit+0x88>)
 800aa70:	f043 0301 	orr.w	r3, r3, #1
 800aa74:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa76:	4b0e      	ldr	r3, [pc, #56]	@ (800aab0 <HAL_SPI_MspInit+0x88>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800aa82:	23e0      	movs	r3, #224	@ 0xe0
 800aa84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa86:	2302      	movs	r3, #2
 800aa88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800aa92:	2305      	movs	r3, #5
 800aa94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4805      	ldr	r0, [pc, #20]	@ (800aab4 <HAL_SPI_MspInit+0x8c>)
 800aa9e:	f001 fda7 	bl	800c5f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800aaa2:	bf00      	nop
 800aaa4:	3728      	adds	r7, #40	@ 0x28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	40013000 	.word	0x40013000
 800aab0:	40023800 	.word	0x40023800
 800aab4:	40020000 	.word	0x40020000

0800aab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
 800aac2:	4b12      	ldr	r3, [pc, #72]	@ (800ab0c <HAL_MspInit+0x54>)
 800aac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac6:	4a11      	ldr	r2, [pc, #68]	@ (800ab0c <HAL_MspInit+0x54>)
 800aac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aacc:	6453      	str	r3, [r2, #68]	@ 0x44
 800aace:	4b0f      	ldr	r3, [pc, #60]	@ (800ab0c <HAL_MspInit+0x54>)
 800aad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aad6:	607b      	str	r3, [r7, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aada:	2300      	movs	r3, #0
 800aadc:	603b      	str	r3, [r7, #0]
 800aade:	4b0b      	ldr	r3, [pc, #44]	@ (800ab0c <HAL_MspInit+0x54>)
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	4a0a      	ldr	r2, [pc, #40]	@ (800ab0c <HAL_MspInit+0x54>)
 800aae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aae8:	6413      	str	r3, [r2, #64]	@ 0x40
 800aaea:	4b08      	ldr	r3, [pc, #32]	@ (800ab0c <HAL_MspInit+0x54>)
 800aaec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	210f      	movs	r1, #15
 800aafa:	f06f 0001 	mvn.w	r0, #1
 800aafe:	f001 f8df 	bl	800bcc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	40023800 	.word	0x40023800

0800ab10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08c      	sub	sp, #48	@ 0x30
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ab20:	2300      	movs	r3, #0
 800ab22:	60bb      	str	r3, [r7, #8]
 800ab24:	4b2f      	ldr	r3, [pc, #188]	@ (800abe4 <HAL_InitTick+0xd4>)
 800ab26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab28:	4a2e      	ldr	r2, [pc, #184]	@ (800abe4 <HAL_InitTick+0xd4>)
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
 800ab2e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab30:	4b2c      	ldr	r3, [pc, #176]	@ (800abe4 <HAL_InitTick+0xd4>)
 800ab32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	60bb      	str	r3, [r7, #8]
 800ab3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ab3c:	f107 020c 	add.w	r2, r7, #12
 800ab40:	f107 0310 	add.w	r3, r7, #16
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f003 feee 	bl	800e928 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800ab4c:	f003 fed8 	bl	800e900 <HAL_RCC_GetPCLK2Freq>
 800ab50:	4603      	mov	r3, r0
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	4a23      	ldr	r2, [pc, #140]	@ (800abe8 <HAL_InitTick+0xd8>)
 800ab5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5e:	0c9b      	lsrs	r3, r3, #18
 800ab60:	3b01      	subs	r3, #1
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800ab64:	4b21      	ldr	r3, [pc, #132]	@ (800abec <HAL_InitTick+0xdc>)
 800ab66:	4a22      	ldr	r2, [pc, #136]	@ (800abf0 <HAL_InitTick+0xe0>)
 800ab68:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800ab6a:	4b20      	ldr	r3, [pc, #128]	@ (800abec <HAL_InitTick+0xdc>)
 800ab6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800ab70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800ab72:	4a1e      	ldr	r2, [pc, #120]	@ (800abec <HAL_InitTick+0xdc>)
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800ab78:	4b1c      	ldr	r3, [pc, #112]	@ (800abec <HAL_InitTick+0xdc>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab7e:	4b1b      	ldr	r3, [pc, #108]	@ (800abec <HAL_InitTick+0xdc>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab84:	4b19      	ldr	r3, [pc, #100]	@ (800abec <HAL_InitTick+0xdc>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800ab8a:	4818      	ldr	r0, [pc, #96]	@ (800abec <HAL_InitTick+0xdc>)
 800ab8c:	f004 fcd0 	bl	800f530 <HAL_TIM_Base_Init>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800ab96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d11b      	bne.n	800abd6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800ab9e:	4813      	ldr	r0, [pc, #76]	@ (800abec <HAL_InitTick+0xdc>)
 800aba0:	f004 fd7e 	bl	800f6a0 <HAL_TIM_Base_Start_IT>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800abaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d111      	bne.n	800abd6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800abb2:	2019      	movs	r0, #25
 800abb4:	f001 f8a0 	bl	800bcf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b0f      	cmp	r3, #15
 800abbc:	d808      	bhi.n	800abd0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800abbe:	2200      	movs	r2, #0
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	2019      	movs	r0, #25
 800abc4:	f001 f87c 	bl	800bcc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800abc8:	4a0a      	ldr	r2, [pc, #40]	@ (800abf4 <HAL_InitTick+0xe4>)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	e002      	b.n	800abd6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800abd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3730      	adds	r7, #48	@ 0x30
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	40023800 	.word	0x40023800
 800abe8:	431bde83 	.word	0x431bde83
 800abec:	20004474 	.word	0x20004474
 800abf0:	40010000 	.word	0x40010000
 800abf4:	20000058 	.word	0x20000058

0800abf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800abf8:	b480      	push	{r7}
 800abfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800abfc:	bf00      	nop
 800abfe:	e7fd      	b.n	800abfc <NMI_Handler+0x4>

0800ac00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac04:	bf00      	nop
 800ac06:	e7fd      	b.n	800ac04 <HardFault_Handler+0x4>

0800ac08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ac0c:	bf00      	nop
 800ac0e:	e7fd      	b.n	800ac0c <MemManage_Handler+0x4>

0800ac10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <BusFault_Handler+0x4>

0800ac18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac1c:	bf00      	nop
 800ac1e:	e7fd      	b.n	800ac1c <UsageFault_Handler+0x4>

0800ac20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac24:	bf00      	nop
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
	...

0800ac30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ac34:	4802      	ldr	r0, [pc, #8]	@ (800ac40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ac36:	f004 ff23 	bl	800fa80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ac3a:	bf00      	nop
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20004474 	.word	0x20004474

0800ac44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800ac48:	4802      	ldr	r0, [pc, #8]	@ (800ac54 <TIM4_IRQHandler+0x10>)
 800ac4a:	f004 ff19 	bl	800fa80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800ac4e:	bf00      	nop
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20004508 	.word	0x20004508

0800ac58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ac5e:	480e      	ldr	r0, [pc, #56]	@ (800ac98 <USART1_IRQHandler+0x40>)
 800ac60:	f005 fe74 	bl	801094c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800ac64:	4b0c      	ldr	r3, [pc, #48]	@ (800ac98 <USART1_IRQHandler+0x40>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0310 	and.w	r3, r3, #16
 800ac6e:	2b10      	cmp	r3, #16
 800ac70:	d10d      	bne.n	800ac8e <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800ac72:	2300      	movs	r3, #0
 800ac74:	607b      	str	r3, [r7, #4]
 800ac76:	4b08      	ldr	r3, [pc, #32]	@ (800ac98 <USART1_IRQHandler+0x40>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	607b      	str	r3, [r7, #4]
 800ac7e:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <USART1_IRQHandler+0x40>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	607b      	str	r3, [r7, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 800ac88:	4803      	ldr	r0, [pc, #12]	@ (800ac98 <USART1_IRQHandler+0x40>)
 800ac8a:	f000 fc0d 	bl	800b4a8 <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200055f8 	.word	0x200055f8

0800ac9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800aca0:	4802      	ldr	r0, [pc, #8]	@ (800acac <DMA2_Stream2_IRQHandler+0x10>)
 800aca2:	f001 fa3b 	bl	800c11c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800aca6:	bf00      	nop
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20005640 	.word	0x20005640

0800acb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800acb4:	4802      	ldr	r0, [pc, #8]	@ (800acc0 <OTG_FS_IRQHandler+0x10>)
 800acb6:	f002 f890 	bl	800cdda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800acba:	bf00      	nop
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2000bbdc 	.word	0x2000bbdc

0800acc4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800acc8:	4802      	ldr	r0, [pc, #8]	@ (800acd4 <DMA2_Stream7_IRQHandler+0x10>)
 800acca:	f001 fa27 	bl	800c11c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800acce:	bf00      	nop
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	200056a0 	.word	0x200056a0

0800acd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0
  return 1;
 800acdc:	2301      	movs	r3, #1
}
 800acde:	4618      	mov	r0, r3
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <_kill>:

int _kill(int pid, int sig)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800acf2:	f011 fa29 	bl	801c148 <__errno>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2216      	movs	r2, #22
 800acfa:	601a      	str	r2, [r3, #0]
  return -1;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_exit>:

void _exit (int status)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ad10:	f04f 31ff 	mov.w	r1, #4294967295
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff ffe7 	bl	800ace8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <_exit+0x12>

0800ad1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b086      	sub	sp, #24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	e00a      	b.n	800ad46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ad30:	f3af 8000 	nop.w
 800ad34:	4601      	mov	r1, r0
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	60ba      	str	r2, [r7, #8]
 800ad3c:	b2ca      	uxtb	r2, r1
 800ad3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	3301      	adds	r3, #1
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	dbf0      	blt.n	800ad30 <_read+0x12>
  }

  return len;
 800ad4e:	687b      	ldr	r3, [r7, #4]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <_close>:
  }
  return len;
}

int _close(int file)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ad80:	605a      	str	r2, [r3, #4]
  return 0;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <_isatty>:

int _isatty(int file)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ad98:	2301      	movs	r3, #1
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800adc8:	4a14      	ldr	r2, [pc, #80]	@ (800ae1c <_sbrk+0x5c>)
 800adca:	4b15      	ldr	r3, [pc, #84]	@ (800ae20 <_sbrk+0x60>)
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800add4:	4b13      	ldr	r3, [pc, #76]	@ (800ae24 <_sbrk+0x64>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800addc:	4b11      	ldr	r3, [pc, #68]	@ (800ae24 <_sbrk+0x64>)
 800adde:	4a12      	ldr	r2, [pc, #72]	@ (800ae28 <_sbrk+0x68>)
 800ade0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ade2:	4b10      	ldr	r3, [pc, #64]	@ (800ae24 <_sbrk+0x64>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4413      	add	r3, r2
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	429a      	cmp	r2, r3
 800adee:	d207      	bcs.n	800ae00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800adf0:	f011 f9aa 	bl	801c148 <__errno>
 800adf4:	4603      	mov	r3, r0
 800adf6:	220c      	movs	r2, #12
 800adf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800adfa:	f04f 33ff 	mov.w	r3, #4294967295
 800adfe:	e009      	b.n	800ae14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ae00:	4b08      	ldr	r3, [pc, #32]	@ (800ae24 <_sbrk+0x64>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ae06:	4b07      	ldr	r3, [pc, #28]	@ (800ae24 <_sbrk+0x64>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4a05      	ldr	r2, [pc, #20]	@ (800ae24 <_sbrk+0x64>)
 800ae10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ae12:	68fb      	ldr	r3, [r7, #12]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20020000 	.word	0x20020000
 800ae20:	00000400 	.word	0x00000400
 800ae24:	200044bc 	.word	0x200044bc
 800ae28:	2000c430 	.word	0x2000c430

0800ae2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ae30:	4b06      	ldr	r3, [pc, #24]	@ (800ae4c <SystemInit+0x20>)
 800ae32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae36:	4a05      	ldr	r2, [pc, #20]	@ (800ae4c <SystemInit+0x20>)
 800ae38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ae40:	bf00      	nop
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	e000ed00 	.word	0xe000ed00

0800ae50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08e      	sub	sp, #56	@ 0x38
 800ae54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ae56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	605a      	str	r2, [r3, #4]
 800ae60:	609a      	str	r2, [r3, #8]
 800ae62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae64:	f107 0320 	add.w	r3, r7, #32
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae6e:	1d3b      	adds	r3, r7, #4
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	605a      	str	r2, [r3, #4]
 800ae76:	609a      	str	r2, [r3, #8]
 800ae78:	60da      	str	r2, [r3, #12]
 800ae7a:	611a      	str	r2, [r3, #16]
 800ae7c:	615a      	str	r2, [r3, #20]
 800ae7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ae80:	4b3d      	ldr	r3, [pc, #244]	@ (800af78 <MX_TIM2_Init+0x128>)
 800ae82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ae86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ae88:	4b3b      	ldr	r3, [pc, #236]	@ (800af78 <MX_TIM2_Init+0x128>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae8e:	4b3a      	ldr	r3, [pc, #232]	@ (800af78 <MX_TIM2_Init+0x128>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800ae94:	4b38      	ldr	r3, [pc, #224]	@ (800af78 <MX_TIM2_Init+0x128>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae9a:	4b37      	ldr	r3, [pc, #220]	@ (800af78 <MX_TIM2_Init+0x128>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800aea0:	4b35      	ldr	r3, [pc, #212]	@ (800af78 <MX_TIM2_Init+0x128>)
 800aea2:	2280      	movs	r2, #128	@ 0x80
 800aea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aea6:	4834      	ldr	r0, [pc, #208]	@ (800af78 <MX_TIM2_Init+0x128>)
 800aea8:	f004 fb42 	bl	800f530 <HAL_TIM_Base_Init>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800aeb2:	f7fe fd83 	bl	80099bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aeb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aeba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800aebc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800aec0:	4619      	mov	r1, r3
 800aec2:	482d      	ldr	r0, [pc, #180]	@ (800af78 <MX_TIM2_Init+0x128>)
 800aec4:	f004 ff8e 	bl	800fde4 <HAL_TIM_ConfigClockSource>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800aece:	f7fe fd75 	bl	80099bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800aed2:	4829      	ldr	r0, [pc, #164]	@ (800af78 <MX_TIM2_Init+0x128>)
 800aed4:	f004 fc54 	bl	800f780 <HAL_TIM_PWM_Init>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800aede:	f7fe fd6d 	bl	80099bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aee2:	2300      	movs	r3, #0
 800aee4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aeea:	f107 0320 	add.w	r3, r7, #32
 800aeee:	4619      	mov	r1, r3
 800aef0:	4821      	ldr	r0, [pc, #132]	@ (800af78 <MX_TIM2_Init+0x128>)
 800aef2:	f005 fb83 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800aefc:	f7fe fd5e 	bl	80099bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800af00:	2360      	movs	r3, #96	@ 0x60
 800af02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af08:	2300      	movs	r3, #0
 800af0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800af10:	1d3b      	adds	r3, r7, #4
 800af12:	2200      	movs	r2, #0
 800af14:	4619      	mov	r1, r3
 800af16:	4818      	ldr	r0, [pc, #96]	@ (800af78 <MX_TIM2_Init+0x128>)
 800af18:	f004 fea2 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800af22:	f7fe fd4b 	bl	80099bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800af26:	1d3b      	adds	r3, r7, #4
 800af28:	2204      	movs	r2, #4
 800af2a:	4619      	mov	r1, r3
 800af2c:	4812      	ldr	r0, [pc, #72]	@ (800af78 <MX_TIM2_Init+0x128>)
 800af2e:	f004 fe97 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800af38:	f7fe fd40 	bl	80099bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800af3c:	1d3b      	adds	r3, r7, #4
 800af3e:	2208      	movs	r2, #8
 800af40:	4619      	mov	r1, r3
 800af42:	480d      	ldr	r0, [pc, #52]	@ (800af78 <MX_TIM2_Init+0x128>)
 800af44:	f004 fe8c 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800af4e:	f7fe fd35 	bl	80099bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800af52:	1d3b      	adds	r3, r7, #4
 800af54:	220c      	movs	r2, #12
 800af56:	4619      	mov	r1, r3
 800af58:	4807      	ldr	r0, [pc, #28]	@ (800af78 <MX_TIM2_Init+0x128>)
 800af5a:	f004 fe81 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800af64:	f7fe fd2a 	bl	80099bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800af68:	4803      	ldr	r0, [pc, #12]	@ (800af78 <MX_TIM2_Init+0x128>)
 800af6a:	f000 f897 	bl	800b09c <HAL_TIM_MspPostInit>

}
 800af6e:	bf00      	nop
 800af70:	3738      	adds	r7, #56	@ 0x38
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200044c0 	.word	0x200044c0

0800af7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	605a      	str	r2, [r3, #4]
 800af8c:	609a      	str	r2, [r3, #8]
 800af8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af90:	463b      	mov	r3, r7
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800af98:	4b20      	ldr	r3, [pc, #128]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800af9a:	4a21      	ldr	r2, [pc, #132]	@ (800b020 <MX_TIM4_Init+0xa4>)
 800af9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800af9e:	4b1f      	ldr	r3, [pc, #124]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afa0:	2253      	movs	r2, #83	@ 0x53
 800afa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afa4:	4b1d      	ldr	r3, [pc, #116]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800afaa:	4b1c      	ldr	r3, [pc, #112]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800afb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afb2:	4b1a      	ldr	r3, [pc, #104]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afb8:	4b18      	ldr	r3, [pc, #96]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afba:	2200      	movs	r2, #0
 800afbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800afbe:	4817      	ldr	r0, [pc, #92]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afc0:	f004 fab6 	bl	800f530 <HAL_TIM_Base_Init>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800afca:	f7fe fcf7 	bl	80099bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800afd4:	f107 0308 	add.w	r3, r7, #8
 800afd8:	4619      	mov	r1, r3
 800afda:	4810      	ldr	r0, [pc, #64]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800afdc:	f004 ff02 	bl	800fde4 <HAL_TIM_ConfigClockSource>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800afe6:	f7fe fce9 	bl	80099bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afea:	2300      	movs	r3, #0
 800afec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afee:	2300      	movs	r3, #0
 800aff0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800aff2:	463b      	mov	r3, r7
 800aff4:	4619      	mov	r1, r3
 800aff6:	4809      	ldr	r0, [pc, #36]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800aff8:	f005 fb00 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800b002:	f7fe fcdb 	bl	80099bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800b006:	4805      	ldr	r0, [pc, #20]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800b008:	f004 fb4a 	bl	800f6a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 800b00c:	4803      	ldr	r0, [pc, #12]	@ (800b01c <MX_TIM4_Init+0xa0>)
 800b00e:	f004 fadf 	bl	800f5d0 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800b012:	bf00      	nop
 800b014:	3718      	adds	r7, #24
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20004508 	.word	0x20004508
 800b020:	40000800 	.word	0x40000800

0800b024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b034:	d10e      	bne.n	800b054 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b036:	2300      	movs	r3, #0
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	4b16      	ldr	r3, [pc, #88]	@ (800b094 <HAL_TIM_Base_MspInit+0x70>)
 800b03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b03e:	4a15      	ldr	r2, [pc, #84]	@ (800b094 <HAL_TIM_Base_MspInit+0x70>)
 800b040:	f043 0301 	orr.w	r3, r3, #1
 800b044:	6413      	str	r3, [r2, #64]	@ 0x40
 800b046:	4b13      	ldr	r3, [pc, #76]	@ (800b094 <HAL_TIM_Base_MspInit+0x70>)
 800b048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b052:	e01a      	b.n	800b08a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a0f      	ldr	r2, [pc, #60]	@ (800b098 <HAL_TIM_Base_MspInit+0x74>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d115      	bne.n	800b08a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b05e:	2300      	movs	r3, #0
 800b060:	60bb      	str	r3, [r7, #8]
 800b062:	4b0c      	ldr	r3, [pc, #48]	@ (800b094 <HAL_TIM_Base_MspInit+0x70>)
 800b064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b066:	4a0b      	ldr	r2, [pc, #44]	@ (800b094 <HAL_TIM_Base_MspInit+0x70>)
 800b068:	f043 0304 	orr.w	r3, r3, #4
 800b06c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b06e:	4b09      	ldr	r3, [pc, #36]	@ (800b094 <HAL_TIM_Base_MspInit+0x70>)
 800b070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b072:	f003 0304 	and.w	r3, r3, #4
 800b076:	60bb      	str	r3, [r7, #8]
 800b078:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800b07a:	2200      	movs	r2, #0
 800b07c:	2105      	movs	r1, #5
 800b07e:	201e      	movs	r0, #30
 800b080:	f000 fe1e 	bl	800bcc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b084:	201e      	movs	r0, #30
 800b086:	f000 fe37 	bl	800bcf8 <HAL_NVIC_EnableIRQ>
}
 800b08a:	bf00      	nop
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	40023800 	.word	0x40023800
 800b098:	40000800 	.word	0x40000800

0800b09c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08a      	sub	sp, #40	@ 0x28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0a4:	f107 0314 	add.w	r3, r7, #20
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	605a      	str	r2, [r3, #4]
 800b0ae:	609a      	str	r2, [r3, #8]
 800b0b0:	60da      	str	r2, [r3, #12]
 800b0b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0bc:	d13c      	bne.n	800b138 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0be:	2300      	movs	r3, #0
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	4b1f      	ldr	r3, [pc, #124]	@ (800b140 <HAL_TIM_MspPostInit+0xa4>)
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b140 <HAL_TIM_MspPostInit+0xa4>)
 800b0c8:	f043 0301 	orr.w	r3, r3, #1
 800b0cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b140 <HAL_TIM_MspPostInit+0xa4>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	613b      	str	r3, [r7, #16]
 800b0d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	4b18      	ldr	r3, [pc, #96]	@ (800b140 <HAL_TIM_MspPostInit+0xa4>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0e2:	4a17      	ldr	r2, [pc, #92]	@ (800b140 <HAL_TIM_MspPostInit+0xa4>)
 800b0e4:	f043 0302 	orr.w	r3, r3, #2
 800b0e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0ea:	4b15      	ldr	r3, [pc, #84]	@ (800b140 <HAL_TIM_MspPostInit+0xa4>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800b0f6:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b0fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b100:	2300      	movs	r3, #0
 800b102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b104:	2301      	movs	r3, #1
 800b106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b108:	2301      	movs	r3, #1
 800b10a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b10c:	f107 0314 	add.w	r3, r7, #20
 800b110:	4619      	mov	r1, r3
 800b112:	480c      	ldr	r0, [pc, #48]	@ (800b144 <HAL_TIM_MspPostInit+0xa8>)
 800b114:	f001 fa6c 	bl	800c5f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b118:	2308      	movs	r3, #8
 800b11a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11c:	2302      	movs	r3, #2
 800b11e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b124:	2301      	movs	r3, #1
 800b126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b128:	2301      	movs	r3, #1
 800b12a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	4619      	mov	r1, r3
 800b132:	4805      	ldr	r0, [pc, #20]	@ (800b148 <HAL_TIM_MspPostInit+0xac>)
 800b134:	f001 fa5c 	bl	800c5f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b138:	bf00      	nop
 800b13a:	3728      	adds	r7, #40	@ 0x28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	40023800 	.word	0x40023800
 800b144:	40020000 	.word	0x40020000
 800b148:	40020400 	.word	0x40020400

0800b14c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	ring_buffer_init(&usart1_tx_ring_buffer, usart1_tx_buffer, USART1_TX_BUFFER_SIZE);
 800b152:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b156:	4929      	ldr	r1, [pc, #164]	@ (800b1fc <MX_USART1_UART_Init+0xb0>)
 800b158:	4829      	ldr	r0, [pc, #164]	@ (800b200 <MX_USART1_UART_Init+0xb4>)
 800b15a:	f7fd fef7 	bl	8008f4c <ring_buffer_init>
	ring_buffer_init(&usart1_rx_ring_buffer, usart1_rx_buffer, USART1_RX_BUFFER_SIZE);
 800b15e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b162:	4928      	ldr	r1, [pc, #160]	@ (800b204 <MX_USART1_UART_Init+0xb8>)
 800b164:	4828      	ldr	r0, [pc, #160]	@ (800b208 <MX_USART1_UART_Init+0xbc>)
 800b166:	f7fd fef1 	bl	8008f4c <ring_buffer_init>
	usart1_last_tx_size = 0;
 800b16a:	4b28      	ldr	r3, [pc, #160]	@ (800b20c <MX_USART1_UART_Init+0xc0>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 800b170:	4b27      	ldr	r3, [pc, #156]	@ (800b210 <MX_USART1_UART_Init+0xc4>)
 800b172:	2200      	movs	r2, #0
 800b174:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b176:	4b27      	ldr	r3, [pc, #156]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b178:	4a27      	ldr	r2, [pc, #156]	@ (800b218 <MX_USART1_UART_Init+0xcc>)
 800b17a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b17c:	4b25      	ldr	r3, [pc, #148]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b17e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800b182:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b184:	4b23      	ldr	r3, [pc, #140]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b186:	2200      	movs	r2, #0
 800b188:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b18a:	4b22      	ldr	r3, [pc, #136]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b190:	4b20      	ldr	r3, [pc, #128]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b192:	2200      	movs	r2, #0
 800b194:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b196:	4b1f      	ldr	r3, [pc, #124]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b198:	220c      	movs	r2, #12
 800b19a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b19c:	4b1d      	ldr	r3, [pc, #116]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b1a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b1a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b1aa:	481a      	ldr	r0, [pc, #104]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b1ac:	f005 fab6 	bl	801071c <HAL_UART_Init>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800b1b6:	f7fe fc01 	bl	80099bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800b1ba:	4813      	ldr	r0, [pc, #76]	@ (800b208 <MX_USART1_UART_Init+0xbc>)
 800b1bc:	f7fd ff1d 	bl	8008ffa <ring_buffer_linear_free_space>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	80fb      	strh	r3, [r7, #6]
  uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800b1c4:	4810      	ldr	r0, [pc, #64]	@ (800b208 <MX_USART1_UART_Init+0xbc>)
 800b1c6:	f7fd ff5a 	bl	800907e <ring_buffer_write_ptr>
 800b1ca:	6038      	str	r0, [r7, #0]
//   usart1_last_rx_len = rx_buffer_remaining_free;
//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

  HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800b1cc:	2280      	movs	r2, #128	@ 0x80
 800b1ce:	4913      	ldr	r1, [pc, #76]	@ (800b21c <MX_USART1_UART_Init+0xd0>)
 800b1d0:	4810      	ldr	r0, [pc, #64]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b1d2:	f005 fb95 	bl	8010900 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <MX_USART1_UART_Init+0xc4>)
 800b1d8:	2280      	movs	r2, #128	@ 0x80
 800b1da:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800b1dc:	4b10      	ldr	r3, [pc, #64]	@ (800b220 <MX_USART1_UART_Init+0xd4>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b214 <MX_USART1_UART_Init+0xc8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0210 	orr.w	r2, r2, #16
 800b1f0:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20004d50 	.word	0x20004d50
 800b200:	20005550 	.word	0x20005550
 800b204:	20004550 	.word	0x20004550
 800b208:	20005560 	.word	0x20005560
 800b20c:	20005570 	.word	0x20005570
 800b210:	20005572 	.word	0x20005572
 800b214:	200055f8 	.word	0x200055f8
 800b218:	40011000 	.word	0x40011000
 800b21c:	20005574 	.word	0x20005574
 800b220:	200055f4 	.word	0x200055f4

0800b224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	@ 0x28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b22c:	f107 0314 	add.w	r3, r7, #20
 800b230:	2200      	movs	r2, #0
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	605a      	str	r2, [r3, #4]
 800b236:	609a      	str	r2, [r3, #8]
 800b238:	60da      	str	r2, [r3, #12]
 800b23a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a4c      	ldr	r2, [pc, #304]	@ (800b374 <HAL_UART_MspInit+0x150>)
 800b242:	4293      	cmp	r3, r2
 800b244:	f040 8092 	bne.w	800b36c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b248:	2300      	movs	r3, #0
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	4b4a      	ldr	r3, [pc, #296]	@ (800b378 <HAL_UART_MspInit+0x154>)
 800b24e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b250:	4a49      	ldr	r2, [pc, #292]	@ (800b378 <HAL_UART_MspInit+0x154>)
 800b252:	f043 0310 	orr.w	r3, r3, #16
 800b256:	6453      	str	r3, [r2, #68]	@ 0x44
 800b258:	4b47      	ldr	r3, [pc, #284]	@ (800b378 <HAL_UART_MspInit+0x154>)
 800b25a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b25c:	f003 0310 	and.w	r3, r3, #16
 800b260:	613b      	str	r3, [r7, #16]
 800b262:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b264:	2300      	movs	r3, #0
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	4b43      	ldr	r3, [pc, #268]	@ (800b378 <HAL_UART_MspInit+0x154>)
 800b26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26c:	4a42      	ldr	r2, [pc, #264]	@ (800b378 <HAL_UART_MspInit+0x154>)
 800b26e:	f043 0301 	orr.w	r3, r3, #1
 800b272:	6313      	str	r3, [r2, #48]	@ 0x30
 800b274:	4b40      	ldr	r3, [pc, #256]	@ (800b378 <HAL_UART_MspInit+0x154>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	60fb      	str	r3, [r7, #12]
 800b27e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b280:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b286:	2302      	movs	r3, #2
 800b288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b28e:	2303      	movs	r3, #3
 800b290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b292:	2307      	movs	r3, #7
 800b294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b296:	f107 0314 	add.w	r3, r7, #20
 800b29a:	4619      	mov	r1, r3
 800b29c:	4837      	ldr	r0, [pc, #220]	@ (800b37c <HAL_UART_MspInit+0x158>)
 800b29e:	f001 f9a7 	bl	800c5f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b2a2:	4b37      	ldr	r3, [pc, #220]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2a4:	4a37      	ldr	r2, [pc, #220]	@ (800b384 <HAL_UART_MspInit+0x160>)
 800b2a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b2a8:	4b35      	ldr	r3, [pc, #212]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b2ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2b0:	4b33      	ldr	r3, [pc, #204]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2b6:	4b32      	ldr	r3, [pc, #200]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2bc:	4b30      	ldr	r3, [pc, #192]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2c4:	4b2e      	ldr	r3, [pc, #184]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2ca:	4b2d      	ldr	r3, [pc, #180]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800b2d0:	4b2b      	ldr	r3, [pc, #172]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b2d8:	4b29      	ldr	r3, [pc, #164]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b2de:	4b28      	ldr	r3, [pc, #160]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b2e4:	4826      	ldr	r0, [pc, #152]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2e6:	f000 fd23 	bl	800bd30 <HAL_DMA_Init>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800b2f0:	f7fe fb64 	bl	80099bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a22      	ldr	r2, [pc, #136]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b2fa:	4a21      	ldr	r2, [pc, #132]	@ (800b380 <HAL_UART_MspInit+0x15c>)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800b300:	4b21      	ldr	r3, [pc, #132]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b302:	4a22      	ldr	r2, [pc, #136]	@ (800b38c <HAL_UART_MspInit+0x168>)
 800b304:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800b306:	4b20      	ldr	r3, [pc, #128]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b308:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b30c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b30e:	4b1e      	ldr	r3, [pc, #120]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b310:	2240      	movs	r2, #64	@ 0x40
 800b312:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b314:	4b1c      	ldr	r3, [pc, #112]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b316:	2200      	movs	r2, #0
 800b318:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b31a:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b31c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b320:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b322:	4b19      	ldr	r3, [pc, #100]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b324:	2200      	movs	r2, #0
 800b326:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b328:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b32e:	4b16      	ldr	r3, [pc, #88]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b330:	2200      	movs	r2, #0
 800b332:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b334:	4b14      	ldr	r3, [pc, #80]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b336:	2200      	movs	r2, #0
 800b338:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b33a:	4b13      	ldr	r3, [pc, #76]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b340:	4811      	ldr	r0, [pc, #68]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b342:	f000 fcf5 	bl	800bd30 <HAL_DMA_Init>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800b34c:	f7fe fb36 	bl	80099bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a0d      	ldr	r2, [pc, #52]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b354:	639a      	str	r2, [r3, #56]	@ 0x38
 800b356:	4a0c      	ldr	r2, [pc, #48]	@ (800b388 <HAL_UART_MspInit+0x164>)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b35c:	2200      	movs	r2, #0
 800b35e:	2105      	movs	r1, #5
 800b360:	2025      	movs	r0, #37	@ 0x25
 800b362:	f000 fcad 	bl	800bcc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b366:	2025      	movs	r0, #37	@ 0x25
 800b368:	f000 fcc6 	bl	800bcf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b36c:	bf00      	nop
 800b36e:	3728      	adds	r7, #40	@ 0x28
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	40011000 	.word	0x40011000
 800b378:	40023800 	.word	0x40023800
 800b37c:	40020000 	.word	0x40020000
 800b380:	20005640 	.word	0x20005640
 800b384:	40026440 	.word	0x40026440
 800b388:	200056a0 	.word	0x200056a0
 800b38c:	400264b8 	.word	0x400264b8

0800b390 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a15      	ldr	r2, [pc, #84]	@ (800b3f4 <HAL_UART_MspDeInit+0x64>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d123      	bne.n	800b3ea <HAL_UART_MspDeInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800b3a2:	4b15      	ldr	r3, [pc, #84]	@ (800b3f8 <HAL_UART_MspDeInit+0x68>)
 800b3a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3a6:	4a14      	ldr	r2, [pc, #80]	@ (800b3f8 <HAL_UART_MspDeInit+0x68>)
 800b3a8:	f023 0310 	bic.w	r3, r3, #16
 800b3ac:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800b3ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b3b2:	4812      	ldr	r0, [pc, #72]	@ (800b3fc <HAL_UART_MspDeInit+0x6c>)
 800b3b4:	f001 fab8 	bl	800c928 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 fd65 	bl	800be8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fd60 	bl	800be8c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800b3cc:	2025      	movs	r0, #37	@ 0x25
 800b3ce:	f000 fca1 	bl	800bd14 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
	usart1_last_tx_size = 0;
 800b3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b400 <HAL_UART_MspDeInit+0x70>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b404 <HAL_UART_MspDeInit+0x74>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	801a      	strh	r2, [r3, #0]
	ring_buffer_clear(&usart1_tx_ring_buffer);
 800b3de:	480a      	ldr	r0, [pc, #40]	@ (800b408 <HAL_UART_MspDeInit+0x78>)
 800b3e0:	f7fd ff41 	bl	8009266 <ring_buffer_clear>
	ring_buffer_clear(&usart1_rx_ring_buffer);
 800b3e4:	4809      	ldr	r0, [pc, #36]	@ (800b40c <HAL_UART_MspDeInit+0x7c>)
 800b3e6:	f7fd ff3e 	bl	8009266 <ring_buffer_clear>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800b3ea:	bf00      	nop
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	40011000 	.word	0x40011000
 800b3f8:	40023800 	.word	0x40023800
 800b3fc:	40020000 	.word	0x40020000
 800b400:	20005570 	.word	0x20005570
 800b404:	20005572 	.word	0x20005572
 800b408:	20005550 	.word	0x20005550
 800b40c:	20005560 	.word	0x20005560

0800b410 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a19      	ldr	r2, [pc, #100]	@ (800b484 <HAL_UART_TxCpltCallback+0x74>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d12b      	bne.n	800b47a <HAL_UART_TxCpltCallback+0x6a>
    {

    	if(huart1.gState == HAL_UART_STATE_READY)
 800b422:	4b19      	ldr	r3, [pc, #100]	@ (800b488 <HAL_UART_TxCpltCallback+0x78>)
 800b424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	d125      	bne.n	800b47a <HAL_UART_TxCpltCallback+0x6a>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&usart1_tx_ring_buffer, usart1_last_tx_size);
 800b42e:	4b17      	ldr	r3, [pc, #92]	@ (800b48c <HAL_UART_TxCpltCallback+0x7c>)
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	b29b      	uxth	r3, r3
 800b434:	4619      	mov	r1, r3
 800b436:	4816      	ldr	r0, [pc, #88]	@ (800b490 <HAL_UART_TxCpltCallback+0x80>)
 800b438:	f7fd fef5 	bl	8009226 <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800b43c:	4814      	ldr	r0, [pc, #80]	@ (800b490 <HAL_UART_TxCpltCallback+0x80>)
 800b43e:	f7fd fe03 	bl	8009048 <ring_buffer_linear_used_space>
 800b442:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b80      	cmp	r3, #128	@ 0x80
 800b448:	bf28      	it	cs
 800b44a:	2380      	movcs	r3, #128	@ 0x80
 800b44c:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800b44e:	4810      	ldr	r0, [pc, #64]	@ (800b490 <HAL_UART_TxCpltCallback+0x80>)
 800b450:	f7fd fe24 	bl	800909c <ring_buffer_read_ptr>
 800b454:	60f8      	str	r0, [r7, #12]
			usart1_last_tx_size = frame_size;
 800b456:	4a0d      	ldr	r2, [pc, #52]	@ (800b48c <HAL_UART_TxCpltCallback+0x7c>)
 800b458:	8a7b      	ldrh	r3, [r7, #18]
 800b45a:	8013      	strh	r3, [r2, #0]

			if (frame_size > 0)
 800b45c:	8a7b      	ldrh	r3, [r7, #18]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00b      	beq.n	800b47a <HAL_UART_TxCpltCallback+0x6a>
			{
		        if (HAL_UART_Transmit_DMA(huart, next_chunk, frame_size) != HAL_OK) {
 800b462:	8a7b      	ldrh	r3, [r7, #18]
 800b464:	461a      	mov	r2, r3
 800b466:	68f9      	ldr	r1, [r7, #12]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f005 f9d9 	bl	8010820 <HAL_UART_Transmit_DMA>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <HAL_UART_TxCpltCallback+0x6a>
		            usart1_last_tx_size = 0;
 800b474:	4b05      	ldr	r3, [pc, #20]	@ (800b48c <HAL_UART_TxCpltCallback+0x7c>)
 800b476:	2200      	movs	r2, #0
 800b478:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
    }
}
 800b47a:	bf00      	nop
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	40011000 	.word	0x40011000
 800b488:	200055f8 	.word	0x200055f8
 800b48c:	20005570 	.word	0x20005570
 800b490:	20005550 	.word	0x20005550

0800b494 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a26      	ldr	r2, [pc, #152]	@ (800b550 <HAL_UART_IDLECallback+0xa8>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d147      	bne.n	800b54a <HAL_UART_IDLECallback+0xa2>

    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b4c6:	617b      	str	r3, [r7, #20]

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800b4c8:	4b22      	ldr	r3, [pc, #136]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d038      	beq.n	800b548 <HAL_UART_IDLECallback+0xa0>

    if (dma_pos > usart1_dma_last_pos) {
 800b4d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	dd12      	ble.n	800b50a <HAL_UART_IDLECallback+0x62>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 800b4e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	1a9b      	subs	r3, r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 800b4f2:	4b18      	ldr	r3, [pc, #96]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800b4fa:	4b17      	ldr	r3, [pc, #92]	@ (800b558 <HAL_UART_IDLECallback+0xb0>)
 800b4fc:	4413      	add	r3, r2
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4619      	mov	r1, r3
 800b502:	4816      	ldr	r0, [pc, #88]	@ (800b55c <HAL_UART_IDLECallback+0xb4>)
 800b504:	f7fd fdd9 	bl	80090ba <ring_buffer_enqueue_arr>
 800b508:	e019      	b.n	800b53e <HAL_UART_IDLECallback+0x96>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 800b50a:	4b12      	ldr	r3, [pc, #72]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b514:	613b      	str	r3, [r7, #16]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 800b516:	4b0f      	ldr	r3, [pc, #60]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800b51e:	4b0e      	ldr	r3, [pc, #56]	@ (800b558 <HAL_UART_IDLECallback+0xb0>)
 800b520:	4413      	add	r3, r2
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4619      	mov	r1, r3
 800b526:	480d      	ldr	r0, [pc, #52]	@ (800b55c <HAL_UART_IDLECallback+0xb4>)
 800b528:	f7fd fdc7 	bl	80090ba <ring_buffer_enqueue_arr>
        if (dma_pos) {
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <HAL_UART_IDLECallback+0x96>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	461a      	mov	r2, r3
 800b536:	4908      	ldr	r1, [pc, #32]	@ (800b558 <HAL_UART_IDLECallback+0xb0>)
 800b538:	4808      	ldr	r0, [pc, #32]	@ (800b55c <HAL_UART_IDLECallback+0xb4>)
 800b53a:	f7fd fdbe 	bl	80090ba <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	b29a      	uxth	r2, r3
 800b542:	4b04      	ldr	r3, [pc, #16]	@ (800b554 <HAL_UART_IDLECallback+0xac>)
 800b544:	801a      	strh	r2, [r3, #0]
 800b546:	e000      	b.n	800b54a <HAL_UART_IDLECallback+0xa2>
    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800b548:	bf00      	nop
    }
}
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40011000 	.word	0x40011000
 800b554:	200055f4 	.word	0x200055f4
 800b558:	20005574 	.word	0x20005574
 800b55c:	20005560 	.word	0x20005560

0800b560 <usart1_read_dma_buffer>:


void usart1_read_dma_buffer()
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08c      	sub	sp, #48	@ 0x30
 800b564:	af00      	add	r7, sp, #0
 800b566:	2300      	movs	r3, #0
 800b568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b56a:	f3ef 8310 	mrs	r3, PRIMASK
 800b56e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b570:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800b572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b574:	b672      	cpsid	i
}
 800b576:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b578:	f3bf 8f4f 	dsb	sy
}
 800b57c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b57e:	f3bf 8f6f 	isb	sy
}
 800b582:	bf00      	nop
    return old;
 800b584:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800b586:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d001      	beq.n	800b592 <usart1_read_dma_buffer+0x32>
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	e000      	b.n	800b594 <usart1_read_dma_buffer+0x34>
 800b592:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b594:	603b      	str	r3, [r7, #0]
 800b596:	2301      	movs	r3, #1
 800b598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b59a:	e049      	b.n	800b630 <usart1_read_dma_buffer+0xd0>
	{
    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
 800b59c:	4b33      	ldr	r3, [pc, #204]	@ (800b66c <usart1_read_dma_buffer+0x10c>)
 800b59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b5a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800b5aa:	4b31      	ldr	r3, [pc, #196]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d101      	bne.n	800b5bc <usart1_read_dma_buffer+0x5c>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	e03d      	b.n	800b638 <usart1_read_dma_buffer+0xd8>

    if (dma_pos > usart1_dma_last_pos) {
 800b5bc:	4b2c      	ldr	r3, [pc, #176]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	dd12      	ble.n	800b5f0 <usart1_read_dma_buffer+0x90>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 800b5ca:	4b29      	ldr	r3, [pc, #164]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d4:	1a9b      	subs	r3, r3, r2
 800b5d6:	623b      	str	r3, [r7, #32]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 800b5d8:	4b25      	ldr	r3, [pc, #148]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800b5e0:	4b24      	ldr	r3, [pc, #144]	@ (800b674 <usart1_read_dma_buffer+0x114>)
 800b5e2:	4413      	add	r3, r2
 800b5e4:	6a3a      	ldr	r2, [r7, #32]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4823      	ldr	r0, [pc, #140]	@ (800b678 <usart1_read_dma_buffer+0x118>)
 800b5ea:	f7fd fd66 	bl	80090ba <ring_buffer_enqueue_arr>
 800b5ee:	e019      	b.n	800b624 <usart1_read_dma_buffer+0xc4>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 800b5f0:	4b1f      	ldr	r3, [pc, #124]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b5fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 800b5fc:	4b1c      	ldr	r3, [pc, #112]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	b29b      	uxth	r3, r3
 800b602:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800b604:	4b1b      	ldr	r3, [pc, #108]	@ (800b674 <usart1_read_dma_buffer+0x114>)
 800b606:	4413      	add	r3, r2
 800b608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b60a:	4619      	mov	r1, r3
 800b60c:	481a      	ldr	r0, [pc, #104]	@ (800b678 <usart1_read_dma_buffer+0x118>)
 800b60e:	f7fd fd54 	bl	80090ba <ring_buffer_enqueue_arr>
        if (dma_pos) {
 800b612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d005      	beq.n	800b624 <usart1_read_dma_buffer+0xc4>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800b618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61a:	461a      	mov	r2, r3
 800b61c:	4915      	ldr	r1, [pc, #84]	@ (800b674 <usart1_read_dma_buffer+0x114>)
 800b61e:	4816      	ldr	r0, [pc, #88]	@ (800b678 <usart1_read_dma_buffer+0x118>)
 800b620:	f7fd fd4b 	bl	80090ba <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	b29a      	uxth	r2, r3
 800b628:	4b11      	ldr	r3, [pc, #68]	@ (800b670 <usart1_read_dma_buffer+0x110>)
 800b62a:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b62c:	2300      	movs	r3, #0
 800b62e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1b2      	bne.n	800b59c <usart1_read_dma_buffer+0x3c>
 800b636:	2301      	movs	r3, #1
 800b638:	463a      	mov	r2, r7
 800b63a:	60fa      	str	r2, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	6812      	ldr	r2, [r2, #0]
 800b640:	60ba      	str	r2, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800b642:	f3bf 8f5f 	dmb	sy
}
 800b646:	bf00      	nop
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	f382 8810 	msr	PRIMASK, r2
}
 800b652:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b654:	f3bf 8f4f 	dsb	sy
}
 800b658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b65a:	f3bf 8f6f 	isb	sy
}
 800b65e:	bf00      	nop
}
 800b660:	bf00      	nop
}
 800b662:	bf00      	nop
 800b664:	2b01      	cmp	r3, #1
	}
}
 800b666:	3730      	adds	r7, #48	@ 0x30
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	200055f8 	.word	0x200055f8
 800b670:	200055f4 	.word	0x200055f4
 800b674:	20005574 	.word	0x20005574
 800b678:	20005560 	.word	0x20005560

0800b67c <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a04      	ldr	r2, [pc, #16]	@ (800b69c <HAL_UART_ErrorCallback+0x20>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d101      	bne.n	800b692 <HAL_UART_ErrorCallback+0x16>
    {
        // Handle TX/RX recovery here
        //usart1_recover();
        usart1_restart();
 800b68e:	f000 f877 	bl	800b780 <usart1_restart>
    }
}
 800b692:	bf00      	nop
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	40011000 	.word	0x40011000

0800b6a0 <usart1_start_tx_if_idle>:


void usart1_start_tx_if_idle(int force_state)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08e      	sub	sp, #56	@ 0x38
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b0:	623b      	str	r3, [r7, #32]
  return(result);
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800b6b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6b6:	b672      	cpsid	i
}
 800b6b8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b6ba:	f3bf 8f4f 	dsb	sy
}
 800b6be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b6c0:	f3bf 8f6f 	isb	sy
}
 800b6c4:	bf00      	nop
    return old;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800b6c8:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d001      	beq.n	800b6d4 <usart1_start_tx_if_idle+0x34>
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	e000      	b.n	800b6d6 <usart1_start_tx_if_idle+0x36>
 800b6d4:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	2301      	movs	r3, #1
 800b6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6dc:	e02c      	b.n	800b738 <usart1_start_tx_if_idle+0x98>
	{
		if (((huart1.gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&usart1_tx_ring_buffer) > 0)
 800b6de:	4b25      	ldr	r3, [pc, #148]	@ (800b774 <usart1_start_tx_if_idle+0xd4>)
 800b6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d002      	beq.n	800b6f0 <usart1_start_tx_if_idle+0x50>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d021      	beq.n	800b734 <usart1_start_tx_if_idle+0x94>
 800b6f0:	4821      	ldr	r0, [pc, #132]	@ (800b778 <usart1_start_tx_if_idle+0xd8>)
 800b6f2:	f7fd fc69 	bl	8008fc8 <ring_buffer_used_space>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01b      	beq.n	800b734 <usart1_start_tx_if_idle+0x94>
		{

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800b6fc:	481e      	ldr	r0, [pc, #120]	@ (800b778 <usart1_start_tx_if_idle+0xd8>)
 800b6fe:	f7fd fca3 	bl	8009048 <ring_buffer_linear_used_space>
 800b702:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800b704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b706:	2b80      	cmp	r3, #128	@ 0x80
 800b708:	bf28      	it	cs
 800b70a:	2380      	movcs	r3, #128	@ 0x80
 800b70c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800b70e:	481a      	ldr	r0, [pc, #104]	@ (800b778 <usart1_start_tx_if_idle+0xd8>)
 800b710:	f7fd fcc4 	bl	800909c <ring_buffer_read_ptr>
 800b714:	62b8      	str	r0, [r7, #40]	@ 0x28

			usart1_last_tx_size = frame_size;
 800b716:	4a19      	ldr	r2, [pc, #100]	@ (800b77c <usart1_start_tx_if_idle+0xdc>)
 800b718:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b71a:	8013      	strh	r3, [r2, #0]

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(&huart1, data, frame_size) != HAL_OK) {
 800b71c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b71e:	461a      	mov	r2, r3
 800b720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b722:	4814      	ldr	r0, [pc, #80]	@ (800b774 <usart1_start_tx_if_idle+0xd4>)
 800b724:	f005 f87c 	bl	8010820 <HAL_UART_Transmit_DMA>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <usart1_start_tx_if_idle+0x94>
				//ENTER_CRITICAL();
				usart1_last_tx_size = 0;
 800b72e:	4b13      	ldr	r3, [pc, #76]	@ (800b77c <usart1_start_tx_if_idle+0xdc>)
 800b730:	2200      	movs	r2, #0
 800b732:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b734:	2300      	movs	r3, #0
 800b736:	637b      	str	r3, [r7, #52]	@ 0x34
 800b738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1cf      	bne.n	800b6de <usart1_start_tx_if_idle+0x3e>
 800b73e:	f107 0308 	add.w	r3, r7, #8
 800b742:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800b74a:	f3bf 8f5f 	dmb	sy
}
 800b74e:	bf00      	nop
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f383 8810 	msr	PRIMASK, r3
}
 800b75a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b75c:	f3bf 8f4f 	dsb	sy
}
 800b760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b762:	f3bf 8f6f 	isb	sy
}
 800b766:	bf00      	nop
}
 800b768:	bf00      	nop
}
 800b76a:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800b76c:	bf00      	nop
 800b76e:	3738      	adds	r7, #56	@ 0x38
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200055f8 	.word	0x200055f8
 800b778:	20005550 	.word	0x20005550
 800b77c:	20005570 	.word	0x20005570

0800b780 <usart1_restart>:
  usart1_dma_last_pos = 0;
}


void usart1_restart(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
    // 1. Deinit UART (also unlinks DMA internally)
    HAL_UART_DeInit(&huart1);
 800b786:	481b      	ldr	r0, [pc, #108]	@ (800b7f4 <usart1_restart+0x74>)
 800b788:	f005 f818 	bl	80107bc <HAL_UART_DeInit>

    // 2. Deinit DMA streams manually
    HAL_DMA_DeInit(huart1.hdmarx);
 800b78c:	4b19      	ldr	r3, [pc, #100]	@ (800b7f4 <usart1_restart+0x74>)
 800b78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b790:	4618      	mov	r0, r3
 800b792:	f000 fb7b 	bl	800be8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart1.hdmatx);
 800b796:	4b17      	ldr	r3, [pc, #92]	@ (800b7f4 <usart1_restart+0x74>)
 800b798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fb76 	bl	800be8c <HAL_DMA_DeInit>

    // 3. Reset USART1 peripheral
    __HAL_RCC_USART1_FORCE_RESET();
 800b7a0:	4b15      	ldr	r3, [pc, #84]	@ (800b7f8 <usart1_restart+0x78>)
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a4:	4a14      	ldr	r2, [pc, #80]	@ (800b7f8 <usart1_restart+0x78>)
 800b7a6:	f043 0310 	orr.w	r3, r3, #16
 800b7aa:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_USART1_RELEASE_RESET();
 800b7ac:	4b12      	ldr	r3, [pc, #72]	@ (800b7f8 <usart1_restart+0x78>)
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b0:	4a11      	ldr	r2, [pc, #68]	@ (800b7f8 <usart1_restart+0x78>)
 800b7b2:	f023 0310 	bic.w	r3, r3, #16
 800b7b6:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. Reinit USART1 and DMA
    MX_USART1_UART_Init();  // Reinitializes UART and links DMA
 800b7b8:	f7ff fcc8 	bl	800b14c <MX_USART1_UART_Init>
    //MX_DMA_Init();          // Only needed if you have a custom DMA init function

    // 5. Restart RX DMA if needed
    uint16_t space = ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800b7bc:	480f      	ldr	r0, [pc, #60]	@ (800b7fc <usart1_restart+0x7c>)
 800b7be:	f7fd fc1c 	bl	8008ffa <ring_buffer_linear_free_space>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	80fb      	strh	r3, [r7, #6]
    uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800b7c6:	480d      	ldr	r0, [pc, #52]	@ (800b7fc <usart1_restart+0x7c>)
 800b7c8:	f7fd fc59 	bl	800907e <ring_buffer_write_ptr>
 800b7cc:	6038      	str	r0, [r7, #0]
    // usart1_last_rx_len = space;
    // HAL_UART_Receive_DMA(&huart1, write_ptr, space);

      HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800b7ce:	2280      	movs	r2, #128	@ 0x80
 800b7d0:	490b      	ldr	r1, [pc, #44]	@ (800b800 <usart1_restart+0x80>)
 800b7d2:	4808      	ldr	r0, [pc, #32]	@ (800b7f4 <usart1_restart+0x74>)
 800b7d4:	f005 f894 	bl	8010900 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b804 <usart1_restart+0x84>)
 800b7da:	2280      	movs	r2, #128	@ 0x80
 800b7dc:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800b7de:	4b0a      	ldr	r3, [pc, #40]	@ (800b808 <usart1_restart+0x88>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	801a      	strh	r2, [r3, #0]

    usart1_start_tx_if_idle(1);
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	f7ff ff5b 	bl	800b6a0 <usart1_start_tx_if_idle>
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200055f8 	.word	0x200055f8
 800b7f8:	40023800 	.word	0x40023800
 800b7fc:	20005560 	.word	0x20005560
 800b800:	20005574 	.word	0x20005574
 800b804:	20005572 	.word	0x20005572
 800b808:	200055f4 	.word	0x200055f4

0800b80c <usart1_send_data>:




size_t usart1_send_data(char* data, size_t len)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08c      	sub	sp, #48	@ 0x30
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <usart1_send_data+0x16>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <usart1_send_data+0x1a>
        return 0;
 800b822:	2300      	movs	r3, #0
 800b824:	e040      	b.n	800b8a8 <usart1_send_data+0x9c>
 800b826:	2300      	movs	r3, #0
 800b828:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b82a:	f3ef 8310 	mrs	r3, PRIMASK
 800b82e:	623b      	str	r3, [r7, #32]
  return(result);
 800b830:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800b832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b834:	b672      	cpsid	i
}
 800b836:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b838:	f3bf 8f4f 	dsb	sy
}
 800b83c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b83e:	f3bf 8f6f 	isb	sy
}
 800b842:	bf00      	nop
    return old;
 800b844:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800b846:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d001      	beq.n	800b852 <usart1_send_data+0x46>
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	e000      	b.n	800b854 <usart1_send_data+0x48>
 800b852:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b854:	60bb      	str	r3, [r7, #8]
 800b856:	2301      	movs	r3, #1
 800b858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b85a:	e007      	b.n	800b86c <usart1_send_data+0x60>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&usart1_tx_ring_buffer, (uint8_t*)data, len);
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	4813      	ldr	r0, [pc, #76]	@ (800b8b0 <usart1_send_data+0xa4>)
 800b862:	f7fd fc2a 	bl	80090ba <ring_buffer_enqueue_arr>
 800b866:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b868:	2300      	movs	r3, #0
 800b86a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1f4      	bne.n	800b85c <usart1_send_data+0x50>
 800b872:	f107 0308 	add.w	r3, r7, #8
 800b876:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800b87e:	f3bf 8f5f 	dmb	sy
}
 800b882:	bf00      	nop
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f383 8810 	msr	PRIMASK, r3
}
 800b88e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b890:	f3bf 8f4f 	dsb	sy
}
 800b894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b896:	f3bf 8f6f 	isb	sy
}
 800b89a:	bf00      	nop
}
 800b89c:	bf00      	nop
}
 800b89e:	bf00      	nop
    }

    usart1_start_tx_if_idle(0);
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f7ff fefd 	bl	800b6a0 <usart1_start_tx_if_idle>

    return bytes_written;
 800b8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3730      	adds	r7, #48	@ 0x30
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20005550 	.word	0x20005550

0800b8b4 <usart1_recv_data>:

size_t usart1_recv_data(char* out_buf, size_t max_len)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08c      	sub	sp, #48	@ 0x30
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <usart1_recv_data+0x16>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <usart1_recv_data+0x1a>
        return 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	e03f      	b.n	800b94e <usart1_recv_data+0x9a>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b8d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d6:	623b      	str	r3, [r7, #32]
  return(result);
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800b8da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8dc:	b672      	cpsid	i
}
 800b8de:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b8e0:	f3bf 8f4f 	dsb	sy
}
 800b8e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b8e6:	f3bf 8f6f 	isb	sy
}
 800b8ea:	bf00      	nop
    return old;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800b8ee:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d001      	beq.n	800b8fa <usart1_recv_data+0x46>
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	e000      	b.n	800b8fc <usart1_recv_data+0x48>
 800b8fa:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b8fc:	60bb      	str	r3, [r7, #8]
 800b8fe:	2301      	movs	r3, #1
 800b900:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b902:	e009      	b.n	800b918 <usart1_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 800b904:	f7ff fe2c 	bl	800b560 <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&usart1_rx_ring_buffer, (uint8_t*)out_buf, max_len);
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	4812      	ldr	r0, [pc, #72]	@ (800b958 <usart1_recv_data+0xa4>)
 800b90e:	f7fd fc2e 	bl	800916e <ring_buffer_dequeue_arr>
 800b912:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b914:	2300      	movs	r3, #0
 800b916:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f2      	bne.n	800b904 <usart1_recv_data+0x50>
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800b92a:	f3bf 8f5f 	dmb	sy
}
 800b92e:	bf00      	nop
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f383 8810 	msr	PRIMASK, r3
}
 800b93a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b93c:	f3bf 8f4f 	dsb	sy
}
 800b940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b942:	f3bf 8f6f 	isb	sy
}
 800b946:	bf00      	nop
}
 800b948:	bf00      	nop
}
 800b94a:	bf00      	nop
    }

    return bytes_read;
 800b94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3730      	adds	r7, #48	@ 0x30
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20005560 	.word	0x20005560

0800b95c <usart1_data_available_for_read>:

size_t usart1_data_available_for_read()
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08a      	sub	sp, #40	@ 0x28
 800b960:	af00      	add	r7, sp, #0
 800b962:	2300      	movs	r3, #0
 800b964:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b966:	f3ef 8310 	mrs	r3, PRIMASK
 800b96a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b96c:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800b96e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b970:	b672      	cpsid	i
}
 800b972:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b974:	f3bf 8f4f 	dsb	sy
}
 800b978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b97a:	f3bf 8f6f 	isb	sy
}
 800b97e:	bf00      	nop
    return old;
 800b980:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800b982:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d001      	beq.n	800b98e <usart1_data_available_for_read+0x32>
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	e000      	b.n	800b990 <usart1_data_available_for_read+0x34>
 800b98e:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b990:	603b      	str	r3, [r7, #0]
 800b992:	2301      	movs	r3, #1
 800b994:	623b      	str	r3, [r7, #32]
 800b996:	e007      	b.n	800b9a8 <usart1_data_available_for_read+0x4c>
    {
        usart1_read_dma_buffer();
 800b998:	f7ff fde2 	bl	800b560 <usart1_read_dma_buffer>
    	used = ring_buffer_used_space(&usart1_rx_ring_buffer);
 800b99c:	4811      	ldr	r0, [pc, #68]	@ (800b9e4 <usart1_data_available_for_read+0x88>)
 800b99e:	f7fd fb13 	bl	8008fc8 <ring_buffer_used_space>
 800b9a2:	6278      	str	r0, [r7, #36]	@ 0x24
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	623b      	str	r3, [r7, #32]
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1f4      	bne.n	800b998 <usart1_data_available_for_read+0x3c>
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800b9b8:	f3bf 8f5f 	dmb	sy
}
 800b9bc:	bf00      	nop
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f383 8810 	msr	PRIMASK, r3
}
 800b9c8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b9ca:	f3bf 8f4f 	dsb	sy
}
 800b9ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b9d0:	f3bf 8f6f 	isb	sy
}
 800b9d4:	bf00      	nop
}
 800b9d6:	bf00      	nop
}
 800b9d8:	bf00      	nop
    }

    return used;
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3728      	adds	r7, #40	@ 0x28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20005560 	.word	0x20005560

0800b9e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b9e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ba20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800b9ec:	f7ff fa1e 	bl	800ae2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b9f0:	480c      	ldr	r0, [pc, #48]	@ (800ba24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b9f2:	490d      	ldr	r1, [pc, #52]	@ (800ba28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800ba2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b9f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b9f8:	e002      	b.n	800ba00 <LoopCopyDataInit>

0800b9fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b9fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b9fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b9fe:	3304      	adds	r3, #4

0800ba00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ba00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ba02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ba04:	d3f9      	bcc.n	800b9fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ba06:	4a0a      	ldr	r2, [pc, #40]	@ (800ba30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ba08:	4c0a      	ldr	r4, [pc, #40]	@ (800ba34 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ba0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ba0c:	e001      	b.n	800ba12 <LoopFillZerobss>

0800ba0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ba0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ba10:	3204      	adds	r2, #4

0800ba12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ba12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ba14:	d3fb      	bcc.n	800ba0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800ba16:	f010 fb9d 	bl	801c154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba1a:	f7fd ff35 	bl	8009888 <main>
  bx  lr    
 800ba1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ba20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ba24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ba28:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800ba2c:	080228dc 	.word	0x080228dc
  ldr r2, =_sbss
 800ba30:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800ba34:	2000c42c 	.word	0x2000c42c

0800ba38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ba38:	e7fe      	b.n	800ba38 <ADC_IRQHandler>
	...

0800ba3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ba40:	4b0e      	ldr	r3, [pc, #56]	@ (800ba7c <HAL_Init+0x40>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a0d      	ldr	r2, [pc, #52]	@ (800ba7c <HAL_Init+0x40>)
 800ba46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ba4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba7c <HAL_Init+0x40>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a0a      	ldr	r2, [pc, #40]	@ (800ba7c <HAL_Init+0x40>)
 800ba52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ba56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ba58:	4b08      	ldr	r3, [pc, #32]	@ (800ba7c <HAL_Init+0x40>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a07      	ldr	r2, [pc, #28]	@ (800ba7c <HAL_Init+0x40>)
 800ba5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ba64:	2003      	movs	r0, #3
 800ba66:	f000 f920 	bl	800bcaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ba6a:	200f      	movs	r0, #15
 800ba6c:	f7ff f850 	bl	800ab10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ba70:	f7ff f822 	bl	800aab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	40023c00 	.word	0x40023c00

0800ba80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ba84:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <HAL_IncTick+0x20>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	4b06      	ldr	r3, [pc, #24]	@ (800baa4 <HAL_IncTick+0x24>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4413      	add	r3, r2
 800ba90:	4a04      	ldr	r2, [pc, #16]	@ (800baa4 <HAL_IncTick+0x24>)
 800ba92:	6013      	str	r3, [r2, #0]
}
 800ba94:	bf00      	nop
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	2000005c 	.word	0x2000005c
 800baa4:	20005700 	.word	0x20005700

0800baa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800baa8:	b480      	push	{r7}
 800baaa:	af00      	add	r7, sp, #0
  return uwTick;
 800baac:	4b03      	ldr	r3, [pc, #12]	@ (800babc <HAL_GetTick+0x14>)
 800baae:	681b      	ldr	r3, [r3, #0]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	20005700 	.word	0x20005700

0800bac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bac8:	f7ff ffee 	bl	800baa8 <HAL_GetTick>
 800bacc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad8:	d005      	beq.n	800bae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bada:	4b0a      	ldr	r3, [pc, #40]	@ (800bb04 <HAL_Delay+0x44>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4413      	add	r3, r2
 800bae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bae6:	bf00      	nop
 800bae8:	f7ff ffde 	bl	800baa8 <HAL_GetTick>
 800baec:	4602      	mov	r2, r0
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d8f7      	bhi.n	800bae8 <HAL_Delay+0x28>
  {
  }
}
 800baf8:	bf00      	nop
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	2000005c 	.word	0x2000005c

0800bb08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bb18:	4b0c      	ldr	r3, [pc, #48]	@ (800bb4c <__NVIC_SetPriorityGrouping+0x44>)
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bb24:	4013      	ands	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bb30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bb34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bb3a:	4a04      	ldr	r2, [pc, #16]	@ (800bb4c <__NVIC_SetPriorityGrouping+0x44>)
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	60d3      	str	r3, [r2, #12]
}
 800bb40:	bf00      	nop
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	e000ed00 	.word	0xe000ed00

0800bb50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bb50:	b480      	push	{r7}
 800bb52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bb54:	4b04      	ldr	r3, [pc, #16]	@ (800bb68 <__NVIC_GetPriorityGrouping+0x18>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	0a1b      	lsrs	r3, r3, #8
 800bb5a:	f003 0307 	and.w	r3, r3, #7
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	e000ed00 	.word	0xe000ed00

0800bb6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	db0b      	blt.n	800bb96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	f003 021f 	and.w	r2, r3, #31
 800bb84:	4907      	ldr	r1, [pc, #28]	@ (800bba4 <__NVIC_EnableIRQ+0x38>)
 800bb86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb8a:	095b      	lsrs	r3, r3, #5
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	fa00 f202 	lsl.w	r2, r0, r2
 800bb92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bb96:	bf00      	nop
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	e000e100 	.word	0xe000e100

0800bba8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	db12      	blt.n	800bbe0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	f003 021f 	and.w	r2, r3, #31
 800bbc0:	490a      	ldr	r1, [pc, #40]	@ (800bbec <__NVIC_DisableIRQ+0x44>)
 800bbc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbc6:	095b      	lsrs	r3, r3, #5
 800bbc8:	2001      	movs	r0, #1
 800bbca:	fa00 f202 	lsl.w	r2, r0, r2
 800bbce:	3320      	adds	r3, #32
 800bbd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bbd4:	f3bf 8f4f 	dsb	sy
}
 800bbd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bbda:	f3bf 8f6f 	isb	sy
}
 800bbde:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	e000e100 	.word	0xe000e100

0800bbf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	6039      	str	r1, [r7, #0]
 800bbfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	db0a      	blt.n	800bc1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	490c      	ldr	r1, [pc, #48]	@ (800bc3c <__NVIC_SetPriority+0x4c>)
 800bc0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc0e:	0112      	lsls	r2, r2, #4
 800bc10:	b2d2      	uxtb	r2, r2
 800bc12:	440b      	add	r3, r1
 800bc14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bc18:	e00a      	b.n	800bc30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	4908      	ldr	r1, [pc, #32]	@ (800bc40 <__NVIC_SetPriority+0x50>)
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	3b04      	subs	r3, #4
 800bc28:	0112      	lsls	r2, r2, #4
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	761a      	strb	r2, [r3, #24]
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	e000e100 	.word	0xe000e100
 800bc40:	e000ed00 	.word	0xe000ed00

0800bc44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b089      	sub	sp, #36	@ 0x24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f003 0307 	and.w	r3, r3, #7
 800bc56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	f1c3 0307 	rsb	r3, r3, #7
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	bf28      	it	cs
 800bc62:	2304      	movcs	r3, #4
 800bc64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	2b06      	cmp	r3, #6
 800bc6c:	d902      	bls.n	800bc74 <NVIC_EncodePriority+0x30>
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	3b03      	subs	r3, #3
 800bc72:	e000      	b.n	800bc76 <NVIC_EncodePriority+0x32>
 800bc74:	2300      	movs	r3, #0
 800bc76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc78:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc82:	43da      	mvns	r2, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	401a      	ands	r2, r3
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bc8c:	f04f 31ff 	mov.w	r1, #4294967295
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	fa01 f303 	lsl.w	r3, r1, r3
 800bc96:	43d9      	mvns	r1, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc9c:	4313      	orrs	r3, r2
         );
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3724      	adds	r7, #36	@ 0x24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff ff28 	bl	800bb08 <__NVIC_SetPriorityGrouping>
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bcd2:	f7ff ff3d 	bl	800bb50 <__NVIC_GetPriorityGrouping>
 800bcd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6978      	ldr	r0, [r7, #20]
 800bcde:	f7ff ffb1 	bl	800bc44 <NVIC_EncodePriority>
 800bce2:	4602      	mov	r2, r0
 800bce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bce8:	4611      	mov	r1, r2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff ff80 	bl	800bbf0 <__NVIC_SetPriority>
}
 800bcf0:	bf00      	nop
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff ff30 	bl	800bb6c <__NVIC_EnableIRQ>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bd1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7ff ff40 	bl	800bba8 <__NVIC_DisableIRQ>
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bd3c:	f7ff feb4 	bl	800baa8 <HAL_GetTick>
 800bd40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e099      	b.n	800be80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f022 0201 	bic.w	r2, r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bd6c:	e00f      	b.n	800bd8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bd6e:	f7ff fe9b 	bl	800baa8 <HAL_GetTick>
 800bd72:	4602      	mov	r2, r0
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	2b05      	cmp	r3, #5
 800bd7a:	d908      	bls.n	800bd8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2203      	movs	r2, #3
 800bd86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e078      	b.n	800be80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e8      	bne.n	800bd6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	4b38      	ldr	r3, [pc, #224]	@ (800be88 <HAL_DMA_Init+0x158>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bdba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bdd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a1b      	ldr	r3, [r3, #32]
 800bdd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde4:	2b04      	cmp	r3, #4
 800bde6:	d107      	bne.n	800bdf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	697a      	ldr	r2, [r7, #20]
 800bdfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f023 0307 	bic.w	r3, r3, #7
 800be0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	4313      	orrs	r3, r2
 800be18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d117      	bne.n	800be52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	4313      	orrs	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00e      	beq.n	800be52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fb5f 	bl	800c4f8 <DMA_CheckFifoParam>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d008      	beq.n	800be52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2240      	movs	r2, #64	@ 0x40
 800be44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800be4e:	2301      	movs	r3, #1
 800be50:	e016      	b.n	800be80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fb16 	bl	800c48c <DMA_CalcBaseAndBitshift>
 800be60:	4603      	mov	r3, r0
 800be62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be68:	223f      	movs	r2, #63	@ 0x3f
 800be6a:	409a      	lsls	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	f010803f 	.word	0xf010803f

0800be8c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e050      	b.n	800bf40 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d101      	bne.n	800beae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800beaa:	2302      	movs	r3, #2
 800beac:	e048      	b.n	800bf40 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0201 	bic.w	r2, r2, #1
 800bebc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2200      	movs	r2, #0
 800becc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2200      	movs	r2, #0
 800bed4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2200      	movs	r2, #0
 800bedc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2200      	movs	r2, #0
 800bee4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2221      	movs	r2, #33	@ 0x21
 800beec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 facc 	bl	800c48c <DMA_CalcBaseAndBitshift>
 800bef4:	4603      	mov	r3, r0
 800bef6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf20:	223f      	movs	r2, #63	@ 0x3f
 800bf22:	409a      	lsls	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HAL_DMA_Start_IT+0x26>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e040      	b.n	800bff0 <HAL_DMA_Start_IT+0xa8>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d12f      	bne.n	800bfe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2202      	movs	r2, #2
 800bf86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	68b9      	ldr	r1, [r7, #8]
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 fa4a 	bl	800c430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfa0:	223f      	movs	r2, #63	@ 0x3f
 800bfa2:	409a      	lsls	r2, r3
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f042 0216 	orr.w	r2, r2, #22
 800bfb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d007      	beq.n	800bfd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f042 0208 	orr.w	r2, r2, #8
 800bfce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0201 	orr.w	r2, r2, #1
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	e005      	b.n	800bfee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bfea:	2302      	movs	r3, #2
 800bfec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c006:	f7ff fd4f 	bl	800baa8 <HAL_GetTick>
 800c00a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b02      	cmp	r3, #2
 800c016:	d008      	beq.n	800c02a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2280      	movs	r2, #128	@ 0x80
 800c01c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e052      	b.n	800c0d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f022 0216 	bic.w	r2, r2, #22
 800c038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	695a      	ldr	r2, [r3, #20]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d103      	bne.n	800c05a <HAL_DMA_Abort+0x62>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c056:	2b00      	cmp	r3, #0
 800c058:	d007      	beq.n	800c06a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0208 	bic.w	r2, r2, #8
 800c068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f022 0201 	bic.w	r2, r2, #1
 800c078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c07a:	e013      	b.n	800c0a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c07c:	f7ff fd14 	bl	800baa8 <HAL_GetTick>
 800c080:	4602      	mov	r2, r0
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	2b05      	cmp	r3, #5
 800c088:	d90c      	bls.n	800c0a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2203      	movs	r2, #3
 800c094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e015      	b.n	800c0d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e4      	bne.n	800c07c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0b6:	223f      	movs	r2, #63	@ 0x3f
 800c0b8:	409a      	lsls	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d004      	beq.n	800c0f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2280      	movs	r2, #128	@ 0x80
 800c0f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e00c      	b.n	800c110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2205      	movs	r2, #5
 800c0fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f022 0201 	bic.w	r2, r2, #1
 800c10c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c124:	2300      	movs	r3, #0
 800c126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c128:	4b8e      	ldr	r3, [pc, #568]	@ (800c364 <HAL_DMA_IRQHandler+0x248>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a8e      	ldr	r2, [pc, #568]	@ (800c368 <HAL_DMA_IRQHandler+0x24c>)
 800c12e:	fba2 2303 	umull	r2, r3, r2, r3
 800c132:	0a9b      	lsrs	r3, r3, #10
 800c134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c13a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c146:	2208      	movs	r2, #8
 800c148:	409a      	lsls	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4013      	ands	r3, r2
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01a      	beq.n	800c188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 0304 	and.w	r3, r3, #4
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d013      	beq.n	800c188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f022 0204 	bic.w	r2, r2, #4
 800c16e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c174:	2208      	movs	r2, #8
 800c176:	409a      	lsls	r2, r3
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c180:	f043 0201 	orr.w	r2, r3, #1
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c18c:	2201      	movs	r2, #1
 800c18e:	409a      	lsls	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4013      	ands	r3, r2
 800c194:	2b00      	cmp	r3, #0
 800c196:	d012      	beq.n	800c1be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00b      	beq.n	800c1be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	409a      	lsls	r2, r3
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1b6:	f043 0202 	orr.w	r2, r3, #2
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	409a      	lsls	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d012      	beq.n	800c1f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00b      	beq.n	800c1f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1e0:	2204      	movs	r2, #4
 800c1e2:	409a      	lsls	r2, r3
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ec:	f043 0204 	orr.w	r2, r3, #4
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1f8:	2210      	movs	r2, #16
 800c1fa:	409a      	lsls	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	4013      	ands	r3, r2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d043      	beq.n	800c28c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0308 	and.w	r3, r3, #8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d03c      	beq.n	800c28c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c216:	2210      	movs	r2, #16
 800c218:	409a      	lsls	r2, r3
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d018      	beq.n	800c25e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d108      	bne.n	800c24c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d024      	beq.n	800c28c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	4798      	blx	r3
 800c24a:	e01f      	b.n	800c28c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c250:	2b00      	cmp	r3, #0
 800c252:	d01b      	beq.n	800c28c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	4798      	blx	r3
 800c25c:	e016      	b.n	800c28c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d107      	bne.n	800c27c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f022 0208 	bic.w	r2, r2, #8
 800c27a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c290:	2220      	movs	r2, #32
 800c292:	409a      	lsls	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4013      	ands	r3, r2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 808f 	beq.w	800c3bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0310 	and.w	r3, r3, #16
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 8087 	beq.w	800c3bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	409a      	lsls	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b05      	cmp	r3, #5
 800c2c4:	d136      	bne.n	800c334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 0216 	bic.w	r2, r2, #22
 800c2d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	695a      	ldr	r2, [r3, #20]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c2e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d103      	bne.n	800c2f6 <HAL_DMA_IRQHandler+0x1da>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f022 0208 	bic.w	r2, r2, #8
 800c304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c30a:	223f      	movs	r2, #63	@ 0x3f
 800c30c:	409a      	lsls	r2, r3
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c326:	2b00      	cmp	r3, #0
 800c328:	d07e      	beq.n	800c428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	4798      	blx	r3
        }
        return;
 800c332:	e079      	b.n	800c428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01d      	beq.n	800c37e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10d      	bne.n	800c36c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c354:	2b00      	cmp	r3, #0
 800c356:	d031      	beq.n	800c3bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
 800c360:	e02c      	b.n	800c3bc <HAL_DMA_IRQHandler+0x2a0>
 800c362:	bf00      	nop
 800c364:	20000054 	.word	0x20000054
 800c368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c370:	2b00      	cmp	r3, #0
 800c372:	d023      	beq.n	800c3bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	4798      	blx	r3
 800c37c:	e01e      	b.n	800c3bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10f      	bne.n	800c3ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f022 0210 	bic.w	r2, r2, #16
 800c39a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d032      	beq.n	800c42a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d022      	beq.n	800c416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2205      	movs	r2, #5
 800c3d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f022 0201 	bic.w	r2, r2, #1
 800c3e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	60bb      	str	r3, [r7, #8]
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d307      	bcc.n	800c404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1f2      	bne.n	800c3e8 <HAL_DMA_IRQHandler+0x2cc>
 800c402:	e000      	b.n	800c406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d005      	beq.n	800c42a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	4798      	blx	r3
 800c426:	e000      	b.n	800c42a <HAL_DMA_IRQHandler+0x30e>
        return;
 800c428:	bf00      	nop
    }
  }
}
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c44c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	2b40      	cmp	r3, #64	@ 0x40
 800c45c:	d108      	bne.n	800c470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c46e:	e007      	b.n	800c480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	60da      	str	r2, [r3, #12]
}
 800c480:	bf00      	nop
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	3b10      	subs	r3, #16
 800c49c:	4a14      	ldr	r2, [pc, #80]	@ (800c4f0 <DMA_CalcBaseAndBitshift+0x64>)
 800c49e:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a2:	091b      	lsrs	r3, r3, #4
 800c4a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c4a6:	4a13      	ldr	r2, [pc, #76]	@ (800c4f4 <DMA_CalcBaseAndBitshift+0x68>)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d909      	bls.n	800c4ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	1d1a      	adds	r2, r3, #4
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	659a      	str	r2, [r3, #88]	@ 0x58
 800c4cc:	e007      	b.n	800c4de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800c4d6:	f023 0303 	bic.w	r3, r3, #3
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	aaaaaaab 	.word	0xaaaaaaab
 800c4f4:	08022064 	.word	0x08022064

0800c4f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	699b      	ldr	r3, [r3, #24]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d11f      	bne.n	800c552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b03      	cmp	r3, #3
 800c516:	d856      	bhi.n	800c5c6 <DMA_CheckFifoParam+0xce>
 800c518:	a201      	add	r2, pc, #4	@ (adr r2, 800c520 <DMA_CheckFifoParam+0x28>)
 800c51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51e:	bf00      	nop
 800c520:	0800c531 	.word	0x0800c531
 800c524:	0800c543 	.word	0x0800c543
 800c528:	0800c531 	.word	0x0800c531
 800c52c:	0800c5c7 	.word	0x0800c5c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d046      	beq.n	800c5ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c540:	e043      	b.n	800c5ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c546:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c54a:	d140      	bne.n	800c5ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c550:	e03d      	b.n	800c5ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c55a:	d121      	bne.n	800c5a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d837      	bhi.n	800c5d2 <DMA_CheckFifoParam+0xda>
 800c562:	a201      	add	r2, pc, #4	@ (adr r2, 800c568 <DMA_CheckFifoParam+0x70>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c579 	.word	0x0800c579
 800c56c:	0800c57f 	.word	0x0800c57f
 800c570:	0800c579 	.word	0x0800c579
 800c574:	0800c591 	.word	0x0800c591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	73fb      	strb	r3, [r7, #15]
      break;
 800c57c:	e030      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c582:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d025      	beq.n	800c5d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c58e:	e022      	b.n	800c5d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c594:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c598:	d11f      	bne.n	800c5da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c59e:	e01c      	b.n	800c5da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d903      	bls.n	800c5ae <DMA_CheckFifoParam+0xb6>
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d003      	beq.n	800c5b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c5ac:	e018      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b2:	e015      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00e      	beq.n	800c5de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5c4:	e00b      	b.n	800c5de <DMA_CheckFifoParam+0xe6>
      break;
 800c5c6:	bf00      	nop
 800c5c8:	e00a      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5ca:	bf00      	nop
 800c5cc:	e008      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5ce:	bf00      	nop
 800c5d0:	e006      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5d2:	bf00      	nop
 800c5d4:	e004      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5d6:	bf00      	nop
 800c5d8:	e002      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      break;   
 800c5da:	bf00      	nop
 800c5dc:	e000      	b.n	800c5e0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5de:	bf00      	nop
    }
  } 
  
  return status; 
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop

0800c5f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b089      	sub	sp, #36	@ 0x24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c602:	2300      	movs	r3, #0
 800c604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c606:	2300      	movs	r3, #0
 800c608:	61fb      	str	r3, [r7, #28]
 800c60a:	e16b      	b.n	800c8e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c60c:	2201      	movs	r2, #1
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	fa02 f303 	lsl.w	r3, r2, r3
 800c614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	4013      	ands	r3, r2
 800c61e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	429a      	cmp	r2, r3
 800c626:	f040 815a 	bne.w	800c8de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	2b01      	cmp	r3, #1
 800c634:	d005      	beq.n	800c642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d130      	bne.n	800c6a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	2203      	movs	r2, #3
 800c64e:	fa02 f303 	lsl.w	r3, r2, r3
 800c652:	43db      	mvns	r3, r3
 800c654:	69ba      	ldr	r2, [r7, #24]
 800c656:	4013      	ands	r3, r2
 800c658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	fa02 f303 	lsl.w	r3, r2, r3
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	4313      	orrs	r3, r2
 800c66a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	69ba      	ldr	r2, [r7, #24]
 800c670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c678:	2201      	movs	r2, #1
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	fa02 f303 	lsl.w	r3, r2, r3
 800c680:	43db      	mvns	r3, r3
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	4013      	ands	r3, r2
 800c686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	091b      	lsrs	r3, r3, #4
 800c68e:	f003 0201 	and.w	r2, r3, #1
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	fa02 f303 	lsl.w	r3, r2, r3
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	f003 0303 	and.w	r3, r3, #3
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d017      	beq.n	800c6e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	005b      	lsls	r3, r3, #1
 800c6ba:	2203      	movs	r2, #3
 800c6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c0:	43db      	mvns	r3, r3
 800c6c2:	69ba      	ldr	r2, [r7, #24]
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	f003 0303 	and.w	r3, r3, #3
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d123      	bne.n	800c734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	08da      	lsrs	r2, r3, #3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3208      	adds	r2, #8
 800c6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	f003 0307 	and.w	r3, r3, #7
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	220f      	movs	r2, #15
 800c704:	fa02 f303 	lsl.w	r3, r2, r3
 800c708:	43db      	mvns	r3, r3
 800c70a:	69ba      	ldr	r2, [r7, #24]
 800c70c:	4013      	ands	r3, r2
 800c70e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	691a      	ldr	r2, [r3, #16]
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	fa02 f303 	lsl.w	r3, r2, r3
 800c720:	69ba      	ldr	r2, [r7, #24]
 800c722:	4313      	orrs	r3, r2
 800c724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	08da      	lsrs	r2, r3, #3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3208      	adds	r2, #8
 800c72e:	69b9      	ldr	r1, [r7, #24]
 800c730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	2203      	movs	r2, #3
 800c740:	fa02 f303 	lsl.w	r3, r2, r3
 800c744:	43db      	mvns	r3, r3
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	4013      	ands	r3, r2
 800c74a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f003 0203 	and.w	r2, r3, #3
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	fa02 f303 	lsl.w	r3, r2, r3
 800c75c:	69ba      	ldr	r2, [r7, #24]
 800c75e:	4313      	orrs	r3, r2
 800c760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	69ba      	ldr	r2, [r7, #24]
 800c766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 80b4 	beq.w	800c8de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	4b60      	ldr	r3, [pc, #384]	@ (800c8fc <HAL_GPIO_Init+0x30c>)
 800c77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c77e:	4a5f      	ldr	r2, [pc, #380]	@ (800c8fc <HAL_GPIO_Init+0x30c>)
 800c780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c784:	6453      	str	r3, [r2, #68]	@ 0x44
 800c786:	4b5d      	ldr	r3, [pc, #372]	@ (800c8fc <HAL_GPIO_Init+0x30c>)
 800c788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c78a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c792:	4a5b      	ldr	r2, [pc, #364]	@ (800c900 <HAL_GPIO_Init+0x310>)
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	089b      	lsrs	r3, r3, #2
 800c798:	3302      	adds	r3, #2
 800c79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c79e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	f003 0303 	and.w	r3, r3, #3
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	220f      	movs	r2, #15
 800c7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ae:	43db      	mvns	r3, r3
 800c7b0:	69ba      	ldr	r2, [r7, #24]
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a52      	ldr	r2, [pc, #328]	@ (800c904 <HAL_GPIO_Init+0x314>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d02b      	beq.n	800c816 <HAL_GPIO_Init+0x226>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a51      	ldr	r2, [pc, #324]	@ (800c908 <HAL_GPIO_Init+0x318>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d025      	beq.n	800c812 <HAL_GPIO_Init+0x222>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a50      	ldr	r2, [pc, #320]	@ (800c90c <HAL_GPIO_Init+0x31c>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d01f      	beq.n	800c80e <HAL_GPIO_Init+0x21e>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a4f      	ldr	r2, [pc, #316]	@ (800c910 <HAL_GPIO_Init+0x320>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d019      	beq.n	800c80a <HAL_GPIO_Init+0x21a>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a4e      	ldr	r2, [pc, #312]	@ (800c914 <HAL_GPIO_Init+0x324>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d013      	beq.n	800c806 <HAL_GPIO_Init+0x216>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a4d      	ldr	r2, [pc, #308]	@ (800c918 <HAL_GPIO_Init+0x328>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d00d      	beq.n	800c802 <HAL_GPIO_Init+0x212>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a4c      	ldr	r2, [pc, #304]	@ (800c91c <HAL_GPIO_Init+0x32c>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d007      	beq.n	800c7fe <HAL_GPIO_Init+0x20e>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a4b      	ldr	r2, [pc, #300]	@ (800c920 <HAL_GPIO_Init+0x330>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d101      	bne.n	800c7fa <HAL_GPIO_Init+0x20a>
 800c7f6:	2307      	movs	r3, #7
 800c7f8:	e00e      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c7fa:	2308      	movs	r3, #8
 800c7fc:	e00c      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c7fe:	2306      	movs	r3, #6
 800c800:	e00a      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c802:	2305      	movs	r3, #5
 800c804:	e008      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c806:	2304      	movs	r3, #4
 800c808:	e006      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c80a:	2303      	movs	r3, #3
 800c80c:	e004      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c80e:	2302      	movs	r3, #2
 800c810:	e002      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c812:	2301      	movs	r3, #1
 800c814:	e000      	b.n	800c818 <HAL_GPIO_Init+0x228>
 800c816:	2300      	movs	r3, #0
 800c818:	69fa      	ldr	r2, [r7, #28]
 800c81a:	f002 0203 	and.w	r2, r2, #3
 800c81e:	0092      	lsls	r2, r2, #2
 800c820:	4093      	lsls	r3, r2
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	4313      	orrs	r3, r2
 800c826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c828:	4935      	ldr	r1, [pc, #212]	@ (800c900 <HAL_GPIO_Init+0x310>)
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	089b      	lsrs	r3, r3, #2
 800c82e:	3302      	adds	r3, #2
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c836:	4b3b      	ldr	r3, [pc, #236]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	43db      	mvns	r3, r3
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	4013      	ands	r3, r2
 800c844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	4313      	orrs	r3, r2
 800c858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c85a:	4a32      	ldr	r2, [pc, #200]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c860:	4b30      	ldr	r3, [pc, #192]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	43db      	mvns	r3, r3
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	4013      	ands	r3, r2
 800c86e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c87c:	69ba      	ldr	r2, [r7, #24]
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	4313      	orrs	r3, r2
 800c882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c884:	4a27      	ldr	r2, [pc, #156]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c88a:	4b26      	ldr	r3, [pc, #152]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	43db      	mvns	r3, r3
 800c894:	69ba      	ldr	r2, [r7, #24]
 800c896:	4013      	ands	r3, r2
 800c898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c8a6:	69ba      	ldr	r2, [r7, #24]
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c8ae:	4a1d      	ldr	r2, [pc, #116]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c8b4:	4b1b      	ldr	r3, [pc, #108]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	43db      	mvns	r3, r3
 800c8be:	69ba      	ldr	r2, [r7, #24]
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d003      	beq.n	800c8d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c8d0:	69ba      	ldr	r2, [r7, #24]
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c8d8:	4a12      	ldr	r2, [pc, #72]	@ (800c924 <HAL_GPIO_Init+0x334>)
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	2b0f      	cmp	r3, #15
 800c8e8:	f67f ae90 	bls.w	800c60c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	3724      	adds	r7, #36	@ 0x24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	40023800 	.word	0x40023800
 800c900:	40013800 	.word	0x40013800
 800c904:	40020000 	.word	0x40020000
 800c908:	40020400 	.word	0x40020400
 800c90c:	40020800 	.word	0x40020800
 800c910:	40020c00 	.word	0x40020c00
 800c914:	40021000 	.word	0x40021000
 800c918:	40021400 	.word	0x40021400
 800c91c:	40021800 	.word	0x40021800
 800c920:	40021c00 	.word	0x40021c00
 800c924:	40013c00 	.word	0x40013c00

0800c928 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c932:	2300      	movs	r3, #0
 800c934:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c93a:	2300      	movs	r3, #0
 800c93c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c93e:	2300      	movs	r3, #0
 800c940:	617b      	str	r3, [r7, #20]
 800c942:	e0cd      	b.n	800cae0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c944:	2201      	movs	r2, #1
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	fa02 f303 	lsl.w	r3, r2, r3
 800c94c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	4013      	ands	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	f040 80bd 	bne.w	800cada <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c960:	4a65      	ldr	r2, [pc, #404]	@ (800caf8 <HAL_GPIO_DeInit+0x1d0>)
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	089b      	lsrs	r3, r3, #2
 800c966:	3302      	adds	r3, #2
 800c968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c96c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f003 0303 	and.w	r3, r3, #3
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	220f      	movs	r2, #15
 800c978:	fa02 f303 	lsl.w	r3, r2, r3
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	4013      	ands	r3, r2
 800c980:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a5d      	ldr	r2, [pc, #372]	@ (800cafc <HAL_GPIO_DeInit+0x1d4>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d02b      	beq.n	800c9e2 <HAL_GPIO_DeInit+0xba>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a5c      	ldr	r2, [pc, #368]	@ (800cb00 <HAL_GPIO_DeInit+0x1d8>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d025      	beq.n	800c9de <HAL_GPIO_DeInit+0xb6>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a5b      	ldr	r2, [pc, #364]	@ (800cb04 <HAL_GPIO_DeInit+0x1dc>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d01f      	beq.n	800c9da <HAL_GPIO_DeInit+0xb2>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a5a      	ldr	r2, [pc, #360]	@ (800cb08 <HAL_GPIO_DeInit+0x1e0>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d019      	beq.n	800c9d6 <HAL_GPIO_DeInit+0xae>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a59      	ldr	r2, [pc, #356]	@ (800cb0c <HAL_GPIO_DeInit+0x1e4>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d013      	beq.n	800c9d2 <HAL_GPIO_DeInit+0xaa>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a58      	ldr	r2, [pc, #352]	@ (800cb10 <HAL_GPIO_DeInit+0x1e8>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d00d      	beq.n	800c9ce <HAL_GPIO_DeInit+0xa6>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a57      	ldr	r2, [pc, #348]	@ (800cb14 <HAL_GPIO_DeInit+0x1ec>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d007      	beq.n	800c9ca <HAL_GPIO_DeInit+0xa2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a56      	ldr	r2, [pc, #344]	@ (800cb18 <HAL_GPIO_DeInit+0x1f0>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d101      	bne.n	800c9c6 <HAL_GPIO_DeInit+0x9e>
 800c9c2:	2307      	movs	r3, #7
 800c9c4:	e00e      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9c6:	2308      	movs	r3, #8
 800c9c8:	e00c      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9ca:	2306      	movs	r3, #6
 800c9cc:	e00a      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9ce:	2305      	movs	r3, #5
 800c9d0:	e008      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	e006      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e004      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9da:	2302      	movs	r3, #2
 800c9dc:	e002      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e000      	b.n	800c9e4 <HAL_GPIO_DeInit+0xbc>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	f002 0203 	and.w	r2, r2, #3
 800c9ea:	0092      	lsls	r2, r2, #2
 800c9ec:	4093      	lsls	r3, r2
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d132      	bne.n	800ca5a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c9f4:	4b49      	ldr	r3, [pc, #292]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	43db      	mvns	r3, r3
 800c9fc:	4947      	ldr	r1, [pc, #284]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800c9fe:	4013      	ands	r3, r2
 800ca00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ca02:	4b46      	ldr	r3, [pc, #280]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	43db      	mvns	r3, r3
 800ca0a:	4944      	ldr	r1, [pc, #272]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ca10:	4b42      	ldr	r3, [pc, #264]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800ca12:	68da      	ldr	r2, [r3, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	43db      	mvns	r3, r3
 800ca18:	4940      	ldr	r1, [pc, #256]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ca1e:	4b3f      	ldr	r3, [pc, #252]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800ca20:	689a      	ldr	r2, [r3, #8]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	43db      	mvns	r3, r3
 800ca26:	493d      	ldr	r1, [pc, #244]	@ (800cb1c <HAL_GPIO_DeInit+0x1f4>)
 800ca28:	4013      	ands	r3, r2
 800ca2a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	220f      	movs	r2, #15
 800ca36:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ca3c:	4a2e      	ldr	r2, [pc, #184]	@ (800caf8 <HAL_GPIO_DeInit+0x1d0>)
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	089b      	lsrs	r3, r3, #2
 800ca42:	3302      	adds	r3, #2
 800ca44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	43da      	mvns	r2, r3
 800ca4c:	482a      	ldr	r0, [pc, #168]	@ (800caf8 <HAL_GPIO_DeInit+0x1d0>)
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	089b      	lsrs	r3, r3, #2
 800ca52:	400a      	ands	r2, r1
 800ca54:	3302      	adds	r3, #2
 800ca56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	2103      	movs	r1, #3
 800ca64:	fa01 f303 	lsl.w	r3, r1, r3
 800ca68:	43db      	mvns	r3, r3
 800ca6a:	401a      	ands	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	08da      	lsrs	r2, r3, #3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3208      	adds	r2, #8
 800ca78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f003 0307 	and.w	r3, r3, #7
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	220f      	movs	r2, #15
 800ca86:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8a:	43db      	mvns	r3, r3
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	08d2      	lsrs	r2, r2, #3
 800ca90:	4019      	ands	r1, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3208      	adds	r2, #8
 800ca96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68da      	ldr	r2, [r3, #12]
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	2103      	movs	r1, #3
 800caa4:	fa01 f303 	lsl.w	r3, r1, r3
 800caa8:	43db      	mvns	r3, r3
 800caaa:	401a      	ands	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	2101      	movs	r1, #1
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	fa01 f303 	lsl.w	r3, r1, r3
 800cabc:	43db      	mvns	r3, r3
 800cabe:	401a      	ands	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	689a      	ldr	r2, [r3, #8]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	2103      	movs	r1, #3
 800cace:	fa01 f303 	lsl.w	r3, r1, r3
 800cad2:	43db      	mvns	r3, r3
 800cad4:	401a      	ands	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	3301      	adds	r3, #1
 800cade:	617b      	str	r3, [r7, #20]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b0f      	cmp	r3, #15
 800cae4:	f67f af2e 	bls.w	800c944 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	371c      	adds	r7, #28
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	40013800 	.word	0x40013800
 800cafc:	40020000 	.word	0x40020000
 800cb00:	40020400 	.word	0x40020400
 800cb04:	40020800 	.word	0x40020800
 800cb08:	40020c00 	.word	0x40020c00
 800cb0c:	40021000 	.word	0x40021000
 800cb10:	40021400 	.word	0x40021400
 800cb14:	40021800 	.word	0x40021800
 800cb18:	40021c00 	.word	0x40021c00
 800cb1c:	40013c00 	.word	0x40013c00

0800cb20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	807b      	strh	r3, [r7, #2]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cb30:	787b      	ldrb	r3, [r7, #1]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cb36:	887a      	ldrh	r2, [r7, #2]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cb3c:	e003      	b.n	800cb46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cb3e:	887b      	ldrh	r3, [r7, #2]
 800cb40:	041a      	lsls	r2, r3, #16
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	619a      	str	r2, [r3, #24]
}
 800cb46:	bf00      	nop
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b086      	sub	sp, #24
 800cb56:	af02      	add	r7, sp, #8
 800cb58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	e101      	b.n	800cd68 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f00b fffe 	bl	8018b80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2203      	movs	r2, #3
 800cb88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb92:	d102      	bne.n	800cb9a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f005 f8cb 	bl	8011d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6818      	ldr	r0, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	7c1a      	ldrb	r2, [r3, #16]
 800cbac:	f88d 2000 	strb.w	r2, [sp]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbb4:	f004 ffaa 	bl	8011b0c <USB_CoreInit>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d005      	beq.n	800cbca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e0ce      	b.n	800cd68 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2100      	movs	r1, #0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f005 f8c3 	bl	8011d5c <USB_SetCurrentMode>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d005      	beq.n	800cbe8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2202      	movs	r2, #2
 800cbe0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e0bf      	b.n	800cd68 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73fb      	strb	r3, [r7, #15]
 800cbec:	e04a      	b.n	800cc84 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cbee:	7bfa      	ldrb	r2, [r7, #15]
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	00db      	lsls	r3, r3, #3
 800cbf6:	4413      	add	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	440b      	add	r3, r1
 800cbfc:	3315      	adds	r3, #21
 800cbfe:	2201      	movs	r2, #1
 800cc00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cc02:	7bfa      	ldrb	r2, [r7, #15]
 800cc04:	6879      	ldr	r1, [r7, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	00db      	lsls	r3, r3, #3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	440b      	add	r3, r1
 800cc10:	3314      	adds	r3, #20
 800cc12:	7bfa      	ldrb	r2, [r7, #15]
 800cc14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cc16:	7bfa      	ldrb	r2, [r7, #15]
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	b298      	uxth	r0, r3
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	4413      	add	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	440b      	add	r3, r1
 800cc28:	332e      	adds	r3, #46	@ 0x2e
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cc2e:	7bfa      	ldrb	r2, [r7, #15]
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	4613      	mov	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3318      	adds	r3, #24
 800cc3e:	2200      	movs	r2, #0
 800cc40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cc42:	7bfa      	ldrb	r2, [r7, #15]
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	440b      	add	r3, r1
 800cc50:	331c      	adds	r3, #28
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cc56:	7bfa      	ldrb	r2, [r7, #15]
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	440b      	add	r3, r1
 800cc64:	3320      	adds	r3, #32
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cc6a:	7bfa      	ldrb	r2, [r7, #15]
 800cc6c:	6879      	ldr	r1, [r7, #4]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	00db      	lsls	r3, r3, #3
 800cc72:	4413      	add	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	440b      	add	r3, r1
 800cc78:	3324      	adds	r3, #36	@ 0x24
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	3301      	adds	r3, #1
 800cc82:	73fb      	strb	r3, [r7, #15]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	791b      	ldrb	r3, [r3, #4]
 800cc88:	7bfa      	ldrb	r2, [r7, #15]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d3af      	bcc.n	800cbee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]
 800cc92:	e044      	b.n	800cd1e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cc94:	7bfa      	ldrb	r2, [r7, #15]
 800cc96:	6879      	ldr	r1, [r7, #4]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	4413      	add	r3, r2
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	440b      	add	r3, r1
 800cca2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800cca6:	2200      	movs	r2, #0
 800cca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ccaa:	7bfa      	ldrb	r2, [r7, #15]
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	4413      	add	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	440b      	add	r3, r1
 800ccb8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ccbc:	7bfa      	ldrb	r2, [r7, #15]
 800ccbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ccc0:	7bfa      	ldrb	r2, [r7, #15]
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	4413      	add	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	440b      	add	r3, r1
 800ccce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ccd6:	7bfa      	ldrb	r2, [r7, #15]
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	4413      	add	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	440b      	add	r3, r1
 800cce4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ccec:	7bfa      	ldrb	r2, [r7, #15]
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	4413      	add	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	440b      	add	r3, r1
 800ccfa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cd02:	7bfa      	ldrb	r2, [r7, #15]
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	4613      	mov	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	440b      	add	r3, r1
 800cd10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cd14:	2200      	movs	r2, #0
 800cd16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	73fb      	strb	r3, [r7, #15]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	791b      	ldrb	r3, [r3, #4]
 800cd22:	7bfa      	ldrb	r2, [r7, #15]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d3b5      	bcc.n	800cc94 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6818      	ldr	r0, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7c1a      	ldrb	r2, [r3, #16]
 800cd30:	f88d 2000 	strb.w	r2, [sp]
 800cd34:	3304      	adds	r3, #4
 800cd36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd38:	f005 f85c 	bl	8011df4 <USB_DevInit>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d005      	beq.n	800cd4e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2202      	movs	r2, #2
 800cd46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e00c      	b.n	800cd68 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f006 f8a6 	bl	8012eb2 <USB_DevDisconnect>

  return HAL_OK;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d101      	bne.n	800cd8c <HAL_PCD_Start+0x1c>
 800cd88:	2302      	movs	r3, #2
 800cd8a:	e022      	b.n	800cdd2 <HAL_PCD_Start+0x62>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d009      	beq.n	800cdb4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d105      	bne.n	800cdb4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f004 ffad 	bl	8011d18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f006 f854 	bl	8012e70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cdda:	b590      	push	{r4, r7, lr}
 800cddc:	b08d      	sub	sp, #52	@ 0x34
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f006 f912 	bl	801301a <USB_GetMode>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f040 848c 	bne.w	800d716 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f006 f876 	bl	8012ef4 <USB_ReadInterrupts>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 8482 	beq.w	800d714 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	0a1b      	lsrs	r3, r3, #8
 800ce1a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f006 f863 	bl	8012ef4 <USB_ReadInterrupts>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d107      	bne.n	800ce48 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	695a      	ldr	r2, [r3, #20]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f002 0202 	and.w	r2, r2, #2
 800ce46:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f006 f851 	bl	8012ef4 <USB_ReadInterrupts>
 800ce52:	4603      	mov	r3, r0
 800ce54:	f003 0310 	and.w	r3, r3, #16
 800ce58:	2b10      	cmp	r3, #16
 800ce5a:	d161      	bne.n	800cf20 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	699a      	ldr	r2, [r3, #24]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f022 0210 	bic.w	r2, r2, #16
 800ce6a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	6a1b      	ldr	r3, [r3, #32]
 800ce70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	f003 020f 	and.w	r2, r3, #15
 800ce78:	4613      	mov	r3, r2
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	4413      	add	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	4413      	add	r3, r2
 800ce88:	3304      	adds	r3, #4
 800ce8a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800ce92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce96:	d124      	bne.n	800cee2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ce98:	69ba      	ldr	r2, [r7, #24]
 800ce9a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800ce9e:	4013      	ands	r3, r2
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d035      	beq.n	800cf10 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	091b      	lsrs	r3, r3, #4
 800ceac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ceae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	6a38      	ldr	r0, [r7, #32]
 800ceb8:	f005 fe88 	bl	8012bcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	68da      	ldr	r2, [r3, #12]
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	091b      	lsrs	r3, r3, #4
 800cec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cec8:	441a      	add	r2, r3
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	695a      	ldr	r2, [r3, #20]
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	091b      	lsrs	r3, r3, #4
 800ced6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ceda:	441a      	add	r2, r3
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	615a      	str	r2, [r3, #20]
 800cee0:	e016      	b.n	800cf10 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800cee8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ceec:	d110      	bne.n	800cf10 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cef4:	2208      	movs	r2, #8
 800cef6:	4619      	mov	r1, r3
 800cef8:	6a38      	ldr	r0, [r7, #32]
 800cefa:	f005 fe67 	bl	8012bcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	695a      	ldr	r2, [r3, #20]
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	091b      	lsrs	r3, r3, #4
 800cf06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf0a:	441a      	add	r2, r3
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	699a      	ldr	r2, [r3, #24]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f042 0210 	orr.w	r2, r2, #16
 800cf1e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f005 ffe5 	bl	8012ef4 <USB_ReadInterrupts>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cf30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cf34:	f040 80a7 	bne.w	800d086 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f005 ffea 	bl	8012f1a <USB_ReadDevAllOutEpInterrupt>
 800cf46:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800cf48:	e099      	b.n	800d07e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 808e 	beq.w	800d072 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf5c:	b2d2      	uxtb	r2, r2
 800cf5e:	4611      	mov	r1, r2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f006 f80e 	bl	8012f82 <USB_ReadDevOutEPInterrupt>
 800cf66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00c      	beq.n	800cf8c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf74:	015a      	lsls	r2, r3, #5
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	4413      	add	r3, r2
 800cf7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf7e:	461a      	mov	r2, r3
 800cf80:	2301      	movs	r3, #1
 800cf82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800cf84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fea4 	bl	800dcd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	f003 0308 	and.w	r3, r3, #8
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00c      	beq.n	800cfb0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	2308      	movs	r3, #8
 800cfa6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800cfa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 ff7a 	bl	800dea4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	f003 0310 	and.w	r3, r3, #16
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d008      	beq.n	800cfcc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	2310      	movs	r3, #16
 800cfca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d030      	beq.n	800d038 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfde:	2b80      	cmp	r3, #128	@ 0x80
 800cfe0:	d109      	bne.n	800cff6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	69fa      	ldr	r2, [r7, #28]
 800cfec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cff4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800cff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff8:	4613      	mov	r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	4413      	add	r3, r2
 800d008:	3304      	adds	r3, #4
 800d00a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	78db      	ldrb	r3, [r3, #3]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d108      	bne.n	800d026 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2200      	movs	r2, #0
 800d018:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f00b feb3 	bl	8018d8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d028:	015a      	lsls	r2, r3, #5
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	4413      	add	r3, r2
 800d02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d032:	461a      	mov	r2, r3
 800d034:	2302      	movs	r3, #2
 800d036:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	f003 0320 	and.w	r3, r3, #32
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d008      	beq.n	800d054 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d044:	015a      	lsls	r2, r3, #5
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	4413      	add	r3, r2
 800d04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04e:	461a      	mov	r2, r3
 800d050:	2320      	movs	r3, #32
 800d052:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d009      	beq.n	800d072 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d06a:	461a      	mov	r2, r3
 800d06c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d070:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d074:	3301      	adds	r3, #1
 800d076:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07a:	085b      	lsrs	r3, r3, #1
 800d07c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d080:	2b00      	cmp	r3, #0
 800d082:	f47f af62 	bne.w	800cf4a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f005 ff32 	bl	8012ef4 <USB_ReadInterrupts>
 800d090:	4603      	mov	r3, r0
 800d092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d096:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d09a:	f040 80db 	bne.w	800d254 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f005 ff53 	bl	8012f4e <USB_ReadDevAllInEpInterrupt>
 800d0a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d0ae:	e0cd      	b.n	800d24c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f000 80c2 	beq.w	800d240 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0c2:	b2d2      	uxtb	r2, r2
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f005 ff79 	bl	8012fbe <USB_ReadDevInEPInterrupt>
 800d0cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d057      	beq.n	800d188 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0da:	f003 030f 	and.w	r3, r3, #15
 800d0de:	2201      	movs	r2, #1
 800d0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	43db      	mvns	r3, r3
 800d0f2:	69f9      	ldr	r1, [r7, #28]
 800d0f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fe:	015a      	lsls	r2, r3, #5
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	4413      	add	r3, r2
 800d104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d108:	461a      	mov	r2, r3
 800d10a:	2301      	movs	r3, #1
 800d10c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	799b      	ldrb	r3, [r3, #6]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d132      	bne.n	800d17c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d116:	6879      	ldr	r1, [r7, #4]
 800d118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d11a:	4613      	mov	r3, r2
 800d11c:	00db      	lsls	r3, r3, #3
 800d11e:	4413      	add	r3, r2
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	440b      	add	r3, r1
 800d124:	3320      	adds	r3, #32
 800d126:	6819      	ldr	r1, [r3, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d12c:	4613      	mov	r3, r2
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	4413      	add	r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4403      	add	r3, r0
 800d136:	331c      	adds	r3, #28
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4419      	add	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d140:	4613      	mov	r3, r2
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	4403      	add	r3, r0
 800d14a:	3320      	adds	r3, #32
 800d14c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	2b00      	cmp	r3, #0
 800d152:	d113      	bne.n	800d17c <HAL_PCD_IRQHandler+0x3a2>
 800d154:	6879      	ldr	r1, [r7, #4]
 800d156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d158:	4613      	mov	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	440b      	add	r3, r1
 800d162:	3324      	adds	r3, #36	@ 0x24
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d108      	bne.n	800d17c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6818      	ldr	r0, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d174:	461a      	mov	r2, r3
 800d176:	2101      	movs	r1, #1
 800d178:	f005 ff80 	bl	801307c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f00b fd7d 	bl	8018c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	f003 0308 	and.w	r3, r3, #8
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d008      	beq.n	800d1a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d194:	015a      	lsls	r2, r3, #5
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	4413      	add	r3, r2
 800d19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d19e:	461a      	mov	r2, r3
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f003 0310 	and.w	r3, r3, #16
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d008      	beq.n	800d1c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b0:	015a      	lsls	r2, r3, #5
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	2310      	movs	r3, #16
 800d1be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d008      	beq.n	800d1dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	015a      	lsls	r2, r3, #5
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	2340      	movs	r3, #64	@ 0x40
 800d1da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d023      	beq.n	800d22e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d1e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1e8:	6a38      	ldr	r0, [r7, #32]
 800d1ea:	f004 ff67 	bl	80120bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	3310      	adds	r3, #16
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	3304      	adds	r3, #4
 800d200:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	78db      	ldrb	r3, [r3, #3]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d108      	bne.n	800d21c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2200      	movs	r2, #0
 800d20e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d212:	b2db      	uxtb	r3, r3
 800d214:	4619      	mov	r1, r3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f00b fdca 	bl	8018db0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21e:	015a      	lsls	r2, r3, #5
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	4413      	add	r3, r2
 800d224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d228:	461a      	mov	r2, r3
 800d22a:	2302      	movs	r3, #2
 800d22c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fcbd 	bl	800dbba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d242:	3301      	adds	r3, #1
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d248:	085b      	lsrs	r3, r3, #1
 800d24a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f47f af2e 	bne.w	800d0b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f005 fe4b 	bl	8012ef4 <USB_ReadInterrupts>
 800d25e:	4603      	mov	r3, r0
 800d260:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d268:	d122      	bne.n	800d2b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	69fa      	ldr	r2, [r7, #28]
 800d274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d278:	f023 0301 	bic.w	r3, r3, #1
 800d27c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d284:	2b01      	cmp	r3, #1
 800d286:	d108      	bne.n	800d29a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d290:	2100      	movs	r1, #0
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fea4 	bl	800dfe0 <HAL_PCDEx_LPM_Callback>
 800d298:	e002      	b.n	800d2a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f00b fd68 	bl	8018d70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	695a      	ldr	r2, [r3, #20]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800d2ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f005 fe1d 	bl	8012ef4 <USB_ReadInterrupts>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d2c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2c4:	d112      	bne.n	800d2ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d102      	bne.n	800d2dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f00b fd24 	bl	8018d24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	695a      	ldr	r2, [r3, #20]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800d2ea:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f005 fdff 	bl	8012ef4 <USB_ReadInterrupts>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d2fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d300:	f040 80b7 	bne.w	800d472 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	69fa      	ldr	r2, [r7, #28]
 800d30e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d312:	f023 0301 	bic.w	r3, r3, #1
 800d316:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2110      	movs	r1, #16
 800d31e:	4618      	mov	r0, r3
 800d320:	f004 fecc 	bl	80120bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d324:	2300      	movs	r3, #0
 800d326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d328:	e046      	b.n	800d3b8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32c:	015a      	lsls	r2, r3, #5
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	4413      	add	r3, r2
 800d332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d336:	461a      	mov	r2, r3
 800d338:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d33c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d340:	015a      	lsls	r2, r3, #5
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	4413      	add	r3, r2
 800d346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d34e:	0151      	lsls	r1, r2, #5
 800d350:	69fa      	ldr	r2, [r7, #28]
 800d352:	440a      	add	r2, r1
 800d354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d358:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d35c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d360:	015a      	lsls	r2, r3, #5
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	4413      	add	r3, r2
 800d366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d36a:	461a      	mov	r2, r3
 800d36c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d370:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d374:	015a      	lsls	r2, r3, #5
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	4413      	add	r3, r2
 800d37a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d382:	0151      	lsls	r1, r2, #5
 800d384:	69fa      	ldr	r2, [r7, #28]
 800d386:	440a      	add	r2, r1
 800d388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d38c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d390:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d394:	015a      	lsls	r2, r3, #5
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4413      	add	r3, r2
 800d39a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3a2:	0151      	lsls	r1, r2, #5
 800d3a4:	69fa      	ldr	r2, [r7, #28]
 800d3a6:	440a      	add	r2, r1
 800d3a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d3b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	791b      	ldrb	r3, [r3, #4]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d3b2      	bcc.n	800d32a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3ca:	69db      	ldr	r3, [r3, #28]
 800d3cc:	69fa      	ldr	r2, [r7, #28]
 800d3ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d3d2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800d3d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	7bdb      	ldrb	r3, [r3, #15]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d016      	beq.n	800d40e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ea:	69fa      	ldr	r2, [r7, #28]
 800d3ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d3f0:	f043 030b 	orr.w	r3, r3, #11
 800d3f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d400:	69fa      	ldr	r2, [r7, #28]
 800d402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d406:	f043 030b 	orr.w	r3, r3, #11
 800d40a:	6453      	str	r3, [r2, #68]	@ 0x44
 800d40c:	e015      	b.n	800d43a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	69fa      	ldr	r2, [r7, #28]
 800d418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d41c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d420:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800d424:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	69fa      	ldr	r2, [r7, #28]
 800d430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d434:	f043 030b 	orr.w	r3, r3, #11
 800d438:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d448:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d44c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6818      	ldr	r0, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d45c:	461a      	mov	r2, r3
 800d45e:	f005 fe0d 	bl	801307c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	695a      	ldr	r2, [r3, #20]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800d470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4618      	mov	r0, r3
 800d478:	f005 fd3c 	bl	8012ef4 <USB_ReadInterrupts>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d486:	d123      	bne.n	800d4d0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f005 fdd2 	bl	8013036 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4618      	mov	r0, r3
 800d498:	f004 fe89 	bl	80121ae <USB_GetDevSpeed>
 800d49c:	4603      	mov	r3, r0
 800d49e:	461a      	mov	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681c      	ldr	r4, [r3, #0]
 800d4a8:	f001 fa0a 	bl	800e8c0 <HAL_RCC_GetHCLKFreq>
 800d4ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f004 fb8d 	bl	8011bd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f00b fc09 	bl	8018cd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	695a      	ldr	r2, [r3, #20]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800d4ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f005 fd0d 	bl	8012ef4 <USB_ReadInterrupts>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f003 0308 	and.w	r3, r3, #8
 800d4e0:	2b08      	cmp	r3, #8
 800d4e2:	d10a      	bne.n	800d4fa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f00b fbe6 	bl	8018cb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	695a      	ldr	r2, [r3, #20]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f002 0208 	and.w	r2, r2, #8
 800d4f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f005 fcf8 	bl	8012ef4 <USB_ReadInterrupts>
 800d504:	4603      	mov	r3, r0
 800d506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d50a:	2b80      	cmp	r3, #128	@ 0x80
 800d50c:	d123      	bne.n	800d556 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800d50e:	6a3b      	ldr	r3, [r7, #32]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d51a:	2301      	movs	r3, #1
 800d51c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d51e:	e014      	b.n	800d54a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800d520:	6879      	ldr	r1, [r7, #4]
 800d522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d524:	4613      	mov	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	4413      	add	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	440b      	add	r3, r1
 800d52e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d105      	bne.n	800d544 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	4619      	mov	r1, r3
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fb0a 	bl	800db58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d546:	3301      	adds	r3, #1
 800d548:	627b      	str	r3, [r7, #36]	@ 0x24
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	791b      	ldrb	r3, [r3, #4]
 800d54e:	461a      	mov	r2, r3
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	4293      	cmp	r3, r2
 800d554:	d3e4      	bcc.n	800d520 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f005 fcca 	bl	8012ef4 <USB_ReadInterrupts>
 800d560:	4603      	mov	r3, r0
 800d562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d56a:	d13c      	bne.n	800d5e6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d56c:	2301      	movs	r3, #1
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d570:	e02b      	b.n	800d5ca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	015a      	lsls	r2, r3, #5
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	4413      	add	r3, r2
 800d57a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d586:	4613      	mov	r3, r2
 800d588:	00db      	lsls	r3, r3, #3
 800d58a:	4413      	add	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	440b      	add	r3, r1
 800d590:	3318      	adds	r3, #24
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d115      	bne.n	800d5c4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800d598:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	da12      	bge.n	800d5c4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3317      	adds	r3, #23
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 faca 	bl	800db58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d3cd      	bcc.n	800d572 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	695a      	ldr	r2, [r3, #20]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800d5e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f005 fc82 	bl	8012ef4 <USB_ReadInterrupts>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d5f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d5fa:	d156      	bne.n	800d6aa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d600:	e045      	b.n	800d68e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d612:	6879      	ldr	r1, [r7, #4]
 800d614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d616:	4613      	mov	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	4413      	add	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	440b      	add	r3, r1
 800d620:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d12e      	bne.n	800d688 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d62a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	da2b      	bge.n	800d688 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d63c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d640:	429a      	cmp	r2, r3
 800d642:	d121      	bne.n	800d688 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800d644:	6879      	ldr	r1, [r7, #4]
 800d646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d648:	4613      	mov	r3, r2
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	4413      	add	r3, r2
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	440b      	add	r3, r1
 800d652:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d656:	2201      	movs	r2, #1
 800d658:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d662:	6a3b      	ldr	r3, [r7, #32]
 800d664:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10a      	bne.n	800d688 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d680:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d684:	6053      	str	r3, [r2, #4]
            break;
 800d686:	e008      	b.n	800d69a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68a:	3301      	adds	r3, #1
 800d68c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	791b      	ldrb	r3, [r3, #4]
 800d692:	461a      	mov	r2, r3
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	4293      	cmp	r3, r2
 800d698:	d3b3      	bcc.n	800d602 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	695a      	ldr	r2, [r3, #20]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800d6a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f005 fc20 	bl	8012ef4 <USB_ReadInterrupts>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6be:	d10a      	bne.n	800d6d6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f00b fb87 	bl	8018dd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	695a      	ldr	r2, [r3, #20]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800d6d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f005 fc0a 	bl	8012ef4 <USB_ReadInterrupts>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	f003 0304 	and.w	r3, r3, #4
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	d115      	bne.n	800d716 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	f003 0304 	and.w	r3, r3, #4
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f00b fb77 	bl	8018df0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6859      	ldr	r1, [r3, #4]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	69ba      	ldr	r2, [r7, #24]
 800d70e:	430a      	orrs	r2, r1
 800d710:	605a      	str	r2, [r3, #4]
 800d712:	e000      	b.n	800d716 <HAL_PCD_IRQHandler+0x93c>
      return;
 800d714:	bf00      	nop
    }
  }
}
 800d716:	3734      	adds	r7, #52	@ 0x34
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd90      	pop	{r4, r7, pc}

0800d71c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d101      	bne.n	800d736 <HAL_PCD_SetAddress+0x1a>
 800d732:	2302      	movs	r3, #2
 800d734:	e012      	b.n	800d75c <HAL_PCD_SetAddress+0x40>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2201      	movs	r2, #1
 800d73a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	78fa      	ldrb	r2, [r7, #3]
 800d742:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	78fa      	ldrb	r2, [r7, #3]
 800d74a:	4611      	mov	r1, r2
 800d74c:	4618      	mov	r0, r3
 800d74e:	f005 fb69 	bl	8012e24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	4608      	mov	r0, r1
 800d76e:	4611      	mov	r1, r2
 800d770:	461a      	mov	r2, r3
 800d772:	4603      	mov	r3, r0
 800d774:	70fb      	strb	r3, [r7, #3]
 800d776:	460b      	mov	r3, r1
 800d778:	803b      	strh	r3, [r7, #0]
 800d77a:	4613      	mov	r3, r2
 800d77c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d786:	2b00      	cmp	r3, #0
 800d788:	da0f      	bge.n	800d7aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d78a:	78fb      	ldrb	r3, [r7, #3]
 800d78c:	f003 020f 	and.w	r2, r3, #15
 800d790:	4613      	mov	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	4413      	add	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	3310      	adds	r3, #16
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	3304      	adds	r3, #4
 800d7a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	705a      	strb	r2, [r3, #1]
 800d7a8:	e00f      	b.n	800d7ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d7aa:	78fb      	ldrb	r3, [r7, #3]
 800d7ac:	f003 020f 	and.w	r2, r3, #15
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	4413      	add	r3, r2
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d7ca:	78fb      	ldrb	r3, [r7, #3]
 800d7cc:	f003 030f 	and.w	r3, r3, #15
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800d7d6:	883b      	ldrh	r3, [r7, #0]
 800d7d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	78ba      	ldrb	r2, [r7, #2]
 800d7e4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	785b      	ldrb	r3, [r3, #1]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d004      	beq.n	800d7f8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d7f8:	78bb      	ldrb	r3, [r7, #2]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d102      	bne.n	800d804 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d101      	bne.n	800d812 <HAL_PCD_EP_Open+0xae>
 800d80e:	2302      	movs	r3, #2
 800d810:	e00e      	b.n	800d830 <HAL_PCD_EP_Open+0xcc>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68f9      	ldr	r1, [r7, #12]
 800d820:	4618      	mov	r0, r3
 800d822:	f004 fce9 	bl	80121f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d82e:	7afb      	ldrb	r3, [r7, #11]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	460b      	mov	r3, r1
 800d842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	da0f      	bge.n	800d86c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	f003 020f 	and.w	r2, r3, #15
 800d852:	4613      	mov	r3, r2
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	4413      	add	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	3310      	adds	r3, #16
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	4413      	add	r3, r2
 800d860:	3304      	adds	r3, #4
 800d862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2201      	movs	r2, #1
 800d868:	705a      	strb	r2, [r3, #1]
 800d86a:	e00f      	b.n	800d88c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d86c:	78fb      	ldrb	r3, [r7, #3]
 800d86e:	f003 020f 	and.w	r2, r3, #15
 800d872:	4613      	mov	r3, r2
 800d874:	00db      	lsls	r3, r3, #3
 800d876:	4413      	add	r3, r2
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	4413      	add	r3, r2
 800d882:	3304      	adds	r3, #4
 800d884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d88c:	78fb      	ldrb	r3, [r7, #3]
 800d88e:	f003 030f 	and.w	r3, r3, #15
 800d892:	b2da      	uxtb	r2, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d101      	bne.n	800d8a6 <HAL_PCD_EP_Close+0x6e>
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	e00e      	b.n	800d8c4 <HAL_PCD_EP_Close+0x8c>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68f9      	ldr	r1, [r7, #12]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f004 fd27 	bl	8012308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	607a      	str	r2, [r7, #4]
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d8dc:	7afb      	ldrb	r3, [r7, #11]
 800d8de:	f003 020f 	and.w	r2, r3, #15
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	4413      	add	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2200      	movs	r2, #0
 800d906:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2200      	movs	r2, #0
 800d90c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d90e:	7afb      	ldrb	r3, [r7, #11]
 800d910:	f003 030f 	and.w	r3, r3, #15
 800d914:	b2da      	uxtb	r2, r3
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	799b      	ldrb	r3, [r3, #6]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d102      	bne.n	800d928 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6818      	ldr	r0, [r3, #0]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	799b      	ldrb	r3, [r3, #6]
 800d930:	461a      	mov	r2, r3
 800d932:	6979      	ldr	r1, [r7, #20]
 800d934:	f004 fdc4 	bl	80124c0 <USB_EPStartXfer>

  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3718      	adds	r7, #24
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	460b      	mov	r3, r1
 800d94c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d94e:	78fb      	ldrb	r3, [r7, #3]
 800d950:	f003 020f 	and.w	r2, r3, #15
 800d954:	6879      	ldr	r1, [r7, #4]
 800d956:	4613      	mov	r3, r2
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	440b      	add	r3, r1
 800d960:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d964:	681b      	ldr	r3, [r3, #0]
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b086      	sub	sp, #24
 800d976:	af00      	add	r7, sp, #0
 800d978:	60f8      	str	r0, [r7, #12]
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	603b      	str	r3, [r7, #0]
 800d97e:	460b      	mov	r3, r1
 800d980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d982:	7afb      	ldrb	r3, [r7, #11]
 800d984:	f003 020f 	and.w	r2, r3, #15
 800d988:	4613      	mov	r3, r2
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	3310      	adds	r3, #16
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	4413      	add	r3, r2
 800d996:	3304      	adds	r3, #4
 800d998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d9b2:	7afb      	ldrb	r3, [r7, #11]
 800d9b4:	f003 030f 	and.w	r3, r3, #15
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	799b      	ldrb	r3, [r3, #6]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d102      	bne.n	800d9cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6818      	ldr	r0, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	799b      	ldrb	r3, [r3, #6]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	6979      	ldr	r1, [r7, #20]
 800d9d8:	f004 fd72 	bl	80124c0 <USB_EPStartXfer>

  return HAL_OK;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3718      	adds	r7, #24
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d9f2:	78fb      	ldrb	r3, [r7, #3]
 800d9f4:	f003 030f 	and.w	r3, r3, #15
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	7912      	ldrb	r2, [r2, #4]
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d901      	bls.n	800da04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e04f      	b.n	800daa4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800da04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	da0f      	bge.n	800da2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800da0c:	78fb      	ldrb	r3, [r7, #3]
 800da0e:	f003 020f 	and.w	r2, r3, #15
 800da12:	4613      	mov	r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	4413      	add	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	3310      	adds	r3, #16
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	4413      	add	r3, r2
 800da20:	3304      	adds	r3, #4
 800da22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2201      	movs	r2, #1
 800da28:	705a      	strb	r2, [r3, #1]
 800da2a:	e00d      	b.n	800da48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800da2c:	78fa      	ldrb	r2, [r7, #3]
 800da2e:	4613      	mov	r3, r2
 800da30:	00db      	lsls	r3, r3, #3
 800da32:	4413      	add	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	4413      	add	r3, r2
 800da3e:	3304      	adds	r3, #4
 800da40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2201      	movs	r2, #1
 800da4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	f003 030f 	and.w	r3, r3, #15
 800da54:	b2da      	uxtb	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800da60:	2b01      	cmp	r3, #1
 800da62:	d101      	bne.n	800da68 <HAL_PCD_EP_SetStall+0x82>
 800da64:	2302      	movs	r3, #2
 800da66:	e01d      	b.n	800daa4 <HAL_PCD_EP_SetStall+0xbe>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68f9      	ldr	r1, [r7, #12]
 800da76:	4618      	mov	r0, r3
 800da78:	f005 f900 	bl	8012c7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800da7c:	78fb      	ldrb	r3, [r7, #3]
 800da7e:	f003 030f 	and.w	r3, r3, #15
 800da82:	2b00      	cmp	r3, #0
 800da84:	d109      	bne.n	800da9a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	7999      	ldrb	r1, [r3, #6]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da94:	461a      	mov	r2, r3
 800da96:	f005 faf1 	bl	801307c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	7912      	ldrb	r2, [r2, #4]
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d901      	bls.n	800daca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e042      	b.n	800db50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800daca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	da0f      	bge.n	800daf2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	f003 020f 	and.w	r2, r3, #15
 800dad8:	4613      	mov	r3, r2
 800dada:	00db      	lsls	r3, r3, #3
 800dadc:	4413      	add	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	3310      	adds	r3, #16
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	4413      	add	r3, r2
 800dae6:	3304      	adds	r3, #4
 800dae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2201      	movs	r2, #1
 800daee:	705a      	strb	r2, [r3, #1]
 800daf0:	e00f      	b.n	800db12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800daf2:	78fb      	ldrb	r3, [r7, #3]
 800daf4:	f003 020f 	and.w	r2, r3, #15
 800daf8:	4613      	mov	r3, r2
 800dafa:	00db      	lsls	r3, r3, #3
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	4413      	add	r3, r2
 800db08:	3304      	adds	r3, #4
 800db0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2200      	movs	r2, #0
 800db10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	f003 030f 	and.w	r3, r3, #15
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d101      	bne.n	800db32 <HAL_PCD_EP_ClrStall+0x86>
 800db2e:	2302      	movs	r3, #2
 800db30:	e00e      	b.n	800db50 <HAL_PCD_EP_ClrStall+0xa4>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	68f9      	ldr	r1, [r7, #12]
 800db40:	4618      	mov	r0, r3
 800db42:	f005 f909 	bl	8012d58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800db64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da0c      	bge.n	800db86 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	f003 020f 	and.w	r2, r3, #15
 800db72:	4613      	mov	r3, r2
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	4413      	add	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	3310      	adds	r3, #16
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	4413      	add	r3, r2
 800db80:	3304      	adds	r3, #4
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	e00c      	b.n	800dba0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800db86:	78fb      	ldrb	r3, [r7, #3]
 800db88:	f003 020f 	and.w	r2, r3, #15
 800db8c:	4613      	mov	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	4413      	add	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	4413      	add	r3, r2
 800db9c:	3304      	adds	r3, #4
 800db9e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68f9      	ldr	r1, [r7, #12]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f004 ff28 	bl	80129fc <USB_EPStopXfer>
 800dbac:	4603      	mov	r3, r0
 800dbae:	72fb      	strb	r3, [r7, #11]

  return ret;
 800dbb0:	7afb      	ldrb	r3, [r7, #11]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b08a      	sub	sp, #40	@ 0x28
 800dbbe:	af02      	add	r7, sp, #8
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	3310      	adds	r3, #16
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	4413      	add	r3, r2
 800dbde:	3304      	adds	r3, #4
 800dbe0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	695a      	ldr	r2, [r3, #20]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d901      	bls.n	800dbf2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e06b      	b.n	800dcca <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d902      	bls.n	800dc0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	3303      	adds	r3, #3
 800dc12:	089b      	lsrs	r3, r3, #2
 800dc14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dc16:	e02a      	b.n	800dc6e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	691a      	ldr	r2, [r3, #16]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	695b      	ldr	r3, [r3, #20]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	69fa      	ldr	r2, [r7, #28]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d902      	bls.n	800dc34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	3303      	adds	r3, #3
 800dc38:	089b      	lsrs	r3, r3, #2
 800dc3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	68d9      	ldr	r1, [r3, #12]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	4603      	mov	r3, r0
 800dc50:	6978      	ldr	r0, [r7, #20]
 800dc52:	f004 ff7d 	bl	8012b50 <USB_WritePacket>

    ep->xfer_buff  += len;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	68da      	ldr	r2, [r3, #12]
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	441a      	add	r2, r3
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	695a      	ldr	r2, [r3, #20]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	441a      	add	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	015a      	lsls	r2, r3, #5
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	4413      	add	r3, r2
 800dc76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dc7e:	69ba      	ldr	r2, [r7, #24]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d809      	bhi.n	800dc98 <PCD_WriteEmptyTxFifo+0xde>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	695a      	ldr	r2, [r3, #20]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d203      	bcs.n	800dc98 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d1bf      	bne.n	800dc18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	691a      	ldr	r2, [r3, #16]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d811      	bhi.n	800dcc8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	f003 030f 	and.w	r3, r3, #15
 800dcaa:	2201      	movs	r2, #1
 800dcac:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	43db      	mvns	r3, r3
 800dcbe:	6939      	ldr	r1, [r7, #16]
 800dcc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3720      	adds	r7, #32
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	333c      	adds	r3, #60	@ 0x3c
 800dcec:	3304      	adds	r3, #4
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	799b      	ldrb	r3, [r3, #6]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d17b      	bne.n	800de02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	f003 0308 	and.w	r3, r3, #8
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d015      	beq.n	800dd40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	4a61      	ldr	r2, [pc, #388]	@ (800de9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	f240 80b9 	bls.w	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 80b3 	beq.w	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd36:	461a      	mov	r2, r3
 800dd38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd3c:	6093      	str	r3, [r2, #8]
 800dd3e:	e0a7      	b.n	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f003 0320 	and.w	r3, r3, #32
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d009      	beq.n	800dd5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd56:	461a      	mov	r2, r3
 800dd58:	2320      	movs	r3, #32
 800dd5a:	6093      	str	r3, [r2, #8]
 800dd5c:	e098      	b.n	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f040 8093 	bne.w	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	4a4b      	ldr	r2, [pc, #300]	@ (800de9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d90f      	bls.n	800dd92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd88:	461a      	mov	r2, r3
 800dd8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd8e:	6093      	str	r3, [r2, #8]
 800dd90:	e07e      	b.n	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800dd92:	683a      	ldr	r2, [r7, #0]
 800dd94:	4613      	mov	r3, r2
 800dd96:	00db      	lsls	r3, r3, #3
 800dd98:	4413      	add	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	4413      	add	r3, r2
 800dda4:	3304      	adds	r3, #4
 800dda6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6a1a      	ldr	r2, [r3, #32]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	0159      	lsls	r1, r3, #5
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	440b      	add	r3, r1
 800ddb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddbe:	1ad2      	subs	r2, r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d114      	bne.n	800ddf4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d109      	bne.n	800dde6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6818      	ldr	r0, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dddc:	461a      	mov	r2, r3
 800ddde:	2101      	movs	r1, #1
 800dde0:	f005 f94c 	bl	801307c <USB_EP0_OutStart>
 800dde4:	e006      	b.n	800ddf4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	695b      	ldr	r3, [r3, #20]
 800ddee:	441a      	add	r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f00a ff26 	bl	8018c4c <HAL_PCD_DataOutStageCallback>
 800de00:	e046      	b.n	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	4a26      	ldr	r2, [pc, #152]	@ (800dea0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d124      	bne.n	800de54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00a      	beq.n	800de2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de20:	461a      	mov	r2, r3
 800de22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de26:	6093      	str	r3, [r2, #8]
 800de28:	e032      	b.n	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f003 0320 	and.w	r3, r3, #32
 800de30:	2b00      	cmp	r3, #0
 800de32:	d008      	beq.n	800de46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de40:	461a      	mov	r2, r3
 800de42:	2320      	movs	r3, #32
 800de44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	4619      	mov	r1, r3
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f00a fefd 	bl	8018c4c <HAL_PCD_DataOutStageCallback>
 800de52:	e01d      	b.n	800de90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d114      	bne.n	800de84 <PCD_EP_OutXfrComplete_int+0x1b0>
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	4613      	mov	r3, r2
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	440b      	add	r3, r1
 800de68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d108      	bne.n	800de84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6818      	ldr	r0, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de7c:	461a      	mov	r2, r3
 800de7e:	2100      	movs	r1, #0
 800de80:	f005 f8fc 	bl	801307c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	b2db      	uxtb	r3, r3
 800de88:	4619      	mov	r1, r3
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f00a fede 	bl	8018c4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3720      	adds	r7, #32
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	4f54300a 	.word	0x4f54300a
 800dea0:	4f54310a 	.word	0x4f54310a

0800dea4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	333c      	adds	r3, #60	@ 0x3c
 800debc:	3304      	adds	r3, #4
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	015a      	lsls	r2, r3, #5
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	4413      	add	r3, r2
 800deca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	4a15      	ldr	r2, [pc, #84]	@ (800df2c <PCD_EP_OutSetupPacket_int+0x88>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d90e      	bls.n	800def8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d009      	beq.n	800def8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	015a      	lsls	r2, r3, #5
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	4413      	add	r3, r2
 800deec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800def0:	461a      	mov	r2, r3
 800def2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800def6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f00a fe95 	bl	8018c28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4a0a      	ldr	r2, [pc, #40]	@ (800df2c <PCD_EP_OutSetupPacket_int+0x88>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d90c      	bls.n	800df20 <PCD_EP_OutSetupPacket_int+0x7c>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	799b      	ldrb	r3, [r3, #6]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d108      	bne.n	800df20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6818      	ldr	r0, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800df18:	461a      	mov	r2, r3
 800df1a:	2101      	movs	r1, #1
 800df1c:	f005 f8ae 	bl	801307c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	4f54300a 	.word	0x4f54300a

0800df30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	460b      	mov	r3, r1
 800df3a:	70fb      	strb	r3, [r7, #3]
 800df3c:	4613      	mov	r3, r2
 800df3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800df48:	78fb      	ldrb	r3, [r7, #3]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d107      	bne.n	800df5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800df4e:	883b      	ldrh	r3, [r7, #0]
 800df50:	0419      	lsls	r1, r3, #16
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	430a      	orrs	r2, r1
 800df5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800df5c:	e028      	b.n	800dfb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df64:	0c1b      	lsrs	r3, r3, #16
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	4413      	add	r3, r2
 800df6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800df6c:	2300      	movs	r3, #0
 800df6e:	73fb      	strb	r3, [r7, #15]
 800df70:	e00d      	b.n	800df8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	7bfb      	ldrb	r3, [r7, #15]
 800df78:	3340      	adds	r3, #64	@ 0x40
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	0c1b      	lsrs	r3, r3, #16
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	4413      	add	r3, r2
 800df86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800df88:	7bfb      	ldrb	r3, [r7, #15]
 800df8a:	3301      	adds	r3, #1
 800df8c:	73fb      	strb	r3, [r7, #15]
 800df8e:	7bfa      	ldrb	r2, [r7, #15]
 800df90:	78fb      	ldrb	r3, [r7, #3]
 800df92:	3b01      	subs	r3, #1
 800df94:	429a      	cmp	r2, r3
 800df96:	d3ec      	bcc.n	800df72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800df98:	883b      	ldrh	r3, [r7, #0]
 800df9a:	0418      	lsls	r0, r3, #16
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	78fb      	ldrb	r3, [r7, #3]
 800dfa2:	3b01      	subs	r3, #1
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	4302      	orrs	r2, r0
 800dfa8:	3340      	adds	r3, #64	@ 0x40
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	440b      	add	r3, r1
 800dfae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b083      	sub	sp, #12
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	887a      	ldrh	r2, [r7, #2]
 800dfd0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d101      	bne.n	800e00a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e267      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f003 0301 	and.w	r3, r3, #1
 800e012:	2b00      	cmp	r3, #0
 800e014:	d075      	beq.n	800e102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e016:	4b88      	ldr	r3, [pc, #544]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	f003 030c 	and.w	r3, r3, #12
 800e01e:	2b04      	cmp	r3, #4
 800e020:	d00c      	beq.n	800e03c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e022:	4b85      	ldr	r3, [pc, #532]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e02a:	2b08      	cmp	r3, #8
 800e02c:	d112      	bne.n	800e054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e02e:	4b82      	ldr	r3, [pc, #520]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e03a:	d10b      	bne.n	800e054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e03c:	4b7e      	ldr	r3, [pc, #504]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d05b      	beq.n	800e100 <HAL_RCC_OscConfig+0x108>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d157      	bne.n	800e100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e242      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e05c:	d106      	bne.n	800e06c <HAL_RCC_OscConfig+0x74>
 800e05e:	4b76      	ldr	r3, [pc, #472]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a75      	ldr	r2, [pc, #468]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e068:	6013      	str	r3, [r2, #0]
 800e06a:	e01d      	b.n	800e0a8 <HAL_RCC_OscConfig+0xb0>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e074:	d10c      	bne.n	800e090 <HAL_RCC_OscConfig+0x98>
 800e076:	4b70      	ldr	r3, [pc, #448]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a6f      	ldr	r2, [pc, #444]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e07c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	4b6d      	ldr	r3, [pc, #436]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a6c      	ldr	r2, [pc, #432]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	e00b      	b.n	800e0a8 <HAL_RCC_OscConfig+0xb0>
 800e090:	4b69      	ldr	r3, [pc, #420]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a68      	ldr	r2, [pc, #416]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	4b66      	ldr	r3, [pc, #408]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a65      	ldr	r2, [pc, #404]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e0a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e0a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d013      	beq.n	800e0d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0b0:	f7fd fcfa 	bl	800baa8 <HAL_GetTick>
 800e0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e0b6:	e008      	b.n	800e0ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0b8:	f7fd fcf6 	bl	800baa8 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	2b64      	cmp	r3, #100	@ 0x64
 800e0c4:	d901      	bls.n	800e0ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e0c6:	2303      	movs	r3, #3
 800e0c8:	e207      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e0ca:	4b5b      	ldr	r3, [pc, #364]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0f0      	beq.n	800e0b8 <HAL_RCC_OscConfig+0xc0>
 800e0d6:	e014      	b.n	800e102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0d8:	f7fd fce6 	bl	800baa8 <HAL_GetTick>
 800e0dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e0de:	e008      	b.n	800e0f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0e0:	f7fd fce2 	bl	800baa8 <HAL_GetTick>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	2b64      	cmp	r3, #100	@ 0x64
 800e0ec:	d901      	bls.n	800e0f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	e1f3      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e0f2:	4b51      	ldr	r3, [pc, #324]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1f0      	bne.n	800e0e0 <HAL_RCC_OscConfig+0xe8>
 800e0fe:	e000      	b.n	800e102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 0302 	and.w	r3, r3, #2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d063      	beq.n	800e1d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e10e:	4b4a      	ldr	r3, [pc, #296]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	f003 030c 	and.w	r3, r3, #12
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00b      	beq.n	800e132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e11a:	4b47      	ldr	r3, [pc, #284]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e122:	2b08      	cmp	r3, #8
 800e124:	d11c      	bne.n	800e160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e126:	4b44      	ldr	r3, [pc, #272]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d116      	bne.n	800e160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e132:	4b41      	ldr	r3, [pc, #260]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f003 0302 	and.w	r3, r3, #2
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d005      	beq.n	800e14a <HAL_RCC_OscConfig+0x152>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	2b01      	cmp	r3, #1
 800e144:	d001      	beq.n	800e14a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	e1c7      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e14a:	4b3b      	ldr	r3, [pc, #236]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	00db      	lsls	r3, r3, #3
 800e158:	4937      	ldr	r1, [pc, #220]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e15a:	4313      	orrs	r3, r2
 800e15c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e15e:	e03a      	b.n	800e1d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d020      	beq.n	800e1aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e168:	4b34      	ldr	r3, [pc, #208]	@ (800e23c <HAL_RCC_OscConfig+0x244>)
 800e16a:	2201      	movs	r2, #1
 800e16c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e16e:	f7fd fc9b 	bl	800baa8 <HAL_GetTick>
 800e172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e174:	e008      	b.n	800e188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e176:	f7fd fc97 	bl	800baa8 <HAL_GetTick>
 800e17a:	4602      	mov	r2, r0
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	2b02      	cmp	r3, #2
 800e182:	d901      	bls.n	800e188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e1a8      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e188:	4b2b      	ldr	r3, [pc, #172]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f003 0302 	and.w	r3, r3, #2
 800e190:	2b00      	cmp	r3, #0
 800e192:	d0f0      	beq.n	800e176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e194:	4b28      	ldr	r3, [pc, #160]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	4925      	ldr	r1, [pc, #148]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	600b      	str	r3, [r1, #0]
 800e1a8:	e015      	b.n	800e1d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e1aa:	4b24      	ldr	r3, [pc, #144]	@ (800e23c <HAL_RCC_OscConfig+0x244>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1b0:	f7fd fc7a 	bl	800baa8 <HAL_GetTick>
 800e1b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e1b6:	e008      	b.n	800e1ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e1b8:	f7fd fc76 	bl	800baa8 <HAL_GetTick>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d901      	bls.n	800e1ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e187      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d1f0      	bne.n	800e1b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f003 0308 	and.w	r3, r3, #8
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d036      	beq.n	800e250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d016      	beq.n	800e218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e1ea:	4b15      	ldr	r3, [pc, #84]	@ (800e240 <HAL_RCC_OscConfig+0x248>)
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1f0:	f7fd fc5a 	bl	800baa8 <HAL_GetTick>
 800e1f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e1f6:	e008      	b.n	800e20a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e1f8:	f7fd fc56 	bl	800baa8 <HAL_GetTick>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	2b02      	cmp	r3, #2
 800e204:	d901      	bls.n	800e20a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e167      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e20a:	4b0b      	ldr	r3, [pc, #44]	@ (800e238 <HAL_RCC_OscConfig+0x240>)
 800e20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0f0      	beq.n	800e1f8 <HAL_RCC_OscConfig+0x200>
 800e216:	e01b      	b.n	800e250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e218:	4b09      	ldr	r3, [pc, #36]	@ (800e240 <HAL_RCC_OscConfig+0x248>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e21e:	f7fd fc43 	bl	800baa8 <HAL_GetTick>
 800e222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e224:	e00e      	b.n	800e244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e226:	f7fd fc3f 	bl	800baa8 <HAL_GetTick>
 800e22a:	4602      	mov	r2, r0
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	2b02      	cmp	r3, #2
 800e232:	d907      	bls.n	800e244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e234:	2303      	movs	r3, #3
 800e236:	e150      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
 800e238:	40023800 	.word	0x40023800
 800e23c:	42470000 	.word	0x42470000
 800e240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e244:	4b88      	ldr	r3, [pc, #544]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e248:	f003 0302 	and.w	r3, r3, #2
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1ea      	bne.n	800e226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f003 0304 	and.w	r3, r3, #4
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 8097 	beq.w	800e38c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e25e:	2300      	movs	r3, #0
 800e260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e262:	4b81      	ldr	r3, [pc, #516]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10f      	bne.n	800e28e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e26e:	2300      	movs	r3, #0
 800e270:	60bb      	str	r3, [r7, #8]
 800e272:	4b7d      	ldr	r3, [pc, #500]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e276:	4a7c      	ldr	r2, [pc, #496]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e27c:	6413      	str	r3, [r2, #64]	@ 0x40
 800e27e:	4b7a      	ldr	r3, [pc, #488]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e286:	60bb      	str	r3, [r7, #8]
 800e288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e28a:	2301      	movs	r3, #1
 800e28c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e28e:	4b77      	ldr	r3, [pc, #476]	@ (800e46c <HAL_RCC_OscConfig+0x474>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e296:	2b00      	cmp	r3, #0
 800e298:	d118      	bne.n	800e2cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e29a:	4b74      	ldr	r3, [pc, #464]	@ (800e46c <HAL_RCC_OscConfig+0x474>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a73      	ldr	r2, [pc, #460]	@ (800e46c <HAL_RCC_OscConfig+0x474>)
 800e2a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e2a6:	f7fd fbff 	bl	800baa8 <HAL_GetTick>
 800e2aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e2ac:	e008      	b.n	800e2c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e2ae:	f7fd fbfb 	bl	800baa8 <HAL_GetTick>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d901      	bls.n	800e2c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e2bc:	2303      	movs	r3, #3
 800e2be:	e10c      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e2c0:	4b6a      	ldr	r3, [pc, #424]	@ (800e46c <HAL_RCC_OscConfig+0x474>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d0f0      	beq.n	800e2ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d106      	bne.n	800e2e2 <HAL_RCC_OscConfig+0x2ea>
 800e2d4:	4b64      	ldr	r3, [pc, #400]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e2d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2d8:	4a63      	ldr	r2, [pc, #396]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e2da:	f043 0301 	orr.w	r3, r3, #1
 800e2de:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2e0:	e01c      	b.n	800e31c <HAL_RCC_OscConfig+0x324>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	d10c      	bne.n	800e304 <HAL_RCC_OscConfig+0x30c>
 800e2ea:	4b5f      	ldr	r3, [pc, #380]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2ee:	4a5e      	ldr	r2, [pc, #376]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e2f0:	f043 0304 	orr.w	r3, r3, #4
 800e2f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2f6:	4b5c      	ldr	r3, [pc, #368]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e2f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2fa:	4a5b      	ldr	r2, [pc, #364]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e2fc:	f043 0301 	orr.w	r3, r3, #1
 800e300:	6713      	str	r3, [r2, #112]	@ 0x70
 800e302:	e00b      	b.n	800e31c <HAL_RCC_OscConfig+0x324>
 800e304:	4b58      	ldr	r3, [pc, #352]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e308:	4a57      	ldr	r2, [pc, #348]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e30a:	f023 0301 	bic.w	r3, r3, #1
 800e30e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e310:	4b55      	ldr	r3, [pc, #340]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e314:	4a54      	ldr	r2, [pc, #336]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e316:	f023 0304 	bic.w	r3, r3, #4
 800e31a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d015      	beq.n	800e350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e324:	f7fd fbc0 	bl	800baa8 <HAL_GetTick>
 800e328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e32a:	e00a      	b.n	800e342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e32c:	f7fd fbbc 	bl	800baa8 <HAL_GetTick>
 800e330:	4602      	mov	r2, r0
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d901      	bls.n	800e342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e33e:	2303      	movs	r3, #3
 800e340:	e0cb      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e342:	4b49      	ldr	r3, [pc, #292]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e346:	f003 0302 	and.w	r3, r3, #2
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0ee      	beq.n	800e32c <HAL_RCC_OscConfig+0x334>
 800e34e:	e014      	b.n	800e37a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e350:	f7fd fbaa 	bl	800baa8 <HAL_GetTick>
 800e354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e356:	e00a      	b.n	800e36e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e358:	f7fd fba6 	bl	800baa8 <HAL_GetTick>
 800e35c:	4602      	mov	r2, r0
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e366:	4293      	cmp	r3, r2
 800e368:	d901      	bls.n	800e36e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e36a:	2303      	movs	r3, #3
 800e36c:	e0b5      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e36e:	4b3e      	ldr	r3, [pc, #248]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e372:	f003 0302 	and.w	r3, r3, #2
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1ee      	bne.n	800e358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e37a:	7dfb      	ldrb	r3, [r7, #23]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d105      	bne.n	800e38c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e380:	4b39      	ldr	r3, [pc, #228]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e384:	4a38      	ldr	r2, [pc, #224]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e38a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 80a1 	beq.w	800e4d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e396:	4b34      	ldr	r3, [pc, #208]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f003 030c 	and.w	r3, r3, #12
 800e39e:	2b08      	cmp	r3, #8
 800e3a0:	d05c      	beq.n	800e45c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	699b      	ldr	r3, [r3, #24]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d141      	bne.n	800e42e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e3aa:	4b31      	ldr	r3, [pc, #196]	@ (800e470 <HAL_RCC_OscConfig+0x478>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e3b0:	f7fd fb7a 	bl	800baa8 <HAL_GetTick>
 800e3b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e3b6:	e008      	b.n	800e3ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e3b8:	f7fd fb76 	bl	800baa8 <HAL_GetTick>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d901      	bls.n	800e3ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	e087      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e3ca:	4b27      	ldr	r3, [pc, #156]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1f0      	bne.n	800e3b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	69da      	ldr	r2, [r3, #28]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	431a      	orrs	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3e4:	019b      	lsls	r3, r3, #6
 800e3e6:	431a      	orrs	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ec:	085b      	lsrs	r3, r3, #1
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	041b      	lsls	r3, r3, #16
 800e3f2:	431a      	orrs	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f8:	061b      	lsls	r3, r3, #24
 800e3fa:	491b      	ldr	r1, [pc, #108]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e400:	4b1b      	ldr	r3, [pc, #108]	@ (800e470 <HAL_RCC_OscConfig+0x478>)
 800e402:	2201      	movs	r2, #1
 800e404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e406:	f7fd fb4f 	bl	800baa8 <HAL_GetTick>
 800e40a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e40c:	e008      	b.n	800e420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e40e:	f7fd fb4b 	bl	800baa8 <HAL_GetTick>
 800e412:	4602      	mov	r2, r0
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	2b02      	cmp	r3, #2
 800e41a:	d901      	bls.n	800e420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e41c:	2303      	movs	r3, #3
 800e41e:	e05c      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e420:	4b11      	ldr	r3, [pc, #68]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d0f0      	beq.n	800e40e <HAL_RCC_OscConfig+0x416>
 800e42c:	e054      	b.n	800e4d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e42e:	4b10      	ldr	r3, [pc, #64]	@ (800e470 <HAL_RCC_OscConfig+0x478>)
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e434:	f7fd fb38 	bl	800baa8 <HAL_GetTick>
 800e438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e43a:	e008      	b.n	800e44e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e43c:	f7fd fb34 	bl	800baa8 <HAL_GetTick>
 800e440:	4602      	mov	r2, r0
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	2b02      	cmp	r3, #2
 800e448:	d901      	bls.n	800e44e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e44a:	2303      	movs	r3, #3
 800e44c:	e045      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e44e:	4b06      	ldr	r3, [pc, #24]	@ (800e468 <HAL_RCC_OscConfig+0x470>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1f0      	bne.n	800e43c <HAL_RCC_OscConfig+0x444>
 800e45a:	e03d      	b.n	800e4d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d107      	bne.n	800e474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	e038      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
 800e468:	40023800 	.word	0x40023800
 800e46c:	40007000 	.word	0x40007000
 800e470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e474:	4b1b      	ldr	r3, [pc, #108]	@ (800e4e4 <HAL_RCC_OscConfig+0x4ec>)
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	699b      	ldr	r3, [r3, #24]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d028      	beq.n	800e4d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d121      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d11a      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e4aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d111      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ba:	085b      	lsrs	r3, r3, #1
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d107      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d001      	beq.n	800e4d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e000      	b.n	800e4da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3718      	adds	r7, #24
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	40023800 	.word	0x40023800

0800e4e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e0cc      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e4fc:	4b68      	ldr	r3, [pc, #416]	@ (800e6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0307 	and.w	r3, r3, #7
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	429a      	cmp	r2, r3
 800e508:	d90c      	bls.n	800e524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e50a:	4b65      	ldr	r3, [pc, #404]	@ (800e6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	b2d2      	uxtb	r2, r2
 800e510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e512:	4b63      	ldr	r3, [pc, #396]	@ (800e6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f003 0307 	and.w	r3, r3, #7
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d001      	beq.n	800e524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	e0b8      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 0302 	and.w	r3, r3, #2
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d020      	beq.n	800e572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f003 0304 	and.w	r3, r3, #4
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d005      	beq.n	800e548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e53c:	4b59      	ldr	r3, [pc, #356]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	4a58      	ldr	r2, [pc, #352]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f003 0308 	and.w	r3, r3, #8
 800e550:	2b00      	cmp	r3, #0
 800e552:	d005      	beq.n	800e560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e554:	4b53      	ldr	r3, [pc, #332]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	4a52      	ldr	r2, [pc, #328]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e55a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e55e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e560:	4b50      	ldr	r3, [pc, #320]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	494d      	ldr	r1, [pc, #308]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e56e:	4313      	orrs	r3, r2
 800e570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d044      	beq.n	800e608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d107      	bne.n	800e596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e586:	4b47      	ldr	r3, [pc, #284]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d119      	bne.n	800e5c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e07f      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d003      	beq.n	800e5a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e5a2:	2b03      	cmp	r3, #3
 800e5a4:	d107      	bne.n	800e5b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5a6:	4b3f      	ldr	r3, [pc, #252]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d109      	bne.n	800e5c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e06f      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5b6:	4b3b      	ldr	r3, [pc, #236]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e067      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e5c6:	4b37      	ldr	r3, [pc, #220]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	f023 0203 	bic.w	r2, r3, #3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	4934      	ldr	r1, [pc, #208]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e5d8:	f7fd fa66 	bl	800baa8 <HAL_GetTick>
 800e5dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5de:	e00a      	b.n	800e5f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5e0:	f7fd fa62 	bl	800baa8 <HAL_GetTick>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d901      	bls.n	800e5f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	e04f      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5f6:	4b2b      	ldr	r3, [pc, #172]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f003 020c 	and.w	r2, r3, #12
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	429a      	cmp	r2, r3
 800e606:	d1eb      	bne.n	800e5e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e608:	4b25      	ldr	r3, [pc, #148]	@ (800e6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f003 0307 	and.w	r3, r3, #7
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d20c      	bcs.n	800e630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e616:	4b22      	ldr	r3, [pc, #136]	@ (800e6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e61e:	4b20      	ldr	r3, [pc, #128]	@ (800e6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0307 	and.w	r3, r3, #7
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d001      	beq.n	800e630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e62c:	2301      	movs	r3, #1
 800e62e:	e032      	b.n	800e696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d008      	beq.n	800e64e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e63c:	4b19      	ldr	r3, [pc, #100]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	4916      	ldr	r1, [pc, #88]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e64a:	4313      	orrs	r3, r2
 800e64c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0308 	and.w	r3, r3, #8
 800e656:	2b00      	cmp	r3, #0
 800e658:	d009      	beq.n	800e66e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e65a:	4b12      	ldr	r3, [pc, #72]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	490e      	ldr	r1, [pc, #56]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e66a:	4313      	orrs	r3, r2
 800e66c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e66e:	f000 f821 	bl	800e6b4 <HAL_RCC_GetSysClockFreq>
 800e672:	4602      	mov	r2, r0
 800e674:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	091b      	lsrs	r3, r3, #4
 800e67a:	f003 030f 	and.w	r3, r3, #15
 800e67e:	490a      	ldr	r1, [pc, #40]	@ (800e6a8 <HAL_RCC_ClockConfig+0x1c0>)
 800e680:	5ccb      	ldrb	r3, [r1, r3]
 800e682:	fa22 f303 	lsr.w	r3, r2, r3
 800e686:	4a09      	ldr	r2, [pc, #36]	@ (800e6ac <HAL_RCC_ClockConfig+0x1c4>)
 800e688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e68a:	4b09      	ldr	r3, [pc, #36]	@ (800e6b0 <HAL_RCC_ClockConfig+0x1c8>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fc fa3e 	bl	800ab10 <HAL_InitTick>

  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	40023c00 	.word	0x40023c00
 800e6a4:	40023800 	.word	0x40023800
 800e6a8:	0802204c 	.word	0x0802204c
 800e6ac:	20000054 	.word	0x20000054
 800e6b0:	20000058 	.word	0x20000058

0800e6b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e6b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e6b8:	b094      	sub	sp, #80	@ 0x50
 800e6ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e6cc:	4b79      	ldr	r3, [pc, #484]	@ (800e8b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	f003 030c 	and.w	r3, r3, #12
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d00d      	beq.n	800e6f4 <HAL_RCC_GetSysClockFreq+0x40>
 800e6d8:	2b08      	cmp	r3, #8
 800e6da:	f200 80e1 	bhi.w	800e8a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <HAL_RCC_GetSysClockFreq+0x34>
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	d003      	beq.n	800e6ee <HAL_RCC_GetSysClockFreq+0x3a>
 800e6e6:	e0db      	b.n	800e8a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e6e8:	4b73      	ldr	r3, [pc, #460]	@ (800e8b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800e6ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e6ec:	e0db      	b.n	800e8a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e6ee:	4b73      	ldr	r3, [pc, #460]	@ (800e8bc <HAL_RCC_GetSysClockFreq+0x208>)
 800e6f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e6f2:	e0d8      	b.n	800e8a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e6f4:	4b6f      	ldr	r3, [pc, #444]	@ (800e8b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e6fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e6fe:	4b6d      	ldr	r3, [pc, #436]	@ (800e8b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d063      	beq.n	800e7d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e70a:	4b6a      	ldr	r3, [pc, #424]	@ (800e8b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	099b      	lsrs	r3, r3, #6
 800e710:	2200      	movs	r2, #0
 800e712:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e714:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e71c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e71e:	2300      	movs	r3, #0
 800e720:	637b      	str	r3, [r7, #52]	@ 0x34
 800e722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e726:	4622      	mov	r2, r4
 800e728:	462b      	mov	r3, r5
 800e72a:	f04f 0000 	mov.w	r0, #0
 800e72e:	f04f 0100 	mov.w	r1, #0
 800e732:	0159      	lsls	r1, r3, #5
 800e734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e738:	0150      	lsls	r0, r2, #5
 800e73a:	4602      	mov	r2, r0
 800e73c:	460b      	mov	r3, r1
 800e73e:	4621      	mov	r1, r4
 800e740:	1a51      	subs	r1, r2, r1
 800e742:	6139      	str	r1, [r7, #16]
 800e744:	4629      	mov	r1, r5
 800e746:	eb63 0301 	sbc.w	r3, r3, r1
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	f04f 0200 	mov.w	r2, #0
 800e750:	f04f 0300 	mov.w	r3, #0
 800e754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e758:	4659      	mov	r1, fp
 800e75a:	018b      	lsls	r3, r1, #6
 800e75c:	4651      	mov	r1, sl
 800e75e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e762:	4651      	mov	r1, sl
 800e764:	018a      	lsls	r2, r1, #6
 800e766:	4651      	mov	r1, sl
 800e768:	ebb2 0801 	subs.w	r8, r2, r1
 800e76c:	4659      	mov	r1, fp
 800e76e:	eb63 0901 	sbc.w	r9, r3, r1
 800e772:	f04f 0200 	mov.w	r2, #0
 800e776:	f04f 0300 	mov.w	r3, #0
 800e77a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e77e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e786:	4690      	mov	r8, r2
 800e788:	4699      	mov	r9, r3
 800e78a:	4623      	mov	r3, r4
 800e78c:	eb18 0303 	adds.w	r3, r8, r3
 800e790:	60bb      	str	r3, [r7, #8]
 800e792:	462b      	mov	r3, r5
 800e794:	eb49 0303 	adc.w	r3, r9, r3
 800e798:	60fb      	str	r3, [r7, #12]
 800e79a:	f04f 0200 	mov.w	r2, #0
 800e79e:	f04f 0300 	mov.w	r3, #0
 800e7a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	024b      	lsls	r3, r1, #9
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	024a      	lsls	r2, r1, #9
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e7c4:	f7f2 fa70 	bl	8000ca8 <__aeabi_uldivmod>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7d0:	e058      	b.n	800e884 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e7d2:	4b38      	ldr	r3, [pc, #224]	@ (800e8b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	099b      	lsrs	r3, r3, #6
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4618      	mov	r0, r3
 800e7dc:	4611      	mov	r1, r2
 800e7de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e7e2:	623b      	str	r3, [r7, #32]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e7ec:	4642      	mov	r2, r8
 800e7ee:	464b      	mov	r3, r9
 800e7f0:	f04f 0000 	mov.w	r0, #0
 800e7f4:	f04f 0100 	mov.w	r1, #0
 800e7f8:	0159      	lsls	r1, r3, #5
 800e7fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7fe:	0150      	lsls	r0, r2, #5
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	4641      	mov	r1, r8
 800e806:	ebb2 0a01 	subs.w	sl, r2, r1
 800e80a:	4649      	mov	r1, r9
 800e80c:	eb63 0b01 	sbc.w	fp, r3, r1
 800e810:	f04f 0200 	mov.w	r2, #0
 800e814:	f04f 0300 	mov.w	r3, #0
 800e818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e81c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e824:	ebb2 040a 	subs.w	r4, r2, sl
 800e828:	eb63 050b 	sbc.w	r5, r3, fp
 800e82c:	f04f 0200 	mov.w	r2, #0
 800e830:	f04f 0300 	mov.w	r3, #0
 800e834:	00eb      	lsls	r3, r5, #3
 800e836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e83a:	00e2      	lsls	r2, r4, #3
 800e83c:	4614      	mov	r4, r2
 800e83e:	461d      	mov	r5, r3
 800e840:	4643      	mov	r3, r8
 800e842:	18e3      	adds	r3, r4, r3
 800e844:	603b      	str	r3, [r7, #0]
 800e846:	464b      	mov	r3, r9
 800e848:	eb45 0303 	adc.w	r3, r5, r3
 800e84c:	607b      	str	r3, [r7, #4]
 800e84e:	f04f 0200 	mov.w	r2, #0
 800e852:	f04f 0300 	mov.w	r3, #0
 800e856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e85a:	4629      	mov	r1, r5
 800e85c:	028b      	lsls	r3, r1, #10
 800e85e:	4621      	mov	r1, r4
 800e860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e864:	4621      	mov	r1, r4
 800e866:	028a      	lsls	r2, r1, #10
 800e868:	4610      	mov	r0, r2
 800e86a:	4619      	mov	r1, r3
 800e86c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e86e:	2200      	movs	r2, #0
 800e870:	61bb      	str	r3, [r7, #24]
 800e872:	61fa      	str	r2, [r7, #28]
 800e874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e878:	f7f2 fa16 	bl	8000ca8 <__aeabi_uldivmod>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4613      	mov	r3, r2
 800e882:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e884:	4b0b      	ldr	r3, [pc, #44]	@ (800e8b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	0c1b      	lsrs	r3, r3, #16
 800e88a:	f003 0303 	and.w	r3, r3, #3
 800e88e:	3301      	adds	r3, #1
 800e890:	005b      	lsls	r3, r3, #1
 800e892:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800e894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e898:	fbb2 f3f3 	udiv	r3, r2, r3
 800e89c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e89e:	e002      	b.n	800e8a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e8a0:	4b05      	ldr	r3, [pc, #20]	@ (800e8b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800e8a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e8a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e8a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3750      	adds	r7, #80	@ 0x50
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8b2:	bf00      	nop
 800e8b4:	40023800 	.word	0x40023800
 800e8b8:	00f42400 	.word	0x00f42400
 800e8bc:	007a1200 	.word	0x007a1200

0800e8c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e8c4:	4b03      	ldr	r3, [pc, #12]	@ (800e8d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	20000054 	.word	0x20000054

0800e8d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e8dc:	f7ff fff0 	bl	800e8c0 <HAL_RCC_GetHCLKFreq>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	4b05      	ldr	r3, [pc, #20]	@ (800e8f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	0a9b      	lsrs	r3, r3, #10
 800e8e8:	f003 0307 	and.w	r3, r3, #7
 800e8ec:	4903      	ldr	r1, [pc, #12]	@ (800e8fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e8ee:	5ccb      	ldrb	r3, [r1, r3]
 800e8f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	40023800 	.word	0x40023800
 800e8fc:	0802205c 	.word	0x0802205c

0800e900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e904:	f7ff ffdc 	bl	800e8c0 <HAL_RCC_GetHCLKFreq>
 800e908:	4602      	mov	r2, r0
 800e90a:	4b05      	ldr	r3, [pc, #20]	@ (800e920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	0b5b      	lsrs	r3, r3, #13
 800e910:	f003 0307 	and.w	r3, r3, #7
 800e914:	4903      	ldr	r1, [pc, #12]	@ (800e924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e916:	5ccb      	ldrb	r3, [r1, r3]
 800e918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	40023800 	.word	0x40023800
 800e924:	0802205c 	.word	0x0802205c

0800e928 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	220f      	movs	r2, #15
 800e936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e938:	4b12      	ldr	r3, [pc, #72]	@ (800e984 <HAL_RCC_GetClockConfig+0x5c>)
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	f003 0203 	and.w	r2, r3, #3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e944:	4b0f      	ldr	r3, [pc, #60]	@ (800e984 <HAL_RCC_GetClockConfig+0x5c>)
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e950:	4b0c      	ldr	r3, [pc, #48]	@ (800e984 <HAL_RCC_GetClockConfig+0x5c>)
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e95c:	4b09      	ldr	r3, [pc, #36]	@ (800e984 <HAL_RCC_GetClockConfig+0x5c>)
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	08db      	lsrs	r3, r3, #3
 800e962:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e96a:	4b07      	ldr	r3, [pc, #28]	@ (800e988 <HAL_RCC_GetClockConfig+0x60>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f003 0207 	and.w	r2, r3, #7
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	601a      	str	r2, [r3, #0]
}
 800e976:	bf00      	nop
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	40023800 	.word	0x40023800
 800e988:	40023c00 	.word	0x40023c00

0800e98c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d101      	bne.n	800e99e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e07b      	b.n	800ea96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d108      	bne.n	800e9b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e9ae:	d009      	beq.n	800e9c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	61da      	str	r2, [r3, #28]
 800e9b6:	e005      	b.n	800e9c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7fc f822 	bl	800aa28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e9fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ea0c:	431a      	orrs	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea16:	431a      	orrs	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	f003 0302 	and.w	r3, r3, #2
 800ea20:	431a      	orrs	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	695b      	ldr	r3, [r3, #20]
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	431a      	orrs	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	699b      	ldr	r3, [r3, #24]
 800ea30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea34:	431a      	orrs	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	69db      	ldr	r3, [r3, #28]
 800ea3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea3e:	431a      	orrs	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6a1b      	ldr	r3, [r3, #32]
 800ea44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea48:	ea42 0103 	orr.w	r1, r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	430a      	orrs	r2, r1
 800ea5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	0c1b      	lsrs	r3, r3, #16
 800ea62:	f003 0104 	and.w	r1, r3, #4
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea6a:	f003 0210 	and.w	r2, r3, #16
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	430a      	orrs	r2, r1
 800ea74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	69da      	ldr	r2, [r3, #28]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ea84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b088      	sub	sp, #32
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	60f8      	str	r0, [r7, #12]
 800eaa6:	60b9      	str	r1, [r7, #8]
 800eaa8:	603b      	str	r3, [r7, #0]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eaae:	f7fc fffb 	bl	800baa8 <HAL_GetTick>
 800eab2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d001      	beq.n	800eac8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800eac4:	2302      	movs	r3, #2
 800eac6:	e12a      	b.n	800ed1e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <HAL_SPI_Transmit+0x36>
 800eace:	88fb      	ldrh	r3, [r7, #6]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	e122      	b.n	800ed1e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d101      	bne.n	800eae6 <HAL_SPI_Transmit+0x48>
 800eae2:	2302      	movs	r3, #2
 800eae4:	e11b      	b.n	800ed1e <HAL_SPI_Transmit+0x280>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2203      	movs	r2, #3
 800eaf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	88fa      	ldrh	r2, [r7, #6]
 800eb06:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	88fa      	ldrh	r2, [r7, #6]
 800eb0c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2200      	movs	r2, #0
 800eb24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb34:	d10f      	bne.n	800eb56 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb60:	2b40      	cmp	r3, #64	@ 0x40
 800eb62:	d007      	beq.n	800eb74 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb7c:	d152      	bne.n	800ec24 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d002      	beq.n	800eb8c <HAL_SPI_Transmit+0xee>
 800eb86:	8b7b      	ldrh	r3, [r7, #26]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d145      	bne.n	800ec18 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb90:	881a      	ldrh	r2, [r3, #0]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb9c:	1c9a      	adds	r2, r3, #2
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ebb0:	e032      	b.n	800ec18 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	f003 0302 	and.w	r3, r3, #2
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d112      	bne.n	800ebe6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebc4:	881a      	ldrh	r2, [r3, #0]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebd0:	1c9a      	adds	r2, r3, #2
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	b29a      	uxth	r2, r3
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ebe4:	e018      	b.n	800ec18 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebe6:	f7fc ff5f 	bl	800baa8 <HAL_GetTick>
 800ebea:	4602      	mov	r2, r0
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	683a      	ldr	r2, [r7, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d803      	bhi.n	800ebfe <HAL_SPI_Transmit+0x160>
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfc:	d102      	bne.n	800ec04 <HAL_SPI_Transmit+0x166>
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d109      	bne.n	800ec18 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e082      	b.n	800ed1e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1c7      	bne.n	800ebb2 <HAL_SPI_Transmit+0x114>
 800ec22:	e053      	b.n	800eccc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <HAL_SPI_Transmit+0x194>
 800ec2c:	8b7b      	ldrh	r3, [r7, #26]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d147      	bne.n	800ecc2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	330c      	adds	r3, #12
 800ec3c:	7812      	ldrb	r2, [r2, #0]
 800ec3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	3b01      	subs	r3, #1
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ec58:	e033      	b.n	800ecc2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	f003 0302 	and.w	r3, r3, #2
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d113      	bne.n	800ec90 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	330c      	adds	r3, #12
 800ec72:	7812      	ldrb	r2, [r2, #0]
 800ec74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	3b01      	subs	r3, #1
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ec8e:	e018      	b.n	800ecc2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec90:	f7fc ff0a 	bl	800baa8 <HAL_GetTick>
 800ec94:	4602      	mov	r2, r0
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d803      	bhi.n	800eca8 <HAL_SPI_Transmit+0x20a>
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	d102      	bne.n	800ecae <HAL_SPI_Transmit+0x210>
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d109      	bne.n	800ecc2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	e02d      	b.n	800ed1e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1c6      	bne.n	800ec5a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eccc:	69fa      	ldr	r2, [r7, #28]
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f000 fbd9 	bl	800f488 <SPI_EndRxTxTransaction>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2220      	movs	r2, #32
 800ece0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10a      	bne.n	800ed00 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ecea:	2300      	movs	r3, #0
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	617b      	str	r3, [r7, #20]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	617b      	str	r3, [r7, #20]
 800ecfe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e000      	b.n	800ed1e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ed1c:	2300      	movs	r3, #0
  }
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3720      	adds	r7, #32
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b088      	sub	sp, #32
 800ed2a:	af02      	add	r7, sp, #8
 800ed2c:	60f8      	str	r0, [r7, #12]
 800ed2e:	60b9      	str	r1, [r7, #8]
 800ed30:	603b      	str	r3, [r7, #0]
 800ed32:	4613      	mov	r3, r2
 800ed34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d001      	beq.n	800ed46 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800ed42:	2302      	movs	r3, #2
 800ed44:	e104      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed4e:	d112      	bne.n	800ed76 <HAL_SPI_Receive+0x50>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10e      	bne.n	800ed76 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2204      	movs	r2, #4
 800ed5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ed60:	88fa      	ldrh	r2, [r7, #6]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	4613      	mov	r3, r2
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	68b9      	ldr	r1, [r7, #8]
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f000 f8f3 	bl	800ef58 <HAL_SPI_TransmitReceive>
 800ed72:	4603      	mov	r3, r0
 800ed74:	e0ec      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed76:	f7fc fe97 	bl	800baa8 <HAL_GetTick>
 800ed7a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <HAL_SPI_Receive+0x62>
 800ed82:	88fb      	ldrh	r3, [r7, #6]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d101      	bne.n	800ed8c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e0e1      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d101      	bne.n	800ed9a <HAL_SPI_Receive+0x74>
 800ed96:	2302      	movs	r3, #2
 800ed98:	e0da      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2204      	movs	r2, #4
 800eda6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	88fa      	ldrh	r2, [r7, #6]
 800edba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	88fa      	ldrh	r2, [r7, #6]
 800edc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2200      	movs	r2, #0
 800edc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2200      	movs	r2, #0
 800edd2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2200      	movs	r2, #0
 800edd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ede8:	d10f      	bne.n	800ee0a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800edf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ee08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee14:	2b40      	cmp	r3, #64	@ 0x40
 800ee16:	d007      	beq.n	800ee28 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d170      	bne.n	800ef12 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ee30:	e035      	b.n	800ee9e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d115      	bne.n	800ee6c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f103 020c 	add.w	r2, r3, #12
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee4c:	7812      	ldrb	r2, [r2, #0]
 800ee4e:	b2d2      	uxtb	r2, r2
 800ee50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee56:	1c5a      	adds	r2, r3, #1
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	3b01      	subs	r3, #1
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ee6a:	e018      	b.n	800ee9e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee6c:	f7fc fe1c 	bl	800baa8 <HAL_GetTick>
 800ee70:	4602      	mov	r2, r0
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d803      	bhi.n	800ee84 <HAL_SPI_Receive+0x15e>
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee82:	d102      	bne.n	800ee8a <HAL_SPI_Receive+0x164>
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e058      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1c4      	bne.n	800ee32 <HAL_SPI_Receive+0x10c>
 800eea8:	e038      	b.n	800ef1c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	f003 0301 	and.w	r3, r3, #1
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d113      	bne.n	800eee0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68da      	ldr	r2, [r3, #12]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eec2:	b292      	uxth	r2, r2
 800eec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeca:	1c9a      	adds	r2, r3, #2
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	3b01      	subs	r3, #1
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800eede:	e018      	b.n	800ef12 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eee0:	f7fc fde2 	bl	800baa8 <HAL_GetTick>
 800eee4:	4602      	mov	r2, r0
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	683a      	ldr	r2, [r7, #0]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d803      	bhi.n	800eef8 <HAL_SPI_Receive+0x1d2>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef6:	d102      	bne.n	800eefe <HAL_SPI_Receive+0x1d8>
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d109      	bne.n	800ef12 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ef0e:	2303      	movs	r3, #3
 800ef10:	e01e      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1c6      	bne.n	800eeaa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef1c:	697a      	ldr	r2, [r7, #20]
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f000 fa4b 	bl	800f3bc <SPI_EndRxTransaction>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2220      	movs	r2, #32
 800ef30:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e000      	b.n	800ef50 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
  }
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08a      	sub	sp, #40	@ 0x28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ef66:	2301      	movs	r3, #1
 800ef68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef6a:	f7fc fd9d 	bl	800baa8 <HAL_GetTick>
 800ef6e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef76:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ef7e:	887b      	ldrh	r3, [r7, #2]
 800ef80:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ef82:	7ffb      	ldrb	r3, [r7, #31]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d00c      	beq.n	800efa2 <HAL_SPI_TransmitReceive+0x4a>
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ef8e:	d106      	bne.n	800ef9e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d102      	bne.n	800ef9e <HAL_SPI_TransmitReceive+0x46>
 800ef98:	7ffb      	ldrb	r3, [r7, #31]
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	d001      	beq.n	800efa2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800ef9e:	2302      	movs	r3, #2
 800efa0:	e17f      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d005      	beq.n	800efb4 <HAL_SPI_TransmitReceive+0x5c>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d002      	beq.n	800efb4 <HAL_SPI_TransmitReceive+0x5c>
 800efae:	887b      	ldrh	r3, [r7, #2]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d101      	bne.n	800efb8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	e174      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d101      	bne.n	800efc6 <HAL_SPI_TransmitReceive+0x6e>
 800efc2:	2302      	movs	r3, #2
 800efc4:	e16d      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2201      	movs	r2, #1
 800efca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b04      	cmp	r3, #4
 800efd8:	d003      	beq.n	800efe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2205      	movs	r2, #5
 800efde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2200      	movs	r2, #0
 800efe6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	887a      	ldrh	r2, [r7, #2]
 800eff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	887a      	ldrh	r2, [r7, #2]
 800eff8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	887a      	ldrh	r2, [r7, #2]
 800f004:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	887a      	ldrh	r2, [r7, #2]
 800f00a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2200      	movs	r2, #0
 800f010:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f022:	2b40      	cmp	r3, #64	@ 0x40
 800f024:	d007      	beq.n	800f036 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f034:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f03e:	d17e      	bne.n	800f13e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <HAL_SPI_TransmitReceive+0xf6>
 800f048:	8afb      	ldrh	r3, [r7, #22]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d16c      	bne.n	800f128 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f052:	881a      	ldrh	r2, [r3, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f05e:	1c9a      	adds	r2, r3, #2
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f068:	b29b      	uxth	r3, r3
 800f06a:	3b01      	subs	r3, #1
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f072:	e059      	b.n	800f128 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	689b      	ldr	r3, [r3, #8]
 800f07a:	f003 0302 	and.w	r3, r3, #2
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d11b      	bne.n	800f0ba <HAL_SPI_TransmitReceive+0x162>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f086:	b29b      	uxth	r3, r3
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d016      	beq.n	800f0ba <HAL_SPI_TransmitReceive+0x162>
 800f08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d113      	bne.n	800f0ba <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f096:	881a      	ldrh	r2, [r3, #0]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0a2:	1c9a      	adds	r2, r3, #2
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	f003 0301 	and.w	r3, r3, #1
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d119      	bne.n	800f0fc <HAL_SPI_TransmitReceive+0x1a4>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d014      	beq.n	800f0fc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68da      	ldr	r2, [r3, #12]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0dc:	b292      	uxth	r2, r2
 800f0de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0e4:	1c9a      	adds	r2, r3, #2
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f0fc:	f7fc fcd4 	bl	800baa8 <HAL_GetTick>
 800f100:	4602      	mov	r2, r0
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f108:	429a      	cmp	r2, r3
 800f10a:	d80d      	bhi.n	800f128 <HAL_SPI_TransmitReceive+0x1d0>
 800f10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f112:	d009      	beq.n	800f128 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2201      	movs	r2, #1
 800f118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	e0bc      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1a0      	bne.n	800f074 <HAL_SPI_TransmitReceive+0x11c>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f136:	b29b      	uxth	r3, r3
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d19b      	bne.n	800f074 <HAL_SPI_TransmitReceive+0x11c>
 800f13c:	e082      	b.n	800f244 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d002      	beq.n	800f14c <HAL_SPI_TransmitReceive+0x1f4>
 800f146:	8afb      	ldrh	r3, [r7, #22]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d171      	bne.n	800f230 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	330c      	adds	r3, #12
 800f156:	7812      	ldrb	r2, [r2, #0]
 800f158:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f15e:	1c5a      	adds	r2, r3, #1
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f168:	b29b      	uxth	r3, r3
 800f16a:	3b01      	subs	r3, #1
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f172:	e05d      	b.n	800f230 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	f003 0302 	and.w	r3, r3, #2
 800f17e:	2b02      	cmp	r3, #2
 800f180:	d11c      	bne.n	800f1bc <HAL_SPI_TransmitReceive+0x264>
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f186:	b29b      	uxth	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d017      	beq.n	800f1bc <HAL_SPI_TransmitReceive+0x264>
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d114      	bne.n	800f1bc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	330c      	adds	r3, #12
 800f19c:	7812      	ldrb	r2, [r2, #0]
 800f19e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1a4:	1c5a      	adds	r2, r3, #1
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d119      	bne.n	800f1fe <HAL_SPI_TransmitReceive+0x2a6>
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d014      	beq.n	800f1fe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68da      	ldr	r2, [r3, #12]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1de:	b2d2      	uxtb	r2, r2
 800f1e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f1fe:	f7fc fc53 	bl	800baa8 <HAL_GetTick>
 800f202:	4602      	mov	r2, r0
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d803      	bhi.n	800f216 <HAL_SPI_TransmitReceive+0x2be>
 800f20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f214:	d102      	bne.n	800f21c <HAL_SPI_TransmitReceive+0x2c4>
 800f216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d109      	bne.n	800f230 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2201      	movs	r2, #1
 800f220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2200      	movs	r2, #0
 800f228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f22c:	2303      	movs	r3, #3
 800f22e:	e038      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f234:	b29b      	uxth	r3, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	d19c      	bne.n	800f174 <HAL_SPI_TransmitReceive+0x21c>
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f23e:	b29b      	uxth	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d197      	bne.n	800f174 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f244:	6a3a      	ldr	r2, [r7, #32]
 800f246:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f000 f91d 	bl	800f488 <SPI_EndRxTxTransaction>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d008      	beq.n	800f266 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2220      	movs	r2, #32
 800f258:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	e01d      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10a      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f26e:	2300      	movs	r3, #0
 800f270:	613b      	str	r3, [r7, #16]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	613b      	str	r3, [r7, #16]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	613b      	str	r3, [r7, #16]
 800f282:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2201      	movs	r2, #1
 800f288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e000      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
  }
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3728      	adds	r7, #40	@ 0x28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
	...

0800f2ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b088      	sub	sp, #32
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	603b      	str	r3, [r7, #0]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f2bc:	f7fc fbf4 	bl	800baa8 <HAL_GetTick>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c4:	1a9b      	subs	r3, r3, r2
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f2cc:	f7fc fbec 	bl	800baa8 <HAL_GetTick>
 800f2d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f2d2:	4b39      	ldr	r3, [pc, #228]	@ (800f3b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	015b      	lsls	r3, r3, #5
 800f2d8:	0d1b      	lsrs	r3, r3, #20
 800f2da:	69fa      	ldr	r2, [r7, #28]
 800f2dc:	fb02 f303 	mul.w	r3, r2, r3
 800f2e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f2e2:	e054      	b.n	800f38e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ea:	d050      	beq.n	800f38e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f2ec:	f7fc fbdc 	bl	800baa8 <HAL_GetTick>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	1ad3      	subs	r3, r2, r3
 800f2f6:	69fa      	ldr	r2, [r7, #28]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d902      	bls.n	800f302 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d13d      	bne.n	800f37e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	685a      	ldr	r2, [r3, #4]
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f31a:	d111      	bne.n	800f340 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f324:	d004      	beq.n	800f330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f32e:	d107      	bne.n	800f340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f33e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f348:	d10f      	bne.n	800f36a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f358:	601a      	str	r2, [r3, #0]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2200      	movs	r2, #0
 800f376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f37a:	2303      	movs	r3, #3
 800f37c:	e017      	b.n	800f3ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d101      	bne.n	800f388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f384:	2300      	movs	r3, #0
 800f386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	3b01      	subs	r3, #1
 800f38c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	689a      	ldr	r2, [r3, #8]
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	4013      	ands	r3, r2
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	bf0c      	ite	eq
 800f39e:	2301      	moveq	r3, #1
 800f3a0:	2300      	movne	r3, #0
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	79fb      	ldrb	r3, [r7, #7]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d19b      	bne.n	800f2e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3720      	adds	r7, #32
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20000054 	.word	0x20000054

0800f3bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af02      	add	r7, sp, #8
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f3d0:	d111      	bne.n	800f3f6 <SPI_EndRxTransaction+0x3a>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3da:	d004      	beq.n	800f3e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f3e4:	d107      	bne.n	800f3f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f3f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f3fe:	d12a      	bne.n	800f456 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f408:	d012      	beq.n	800f430 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2200      	movs	r2, #0
 800f412:	2180      	movs	r1, #128	@ 0x80
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f7ff ff49 	bl	800f2ac <SPI_WaitFlagStateUntilTimeout>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d02d      	beq.n	800f47c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f424:	f043 0220 	orr.w	r2, r3, #32
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f42c:	2303      	movs	r3, #3
 800f42e:	e026      	b.n	800f47e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	2200      	movs	r2, #0
 800f438:	2101      	movs	r1, #1
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7ff ff36 	bl	800f2ac <SPI_WaitFlagStateUntilTimeout>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d01a      	beq.n	800f47c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f44a:	f043 0220 	orr.w	r2, r3, #32
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f452:	2303      	movs	r3, #3
 800f454:	e013      	b.n	800f47e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2200      	movs	r2, #0
 800f45e:	2101      	movs	r1, #1
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff ff23 	bl	800f2ac <SPI_WaitFlagStateUntilTimeout>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d007      	beq.n	800f47c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f470:	f043 0220 	orr.w	r2, r3, #32
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f478:	2303      	movs	r3, #3
 800f47a:	e000      	b.n	800f47e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
	...

0800f488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b088      	sub	sp, #32
 800f48c:	af02      	add	r7, sp, #8
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2201      	movs	r2, #1
 800f49c:	2102      	movs	r1, #2
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7ff ff04 	bl	800f2ac <SPI_WaitFlagStateUntilTimeout>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d007      	beq.n	800f4ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4ae:	f043 0220 	orr.w	r2, r3, #32
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	e032      	b.n	800f520 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f4ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f528 <SPI_EndRxTxTransaction+0xa0>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a1b      	ldr	r2, [pc, #108]	@ (800f52c <SPI_EndRxTxTransaction+0xa4>)
 800f4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c4:	0d5b      	lsrs	r3, r3, #21
 800f4c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f4ca:	fb02 f303 	mul.w	r3, r2, r3
 800f4ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f4d8:	d112      	bne.n	800f500 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2180      	movs	r1, #128	@ 0x80
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7ff fee1 	bl	800f2ac <SPI_WaitFlagStateUntilTimeout>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d016      	beq.n	800f51e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4f4:	f043 0220 	orr.w	r2, r3, #32
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e00f      	b.n	800f520 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00a      	beq.n	800f51c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	3b01      	subs	r3, #1
 800f50a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f516:	2b80      	cmp	r3, #128	@ 0x80
 800f518:	d0f2      	beq.n	800f500 <SPI_EndRxTxTransaction+0x78>
 800f51a:	e000      	b.n	800f51e <SPI_EndRxTxTransaction+0x96>
        break;
 800f51c:	bf00      	nop
  }

  return HAL_OK;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20000054 	.word	0x20000054
 800f52c:	165e9f81 	.word	0x165e9f81

0800f530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d101      	bne.n	800f542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	e041      	b.n	800f5c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d106      	bne.n	800f55c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7fb fd64 	bl	800b024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2202      	movs	r2, #2
 800f560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3304      	adds	r3, #4
 800f56c:	4619      	mov	r1, r3
 800f56e:	4610      	mov	r0, r2
 800f570:	f000 fd28 	bl	800ffc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
	...

0800f5d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d001      	beq.n	800f5e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e046      	b.n	800f676 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a23      	ldr	r2, [pc, #140]	@ (800f684 <HAL_TIM_Base_Start+0xb4>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d022      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f602:	d01d      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a1f      	ldr	r2, [pc, #124]	@ (800f688 <HAL_TIM_Base_Start+0xb8>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d018      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	4a1e      	ldr	r2, [pc, #120]	@ (800f68c <HAL_TIM_Base_Start+0xbc>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d013      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a1c      	ldr	r2, [pc, #112]	@ (800f690 <HAL_TIM_Base_Start+0xc0>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d00e      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4a1b      	ldr	r2, [pc, #108]	@ (800f694 <HAL_TIM_Base_Start+0xc4>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d009      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a19      	ldr	r2, [pc, #100]	@ (800f698 <HAL_TIM_Base_Start+0xc8>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d004      	beq.n	800f640 <HAL_TIM_Base_Start+0x70>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a18      	ldr	r2, [pc, #96]	@ (800f69c <HAL_TIM_Base_Start+0xcc>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d111      	bne.n	800f664 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f003 0307 	and.w	r3, r3, #7
 800f64a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2b06      	cmp	r3, #6
 800f650:	d010      	beq.n	800f674 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f042 0201 	orr.w	r2, r2, #1
 800f660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f662:	e007      	b.n	800f674 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f042 0201 	orr.w	r2, r2, #1
 800f672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	40010000 	.word	0x40010000
 800f688:	40000400 	.word	0x40000400
 800f68c:	40000800 	.word	0x40000800
 800f690:	40000c00 	.word	0x40000c00
 800f694:	40010400 	.word	0x40010400
 800f698:	40014000 	.word	0x40014000
 800f69c:	40001800 	.word	0x40001800

0800f6a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d001      	beq.n	800f6b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e04e      	b.n	800f756 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2202      	movs	r2, #2
 800f6bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68da      	ldr	r2, [r3, #12]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f042 0201 	orr.w	r2, r2, #1
 800f6ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a23      	ldr	r2, [pc, #140]	@ (800f764 <HAL_TIM_Base_Start_IT+0xc4>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d022      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6e2:	d01d      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a1f      	ldr	r2, [pc, #124]	@ (800f768 <HAL_TIM_Base_Start_IT+0xc8>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d018      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a1e      	ldr	r2, [pc, #120]	@ (800f76c <HAL_TIM_Base_Start_IT+0xcc>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d013      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a1c      	ldr	r2, [pc, #112]	@ (800f770 <HAL_TIM_Base_Start_IT+0xd0>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d00e      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4a1b      	ldr	r2, [pc, #108]	@ (800f774 <HAL_TIM_Base_Start_IT+0xd4>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d009      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a19      	ldr	r2, [pc, #100]	@ (800f778 <HAL_TIM_Base_Start_IT+0xd8>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d004      	beq.n	800f720 <HAL_TIM_Base_Start_IT+0x80>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a18      	ldr	r2, [pc, #96]	@ (800f77c <HAL_TIM_Base_Start_IT+0xdc>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d111      	bne.n	800f744 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	f003 0307 	and.w	r3, r3, #7
 800f72a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b06      	cmp	r3, #6
 800f730:	d010      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f042 0201 	orr.w	r2, r2, #1
 800f740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f742:	e007      	b.n	800f754 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f042 0201 	orr.w	r2, r2, #1
 800f752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f754:	2300      	movs	r3, #0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3714      	adds	r7, #20
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	40010000 	.word	0x40010000
 800f768:	40000400 	.word	0x40000400
 800f76c:	40000800 	.word	0x40000800
 800f770:	40000c00 	.word	0x40000c00
 800f774:	40010400 	.word	0x40010400
 800f778:	40014000 	.word	0x40014000
 800f77c:	40001800 	.word	0x40001800

0800f780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e041      	b.n	800f816 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f88d 	bl	800f8c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	3304      	adds	r3, #4
 800f7bc:	4619      	mov	r1, r3
 800f7be:	4610      	mov	r0, r2
 800f7c0:	f000 fc00 	bl	800ffc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800f81e:	b580      	push	{r7, lr}
 800f820:	b082      	sub	sp, #8
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2202      	movs	r2, #2
 800f82a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	6a1a      	ldr	r2, [r3, #32]
 800f834:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f838:	4013      	ands	r3, r2
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d10f      	bne.n	800f85e <HAL_TIM_PWM_DeInit+0x40>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	6a1a      	ldr	r2, [r3, #32]
 800f844:	f240 4344 	movw	r3, #1092	@ 0x444
 800f848:	4013      	ands	r3, r2
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d107      	bne.n	800f85e <HAL_TIM_PWM_DeInit+0x40>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f022 0201 	bic.w	r2, r2, #1
 800f85c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f83b 	bl	800f8da <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2200      	movs	r2, #0
 800f880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f8c6:	b480      	push	{r7}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f8ce:	bf00      	nop
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800f8da:	b480      	push	{r7}
 800f8dc:	b083      	sub	sp, #12
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800f8e2:	bf00      	nop
 800f8e4:	370c      	adds	r7, #12
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
	...

0800f8f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d109      	bne.n	800f914 <HAL_TIM_PWM_Start+0x24>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b01      	cmp	r3, #1
 800f90a:	bf14      	ite	ne
 800f90c:	2301      	movne	r3, #1
 800f90e:	2300      	moveq	r3, #0
 800f910:	b2db      	uxtb	r3, r3
 800f912:	e022      	b.n	800f95a <HAL_TIM_PWM_Start+0x6a>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	2b04      	cmp	r3, #4
 800f918:	d109      	bne.n	800f92e <HAL_TIM_PWM_Start+0x3e>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b01      	cmp	r3, #1
 800f924:	bf14      	ite	ne
 800f926:	2301      	movne	r3, #1
 800f928:	2300      	moveq	r3, #0
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	e015      	b.n	800f95a <HAL_TIM_PWM_Start+0x6a>
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	2b08      	cmp	r3, #8
 800f932:	d109      	bne.n	800f948 <HAL_TIM_PWM_Start+0x58>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	bf14      	ite	ne
 800f940:	2301      	movne	r3, #1
 800f942:	2300      	moveq	r3, #0
 800f944:	b2db      	uxtb	r3, r3
 800f946:	e008      	b.n	800f95a <HAL_TIM_PWM_Start+0x6a>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b01      	cmp	r3, #1
 800f952:	bf14      	ite	ne
 800f954:	2301      	movne	r3, #1
 800f956:	2300      	moveq	r3, #0
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e07c      	b.n	800fa5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d104      	bne.n	800f972 <HAL_TIM_PWM_Start+0x82>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2202      	movs	r2, #2
 800f96c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f970:	e013      	b.n	800f99a <HAL_TIM_PWM_Start+0xaa>
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	2b04      	cmp	r3, #4
 800f976:	d104      	bne.n	800f982 <HAL_TIM_PWM_Start+0x92>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2202      	movs	r2, #2
 800f97c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f980:	e00b      	b.n	800f99a <HAL_TIM_PWM_Start+0xaa>
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2b08      	cmp	r3, #8
 800f986:	d104      	bne.n	800f992 <HAL_TIM_PWM_Start+0xa2>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2202      	movs	r2, #2
 800f98c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f990:	e003      	b.n	800f99a <HAL_TIM_PWM_Start+0xaa>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2202      	movs	r2, #2
 800f996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	6839      	ldr	r1, [r7, #0]
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f000 fe04 	bl	80105b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a2d      	ldr	r2, [pc, #180]	@ (800fa64 <HAL_TIM_PWM_Start+0x174>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d004      	beq.n	800f9bc <HAL_TIM_PWM_Start+0xcc>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a2c      	ldr	r2, [pc, #176]	@ (800fa68 <HAL_TIM_PWM_Start+0x178>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d101      	bne.n	800f9c0 <HAL_TIM_PWM_Start+0xd0>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e000      	b.n	800f9c2 <HAL_TIM_PWM_Start+0xd2>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d007      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f9d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a22      	ldr	r2, [pc, #136]	@ (800fa64 <HAL_TIM_PWM_Start+0x174>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d022      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9e8:	d01d      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a1f      	ldr	r2, [pc, #124]	@ (800fa6c <HAL_TIM_PWM_Start+0x17c>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d018      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800fa70 <HAL_TIM_PWM_Start+0x180>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d013      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	4a1c      	ldr	r2, [pc, #112]	@ (800fa74 <HAL_TIM_PWM_Start+0x184>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d00e      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a16      	ldr	r2, [pc, #88]	@ (800fa68 <HAL_TIM_PWM_Start+0x178>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d009      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	4a18      	ldr	r2, [pc, #96]	@ (800fa78 <HAL_TIM_PWM_Start+0x188>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d004      	beq.n	800fa26 <HAL_TIM_PWM_Start+0x136>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a16      	ldr	r2, [pc, #88]	@ (800fa7c <HAL_TIM_PWM_Start+0x18c>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d111      	bne.n	800fa4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	f003 0307 	and.w	r3, r3, #7
 800fa30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2b06      	cmp	r3, #6
 800fa36:	d010      	beq.n	800fa5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f042 0201 	orr.w	r2, r2, #1
 800fa46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa48:	e007      	b.n	800fa5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f042 0201 	orr.w	r2, r2, #1
 800fa58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	40010000 	.word	0x40010000
 800fa68:	40010400 	.word	0x40010400
 800fa6c:	40000400 	.word	0x40000400
 800fa70:	40000800 	.word	0x40000800
 800fa74:	40000c00 	.word	0x40000c00
 800fa78:	40014000 	.word	0x40014000
 800fa7c:	40001800 	.word	0x40001800

0800fa80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	691b      	ldr	r3, [r3, #16]
 800fa96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	f003 0302 	and.w	r3, r3, #2
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d020      	beq.n	800fae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f003 0302 	and.w	r3, r3, #2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d01b      	beq.n	800fae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f06f 0202 	mvn.w	r2, #2
 800fab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	f003 0303 	and.w	r3, r3, #3
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d003      	beq.n	800fad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 fa5b 	bl	800ff86 <HAL_TIM_IC_CaptureCallback>
 800fad0:	e005      	b.n	800fade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 fa4d 	bl	800ff72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 fa5e 	bl	800ff9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f003 0304 	and.w	r3, r3, #4
 800faea:	2b00      	cmp	r3, #0
 800faec:	d020      	beq.n	800fb30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f003 0304 	and.w	r3, r3, #4
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d01b      	beq.n	800fb30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f06f 0204 	mvn.w	r2, #4
 800fb00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2202      	movs	r2, #2
 800fb06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d003      	beq.n	800fb1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 fa35 	bl	800ff86 <HAL_TIM_IC_CaptureCallback>
 800fb1c:	e005      	b.n	800fb2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 fa27 	bl	800ff72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 fa38 	bl	800ff9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	f003 0308 	and.w	r3, r3, #8
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d020      	beq.n	800fb7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01b      	beq.n	800fb7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f06f 0208 	mvn.w	r2, #8
 800fb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2204      	movs	r2, #4
 800fb52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	f003 0303 	and.w	r3, r3, #3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fa0f 	bl	800ff86 <HAL_TIM_IC_CaptureCallback>
 800fb68:	e005      	b.n	800fb76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fa01 	bl	800ff72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fa12 	bl	800ff9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	f003 0310 	and.w	r3, r3, #16
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d020      	beq.n	800fbc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d01b      	beq.n	800fbc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f06f 0210 	mvn.w	r2, #16
 800fb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2208      	movs	r2, #8
 800fb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	69db      	ldr	r3, [r3, #28]
 800fba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 f9e9 	bl	800ff86 <HAL_TIM_IC_CaptureCallback>
 800fbb4:	e005      	b.n	800fbc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f9db 	bl	800ff72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 f9ec 	bl	800ff9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	f003 0301 	and.w	r3, r3, #1
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00c      	beq.n	800fbec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f003 0301 	and.w	r3, r3, #1
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d007      	beq.n	800fbec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f06f 0201 	mvn.w	r2, #1
 800fbe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f7f9 fed6 	bl	8009998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00c      	beq.n	800fc10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d007      	beq.n	800fc10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fd7c 	bl	8010708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00c      	beq.n	800fc34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d007      	beq.n	800fc34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fc2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 f9bd 	bl	800ffae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	f003 0320 	and.w	r3, r3, #32
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00c      	beq.n	800fc58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f003 0320 	and.w	r3, r3, #32
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d007      	beq.n	800fc58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f06f 0220 	mvn.w	r2, #32
 800fc50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 fd4e 	bl	80106f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc58:	bf00      	nop
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d101      	bne.n	800fc7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	e0ae      	b.n	800fddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b0c      	cmp	r3, #12
 800fc8a:	f200 809f 	bhi.w	800fdcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fc8e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc94:	0800fcc9 	.word	0x0800fcc9
 800fc98:	0800fdcd 	.word	0x0800fdcd
 800fc9c:	0800fdcd 	.word	0x0800fdcd
 800fca0:	0800fdcd 	.word	0x0800fdcd
 800fca4:	0800fd09 	.word	0x0800fd09
 800fca8:	0800fdcd 	.word	0x0800fdcd
 800fcac:	0800fdcd 	.word	0x0800fdcd
 800fcb0:	0800fdcd 	.word	0x0800fdcd
 800fcb4:	0800fd4b 	.word	0x0800fd4b
 800fcb8:	0800fdcd 	.word	0x0800fdcd
 800fcbc:	0800fdcd 	.word	0x0800fdcd
 800fcc0:	0800fdcd 	.word	0x0800fdcd
 800fcc4:	0800fd8b 	.word	0x0800fd8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68b9      	ldr	r1, [r7, #8]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f000 fa24 	bl	801011c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	699a      	ldr	r2, [r3, #24]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f042 0208 	orr.w	r2, r2, #8
 800fce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	699a      	ldr	r2, [r3, #24]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f022 0204 	bic.w	r2, r2, #4
 800fcf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6999      	ldr	r1, [r3, #24]
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	691a      	ldr	r2, [r3, #16]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	430a      	orrs	r2, r1
 800fd04:	619a      	str	r2, [r3, #24]
      break;
 800fd06:	e064      	b.n	800fdd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68b9      	ldr	r1, [r7, #8]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f000 fa74 	bl	80101fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	699a      	ldr	r2, [r3, #24]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	699a      	ldr	r2, [r3, #24]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6999      	ldr	r1, [r3, #24]
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	691b      	ldr	r3, [r3, #16]
 800fd3e:	021a      	lsls	r2, r3, #8
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	430a      	orrs	r2, r1
 800fd46:	619a      	str	r2, [r3, #24]
      break;
 800fd48:	e043      	b.n	800fdd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	68b9      	ldr	r1, [r7, #8]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f000 fac9 	bl	80102e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	69da      	ldr	r2, [r3, #28]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f042 0208 	orr.w	r2, r2, #8
 800fd64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	69da      	ldr	r2, [r3, #28]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f022 0204 	bic.w	r2, r2, #4
 800fd74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	69d9      	ldr	r1, [r3, #28]
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	691a      	ldr	r2, [r3, #16]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	430a      	orrs	r2, r1
 800fd86:	61da      	str	r2, [r3, #28]
      break;
 800fd88:	e023      	b.n	800fdd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68b9      	ldr	r1, [r7, #8]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f000 fb1d 	bl	80103d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	69da      	ldr	r2, [r3, #28]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fda4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	69da      	ldr	r2, [r3, #28]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fdb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	69d9      	ldr	r1, [r3, #28]
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	021a      	lsls	r2, r3, #8
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	430a      	orrs	r2, r1
 800fdc8:	61da      	str	r2, [r3, #28]
      break;
 800fdca:	e002      	b.n	800fdd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	75fb      	strb	r3, [r7, #23]
      break;
 800fdd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fdda:	7dfb      	ldrb	r3, [r7, #23]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3718      	adds	r7, #24
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d101      	bne.n	800fe00 <HAL_TIM_ConfigClockSource+0x1c>
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e0b4      	b.n	800ff6a <HAL_TIM_ConfigClockSource+0x186>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2201      	movs	r2, #1
 800fe04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fe1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	68ba      	ldr	r2, [r7, #8]
 800fe2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe38:	d03e      	beq.n	800feb8 <HAL_TIM_ConfigClockSource+0xd4>
 800fe3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe3e:	f200 8087 	bhi.w	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe46:	f000 8086 	beq.w	800ff56 <HAL_TIM_ConfigClockSource+0x172>
 800fe4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe4e:	d87f      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe50:	2b70      	cmp	r3, #112	@ 0x70
 800fe52:	d01a      	beq.n	800fe8a <HAL_TIM_ConfigClockSource+0xa6>
 800fe54:	2b70      	cmp	r3, #112	@ 0x70
 800fe56:	d87b      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe58:	2b60      	cmp	r3, #96	@ 0x60
 800fe5a:	d050      	beq.n	800fefe <HAL_TIM_ConfigClockSource+0x11a>
 800fe5c:	2b60      	cmp	r3, #96	@ 0x60
 800fe5e:	d877      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe60:	2b50      	cmp	r3, #80	@ 0x50
 800fe62:	d03c      	beq.n	800fede <HAL_TIM_ConfigClockSource+0xfa>
 800fe64:	2b50      	cmp	r3, #80	@ 0x50
 800fe66:	d873      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe68:	2b40      	cmp	r3, #64	@ 0x40
 800fe6a:	d058      	beq.n	800ff1e <HAL_TIM_ConfigClockSource+0x13a>
 800fe6c:	2b40      	cmp	r3, #64	@ 0x40
 800fe6e:	d86f      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe70:	2b30      	cmp	r3, #48	@ 0x30
 800fe72:	d064      	beq.n	800ff3e <HAL_TIM_ConfigClockSource+0x15a>
 800fe74:	2b30      	cmp	r3, #48	@ 0x30
 800fe76:	d86b      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe78:	2b20      	cmp	r3, #32
 800fe7a:	d060      	beq.n	800ff3e <HAL_TIM_ConfigClockSource+0x15a>
 800fe7c:	2b20      	cmp	r3, #32
 800fe7e:	d867      	bhi.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d05c      	beq.n	800ff3e <HAL_TIM_ConfigClockSource+0x15a>
 800fe84:	2b10      	cmp	r3, #16
 800fe86:	d05a      	beq.n	800ff3e <HAL_TIM_ConfigClockSource+0x15a>
 800fe88:	e062      	b.n	800ff50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fe9a:	f000 fb69 	bl	8010570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800feac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	68ba      	ldr	r2, [r7, #8]
 800feb4:	609a      	str	r2, [r3, #8]
      break;
 800feb6:	e04f      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fec8:	f000 fb52 	bl	8010570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	689a      	ldr	r2, [r3, #8]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800feda:	609a      	str	r2, [r3, #8]
      break;
 800fedc:	e03c      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800feea:	461a      	mov	r2, r3
 800feec:	f000 fac6 	bl	801047c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2150      	movs	r1, #80	@ 0x50
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 fb1f 	bl	801053a <TIM_ITRx_SetConfig>
      break;
 800fefc:	e02c      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	f000 fae5 	bl	80104da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2160      	movs	r1, #96	@ 0x60
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 fb0f 	bl	801053a <TIM_ITRx_SetConfig>
      break;
 800ff1c:	e01c      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	f000 faa6 	bl	801047c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2140      	movs	r1, #64	@ 0x40
 800ff36:	4618      	mov	r0, r3
 800ff38:	f000 faff 	bl	801053a <TIM_ITRx_SetConfig>
      break;
 800ff3c:	e00c      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4619      	mov	r1, r3
 800ff48:	4610      	mov	r0, r2
 800ff4a:	f000 faf6 	bl	801053a <TIM_ITRx_SetConfig>
      break;
 800ff4e:	e003      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	73fb      	strb	r3, [r7, #15]
      break;
 800ff54:	e000      	b.n	800ff58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ff56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff72:	b480      	push	{r7}
 800ff74:	b083      	sub	sp, #12
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ff7a:	bf00      	nop
 800ff7c:	370c      	adds	r7, #12
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr

0800ff86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ff86:	b480      	push	{r7}
 800ff88:	b083      	sub	sp, #12
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ff8e:	bf00      	nop
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b083      	sub	sp, #12
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ffa2:	bf00      	nop
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr

0800ffae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ffae:	b480      	push	{r7}
 800ffb0:	b083      	sub	sp, #12
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ffb6:	bf00      	nop
 800ffb8:	370c      	adds	r7, #12
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
	...

0800ffc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4a46      	ldr	r2, [pc, #280]	@ (80100f0 <TIM_Base_SetConfig+0x12c>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d013      	beq.n	8010004 <TIM_Base_SetConfig+0x40>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffe2:	d00f      	beq.n	8010004 <TIM_Base_SetConfig+0x40>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	4a43      	ldr	r2, [pc, #268]	@ (80100f4 <TIM_Base_SetConfig+0x130>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d00b      	beq.n	8010004 <TIM_Base_SetConfig+0x40>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4a42      	ldr	r2, [pc, #264]	@ (80100f8 <TIM_Base_SetConfig+0x134>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d007      	beq.n	8010004 <TIM_Base_SetConfig+0x40>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a41      	ldr	r2, [pc, #260]	@ (80100fc <TIM_Base_SetConfig+0x138>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d003      	beq.n	8010004 <TIM_Base_SetConfig+0x40>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4a40      	ldr	r2, [pc, #256]	@ (8010100 <TIM_Base_SetConfig+0x13c>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d108      	bne.n	8010016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801000a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	4313      	orrs	r3, r2
 8010014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4a35      	ldr	r2, [pc, #212]	@ (80100f0 <TIM_Base_SetConfig+0x12c>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d02b      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010024:	d027      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4a32      	ldr	r2, [pc, #200]	@ (80100f4 <TIM_Base_SetConfig+0x130>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d023      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4a31      	ldr	r2, [pc, #196]	@ (80100f8 <TIM_Base_SetConfig+0x134>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d01f      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4a30      	ldr	r2, [pc, #192]	@ (80100fc <TIM_Base_SetConfig+0x138>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d01b      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4a2f      	ldr	r2, [pc, #188]	@ (8010100 <TIM_Base_SetConfig+0x13c>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d017      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a2e      	ldr	r2, [pc, #184]	@ (8010104 <TIM_Base_SetConfig+0x140>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d013      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a2d      	ldr	r2, [pc, #180]	@ (8010108 <TIM_Base_SetConfig+0x144>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d00f      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a2c      	ldr	r2, [pc, #176]	@ (801010c <TIM_Base_SetConfig+0x148>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d00b      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a2b      	ldr	r2, [pc, #172]	@ (8010110 <TIM_Base_SetConfig+0x14c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d007      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a2a      	ldr	r2, [pc, #168]	@ (8010114 <TIM_Base_SetConfig+0x150>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d003      	beq.n	8010076 <TIM_Base_SetConfig+0xb2>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4a29      	ldr	r2, [pc, #164]	@ (8010118 <TIM_Base_SetConfig+0x154>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d108      	bne.n	8010088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801007c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	4313      	orrs	r3, r2
 8010086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	695b      	ldr	r3, [r3, #20]
 8010092:	4313      	orrs	r3, r2
 8010094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	689a      	ldr	r2, [r3, #8]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4a10      	ldr	r2, [pc, #64]	@ (80100f0 <TIM_Base_SetConfig+0x12c>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d003      	beq.n	80100bc <TIM_Base_SetConfig+0xf8>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a12      	ldr	r2, [pc, #72]	@ (8010100 <TIM_Base_SetConfig+0x13c>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d103      	bne.n	80100c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	691a      	ldr	r2, [r3, #16]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2201      	movs	r2, #1
 80100c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d105      	bne.n	80100e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	f023 0201 	bic.w	r2, r3, #1
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	611a      	str	r2, [r3, #16]
  }
}
 80100e2:	bf00      	nop
 80100e4:	3714      	adds	r7, #20
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	40010000 	.word	0x40010000
 80100f4:	40000400 	.word	0x40000400
 80100f8:	40000800 	.word	0x40000800
 80100fc:	40000c00 	.word	0x40000c00
 8010100:	40010400 	.word	0x40010400
 8010104:	40014000 	.word	0x40014000
 8010108:	40014400 	.word	0x40014400
 801010c:	40014800 	.word	0x40014800
 8010110:	40001800 	.word	0x40001800
 8010114:	40001c00 	.word	0x40001c00
 8010118:	40002000 	.word	0x40002000

0801011c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801011c:	b480      	push	{r7}
 801011e:	b087      	sub	sp, #28
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a1b      	ldr	r3, [r3, #32]
 801012a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a1b      	ldr	r3, [r3, #32]
 8010130:	f023 0201 	bic.w	r2, r3, #1
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801014a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f023 0303 	bic.w	r3, r3, #3
 8010152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	4313      	orrs	r3, r2
 801015c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f023 0302 	bic.w	r3, r3, #2
 8010164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	4313      	orrs	r3, r2
 801016e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4a20      	ldr	r2, [pc, #128]	@ (80101f4 <TIM_OC1_SetConfig+0xd8>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d003      	beq.n	8010180 <TIM_OC1_SetConfig+0x64>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4a1f      	ldr	r2, [pc, #124]	@ (80101f8 <TIM_OC1_SetConfig+0xdc>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d10c      	bne.n	801019a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	f023 0308 	bic.w	r3, r3, #8
 8010186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	697a      	ldr	r2, [r7, #20]
 801018e:	4313      	orrs	r3, r2
 8010190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	f023 0304 	bic.w	r3, r3, #4
 8010198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4a15      	ldr	r2, [pc, #84]	@ (80101f4 <TIM_OC1_SetConfig+0xd8>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d003      	beq.n	80101aa <TIM_OC1_SetConfig+0x8e>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4a14      	ldr	r2, [pc, #80]	@ (80101f8 <TIM_OC1_SetConfig+0xdc>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d111      	bne.n	80101ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80101b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	695b      	ldr	r3, [r3, #20]
 80101be:	693a      	ldr	r2, [r7, #16]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	693a      	ldr	r2, [r7, #16]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	697a      	ldr	r2, [r7, #20]
 80101e6:	621a      	str	r2, [r3, #32]
}
 80101e8:	bf00      	nop
 80101ea:	371c      	adds	r7, #28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr
 80101f4:	40010000 	.word	0x40010000
 80101f8:	40010400 	.word	0x40010400

080101fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b087      	sub	sp, #28
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6a1b      	ldr	r3, [r3, #32]
 801020a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6a1b      	ldr	r3, [r3, #32]
 8010210:	f023 0210 	bic.w	r2, r3, #16
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801022a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	021b      	lsls	r3, r3, #8
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	4313      	orrs	r3, r2
 801023e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f023 0320 	bic.w	r3, r3, #32
 8010246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	011b      	lsls	r3, r3, #4
 801024e:	697a      	ldr	r2, [r7, #20]
 8010250:	4313      	orrs	r3, r2
 8010252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a22      	ldr	r2, [pc, #136]	@ (80102e0 <TIM_OC2_SetConfig+0xe4>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d003      	beq.n	8010264 <TIM_OC2_SetConfig+0x68>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a21      	ldr	r2, [pc, #132]	@ (80102e4 <TIM_OC2_SetConfig+0xe8>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d10d      	bne.n	8010280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801026a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	011b      	lsls	r3, r3, #4
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	4313      	orrs	r3, r2
 8010276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801027e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a17      	ldr	r2, [pc, #92]	@ (80102e0 <TIM_OC2_SetConfig+0xe4>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d003      	beq.n	8010290 <TIM_OC2_SetConfig+0x94>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4a16      	ldr	r2, [pc, #88]	@ (80102e4 <TIM_OC2_SetConfig+0xe8>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d113      	bne.n	80102b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801029e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	695b      	ldr	r3, [r3, #20]
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	4313      	orrs	r3, r2
 80102aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	693a      	ldr	r2, [r7, #16]
 80102bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	621a      	str	r2, [r3, #32]
}
 80102d2:	bf00      	nop
 80102d4:	371c      	adds	r7, #28
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	40010000 	.word	0x40010000
 80102e4:	40010400 	.word	0x40010400

080102e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b087      	sub	sp, #28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6a1b      	ldr	r3, [r3, #32]
 80102fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	69db      	ldr	r3, [r3, #28]
 801030e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f023 0303 	bic.w	r3, r3, #3
 801031e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	4313      	orrs	r3, r2
 8010328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	021b      	lsls	r3, r3, #8
 8010338:	697a      	ldr	r2, [r7, #20]
 801033a:	4313      	orrs	r3, r2
 801033c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4a21      	ldr	r2, [pc, #132]	@ (80103c8 <TIM_OC3_SetConfig+0xe0>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d003      	beq.n	801034e <TIM_OC3_SetConfig+0x66>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4a20      	ldr	r2, [pc, #128]	@ (80103cc <TIM_OC3_SetConfig+0xe4>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d10d      	bne.n	801036a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	021b      	lsls	r3, r3, #8
 801035c:	697a      	ldr	r2, [r7, #20]
 801035e:	4313      	orrs	r3, r2
 8010360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4a16      	ldr	r2, [pc, #88]	@ (80103c8 <TIM_OC3_SetConfig+0xe0>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d003      	beq.n	801037a <TIM_OC3_SetConfig+0x92>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4a15      	ldr	r2, [pc, #84]	@ (80103cc <TIM_OC3_SetConfig+0xe4>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d113      	bne.n	80103a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	695b      	ldr	r3, [r3, #20]
 801038e:	011b      	lsls	r3, r3, #4
 8010390:	693a      	ldr	r2, [r7, #16]
 8010392:	4313      	orrs	r3, r2
 8010394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	011b      	lsls	r3, r3, #4
 801039c:	693a      	ldr	r2, [r7, #16]
 801039e:	4313      	orrs	r3, r2
 80103a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	693a      	ldr	r2, [r7, #16]
 80103a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	685a      	ldr	r2, [r3, #4]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	697a      	ldr	r2, [r7, #20]
 80103ba:	621a      	str	r2, [r3, #32]
}
 80103bc:	bf00      	nop
 80103be:	371c      	adds	r7, #28
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr
 80103c8:	40010000 	.word	0x40010000
 80103cc:	40010400 	.word	0x40010400

080103d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b087      	sub	sp, #28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	69db      	ldr	r3, [r3, #28]
 80103f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80103fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	021b      	lsls	r3, r3, #8
 801040e:	68fa      	ldr	r2, [r7, #12]
 8010410:	4313      	orrs	r3, r2
 8010412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801041a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	031b      	lsls	r3, r3, #12
 8010422:	693a      	ldr	r2, [r7, #16]
 8010424:	4313      	orrs	r3, r2
 8010426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	4a12      	ldr	r2, [pc, #72]	@ (8010474 <TIM_OC4_SetConfig+0xa4>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d003      	beq.n	8010438 <TIM_OC4_SetConfig+0x68>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	4a11      	ldr	r2, [pc, #68]	@ (8010478 <TIM_OC4_SetConfig+0xa8>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d109      	bne.n	801044c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801043e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	695b      	ldr	r3, [r3, #20]
 8010444:	019b      	lsls	r3, r3, #6
 8010446:	697a      	ldr	r2, [r7, #20]
 8010448:	4313      	orrs	r3, r2
 801044a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	697a      	ldr	r2, [r7, #20]
 8010450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	693a      	ldr	r2, [r7, #16]
 8010464:	621a      	str	r2, [r3, #32]
}
 8010466:	bf00      	nop
 8010468:	371c      	adds	r7, #28
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop
 8010474:	40010000 	.word	0x40010000
 8010478:	40010400 	.word	0x40010400

0801047c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801047c:	b480      	push	{r7}
 801047e:	b087      	sub	sp, #28
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6a1b      	ldr	r3, [r3, #32]
 801048c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	f023 0201 	bic.w	r2, r3, #1
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	699b      	ldr	r3, [r3, #24]
 801049e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80104a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	011b      	lsls	r3, r3, #4
 80104ac:	693a      	ldr	r2, [r7, #16]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	f023 030a 	bic.w	r3, r3, #10
 80104b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80104ba:	697a      	ldr	r2, [r7, #20]
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	4313      	orrs	r3, r2
 80104c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	621a      	str	r2, [r3, #32]
}
 80104ce:	bf00      	nop
 80104d0:	371c      	adds	r7, #28
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr

080104da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104da:	b480      	push	{r7}
 80104dc:	b087      	sub	sp, #28
 80104de:	af00      	add	r7, sp, #0
 80104e0:	60f8      	str	r0, [r7, #12]
 80104e2:	60b9      	str	r1, [r7, #8]
 80104e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6a1b      	ldr	r3, [r3, #32]
 80104ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6a1b      	ldr	r3, [r3, #32]
 80104f0:	f023 0210 	bic.w	r2, r3, #16
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	031b      	lsls	r3, r3, #12
 801050a:	693a      	ldr	r2, [r7, #16]
 801050c:	4313      	orrs	r3, r2
 801050e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	011b      	lsls	r3, r3, #4
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	4313      	orrs	r3, r2
 8010520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	693a      	ldr	r2, [r7, #16]
 8010526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	697a      	ldr	r2, [r7, #20]
 801052c:	621a      	str	r2, [r3, #32]
}
 801052e:	bf00      	nop
 8010530:	371c      	adds	r7, #28
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801053a:	b480      	push	{r7}
 801053c:	b085      	sub	sp, #20
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	4313      	orrs	r3, r2
 8010558:	f043 0307 	orr.w	r3, r3, #7
 801055c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	609a      	str	r2, [r3, #8]
}
 8010564:	bf00      	nop
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010570:	b480      	push	{r7}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801058a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	021a      	lsls	r2, r3, #8
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	431a      	orrs	r2, r3
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	4313      	orrs	r3, r2
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	4313      	orrs	r3, r2
 801059c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	697a      	ldr	r2, [r7, #20]
 80105a2:	609a      	str	r2, [r3, #8]
}
 80105a4:	bf00      	nop
 80105a6:	371c      	adds	r7, #28
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b087      	sub	sp, #28
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	f003 031f 	and.w	r3, r3, #31
 80105c2:	2201      	movs	r2, #1
 80105c4:	fa02 f303 	lsl.w	r3, r2, r3
 80105c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6a1a      	ldr	r2, [r3, #32]
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	43db      	mvns	r3, r3
 80105d2:	401a      	ands	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6a1a      	ldr	r2, [r3, #32]
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	f003 031f 	and.w	r3, r3, #31
 80105e2:	6879      	ldr	r1, [r7, #4]
 80105e4:	fa01 f303 	lsl.w	r3, r1, r3
 80105e8:	431a      	orrs	r2, r3
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	621a      	str	r2, [r3, #32]
}
 80105ee:	bf00      	nop
 80105f0:	371c      	adds	r7, #28
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
	...

080105fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801060c:	2b01      	cmp	r3, #1
 801060e:	d101      	bne.n	8010614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010610:	2302      	movs	r3, #2
 8010612:	e05a      	b.n	80106ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2202      	movs	r2, #2
 8010620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801063a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	4313      	orrs	r3, r2
 8010644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4a21      	ldr	r2, [pc, #132]	@ (80106d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d022      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010660:	d01d      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a1d      	ldr	r2, [pc, #116]	@ (80106dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d018      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a1b      	ldr	r2, [pc, #108]	@ (80106e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d013      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a1a      	ldr	r2, [pc, #104]	@ (80106e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d00e      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a18      	ldr	r2, [pc, #96]	@ (80106e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d009      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a17      	ldr	r2, [pc, #92]	@ (80106ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d004      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a15      	ldr	r2, [pc, #84]	@ (80106f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d10c      	bne.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	4313      	orrs	r3, r2
 80106ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	40010000 	.word	0x40010000
 80106dc:	40000400 	.word	0x40000400
 80106e0:	40000800 	.word	0x40000800
 80106e4:	40000c00 	.word	0x40000c00
 80106e8:	40010400 	.word	0x40010400
 80106ec:	40014000 	.word	0x40014000
 80106f0:	40001800 	.word	0x40001800

080106f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010710:	bf00      	nop
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	e042      	b.n	80107b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010734:	b2db      	uxtb	r3, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d106      	bne.n	8010748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7fa fd6e 	bl	800b224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2224      	movs	r2, #36	@ 0x24
 801074c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	68da      	ldr	r2, [r3, #12]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801075e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 ff5f 	bl	8011624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	691a      	ldr	r2, [r3, #16]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	695a      	ldr	r2, [r3, #20]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	68da      	ldr	r2, [r3, #12]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2200      	movs	r2, #0
 801079a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2220      	movs	r2, #32
 80107a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2220      	movs	r2, #32
 80107a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80107b2:	2300      	movs	r3, #0
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d101      	bne.n	80107ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80107ca:	2301      	movs	r3, #1
 80107cc:	e024      	b.n	8010818 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2224      	movs	r2, #36	@ 0x24
 80107d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	68da      	ldr	r2, [r3, #12]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80107e4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7fa fdd2 	bl	800b390 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08c      	sub	sp, #48	@ 0x30
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	4613      	mov	r3, r2
 801082c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b20      	cmp	r3, #32
 8010838:	d156      	bne.n	80108e8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <HAL_UART_Transmit_DMA+0x26>
 8010840:	88fb      	ldrh	r3, [r7, #6]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d101      	bne.n	801084a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8010846:	2301      	movs	r3, #1
 8010848:	e04f      	b.n	80108ea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 801084a:	68ba      	ldr	r2, [r7, #8]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	88fa      	ldrh	r2, [r7, #6]
 8010854:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	88fa      	ldrh	r2, [r7, #6]
 801085a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2200      	movs	r2, #0
 8010860:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2221      	movs	r2, #33	@ 0x21
 8010866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801086e:	4a21      	ldr	r2, [pc, #132]	@ (80108f4 <HAL_UART_Transmit_DMA+0xd4>)
 8010870:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010876:	4a20      	ldr	r2, [pc, #128]	@ (80108f8 <HAL_UART_Transmit_DMA+0xd8>)
 8010878:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801087e:	4a1f      	ldr	r2, [pc, #124]	@ (80108fc <HAL_UART_Transmit_DMA+0xdc>)
 8010880:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010886:	2200      	movs	r2, #0
 8010888:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 801088a:	f107 0308 	add.w	r3, r7, #8
 801088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010896:	6819      	ldr	r1, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3304      	adds	r3, #4
 801089e:	461a      	mov	r2, r3
 80108a0:	88fb      	ldrh	r3, [r7, #6]
 80108a2:	f7fb fb51 	bl	800bf48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80108ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	3314      	adds	r3, #20
 80108b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	e853 3f00 	ldrex	r3, [r3]
 80108be:	617b      	str	r3, [r7, #20]
   return(result);
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	3314      	adds	r3, #20
 80108ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80108d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d4:	6a39      	ldr	r1, [r7, #32]
 80108d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108d8:	e841 2300 	strex	r3, r2, [r1]
 80108dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1e5      	bne.n	80108b0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80108e4:	2300      	movs	r3, #0
 80108e6:	e000      	b.n	80108ea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80108e8:	2302      	movs	r3, #2
  }
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3730      	adds	r7, #48	@ 0x30
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	08010eb1 	.word	0x08010eb1
 80108f8:	08010f4b 	.word	0x08010f4b
 80108fc:	080110cf 	.word	0x080110cf

08010900 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	4613      	mov	r3, r2
 801090c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b20      	cmp	r3, #32
 8010918:	d112      	bne.n	8010940 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <HAL_UART_Receive_DMA+0x26>
 8010920:	88fb      	ldrh	r3, [r7, #6]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010926:	2301      	movs	r3, #1
 8010928:	e00b      	b.n	8010942 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2200      	movs	r2, #0
 801092e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010930:	88fb      	ldrh	r3, [r7, #6]
 8010932:	461a      	mov	r2, r3
 8010934:	68b9      	ldr	r1, [r7, #8]
 8010936:	68f8      	ldr	r0, [r7, #12]
 8010938:	f000 fc14 	bl	8011164 <UART_Start_Receive_DMA>
 801093c:	4603      	mov	r3, r0
 801093e:	e000      	b.n	8010942 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8010940:	2302      	movs	r3, #2
  }
}
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
	...

0801094c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b0ba      	sub	sp, #232	@ 0xe8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	695b      	ldr	r3, [r3, #20]
 801096e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8010972:	2300      	movs	r3, #0
 8010974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010978:	2300      	movs	r3, #0
 801097a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801097e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010982:	f003 030f 	and.w	r3, r3, #15
 8010986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 801098a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10f      	bne.n	80109b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010996:	f003 0320 	and.w	r3, r3, #32
 801099a:	2b00      	cmp	r3, #0
 801099c:	d009      	beq.n	80109b2 <HAL_UART_IRQHandler+0x66>
 801099e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109a2:	f003 0320 	and.w	r3, r3, #32
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d003      	beq.n	80109b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f000 fd7b 	bl	80114a6 <UART_Receive_IT>
      return;
 80109b0:	e25b      	b.n	8010e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80109b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 80de 	beq.w	8010b78 <HAL_UART_IRQHandler+0x22c>
 80109bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109c0:	f003 0301 	and.w	r3, r3, #1
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d106      	bne.n	80109d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80109c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f000 80d1 	beq.w	8010b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80109d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109da:	f003 0301 	and.w	r3, r3, #1
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00b      	beq.n	80109fa <HAL_UART_IRQHandler+0xae>
 80109e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d005      	beq.n	80109fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109f2:	f043 0201 	orr.w	r2, r3, #1
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80109fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109fe:	f003 0304 	and.w	r3, r3, #4
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00b      	beq.n	8010a1e <HAL_UART_IRQHandler+0xd2>
 8010a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a0a:	f003 0301 	and.w	r3, r3, #1
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d005      	beq.n	8010a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a16:	f043 0202 	orr.w	r2, r3, #2
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a22:	f003 0302 	and.w	r3, r3, #2
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00b      	beq.n	8010a42 <HAL_UART_IRQHandler+0xf6>
 8010a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a2e:	f003 0301 	and.w	r3, r3, #1
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d005      	beq.n	8010a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a3a:	f043 0204 	orr.w	r2, r3, #4
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a46:	f003 0308 	and.w	r3, r3, #8
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d011      	beq.n	8010a72 <HAL_UART_IRQHandler+0x126>
 8010a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a52:	f003 0320 	and.w	r3, r3, #32
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d105      	bne.n	8010a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a5e:	f003 0301 	and.w	r3, r3, #1
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d005      	beq.n	8010a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a6a:	f043 0208 	orr.w	r2, r3, #8
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f000 81f2 	beq.w	8010e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a80:	f003 0320 	and.w	r3, r3, #32
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d008      	beq.n	8010a9a <HAL_UART_IRQHandler+0x14e>
 8010a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a8c:	f003 0320 	and.w	r3, r3, #32
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d002      	beq.n	8010a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 fd06 	bl	80114a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	695b      	ldr	r3, [r3, #20]
 8010aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010aa4:	2b40      	cmp	r3, #64	@ 0x40
 8010aa6:	bf0c      	ite	eq
 8010aa8:	2301      	moveq	r3, #1
 8010aaa:	2300      	movne	r3, #0
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ab6:	f003 0308 	and.w	r3, r3, #8
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d103      	bne.n	8010ac6 <HAL_UART_IRQHandler+0x17a>
 8010abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d04f      	beq.n	8010b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 fc0e 	bl	80112e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	695b      	ldr	r3, [r3, #20]
 8010ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ad6:	2b40      	cmp	r3, #64	@ 0x40
 8010ad8:	d141      	bne.n	8010b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	3314      	adds	r3, #20
 8010ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010ae8:	e853 3f00 	ldrex	r3, [r3]
 8010aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	3314      	adds	r3, #20
 8010b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010b16:	e841 2300 	strex	r3, r2, [r1]
 8010b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1d9      	bne.n	8010ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d013      	beq.n	8010b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b32:	4a7e      	ldr	r2, [pc, #504]	@ (8010d2c <HAL_UART_IRQHandler+0x3e0>)
 8010b34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fb facc 	bl	800c0d8 <HAL_DMA_Abort_IT>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d016      	beq.n	8010b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010b50:	4610      	mov	r0, r2
 8010b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b54:	e00e      	b.n	8010b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7fa fd90 	bl	800b67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b5c:	e00a      	b.n	8010b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7fa fd8c 	bl	800b67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b64:	e006      	b.n	8010b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7fa fd88 	bl	800b67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8010b72:	e175      	b.n	8010e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b74:	bf00      	nop
    return;
 8010b76:	e173      	b.n	8010e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	f040 814f 	bne.w	8010e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b86:	f003 0310 	and.w	r3, r3, #16
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 8148 	beq.w	8010e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b94:	f003 0310 	and.w	r3, r3, #16
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f000 8141 	beq.w	8010e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	60bb      	str	r3, [r7, #8]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	60bb      	str	r3, [r7, #8]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	60bb      	str	r3, [r7, #8]
 8010bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	695b      	ldr	r3, [r3, #20]
 8010bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bbe:	2b40      	cmp	r3, #64	@ 0x40
 8010bc0:	f040 80b6 	bne.w	8010d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f000 8145 	beq.w	8010e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010be2:	429a      	cmp	r2, r3
 8010be4:	f080 813e 	bcs.w	8010e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010bee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bf4:	69db      	ldr	r3, [r3, #28]
 8010bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010bfa:	f000 8088 	beq.w	8010d0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	330c      	adds	r3, #12
 8010c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010c0c:	e853 3f00 	ldrex	r3, [r3]
 8010c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	330c      	adds	r3, #12
 8010c26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010c3a:	e841 2300 	strex	r3, r2, [r1]
 8010c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1d9      	bne.n	8010bfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	3314      	adds	r3, #20
 8010c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c54:	e853 3f00 	ldrex	r3, [r3]
 8010c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c5c:	f023 0301 	bic.w	r3, r3, #1
 8010c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	3314      	adds	r3, #20
 8010c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010c7a:	e841 2300 	strex	r3, r2, [r1]
 8010c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d1e1      	bne.n	8010c4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	3314      	adds	r3, #20
 8010c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c90:	e853 3f00 	ldrex	r3, [r3]
 8010c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	3314      	adds	r3, #20
 8010ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010cb2:	e841 2300 	strex	r3, r2, [r1]
 8010cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1e3      	bne.n	8010c86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2220      	movs	r2, #32
 8010cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	330c      	adds	r3, #12
 8010cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cde:	f023 0310 	bic.w	r3, r3, #16
 8010ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	330c      	adds	r3, #12
 8010cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010cf0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010cf2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010cf8:	e841 2300 	strex	r3, r2, [r1]
 8010cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d1e3      	bne.n	8010ccc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fb f975 	bl	800bff8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2202      	movs	r2, #2
 8010d12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	4619      	mov	r1, r3
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 f8b7 	bl	8010e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010d2a:	e09b      	b.n	8010e64 <HAL_UART_IRQHandler+0x518>
 8010d2c:	080113af 	.word	0x080113af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f000 808e 	beq.w	8010e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 8089 	beq.w	8010e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	330c      	adds	r3, #12
 8010d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d60:	e853 3f00 	ldrex	r3, [r3]
 8010d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	330c      	adds	r3, #12
 8010d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010d7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d82:	e841 2300 	strex	r3, r2, [r1]
 8010d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1e3      	bne.n	8010d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	3314      	adds	r3, #20
 8010d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d98:	e853 3f00 	ldrex	r3, [r3]
 8010d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8010d9e:	6a3b      	ldr	r3, [r7, #32]
 8010da0:	f023 0301 	bic.w	r3, r3, #1
 8010da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3314      	adds	r3, #20
 8010dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8010db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dba:	e841 2300 	strex	r3, r2, [r1]
 8010dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1e3      	bne.n	8010d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2220      	movs	r2, #32
 8010dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	330c      	adds	r3, #12
 8010dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	e853 3f00 	ldrex	r3, [r3]
 8010de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f023 0310 	bic.w	r3, r3, #16
 8010dea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	330c      	adds	r3, #12
 8010df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010df8:	61fa      	str	r2, [r7, #28]
 8010dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfc:	69b9      	ldr	r1, [r7, #24]
 8010dfe:	69fa      	ldr	r2, [r7, #28]
 8010e00:	e841 2300 	strex	r3, r2, [r1]
 8010e04:	617b      	str	r3, [r7, #20]
   return(result);
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1e3      	bne.n	8010dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2202      	movs	r2, #2
 8010e10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010e16:	4619      	mov	r1, r3
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 f83d 	bl	8010e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010e1e:	e023      	b.n	8010e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d009      	beq.n	8010e40 <HAL_UART_IRQHandler+0x4f4>
 8010e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d003      	beq.n	8010e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 facc 	bl	80113d6 <UART_Transmit_IT>
    return;
 8010e3e:	e014      	b.n	8010e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00e      	beq.n	8010e6a <HAL_UART_IRQHandler+0x51e>
 8010e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d008      	beq.n	8010e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fb0c 	bl	8011476 <UART_EndTransmit_IT>
    return;
 8010e5e:	e004      	b.n	8010e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8010e60:	bf00      	nop
 8010e62:	e002      	b.n	8010e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8010e64:	bf00      	nop
 8010e66:	e000      	b.n	8010e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8010e68:	bf00      	nop
  }
}
 8010e6a:	37e8      	adds	r7, #232	@ 0xe8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b090      	sub	sp, #64	@ 0x40
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d137      	bne.n	8010f3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ece:	2200      	movs	r2, #0
 8010ed0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	3314      	adds	r3, #20
 8010ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010edc:	e853 3f00 	ldrex	r3, [r3]
 8010ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ee2:	6a3b      	ldr	r3, [r7, #32]
 8010ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3314      	adds	r3, #20
 8010ef0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ef2:	633a      	str	r2, [r7, #48]	@ 0x30
 8010ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010efa:	e841 2300 	strex	r3, r2, [r1]
 8010efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1e5      	bne.n	8010ed2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	330c      	adds	r3, #12
 8010f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	e853 3f00 	ldrex	r3, [r3]
 8010f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	330c      	adds	r3, #12
 8010f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010f26:	61fa      	str	r2, [r7, #28]
 8010f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2a:	69b9      	ldr	r1, [r7, #24]
 8010f2c:	69fa      	ldr	r2, [r7, #28]
 8010f2e:	e841 2300 	strex	r3, r2, [r1]
 8010f32:	617b      	str	r3, [r7, #20]
   return(result);
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1e5      	bne.n	8010f06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f3a:	e002      	b.n	8010f42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010f3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010f3e:	f7fa fa67 	bl	800b410 <HAL_UART_TxCpltCallback>
}
 8010f42:	bf00      	nop
 8010f44:	3740      	adds	r7, #64	@ 0x40
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b084      	sub	sp, #16
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f7ff ff89 	bl	8010e70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f5e:	bf00      	nop
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b09c      	sub	sp, #112	@ 0x70
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f72:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d172      	bne.n	8011068 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f84:	2200      	movs	r2, #0
 8010f86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	330c      	adds	r3, #12
 8010f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f92:	e853 3f00 	ldrex	r3, [r3]
 8010f96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	330c      	adds	r3, #12
 8010fa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010fa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010faa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010fae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010fb0:	e841 2300 	strex	r3, r2, [r1]
 8010fb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1e5      	bne.n	8010f88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	3314      	adds	r3, #20
 8010fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc6:	e853 3f00 	ldrex	r3, [r3]
 8010fca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fce:	f023 0301 	bic.w	r3, r3, #1
 8010fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8010fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	3314      	adds	r3, #20
 8010fda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010fdc:	647a      	str	r2, [r7, #68]	@ 0x44
 8010fde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fe4:	e841 2300 	strex	r3, r2, [r1]
 8010fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d1e5      	bne.n	8010fbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	3314      	adds	r3, #20
 8010ff6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffa:	e853 3f00 	ldrex	r3, [r3]
 8010ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011006:	663b      	str	r3, [r7, #96]	@ 0x60
 8011008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3314      	adds	r3, #20
 801100e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011010:	633a      	str	r2, [r7, #48]	@ 0x30
 8011012:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011018:	e841 2300 	strex	r3, r2, [r1]
 801101c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801101e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1e5      	bne.n	8010ff0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011026:	2220      	movs	r2, #32
 8011028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801102c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011030:	2b01      	cmp	r3, #1
 8011032:	d119      	bne.n	8011068 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	330c      	adds	r3, #12
 801103a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	e853 3f00 	ldrex	r3, [r3]
 8011042:	60fb      	str	r3, [r7, #12]
   return(result);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f023 0310 	bic.w	r3, r3, #16
 801104a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801104c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	330c      	adds	r3, #12
 8011052:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011054:	61fa      	str	r2, [r7, #28]
 8011056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011058:	69b9      	ldr	r1, [r7, #24]
 801105a:	69fa      	ldr	r2, [r7, #28]
 801105c:	e841 2300 	strex	r3, r2, [r1]
 8011060:	617b      	str	r3, [r7, #20]
   return(result);
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1e5      	bne.n	8011034 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801106a:	2200      	movs	r2, #0
 801106c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801106e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011072:	2b01      	cmp	r3, #1
 8011074:	d106      	bne.n	8011084 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801107a:	4619      	mov	r1, r3
 801107c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801107e:	f7ff ff0b 	bl	8010e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011082:	e002      	b.n	801108a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8011084:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011086:	f7fa fa05 	bl	800b494 <HAL_UART_RxCpltCallback>
}
 801108a:	bf00      	nop
 801108c:	3770      	adds	r7, #112	@ 0x70
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b084      	sub	sp, #16
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801109e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2201      	movs	r2, #1
 80110a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d108      	bne.n	80110c0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80110b2:	085b      	lsrs	r3, r3, #1
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	4619      	mov	r1, r3
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7ff feed 	bl	8010e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80110be:	e002      	b.n	80110c6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f7ff fedf 	bl	8010e84 <HAL_UART_RxHalfCpltCallback>
}
 80110c6:	bf00      	nop
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b084      	sub	sp, #16
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80110d6:	2300      	movs	r3, #0
 80110d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	695b      	ldr	r3, [r3, #20]
 80110e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110ea:	2b80      	cmp	r3, #128	@ 0x80
 80110ec:	bf0c      	ite	eq
 80110ee:	2301      	moveq	r3, #1
 80110f0:	2300      	movne	r3, #0
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b21      	cmp	r3, #33	@ 0x21
 8011100:	d108      	bne.n	8011114 <UART_DMAError+0x46>
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d005      	beq.n	8011114 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	2200      	movs	r2, #0
 801110c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 801110e:	68b8      	ldr	r0, [r7, #8]
 8011110:	f000 f8c2 	bl	8011298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	695b      	ldr	r3, [r3, #20]
 801111a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801111e:	2b40      	cmp	r3, #64	@ 0x40
 8011120:	bf0c      	ite	eq
 8011122:	2301      	moveq	r3, #1
 8011124:	2300      	movne	r3, #0
 8011126:	b2db      	uxtb	r3, r3
 8011128:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011130:	b2db      	uxtb	r3, r3
 8011132:	2b22      	cmp	r3, #34	@ 0x22
 8011134:	d108      	bne.n	8011148 <UART_DMAError+0x7a>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d005      	beq.n	8011148 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	2200      	movs	r2, #0
 8011140:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8011142:	68b8      	ldr	r0, [r7, #8]
 8011144:	f000 f8d0 	bl	80112e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801114c:	f043 0210 	orr.w	r2, r3, #16
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011154:	68b8      	ldr	r0, [r7, #8]
 8011156:	f7fa fa91 	bl	800b67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801115a:	bf00      	nop
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
	...

08011164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b098      	sub	sp, #96	@ 0x60
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	4613      	mov	r3, r2
 8011170:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	88fa      	ldrh	r2, [r7, #6]
 801117c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2200      	movs	r2, #0
 8011182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2222      	movs	r2, #34	@ 0x22
 8011188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011190:	4a3e      	ldr	r2, [pc, #248]	@ (801128c <UART_Start_Receive_DMA+0x128>)
 8011192:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011198:	4a3d      	ldr	r2, [pc, #244]	@ (8011290 <UART_Start_Receive_DMA+0x12c>)
 801119a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111a0:	4a3c      	ldr	r2, [pc, #240]	@ (8011294 <UART_Start_Receive_DMA+0x130>)
 80111a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111a8:	2200      	movs	r2, #0
 80111aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80111ac:	f107 0308 	add.w	r3, r7, #8
 80111b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	3304      	adds	r3, #4
 80111bc:	4619      	mov	r1, r3
 80111be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	88fb      	ldrh	r3, [r7, #6]
 80111c4:	f7fa fec0 	bl	800bf48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	613b      	str	r3, [r7, #16]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	613b      	str	r3, [r7, #16]
 80111dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	691b      	ldr	r3, [r3, #16]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d019      	beq.n	801121a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	330c      	adds	r3, #12
 80111ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111f0:	e853 3f00 	ldrex	r3, [r3]
 80111f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80111f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80111fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	330c      	adds	r3, #12
 8011204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011206:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8011208:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801120c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801120e:	e841 2300 	strex	r3, r2, [r1]
 8011212:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1e5      	bne.n	80111e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	3314      	adds	r3, #20
 8011220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011224:	e853 3f00 	ldrex	r3, [r3]
 8011228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801122c:	f043 0301 	orr.w	r3, r3, #1
 8011230:	657b      	str	r3, [r7, #84]	@ 0x54
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	3314      	adds	r3, #20
 8011238:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801123a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801123c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801123e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011242:	e841 2300 	strex	r3, r2, [r1]
 8011246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801124a:	2b00      	cmp	r3, #0
 801124c:	d1e5      	bne.n	801121a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	3314      	adds	r3, #20
 8011254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	e853 3f00 	ldrex	r3, [r3]
 801125c:	617b      	str	r3, [r7, #20]
   return(result);
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011264:	653b      	str	r3, [r7, #80]	@ 0x50
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	3314      	adds	r3, #20
 801126c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801126e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011272:	6a39      	ldr	r1, [r7, #32]
 8011274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011276:	e841 2300 	strex	r3, r2, [r1]
 801127a:	61fb      	str	r3, [r7, #28]
   return(result);
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d1e5      	bne.n	801124e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011282:	2300      	movs	r3, #0
}
 8011284:	4618      	mov	r0, r3
 8011286:	3760      	adds	r7, #96	@ 0x60
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	08010f67 	.word	0x08010f67
 8011290:	08011093 	.word	0x08011093
 8011294:	080110cf 	.word	0x080110cf

08011298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011298:	b480      	push	{r7}
 801129a:	b089      	sub	sp, #36	@ 0x24
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	330c      	adds	r3, #12
 80112a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	e853 3f00 	ldrex	r3, [r3]
 80112ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80112b6:	61fb      	str	r3, [r7, #28]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	330c      	adds	r3, #12
 80112be:	69fa      	ldr	r2, [r7, #28]
 80112c0:	61ba      	str	r2, [r7, #24]
 80112c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c4:	6979      	ldr	r1, [r7, #20]
 80112c6:	69ba      	ldr	r2, [r7, #24]
 80112c8:	e841 2300 	strex	r3, r2, [r1]
 80112cc:	613b      	str	r3, [r7, #16]
   return(result);
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1e5      	bne.n	80112a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2220      	movs	r2, #32
 80112d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80112dc:	bf00      	nop
 80112de:	3724      	adds	r7, #36	@ 0x24
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b095      	sub	sp, #84	@ 0x54
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	330c      	adds	r3, #12
 80112f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112fa:	e853 3f00 	ldrex	r3, [r3]
 80112fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	330c      	adds	r3, #12
 801130e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011310:	643a      	str	r2, [r7, #64]	@ 0x40
 8011312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011318:	e841 2300 	strex	r3, r2, [r1]
 801131c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801131e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1e5      	bne.n	80112f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	3314      	adds	r3, #20
 801132a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801132c:	6a3b      	ldr	r3, [r7, #32]
 801132e:	e853 3f00 	ldrex	r3, [r3]
 8011332:	61fb      	str	r3, [r7, #28]
   return(result);
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	f023 0301 	bic.w	r3, r3, #1
 801133a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	3314      	adds	r3, #20
 8011342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801134a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801134c:	e841 2300 	strex	r3, r2, [r1]
 8011350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011354:	2b00      	cmp	r3, #0
 8011356:	d1e5      	bne.n	8011324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801135c:	2b01      	cmp	r3, #1
 801135e:	d119      	bne.n	8011394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	330c      	adds	r3, #12
 8011366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	e853 3f00 	ldrex	r3, [r3]
 801136e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	f023 0310 	bic.w	r3, r3, #16
 8011376:	647b      	str	r3, [r7, #68]	@ 0x44
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	330c      	adds	r3, #12
 801137e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011380:	61ba      	str	r2, [r7, #24]
 8011382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011384:	6979      	ldr	r1, [r7, #20]
 8011386:	69ba      	ldr	r2, [r7, #24]
 8011388:	e841 2300 	strex	r3, r2, [r1]
 801138c:	613b      	str	r3, [r7, #16]
   return(result);
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d1e5      	bne.n	8011360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2220      	movs	r2, #32
 8011398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80113a2:	bf00      	nop
 80113a4:	3754      	adds	r7, #84	@ 0x54
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr

080113ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b084      	sub	sp, #16
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2200      	movs	r2, #0
 80113c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2200      	movs	r2, #0
 80113c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f7fa f957 	bl	800b67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113ce:	bf00      	nop
 80113d0:	3710      	adds	r7, #16
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}

080113d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80113d6:	b480      	push	{r7}
 80113d8:	b085      	sub	sp, #20
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b21      	cmp	r3, #33	@ 0x21
 80113e8:	d13e      	bne.n	8011468 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113f2:	d114      	bne.n	801141e <UART_Transmit_IT+0x48>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	691b      	ldr	r3, [r3, #16]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d110      	bne.n	801141e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a1b      	ldr	r3, [r3, #32]
 8011400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011410:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6a1b      	ldr	r3, [r3, #32]
 8011416:	1c9a      	adds	r2, r3, #2
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	621a      	str	r2, [r3, #32]
 801141c:	e008      	b.n	8011430 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6a1b      	ldr	r3, [r3, #32]
 8011422:	1c59      	adds	r1, r3, #1
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	6211      	str	r1, [r2, #32]
 8011428:	781a      	ldrb	r2, [r3, #0]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011434:	b29b      	uxth	r3, r3
 8011436:	3b01      	subs	r3, #1
 8011438:	b29b      	uxth	r3, r3
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	4619      	mov	r1, r3
 801143e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011440:	2b00      	cmp	r3, #0
 8011442:	d10f      	bne.n	8011464 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	68da      	ldr	r2, [r3, #12]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011452:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	68da      	ldr	r2, [r3, #12]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011462:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011464:	2300      	movs	r3, #0
 8011466:	e000      	b.n	801146a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011468:	2302      	movs	r3, #2
  }
}
 801146a:	4618      	mov	r0, r3
 801146c:	3714      	adds	r7, #20
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr

08011476 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b082      	sub	sp, #8
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	68da      	ldr	r2, [r3, #12]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801148c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2220      	movs	r2, #32
 8011492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7f9 ffba 	bl	800b410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801149c:	2300      	movs	r3, #0
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3708      	adds	r7, #8
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}

080114a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80114a6:	b580      	push	{r7, lr}
 80114a8:	b08c      	sub	sp, #48	@ 0x30
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	2b22      	cmp	r3, #34	@ 0x22
 80114b8:	f040 80ae 	bne.w	8011618 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	689b      	ldr	r3, [r3, #8]
 80114c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114c4:	d117      	bne.n	80114f6 <UART_Receive_IT+0x50>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d113      	bne.n	80114f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80114ce:	2300      	movs	r3, #0
 80114d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	b29b      	uxth	r3, r3
 80114e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114ee:	1c9a      	adds	r2, r3, #2
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80114f4:	e026      	b.n	8011544 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80114fc:	2300      	movs	r3, #0
 80114fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	689b      	ldr	r3, [r3, #8]
 8011504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011508:	d007      	beq.n	801151a <UART_Receive_IT+0x74>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d10a      	bne.n	8011528 <UART_Receive_IT+0x82>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	b2da      	uxtb	r2, r3
 8011522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011524:	701a      	strb	r2, [r3, #0]
 8011526:	e008      	b.n	801153a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	b2db      	uxtb	r3, r3
 8011530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011534:	b2da      	uxtb	r2, r3
 8011536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011538:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801153e:	1c5a      	adds	r2, r3, #1
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011548:	b29b      	uxth	r3, r3
 801154a:	3b01      	subs	r3, #1
 801154c:	b29b      	uxth	r3, r3
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	4619      	mov	r1, r3
 8011552:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011554:	2b00      	cmp	r3, #0
 8011556:	d15d      	bne.n	8011614 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f022 0220 	bic.w	r2, r2, #32
 8011566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	68da      	ldr	r2, [r3, #12]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	695a      	ldr	r2, [r3, #20]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f022 0201 	bic.w	r2, r2, #1
 8011586:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2220      	movs	r2, #32
 801158c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801159a:	2b01      	cmp	r3, #1
 801159c:	d135      	bne.n	801160a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	330c      	adds	r3, #12
 80115aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	e853 3f00 	ldrex	r3, [r3]
 80115b2:	613b      	str	r3, [r7, #16]
   return(result);
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	f023 0310 	bic.w	r3, r3, #16
 80115ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	330c      	adds	r3, #12
 80115c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115c4:	623a      	str	r2, [r7, #32]
 80115c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c8:	69f9      	ldr	r1, [r7, #28]
 80115ca:	6a3a      	ldr	r2, [r7, #32]
 80115cc:	e841 2300 	strex	r3, r2, [r1]
 80115d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1e5      	bne.n	80115a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f003 0310 	and.w	r3, r3, #16
 80115e2:	2b10      	cmp	r3, #16
 80115e4:	d10a      	bne.n	80115fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80115e6:	2300      	movs	r3, #0
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	60fb      	str	r3, [r7, #12]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	60fb      	str	r3, [r7, #12]
 80115fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011600:	4619      	mov	r1, r3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f7ff fc48 	bl	8010e98 <HAL_UARTEx_RxEventCallback>
 8011608:	e002      	b.n	8011610 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f7f9 ff42 	bl	800b494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011610:	2300      	movs	r3, #0
 8011612:	e002      	b.n	801161a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011614:	2300      	movs	r3, #0
 8011616:	e000      	b.n	801161a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8011618:	2302      	movs	r3, #2
  }
}
 801161a:	4618      	mov	r0, r3
 801161c:	3730      	adds	r7, #48	@ 0x30
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011628:	b0c0      	sub	sp, #256	@ 0x100
 801162a:	af00      	add	r7, sp, #0
 801162c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801163c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011640:	68d9      	ldr	r1, [r3, #12]
 8011642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	ea40 0301 	orr.w	r3, r0, r1
 801164c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801164e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011652:	689a      	ldr	r2, [r3, #8]
 8011654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011658:	691b      	ldr	r3, [r3, #16]
 801165a:	431a      	orrs	r2, r3
 801165c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	431a      	orrs	r2, r3
 8011664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011668:	69db      	ldr	r3, [r3, #28]
 801166a:	4313      	orrs	r3, r2
 801166c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801167c:	f021 010c 	bic.w	r1, r1, #12
 8011680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801168a:	430b      	orrs	r3, r1
 801168c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801168e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	695b      	ldr	r3, [r3, #20]
 8011696:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801169a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801169e:	6999      	ldr	r1, [r3, #24]
 80116a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	ea40 0301 	orr.w	r3, r0, r1
 80116aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80116ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	4b8f      	ldr	r3, [pc, #572]	@ (80118f0 <UART_SetConfig+0x2cc>)
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d005      	beq.n	80116c4 <UART_SetConfig+0xa0>
 80116b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	4b8d      	ldr	r3, [pc, #564]	@ (80118f4 <UART_SetConfig+0x2d0>)
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d104      	bne.n	80116ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80116c4:	f7fd f91c 	bl	800e900 <HAL_RCC_GetPCLK2Freq>
 80116c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80116cc:	e003      	b.n	80116d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80116ce:	f7fd f903 	bl	800e8d8 <HAL_RCC_GetPCLK1Freq>
 80116d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116da:	69db      	ldr	r3, [r3, #28]
 80116dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116e0:	f040 810c 	bne.w	80118fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80116e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80116e8:	2200      	movs	r2, #0
 80116ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80116ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80116f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80116f6:	4622      	mov	r2, r4
 80116f8:	462b      	mov	r3, r5
 80116fa:	1891      	adds	r1, r2, r2
 80116fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80116fe:	415b      	adcs	r3, r3
 8011700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011706:	4621      	mov	r1, r4
 8011708:	eb12 0801 	adds.w	r8, r2, r1
 801170c:	4629      	mov	r1, r5
 801170e:	eb43 0901 	adc.w	r9, r3, r1
 8011712:	f04f 0200 	mov.w	r2, #0
 8011716:	f04f 0300 	mov.w	r3, #0
 801171a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801171e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011726:	4690      	mov	r8, r2
 8011728:	4699      	mov	r9, r3
 801172a:	4623      	mov	r3, r4
 801172c:	eb18 0303 	adds.w	r3, r8, r3
 8011730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011734:	462b      	mov	r3, r5
 8011736:	eb49 0303 	adc.w	r3, r9, r3
 801173a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801173e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	2200      	movs	r2, #0
 8011746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801174a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801174e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011752:	460b      	mov	r3, r1
 8011754:	18db      	adds	r3, r3, r3
 8011756:	653b      	str	r3, [r7, #80]	@ 0x50
 8011758:	4613      	mov	r3, r2
 801175a:	eb42 0303 	adc.w	r3, r2, r3
 801175e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011768:	f7ef fa9e 	bl	8000ca8 <__aeabi_uldivmod>
 801176c:	4602      	mov	r2, r0
 801176e:	460b      	mov	r3, r1
 8011770:	4b61      	ldr	r3, [pc, #388]	@ (80118f8 <UART_SetConfig+0x2d4>)
 8011772:	fba3 2302 	umull	r2, r3, r3, r2
 8011776:	095b      	lsrs	r3, r3, #5
 8011778:	011c      	lsls	r4, r3, #4
 801177a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801177e:	2200      	movs	r2, #0
 8011780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011784:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801178c:	4642      	mov	r2, r8
 801178e:	464b      	mov	r3, r9
 8011790:	1891      	adds	r1, r2, r2
 8011792:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011794:	415b      	adcs	r3, r3
 8011796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801179c:	4641      	mov	r1, r8
 801179e:	eb12 0a01 	adds.w	sl, r2, r1
 80117a2:	4649      	mov	r1, r9
 80117a4:	eb43 0b01 	adc.w	fp, r3, r1
 80117a8:	f04f 0200 	mov.w	r2, #0
 80117ac:	f04f 0300 	mov.w	r3, #0
 80117b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80117b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80117b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117bc:	4692      	mov	sl, r2
 80117be:	469b      	mov	fp, r3
 80117c0:	4643      	mov	r3, r8
 80117c2:	eb1a 0303 	adds.w	r3, sl, r3
 80117c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80117ca:	464b      	mov	r3, r9
 80117cc:	eb4b 0303 	adc.w	r3, fp, r3
 80117d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80117d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80117e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80117e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80117e8:	460b      	mov	r3, r1
 80117ea:	18db      	adds	r3, r3, r3
 80117ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80117ee:	4613      	mov	r3, r2
 80117f0:	eb42 0303 	adc.w	r3, r2, r3
 80117f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80117f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80117fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80117fe:	f7ef fa53 	bl	8000ca8 <__aeabi_uldivmod>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	4611      	mov	r1, r2
 8011808:	4b3b      	ldr	r3, [pc, #236]	@ (80118f8 <UART_SetConfig+0x2d4>)
 801180a:	fba3 2301 	umull	r2, r3, r3, r1
 801180e:	095b      	lsrs	r3, r3, #5
 8011810:	2264      	movs	r2, #100	@ 0x64
 8011812:	fb02 f303 	mul.w	r3, r2, r3
 8011816:	1acb      	subs	r3, r1, r3
 8011818:	00db      	lsls	r3, r3, #3
 801181a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801181e:	4b36      	ldr	r3, [pc, #216]	@ (80118f8 <UART_SetConfig+0x2d4>)
 8011820:	fba3 2302 	umull	r2, r3, r3, r2
 8011824:	095b      	lsrs	r3, r3, #5
 8011826:	005b      	lsls	r3, r3, #1
 8011828:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801182c:	441c      	add	r4, r3
 801182e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011832:	2200      	movs	r2, #0
 8011834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011838:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801183c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011840:	4642      	mov	r2, r8
 8011842:	464b      	mov	r3, r9
 8011844:	1891      	adds	r1, r2, r2
 8011846:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011848:	415b      	adcs	r3, r3
 801184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801184c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011850:	4641      	mov	r1, r8
 8011852:	1851      	adds	r1, r2, r1
 8011854:	6339      	str	r1, [r7, #48]	@ 0x30
 8011856:	4649      	mov	r1, r9
 8011858:	414b      	adcs	r3, r1
 801185a:	637b      	str	r3, [r7, #52]	@ 0x34
 801185c:	f04f 0200 	mov.w	r2, #0
 8011860:	f04f 0300 	mov.w	r3, #0
 8011864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011868:	4659      	mov	r1, fp
 801186a:	00cb      	lsls	r3, r1, #3
 801186c:	4651      	mov	r1, sl
 801186e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011872:	4651      	mov	r1, sl
 8011874:	00ca      	lsls	r2, r1, #3
 8011876:	4610      	mov	r0, r2
 8011878:	4619      	mov	r1, r3
 801187a:	4603      	mov	r3, r0
 801187c:	4642      	mov	r2, r8
 801187e:	189b      	adds	r3, r3, r2
 8011880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011884:	464b      	mov	r3, r9
 8011886:	460a      	mov	r2, r1
 8011888:	eb42 0303 	adc.w	r3, r2, r3
 801188c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801189c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80118a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80118a4:	460b      	mov	r3, r1
 80118a6:	18db      	adds	r3, r3, r3
 80118a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80118aa:	4613      	mov	r3, r2
 80118ac:	eb42 0303 	adc.w	r3, r2, r3
 80118b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80118b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80118b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80118ba:	f7ef f9f5 	bl	8000ca8 <__aeabi_uldivmod>
 80118be:	4602      	mov	r2, r0
 80118c0:	460b      	mov	r3, r1
 80118c2:	4b0d      	ldr	r3, [pc, #52]	@ (80118f8 <UART_SetConfig+0x2d4>)
 80118c4:	fba3 1302 	umull	r1, r3, r3, r2
 80118c8:	095b      	lsrs	r3, r3, #5
 80118ca:	2164      	movs	r1, #100	@ 0x64
 80118cc:	fb01 f303 	mul.w	r3, r1, r3
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	00db      	lsls	r3, r3, #3
 80118d4:	3332      	adds	r3, #50	@ 0x32
 80118d6:	4a08      	ldr	r2, [pc, #32]	@ (80118f8 <UART_SetConfig+0x2d4>)
 80118d8:	fba2 2303 	umull	r2, r3, r2, r3
 80118dc:	095b      	lsrs	r3, r3, #5
 80118de:	f003 0207 	and.w	r2, r3, #7
 80118e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4422      	add	r2, r4
 80118ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80118ec:	e106      	b.n	8011afc <UART_SetConfig+0x4d8>
 80118ee:	bf00      	nop
 80118f0:	40011000 	.word	0x40011000
 80118f4:	40011400 	.word	0x40011400
 80118f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80118fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011900:	2200      	movs	r2, #0
 8011902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011906:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801190a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801190e:	4642      	mov	r2, r8
 8011910:	464b      	mov	r3, r9
 8011912:	1891      	adds	r1, r2, r2
 8011914:	6239      	str	r1, [r7, #32]
 8011916:	415b      	adcs	r3, r3
 8011918:	627b      	str	r3, [r7, #36]	@ 0x24
 801191a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801191e:	4641      	mov	r1, r8
 8011920:	1854      	adds	r4, r2, r1
 8011922:	4649      	mov	r1, r9
 8011924:	eb43 0501 	adc.w	r5, r3, r1
 8011928:	f04f 0200 	mov.w	r2, #0
 801192c:	f04f 0300 	mov.w	r3, #0
 8011930:	00eb      	lsls	r3, r5, #3
 8011932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011936:	00e2      	lsls	r2, r4, #3
 8011938:	4614      	mov	r4, r2
 801193a:	461d      	mov	r5, r3
 801193c:	4643      	mov	r3, r8
 801193e:	18e3      	adds	r3, r4, r3
 8011940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011944:	464b      	mov	r3, r9
 8011946:	eb45 0303 	adc.w	r3, r5, r3
 801194a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801194e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	2200      	movs	r2, #0
 8011956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801195a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801195e:	f04f 0200 	mov.w	r2, #0
 8011962:	f04f 0300 	mov.w	r3, #0
 8011966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801196a:	4629      	mov	r1, r5
 801196c:	008b      	lsls	r3, r1, #2
 801196e:	4621      	mov	r1, r4
 8011970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011974:	4621      	mov	r1, r4
 8011976:	008a      	lsls	r2, r1, #2
 8011978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801197c:	f7ef f994 	bl	8000ca8 <__aeabi_uldivmod>
 8011980:	4602      	mov	r2, r0
 8011982:	460b      	mov	r3, r1
 8011984:	4b60      	ldr	r3, [pc, #384]	@ (8011b08 <UART_SetConfig+0x4e4>)
 8011986:	fba3 2302 	umull	r2, r3, r3, r2
 801198a:	095b      	lsrs	r3, r3, #5
 801198c:	011c      	lsls	r4, r3, #4
 801198e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011992:	2200      	movs	r2, #0
 8011994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801199c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80119a0:	4642      	mov	r2, r8
 80119a2:	464b      	mov	r3, r9
 80119a4:	1891      	adds	r1, r2, r2
 80119a6:	61b9      	str	r1, [r7, #24]
 80119a8:	415b      	adcs	r3, r3
 80119aa:	61fb      	str	r3, [r7, #28]
 80119ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119b0:	4641      	mov	r1, r8
 80119b2:	1851      	adds	r1, r2, r1
 80119b4:	6139      	str	r1, [r7, #16]
 80119b6:	4649      	mov	r1, r9
 80119b8:	414b      	adcs	r3, r1
 80119ba:	617b      	str	r3, [r7, #20]
 80119bc:	f04f 0200 	mov.w	r2, #0
 80119c0:	f04f 0300 	mov.w	r3, #0
 80119c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80119c8:	4659      	mov	r1, fp
 80119ca:	00cb      	lsls	r3, r1, #3
 80119cc:	4651      	mov	r1, sl
 80119ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80119d2:	4651      	mov	r1, sl
 80119d4:	00ca      	lsls	r2, r1, #3
 80119d6:	4610      	mov	r0, r2
 80119d8:	4619      	mov	r1, r3
 80119da:	4603      	mov	r3, r0
 80119dc:	4642      	mov	r2, r8
 80119de:	189b      	adds	r3, r3, r2
 80119e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80119e4:	464b      	mov	r3, r9
 80119e6:	460a      	mov	r2, r1
 80119e8:	eb42 0303 	adc.w	r3, r2, r3
 80119ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80119f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80119fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80119fc:	f04f 0200 	mov.w	r2, #0
 8011a00:	f04f 0300 	mov.w	r3, #0
 8011a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011a08:	4649      	mov	r1, r9
 8011a0a:	008b      	lsls	r3, r1, #2
 8011a0c:	4641      	mov	r1, r8
 8011a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a12:	4641      	mov	r1, r8
 8011a14:	008a      	lsls	r2, r1, #2
 8011a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011a1a:	f7ef f945 	bl	8000ca8 <__aeabi_uldivmod>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	4611      	mov	r1, r2
 8011a24:	4b38      	ldr	r3, [pc, #224]	@ (8011b08 <UART_SetConfig+0x4e4>)
 8011a26:	fba3 2301 	umull	r2, r3, r3, r1
 8011a2a:	095b      	lsrs	r3, r3, #5
 8011a2c:	2264      	movs	r2, #100	@ 0x64
 8011a2e:	fb02 f303 	mul.w	r3, r2, r3
 8011a32:	1acb      	subs	r3, r1, r3
 8011a34:	011b      	lsls	r3, r3, #4
 8011a36:	3332      	adds	r3, #50	@ 0x32
 8011a38:	4a33      	ldr	r2, [pc, #204]	@ (8011b08 <UART_SetConfig+0x4e4>)
 8011a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8011a3e:	095b      	lsrs	r3, r3, #5
 8011a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a44:	441c      	add	r4, r3
 8011a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8011a4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8011a50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011a54:	4642      	mov	r2, r8
 8011a56:	464b      	mov	r3, r9
 8011a58:	1891      	adds	r1, r2, r2
 8011a5a:	60b9      	str	r1, [r7, #8]
 8011a5c:	415b      	adcs	r3, r3
 8011a5e:	60fb      	str	r3, [r7, #12]
 8011a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011a64:	4641      	mov	r1, r8
 8011a66:	1851      	adds	r1, r2, r1
 8011a68:	6039      	str	r1, [r7, #0]
 8011a6a:	4649      	mov	r1, r9
 8011a6c:	414b      	adcs	r3, r1
 8011a6e:	607b      	str	r3, [r7, #4]
 8011a70:	f04f 0200 	mov.w	r2, #0
 8011a74:	f04f 0300 	mov.w	r3, #0
 8011a78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011a7c:	4659      	mov	r1, fp
 8011a7e:	00cb      	lsls	r3, r1, #3
 8011a80:	4651      	mov	r1, sl
 8011a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a86:	4651      	mov	r1, sl
 8011a88:	00ca      	lsls	r2, r1, #3
 8011a8a:	4610      	mov	r0, r2
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4603      	mov	r3, r0
 8011a90:	4642      	mov	r2, r8
 8011a92:	189b      	adds	r3, r3, r2
 8011a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a96:	464b      	mov	r3, r9
 8011a98:	460a      	mov	r2, r1
 8011a9a:	eb42 0303 	adc.w	r3, r2, r3
 8011a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8011aaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8011aac:	f04f 0200 	mov.w	r2, #0
 8011ab0:	f04f 0300 	mov.w	r3, #0
 8011ab4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011ab8:	4649      	mov	r1, r9
 8011aba:	008b      	lsls	r3, r1, #2
 8011abc:	4641      	mov	r1, r8
 8011abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011ac2:	4641      	mov	r1, r8
 8011ac4:	008a      	lsls	r2, r1, #2
 8011ac6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011aca:	f7ef f8ed 	bl	8000ca8 <__aeabi_uldivmod>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8011b08 <UART_SetConfig+0x4e4>)
 8011ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8011ad8:	095b      	lsrs	r3, r3, #5
 8011ada:	2164      	movs	r1, #100	@ 0x64
 8011adc:	fb01 f303 	mul.w	r3, r1, r3
 8011ae0:	1ad3      	subs	r3, r2, r3
 8011ae2:	011b      	lsls	r3, r3, #4
 8011ae4:	3332      	adds	r3, #50	@ 0x32
 8011ae6:	4a08      	ldr	r2, [pc, #32]	@ (8011b08 <UART_SetConfig+0x4e4>)
 8011ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8011aec:	095b      	lsrs	r3, r3, #5
 8011aee:	f003 020f 	and.w	r2, r3, #15
 8011af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4422      	add	r2, r4
 8011afa:	609a      	str	r2, [r3, #8]
}
 8011afc:	bf00      	nop
 8011afe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011b02:	46bd      	mov	sp, r7
 8011b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b08:	51eb851f 	.word	0x51eb851f

08011b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011b0c:	b084      	sub	sp, #16
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b084      	sub	sp, #16
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	f107 001c 	add.w	r0, r7, #28
 8011b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011b1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d123      	bne.n	8011b6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8011b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d105      	bne.n	8011b62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f001 fae8 	bl	8013138 <USB_CoreReset>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	73fb      	strb	r3, [r7, #15]
 8011b6c:	e01b      	b.n	8011ba6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f001 fadc 	bl	8013138 <USB_CoreReset>
 8011b80:	4603      	mov	r3, r0
 8011b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d106      	bne.n	8011b9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	639a      	str	r2, [r3, #56]	@ 0x38
 8011b98:	e005      	b.n	8011ba6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011ba6:	7fbb      	ldrb	r3, [r7, #30]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d10b      	bne.n	8011bc4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	689b      	ldr	r3, [r3, #8]
 8011bb0:	f043 0206 	orr.w	r2, r3, #6
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	689b      	ldr	r3, [r3, #8]
 8011bbc:	f043 0220 	orr.w	r2, r3, #32
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011bd0:	b004      	add	sp, #16
 8011bd2:	4770      	bx	lr

08011bd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b087      	sub	sp, #28
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	4613      	mov	r3, r2
 8011be0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011be2:	79fb      	ldrb	r3, [r7, #7]
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d165      	bne.n	8011cb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	4a41      	ldr	r2, [pc, #260]	@ (8011cf0 <USB_SetTurnaroundTime+0x11c>)
 8011bec:	4293      	cmp	r3, r2
 8011bee:	d906      	bls.n	8011bfe <USB_SetTurnaroundTime+0x2a>
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	4a40      	ldr	r2, [pc, #256]	@ (8011cf4 <USB_SetTurnaroundTime+0x120>)
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d202      	bcs.n	8011bfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011bf8:	230f      	movs	r3, #15
 8011bfa:	617b      	str	r3, [r7, #20]
 8011bfc:	e062      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	4a3c      	ldr	r2, [pc, #240]	@ (8011cf4 <USB_SetTurnaroundTime+0x120>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d306      	bcc.n	8011c14 <USB_SetTurnaroundTime+0x40>
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	4a3b      	ldr	r2, [pc, #236]	@ (8011cf8 <USB_SetTurnaroundTime+0x124>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d202      	bcs.n	8011c14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011c0e:	230e      	movs	r3, #14
 8011c10:	617b      	str	r3, [r7, #20]
 8011c12:	e057      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	4a38      	ldr	r2, [pc, #224]	@ (8011cf8 <USB_SetTurnaroundTime+0x124>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d306      	bcc.n	8011c2a <USB_SetTurnaroundTime+0x56>
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	4a37      	ldr	r2, [pc, #220]	@ (8011cfc <USB_SetTurnaroundTime+0x128>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d202      	bcs.n	8011c2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011c24:	230d      	movs	r3, #13
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e04c      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	4a33      	ldr	r2, [pc, #204]	@ (8011cfc <USB_SetTurnaroundTime+0x128>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d306      	bcc.n	8011c40 <USB_SetTurnaroundTime+0x6c>
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	4a32      	ldr	r2, [pc, #200]	@ (8011d00 <USB_SetTurnaroundTime+0x12c>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d802      	bhi.n	8011c40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011c3a:	230c      	movs	r3, #12
 8011c3c:	617b      	str	r3, [r7, #20]
 8011c3e:	e041      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	4a2f      	ldr	r2, [pc, #188]	@ (8011d00 <USB_SetTurnaroundTime+0x12c>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d906      	bls.n	8011c56 <USB_SetTurnaroundTime+0x82>
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8011d04 <USB_SetTurnaroundTime+0x130>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d802      	bhi.n	8011c56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011c50:	230b      	movs	r3, #11
 8011c52:	617b      	str	r3, [r7, #20]
 8011c54:	e036      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	4a2a      	ldr	r2, [pc, #168]	@ (8011d04 <USB_SetTurnaroundTime+0x130>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d906      	bls.n	8011c6c <USB_SetTurnaroundTime+0x98>
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	4a29      	ldr	r2, [pc, #164]	@ (8011d08 <USB_SetTurnaroundTime+0x134>)
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d802      	bhi.n	8011c6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011c66:	230a      	movs	r3, #10
 8011c68:	617b      	str	r3, [r7, #20]
 8011c6a:	e02b      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	4a26      	ldr	r2, [pc, #152]	@ (8011d08 <USB_SetTurnaroundTime+0x134>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d906      	bls.n	8011c82 <USB_SetTurnaroundTime+0xae>
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	4a25      	ldr	r2, [pc, #148]	@ (8011d0c <USB_SetTurnaroundTime+0x138>)
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d202      	bcs.n	8011c82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011c7c:	2309      	movs	r3, #9
 8011c7e:	617b      	str	r3, [r7, #20]
 8011c80:	e020      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	4a21      	ldr	r2, [pc, #132]	@ (8011d0c <USB_SetTurnaroundTime+0x138>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d306      	bcc.n	8011c98 <USB_SetTurnaroundTime+0xc4>
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	4a20      	ldr	r2, [pc, #128]	@ (8011d10 <USB_SetTurnaroundTime+0x13c>)
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d802      	bhi.n	8011c98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011c92:	2308      	movs	r3, #8
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	e015      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8011d10 <USB_SetTurnaroundTime+0x13c>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d906      	bls.n	8011cae <USB_SetTurnaroundTime+0xda>
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8011d14 <USB_SetTurnaroundTime+0x140>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d202      	bcs.n	8011cae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011ca8:	2307      	movs	r3, #7
 8011caa:	617b      	str	r3, [r7, #20]
 8011cac:	e00a      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011cae:	2306      	movs	r3, #6
 8011cb0:	617b      	str	r3, [r7, #20]
 8011cb2:	e007      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011cb4:	79fb      	ldrb	r3, [r7, #7]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d102      	bne.n	8011cc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011cba:	2309      	movs	r3, #9
 8011cbc:	617b      	str	r3, [r7, #20]
 8011cbe:	e001      	b.n	8011cc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011cc0:	2309      	movs	r3, #9
 8011cc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	68db      	ldr	r3, [r3, #12]
 8011cc8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	68da      	ldr	r2, [r3, #12]
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	029b      	lsls	r3, r3, #10
 8011cd8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011cdc:	431a      	orrs	r2, r3
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011ce2:	2300      	movs	r3, #0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	371c      	adds	r7, #28
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr
 8011cf0:	00d8acbf 	.word	0x00d8acbf
 8011cf4:	00e4e1c0 	.word	0x00e4e1c0
 8011cf8:	00f42400 	.word	0x00f42400
 8011cfc:	01067380 	.word	0x01067380
 8011d00:	011a499f 	.word	0x011a499f
 8011d04:	01312cff 	.word	0x01312cff
 8011d08:	014ca43f 	.word	0x014ca43f
 8011d0c:	016e3600 	.word	0x016e3600
 8011d10:	01a6ab1f 	.word	0x01a6ab1f
 8011d14:	01e84800 	.word	0x01e84800

08011d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	689b      	ldr	r3, [r3, #8]
 8011d24:	f043 0201 	orr.w	r2, r3, #1
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d2c:	2300      	movs	r3, #0
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	370c      	adds	r7, #12
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d3a:	b480      	push	{r7}
 8011d3c:	b083      	sub	sp, #12
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	f023 0201 	bic.w	r2, r3, #1
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr

08011d5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	460b      	mov	r3, r1
 8011d66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011d78:	78fb      	ldrb	r3, [r7, #3]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d115      	bne.n	8011daa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011d8a:	200a      	movs	r0, #10
 8011d8c:	f7f9 fe98 	bl	800bac0 <HAL_Delay>
      ms += 10U;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	330a      	adds	r3, #10
 8011d94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f001 f93f 	bl	801301a <USB_GetMode>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d01e      	beq.n	8011de0 <USB_SetCurrentMode+0x84>
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2bc7      	cmp	r3, #199	@ 0xc7
 8011da6:	d9f0      	bls.n	8011d8a <USB_SetCurrentMode+0x2e>
 8011da8:	e01a      	b.n	8011de0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011daa:	78fb      	ldrb	r3, [r7, #3]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d115      	bne.n	8011ddc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011dbc:	200a      	movs	r0, #10
 8011dbe:	f7f9 fe7f 	bl	800bac0 <HAL_Delay>
      ms += 10U;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	330a      	adds	r3, #10
 8011dc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f001 f926 	bl	801301a <USB_GetMode>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d005      	beq.n	8011de0 <USB_SetCurrentMode+0x84>
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2bc7      	cmp	r3, #199	@ 0xc7
 8011dd8:	d9f0      	bls.n	8011dbc <USB_SetCurrentMode+0x60>
 8011dda:	e001      	b.n	8011de0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e005      	b.n	8011dec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2bc8      	cmp	r3, #200	@ 0xc8
 8011de4:	d101      	bne.n	8011dea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011de6:	2301      	movs	r3, #1
 8011de8:	e000      	b.n	8011dec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011df4:	b084      	sub	sp, #16
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b086      	sub	sp, #24
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e0e:	2300      	movs	r3, #0
 8011e10:	613b      	str	r3, [r7, #16]
 8011e12:	e009      	b.n	8011e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	3340      	adds	r3, #64	@ 0x40
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4413      	add	r3, r2
 8011e1e:	2200      	movs	r2, #0
 8011e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	3301      	adds	r3, #1
 8011e26:	613b      	str	r3, [r7, #16]
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	2b0e      	cmp	r3, #14
 8011e2c:	d9f2      	bls.n	8011e14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d11c      	bne.n	8011e70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011e44:	f043 0302 	orr.w	r3, r3, #2
 8011e48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8011e6e:	e00b      	b.n	8011e88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011e8e:	461a      	mov	r2, r3
 8011e90:	2300      	movs	r3, #0
 8011e92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011e94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d10d      	bne.n	8011eb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d104      	bne.n	8011eae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 f968 	bl	801217c <USB_SetDevSpeed>
 8011eac:	e008      	b.n	8011ec0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011eae:	2101      	movs	r1, #1
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 f963 	bl	801217c <USB_SetDevSpeed>
 8011eb6:	e003      	b.n	8011ec0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011eb8:	2103      	movs	r1, #3
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 f95e 	bl	801217c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011ec0:	2110      	movs	r1, #16
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 f8fa 	bl	80120bc <USB_FlushTxFifo>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 f924 	bl	8012120 <USB_FlushRxFifo>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ee8:	461a      	mov	r2, r3
 8011eea:	2300      	movs	r3, #0
 8011eec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f00:	461a      	mov	r2, r3
 8011f02:	2300      	movs	r3, #0
 8011f04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f06:	2300      	movs	r3, #0
 8011f08:	613b      	str	r3, [r7, #16]
 8011f0a:	e043      	b.n	8011f94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	015a      	lsls	r2, r3, #5
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	4413      	add	r3, r2
 8011f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011f22:	d118      	bne.n	8011f56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10a      	bne.n	8011f40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	015a      	lsls	r2, r3, #5
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	4413      	add	r3, r2
 8011f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f36:	461a      	mov	r2, r3
 8011f38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011f3c:	6013      	str	r3, [r2, #0]
 8011f3e:	e013      	b.n	8011f68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	015a      	lsls	r2, r3, #5
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	4413      	add	r3, r2
 8011f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011f52:	6013      	str	r3, [r2, #0]
 8011f54:	e008      	b.n	8011f68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	015a      	lsls	r2, r3, #5
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f62:	461a      	mov	r2, r3
 8011f64:	2300      	movs	r3, #0
 8011f66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	015a      	lsls	r2, r3, #5
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	4413      	add	r3, r2
 8011f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f74:	461a      	mov	r2, r3
 8011f76:	2300      	movs	r3, #0
 8011f78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	015a      	lsls	r2, r3, #5
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	4413      	add	r3, r2
 8011f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f86:	461a      	mov	r2, r3
 8011f88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011f8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	3301      	adds	r3, #1
 8011f92:	613b      	str	r3, [r7, #16]
 8011f94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011f98:	461a      	mov	r2, r3
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	d3b5      	bcc.n	8011f0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	613b      	str	r3, [r7, #16]
 8011fa4:	e043      	b.n	801202e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	015a      	lsls	r2, r3, #5
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	4413      	add	r3, r2
 8011fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011fbc:	d118      	bne.n	8011ff0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10a      	bne.n	8011fda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	015a      	lsls	r2, r3, #5
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	4413      	add	r3, r2
 8011fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	e013      	b.n	8012002 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	015a      	lsls	r2, r3, #5
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011fec:	6013      	str	r3, [r2, #0]
 8011fee:	e008      	b.n	8012002 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	015a      	lsls	r2, r3, #5
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	2300      	movs	r3, #0
 8012000:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	015a      	lsls	r2, r3, #5
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	4413      	add	r3, r2
 801200a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801200e:	461a      	mov	r2, r3
 8012010:	2300      	movs	r3, #0
 8012012:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	015a      	lsls	r2, r3, #5
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	4413      	add	r3, r2
 801201c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012020:	461a      	mov	r2, r3
 8012022:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	3301      	adds	r3, #1
 801202c:	613b      	str	r3, [r7, #16]
 801202e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012032:	461a      	mov	r2, r3
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	4293      	cmp	r3, r2
 8012038:	d3b5      	bcc.n	8011fa6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	68fa      	ldr	r2, [r7, #12]
 8012044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801204c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801205a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801205c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012060:	2b00      	cmp	r3, #0
 8012062:	d105      	bne.n	8012070 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	699b      	ldr	r3, [r3, #24]
 8012068:	f043 0210 	orr.w	r2, r3, #16
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	699a      	ldr	r2, [r3, #24]
 8012074:	4b10      	ldr	r3, [pc, #64]	@ (80120b8 <USB_DevInit+0x2c4>)
 8012076:	4313      	orrs	r3, r2
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801207c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012080:	2b00      	cmp	r3, #0
 8012082:	d005      	beq.n	8012090 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	699b      	ldr	r3, [r3, #24]
 8012088:	f043 0208 	orr.w	r2, r3, #8
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012090:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012094:	2b01      	cmp	r3, #1
 8012096:	d107      	bne.n	80120a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80120a0:	f043 0304 	orr.w	r3, r3, #4
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80120a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80120b4:	b004      	add	sp, #16
 80120b6:	4770      	bx	lr
 80120b8:	803c3800 	.word	0x803c3800

080120bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80120bc:	b480      	push	{r7}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80120c6:	2300      	movs	r3, #0
 80120c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	3301      	adds	r3, #1
 80120ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80120d6:	d901      	bls.n	80120dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80120d8:	2303      	movs	r3, #3
 80120da:	e01b      	b.n	8012114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	daf2      	bge.n	80120ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80120e4:	2300      	movs	r3, #0
 80120e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	019b      	lsls	r3, r3, #6
 80120ec:	f043 0220 	orr.w	r2, r3, #32
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	3301      	adds	r3, #1
 80120f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012100:	d901      	bls.n	8012106 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012102:	2303      	movs	r3, #3
 8012104:	e006      	b.n	8012114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	f003 0320 	and.w	r3, r3, #32
 801210e:	2b20      	cmp	r3, #32
 8012110:	d0f0      	beq.n	80120f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012112:	2300      	movs	r3, #0
}
 8012114:	4618      	mov	r0, r3
 8012116:	3714      	adds	r7, #20
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012120:	b480      	push	{r7}
 8012122:	b085      	sub	sp, #20
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012128:	2300      	movs	r3, #0
 801212a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	3301      	adds	r3, #1
 8012130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012138:	d901      	bls.n	801213e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801213a:	2303      	movs	r3, #3
 801213c:	e018      	b.n	8012170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	691b      	ldr	r3, [r3, #16]
 8012142:	2b00      	cmp	r3, #0
 8012144:	daf2      	bge.n	801212c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012146:	2300      	movs	r3, #0
 8012148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2210      	movs	r2, #16
 801214e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	3301      	adds	r3, #1
 8012154:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801215c:	d901      	bls.n	8012162 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801215e:	2303      	movs	r3, #3
 8012160:	e006      	b.n	8012170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	f003 0310 	and.w	r3, r3, #16
 801216a:	2b10      	cmp	r3, #16
 801216c:	d0f0      	beq.n	8012150 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3714      	adds	r7, #20
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801217c:	b480      	push	{r7}
 801217e:	b085      	sub	sp, #20
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	460b      	mov	r3, r1
 8012186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	78fb      	ldrb	r3, [r7, #3]
 8012196:	68f9      	ldr	r1, [r7, #12]
 8012198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801219c:	4313      	orrs	r3, r2
 801219e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3714      	adds	r7, #20
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr

080121ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80121ae:	b480      	push	{r7}
 80121b0:	b087      	sub	sp, #28
 80121b2:	af00      	add	r7, sp, #0
 80121b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121c0:	689b      	ldr	r3, [r3, #8]
 80121c2:	f003 0306 	and.w	r3, r3, #6
 80121c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d102      	bne.n	80121d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80121ce:	2300      	movs	r3, #0
 80121d0:	75fb      	strb	r3, [r7, #23]
 80121d2:	e00a      	b.n	80121ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2b02      	cmp	r3, #2
 80121d8:	d002      	beq.n	80121e0 <USB_GetDevSpeed+0x32>
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2b06      	cmp	r3, #6
 80121de:	d102      	bne.n	80121e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80121e0:	2302      	movs	r3, #2
 80121e2:	75fb      	strb	r3, [r7, #23]
 80121e4:	e001      	b.n	80121ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80121e6:	230f      	movs	r3, #15
 80121e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	371c      	adds	r7, #28
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr

080121f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	785b      	ldrb	r3, [r3, #1]
 8012210:	2b01      	cmp	r3, #1
 8012212:	d13a      	bne.n	801228a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801221a:	69da      	ldr	r2, [r3, #28]
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	f003 030f 	and.w	r3, r3, #15
 8012224:	2101      	movs	r1, #1
 8012226:	fa01 f303 	lsl.w	r3, r1, r3
 801222a:	b29b      	uxth	r3, r3
 801222c:	68f9      	ldr	r1, [r7, #12]
 801222e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012232:	4313      	orrs	r3, r2
 8012234:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	015a      	lsls	r2, r3, #5
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	4413      	add	r3, r2
 801223e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012248:	2b00      	cmp	r3, #0
 801224a:	d155      	bne.n	80122f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	015a      	lsls	r2, r3, #5
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	4413      	add	r3, r2
 8012254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	791b      	ldrb	r3, [r3, #4]
 8012266:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012268:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	059b      	lsls	r3, r3, #22
 801226e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012270:	4313      	orrs	r3, r2
 8012272:	68ba      	ldr	r2, [r7, #8]
 8012274:	0151      	lsls	r1, r2, #5
 8012276:	68fa      	ldr	r2, [r7, #12]
 8012278:	440a      	add	r2, r1
 801227a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801227e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012286:	6013      	str	r3, [r2, #0]
 8012288:	e036      	b.n	80122f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012290:	69da      	ldr	r2, [r3, #28]
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	f003 030f 	and.w	r3, r3, #15
 801229a:	2101      	movs	r1, #1
 801229c:	fa01 f303 	lsl.w	r3, r1, r3
 80122a0:	041b      	lsls	r3, r3, #16
 80122a2:	68f9      	ldr	r1, [r7, #12]
 80122a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80122a8:	4313      	orrs	r3, r2
 80122aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	015a      	lsls	r2, r3, #5
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	4413      	add	r3, r2
 80122b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d11a      	bne.n	80122f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	015a      	lsls	r2, r3, #5
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	4413      	add	r3, r2
 80122ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	689b      	ldr	r3, [r3, #8]
 80122d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	791b      	ldrb	r3, [r3, #4]
 80122dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122de:	430b      	orrs	r3, r1
 80122e0:	4313      	orrs	r3, r2
 80122e2:	68ba      	ldr	r2, [r7, #8]
 80122e4:	0151      	lsls	r1, r2, #5
 80122e6:	68fa      	ldr	r2, [r7, #12]
 80122e8:	440a      	add	r2, r1
 80122ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80122f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80122f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80122f8:	2300      	movs	r3, #0
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3714      	adds	r7, #20
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr
	...

08012308 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	785b      	ldrb	r3, [r3, #1]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d161      	bne.n	80123e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	015a      	lsls	r2, r3, #5
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	4413      	add	r3, r2
 801232c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801233a:	d11f      	bne.n	801237c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	015a      	lsls	r2, r3, #5
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4413      	add	r3, r2
 8012344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	68ba      	ldr	r2, [r7, #8]
 801234c:	0151      	lsls	r1, r2, #5
 801234e:	68fa      	ldr	r2, [r7, #12]
 8012350:	440a      	add	r2, r1
 8012352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012356:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801235a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	015a      	lsls	r2, r3, #5
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	4413      	add	r3, r2
 8012364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	0151      	lsls	r1, r2, #5
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	440a      	add	r2, r1
 8012372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012376:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801237a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	f003 030f 	and.w	r3, r3, #15
 801238c:	2101      	movs	r1, #1
 801238e:	fa01 f303 	lsl.w	r3, r1, r3
 8012392:	b29b      	uxth	r3, r3
 8012394:	43db      	mvns	r3, r3
 8012396:	68f9      	ldr	r1, [r7, #12]
 8012398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801239c:	4013      	ands	r3, r2
 801239e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123a6:	69da      	ldr	r2, [r3, #28]
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	f003 030f 	and.w	r3, r3, #15
 80123b0:	2101      	movs	r1, #1
 80123b2:	fa01 f303 	lsl.w	r3, r1, r3
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	43db      	mvns	r3, r3
 80123ba:	68f9      	ldr	r1, [r7, #12]
 80123bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80123c0:	4013      	ands	r3, r2
 80123c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	015a      	lsls	r2, r3, #5
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	4413      	add	r3, r2
 80123cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	0159      	lsls	r1, r3, #5
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	440b      	add	r3, r1
 80123da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123de:	4619      	mov	r1, r3
 80123e0:	4b35      	ldr	r3, [pc, #212]	@ (80124b8 <USB_DeactivateEndpoint+0x1b0>)
 80123e2:	4013      	ands	r3, r2
 80123e4:	600b      	str	r3, [r1, #0]
 80123e6:	e060      	b.n	80124aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	015a      	lsls	r2, r3, #5
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	4413      	add	r3, r2
 80123f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80123fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80123fe:	d11f      	bne.n	8012440 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	015a      	lsls	r2, r3, #5
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	4413      	add	r3, r2
 8012408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	68ba      	ldr	r2, [r7, #8]
 8012410:	0151      	lsls	r1, r2, #5
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	440a      	add	r2, r1
 8012416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801241a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801241e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	015a      	lsls	r2, r3, #5
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	4413      	add	r3, r2
 8012428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	68ba      	ldr	r2, [r7, #8]
 8012430:	0151      	lsls	r1, r2, #5
 8012432:	68fa      	ldr	r2, [r7, #12]
 8012434:	440a      	add	r2, r1
 8012436:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801243a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801243e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	f003 030f 	and.w	r3, r3, #15
 8012450:	2101      	movs	r1, #1
 8012452:	fa01 f303 	lsl.w	r3, r1, r3
 8012456:	041b      	lsls	r3, r3, #16
 8012458:	43db      	mvns	r3, r3
 801245a:	68f9      	ldr	r1, [r7, #12]
 801245c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012460:	4013      	ands	r3, r2
 8012462:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801246a:	69da      	ldr	r2, [r3, #28]
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	f003 030f 	and.w	r3, r3, #15
 8012474:	2101      	movs	r1, #1
 8012476:	fa01 f303 	lsl.w	r3, r1, r3
 801247a:	041b      	lsls	r3, r3, #16
 801247c:	43db      	mvns	r3, r3
 801247e:	68f9      	ldr	r1, [r7, #12]
 8012480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012484:	4013      	ands	r3, r2
 8012486:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	015a      	lsls	r2, r3, #5
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	4413      	add	r3, r2
 8012490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	0159      	lsls	r1, r3, #5
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	440b      	add	r3, r1
 801249e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124a2:	4619      	mov	r1, r3
 80124a4:	4b05      	ldr	r3, [pc, #20]	@ (80124bc <USB_DeactivateEndpoint+0x1b4>)
 80124a6:	4013      	ands	r3, r2
 80124a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80124aa:	2300      	movs	r3, #0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3714      	adds	r7, #20
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr
 80124b8:	ec337800 	.word	0xec337800
 80124bc:	eff37800 	.word	0xeff37800

080124c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b08a      	sub	sp, #40	@ 0x28
 80124c4:	af02      	add	r7, sp, #8
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	4613      	mov	r3, r2
 80124cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	785b      	ldrb	r3, [r3, #1]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	f040 817f 	bne.w	80127e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	691b      	ldr	r3, [r3, #16]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d132      	bne.n	8012550 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	015a      	lsls	r2, r3, #5
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	4413      	add	r3, r2
 80124f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124f6:	691b      	ldr	r3, [r3, #16]
 80124f8:	69ba      	ldr	r2, [r7, #24]
 80124fa:	0151      	lsls	r1, r2, #5
 80124fc:	69fa      	ldr	r2, [r7, #28]
 80124fe:	440a      	add	r2, r1
 8012500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012504:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8012508:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801250c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	015a      	lsls	r2, r3, #5
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	4413      	add	r3, r2
 8012516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801251a:	691b      	ldr	r3, [r3, #16]
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	0151      	lsls	r1, r2, #5
 8012520:	69fa      	ldr	r2, [r7, #28]
 8012522:	440a      	add	r2, r1
 8012524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801252c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	015a      	lsls	r2, r3, #5
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	4413      	add	r3, r2
 8012536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801253a:	691b      	ldr	r3, [r3, #16]
 801253c:	69ba      	ldr	r2, [r7, #24]
 801253e:	0151      	lsls	r1, r2, #5
 8012540:	69fa      	ldr	r2, [r7, #28]
 8012542:	440a      	add	r2, r1
 8012544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012548:	0cdb      	lsrs	r3, r3, #19
 801254a:	04db      	lsls	r3, r3, #19
 801254c:	6113      	str	r3, [r2, #16]
 801254e:	e097      	b.n	8012680 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	015a      	lsls	r2, r3, #5
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	4413      	add	r3, r2
 8012558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801255c:	691b      	ldr	r3, [r3, #16]
 801255e:	69ba      	ldr	r2, [r7, #24]
 8012560:	0151      	lsls	r1, r2, #5
 8012562:	69fa      	ldr	r2, [r7, #28]
 8012564:	440a      	add	r2, r1
 8012566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801256a:	0cdb      	lsrs	r3, r3, #19
 801256c:	04db      	lsls	r3, r3, #19
 801256e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	015a      	lsls	r2, r3, #5
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	4413      	add	r3, r2
 8012578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801257c:	691b      	ldr	r3, [r3, #16]
 801257e:	69ba      	ldr	r2, [r7, #24]
 8012580:	0151      	lsls	r1, r2, #5
 8012582:	69fa      	ldr	r2, [r7, #28]
 8012584:	440a      	add	r2, r1
 8012586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801258a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801258e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8012592:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d11a      	bne.n	80125d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	691a      	ldr	r2, [r3, #16]
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	689b      	ldr	r3, [r3, #8]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d903      	bls.n	80125ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	689a      	ldr	r2, [r3, #8]
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80125ae:	69bb      	ldr	r3, [r7, #24]
 80125b0:	015a      	lsls	r2, r3, #5
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	4413      	add	r3, r2
 80125b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125ba:	691b      	ldr	r3, [r3, #16]
 80125bc:	69ba      	ldr	r2, [r7, #24]
 80125be:	0151      	lsls	r1, r2, #5
 80125c0:	69fa      	ldr	r2, [r7, #28]
 80125c2:	440a      	add	r2, r1
 80125c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80125cc:	6113      	str	r3, [r2, #16]
 80125ce:	e044      	b.n	801265a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	691a      	ldr	r2, [r3, #16]
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	4413      	add	r3, r2
 80125da:	1e5a      	subs	r2, r3, #1
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80125e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	015a      	lsls	r2, r3, #5
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	4413      	add	r3, r2
 80125ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125f2:	691a      	ldr	r2, [r3, #16]
 80125f4:	8afb      	ldrh	r3, [r7, #22]
 80125f6:	04d9      	lsls	r1, r3, #19
 80125f8:	4ba4      	ldr	r3, [pc, #656]	@ (801288c <USB_EPStartXfer+0x3cc>)
 80125fa:	400b      	ands	r3, r1
 80125fc:	69b9      	ldr	r1, [r7, #24]
 80125fe:	0148      	lsls	r0, r1, #5
 8012600:	69f9      	ldr	r1, [r7, #28]
 8012602:	4401      	add	r1, r0
 8012604:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012608:	4313      	orrs	r3, r2
 801260a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	791b      	ldrb	r3, [r3, #4]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d122      	bne.n	801265a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	015a      	lsls	r2, r3, #5
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	4413      	add	r3, r2
 801261c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012620:	691b      	ldr	r3, [r3, #16]
 8012622:	69ba      	ldr	r2, [r7, #24]
 8012624:	0151      	lsls	r1, r2, #5
 8012626:	69fa      	ldr	r2, [r7, #28]
 8012628:	440a      	add	r2, r1
 801262a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801262e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8012632:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	015a      	lsls	r2, r3, #5
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	4413      	add	r3, r2
 801263c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012640:	691a      	ldr	r2, [r3, #16]
 8012642:	8afb      	ldrh	r3, [r7, #22]
 8012644:	075b      	lsls	r3, r3, #29
 8012646:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801264a:	69b9      	ldr	r1, [r7, #24]
 801264c:	0148      	lsls	r0, r1, #5
 801264e:	69f9      	ldr	r1, [r7, #28]
 8012650:	4401      	add	r1, r0
 8012652:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012656:	4313      	orrs	r3, r2
 8012658:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801265a:	69bb      	ldr	r3, [r7, #24]
 801265c:	015a      	lsls	r2, r3, #5
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	4413      	add	r3, r2
 8012662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012666:	691a      	ldr	r2, [r3, #16]
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	691b      	ldr	r3, [r3, #16]
 801266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012670:	69b9      	ldr	r1, [r7, #24]
 8012672:	0148      	lsls	r0, r1, #5
 8012674:	69f9      	ldr	r1, [r7, #28]
 8012676:	4401      	add	r1, r0
 8012678:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801267c:	4313      	orrs	r3, r2
 801267e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012680:	79fb      	ldrb	r3, [r7, #7]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d14b      	bne.n	801271e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	69db      	ldr	r3, [r3, #28]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d009      	beq.n	80126a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	015a      	lsls	r2, r3, #5
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	4413      	add	r3, r2
 8012696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801269a:	461a      	mov	r2, r3
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	69db      	ldr	r3, [r3, #28]
 80126a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	791b      	ldrb	r3, [r3, #4]
 80126a6:	2b01      	cmp	r3, #1
 80126a8:	d128      	bne.n	80126fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d110      	bne.n	80126dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	015a      	lsls	r2, r3, #5
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	4413      	add	r3, r2
 80126c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	69ba      	ldr	r2, [r7, #24]
 80126ca:	0151      	lsls	r1, r2, #5
 80126cc:	69fa      	ldr	r2, [r7, #28]
 80126ce:	440a      	add	r2, r1
 80126d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80126d8:	6013      	str	r3, [r2, #0]
 80126da:	e00f      	b.n	80126fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	015a      	lsls	r2, r3, #5
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	4413      	add	r3, r2
 80126e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	69ba      	ldr	r2, [r7, #24]
 80126ec:	0151      	lsls	r1, r2, #5
 80126ee:	69fa      	ldr	r2, [r7, #28]
 80126f0:	440a      	add	r2, r1
 80126f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80126fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126fc:	69bb      	ldr	r3, [r7, #24]
 80126fe:	015a      	lsls	r2, r3, #5
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	4413      	add	r3, r2
 8012704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	0151      	lsls	r1, r2, #5
 801270e:	69fa      	ldr	r2, [r7, #28]
 8012710:	440a      	add	r2, r1
 8012712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012716:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801271a:	6013      	str	r3, [r2, #0]
 801271c:	e166      	b.n	80129ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	015a      	lsls	r2, r3, #5
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	4413      	add	r3, r2
 8012726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	69ba      	ldr	r2, [r7, #24]
 801272e:	0151      	lsls	r1, r2, #5
 8012730:	69fa      	ldr	r2, [r7, #28]
 8012732:	440a      	add	r2, r1
 8012734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012738:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801273c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	791b      	ldrb	r3, [r3, #4]
 8012742:	2b01      	cmp	r3, #1
 8012744:	d015      	beq.n	8012772 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	691b      	ldr	r3, [r3, #16]
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 814e 	beq.w	80129ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	f003 030f 	and.w	r3, r3, #15
 8012760:	2101      	movs	r1, #1
 8012762:	fa01 f303 	lsl.w	r3, r1, r3
 8012766:	69f9      	ldr	r1, [r7, #28]
 8012768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801276c:	4313      	orrs	r3, r2
 801276e:	634b      	str	r3, [r1, #52]	@ 0x34
 8012770:	e13c      	b.n	80129ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801277e:	2b00      	cmp	r3, #0
 8012780:	d110      	bne.n	80127a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	015a      	lsls	r2, r3, #5
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	4413      	add	r3, r2
 801278a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	69ba      	ldr	r2, [r7, #24]
 8012792:	0151      	lsls	r1, r2, #5
 8012794:	69fa      	ldr	r2, [r7, #28]
 8012796:	440a      	add	r2, r1
 8012798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801279c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80127a0:	6013      	str	r3, [r2, #0]
 80127a2:	e00f      	b.n	80127c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	015a      	lsls	r2, r3, #5
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	4413      	add	r3, r2
 80127ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	0151      	lsls	r1, r2, #5
 80127b6:	69fa      	ldr	r2, [r7, #28]
 80127b8:	440a      	add	r2, r1
 80127ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80127c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	68d9      	ldr	r1, [r3, #12]
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	781a      	ldrb	r2, [r3, #0]
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	691b      	ldr	r3, [r3, #16]
 80127d0:	b298      	uxth	r0, r3
 80127d2:	79fb      	ldrb	r3, [r7, #7]
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	4603      	mov	r3, r0
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f000 f9b9 	bl	8012b50 <USB_WritePacket>
 80127de:	e105      	b.n	80129ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	015a      	lsls	r2, r3, #5
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	4413      	add	r3, r2
 80127e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127ec:	691b      	ldr	r3, [r3, #16]
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	0151      	lsls	r1, r2, #5
 80127f2:	69fa      	ldr	r2, [r7, #28]
 80127f4:	440a      	add	r2, r1
 80127f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127fa:	0cdb      	lsrs	r3, r3, #19
 80127fc:	04db      	lsls	r3, r3, #19
 80127fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	015a      	lsls	r2, r3, #5
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	4413      	add	r3, r2
 8012808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801280c:	691b      	ldr	r3, [r3, #16]
 801280e:	69ba      	ldr	r2, [r7, #24]
 8012810:	0151      	lsls	r1, r2, #5
 8012812:	69fa      	ldr	r2, [r7, #28]
 8012814:	440a      	add	r2, r1
 8012816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801281a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801281e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8012822:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d132      	bne.n	8012890 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	691b      	ldr	r3, [r3, #16]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d003      	beq.n	801283a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	689a      	ldr	r2, [r3, #8]
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	689a      	ldr	r2, [r3, #8]
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	015a      	lsls	r2, r3, #5
 8012846:	69fb      	ldr	r3, [r7, #28]
 8012848:	4413      	add	r3, r2
 801284a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801284e:	691a      	ldr	r2, [r3, #16]
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	6a1b      	ldr	r3, [r3, #32]
 8012854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012858:	69b9      	ldr	r1, [r7, #24]
 801285a:	0148      	lsls	r0, r1, #5
 801285c:	69f9      	ldr	r1, [r7, #28]
 801285e:	4401      	add	r1, r0
 8012860:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012864:	4313      	orrs	r3, r2
 8012866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	015a      	lsls	r2, r3, #5
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	4413      	add	r3, r2
 8012870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012874:	691b      	ldr	r3, [r3, #16]
 8012876:	69ba      	ldr	r2, [r7, #24]
 8012878:	0151      	lsls	r1, r2, #5
 801287a:	69fa      	ldr	r2, [r7, #28]
 801287c:	440a      	add	r2, r1
 801287e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012882:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012886:	6113      	str	r3, [r2, #16]
 8012888:	e062      	b.n	8012950 <USB_EPStartXfer+0x490>
 801288a:	bf00      	nop
 801288c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	691b      	ldr	r3, [r3, #16]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d123      	bne.n	80128e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	015a      	lsls	r2, r3, #5
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	4413      	add	r3, r2
 80128a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128a4:	691a      	ldr	r2, [r3, #16]
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128ae:	69b9      	ldr	r1, [r7, #24]
 80128b0:	0148      	lsls	r0, r1, #5
 80128b2:	69f9      	ldr	r1, [r7, #28]
 80128b4:	4401      	add	r1, r0
 80128b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80128ba:	4313      	orrs	r3, r2
 80128bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	015a      	lsls	r2, r3, #5
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	4413      	add	r3, r2
 80128c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128ca:	691b      	ldr	r3, [r3, #16]
 80128cc:	69ba      	ldr	r2, [r7, #24]
 80128ce:	0151      	lsls	r1, r2, #5
 80128d0:	69fa      	ldr	r2, [r7, #28]
 80128d2:	440a      	add	r2, r1
 80128d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80128d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80128dc:	6113      	str	r3, [r2, #16]
 80128de:	e037      	b.n	8012950 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	691a      	ldr	r2, [r3, #16]
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	4413      	add	r3, r2
 80128ea:	1e5a      	subs	r2, r3, #1
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	689b      	ldr	r3, [r3, #8]
 80128f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80128f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	689b      	ldr	r3, [r3, #8]
 80128fa:	8afa      	ldrh	r2, [r7, #22]
 80128fc:	fb03 f202 	mul.w	r2, r3, r2
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	015a      	lsls	r2, r3, #5
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	4413      	add	r3, r2
 801290c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012910:	691a      	ldr	r2, [r3, #16]
 8012912:	8afb      	ldrh	r3, [r7, #22]
 8012914:	04d9      	lsls	r1, r3, #19
 8012916:	4b38      	ldr	r3, [pc, #224]	@ (80129f8 <USB_EPStartXfer+0x538>)
 8012918:	400b      	ands	r3, r1
 801291a:	69b9      	ldr	r1, [r7, #24]
 801291c:	0148      	lsls	r0, r1, #5
 801291e:	69f9      	ldr	r1, [r7, #28]
 8012920:	4401      	add	r1, r0
 8012922:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012926:	4313      	orrs	r3, r2
 8012928:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	015a      	lsls	r2, r3, #5
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	4413      	add	r3, r2
 8012932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012936:	691a      	ldr	r2, [r3, #16]
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	6a1b      	ldr	r3, [r3, #32]
 801293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012940:	69b9      	ldr	r1, [r7, #24]
 8012942:	0148      	lsls	r0, r1, #5
 8012944:	69f9      	ldr	r1, [r7, #28]
 8012946:	4401      	add	r1, r0
 8012948:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801294c:	4313      	orrs	r3, r2
 801294e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012950:	79fb      	ldrb	r3, [r7, #7]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d10d      	bne.n	8012972 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d009      	beq.n	8012972 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	68d9      	ldr	r1, [r3, #12]
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	015a      	lsls	r2, r3, #5
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	4413      	add	r3, r2
 801296a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801296e:	460a      	mov	r2, r1
 8012970:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	791b      	ldrb	r3, [r3, #4]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d128      	bne.n	80129cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012980:	689b      	ldr	r3, [r3, #8]
 8012982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012986:	2b00      	cmp	r3, #0
 8012988:	d110      	bne.n	80129ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	015a      	lsls	r2, r3, #5
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	4413      	add	r3, r2
 8012992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	69ba      	ldr	r2, [r7, #24]
 801299a:	0151      	lsls	r1, r2, #5
 801299c:	69fa      	ldr	r2, [r7, #28]
 801299e:	440a      	add	r2, r1
 80129a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80129a8:	6013      	str	r3, [r2, #0]
 80129aa:	e00f      	b.n	80129cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80129ac:	69bb      	ldr	r3, [r7, #24]
 80129ae:	015a      	lsls	r2, r3, #5
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	4413      	add	r3, r2
 80129b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	69ba      	ldr	r2, [r7, #24]
 80129bc:	0151      	lsls	r1, r2, #5
 80129be:	69fa      	ldr	r2, [r7, #28]
 80129c0:	440a      	add	r2, r1
 80129c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80129ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80129cc:	69bb      	ldr	r3, [r7, #24]
 80129ce:	015a      	lsls	r2, r3, #5
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	4413      	add	r3, r2
 80129d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	69ba      	ldr	r2, [r7, #24]
 80129dc:	0151      	lsls	r1, r2, #5
 80129de:	69fa      	ldr	r2, [r7, #28]
 80129e0:	440a      	add	r2, r1
 80129e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80129ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80129ec:	2300      	movs	r3, #0
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3720      	adds	r7, #32
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	1ff80000 	.word	0x1ff80000

080129fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b087      	sub	sp, #28
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012a06:	2300      	movs	r3, #0
 8012a08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	785b      	ldrb	r3, [r3, #1]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d14a      	bne.n	8012ab0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	015a      	lsls	r2, r3, #5
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	4413      	add	r3, r2
 8012a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012a32:	f040 8086 	bne.w	8012b42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	015a      	lsls	r2, r3, #5
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	4413      	add	r3, r2
 8012a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	683a      	ldr	r2, [r7, #0]
 8012a48:	7812      	ldrb	r2, [r2, #0]
 8012a4a:	0151      	lsls	r1, r2, #5
 8012a4c:	693a      	ldr	r2, [r7, #16]
 8012a4e:	440a      	add	r2, r1
 8012a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012a54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012a58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	015a      	lsls	r2, r3, #5
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	4413      	add	r3, r2
 8012a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	7812      	ldrb	r2, [r2, #0]
 8012a6e:	0151      	lsls	r1, r2, #5
 8012a70:	693a      	ldr	r2, [r7, #16]
 8012a72:	440a      	add	r2, r1
 8012a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012a78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012a7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	3301      	adds	r3, #1
 8012a82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d902      	bls.n	8012a94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	75fb      	strb	r3, [r7, #23]
          break;
 8012a92:	e056      	b.n	8012b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	015a      	lsls	r2, r3, #5
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012aac:	d0e7      	beq.n	8012a7e <USB_EPStopXfer+0x82>
 8012aae:	e048      	b.n	8012b42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	015a      	lsls	r2, r3, #5
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	4413      	add	r3, r2
 8012aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012ac8:	d13b      	bne.n	8012b42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	015a      	lsls	r2, r3, #5
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	683a      	ldr	r2, [r7, #0]
 8012adc:	7812      	ldrb	r2, [r2, #0]
 8012ade:	0151      	lsls	r1, r2, #5
 8012ae0:	693a      	ldr	r2, [r7, #16]
 8012ae2:	440a      	add	r2, r1
 8012ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ae8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012aec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	015a      	lsls	r2, r3, #5
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	4413      	add	r3, r2
 8012af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	7812      	ldrb	r2, [r2, #0]
 8012b02:	0151      	lsls	r1, r2, #5
 8012b04:	693a      	ldr	r2, [r7, #16]
 8012b06:	440a      	add	r2, r1
 8012b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	3301      	adds	r3, #1
 8012b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d902      	bls.n	8012b28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012b22:	2301      	movs	r3, #1
 8012b24:	75fb      	strb	r3, [r7, #23]
          break;
 8012b26:	e00c      	b.n	8012b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	015a      	lsls	r2, r3, #5
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	4413      	add	r3, r2
 8012b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012b40:	d0e7      	beq.n	8012b12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	371c      	adds	r7, #28
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b089      	sub	sp, #36	@ 0x24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	4611      	mov	r1, r2
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	460b      	mov	r3, r1
 8012b60:	71fb      	strb	r3, [r7, #7]
 8012b62:	4613      	mov	r3, r2
 8012b64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d123      	bne.n	8012bbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012b76:	88bb      	ldrh	r3, [r7, #4]
 8012b78:	3303      	adds	r3, #3
 8012b7a:	089b      	lsrs	r3, r3, #2
 8012b7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012b7e:	2300      	movs	r3, #0
 8012b80:	61bb      	str	r3, [r7, #24]
 8012b82:	e018      	b.n	8012bb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012b84:	79fb      	ldrb	r3, [r7, #7]
 8012b86:	031a      	lsls	r2, r3, #12
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012b90:	461a      	mov	r2, r3
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	3301      	adds	r3, #1
 8012bae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	61bb      	str	r3, [r7, #24]
 8012bb6:	69ba      	ldr	r2, [r7, #24]
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d3e2      	bcc.n	8012b84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012bbe:	2300      	movs	r3, #0
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3724      	adds	r7, #36	@ 0x24
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr

08012bcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b08b      	sub	sp, #44	@ 0x2c
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	4613      	mov	r3, r2
 8012bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012be2:	88fb      	ldrh	r3, [r7, #6]
 8012be4:	089b      	lsrs	r3, r3, #2
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012bea:	88fb      	ldrh	r3, [r7, #6]
 8012bec:	f003 0303 	and.w	r3, r3, #3
 8012bf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	623b      	str	r3, [r7, #32]
 8012bf6:	e014      	b.n	8012c22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012bf8:	69bb      	ldr	r3, [r7, #24]
 8012bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012bfe:	681a      	ldr	r2, [r3, #0]
 8012c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c02:	601a      	str	r2, [r3, #0]
    pDest++;
 8012c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c06:	3301      	adds	r3, #1
 8012c08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c12:	3301      	adds	r3, #1
 8012c14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c18:	3301      	adds	r3, #1
 8012c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012c1c:	6a3b      	ldr	r3, [r7, #32]
 8012c1e:	3301      	adds	r3, #1
 8012c20:	623b      	str	r3, [r7, #32]
 8012c22:	6a3a      	ldr	r2, [r7, #32]
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d3e6      	bcc.n	8012bf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012c2a:	8bfb      	ldrh	r3, [r7, #30]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d01e      	beq.n	8012c6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012c30:	2300      	movs	r3, #0
 8012c32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	f107 0310 	add.w	r3, r7, #16
 8012c40:	6812      	ldr	r2, [r2, #0]
 8012c42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012c44:	693a      	ldr	r2, [r7, #16]
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	00db      	lsls	r3, r3, #3
 8012c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8012c50:	b2da      	uxtb	r2, r3
 8012c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c54:	701a      	strb	r2, [r3, #0]
      i++;
 8012c56:	6a3b      	ldr	r3, [r7, #32]
 8012c58:	3301      	adds	r3, #1
 8012c5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c5e:	3301      	adds	r3, #1
 8012c60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8012c62:	8bfb      	ldrh	r3, [r7, #30]
 8012c64:	3b01      	subs	r3, #1
 8012c66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012c68:	8bfb      	ldrh	r3, [r7, #30]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d1ea      	bne.n	8012c44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	372c      	adds	r7, #44	@ 0x2c
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	785b      	ldrb	r3, [r3, #1]
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d12c      	bne.n	8012cf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	015a      	lsls	r2, r3, #5
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	db12      	blt.n	8012cd0 <USB_EPSetStall+0x54>
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00f      	beq.n	8012cd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	015a      	lsls	r2, r3, #5
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	68ba      	ldr	r2, [r7, #8]
 8012cc0:	0151      	lsls	r1, r2, #5
 8012cc2:	68fa      	ldr	r2, [r7, #12]
 8012cc4:	440a      	add	r2, r1
 8012cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012cca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012cce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	015a      	lsls	r2, r3, #5
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	68ba      	ldr	r2, [r7, #8]
 8012ce0:	0151      	lsls	r1, r2, #5
 8012ce2:	68fa      	ldr	r2, [r7, #12]
 8012ce4:	440a      	add	r2, r1
 8012ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012cea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012cee:	6013      	str	r3, [r2, #0]
 8012cf0:	e02b      	b.n	8012d4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	015a      	lsls	r2, r3, #5
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	db12      	blt.n	8012d2a <USB_EPSetStall+0xae>
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00f      	beq.n	8012d2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	015a      	lsls	r2, r3, #5
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	4413      	add	r3, r2
 8012d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	0151      	lsls	r1, r2, #5
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	440a      	add	r2, r1
 8012d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012d24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012d28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	015a      	lsls	r2, r3, #5
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	4413      	add	r3, r2
 8012d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	68ba      	ldr	r2, [r7, #8]
 8012d3a:	0151      	lsls	r1, r2, #5
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	440a      	add	r2, r1
 8012d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012d48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d4a:	2300      	movs	r3, #0
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3714      	adds	r7, #20
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr

08012d58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	785b      	ldrb	r3, [r3, #1]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d128      	bne.n	8012dc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	015a      	lsls	r2, r3, #5
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	68ba      	ldr	r2, [r7, #8]
 8012d84:	0151      	lsls	r1, r2, #5
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	440a      	add	r2, r1
 8012d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012d92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	791b      	ldrb	r3, [r3, #4]
 8012d98:	2b03      	cmp	r3, #3
 8012d9a:	d003      	beq.n	8012da4 <USB_EPClearStall+0x4c>
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	791b      	ldrb	r3, [r3, #4]
 8012da0:	2b02      	cmp	r3, #2
 8012da2:	d138      	bne.n	8012e16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	015a      	lsls	r2, r3, #5
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	4413      	add	r3, r2
 8012dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	68ba      	ldr	r2, [r7, #8]
 8012db4:	0151      	lsls	r1, r2, #5
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	440a      	add	r2, r1
 8012dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012dc2:	6013      	str	r3, [r2, #0]
 8012dc4:	e027      	b.n	8012e16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	015a      	lsls	r2, r3, #5
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	4413      	add	r3, r2
 8012dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	68ba      	ldr	r2, [r7, #8]
 8012dd6:	0151      	lsls	r1, r2, #5
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	440a      	add	r2, r1
 8012ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012de0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012de4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	791b      	ldrb	r3, [r3, #4]
 8012dea:	2b03      	cmp	r3, #3
 8012dec:	d003      	beq.n	8012df6 <USB_EPClearStall+0x9e>
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	791b      	ldrb	r3, [r3, #4]
 8012df2:	2b02      	cmp	r3, #2
 8012df4:	d10f      	bne.n	8012e16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	015a      	lsls	r2, r3, #5
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	0151      	lsls	r1, r2, #5
 8012e08:	68fa      	ldr	r2, [r7, #12]
 8012e0a:	440a      	add	r2, r1
 8012e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012e14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3714      	adds	r7, #20
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012e42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012e46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	78fb      	ldrb	r3, [r7, #3]
 8012e52:	011b      	lsls	r3, r3, #4
 8012e54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012e58:	68f9      	ldr	r1, [r7, #12]
 8012e5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012e62:	2300      	movs	r3, #0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3714      	adds	r7, #20
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr

08012e70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b085      	sub	sp, #20
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012e8a:	f023 0303 	bic.w	r3, r3, #3
 8012e8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012e9e:	f023 0302 	bic.w	r3, r3, #2
 8012ea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3714      	adds	r7, #20
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr

08012eb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012eb2:	b480      	push	{r7}
 8012eb4:	b085      	sub	sp, #20
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	68fa      	ldr	r2, [r7, #12]
 8012ec8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012ecc:	f023 0303 	bic.w	r3, r3, #3
 8012ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	68fa      	ldr	r2, [r7, #12]
 8012edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012ee0:	f043 0302 	orr.w	r3, r3, #2
 8012ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012ee6:	2300      	movs	r3, #0
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3714      	adds	r7, #20
 8012eec:	46bd      	mov	sp, r7
 8012eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef2:	4770      	bx	lr

08012ef4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b085      	sub	sp, #20
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	695b      	ldr	r3, [r3, #20]
 8012f00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	699b      	ldr	r3, [r3, #24]
 8012f06:	68fa      	ldr	r2, [r7, #12]
 8012f08:	4013      	ands	r3, r2
 8012f0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3714      	adds	r7, #20
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr

08012f1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012f1a:	b480      	push	{r7}
 8012f1c:	b085      	sub	sp, #20
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f2c:	699b      	ldr	r3, [r3, #24]
 8012f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f36:	69db      	ldr	r3, [r3, #28]
 8012f38:	68ba      	ldr	r2, [r7, #8]
 8012f3a:	4013      	ands	r3, r2
 8012f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	0c1b      	lsrs	r3, r3, #16
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3714      	adds	r7, #20
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr

08012f4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012f4e:	b480      	push	{r7}
 8012f50:	b085      	sub	sp, #20
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f60:	699b      	ldr	r3, [r3, #24]
 8012f62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f6a:	69db      	ldr	r3, [r3, #28]
 8012f6c:	68ba      	ldr	r2, [r7, #8]
 8012f6e:	4013      	ands	r3, r2
 8012f70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	b29b      	uxth	r3, r3
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3714      	adds	r7, #20
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012f82:	b480      	push	{r7}
 8012f84:	b085      	sub	sp, #20
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012f92:	78fb      	ldrb	r3, [r7, #3]
 8012f94:	015a      	lsls	r2, r3, #5
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	4413      	add	r3, r2
 8012f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f9e:	689b      	ldr	r3, [r3, #8]
 8012fa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fa8:	695b      	ldr	r3, [r3, #20]
 8012faa:	68ba      	ldr	r2, [r7, #8]
 8012fac:	4013      	ands	r3, r2
 8012fae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012fb0:	68bb      	ldr	r3, [r7, #8]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b087      	sub	sp, #28
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fd4:	691b      	ldr	r3, [r3, #16]
 8012fd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012fe0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012fe2:	78fb      	ldrb	r3, [r7, #3]
 8012fe4:	f003 030f 	and.w	r3, r3, #15
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	fa22 f303 	lsr.w	r3, r2, r3
 8012fee:	01db      	lsls	r3, r3, #7
 8012ff0:	b2db      	uxtb	r3, r3
 8012ff2:	693a      	ldr	r2, [r7, #16]
 8012ff4:	4313      	orrs	r3, r2
 8012ff6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012ff8:	78fb      	ldrb	r3, [r7, #3]
 8012ffa:	015a      	lsls	r2, r3, #5
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	4413      	add	r3, r2
 8013000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	693a      	ldr	r2, [r7, #16]
 8013008:	4013      	ands	r3, r2
 801300a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801300c:	68bb      	ldr	r3, [r7, #8]
}
 801300e:	4618      	mov	r0, r3
 8013010:	371c      	adds	r7, #28
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr

0801301a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801301a:	b480      	push	{r7}
 801301c:	b083      	sub	sp, #12
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	695b      	ldr	r3, [r3, #20]
 8013026:	f003 0301 	and.w	r3, r3, #1
}
 801302a:	4618      	mov	r0, r3
 801302c:	370c      	adds	r7, #12
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr

08013036 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8013036:	b480      	push	{r7}
 8013038:	b085      	sub	sp, #20
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	68fa      	ldr	r2, [r7, #12]
 801304c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013050:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013054:	f023 0307 	bic.w	r3, r3, #7
 8013058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801306c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801307c:	b480      	push	{r7}
 801307e:	b087      	sub	sp, #28
 8013080:	af00      	add	r7, sp, #0
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	460b      	mov	r3, r1
 8013086:	607a      	str	r2, [r7, #4]
 8013088:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	333c      	adds	r3, #60	@ 0x3c
 8013092:	3304      	adds	r3, #4
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	4a26      	ldr	r2, [pc, #152]	@ (8013134 <USB_EP0_OutStart+0xb8>)
 801309c:	4293      	cmp	r3, r2
 801309e:	d90a      	bls.n	80130b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80130ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80130b0:	d101      	bne.n	80130b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80130b2:	2300      	movs	r3, #0
 80130b4:	e037      	b.n	8013126 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130bc:	461a      	mov	r2, r3
 80130be:	2300      	movs	r3, #0
 80130c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130c8:	691b      	ldr	r3, [r3, #16]
 80130ca:	697a      	ldr	r2, [r7, #20]
 80130cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80130d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80130d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130dc:	691b      	ldr	r3, [r3, #16]
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80130e4:	f043 0318 	orr.w	r3, r3, #24
 80130e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130f0:	691b      	ldr	r3, [r3, #16]
 80130f2:	697a      	ldr	r2, [r7, #20]
 80130f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80130f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80130fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80130fe:	7afb      	ldrb	r3, [r7, #11]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d10f      	bne.n	8013124 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801310a:	461a      	mov	r2, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	697a      	ldr	r2, [r7, #20]
 801311a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801311e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8013122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013124:	2300      	movs	r3, #0
}
 8013126:	4618      	mov	r0, r3
 8013128:	371c      	adds	r7, #28
 801312a:	46bd      	mov	sp, r7
 801312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	4f54300a 	.word	0x4f54300a

08013138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013140:	2300      	movs	r3, #0
 8013142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	3301      	adds	r3, #1
 8013148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013150:	d901      	bls.n	8013156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013152:	2303      	movs	r3, #3
 8013154:	e01b      	b.n	801318e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	691b      	ldr	r3, [r3, #16]
 801315a:	2b00      	cmp	r3, #0
 801315c:	daf2      	bge.n	8013144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801315e:	2300      	movs	r3, #0
 8013160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	691b      	ldr	r3, [r3, #16]
 8013166:	f043 0201 	orr.w	r2, r3, #1
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3301      	adds	r3, #1
 8013172:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801317a:	d901      	bls.n	8013180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801317c:	2303      	movs	r3, #3
 801317e:	e006      	b.n	801318e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	691b      	ldr	r3, [r3, #16]
 8013184:	f003 0301 	and.w	r3, r3, #1
 8013188:	2b01      	cmp	r3, #1
 801318a:	d0f0      	beq.n	801316e <USB_CoreReset+0x36>

  return HAL_OK;
 801318c:	2300      	movs	r3, #0
}
 801318e:	4618      	mov	r0, r3
 8013190:	3714      	adds	r7, #20
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr
	...

0801319c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	460b      	mov	r3, r1
 80131a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80131a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80131ac:	f005 ffb8 	bl	8019120 <USBD_static_malloc>
 80131b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	32b0      	adds	r2, #176	@ 0xb0
 80131c2:	2100      	movs	r1, #0
 80131c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80131c8:	2302      	movs	r3, #2
 80131ca:	e0d4      	b.n	8013376 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80131cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80131d0:	2100      	movs	r1, #0
 80131d2:	68f8      	ldr	r0, [r7, #12]
 80131d4:	f008 fef6 	bl	801bfc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	32b0      	adds	r2, #176	@ 0xb0
 80131e2:	68f9      	ldr	r1, [r7, #12]
 80131e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	32b0      	adds	r2, #176	@ 0xb0
 80131f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	7c1b      	ldrb	r3, [r3, #16]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d138      	bne.n	8013276 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013204:	4b5e      	ldr	r3, [pc, #376]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013206:	7819      	ldrb	r1, [r3, #0]
 8013208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801320c:	2202      	movs	r2, #2
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f005 fe63 	bl	8018eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013214:	4b5a      	ldr	r3, [pc, #360]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f003 020f 	and.w	r2, r3, #15
 801321c:	6879      	ldr	r1, [r7, #4]
 801321e:	4613      	mov	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4413      	add	r3, r2
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	440b      	add	r3, r1
 8013228:	3324      	adds	r3, #36	@ 0x24
 801322a:	2201      	movs	r2, #1
 801322c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801322e:	4b55      	ldr	r3, [pc, #340]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 8013230:	7819      	ldrb	r1, [r3, #0]
 8013232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013236:	2202      	movs	r2, #2
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f005 fe4e 	bl	8018eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801323e:	4b51      	ldr	r3, [pc, #324]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	f003 020f 	and.w	r2, r3, #15
 8013246:	6879      	ldr	r1, [r7, #4]
 8013248:	4613      	mov	r3, r2
 801324a:	009b      	lsls	r3, r3, #2
 801324c:	4413      	add	r3, r2
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	440b      	add	r3, r1
 8013252:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013256:	2201      	movs	r2, #1
 8013258:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801325a:	4b4b      	ldr	r3, [pc, #300]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	f003 020f 	and.w	r2, r3, #15
 8013262:	6879      	ldr	r1, [r7, #4]
 8013264:	4613      	mov	r3, r2
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	4413      	add	r3, r2
 801326a:	009b      	lsls	r3, r3, #2
 801326c:	440b      	add	r3, r1
 801326e:	3326      	adds	r3, #38	@ 0x26
 8013270:	2210      	movs	r2, #16
 8013272:	801a      	strh	r2, [r3, #0]
 8013274:	e035      	b.n	80132e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013276:	4b42      	ldr	r3, [pc, #264]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013278:	7819      	ldrb	r1, [r3, #0]
 801327a:	2340      	movs	r3, #64	@ 0x40
 801327c:	2202      	movs	r2, #2
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f005 fe2b 	bl	8018eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013284:	4b3e      	ldr	r3, [pc, #248]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	f003 020f 	and.w	r2, r3, #15
 801328c:	6879      	ldr	r1, [r7, #4]
 801328e:	4613      	mov	r3, r2
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	4413      	add	r3, r2
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	440b      	add	r3, r1
 8013298:	3324      	adds	r3, #36	@ 0x24
 801329a:	2201      	movs	r2, #1
 801329c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801329e:	4b39      	ldr	r3, [pc, #228]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 80132a0:	7819      	ldrb	r1, [r3, #0]
 80132a2:	2340      	movs	r3, #64	@ 0x40
 80132a4:	2202      	movs	r2, #2
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f005 fe17 	bl	8018eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80132ac:	4b35      	ldr	r3, [pc, #212]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 020f 	and.w	r2, r3, #15
 80132b4:	6879      	ldr	r1, [r7, #4]
 80132b6:	4613      	mov	r3, r2
 80132b8:	009b      	lsls	r3, r3, #2
 80132ba:	4413      	add	r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	440b      	add	r3, r1
 80132c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80132c4:	2201      	movs	r2, #1
 80132c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80132c8:	4b2f      	ldr	r3, [pc, #188]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f003 020f 	and.w	r2, r3, #15
 80132d0:	6879      	ldr	r1, [r7, #4]
 80132d2:	4613      	mov	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	4413      	add	r3, r2
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	440b      	add	r3, r1
 80132dc:	3326      	adds	r3, #38	@ 0x26
 80132de:	2210      	movs	r2, #16
 80132e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80132e2:	4b29      	ldr	r3, [pc, #164]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 80132e4:	7819      	ldrb	r1, [r3, #0]
 80132e6:	2308      	movs	r3, #8
 80132e8:	2203      	movs	r2, #3
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f005 fdf5 	bl	8018eda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80132f0:	4b25      	ldr	r3, [pc, #148]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	f003 020f 	and.w	r2, r3, #15
 80132f8:	6879      	ldr	r1, [r7, #4]
 80132fa:	4613      	mov	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4413      	add	r3, r2
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	440b      	add	r3, r1
 8013304:	3324      	adds	r3, #36	@ 0x24
 8013306:	2201      	movs	r2, #1
 8013308:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2200      	movs	r2, #0
 801330e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	33b0      	adds	r3, #176	@ 0xb0
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	4413      	add	r3, r2
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2200      	movs	r2, #0
 801332a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801333c:	2b00      	cmp	r3, #0
 801333e:	d101      	bne.n	8013344 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013340:	2302      	movs	r3, #2
 8013342:	e018      	b.n	8013376 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	7c1b      	ldrb	r3, [r3, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10a      	bne.n	8013362 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801334c:	4b0d      	ldr	r3, [pc, #52]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 801334e:	7819      	ldrb	r1, [r3, #0]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f005 feac 	bl	80190b8 <USBD_LL_PrepareReceive>
 8013360:	e008      	b.n	8013374 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013362:	4b08      	ldr	r3, [pc, #32]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 8013364:	7819      	ldrb	r1, [r3, #0]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801336c:	2340      	movs	r3, #64	@ 0x40
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f005 fea2 	bl	80190b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013374:	2300      	movs	r3, #0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3710      	adds	r7, #16
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	200000e7 	.word	0x200000e7
 8013384:	200000e8 	.word	0x200000e8
 8013388:	200000e9 	.word	0x200000e9

0801338c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	460b      	mov	r3, r1
 8013396:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013398:	4b3a      	ldr	r3, [pc, #232]	@ (8013484 <USBD_CDC_DeInit+0xf8>)
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	4619      	mov	r1, r3
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f005 fdc1 	bl	8018f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80133a4:	4b37      	ldr	r3, [pc, #220]	@ (8013484 <USBD_CDC_DeInit+0xf8>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	f003 020f 	and.w	r2, r3, #15
 80133ac:	6879      	ldr	r1, [r7, #4]
 80133ae:	4613      	mov	r3, r2
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	4413      	add	r3, r2
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	440b      	add	r3, r1
 80133b8:	3324      	adds	r3, #36	@ 0x24
 80133ba:	2200      	movs	r2, #0
 80133bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80133be:	4b32      	ldr	r3, [pc, #200]	@ (8013488 <USBD_CDC_DeInit+0xfc>)
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	4619      	mov	r1, r3
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f005 fdae 	bl	8018f26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80133ca:	4b2f      	ldr	r3, [pc, #188]	@ (8013488 <USBD_CDC_DeInit+0xfc>)
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	f003 020f 	and.w	r2, r3, #15
 80133d2:	6879      	ldr	r1, [r7, #4]
 80133d4:	4613      	mov	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	440b      	add	r3, r1
 80133de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80133e2:	2200      	movs	r2, #0
 80133e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80133e6:	4b29      	ldr	r3, [pc, #164]	@ (801348c <USBD_CDC_DeInit+0x100>)
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	4619      	mov	r1, r3
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f005 fd9a 	bl	8018f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80133f2:	4b26      	ldr	r3, [pc, #152]	@ (801348c <USBD_CDC_DeInit+0x100>)
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	f003 020f 	and.w	r2, r3, #15
 80133fa:	6879      	ldr	r1, [r7, #4]
 80133fc:	4613      	mov	r3, r2
 80133fe:	009b      	lsls	r3, r3, #2
 8013400:	4413      	add	r3, r2
 8013402:	009b      	lsls	r3, r3, #2
 8013404:	440b      	add	r3, r1
 8013406:	3324      	adds	r3, #36	@ 0x24
 8013408:	2200      	movs	r2, #0
 801340a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801340c:	4b1f      	ldr	r3, [pc, #124]	@ (801348c <USBD_CDC_DeInit+0x100>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 020f 	and.w	r2, r3, #15
 8013414:	6879      	ldr	r1, [r7, #4]
 8013416:	4613      	mov	r3, r2
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	4413      	add	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	440b      	add	r3, r1
 8013420:	3326      	adds	r3, #38	@ 0x26
 8013422:	2200      	movs	r2, #0
 8013424:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	32b0      	adds	r2, #176	@ 0xb0
 8013430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d01f      	beq.n	8013478 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	33b0      	adds	r3, #176	@ 0xb0
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4413      	add	r3, r2
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	32b0      	adds	r2, #176	@ 0xb0
 8013456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801345a:	4618      	mov	r0, r3
 801345c:	f005 fe6e 	bl	801913c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	32b0      	adds	r2, #176	@ 0xb0
 801346a:	2100      	movs	r1, #0
 801346c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2200      	movs	r2, #0
 8013474:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013478:	2300      	movs	r3, #0
}
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	200000e7 	.word	0x200000e7
 8013488:	200000e8 	.word	0x200000e8
 801348c:	200000e9 	.word	0x200000e9

08013490 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b086      	sub	sp, #24
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	32b0      	adds	r2, #176	@ 0xb0
 80134a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80134aa:	2300      	movs	r3, #0
 80134ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80134ae:	2300      	movs	r3, #0
 80134b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80134b2:	2300      	movs	r3, #0
 80134b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d101      	bne.n	80134c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80134bc:	2303      	movs	r3, #3
 80134be:	e0bf      	b.n	8013640 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d050      	beq.n	801356e <USBD_CDC_Setup+0xde>
 80134cc:	2b20      	cmp	r3, #32
 80134ce:	f040 80af 	bne.w	8013630 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	88db      	ldrh	r3, [r3, #6]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d03a      	beq.n	8013550 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	b25b      	sxtb	r3, r3
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	da1b      	bge.n	801351c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	33b0      	adds	r3, #176	@ 0xb0
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4413      	add	r3, r2
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80134fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80134fc:	683a      	ldr	r2, [r7, #0]
 80134fe:	88d2      	ldrh	r2, [r2, #6]
 8013500:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	88db      	ldrh	r3, [r3, #6]
 8013506:	2b07      	cmp	r3, #7
 8013508:	bf28      	it	cs
 801350a:	2307      	movcs	r3, #7
 801350c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	89fa      	ldrh	r2, [r7, #14]
 8013512:	4619      	mov	r1, r3
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f001 fd93 	bl	8015040 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801351a:	e090      	b.n	801363e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	785a      	ldrb	r2, [r3, #1]
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	88db      	ldrh	r3, [r3, #6]
 801352a:	2b3f      	cmp	r3, #63	@ 0x3f
 801352c:	d803      	bhi.n	8013536 <USBD_CDC_Setup+0xa6>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	88db      	ldrh	r3, [r3, #6]
 8013532:	b2da      	uxtb	r2, r3
 8013534:	e000      	b.n	8013538 <USBD_CDC_Setup+0xa8>
 8013536:	2240      	movs	r2, #64	@ 0x40
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801353e:	6939      	ldr	r1, [r7, #16]
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013546:	461a      	mov	r2, r3
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f001 fda5 	bl	8015098 <USBD_CtlPrepareRx>
      break;
 801354e:	e076      	b.n	801363e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	33b0      	adds	r3, #176	@ 0xb0
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4413      	add	r3, r2
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	683a      	ldr	r2, [r7, #0]
 8013564:	7850      	ldrb	r0, [r2, #1]
 8013566:	2200      	movs	r2, #0
 8013568:	6839      	ldr	r1, [r7, #0]
 801356a:	4798      	blx	r3
      break;
 801356c:	e067      	b.n	801363e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	785b      	ldrb	r3, [r3, #1]
 8013572:	2b0b      	cmp	r3, #11
 8013574:	d851      	bhi.n	801361a <USBD_CDC_Setup+0x18a>
 8013576:	a201      	add	r2, pc, #4	@ (adr r2, 801357c <USBD_CDC_Setup+0xec>)
 8013578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357c:	080135ad 	.word	0x080135ad
 8013580:	08013629 	.word	0x08013629
 8013584:	0801361b 	.word	0x0801361b
 8013588:	0801361b 	.word	0x0801361b
 801358c:	0801361b 	.word	0x0801361b
 8013590:	0801361b 	.word	0x0801361b
 8013594:	0801361b 	.word	0x0801361b
 8013598:	0801361b 	.word	0x0801361b
 801359c:	0801361b 	.word	0x0801361b
 80135a0:	0801361b 	.word	0x0801361b
 80135a4:	080135d7 	.word	0x080135d7
 80135a8:	08013601 	.word	0x08013601
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	2b03      	cmp	r3, #3
 80135b6:	d107      	bne.n	80135c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80135b8:	f107 030a 	add.w	r3, r7, #10
 80135bc:	2202      	movs	r2, #2
 80135be:	4619      	mov	r1, r3
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f001 fd3d 	bl	8015040 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135c6:	e032      	b.n	801362e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80135c8:	6839      	ldr	r1, [r7, #0]
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f001 fcbb 	bl	8014f46 <USBD_CtlError>
            ret = USBD_FAIL;
 80135d0:	2303      	movs	r3, #3
 80135d2:	75fb      	strb	r3, [r7, #23]
          break;
 80135d4:	e02b      	b.n	801362e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	2b03      	cmp	r3, #3
 80135e0:	d107      	bne.n	80135f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80135e2:	f107 030d 	add.w	r3, r7, #13
 80135e6:	2201      	movs	r2, #1
 80135e8:	4619      	mov	r1, r3
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f001 fd28 	bl	8015040 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135f0:	e01d      	b.n	801362e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f001 fca6 	bl	8014f46 <USBD_CtlError>
            ret = USBD_FAIL;
 80135fa:	2303      	movs	r3, #3
 80135fc:	75fb      	strb	r3, [r7, #23]
          break;
 80135fe:	e016      	b.n	801362e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013606:	b2db      	uxtb	r3, r3
 8013608:	2b03      	cmp	r3, #3
 801360a:	d00f      	beq.n	801362c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801360c:	6839      	ldr	r1, [r7, #0]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f001 fc99 	bl	8014f46 <USBD_CtlError>
            ret = USBD_FAIL;
 8013614:	2303      	movs	r3, #3
 8013616:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013618:	e008      	b.n	801362c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801361a:	6839      	ldr	r1, [r7, #0]
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f001 fc92 	bl	8014f46 <USBD_CtlError>
          ret = USBD_FAIL;
 8013622:	2303      	movs	r3, #3
 8013624:	75fb      	strb	r3, [r7, #23]
          break;
 8013626:	e002      	b.n	801362e <USBD_CDC_Setup+0x19e>
          break;
 8013628:	bf00      	nop
 801362a:	e008      	b.n	801363e <USBD_CDC_Setup+0x1ae>
          break;
 801362c:	bf00      	nop
      }
      break;
 801362e:	e006      	b.n	801363e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f001 fc87 	bl	8014f46 <USBD_CtlError>
      ret = USBD_FAIL;
 8013638:	2303      	movs	r3, #3
 801363a:	75fb      	strb	r3, [r7, #23]
      break;
 801363c:	bf00      	nop
  }

  return (uint8_t)ret;
 801363e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3718      	adds	r7, #24
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	460b      	mov	r3, r1
 8013652:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801365a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	32b0      	adds	r2, #176	@ 0xb0
 8013666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d101      	bne.n	8013672 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801366e:	2303      	movs	r3, #3
 8013670:	e065      	b.n	801373e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	32b0      	adds	r2, #176	@ 0xb0
 801367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013680:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013682:	78fb      	ldrb	r3, [r7, #3]
 8013684:	f003 020f 	and.w	r2, r3, #15
 8013688:	6879      	ldr	r1, [r7, #4]
 801368a:	4613      	mov	r3, r2
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	4413      	add	r3, r2
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	440b      	add	r3, r1
 8013694:	3318      	adds	r3, #24
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d02f      	beq.n	80136fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801369c:	78fb      	ldrb	r3, [r7, #3]
 801369e:	f003 020f 	and.w	r2, r3, #15
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	440b      	add	r3, r1
 80136ae:	3318      	adds	r3, #24
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	78fb      	ldrb	r3, [r7, #3]
 80136b4:	f003 010f 	and.w	r1, r3, #15
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	460b      	mov	r3, r1
 80136bc:	00db      	lsls	r3, r3, #3
 80136be:	440b      	add	r3, r1
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	4403      	add	r3, r0
 80136c4:	331c      	adds	r3, #28
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80136cc:	fb01 f303 	mul.w	r3, r1, r3
 80136d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d112      	bne.n	80136fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80136d6:	78fb      	ldrb	r3, [r7, #3]
 80136d8:	f003 020f 	and.w	r2, r3, #15
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4613      	mov	r3, r2
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	4413      	add	r3, r2
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	440b      	add	r3, r1
 80136e8:	3318      	adds	r3, #24
 80136ea:	2200      	movs	r2, #0
 80136ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80136ee:	78f9      	ldrb	r1, [r7, #3]
 80136f0:	2300      	movs	r3, #0
 80136f2:	2200      	movs	r2, #0
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f005 fcbe 	bl	8019076 <USBD_LL_Transmit>
 80136fa:	e01f      	b.n	801373c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2200      	movs	r2, #0
 8013700:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	33b0      	adds	r3, #176	@ 0xb0
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	4413      	add	r3, r2
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d010      	beq.n	801373c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	33b0      	adds	r3, #176	@ 0xb0
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4413      	add	r3, r2
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	691b      	ldr	r3, [r3, #16]
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8013732:	68ba      	ldr	r2, [r7, #8]
 8013734:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013738:	78fa      	ldrb	r2, [r7, #3]
 801373a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013746:	b580      	push	{r7, lr}
 8013748:	b084      	sub	sp, #16
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
 801374e:	460b      	mov	r3, r1
 8013750:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	32b0      	adds	r2, #176	@ 0xb0
 801375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013760:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	32b0      	adds	r2, #176	@ 0xb0
 801376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013774:	2303      	movs	r3, #3
 8013776:	e01a      	b.n	80137ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013778:	78fb      	ldrb	r3, [r7, #3]
 801377a:	4619      	mov	r1, r3
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f005 fcbc 	bl	80190fa <USBD_LL_GetRxDataSize>
 8013782:	4602      	mov	r2, r0
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	33b0      	adds	r3, #176	@ 0xb0
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	4413      	add	r3, r2
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	68fa      	ldr	r2, [r7, #12]
 801379e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80137a2:	68fa      	ldr	r2, [r7, #12]
 80137a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80137a8:	4611      	mov	r1, r2
 80137aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b084      	sub	sp, #16
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	32b0      	adds	r2, #176	@ 0xb0
 80137c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d101      	bne.n	80137d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80137d4:	2303      	movs	r3, #3
 80137d6:	e024      	b.n	8013822 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	33b0      	adds	r3, #176	@ 0xb0
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	4413      	add	r3, r2
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d019      	beq.n	8013820 <USBD_CDC_EP0_RxReady+0x6a>
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80137f2:	2bff      	cmp	r3, #255	@ 0xff
 80137f4:	d014      	beq.n	8013820 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	33b0      	adds	r3, #176	@ 0xb0
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	689b      	ldr	r3, [r3, #8]
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801380e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013810:	68fa      	ldr	r2, [r7, #12]
 8013812:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013816:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	22ff      	movs	r2, #255	@ 0xff
 801381c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
	...

0801382c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013834:	2182      	movs	r1, #130	@ 0x82
 8013836:	4818      	ldr	r0, [pc, #96]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013838:	f000 fd4f 	bl	80142da <USBD_GetEpDesc>
 801383c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801383e:	2101      	movs	r1, #1
 8013840:	4815      	ldr	r0, [pc, #84]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013842:	f000 fd4a 	bl	80142da <USBD_GetEpDesc>
 8013846:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013848:	2181      	movs	r1, #129	@ 0x81
 801384a:	4813      	ldr	r0, [pc, #76]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801384c:	f000 fd45 	bl	80142da <USBD_GetEpDesc>
 8013850:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d002      	beq.n	801385e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	2210      	movs	r2, #16
 801385c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d006      	beq.n	8013872 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	2200      	movs	r2, #0
 8013868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801386c:	711a      	strb	r2, [r3, #4]
 801386e:	2200      	movs	r2, #0
 8013870:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d006      	beq.n	8013886 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2200      	movs	r2, #0
 801387c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013880:	711a      	strb	r2, [r3, #4]
 8013882:	2200      	movs	r2, #0
 8013884:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2243      	movs	r2, #67	@ 0x43
 801388a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801388c:	4b02      	ldr	r3, [pc, #8]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	200000a4 	.word	0x200000a4

0801389c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b086      	sub	sp, #24
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80138a4:	2182      	movs	r1, #130	@ 0x82
 80138a6:	4818      	ldr	r0, [pc, #96]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138a8:	f000 fd17 	bl	80142da <USBD_GetEpDesc>
 80138ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80138ae:	2101      	movs	r1, #1
 80138b0:	4815      	ldr	r0, [pc, #84]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138b2:	f000 fd12 	bl	80142da <USBD_GetEpDesc>
 80138b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80138b8:	2181      	movs	r1, #129	@ 0x81
 80138ba:	4813      	ldr	r0, [pc, #76]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138bc:	f000 fd0d 	bl	80142da <USBD_GetEpDesc>
 80138c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d002      	beq.n	80138ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	2210      	movs	r2, #16
 80138cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d006      	beq.n	80138e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2200      	movs	r2, #0
 80138d8:	711a      	strb	r2, [r3, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	f042 0202 	orr.w	r2, r2, #2
 80138e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d006      	beq.n	80138f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2200      	movs	r2, #0
 80138ec:	711a      	strb	r2, [r3, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f042 0202 	orr.w	r2, r2, #2
 80138f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2243      	movs	r2, #67	@ 0x43
 80138fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80138fc:	4b02      	ldr	r3, [pc, #8]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3718      	adds	r7, #24
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	200000a4 	.word	0x200000a4

0801390c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b086      	sub	sp, #24
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013914:	2182      	movs	r1, #130	@ 0x82
 8013916:	4818      	ldr	r0, [pc, #96]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013918:	f000 fcdf 	bl	80142da <USBD_GetEpDesc>
 801391c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801391e:	2101      	movs	r1, #1
 8013920:	4815      	ldr	r0, [pc, #84]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013922:	f000 fcda 	bl	80142da <USBD_GetEpDesc>
 8013926:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013928:	2181      	movs	r1, #129	@ 0x81
 801392a:	4813      	ldr	r0, [pc, #76]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801392c:	f000 fcd5 	bl	80142da <USBD_GetEpDesc>
 8013930:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d002      	beq.n	801393e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2210      	movs	r2, #16
 801393c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d006      	beq.n	8013952 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	2200      	movs	r2, #0
 8013948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801394c:	711a      	strb	r2, [r3, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d006      	beq.n	8013966 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	2200      	movs	r2, #0
 801395c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013960:	711a      	strb	r2, [r3, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2243      	movs	r2, #67	@ 0x43
 801396a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801396c:	4b02      	ldr	r3, [pc, #8]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801396e:	4618      	mov	r0, r3
 8013970:	3718      	adds	r7, #24
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	200000a4 	.word	0x200000a4

0801397c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	220a      	movs	r2, #10
 8013988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801398a:	4b03      	ldr	r3, [pc, #12]	@ (8013998 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr
 8013998:	20000060 	.word	0x20000060

0801399c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d101      	bne.n	80139b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80139ac:	2303      	movs	r3, #3
 80139ae:	e009      	b.n	80139c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	33b0      	adds	r3, #176	@ 0xb0
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	4413      	add	r3, r2
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b087      	sub	sp, #28
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	32b0      	adds	r2, #176	@ 0xb0
 80139e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d101      	bne.n	80139f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80139f2:	2303      	movs	r3, #3
 80139f4:	e008      	b.n	8013a08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	68ba      	ldr	r2, [r7, #8]
 80139fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013a06:	2300      	movs	r3, #0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	371c      	adds	r7, #28
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr

08013a14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	32b0      	adds	r2, #176	@ 0xb0
 8013a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d101      	bne.n	8013a38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013a34:	2303      	movs	r3, #3
 8013a36:	e004      	b.n	8013a42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	683a      	ldr	r2, [r7, #0]
 8013a3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3714      	adds	r7, #20
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr
	...

08013a50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	32b0      	adds	r2, #176	@ 0xb0
 8013a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013a68:	2301      	movs	r3, #1
 8013a6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013a72:	2303      	movs	r3, #3
 8013a74:	e025      	b.n	8013ac2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d11f      	bne.n	8013ac0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	2201      	movs	r2, #1
 8013a84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013a88:	4b10      	ldr	r3, [pc, #64]	@ (8013acc <USBD_CDC_TransmitPacket+0x7c>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	f003 020f 	and.w	r2, r3, #15
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	4413      	add	r3, r2
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	4403      	add	r3, r0
 8013aa2:	3318      	adds	r3, #24
 8013aa4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013aa6:	4b09      	ldr	r3, [pc, #36]	@ (8013acc <USBD_CDC_TransmitPacket+0x7c>)
 8013aa8:	7819      	ldrb	r1, [r3, #0]
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f005 fadd 	bl	8019076 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	200000e7 	.word	0x200000e7

08013ad0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b084      	sub	sp, #16
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	32b0      	adds	r2, #176	@ 0xb0
 8013ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	32b0      	adds	r2, #176	@ 0xb0
 8013af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d101      	bne.n	8013afe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013afa:	2303      	movs	r3, #3
 8013afc:	e018      	b.n	8013b30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	7c1b      	ldrb	r3, [r3, #16]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10a      	bne.n	8013b1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013b06:	4b0c      	ldr	r3, [pc, #48]	@ (8013b38 <USBD_CDC_ReceivePacket+0x68>)
 8013b08:	7819      	ldrb	r1, [r3, #0]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f005 facf 	bl	80190b8 <USBD_LL_PrepareReceive>
 8013b1a:	e008      	b.n	8013b2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013b1c:	4b06      	ldr	r3, [pc, #24]	@ (8013b38 <USBD_CDC_ReceivePacket+0x68>)
 8013b1e:	7819      	ldrb	r1, [r3, #0]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013b26:	2340      	movs	r3, #64	@ 0x40
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f005 fac5 	bl	80190b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013b2e:	2300      	movs	r3, #0
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3710      	adds	r7, #16
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	200000e8 	.word	0x200000e8

08013b3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	4613      	mov	r3, r2
 8013b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d101      	bne.n	8013b54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013b50:	2303      	movs	r3, #3
 8013b52:	e01f      	b.n	8013b94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2200      	movs	r2, #0
 8013b58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2200      	movs	r2, #0
 8013b68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d003      	beq.n	8013b7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	68ba      	ldr	r2, [r7, #8]
 8013b76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	79fa      	ldrb	r2, [r7, #7]
 8013b86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f005 f93f 	bl	8018e0c <USBD_LL_Init>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3718      	adds	r7, #24
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d101      	bne.n	8013bb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013bb0:	2303      	movs	r3, #3
 8013bb2:	e025      	b.n	8013c00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	683a      	ldr	r2, [r7, #0]
 8013bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	32ae      	adds	r2, #174	@ 0xae
 8013bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00f      	beq.n	8013bf0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	32ae      	adds	r2, #174	@ 0xae
 8013bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013be0:	f107 020e 	add.w	r2, r7, #14
 8013be4:	4610      	mov	r0, r2
 8013be6:	4798      	blx	r3
 8013be8:	4602      	mov	r2, r0
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013bf6:	1c5a      	adds	r2, r3, #1
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013bfe:	2300      	movs	r3, #0
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3710      	adds	r7, #16
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f005 f947 	bl	8018ea4 <USBD_LL_Start>
 8013c16:	4603      	mov	r3, r0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	370c      	adds	r7, #12
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr

08013c36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b084      	sub	sp, #16
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c42:	2300      	movs	r3, #0
 8013c44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d009      	beq.n	8013c64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	78fa      	ldrb	r2, [r7, #3]
 8013c5a:	4611      	mov	r1, r2
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	4798      	blx	r3
 8013c60:	4603      	mov	r3, r0
 8013c62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b084      	sub	sp, #16
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
 8013c76:	460b      	mov	r3, r1
 8013c78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	78fa      	ldrb	r2, [r7, #3]
 8013c88:	4611      	mov	r1, r2
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	4798      	blx	r3
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013c94:	2303      	movs	r3, #3
 8013c96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b084      	sub	sp, #16
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
 8013caa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013cb2:	6839      	ldr	r1, [r7, #0]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f001 f90c 	bl	8014ed2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013cc8:	461a      	mov	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013cd6:	f003 031f 	and.w	r3, r3, #31
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d01a      	beq.n	8013d14 <USBD_LL_SetupStage+0x72>
 8013cde:	2b02      	cmp	r3, #2
 8013ce0:	d822      	bhi.n	8013d28 <USBD_LL_SetupStage+0x86>
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d002      	beq.n	8013cec <USBD_LL_SetupStage+0x4a>
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d00a      	beq.n	8013d00 <USBD_LL_SetupStage+0x5e>
 8013cea:	e01d      	b.n	8013d28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 fb63 	bl	80143c0 <USBD_StdDevReq>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8013cfe:	e020      	b.n	8013d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 fbcb 	bl	80144a4 <USBD_StdItfReq>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	73fb      	strb	r3, [r7, #15]
      break;
 8013d12:	e016      	b.n	8013d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 fc2d 	bl	801457c <USBD_StdEPReq>
 8013d22:	4603      	mov	r3, r0
 8013d24:	73fb      	strb	r3, [r7, #15]
      break;
 8013d26:	e00c      	b.n	8013d42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013d2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013d32:	b2db      	uxtb	r3, r3
 8013d34:	4619      	mov	r1, r3
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f005 f914 	bl	8018f64 <USBD_LL_StallEP>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d40:	bf00      	nop
  }

  return ret;
 8013d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	460b      	mov	r3, r1
 8013d56:	607a      	str	r2, [r7, #4]
 8013d58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013d5e:	7afb      	ldrb	r3, [r7, #11]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d16e      	bne.n	8013e42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013d6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013d72:	2b03      	cmp	r3, #3
 8013d74:	f040 8098 	bne.w	8013ea8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	689a      	ldr	r2, [r3, #8]
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d913      	bls.n	8013dac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	689a      	ldr	r2, [r3, #8]
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	1ad2      	subs	r2, r2, r3
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	68da      	ldr	r2, [r3, #12]
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	bf28      	it	cs
 8013d9e:	4613      	movcs	r3, r2
 8013da0:	461a      	mov	r2, r3
 8013da2:	6879      	ldr	r1, [r7, #4]
 8013da4:	68f8      	ldr	r0, [r7, #12]
 8013da6:	f001 f994 	bl	80150d2 <USBD_CtlContinueRx>
 8013daa:	e07d      	b.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013db2:	f003 031f 	and.w	r3, r3, #31
 8013db6:	2b02      	cmp	r3, #2
 8013db8:	d014      	beq.n	8013de4 <USBD_LL_DataOutStage+0x98>
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	d81d      	bhi.n	8013dfa <USBD_LL_DataOutStage+0xae>
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d002      	beq.n	8013dc8 <USBD_LL_DataOutStage+0x7c>
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d003      	beq.n	8013dce <USBD_LL_DataOutStage+0x82>
 8013dc6:	e018      	b.n	8013dfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	75bb      	strb	r3, [r7, #22]
            break;
 8013dcc:	e018      	b.n	8013e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f000 fa64 	bl	80142a6 <USBD_CoreFindIF>
 8013dde:	4603      	mov	r3, r0
 8013de0:	75bb      	strb	r3, [r7, #22]
            break;
 8013de2:	e00d      	b.n	8013e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	4619      	mov	r1, r3
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f000 fa66 	bl	80142c0 <USBD_CoreFindEP>
 8013df4:	4603      	mov	r3, r0
 8013df6:	75bb      	strb	r3, [r7, #22]
            break;
 8013df8:	e002      	b.n	8013e00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	75bb      	strb	r3, [r7, #22]
            break;
 8013dfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013e00:	7dbb      	ldrb	r3, [r7, #22]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d119      	bne.n	8013e3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	2b03      	cmp	r3, #3
 8013e10:	d113      	bne.n	8013e3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013e12:	7dba      	ldrb	r2, [r7, #22]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	32ae      	adds	r2, #174	@ 0xae
 8013e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e1c:	691b      	ldr	r3, [r3, #16]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d00b      	beq.n	8013e3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013e22:	7dba      	ldrb	r2, [r7, #22]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013e2a:	7dba      	ldrb	r2, [r7, #22]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	32ae      	adds	r2, #174	@ 0xae
 8013e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f001 f95a 	bl	80150f4 <USBD_CtlSendStatus>
 8013e40:	e032      	b.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 fa37 	bl	80142c0 <USBD_CoreFindEP>
 8013e52:	4603      	mov	r3, r0
 8013e54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e56:	7dbb      	ldrb	r3, [r7, #22]
 8013e58:	2bff      	cmp	r3, #255	@ 0xff
 8013e5a:	d025      	beq.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
 8013e5c:	7dbb      	ldrb	r3, [r7, #22]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d122      	bne.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	2b03      	cmp	r3, #3
 8013e6c:	d117      	bne.n	8013e9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013e6e:	7dba      	ldrb	r2, [r7, #22]
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	32ae      	adds	r2, #174	@ 0xae
 8013e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d00f      	beq.n	8013e9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013e7e:	7dba      	ldrb	r2, [r7, #22]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013e86:	7dba      	ldrb	r2, [r7, #22]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	32ae      	adds	r2, #174	@ 0xae
 8013e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e90:	699b      	ldr	r3, [r3, #24]
 8013e92:	7afa      	ldrb	r2, [r7, #11]
 8013e94:	4611      	mov	r1, r2
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	4798      	blx	r3
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013e9e:	7dfb      	ldrb	r3, [r7, #23]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d001      	beq.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013ea4:	7dfb      	ldrb	r3, [r7, #23]
 8013ea6:	e000      	b.n	8013eaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3718      	adds	r7, #24
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}

08013eb2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b086      	sub	sp, #24
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	60f8      	str	r0, [r7, #12]
 8013eba:	460b      	mov	r3, r1
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013ec0:	7afb      	ldrb	r3, [r7, #11]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d16f      	bne.n	8013fa6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	3314      	adds	r3, #20
 8013eca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d15a      	bne.n	8013f8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	689a      	ldr	r2, [r3, #8]
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d914      	bls.n	8013f0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	689a      	ldr	r2, [r3, #8]
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	1ad2      	subs	r2, r2, r3
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	689b      	ldr	r3, [r3, #8]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	6879      	ldr	r1, [r7, #4]
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f001 f8bc 	bl	8015076 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013efe:	2300      	movs	r3, #0
 8013f00:	2200      	movs	r2, #0
 8013f02:	2100      	movs	r1, #0
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f005 f8d7 	bl	80190b8 <USBD_LL_PrepareReceive>
 8013f0a:	e03f      	b.n	8013f8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	68da      	ldr	r2, [r3, #12]
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d11c      	bne.n	8013f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d316      	bcc.n	8013f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	685a      	ldr	r2, [r3, #4]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d20f      	bcs.n	8013f52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013f32:	2200      	movs	r2, #0
 8013f34:	2100      	movs	r1, #0
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f001 f89d 	bl	8015076 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f44:	2300      	movs	r3, #0
 8013f46:	2200      	movs	r2, #0
 8013f48:	2100      	movs	r1, #0
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	f005 f8b4 	bl	80190b8 <USBD_LL_PrepareReceive>
 8013f50:	e01c      	b.n	8013f8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	2b03      	cmp	r3, #3
 8013f5c:	d10f      	bne.n	8013f7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f64:	68db      	ldr	r3, [r3, #12]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d009      	beq.n	8013f7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f7e:	2180      	movs	r1, #128	@ 0x80
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	f004 ffef 	bl	8018f64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f001 f8c7 	bl	801511a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d03a      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f7ff fe42 	bl	8013c20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013fa4:	e032      	b.n	801400c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013fa6:	7afb      	ldrb	r3, [r7, #11]
 8013fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	4619      	mov	r1, r3
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 f985 	bl	80142c0 <USBD_CoreFindEP>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013fba:	7dfb      	ldrb	r3, [r7, #23]
 8013fbc:	2bff      	cmp	r3, #255	@ 0xff
 8013fbe:	d025      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
 8013fc0:	7dfb      	ldrb	r3, [r7, #23]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d122      	bne.n	801400c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fcc:	b2db      	uxtb	r3, r3
 8013fce:	2b03      	cmp	r3, #3
 8013fd0:	d11c      	bne.n	801400c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013fd2:	7dfa      	ldrb	r2, [r7, #23]
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	32ae      	adds	r2, #174	@ 0xae
 8013fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fdc:	695b      	ldr	r3, [r3, #20]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d014      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013fe2:	7dfa      	ldrb	r2, [r7, #23]
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013fea:	7dfa      	ldrb	r2, [r7, #23]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	32ae      	adds	r2, #174	@ 0xae
 8013ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ff4:	695b      	ldr	r3, [r3, #20]
 8013ff6:	7afa      	ldrb	r2, [r7, #11]
 8013ff8:	4611      	mov	r1, r2
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	4798      	blx	r3
 8013ffe:	4603      	mov	r3, r0
 8014000:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014002:	7dbb      	ldrb	r3, [r7, #22]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d001      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014008:	7dbb      	ldrb	r3, [r7, #22]
 801400a:	e000      	b.n	801400e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801400c:	2300      	movs	r3, #0
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014016:	b580      	push	{r7, lr}
 8014018:	b084      	sub	sp, #16
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801401e:	2300      	movs	r3, #0
 8014020:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2201      	movs	r2, #1
 8014026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2200      	movs	r2, #0
 801402e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2200      	movs	r2, #0
 8014036:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2200      	movs	r2, #0
 801403c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2200      	movs	r2, #0
 8014044:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801404e:	2b00      	cmp	r3, #0
 8014050:	d014      	beq.n	801407c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d00e      	beq.n	801407c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	6852      	ldr	r2, [r2, #4]
 801406a:	b2d2      	uxtb	r2, r2
 801406c:	4611      	mov	r1, r2
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	4798      	blx	r3
 8014072:	4603      	mov	r3, r0
 8014074:	2b00      	cmp	r3, #0
 8014076:	d001      	beq.n	801407c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014078:	2303      	movs	r3, #3
 801407a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801407c:	2340      	movs	r3, #64	@ 0x40
 801407e:	2200      	movs	r2, #0
 8014080:	2100      	movs	r1, #0
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f004 ff29 	bl	8018eda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2201      	movs	r2, #1
 801408c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2240      	movs	r2, #64	@ 0x40
 8014094:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014098:	2340      	movs	r3, #64	@ 0x40
 801409a:	2200      	movs	r2, #0
 801409c:	2180      	movs	r1, #128	@ 0x80
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f004 ff1b 	bl	8018eda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2201      	movs	r2, #1
 80140a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2240      	movs	r2, #64	@ 0x40
 80140ae:	621a      	str	r2, [r3, #32]

  return ret;
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3710      	adds	r7, #16
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}

080140ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80140ba:	b480      	push	{r7}
 80140bc:	b083      	sub	sp, #12
 80140be:	af00      	add	r7, sp, #0
 80140c0:	6078      	str	r0, [r7, #4]
 80140c2:	460b      	mov	r3, r1
 80140c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	78fa      	ldrb	r2, [r7, #3]
 80140ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80140da:	b480      	push	{r7}
 80140dc:	b083      	sub	sp, #12
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	2b04      	cmp	r3, #4
 80140ec:	d006      	beq.n	80140fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140f4:	b2da      	uxtb	r2, r3
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2204      	movs	r2, #4
 8014100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr

08014112 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014112:	b480      	push	{r7}
 8014114:	b083      	sub	sp, #12
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014120:	b2db      	uxtb	r3, r3
 8014122:	2b04      	cmp	r3, #4
 8014124:	d106      	bne.n	8014134 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801412c:	b2da      	uxtb	r2, r3
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8014134:	2300      	movs	r3, #0
}
 8014136:	4618      	mov	r0, r3
 8014138:	370c      	adds	r7, #12
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr

08014142 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014142:	b580      	push	{r7, lr}
 8014144:	b082      	sub	sp, #8
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014150:	b2db      	uxtb	r3, r3
 8014152:	2b03      	cmp	r3, #3
 8014154:	d110      	bne.n	8014178 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00b      	beq.n	8014178 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014166:	69db      	ldr	r3, [r3, #28]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d005      	beq.n	8014178 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014172:	69db      	ldr	r3, [r3, #28]
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3708      	adds	r7, #8
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b082      	sub	sp, #8
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
 801418a:	460b      	mov	r3, r1
 801418c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	32ae      	adds	r2, #174	@ 0xae
 8014198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d101      	bne.n	80141a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80141a0:	2303      	movs	r3, #3
 80141a2:	e01c      	b.n	80141de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d115      	bne.n	80141dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	32ae      	adds	r2, #174	@ 0xae
 80141ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141be:	6a1b      	ldr	r3, [r3, #32]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d00b      	beq.n	80141dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	32ae      	adds	r2, #174	@ 0xae
 80141ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141d2:	6a1b      	ldr	r3, [r3, #32]
 80141d4:	78fa      	ldrb	r2, [r7, #3]
 80141d6:	4611      	mov	r1, r2
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141dc:	2300      	movs	r3, #0
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b082      	sub	sp, #8
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
 80141ee:	460b      	mov	r3, r1
 80141f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	32ae      	adds	r2, #174	@ 0xae
 80141fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014204:	2303      	movs	r3, #3
 8014206:	e01c      	b.n	8014242 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b03      	cmp	r3, #3
 8014212:	d115      	bne.n	8014240 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	32ae      	adds	r2, #174	@ 0xae
 801421e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014224:	2b00      	cmp	r3, #0
 8014226:	d00b      	beq.n	8014240 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	32ae      	adds	r2, #174	@ 0xae
 8014232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014238:	78fa      	ldrb	r2, [r7, #3]
 801423a:	4611      	mov	r1, r2
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014240:	2300      	movs	r3, #0
}
 8014242:	4618      	mov	r0, r3
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}

0801424a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801424a:	b480      	push	{r7}
 801424c:	b083      	sub	sp, #12
 801424e:	af00      	add	r7, sp, #0
 8014250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	370c      	adds	r7, #12
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014268:	2300      	movs	r3, #0
 801426a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2201      	movs	r2, #1
 8014270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00e      	beq.n	801429c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	6852      	ldr	r2, [r2, #4]
 801428a:	b2d2      	uxtb	r2, r2
 801428c:	4611      	mov	r1, r2
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	4798      	blx	r3
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d001      	beq.n	801429c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014298:	2303      	movs	r3, #3
 801429a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801429c:	7bfb      	ldrb	r3, [r7, #15]
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b083      	sub	sp, #12
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
 80142ae:	460b      	mov	r3, r1
 80142b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80142b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	460b      	mov	r3, r1
 80142ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80142cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	370c      	adds	r7, #12
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr

080142da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80142da:	b580      	push	{r7, lr}
 80142dc:	b086      	sub	sp, #24
 80142de:	af00      	add	r7, sp, #0
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	460b      	mov	r3, r1
 80142e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80142ee:	2300      	movs	r3, #0
 80142f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	885b      	ldrh	r3, [r3, #2]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	7812      	ldrb	r2, [r2, #0]
 80142fc:	4293      	cmp	r3, r2
 80142fe:	d91f      	bls.n	8014340 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014306:	e013      	b.n	8014330 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014308:	f107 030a 	add.w	r3, r7, #10
 801430c:	4619      	mov	r1, r3
 801430e:	6978      	ldr	r0, [r7, #20]
 8014310:	f000 f81b 	bl	801434a <USBD_GetNextDesc>
 8014314:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	785b      	ldrb	r3, [r3, #1]
 801431a:	2b05      	cmp	r3, #5
 801431c:	d108      	bne.n	8014330 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	789b      	ldrb	r3, [r3, #2]
 8014326:	78fa      	ldrb	r2, [r7, #3]
 8014328:	429a      	cmp	r2, r3
 801432a:	d008      	beq.n	801433e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801432c:	2300      	movs	r3, #0
 801432e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	885b      	ldrh	r3, [r3, #2]
 8014334:	b29a      	uxth	r2, r3
 8014336:	897b      	ldrh	r3, [r7, #10]
 8014338:	429a      	cmp	r2, r3
 801433a:	d8e5      	bhi.n	8014308 <USBD_GetEpDesc+0x2e>
 801433c:	e000      	b.n	8014340 <USBD_GetEpDesc+0x66>
          break;
 801433e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014340:	693b      	ldr	r3, [r7, #16]
}
 8014342:	4618      	mov	r0, r3
 8014344:	3718      	adds	r7, #24
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801434a:	b480      	push	{r7}
 801434c:	b085      	sub	sp, #20
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	7812      	ldrb	r2, [r2, #0]
 8014360:	4413      	add	r3, r2
 8014362:	b29a      	uxth	r2, r3
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	461a      	mov	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4413      	add	r3, r2
 8014372:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014374:	68fb      	ldr	r3, [r7, #12]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3714      	adds	r7, #20
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr

08014382 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014382:	b480      	push	{r7}
 8014384:	b087      	sub	sp, #28
 8014386:	af00      	add	r7, sp, #0
 8014388:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	3301      	adds	r3, #1
 8014398:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80143a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80143a4:	021b      	lsls	r3, r3, #8
 80143a6:	b21a      	sxth	r2, r3
 80143a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80143ac:	4313      	orrs	r3, r2
 80143ae:	b21b      	sxth	r3, r3
 80143b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80143b2:	89fb      	ldrh	r3, [r7, #14]
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	371c      	adds	r7, #28
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80143ca:	2300      	movs	r3, #0
 80143cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80143d6:	2b40      	cmp	r3, #64	@ 0x40
 80143d8:	d005      	beq.n	80143e6 <USBD_StdDevReq+0x26>
 80143da:	2b40      	cmp	r3, #64	@ 0x40
 80143dc:	d857      	bhi.n	801448e <USBD_StdDevReq+0xce>
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d00f      	beq.n	8014402 <USBD_StdDevReq+0x42>
 80143e2:	2b20      	cmp	r3, #32
 80143e4:	d153      	bne.n	801448e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	32ae      	adds	r2, #174	@ 0xae
 80143f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	4798      	blx	r3
 80143fc:	4603      	mov	r3, r0
 80143fe:	73fb      	strb	r3, [r7, #15]
      break;
 8014400:	e04a      	b.n	8014498 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	785b      	ldrb	r3, [r3, #1]
 8014406:	2b09      	cmp	r3, #9
 8014408:	d83b      	bhi.n	8014482 <USBD_StdDevReq+0xc2>
 801440a:	a201      	add	r2, pc, #4	@ (adr r2, 8014410 <USBD_StdDevReq+0x50>)
 801440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014410:	08014465 	.word	0x08014465
 8014414:	08014479 	.word	0x08014479
 8014418:	08014483 	.word	0x08014483
 801441c:	0801446f 	.word	0x0801446f
 8014420:	08014483 	.word	0x08014483
 8014424:	08014443 	.word	0x08014443
 8014428:	08014439 	.word	0x08014439
 801442c:	08014483 	.word	0x08014483
 8014430:	0801445b 	.word	0x0801445b
 8014434:	0801444d 	.word	0x0801444d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014438:	6839      	ldr	r1, [r7, #0]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 fa3c 	bl	80148b8 <USBD_GetDescriptor>
          break;
 8014440:	e024      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014442:	6839      	ldr	r1, [r7, #0]
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 fba1 	bl	8014b8c <USBD_SetAddress>
          break;
 801444a:	e01f      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 fbe0 	bl	8014c14 <USBD_SetConfig>
 8014454:	4603      	mov	r3, r0
 8014456:	73fb      	strb	r3, [r7, #15]
          break;
 8014458:	e018      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801445a:	6839      	ldr	r1, [r7, #0]
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f000 fc83 	bl	8014d68 <USBD_GetConfig>
          break;
 8014462:	e013      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014464:	6839      	ldr	r1, [r7, #0]
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 fcb4 	bl	8014dd4 <USBD_GetStatus>
          break;
 801446c:	e00e      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801446e:	6839      	ldr	r1, [r7, #0]
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 fce3 	bl	8014e3c <USBD_SetFeature>
          break;
 8014476:	e009      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014478:	6839      	ldr	r1, [r7, #0]
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f000 fd07 	bl	8014e8e <USBD_ClrFeature>
          break;
 8014480:	e004      	b.n	801448c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014482:	6839      	ldr	r1, [r7, #0]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 fd5e 	bl	8014f46 <USBD_CtlError>
          break;
 801448a:	bf00      	nop
      }
      break;
 801448c:	e004      	b.n	8014498 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801448e:	6839      	ldr	r1, [r7, #0]
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f000 fd58 	bl	8014f46 <USBD_CtlError>
      break;
 8014496:	bf00      	nop
  }

  return ret;
 8014498:	7bfb      	ldrb	r3, [r7, #15]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop

080144a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80144ae:	2300      	movs	r3, #0
 80144b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80144ba:	2b40      	cmp	r3, #64	@ 0x40
 80144bc:	d005      	beq.n	80144ca <USBD_StdItfReq+0x26>
 80144be:	2b40      	cmp	r3, #64	@ 0x40
 80144c0:	d852      	bhi.n	8014568 <USBD_StdItfReq+0xc4>
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d001      	beq.n	80144ca <USBD_StdItfReq+0x26>
 80144c6:	2b20      	cmp	r3, #32
 80144c8:	d14e      	bne.n	8014568 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	3b01      	subs	r3, #1
 80144d4:	2b02      	cmp	r3, #2
 80144d6:	d840      	bhi.n	801455a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	889b      	ldrh	r3, [r3, #4]
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d836      	bhi.n	8014550 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	889b      	ldrh	r3, [r3, #4]
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	4619      	mov	r1, r3
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7ff fedb 	bl	80142a6 <USBD_CoreFindIF>
 80144f0:	4603      	mov	r3, r0
 80144f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80144f4:	7bbb      	ldrb	r3, [r7, #14]
 80144f6:	2bff      	cmp	r3, #255	@ 0xff
 80144f8:	d01d      	beq.n	8014536 <USBD_StdItfReq+0x92>
 80144fa:	7bbb      	ldrb	r3, [r7, #14]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d11a      	bne.n	8014536 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014500:	7bba      	ldrb	r2, [r7, #14]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	32ae      	adds	r2, #174	@ 0xae
 8014506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00f      	beq.n	8014530 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014510:	7bba      	ldrb	r2, [r7, #14]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014518:	7bba      	ldrb	r2, [r7, #14]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	32ae      	adds	r2, #174	@ 0xae
 801451e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014522:	689b      	ldr	r3, [r3, #8]
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	4798      	blx	r3
 801452a:	4603      	mov	r3, r0
 801452c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801452e:	e004      	b.n	801453a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014530:	2303      	movs	r3, #3
 8014532:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014534:	e001      	b.n	801453a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014536:	2303      	movs	r3, #3
 8014538:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	88db      	ldrh	r3, [r3, #6]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d110      	bne.n	8014564 <USBD_StdItfReq+0xc0>
 8014542:	7bfb      	ldrb	r3, [r7, #15]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10d      	bne.n	8014564 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f000 fdd3 	bl	80150f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801454e:	e009      	b.n	8014564 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 fcf7 	bl	8014f46 <USBD_CtlError>
          break;
 8014558:	e004      	b.n	8014564 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801455a:	6839      	ldr	r1, [r7, #0]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 fcf2 	bl	8014f46 <USBD_CtlError>
          break;
 8014562:	e000      	b.n	8014566 <USBD_StdItfReq+0xc2>
          break;
 8014564:	bf00      	nop
      }
      break;
 8014566:	e004      	b.n	8014572 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014568:	6839      	ldr	r1, [r7, #0]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fceb 	bl	8014f46 <USBD_CtlError>
      break;
 8014570:	bf00      	nop
  }

  return ret;
 8014572:	7bfb      	ldrb	r3, [r7, #15]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3710      	adds	r7, #16
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	889b      	ldrh	r3, [r3, #4]
 801458e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014598:	2b40      	cmp	r3, #64	@ 0x40
 801459a:	d007      	beq.n	80145ac <USBD_StdEPReq+0x30>
 801459c:	2b40      	cmp	r3, #64	@ 0x40
 801459e:	f200 817f 	bhi.w	80148a0 <USBD_StdEPReq+0x324>
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d02a      	beq.n	80145fc <USBD_StdEPReq+0x80>
 80145a6:	2b20      	cmp	r3, #32
 80145a8:	f040 817a 	bne.w	80148a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80145ac:	7bbb      	ldrb	r3, [r7, #14]
 80145ae:	4619      	mov	r1, r3
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7ff fe85 	bl	80142c0 <USBD_CoreFindEP>
 80145b6:	4603      	mov	r3, r0
 80145b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80145ba:	7b7b      	ldrb	r3, [r7, #13]
 80145bc:	2bff      	cmp	r3, #255	@ 0xff
 80145be:	f000 8174 	beq.w	80148aa <USBD_StdEPReq+0x32e>
 80145c2:	7b7b      	ldrb	r3, [r7, #13]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f040 8170 	bne.w	80148aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80145ca:	7b7a      	ldrb	r2, [r7, #13]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80145d2:	7b7a      	ldrb	r2, [r7, #13]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	32ae      	adds	r2, #174	@ 0xae
 80145d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	f000 8163 	beq.w	80148aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80145e4:	7b7a      	ldrb	r2, [r7, #13]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	32ae      	adds	r2, #174	@ 0xae
 80145ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	4798      	blx	r3
 80145f6:	4603      	mov	r3, r0
 80145f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80145fa:	e156      	b.n	80148aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	785b      	ldrb	r3, [r3, #1]
 8014600:	2b03      	cmp	r3, #3
 8014602:	d008      	beq.n	8014616 <USBD_StdEPReq+0x9a>
 8014604:	2b03      	cmp	r3, #3
 8014606:	f300 8145 	bgt.w	8014894 <USBD_StdEPReq+0x318>
 801460a:	2b00      	cmp	r3, #0
 801460c:	f000 809b 	beq.w	8014746 <USBD_StdEPReq+0x1ca>
 8014610:	2b01      	cmp	r3, #1
 8014612:	d03c      	beq.n	801468e <USBD_StdEPReq+0x112>
 8014614:	e13e      	b.n	8014894 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801461c:	b2db      	uxtb	r3, r3
 801461e:	2b02      	cmp	r3, #2
 8014620:	d002      	beq.n	8014628 <USBD_StdEPReq+0xac>
 8014622:	2b03      	cmp	r3, #3
 8014624:	d016      	beq.n	8014654 <USBD_StdEPReq+0xd8>
 8014626:	e02c      	b.n	8014682 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014628:	7bbb      	ldrb	r3, [r7, #14]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00d      	beq.n	801464a <USBD_StdEPReq+0xce>
 801462e:	7bbb      	ldrb	r3, [r7, #14]
 8014630:	2b80      	cmp	r3, #128	@ 0x80
 8014632:	d00a      	beq.n	801464a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014634:	7bbb      	ldrb	r3, [r7, #14]
 8014636:	4619      	mov	r1, r3
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f004 fc93 	bl	8018f64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801463e:	2180      	movs	r1, #128	@ 0x80
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f004 fc8f 	bl	8018f64 <USBD_LL_StallEP>
 8014646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014648:	e020      	b.n	801468c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801464a:	6839      	ldr	r1, [r7, #0]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 fc7a 	bl	8014f46 <USBD_CtlError>
              break;
 8014652:	e01b      	b.n	801468c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	885b      	ldrh	r3, [r3, #2]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d10e      	bne.n	801467a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801465c:	7bbb      	ldrb	r3, [r7, #14]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d00b      	beq.n	801467a <USBD_StdEPReq+0xfe>
 8014662:	7bbb      	ldrb	r3, [r7, #14]
 8014664:	2b80      	cmp	r3, #128	@ 0x80
 8014666:	d008      	beq.n	801467a <USBD_StdEPReq+0xfe>
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	88db      	ldrh	r3, [r3, #6]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d104      	bne.n	801467a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014670:	7bbb      	ldrb	r3, [r7, #14]
 8014672:	4619      	mov	r1, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f004 fc75 	bl	8018f64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f000 fd3a 	bl	80150f4 <USBD_CtlSendStatus>

              break;
 8014680:	e004      	b.n	801468c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014682:	6839      	ldr	r1, [r7, #0]
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f000 fc5e 	bl	8014f46 <USBD_CtlError>
              break;
 801468a:	bf00      	nop
          }
          break;
 801468c:	e107      	b.n	801489e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014694:	b2db      	uxtb	r3, r3
 8014696:	2b02      	cmp	r3, #2
 8014698:	d002      	beq.n	80146a0 <USBD_StdEPReq+0x124>
 801469a:	2b03      	cmp	r3, #3
 801469c:	d016      	beq.n	80146cc <USBD_StdEPReq+0x150>
 801469e:	e04b      	b.n	8014738 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146a0:	7bbb      	ldrb	r3, [r7, #14]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00d      	beq.n	80146c2 <USBD_StdEPReq+0x146>
 80146a6:	7bbb      	ldrb	r3, [r7, #14]
 80146a8:	2b80      	cmp	r3, #128	@ 0x80
 80146aa:	d00a      	beq.n	80146c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80146ac:	7bbb      	ldrb	r3, [r7, #14]
 80146ae:	4619      	mov	r1, r3
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f004 fc57 	bl	8018f64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80146b6:	2180      	movs	r1, #128	@ 0x80
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f004 fc53 	bl	8018f64 <USBD_LL_StallEP>
 80146be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80146c0:	e040      	b.n	8014744 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80146c2:	6839      	ldr	r1, [r7, #0]
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f000 fc3e 	bl	8014f46 <USBD_CtlError>
              break;
 80146ca:	e03b      	b.n	8014744 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	885b      	ldrh	r3, [r3, #2]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d136      	bne.n	8014742 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80146d4:	7bbb      	ldrb	r3, [r7, #14]
 80146d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d004      	beq.n	80146e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80146de:	7bbb      	ldrb	r3, [r7, #14]
 80146e0:	4619      	mov	r1, r3
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f004 fc5d 	bl	8018fa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 fd03 	bl	80150f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80146ee:	7bbb      	ldrb	r3, [r7, #14]
 80146f0:	4619      	mov	r1, r3
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff fde4 	bl	80142c0 <USBD_CoreFindEP>
 80146f8:	4603      	mov	r3, r0
 80146fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80146fc:	7b7b      	ldrb	r3, [r7, #13]
 80146fe:	2bff      	cmp	r3, #255	@ 0xff
 8014700:	d01f      	beq.n	8014742 <USBD_StdEPReq+0x1c6>
 8014702:	7b7b      	ldrb	r3, [r7, #13]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d11c      	bne.n	8014742 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014708:	7b7a      	ldrb	r2, [r7, #13]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014710:	7b7a      	ldrb	r2, [r7, #13]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	32ae      	adds	r2, #174	@ 0xae
 8014716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d010      	beq.n	8014742 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014720:	7b7a      	ldrb	r2, [r7, #13]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	32ae      	adds	r2, #174	@ 0xae
 8014726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	6839      	ldr	r1, [r7, #0]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	4798      	blx	r3
 8014732:	4603      	mov	r3, r0
 8014734:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014736:	e004      	b.n	8014742 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f000 fc03 	bl	8014f46 <USBD_CtlError>
              break;
 8014740:	e000      	b.n	8014744 <USBD_StdEPReq+0x1c8>
              break;
 8014742:	bf00      	nop
          }
          break;
 8014744:	e0ab      	b.n	801489e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801474c:	b2db      	uxtb	r3, r3
 801474e:	2b02      	cmp	r3, #2
 8014750:	d002      	beq.n	8014758 <USBD_StdEPReq+0x1dc>
 8014752:	2b03      	cmp	r3, #3
 8014754:	d032      	beq.n	80147bc <USBD_StdEPReq+0x240>
 8014756:	e097      	b.n	8014888 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014758:	7bbb      	ldrb	r3, [r7, #14]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d007      	beq.n	801476e <USBD_StdEPReq+0x1f2>
 801475e:	7bbb      	ldrb	r3, [r7, #14]
 8014760:	2b80      	cmp	r3, #128	@ 0x80
 8014762:	d004      	beq.n	801476e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 fbed 	bl	8014f46 <USBD_CtlError>
                break;
 801476c:	e091      	b.n	8014892 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801476e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014772:	2b00      	cmp	r3, #0
 8014774:	da0b      	bge.n	801478e <USBD_StdEPReq+0x212>
 8014776:	7bbb      	ldrb	r3, [r7, #14]
 8014778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801477c:	4613      	mov	r3, r2
 801477e:	009b      	lsls	r3, r3, #2
 8014780:	4413      	add	r3, r2
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	3310      	adds	r3, #16
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	4413      	add	r3, r2
 801478a:	3304      	adds	r3, #4
 801478c:	e00b      	b.n	80147a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801478e:	7bbb      	ldrb	r3, [r7, #14]
 8014790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014794:	4613      	mov	r3, r2
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	4413      	add	r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	4413      	add	r3, r2
 80147a4:	3304      	adds	r3, #4
 80147a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	2200      	movs	r2, #0
 80147ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	2202      	movs	r2, #2
 80147b2:	4619      	mov	r1, r3
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 fc43 	bl	8015040 <USBD_CtlSendData>
              break;
 80147ba:	e06a      	b.n	8014892 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80147bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	da11      	bge.n	80147e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80147c4:	7bbb      	ldrb	r3, [r7, #14]
 80147c6:	f003 020f 	and.w	r2, r3, #15
 80147ca:	6879      	ldr	r1, [r7, #4]
 80147cc:	4613      	mov	r3, r2
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	440b      	add	r3, r1
 80147d6:	3324      	adds	r3, #36	@ 0x24
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d117      	bne.n	801480e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80147de:	6839      	ldr	r1, [r7, #0]
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f000 fbb0 	bl	8014f46 <USBD_CtlError>
                  break;
 80147e6:	e054      	b.n	8014892 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80147e8:	7bbb      	ldrb	r3, [r7, #14]
 80147ea:	f003 020f 	and.w	r2, r3, #15
 80147ee:	6879      	ldr	r1, [r7, #4]
 80147f0:	4613      	mov	r3, r2
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	4413      	add	r3, r2
 80147f6:	009b      	lsls	r3, r3, #2
 80147f8:	440b      	add	r3, r1
 80147fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80147fe:	881b      	ldrh	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d104      	bne.n	801480e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014804:	6839      	ldr	r1, [r7, #0]
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 fb9d 	bl	8014f46 <USBD_CtlError>
                  break;
 801480c:	e041      	b.n	8014892 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801480e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014812:	2b00      	cmp	r3, #0
 8014814:	da0b      	bge.n	801482e <USBD_StdEPReq+0x2b2>
 8014816:	7bbb      	ldrb	r3, [r7, #14]
 8014818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801481c:	4613      	mov	r3, r2
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	4413      	add	r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	3310      	adds	r3, #16
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	4413      	add	r3, r2
 801482a:	3304      	adds	r3, #4
 801482c:	e00b      	b.n	8014846 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801482e:	7bbb      	ldrb	r3, [r7, #14]
 8014830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014834:	4613      	mov	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4413      	add	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	4413      	add	r3, r2
 8014844:	3304      	adds	r3, #4
 8014846:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014848:	7bbb      	ldrb	r3, [r7, #14]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d002      	beq.n	8014854 <USBD_StdEPReq+0x2d8>
 801484e:	7bbb      	ldrb	r3, [r7, #14]
 8014850:	2b80      	cmp	r3, #128	@ 0x80
 8014852:	d103      	bne.n	801485c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2200      	movs	r2, #0
 8014858:	601a      	str	r2, [r3, #0]
 801485a:	e00e      	b.n	801487a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801485c:	7bbb      	ldrb	r3, [r7, #14]
 801485e:	4619      	mov	r1, r3
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f004 fbbd 	bl	8018fe0 <USBD_LL_IsStallEP>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d003      	beq.n	8014874 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	2201      	movs	r2, #1
 8014870:	601a      	str	r2, [r3, #0]
 8014872:	e002      	b.n	801487a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	2200      	movs	r2, #0
 8014878:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	2202      	movs	r2, #2
 801487e:	4619      	mov	r1, r3
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 fbdd 	bl	8015040 <USBD_CtlSendData>
              break;
 8014886:	e004      	b.n	8014892 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014888:	6839      	ldr	r1, [r7, #0]
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 fb5b 	bl	8014f46 <USBD_CtlError>
              break;
 8014890:	bf00      	nop
          }
          break;
 8014892:	e004      	b.n	801489e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fb55 	bl	8014f46 <USBD_CtlError>
          break;
 801489c:	bf00      	nop
      }
      break;
 801489e:	e005      	b.n	80148ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80148a0:	6839      	ldr	r1, [r7, #0]
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 fb4f 	bl	8014f46 <USBD_CtlError>
      break;
 80148a8:	e000      	b.n	80148ac <USBD_StdEPReq+0x330>
      break;
 80148aa:	bf00      	nop
  }

  return ret;
 80148ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3710      	adds	r7, #16
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
	...

080148b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80148c2:	2300      	movs	r3, #0
 80148c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80148c6:	2300      	movs	r3, #0
 80148c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80148ca:	2300      	movs	r3, #0
 80148cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	885b      	ldrh	r3, [r3, #2]
 80148d2:	0a1b      	lsrs	r3, r3, #8
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	3b01      	subs	r3, #1
 80148d8:	2b06      	cmp	r3, #6
 80148da:	f200 8128 	bhi.w	8014b2e <USBD_GetDescriptor+0x276>
 80148de:	a201      	add	r2, pc, #4	@ (adr r2, 80148e4 <USBD_GetDescriptor+0x2c>)
 80148e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e4:	08014901 	.word	0x08014901
 80148e8:	08014919 	.word	0x08014919
 80148ec:	08014959 	.word	0x08014959
 80148f0:	08014b2f 	.word	0x08014b2f
 80148f4:	08014b2f 	.word	0x08014b2f
 80148f8:	08014acf 	.word	0x08014acf
 80148fc:	08014afb 	.word	0x08014afb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	687a      	ldr	r2, [r7, #4]
 801490a:	7c12      	ldrb	r2, [r2, #16]
 801490c:	f107 0108 	add.w	r1, r7, #8
 8014910:	4610      	mov	r0, r2
 8014912:	4798      	blx	r3
 8014914:	60f8      	str	r0, [r7, #12]
      break;
 8014916:	e112      	b.n	8014b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	7c1b      	ldrb	r3, [r3, #16]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d10d      	bne.n	801493c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014928:	f107 0208 	add.w	r2, r7, #8
 801492c:	4610      	mov	r0, r2
 801492e:	4798      	blx	r3
 8014930:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3301      	adds	r3, #1
 8014936:	2202      	movs	r2, #2
 8014938:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801493a:	e100      	b.n	8014b3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014944:	f107 0208 	add.w	r2, r7, #8
 8014948:	4610      	mov	r0, r2
 801494a:	4798      	blx	r3
 801494c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	3301      	adds	r3, #1
 8014952:	2202      	movs	r2, #2
 8014954:	701a      	strb	r2, [r3, #0]
      break;
 8014956:	e0f2      	b.n	8014b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	885b      	ldrh	r3, [r3, #2]
 801495c:	b2db      	uxtb	r3, r3
 801495e:	2b05      	cmp	r3, #5
 8014960:	f200 80ac 	bhi.w	8014abc <USBD_GetDescriptor+0x204>
 8014964:	a201      	add	r2, pc, #4	@ (adr r2, 801496c <USBD_GetDescriptor+0xb4>)
 8014966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801496a:	bf00      	nop
 801496c:	08014985 	.word	0x08014985
 8014970:	080149b9 	.word	0x080149b9
 8014974:	080149ed 	.word	0x080149ed
 8014978:	08014a21 	.word	0x08014a21
 801497c:	08014a55 	.word	0x08014a55
 8014980:	08014a89 	.word	0x08014a89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00b      	beq.n	80149a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	7c12      	ldrb	r2, [r2, #16]
 801499c:	f107 0108 	add.w	r1, r7, #8
 80149a0:	4610      	mov	r0, r2
 80149a2:	4798      	blx	r3
 80149a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149a6:	e091      	b.n	8014acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149a8:	6839      	ldr	r1, [r7, #0]
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 facb 	bl	8014f46 <USBD_CtlError>
            err++;
 80149b0:	7afb      	ldrb	r3, [r7, #11]
 80149b2:	3301      	adds	r3, #1
 80149b4:	72fb      	strb	r3, [r7, #11]
          break;
 80149b6:	e089      	b.n	8014acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80149be:	689b      	ldr	r3, [r3, #8]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d00b      	beq.n	80149dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	7c12      	ldrb	r2, [r2, #16]
 80149d0:	f107 0108 	add.w	r1, r7, #8
 80149d4:	4610      	mov	r0, r2
 80149d6:	4798      	blx	r3
 80149d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149da:	e077      	b.n	8014acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149dc:	6839      	ldr	r1, [r7, #0]
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f000 fab1 	bl	8014f46 <USBD_CtlError>
            err++;
 80149e4:	7afb      	ldrb	r3, [r7, #11]
 80149e6:	3301      	adds	r3, #1
 80149e8:	72fb      	strb	r3, [r7, #11]
          break;
 80149ea:	e06f      	b.n	8014acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00b      	beq.n	8014a10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80149fe:	68db      	ldr	r3, [r3, #12]
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	7c12      	ldrb	r2, [r2, #16]
 8014a04:	f107 0108 	add.w	r1, r7, #8
 8014a08:	4610      	mov	r0, r2
 8014a0a:	4798      	blx	r3
 8014a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a0e:	e05d      	b.n	8014acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a10:	6839      	ldr	r1, [r7, #0]
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 fa97 	bl	8014f46 <USBD_CtlError>
            err++;
 8014a18:	7afb      	ldrb	r3, [r7, #11]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a1e:	e055      	b.n	8014acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a26:	691b      	ldr	r3, [r3, #16]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d00b      	beq.n	8014a44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a32:	691b      	ldr	r3, [r3, #16]
 8014a34:	687a      	ldr	r2, [r7, #4]
 8014a36:	7c12      	ldrb	r2, [r2, #16]
 8014a38:	f107 0108 	add.w	r1, r7, #8
 8014a3c:	4610      	mov	r0, r2
 8014a3e:	4798      	blx	r3
 8014a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a42:	e043      	b.n	8014acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a44:	6839      	ldr	r1, [r7, #0]
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 fa7d 	bl	8014f46 <USBD_CtlError>
            err++;
 8014a4c:	7afb      	ldrb	r3, [r7, #11]
 8014a4e:	3301      	adds	r3, #1
 8014a50:	72fb      	strb	r3, [r7, #11]
          break;
 8014a52:	e03b      	b.n	8014acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a5a:	695b      	ldr	r3, [r3, #20]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00b      	beq.n	8014a78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a66:	695b      	ldr	r3, [r3, #20]
 8014a68:	687a      	ldr	r2, [r7, #4]
 8014a6a:	7c12      	ldrb	r2, [r2, #16]
 8014a6c:	f107 0108 	add.w	r1, r7, #8
 8014a70:	4610      	mov	r0, r2
 8014a72:	4798      	blx	r3
 8014a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a76:	e029      	b.n	8014acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a78:	6839      	ldr	r1, [r7, #0]
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 fa63 	bl	8014f46 <USBD_CtlError>
            err++;
 8014a80:	7afb      	ldrb	r3, [r7, #11]
 8014a82:	3301      	adds	r3, #1
 8014a84:	72fb      	strb	r3, [r7, #11]
          break;
 8014a86:	e021      	b.n	8014acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a8e:	699b      	ldr	r3, [r3, #24]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00b      	beq.n	8014aac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a9a:	699b      	ldr	r3, [r3, #24]
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	7c12      	ldrb	r2, [r2, #16]
 8014aa0:	f107 0108 	add.w	r1, r7, #8
 8014aa4:	4610      	mov	r0, r2
 8014aa6:	4798      	blx	r3
 8014aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014aaa:	e00f      	b.n	8014acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014aac:	6839      	ldr	r1, [r7, #0]
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 fa49 	bl	8014f46 <USBD_CtlError>
            err++;
 8014ab4:	7afb      	ldrb	r3, [r7, #11]
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8014aba:	e007      	b.n	8014acc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014abc:	6839      	ldr	r1, [r7, #0]
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f000 fa41 	bl	8014f46 <USBD_CtlError>
          err++;
 8014ac4:	7afb      	ldrb	r3, [r7, #11]
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014aca:	bf00      	nop
      }
      break;
 8014acc:	e037      	b.n	8014b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	7c1b      	ldrb	r3, [r3, #16]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d109      	bne.n	8014aea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ade:	f107 0208 	add.w	r2, r7, #8
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	4798      	blx	r3
 8014ae6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ae8:	e029      	b.n	8014b3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 fa2a 	bl	8014f46 <USBD_CtlError>
        err++;
 8014af2:	7afb      	ldrb	r3, [r7, #11]
 8014af4:	3301      	adds	r3, #1
 8014af6:	72fb      	strb	r3, [r7, #11]
      break;
 8014af8:	e021      	b.n	8014b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	7c1b      	ldrb	r3, [r3, #16]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10d      	bne.n	8014b1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b0a:	f107 0208 	add.w	r2, r7, #8
 8014b0e:	4610      	mov	r0, r2
 8014b10:	4798      	blx	r3
 8014b12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	3301      	adds	r3, #1
 8014b18:	2207      	movs	r2, #7
 8014b1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b1c:	e00f      	b.n	8014b3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014b1e:	6839      	ldr	r1, [r7, #0]
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f000 fa10 	bl	8014f46 <USBD_CtlError>
        err++;
 8014b26:	7afb      	ldrb	r3, [r7, #11]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8014b2c:	e007      	b.n	8014b3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014b2e:	6839      	ldr	r1, [r7, #0]
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f000 fa08 	bl	8014f46 <USBD_CtlError>
      err++;
 8014b36:	7afb      	ldrb	r3, [r7, #11]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8014b3c:	bf00      	nop
  }

  if (err != 0U)
 8014b3e:	7afb      	ldrb	r3, [r7, #11]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d11e      	bne.n	8014b82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	88db      	ldrh	r3, [r3, #6]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d016      	beq.n	8014b7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014b4c:	893b      	ldrh	r3, [r7, #8]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d00e      	beq.n	8014b70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	88da      	ldrh	r2, [r3, #6]
 8014b56:	893b      	ldrh	r3, [r7, #8]
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	bf28      	it	cs
 8014b5c:	4613      	movcs	r3, r2
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014b62:	893b      	ldrh	r3, [r7, #8]
 8014b64:	461a      	mov	r2, r3
 8014b66:	68f9      	ldr	r1, [r7, #12]
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 fa69 	bl	8015040 <USBD_CtlSendData>
 8014b6e:	e009      	b.n	8014b84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014b70:	6839      	ldr	r1, [r7, #0]
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 f9e7 	bl	8014f46 <USBD_CtlError>
 8014b78:	e004      	b.n	8014b84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 faba 	bl	80150f4 <USBD_CtlSendStatus>
 8014b80:	e000      	b.n	8014b84 <USBD_GetDescriptor+0x2cc>
    return;
 8014b82:	bf00      	nop
  }
}
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop

08014b8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	889b      	ldrh	r3, [r3, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d131      	bne.n	8014c02 <USBD_SetAddress+0x76>
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	88db      	ldrh	r3, [r3, #6]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d12d      	bne.n	8014c02 <USBD_SetAddress+0x76>
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	885b      	ldrh	r3, [r3, #2]
 8014baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8014bac:	d829      	bhi.n	8014c02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	885b      	ldrh	r3, [r3, #2]
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014bb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	2b03      	cmp	r3, #3
 8014bc4:	d104      	bne.n	8014bd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014bc6:	6839      	ldr	r1, [r7, #0]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 f9bc 	bl	8014f46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bce:	e01d      	b.n	8014c0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	7bfa      	ldrb	r2, [r7, #15]
 8014bd4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014bd8:	7bfb      	ldrb	r3, [r7, #15]
 8014bda:	4619      	mov	r1, r3
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f004 fa2b 	bl	8019038 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 fa86 	bl	80150f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014be8:	7bfb      	ldrb	r3, [r7, #15]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d004      	beq.n	8014bf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2202      	movs	r2, #2
 8014bf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bf6:	e009      	b.n	8014c0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c00:	e004      	b.n	8014c0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014c02:	6839      	ldr	r1, [r7, #0]
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f000 f99e 	bl	8014f46 <USBD_CtlError>
  }
}
 8014c0a:	bf00      	nop
 8014c0c:	bf00      	nop
 8014c0e:	3710      	adds	r7, #16
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	885b      	ldrh	r3, [r3, #2]
 8014c26:	b2da      	uxtb	r2, r3
 8014c28:	4b4e      	ldr	r3, [pc, #312]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014c2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	2b01      	cmp	r3, #1
 8014c32:	d905      	bls.n	8014c40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014c34:	6839      	ldr	r1, [r7, #0]
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 f985 	bl	8014f46 <USBD_CtlError>
    return USBD_FAIL;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	e08c      	b.n	8014d5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	2b02      	cmp	r3, #2
 8014c4a:	d002      	beq.n	8014c52 <USBD_SetConfig+0x3e>
 8014c4c:	2b03      	cmp	r3, #3
 8014c4e:	d029      	beq.n	8014ca4 <USBD_SetConfig+0x90>
 8014c50:	e075      	b.n	8014d3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014c52:	4b44      	ldr	r3, [pc, #272]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d020      	beq.n	8014c9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014c5a:	4b42      	ldr	r3, [pc, #264]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014c64:	4b3f      	ldr	r3, [pc, #252]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	4619      	mov	r1, r3
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7fe ffe3 	bl	8013c36 <USBD_SetClassConfig>
 8014c70:	4603      	mov	r3, r0
 8014c72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014c74:	7bfb      	ldrb	r3, [r7, #15]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d008      	beq.n	8014c8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014c7a:	6839      	ldr	r1, [r7, #0]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f000 f962 	bl	8014f46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2202      	movs	r2, #2
 8014c86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014c8a:	e065      	b.n	8014d58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f000 fa31 	bl	80150f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2203      	movs	r2, #3
 8014c96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014c9a:	e05d      	b.n	8014d58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 fa29 	bl	80150f4 <USBD_CtlSendStatus>
      break;
 8014ca2:	e059      	b.n	8014d58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d112      	bne.n	8014cd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2202      	movs	r2, #2
 8014cb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014cbe:	4b29      	ldr	r3, [pc, #164]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7fe ffd2 	bl	8013c6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f000 fa12 	bl	80150f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014cd0:	e042      	b.n	8014d58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014cd2:	4b24      	ldr	r3, [pc, #144]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d02a      	beq.n	8014d36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	4619      	mov	r1, r3
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7fe ffc0 	bl	8013c6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014cee:	4b1d      	ldr	r3, [pc, #116]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7fe ff99 	bl	8013c36 <USBD_SetClassConfig>
 8014d04:	4603      	mov	r3, r0
 8014d06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014d08:	7bfb      	ldrb	r3, [r7, #15]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d00f      	beq.n	8014d2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014d0e:	6839      	ldr	r1, [r7, #0]
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f000 f918 	bl	8014f46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f7fe ffa5 	bl	8013c6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2202      	movs	r2, #2
 8014d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014d2c:	e014      	b.n	8014d58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f000 f9e0 	bl	80150f4 <USBD_CtlSendStatus>
      break;
 8014d34:	e010      	b.n	8014d58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f000 f9dc 	bl	80150f4 <USBD_CtlSendStatus>
      break;
 8014d3c:	e00c      	b.n	8014d58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014d3e:	6839      	ldr	r1, [r7, #0]
 8014d40:	6878      	ldr	r0, [r7, #4]
 8014d42:	f000 f900 	bl	8014f46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d46:	4b07      	ldr	r3, [pc, #28]	@ (8014d64 <USBD_SetConfig+0x150>)
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7fe ff8e 	bl	8013c6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014d52:	2303      	movs	r3, #3
 8014d54:	73fb      	strb	r3, [r7, #15]
      break;
 8014d56:	bf00      	nop
  }

  return ret;
 8014d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	20005704 	.word	0x20005704

08014d68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	88db      	ldrh	r3, [r3, #6]
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d004      	beq.n	8014d84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014d7a:	6839      	ldr	r1, [r7, #0]
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f000 f8e2 	bl	8014f46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014d82:	e023      	b.n	8014dcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014d8a:	b2db      	uxtb	r3, r3
 8014d8c:	2b02      	cmp	r3, #2
 8014d8e:	dc02      	bgt.n	8014d96 <USBD_GetConfig+0x2e>
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	dc03      	bgt.n	8014d9c <USBD_GetConfig+0x34>
 8014d94:	e015      	b.n	8014dc2 <USBD_GetConfig+0x5a>
 8014d96:	2b03      	cmp	r3, #3
 8014d98:	d00b      	beq.n	8014db2 <USBD_GetConfig+0x4a>
 8014d9a:	e012      	b.n	8014dc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	3308      	adds	r3, #8
 8014da6:	2201      	movs	r2, #1
 8014da8:	4619      	mov	r1, r3
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f000 f948 	bl	8015040 <USBD_CtlSendData>
        break;
 8014db0:	e00c      	b.n	8014dcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	3304      	adds	r3, #4
 8014db6:	2201      	movs	r2, #1
 8014db8:	4619      	mov	r1, r3
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 f940 	bl	8015040 <USBD_CtlSendData>
        break;
 8014dc0:	e004      	b.n	8014dcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014dc2:	6839      	ldr	r1, [r7, #0]
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f000 f8be 	bl	8014f46 <USBD_CtlError>
        break;
 8014dca:	bf00      	nop
}
 8014dcc:	bf00      	nop
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}

08014dd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	3b01      	subs	r3, #1
 8014de8:	2b02      	cmp	r3, #2
 8014dea:	d81e      	bhi.n	8014e2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	88db      	ldrh	r3, [r3, #6]
 8014df0:	2b02      	cmp	r3, #2
 8014df2:	d004      	beq.n	8014dfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014df4:	6839      	ldr	r1, [r7, #0]
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f000 f8a5 	bl	8014f46 <USBD_CtlError>
        break;
 8014dfc:	e01a      	b.n	8014e34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2201      	movs	r2, #1
 8014e02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d005      	beq.n	8014e1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	f043 0202 	orr.w	r2, r3, #2
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	330c      	adds	r3, #12
 8014e1e:	2202      	movs	r2, #2
 8014e20:	4619      	mov	r1, r3
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f90c 	bl	8015040 <USBD_CtlSendData>
      break;
 8014e28:	e004      	b.n	8014e34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014e2a:	6839      	ldr	r1, [r7, #0]
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f000 f88a 	bl	8014f46 <USBD_CtlError>
      break;
 8014e32:	bf00      	nop
  }
}
 8014e34:	bf00      	nop
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	885b      	ldrh	r3, [r3, #2]
 8014e4a:	2b01      	cmp	r3, #1
 8014e4c:	d107      	bne.n	8014e5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2201      	movs	r2, #1
 8014e52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 f94c 	bl	80150f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014e5c:	e013      	b.n	8014e86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	885b      	ldrh	r3, [r3, #2]
 8014e62:	2b02      	cmp	r3, #2
 8014e64:	d10b      	bne.n	8014e7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	889b      	ldrh	r3, [r3, #4]
 8014e6a:	0a1b      	lsrs	r3, r3, #8
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	b2da      	uxtb	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f000 f93c 	bl	80150f4 <USBD_CtlSendStatus>
}
 8014e7c:	e003      	b.n	8014e86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014e7e:	6839      	ldr	r1, [r7, #0]
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f000 f860 	bl	8014f46 <USBD_CtlError>
}
 8014e86:	bf00      	nop
 8014e88:	3708      	adds	r7, #8
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}

08014e8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e8e:	b580      	push	{r7, lr}
 8014e90:	b082      	sub	sp, #8
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
 8014e96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e9e:	b2db      	uxtb	r3, r3
 8014ea0:	3b01      	subs	r3, #1
 8014ea2:	2b02      	cmp	r3, #2
 8014ea4:	d80b      	bhi.n	8014ebe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	885b      	ldrh	r3, [r3, #2]
 8014eaa:	2b01      	cmp	r3, #1
 8014eac:	d10c      	bne.n	8014ec8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 f91c 	bl	80150f4 <USBD_CtlSendStatus>
      }
      break;
 8014ebc:	e004      	b.n	8014ec8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014ebe:	6839      	ldr	r1, [r7, #0]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f000 f840 	bl	8014f46 <USBD_CtlError>
      break;
 8014ec6:	e000      	b.n	8014eca <USBD_ClrFeature+0x3c>
      break;
 8014ec8:	bf00      	nop
  }
}
 8014eca:	bf00      	nop
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b084      	sub	sp, #16
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	781a      	ldrb	r2, [r3, #0]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	3301      	adds	r3, #1
 8014eec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	781a      	ldrb	r2, [r3, #0]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f7ff fa40 	bl	8014382 <SWAPBYTE>
 8014f02:	4603      	mov	r3, r0
 8014f04:	461a      	mov	r2, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	3301      	adds	r3, #1
 8014f14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f7ff fa33 	bl	8014382 <SWAPBYTE>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	461a      	mov	r2, r3
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	3301      	adds	r3, #1
 8014f28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f7ff fa26 	bl	8014382 <SWAPBYTE>
 8014f36:	4603      	mov	r3, r0
 8014f38:	461a      	mov	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	80da      	strh	r2, [r3, #6]
}
 8014f3e:	bf00      	nop
 8014f40:	3710      	adds	r7, #16
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b082      	sub	sp, #8
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
 8014f4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f50:	2180      	movs	r1, #128	@ 0x80
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f004 f806 	bl	8018f64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f58:	2100      	movs	r1, #0
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f004 f802 	bl	8018f64 <USBD_LL_StallEP>
}
 8014f60:	bf00      	nop
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b086      	sub	sp, #24
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014f74:	2300      	movs	r3, #0
 8014f76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d042      	beq.n	8015004 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014f82:	6938      	ldr	r0, [r7, #16]
 8014f84:	f000 f842 	bl	801500c <USBD_GetLen>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	005b      	lsls	r3, r3, #1
 8014f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f92:	d808      	bhi.n	8014fa6 <USBD_GetString+0x3e>
 8014f94:	6938      	ldr	r0, [r7, #16]
 8014f96:	f000 f839 	bl	801500c <USBD_GetLen>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	005b      	lsls	r3, r3, #1
 8014fa2:	b29a      	uxth	r2, r3
 8014fa4:	e001      	b.n	8014faa <USBD_GetString+0x42>
 8014fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014fae:	7dfb      	ldrb	r3, [r7, #23]
 8014fb0:	68ba      	ldr	r2, [r7, #8]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	7812      	ldrb	r2, [r2, #0]
 8014fb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8014fba:	7dfb      	ldrb	r3, [r7, #23]
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014fc0:	7dfb      	ldrb	r3, [r7, #23]
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	4413      	add	r3, r2
 8014fc6:	2203      	movs	r2, #3
 8014fc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8014fca:	7dfb      	ldrb	r3, [r7, #23]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014fd0:	e013      	b.n	8014ffa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014fd2:	7dfb      	ldrb	r3, [r7, #23]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	4413      	add	r3, r2
 8014fd8:	693a      	ldr	r2, [r7, #16]
 8014fda:	7812      	ldrb	r2, [r2, #0]
 8014fdc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	613b      	str	r3, [r7, #16]
    idx++;
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014fea:	7dfb      	ldrb	r3, [r7, #23]
 8014fec:	68ba      	ldr	r2, [r7, #8]
 8014fee:	4413      	add	r3, r2
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	701a      	strb	r2, [r3, #0]
    idx++;
 8014ff4:	7dfb      	ldrb	r3, [r7, #23]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d1e7      	bne.n	8014fd2 <USBD_GetString+0x6a>
 8015002:	e000      	b.n	8015006 <USBD_GetString+0x9e>
    return;
 8015004:	bf00      	nop
  }
}
 8015006:	3718      	adds	r7, #24
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801500c:	b480      	push	{r7}
 801500e:	b085      	sub	sp, #20
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015014:	2300      	movs	r3, #0
 8015016:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801501c:	e005      	b.n	801502a <USBD_GetLen+0x1e>
  {
    len++;
 801501e:	7bfb      	ldrb	r3, [r7, #15]
 8015020:	3301      	adds	r3, #1
 8015022:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	3301      	adds	r3, #1
 8015028:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1f5      	bne.n	801501e <USBD_GetLen+0x12>
  }

  return len;
 8015032:	7bfb      	ldrb	r3, [r7, #15]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3714      	adds	r7, #20
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr

08015040 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b084      	sub	sp, #16
 8015044:	af00      	add	r7, sp, #0
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	60b9      	str	r1, [r7, #8]
 801504a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	2202      	movs	r2, #2
 8015050:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	68ba      	ldr	r2, [r7, #8]
 8015064:	2100      	movs	r1, #0
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f004 f805 	bl	8019076 <USBD_LL_Transmit>

  return USBD_OK;
 801506c:	2300      	movs	r3, #0
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b084      	sub	sp, #16
 801507a:	af00      	add	r7, sp, #0
 801507c:	60f8      	str	r0, [r7, #12]
 801507e:	60b9      	str	r1, [r7, #8]
 8015080:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	68ba      	ldr	r2, [r7, #8]
 8015086:	2100      	movs	r1, #0
 8015088:	68f8      	ldr	r0, [r7, #12]
 801508a:	f003 fff4 	bl	8019076 <USBD_LL_Transmit>

  return USBD_OK;
 801508e:	2300      	movs	r3, #0
}
 8015090:	4618      	mov	r0, r3
 8015092:	3710      	adds	r7, #16
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}

08015098 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	60f8      	str	r0, [r7, #12]
 80150a0:	60b9      	str	r1, [r7, #8]
 80150a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2203      	movs	r2, #3
 80150a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	68ba      	ldr	r2, [r7, #8]
 80150c0:	2100      	movs	r1, #0
 80150c2:	68f8      	ldr	r0, [r7, #12]
 80150c4:	f003 fff8 	bl	80190b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80150c8:	2300      	movs	r3, #0
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	3710      	adds	r7, #16
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd80      	pop	{r7, pc}

080150d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80150d2:	b580      	push	{r7, lr}
 80150d4:	b084      	sub	sp, #16
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	60f8      	str	r0, [r7, #12]
 80150da:	60b9      	str	r1, [r7, #8]
 80150dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	68ba      	ldr	r2, [r7, #8]
 80150e2:	2100      	movs	r1, #0
 80150e4:	68f8      	ldr	r0, [r7, #12]
 80150e6:	f003 ffe7 	bl	80190b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80150ea:	2300      	movs	r3, #0
}
 80150ec:	4618      	mov	r0, r3
 80150ee:	3710      	adds	r7, #16
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}

080150f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2204      	movs	r2, #4
 8015100:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015104:	2300      	movs	r3, #0
 8015106:	2200      	movs	r2, #0
 8015108:	2100      	movs	r1, #0
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f003 ffb3 	bl	8019076 <USBD_LL_Transmit>

  return USBD_OK;
 8015110:	2300      	movs	r3, #0
}
 8015112:	4618      	mov	r0, r3
 8015114:	3708      	adds	r7, #8
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801511a:	b580      	push	{r7, lr}
 801511c:	b082      	sub	sp, #8
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2205      	movs	r2, #5
 8015126:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801512a:	2300      	movs	r3, #0
 801512c:	2200      	movs	r2, #0
 801512e:	2100      	movs	r1, #0
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f003 ffc1 	bl	80190b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <__NVIC_SetPriority>:
{
 8015140:	b480      	push	{r7}
 8015142:	b083      	sub	sp, #12
 8015144:	af00      	add	r7, sp, #0
 8015146:	4603      	mov	r3, r0
 8015148:	6039      	str	r1, [r7, #0]
 801514a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801514c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015150:	2b00      	cmp	r3, #0
 8015152:	db0a      	blt.n	801516a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	b2da      	uxtb	r2, r3
 8015158:	490c      	ldr	r1, [pc, #48]	@ (801518c <__NVIC_SetPriority+0x4c>)
 801515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801515e:	0112      	lsls	r2, r2, #4
 8015160:	b2d2      	uxtb	r2, r2
 8015162:	440b      	add	r3, r1
 8015164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015168:	e00a      	b.n	8015180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	b2da      	uxtb	r2, r3
 801516e:	4908      	ldr	r1, [pc, #32]	@ (8015190 <__NVIC_SetPriority+0x50>)
 8015170:	79fb      	ldrb	r3, [r7, #7]
 8015172:	f003 030f 	and.w	r3, r3, #15
 8015176:	3b04      	subs	r3, #4
 8015178:	0112      	lsls	r2, r2, #4
 801517a:	b2d2      	uxtb	r2, r2
 801517c:	440b      	add	r3, r1
 801517e:	761a      	strb	r2, [r3, #24]
}
 8015180:	bf00      	nop
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr
 801518c:	e000e100 	.word	0xe000e100
 8015190:	e000ed00 	.word	0xe000ed00

08015194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015194:	b580      	push	{r7, lr}
 8015196:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015198:	4b05      	ldr	r3, [pc, #20]	@ (80151b0 <SysTick_Handler+0x1c>)
 801519a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801519c:	f001 feec 	bl	8016f78 <xTaskGetSchedulerState>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d001      	beq.n	80151aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80151a6:	f002 ff27 	bl	8017ff8 <xPortSysTickHandler>
  }
}
 80151aa:	bf00      	nop
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	e000e010 	.word	0xe000e010

080151b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80151b4:	b580      	push	{r7, lr}
 80151b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80151b8:	2100      	movs	r1, #0
 80151ba:	f06f 0004 	mvn.w	r0, #4
 80151be:	f7ff ffbf 	bl	8015140 <__NVIC_SetPriority>
#endif
}
 80151c2:	bf00      	nop
 80151c4:	bd80      	pop	{r7, pc}
	...

080151c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80151c8:	b480      	push	{r7}
 80151ca:	b083      	sub	sp, #12
 80151cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80151ce:	f3ef 8305 	mrs	r3, IPSR
 80151d2:	603b      	str	r3, [r7, #0]
  return(result);
 80151d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d003      	beq.n	80151e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80151da:	f06f 0305 	mvn.w	r3, #5
 80151de:	607b      	str	r3, [r7, #4]
 80151e0:	e00c      	b.n	80151fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80151e2:	4b0a      	ldr	r3, [pc, #40]	@ (801520c <osKernelInitialize+0x44>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d105      	bne.n	80151f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80151ea:	4b08      	ldr	r3, [pc, #32]	@ (801520c <osKernelInitialize+0x44>)
 80151ec:	2201      	movs	r2, #1
 80151ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	607b      	str	r3, [r7, #4]
 80151f4:	e002      	b.n	80151fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80151f6:	f04f 33ff 	mov.w	r3, #4294967295
 80151fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80151fc:	687b      	ldr	r3, [r7, #4]
}
 80151fe:	4618      	mov	r0, r3
 8015200:	370c      	adds	r7, #12
 8015202:	46bd      	mov	sp, r7
 8015204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015208:	4770      	bx	lr
 801520a:	bf00      	nop
 801520c:	20005708 	.word	0x20005708

08015210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015216:	f3ef 8305 	mrs	r3, IPSR
 801521a:	603b      	str	r3, [r7, #0]
  return(result);
 801521c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801521e:	2b00      	cmp	r3, #0
 8015220:	d003      	beq.n	801522a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015222:	f06f 0305 	mvn.w	r3, #5
 8015226:	607b      	str	r3, [r7, #4]
 8015228:	e010      	b.n	801524c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801522a:	4b0b      	ldr	r3, [pc, #44]	@ (8015258 <osKernelStart+0x48>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b01      	cmp	r3, #1
 8015230:	d109      	bne.n	8015246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015232:	f7ff ffbf 	bl	80151b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015236:	4b08      	ldr	r3, [pc, #32]	@ (8015258 <osKernelStart+0x48>)
 8015238:	2202      	movs	r2, #2
 801523a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801523c:	f001 fa28 	bl	8016690 <vTaskStartScheduler>
      stat = osOK;
 8015240:	2300      	movs	r3, #0
 8015242:	607b      	str	r3, [r7, #4]
 8015244:	e002      	b.n	801524c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015246:	f04f 33ff 	mov.w	r3, #4294967295
 801524a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801524c:	687b      	ldr	r3, [r7, #4]
}
 801524e:	4618      	mov	r0, r3
 8015250:	3708      	adds	r7, #8
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	20005708 	.word	0x20005708

0801525c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801525c:	b580      	push	{r7, lr}
 801525e:	b08e      	sub	sp, #56	@ 0x38
 8015260:	af04      	add	r7, sp, #16
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015268:	2300      	movs	r3, #0
 801526a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801526c:	f3ef 8305 	mrs	r3, IPSR
 8015270:	617b      	str	r3, [r7, #20]
  return(result);
 8015272:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015274:	2b00      	cmp	r3, #0
 8015276:	d17e      	bne.n	8015376 <osThreadNew+0x11a>
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d07b      	beq.n	8015376 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801527e:	2380      	movs	r3, #128	@ 0x80
 8015280:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015282:	2318      	movs	r3, #24
 8015284:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015286:	2300      	movs	r3, #0
 8015288:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 801528a:	f04f 33ff 	mov.w	r3, #4294967295
 801528e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d045      	beq.n	8015322 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d002      	beq.n	80152a4 <osThreadNew+0x48>
        name = attr->name;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	699b      	ldr	r3, [r3, #24]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d002      	beq.n	80152b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	699b      	ldr	r3, [r3, #24]
 80152b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d008      	beq.n	80152ca <osThreadNew+0x6e>
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	2b38      	cmp	r3, #56	@ 0x38
 80152bc:	d805      	bhi.n	80152ca <osThreadNew+0x6e>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	f003 0301 	and.w	r3, r3, #1
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d001      	beq.n	80152ce <osThreadNew+0x72>
        return (NULL);
 80152ca:	2300      	movs	r3, #0
 80152cc:	e054      	b.n	8015378 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	695b      	ldr	r3, [r3, #20]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d003      	beq.n	80152de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	695b      	ldr	r3, [r3, #20]
 80152da:	089b      	lsrs	r3, r3, #2
 80152dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d00e      	beq.n	8015304 <osThreadNew+0xa8>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	68db      	ldr	r3, [r3, #12]
 80152ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80152ec:	d90a      	bls.n	8015304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d006      	beq.n	8015304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	695b      	ldr	r3, [r3, #20]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d002      	beq.n	8015304 <osThreadNew+0xa8>
        mem = 1;
 80152fe:	2301      	movs	r3, #1
 8015300:	61bb      	str	r3, [r7, #24]
 8015302:	e010      	b.n	8015326 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	689b      	ldr	r3, [r3, #8]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d10c      	bne.n	8015326 <osThreadNew+0xca>
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d108      	bne.n	8015326 <osThreadNew+0xca>
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	691b      	ldr	r3, [r3, #16]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d104      	bne.n	8015326 <osThreadNew+0xca>
          mem = 0;
 801531c:	2300      	movs	r3, #0
 801531e:	61bb      	str	r3, [r7, #24]
 8015320:	e001      	b.n	8015326 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015322:	2300      	movs	r3, #0
 8015324:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	2b01      	cmp	r3, #1
 801532a:	d110      	bne.n	801534e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015334:	9202      	str	r2, [sp, #8]
 8015336:	9301      	str	r3, [sp, #4]
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	6a3a      	ldr	r2, [r7, #32]
 8015340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f000 ffb0 	bl	80162a8 <xTaskCreateStatic>
 8015348:	4603      	mov	r3, r0
 801534a:	613b      	str	r3, [r7, #16]
 801534c:	e013      	b.n	8015376 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d110      	bne.n	8015376 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015354:	6a3b      	ldr	r3, [r7, #32]
 8015356:	b29a      	uxth	r2, r3
 8015358:	f107 0310 	add.w	r3, r7, #16
 801535c:	9301      	str	r3, [sp, #4]
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015366:	68f8      	ldr	r0, [r7, #12]
 8015368:	f000 fffe 	bl	8016368 <xTaskCreate>
 801536c:	4603      	mov	r3, r0
 801536e:	2b01      	cmp	r3, #1
 8015370:	d001      	beq.n	8015376 <osThreadNew+0x11a>
            hTask = NULL;
 8015372:	2300      	movs	r3, #0
 8015374:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015376:	693b      	ldr	r3, [r7, #16]
}
 8015378:	4618      	mov	r0, r3
 801537a:	3728      	adds	r7, #40	@ 0x28
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015388:	f3ef 8305 	mrs	r3, IPSR
 801538c:	60bb      	str	r3, [r7, #8]
  return(result);
 801538e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015390:	2b00      	cmp	r3, #0
 8015392:	d003      	beq.n	801539c <osDelay+0x1c>
    stat = osErrorISR;
 8015394:	f06f 0305 	mvn.w	r3, #5
 8015398:	60fb      	str	r3, [r7, #12]
 801539a:	e007      	b.n	80153ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801539c:	2300      	movs	r3, #0
 801539e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d002      	beq.n	80153ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f001 f93c 	bl	8016624 <vTaskDelay>
    }
  }

  return (stat);
 80153ac:	68fb      	ldr	r3, [r7, #12]
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3710      	adds	r7, #16
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
	...

080153b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80153b8:	b480      	push	{r7}
 80153ba:	b085      	sub	sp, #20
 80153bc:	af00      	add	r7, sp, #0
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	4a07      	ldr	r2, [pc, #28]	@ (80153e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80153c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	4a06      	ldr	r2, [pc, #24]	@ (80153e8 <vApplicationGetIdleTaskMemory+0x30>)
 80153ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2280      	movs	r2, #128	@ 0x80
 80153d4:	601a      	str	r2, [r3, #0]
}
 80153d6:	bf00      	nop
 80153d8:	3714      	adds	r7, #20
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr
 80153e2:	bf00      	nop
 80153e4:	2000570c 	.word	0x2000570c
 80153e8:	200057b4 	.word	0x200057b4

080153ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80153ec:	b480      	push	{r7}
 80153ee:	b085      	sub	sp, #20
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	60b9      	str	r1, [r7, #8]
 80153f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	4a07      	ldr	r2, [pc, #28]	@ (8015418 <vApplicationGetTimerTaskMemory+0x2c>)
 80153fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	4a06      	ldr	r2, [pc, #24]	@ (801541c <vApplicationGetTimerTaskMemory+0x30>)
 8015402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801540a:	601a      	str	r2, [r3, #0]
}
 801540c:	bf00      	nop
 801540e:	3714      	adds	r7, #20
 8015410:	46bd      	mov	sp, r7
 8015412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015416:	4770      	bx	lr
 8015418:	200059b4 	.word	0x200059b4
 801541c:	20005a5c 	.word	0x20005a5c

08015420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015420:	b480      	push	{r7}
 8015422:	b083      	sub	sp, #12
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f103 0208 	add.w	r2, r3, #8
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	f04f 32ff 	mov.w	r2, #4294967295
 8015438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f103 0208 	add.w	r2, r3, #8
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f103 0208 	add.w	r2, r3, #8
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2200      	movs	r2, #0
 8015452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015454:	bf00      	nop
 8015456:	370c      	adds	r7, #12
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2200      	movs	r2, #0
 801546c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801546e:	bf00      	nop
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr

0801547a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801547a:	b480      	push	{r7}
 801547c:	b085      	sub	sp, #20
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
 8015482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	68fa      	ldr	r2, [r7, #12]
 801548e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	689a      	ldr	r2, [r3, #8]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	689b      	ldr	r3, [r3, #8]
 801549c:	683a      	ldr	r2, [r7, #0]
 801549e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	683a      	ldr	r2, [r7, #0]
 80154a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	1c5a      	adds	r2, r3, #1
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	601a      	str	r2, [r3, #0]
}
 80154b6:	bf00      	nop
 80154b8:	3714      	adds	r7, #20
 80154ba:	46bd      	mov	sp, r7
 80154bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c0:	4770      	bx	lr

080154c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80154c2:	b480      	push	{r7}
 80154c4:	b085      	sub	sp, #20
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	6078      	str	r0, [r7, #4]
 80154ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154d8:	d103      	bne.n	80154e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	691b      	ldr	r3, [r3, #16]
 80154de:	60fb      	str	r3, [r7, #12]
 80154e0:	e00c      	b.n	80154fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	3308      	adds	r3, #8
 80154e6:	60fb      	str	r3, [r7, #12]
 80154e8:	e002      	b.n	80154f0 <vListInsert+0x2e>
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	60fb      	str	r3, [r7, #12]
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	68ba      	ldr	r2, [r7, #8]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d2f6      	bcs.n	80154ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	685a      	ldr	r2, [r3, #4]
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	683a      	ldr	r2, [r7, #0]
 801550a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	68fa      	ldr	r2, [r7, #12]
 8015510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	687a      	ldr	r2, [r7, #4]
 801551c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	1c5a      	adds	r2, r3, #1
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	601a      	str	r2, [r3, #0]
}
 8015528:	bf00      	nop
 801552a:	3714      	adds	r7, #20
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015534:	b480      	push	{r7}
 8015536:	b085      	sub	sp, #20
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	691b      	ldr	r3, [r3, #16]
 8015540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	6892      	ldr	r2, [r2, #8]
 801554a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	689b      	ldr	r3, [r3, #8]
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	6852      	ldr	r2, [r2, #4]
 8015554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	429a      	cmp	r2, r3
 801555e:	d103      	bne.n	8015568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	689a      	ldr	r2, [r3, #8]
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2200      	movs	r2, #0
 801556c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	1e5a      	subs	r2, r3, #1
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
}
 801557c:	4618      	mov	r0, r3
 801557e:	3714      	adds	r7, #20
 8015580:	46bd      	mov	sp, r7
 8015582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015586:	4770      	bx	lr

08015588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b084      	sub	sp, #16
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d10b      	bne.n	80155b4 <xQueueGenericReset+0x2c>
	__asm volatile
 801559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155a0:	f383 8811 	msr	BASEPRI, r3
 80155a4:	f3bf 8f6f 	isb	sy
 80155a8:	f3bf 8f4f 	dsb	sy
 80155ac:	60bb      	str	r3, [r7, #8]
}
 80155ae:	bf00      	nop
 80155b0:	bf00      	nop
 80155b2:	e7fd      	b.n	80155b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80155b4:	f002 fc90 	bl	8017ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	681a      	ldr	r2, [r3, #0]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155c0:	68f9      	ldr	r1, [r7, #12]
 80155c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80155c4:	fb01 f303 	mul.w	r3, r1, r3
 80155c8:	441a      	add	r2, r3
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2200      	movs	r2, #0
 80155d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681a      	ldr	r2, [r3, #0]
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155e4:	3b01      	subs	r3, #1
 80155e6:	68f9      	ldr	r1, [r7, #12]
 80155e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80155ea:	fb01 f303 	mul.w	r3, r1, r3
 80155ee:	441a      	add	r2, r3
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	22ff      	movs	r2, #255	@ 0xff
 80155f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	22ff      	movs	r2, #255	@ 0xff
 8015600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d114      	bne.n	8015634 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	691b      	ldr	r3, [r3, #16]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d01a      	beq.n	8015648 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	3310      	adds	r3, #16
 8015616:	4618      	mov	r0, r3
 8015618:	f001 fad8 	bl	8016bcc <xTaskRemoveFromEventList>
 801561c:	4603      	mov	r3, r0
 801561e:	2b00      	cmp	r3, #0
 8015620:	d012      	beq.n	8015648 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015622:	4b0d      	ldr	r3, [pc, #52]	@ (8015658 <xQueueGenericReset+0xd0>)
 8015624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015628:	601a      	str	r2, [r3, #0]
 801562a:	f3bf 8f4f 	dsb	sy
 801562e:	f3bf 8f6f 	isb	sy
 8015632:	e009      	b.n	8015648 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	3310      	adds	r3, #16
 8015638:	4618      	mov	r0, r3
 801563a:	f7ff fef1 	bl	8015420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	3324      	adds	r3, #36	@ 0x24
 8015642:	4618      	mov	r0, r3
 8015644:	f7ff feec 	bl	8015420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015648:	f002 fc78 	bl	8017f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801564c:	2301      	movs	r3, #1
}
 801564e:	4618      	mov	r0, r3
 8015650:	3710      	adds	r7, #16
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}
 8015656:	bf00      	nop
 8015658:	e000ed04 	.word	0xe000ed04

0801565c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801565c:	b580      	push	{r7, lr}
 801565e:	b08e      	sub	sp, #56	@ 0x38
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10b      	bne.n	8015688 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8015670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015674:	f383 8811 	msr	BASEPRI, r3
 8015678:	f3bf 8f6f 	isb	sy
 801567c:	f3bf 8f4f 	dsb	sy
 8015680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015682:	bf00      	nop
 8015684:	bf00      	nop
 8015686:	e7fd      	b.n	8015684 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d10b      	bne.n	80156a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015692:	f383 8811 	msr	BASEPRI, r3
 8015696:	f3bf 8f6f 	isb	sy
 801569a:	f3bf 8f4f 	dsb	sy
 801569e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80156a0:	bf00      	nop
 80156a2:	bf00      	nop
 80156a4:	e7fd      	b.n	80156a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d002      	beq.n	80156b2 <xQueueGenericCreateStatic+0x56>
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <xQueueGenericCreateStatic+0x5a>
 80156b2:	2301      	movs	r3, #1
 80156b4:	e000      	b.n	80156b8 <xQueueGenericCreateStatic+0x5c>
 80156b6:	2300      	movs	r3, #0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d10b      	bne.n	80156d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80156bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156c0:	f383 8811 	msr	BASEPRI, r3
 80156c4:	f3bf 8f6f 	isb	sy
 80156c8:	f3bf 8f4f 	dsb	sy
 80156cc:	623b      	str	r3, [r7, #32]
}
 80156ce:	bf00      	nop
 80156d0:	bf00      	nop
 80156d2:	e7fd      	b.n	80156d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d102      	bne.n	80156e0 <xQueueGenericCreateStatic+0x84>
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d101      	bne.n	80156e4 <xQueueGenericCreateStatic+0x88>
 80156e0:	2301      	movs	r3, #1
 80156e2:	e000      	b.n	80156e6 <xQueueGenericCreateStatic+0x8a>
 80156e4:	2300      	movs	r3, #0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d10b      	bne.n	8015702 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80156ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156ee:	f383 8811 	msr	BASEPRI, r3
 80156f2:	f3bf 8f6f 	isb	sy
 80156f6:	f3bf 8f4f 	dsb	sy
 80156fa:	61fb      	str	r3, [r7, #28]
}
 80156fc:	bf00      	nop
 80156fe:	bf00      	nop
 8015700:	e7fd      	b.n	80156fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015702:	2350      	movs	r3, #80	@ 0x50
 8015704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	2b50      	cmp	r3, #80	@ 0x50
 801570a:	d00b      	beq.n	8015724 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015710:	f383 8811 	msr	BASEPRI, r3
 8015714:	f3bf 8f6f 	isb	sy
 8015718:	f3bf 8f4f 	dsb	sy
 801571c:	61bb      	str	r3, [r7, #24]
}
 801571e:	bf00      	nop
 8015720:	bf00      	nop
 8015722:	e7fd      	b.n	8015720 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015724:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801572c:	2b00      	cmp	r3, #0
 801572e:	d00d      	beq.n	801574c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015732:	2201      	movs	r2, #1
 8015734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015738:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	4613      	mov	r3, r2
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	68b9      	ldr	r1, [r7, #8]
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f000 f840 	bl	80157cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801574e:	4618      	mov	r0, r3
 8015750:	3730      	adds	r7, #48	@ 0x30
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}

08015756 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015756:	b580      	push	{r7, lr}
 8015758:	b08a      	sub	sp, #40	@ 0x28
 801575a:	af02      	add	r7, sp, #8
 801575c:	60f8      	str	r0, [r7, #12]
 801575e:	60b9      	str	r1, [r7, #8]
 8015760:	4613      	mov	r3, r2
 8015762:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d10b      	bne.n	8015782 <xQueueGenericCreate+0x2c>
	__asm volatile
 801576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801576e:	f383 8811 	msr	BASEPRI, r3
 8015772:	f3bf 8f6f 	isb	sy
 8015776:	f3bf 8f4f 	dsb	sy
 801577a:	613b      	str	r3, [r7, #16]
}
 801577c:	bf00      	nop
 801577e:	bf00      	nop
 8015780:	e7fd      	b.n	801577e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	68ba      	ldr	r2, [r7, #8]
 8015786:	fb02 f303 	mul.w	r3, r2, r3
 801578a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	3350      	adds	r3, #80	@ 0x50
 8015790:	4618      	mov	r0, r3
 8015792:	f002 fcc3 	bl	801811c <pvPortMalloc>
 8015796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d011      	beq.n	80157c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	3350      	adds	r3, #80	@ 0x50
 80157a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80157a8:	69bb      	ldr	r3, [r7, #24]
 80157aa:	2200      	movs	r2, #0
 80157ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80157b0:	79fa      	ldrb	r2, [r7, #7]
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	9300      	str	r3, [sp, #0]
 80157b6:	4613      	mov	r3, r2
 80157b8:	697a      	ldr	r2, [r7, #20]
 80157ba:	68b9      	ldr	r1, [r7, #8]
 80157bc:	68f8      	ldr	r0, [r7, #12]
 80157be:	f000 f805 	bl	80157cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80157c2:	69bb      	ldr	r3, [r7, #24]
	}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3720      	adds	r7, #32
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}

080157cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d103      	bne.n	80157e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80157e0:	69bb      	ldr	r3, [r7, #24]
 80157e2:	69ba      	ldr	r2, [r7, #24]
 80157e4:	601a      	str	r2, [r3, #0]
 80157e6:	e002      	b.n	80157ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	687a      	ldr	r2, [r7, #4]
 80157ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	68fa      	ldr	r2, [r7, #12]
 80157f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	68ba      	ldr	r2, [r7, #8]
 80157f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80157fa:	2101      	movs	r1, #1
 80157fc:	69b8      	ldr	r0, [r7, #24]
 80157fe:	f7ff fec3 	bl	8015588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	78fa      	ldrb	r2, [r7, #3]
 8015806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801580a:	bf00      	nop
 801580c:	3710      	adds	r7, #16
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}

08015812 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015812:	b580      	push	{r7, lr}
 8015814:	b082      	sub	sp, #8
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00e      	beq.n	801583e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2200      	movs	r2, #0
 8015824:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2200      	movs	r2, #0
 801582a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015832:	2300      	movs	r3, #0
 8015834:	2200      	movs	r2, #0
 8015836:	2100      	movs	r1, #0
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f000 f81d 	bl	8015878 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801583e:	bf00      	nop
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015846:	b580      	push	{r7, lr}
 8015848:	b086      	sub	sp, #24
 801584a:	af00      	add	r7, sp, #0
 801584c:	4603      	mov	r3, r0
 801584e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015850:	2301      	movs	r3, #1
 8015852:	617b      	str	r3, [r7, #20]
 8015854:	2300      	movs	r3, #0
 8015856:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015858:	79fb      	ldrb	r3, [r7, #7]
 801585a:	461a      	mov	r2, r3
 801585c:	6939      	ldr	r1, [r7, #16]
 801585e:	6978      	ldr	r0, [r7, #20]
 8015860:	f7ff ff79 	bl	8015756 <xQueueGenericCreate>
 8015864:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f7ff ffd3 	bl	8015812 <prvInitialiseMutex>

		return xNewQueue;
 801586c:	68fb      	ldr	r3, [r7, #12]
	}
 801586e:	4618      	mov	r0, r3
 8015870:	3718      	adds	r7, #24
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
	...

08015878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08e      	sub	sp, #56	@ 0x38
 801587c:	af00      	add	r7, sp, #0
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
 8015884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015886:	2300      	movs	r3, #0
 8015888:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015890:	2b00      	cmp	r3, #0
 8015892:	d10b      	bne.n	80158ac <xQueueGenericSend+0x34>
	__asm volatile
 8015894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015898:	f383 8811 	msr	BASEPRI, r3
 801589c:	f3bf 8f6f 	isb	sy
 80158a0:	f3bf 8f4f 	dsb	sy
 80158a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80158a6:	bf00      	nop
 80158a8:	bf00      	nop
 80158aa:	e7fd      	b.n	80158a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d103      	bne.n	80158ba <xQueueGenericSend+0x42>
 80158b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d101      	bne.n	80158be <xQueueGenericSend+0x46>
 80158ba:	2301      	movs	r3, #1
 80158bc:	e000      	b.n	80158c0 <xQueueGenericSend+0x48>
 80158be:	2300      	movs	r3, #0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d10b      	bne.n	80158dc <xQueueGenericSend+0x64>
	__asm volatile
 80158c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158c8:	f383 8811 	msr	BASEPRI, r3
 80158cc:	f3bf 8f6f 	isb	sy
 80158d0:	f3bf 8f4f 	dsb	sy
 80158d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80158d6:	bf00      	nop
 80158d8:	bf00      	nop
 80158da:	e7fd      	b.n	80158d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	2b02      	cmp	r3, #2
 80158e0:	d103      	bne.n	80158ea <xQueueGenericSend+0x72>
 80158e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d101      	bne.n	80158ee <xQueueGenericSend+0x76>
 80158ea:	2301      	movs	r3, #1
 80158ec:	e000      	b.n	80158f0 <xQueueGenericSend+0x78>
 80158ee:	2300      	movs	r3, #0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d10b      	bne.n	801590c <xQueueGenericSend+0x94>
	__asm volatile
 80158f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158f8:	f383 8811 	msr	BASEPRI, r3
 80158fc:	f3bf 8f6f 	isb	sy
 8015900:	f3bf 8f4f 	dsb	sy
 8015904:	623b      	str	r3, [r7, #32]
}
 8015906:	bf00      	nop
 8015908:	bf00      	nop
 801590a:	e7fd      	b.n	8015908 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801590c:	f001 fb34 	bl	8016f78 <xTaskGetSchedulerState>
 8015910:	4603      	mov	r3, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d102      	bne.n	801591c <xQueueGenericSend+0xa4>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d101      	bne.n	8015920 <xQueueGenericSend+0xa8>
 801591c:	2301      	movs	r3, #1
 801591e:	e000      	b.n	8015922 <xQueueGenericSend+0xaa>
 8015920:	2300      	movs	r3, #0
 8015922:	2b00      	cmp	r3, #0
 8015924:	d10b      	bne.n	801593e <xQueueGenericSend+0xc6>
	__asm volatile
 8015926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801592a:	f383 8811 	msr	BASEPRI, r3
 801592e:	f3bf 8f6f 	isb	sy
 8015932:	f3bf 8f4f 	dsb	sy
 8015936:	61fb      	str	r3, [r7, #28]
}
 8015938:	bf00      	nop
 801593a:	bf00      	nop
 801593c:	e7fd      	b.n	801593a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801593e:	f002 facb 	bl	8017ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801594a:	429a      	cmp	r2, r3
 801594c:	d302      	bcc.n	8015954 <xQueueGenericSend+0xdc>
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	2b02      	cmp	r3, #2
 8015952:	d129      	bne.n	80159a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015954:	683a      	ldr	r2, [r7, #0]
 8015956:	68b9      	ldr	r1, [r7, #8]
 8015958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801595a:	f000 fb37 	bl	8015fcc <prvCopyDataToQueue>
 801595e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015964:	2b00      	cmp	r3, #0
 8015966:	d010      	beq.n	801598a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801596a:	3324      	adds	r3, #36	@ 0x24
 801596c:	4618      	mov	r0, r3
 801596e:	f001 f92d 	bl	8016bcc <xTaskRemoveFromEventList>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d013      	beq.n	80159a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015978:	4b3f      	ldr	r3, [pc, #252]	@ (8015a78 <xQueueGenericSend+0x200>)
 801597a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801597e:	601a      	str	r2, [r3, #0]
 8015980:	f3bf 8f4f 	dsb	sy
 8015984:	f3bf 8f6f 	isb	sy
 8015988:	e00a      	b.n	80159a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801598c:	2b00      	cmp	r3, #0
 801598e:	d007      	beq.n	80159a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015990:	4b39      	ldr	r3, [pc, #228]	@ (8015a78 <xQueueGenericSend+0x200>)
 8015992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015996:	601a      	str	r2, [r3, #0]
 8015998:	f3bf 8f4f 	dsb	sy
 801599c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80159a0:	f002 facc 	bl	8017f3c <vPortExitCritical>
				return pdPASS;
 80159a4:	2301      	movs	r3, #1
 80159a6:	e063      	b.n	8015a70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d103      	bne.n	80159b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80159ae:	f002 fac5 	bl	8017f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80159b2:	2300      	movs	r3, #0
 80159b4:	e05c      	b.n	8015a70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80159b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d106      	bne.n	80159ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80159bc:	f107 0314 	add.w	r3, r7, #20
 80159c0:	4618      	mov	r0, r3
 80159c2:	f001 f967 	bl	8016c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159c6:	2301      	movs	r3, #1
 80159c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80159ca:	f002 fab7 	bl	8017f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80159ce:	f000 fecf 	bl	8016770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80159d2:	f002 fa81 	bl	8017ed8 <vPortEnterCritical>
 80159d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80159dc:	b25b      	sxtb	r3, r3
 80159de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159e2:	d103      	bne.n	80159ec <xQueueGenericSend+0x174>
 80159e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e6:	2200      	movs	r2, #0
 80159e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80159ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80159f2:	b25b      	sxtb	r3, r3
 80159f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159f8:	d103      	bne.n	8015a02 <xQueueGenericSend+0x18a>
 80159fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159fc:	2200      	movs	r2, #0
 80159fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015a02:	f002 fa9b 	bl	8017f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a06:	1d3a      	adds	r2, r7, #4
 8015a08:	f107 0314 	add.w	r3, r7, #20
 8015a0c:	4611      	mov	r1, r2
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f001 f956 	bl	8016cc0 <xTaskCheckForTimeOut>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d124      	bne.n	8015a64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015a1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a1c:	f000 fbce 	bl	80161bc <prvIsQueueFull>
 8015a20:	4603      	mov	r3, r0
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d018      	beq.n	8015a58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a28:	3310      	adds	r3, #16
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	4611      	mov	r1, r2
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f001 f87a 	bl	8016b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a36:	f000 fb59 	bl	80160ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015a3a:	f000 fea7 	bl	801678c <xTaskResumeAll>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	f47f af7c 	bne.w	801593e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8015a46:	4b0c      	ldr	r3, [pc, #48]	@ (8015a78 <xQueueGenericSend+0x200>)
 8015a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a4c:	601a      	str	r2, [r3, #0]
 8015a4e:	f3bf 8f4f 	dsb	sy
 8015a52:	f3bf 8f6f 	isb	sy
 8015a56:	e772      	b.n	801593e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a5a:	f000 fb47 	bl	80160ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a5e:	f000 fe95 	bl	801678c <xTaskResumeAll>
 8015a62:	e76c      	b.n	801593e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a66:	f000 fb41 	bl	80160ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a6a:	f000 fe8f 	bl	801678c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3738      	adds	r7, #56	@ 0x38
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	e000ed04 	.word	0xe000ed04

08015a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b090      	sub	sp, #64	@ 0x40
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	607a      	str	r2, [r7, #4]
 8015a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8015a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d10b      	bne.n	8015aac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a98:	f383 8811 	msr	BASEPRI, r3
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	f3bf 8f4f 	dsb	sy
 8015aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015aa6:	bf00      	nop
 8015aa8:	bf00      	nop
 8015aaa:	e7fd      	b.n	8015aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d103      	bne.n	8015aba <xQueueGenericSendFromISR+0x3e>
 8015ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d101      	bne.n	8015abe <xQueueGenericSendFromISR+0x42>
 8015aba:	2301      	movs	r3, #1
 8015abc:	e000      	b.n	8015ac0 <xQueueGenericSendFromISR+0x44>
 8015abe:	2300      	movs	r3, #0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d10b      	bne.n	8015adc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8015ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ac8:	f383 8811 	msr	BASEPRI, r3
 8015acc:	f3bf 8f6f 	isb	sy
 8015ad0:	f3bf 8f4f 	dsb	sy
 8015ad4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015ad6:	bf00      	nop
 8015ad8:	bf00      	nop
 8015ada:	e7fd      	b.n	8015ad8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	2b02      	cmp	r3, #2
 8015ae0:	d103      	bne.n	8015aea <xQueueGenericSendFromISR+0x6e>
 8015ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ae6:	2b01      	cmp	r3, #1
 8015ae8:	d101      	bne.n	8015aee <xQueueGenericSendFromISR+0x72>
 8015aea:	2301      	movs	r3, #1
 8015aec:	e000      	b.n	8015af0 <xQueueGenericSendFromISR+0x74>
 8015aee:	2300      	movs	r3, #0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d10b      	bne.n	8015b0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8015af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015af8:	f383 8811 	msr	BASEPRI, r3
 8015afc:	f3bf 8f6f 	isb	sy
 8015b00:	f3bf 8f4f 	dsb	sy
 8015b04:	623b      	str	r3, [r7, #32]
}
 8015b06:	bf00      	nop
 8015b08:	bf00      	nop
 8015b0a:	e7fd      	b.n	8015b08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b0c:	f002 fac4 	bl	8018098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015b10:	f3ef 8211 	mrs	r2, BASEPRI
 8015b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b18:	f383 8811 	msr	BASEPRI, r3
 8015b1c:	f3bf 8f6f 	isb	sy
 8015b20:	f3bf 8f4f 	dsb	sy
 8015b24:	61fa      	str	r2, [r7, #28]
 8015b26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015b28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d302      	bcc.n	8015b3e <xQueueGenericSendFromISR+0xc2>
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	2b02      	cmp	r3, #2
 8015b3c:	d12f      	bne.n	8015b9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b4e:	683a      	ldr	r2, [r7, #0]
 8015b50:	68b9      	ldr	r1, [r7, #8]
 8015b52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015b54:	f000 fa3a 	bl	8015fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015b58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b60:	d112      	bne.n	8015b88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d016      	beq.n	8015b98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b6c:	3324      	adds	r3, #36	@ 0x24
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f001 f82c 	bl	8016bcc <xTaskRemoveFromEventList>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d00e      	beq.n	8015b98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d00b      	beq.n	8015b98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	2201      	movs	r2, #1
 8015b84:	601a      	str	r2, [r3, #0]
 8015b86:	e007      	b.n	8015b98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	b25a      	sxtb	r2, r3
 8015b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015b98:	2301      	movs	r3, #1
 8015b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8015b9c:	e001      	b.n	8015ba2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ba4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015bac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	3740      	adds	r7, #64	@ 0x40
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b08c      	sub	sp, #48	@ 0x30
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d10b      	bne.n	8015bea <xQueueReceive+0x32>
	__asm volatile
 8015bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bd6:	f383 8811 	msr	BASEPRI, r3
 8015bda:	f3bf 8f6f 	isb	sy
 8015bde:	f3bf 8f4f 	dsb	sy
 8015be2:	623b      	str	r3, [r7, #32]
}
 8015be4:	bf00      	nop
 8015be6:	bf00      	nop
 8015be8:	e7fd      	b.n	8015be6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d103      	bne.n	8015bf8 <xQueueReceive+0x40>
 8015bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d101      	bne.n	8015bfc <xQueueReceive+0x44>
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	e000      	b.n	8015bfe <xQueueReceive+0x46>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d10b      	bne.n	8015c1a <xQueueReceive+0x62>
	__asm volatile
 8015c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c06:	f383 8811 	msr	BASEPRI, r3
 8015c0a:	f3bf 8f6f 	isb	sy
 8015c0e:	f3bf 8f4f 	dsb	sy
 8015c12:	61fb      	str	r3, [r7, #28]
}
 8015c14:	bf00      	nop
 8015c16:	bf00      	nop
 8015c18:	e7fd      	b.n	8015c16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c1a:	f001 f9ad 	bl	8016f78 <xTaskGetSchedulerState>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d102      	bne.n	8015c2a <xQueueReceive+0x72>
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d101      	bne.n	8015c2e <xQueueReceive+0x76>
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	e000      	b.n	8015c30 <xQueueReceive+0x78>
 8015c2e:	2300      	movs	r3, #0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d10b      	bne.n	8015c4c <xQueueReceive+0x94>
	__asm volatile
 8015c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c38:	f383 8811 	msr	BASEPRI, r3
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	f3bf 8f4f 	dsb	sy
 8015c44:	61bb      	str	r3, [r7, #24]
}
 8015c46:	bf00      	nop
 8015c48:	bf00      	nop
 8015c4a:	e7fd      	b.n	8015c48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c4c:	f002 f944 	bl	8017ed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d01f      	beq.n	8015c9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c5c:	68b9      	ldr	r1, [r7, #8]
 8015c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c60:	f000 fa1e 	bl	80160a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c66:	1e5a      	subs	r2, r3, #1
 8015c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c6e:	691b      	ldr	r3, [r3, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d00f      	beq.n	8015c94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c76:	3310      	adds	r3, #16
 8015c78:	4618      	mov	r0, r3
 8015c7a:	f000 ffa7 	bl	8016bcc <xTaskRemoveFromEventList>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d007      	beq.n	8015c94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015c84:	4b3c      	ldr	r3, [pc, #240]	@ (8015d78 <xQueueReceive+0x1c0>)
 8015c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015c8a:	601a      	str	r2, [r3, #0]
 8015c8c:	f3bf 8f4f 	dsb	sy
 8015c90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015c94:	f002 f952 	bl	8017f3c <vPortExitCritical>
				return pdPASS;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	e069      	b.n	8015d70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d103      	bne.n	8015caa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015ca2:	f002 f94b 	bl	8017f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	e062      	b.n	8015d70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d106      	bne.n	8015cbe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015cb0:	f107 0310 	add.w	r3, r7, #16
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f000 ffed 	bl	8016c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015cba:	2301      	movs	r3, #1
 8015cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015cbe:	f002 f93d 	bl	8017f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015cc2:	f000 fd55 	bl	8016770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015cc6:	f002 f907 	bl	8017ed8 <vPortEnterCritical>
 8015cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015cd0:	b25b      	sxtb	r3, r3
 8015cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd6:	d103      	bne.n	8015ce0 <xQueueReceive+0x128>
 8015cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cda:	2200      	movs	r2, #0
 8015cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015ce6:	b25b      	sxtb	r3, r3
 8015ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cec:	d103      	bne.n	8015cf6 <xQueueReceive+0x13e>
 8015cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015cf6:	f002 f921 	bl	8017f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015cfa:	1d3a      	adds	r2, r7, #4
 8015cfc:	f107 0310 	add.w	r3, r7, #16
 8015d00:	4611      	mov	r1, r2
 8015d02:	4618      	mov	r0, r3
 8015d04:	f000 ffdc 	bl	8016cc0 <xTaskCheckForTimeOut>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d123      	bne.n	8015d56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d10:	f000 fa3e 	bl	8016190 <prvIsQueueEmpty>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d017      	beq.n	8015d4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d1c:	3324      	adds	r3, #36	@ 0x24
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	4611      	mov	r1, r2
 8015d22:	4618      	mov	r0, r3
 8015d24:	f000 ff00 	bl	8016b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d2a:	f000 f9df 	bl	80160ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015d2e:	f000 fd2d 	bl	801678c <xTaskResumeAll>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d189      	bne.n	8015c4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8015d38:	4b0f      	ldr	r3, [pc, #60]	@ (8015d78 <xQueueReceive+0x1c0>)
 8015d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d3e:	601a      	str	r2, [r3, #0]
 8015d40:	f3bf 8f4f 	dsb	sy
 8015d44:	f3bf 8f6f 	isb	sy
 8015d48:	e780      	b.n	8015c4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d4c:	f000 f9ce 	bl	80160ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015d50:	f000 fd1c 	bl	801678c <xTaskResumeAll>
 8015d54:	e77a      	b.n	8015c4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d58:	f000 f9c8 	bl	80160ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015d5c:	f000 fd16 	bl	801678c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d62:	f000 fa15 	bl	8016190 <prvIsQueueEmpty>
 8015d66:	4603      	mov	r3, r0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	f43f af6f 	beq.w	8015c4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015d6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3730      	adds	r7, #48	@ 0x30
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	e000ed04 	.word	0xe000ed04

08015d7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b08e      	sub	sp, #56	@ 0x38
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015d86:	2300      	movs	r3, #0
 8015d88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d10b      	bne.n	8015db0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8015d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d9c:	f383 8811 	msr	BASEPRI, r3
 8015da0:	f3bf 8f6f 	isb	sy
 8015da4:	f3bf 8f4f 	dsb	sy
 8015da8:	623b      	str	r3, [r7, #32]
}
 8015daa:	bf00      	nop
 8015dac:	bf00      	nop
 8015dae:	e7fd      	b.n	8015dac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d00b      	beq.n	8015dd0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8015db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dbc:	f383 8811 	msr	BASEPRI, r3
 8015dc0:	f3bf 8f6f 	isb	sy
 8015dc4:	f3bf 8f4f 	dsb	sy
 8015dc8:	61fb      	str	r3, [r7, #28]
}
 8015dca:	bf00      	nop
 8015dcc:	bf00      	nop
 8015dce:	e7fd      	b.n	8015dcc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015dd0:	f001 f8d2 	bl	8016f78 <xTaskGetSchedulerState>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d102      	bne.n	8015de0 <xQueueSemaphoreTake+0x64>
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d101      	bne.n	8015de4 <xQueueSemaphoreTake+0x68>
 8015de0:	2301      	movs	r3, #1
 8015de2:	e000      	b.n	8015de6 <xQueueSemaphoreTake+0x6a>
 8015de4:	2300      	movs	r3, #0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d10b      	bne.n	8015e02 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8015dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dee:	f383 8811 	msr	BASEPRI, r3
 8015df2:	f3bf 8f6f 	isb	sy
 8015df6:	f3bf 8f4f 	dsb	sy
 8015dfa:	61bb      	str	r3, [r7, #24]
}
 8015dfc:	bf00      	nop
 8015dfe:	bf00      	nop
 8015e00:	e7fd      	b.n	8015dfe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e02:	f002 f869 	bl	8017ed8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d024      	beq.n	8015e5c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e14:	1e5a      	subs	r2, r3, #1
 8015e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e18:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d104      	bne.n	8015e2c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015e22:	f001 fa23 	bl	801726c <pvTaskIncrementMutexHeldCount>
 8015e26:	4602      	mov	r2, r0
 8015e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2e:	691b      	ldr	r3, [r3, #16]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d00f      	beq.n	8015e54 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e36:	3310      	adds	r3, #16
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f000 fec7 	bl	8016bcc <xTaskRemoveFromEventList>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d007      	beq.n	8015e54 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015e44:	4b54      	ldr	r3, [pc, #336]	@ (8015f98 <xQueueSemaphoreTake+0x21c>)
 8015e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e4a:	601a      	str	r2, [r3, #0]
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015e54:	f002 f872 	bl	8017f3c <vPortExitCritical>
				return pdPASS;
 8015e58:	2301      	movs	r3, #1
 8015e5a:	e098      	b.n	8015f8e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d112      	bne.n	8015e88 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d00b      	beq.n	8015e80 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8015e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e6c:	f383 8811 	msr	BASEPRI, r3
 8015e70:	f3bf 8f6f 	isb	sy
 8015e74:	f3bf 8f4f 	dsb	sy
 8015e78:	617b      	str	r3, [r7, #20]
}
 8015e7a:	bf00      	nop
 8015e7c:	bf00      	nop
 8015e7e:	e7fd      	b.n	8015e7c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015e80:	f002 f85c 	bl	8017f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015e84:	2300      	movs	r3, #0
 8015e86:	e082      	b.n	8015f8e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015e8e:	f107 030c 	add.w	r3, r7, #12
 8015e92:	4618      	mov	r0, r3
 8015e94:	f000 fefe 	bl	8016c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015e98:	2301      	movs	r3, #1
 8015e9a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015e9c:	f002 f84e 	bl	8017f3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015ea0:	f000 fc66 	bl	8016770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015ea4:	f002 f818 	bl	8017ed8 <vPortEnterCritical>
 8015ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015eae:	b25b      	sxtb	r3, r3
 8015eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eb4:	d103      	bne.n	8015ebe <xQueueSemaphoreTake+0x142>
 8015eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb8:	2200      	movs	r2, #0
 8015eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015ec4:	b25b      	sxtb	r3, r3
 8015ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eca:	d103      	bne.n	8015ed4 <xQueueSemaphoreTake+0x158>
 8015ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ece:	2200      	movs	r2, #0
 8015ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015ed4:	f002 f832 	bl	8017f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ed8:	463a      	mov	r2, r7
 8015eda:	f107 030c 	add.w	r3, r7, #12
 8015ede:	4611      	mov	r1, r2
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f000 feed 	bl	8016cc0 <xTaskCheckForTimeOut>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d132      	bne.n	8015f52 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015eec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015eee:	f000 f94f 	bl	8016190 <prvIsQueueEmpty>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d026      	beq.n	8015f46 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d109      	bne.n	8015f14 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8015f00:	f001 ffea 	bl	8017ed8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f06:	689b      	ldr	r3, [r3, #8]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f001 f853 	bl	8016fb4 <xTaskPriorityInherit>
 8015f0e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015f10:	f002 f814 	bl	8017f3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f16:	3324      	adds	r3, #36	@ 0x24
 8015f18:	683a      	ldr	r2, [r7, #0]
 8015f1a:	4611      	mov	r1, r2
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f000 fe03 	bl	8016b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015f22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f24:	f000 f8e2 	bl	80160ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015f28:	f000 fc30 	bl	801678c <xTaskResumeAll>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	f47f af67 	bne.w	8015e02 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8015f34:	4b18      	ldr	r3, [pc, #96]	@ (8015f98 <xQueueSemaphoreTake+0x21c>)
 8015f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f3a:	601a      	str	r2, [r3, #0]
 8015f3c:	f3bf 8f4f 	dsb	sy
 8015f40:	f3bf 8f6f 	isb	sy
 8015f44:	e75d      	b.n	8015e02 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015f46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f48:	f000 f8d0 	bl	80160ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015f4c:	f000 fc1e 	bl	801678c <xTaskResumeAll>
 8015f50:	e757      	b.n	8015e02 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015f52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f54:	f000 f8ca 	bl	80160ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f58:	f000 fc18 	bl	801678c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015f5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f5e:	f000 f917 	bl	8016190 <prvIsQueueEmpty>
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f43f af4c 	beq.w	8015e02 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d00d      	beq.n	8015f8c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8015f70:	f001 ffb2 	bl	8017ed8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015f74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f76:	f000 f811 	bl	8015f9c <prvGetDisinheritPriorityAfterTimeout>
 8015f7a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f7e:	689b      	ldr	r3, [r3, #8]
 8015f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f82:	4618      	mov	r0, r3
 8015f84:	f001 f8ee 	bl	8017164 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015f88:	f001 ffd8 	bl	8017f3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015f8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3738      	adds	r7, #56	@ 0x38
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	e000ed04 	.word	0xe000ed04

08015f9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b085      	sub	sp, #20
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d006      	beq.n	8015fba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8015fb6:	60fb      	str	r3, [r7, #12]
 8015fb8:	e001      	b.n	8015fbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
	}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3714      	adds	r7, #20
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr

08015fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d10d      	bne.n	8016006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d14d      	bne.n	801608e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f001 f844 	bl	8017084 <xTaskPriorityDisinherit>
 8015ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2200      	movs	r2, #0
 8016002:	609a      	str	r2, [r3, #8]
 8016004:	e043      	b.n	801608e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d119      	bne.n	8016040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	6858      	ldr	r0, [r3, #4]
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016014:	461a      	mov	r2, r3
 8016016:	68b9      	ldr	r1, [r7, #8]
 8016018:	f006 f8c3 	bl	801c1a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	685a      	ldr	r2, [r3, #4]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016024:	441a      	add	r2, r3
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	685a      	ldr	r2, [r3, #4]
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	689b      	ldr	r3, [r3, #8]
 8016032:	429a      	cmp	r2, r3
 8016034:	d32b      	bcc.n	801608e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	605a      	str	r2, [r3, #4]
 801603e:	e026      	b.n	801608e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	68d8      	ldr	r0, [r3, #12]
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016048:	461a      	mov	r2, r3
 801604a:	68b9      	ldr	r1, [r7, #8]
 801604c:	f006 f8a9 	bl	801c1a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	68da      	ldr	r2, [r3, #12]
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016058:	425b      	negs	r3, r3
 801605a:	441a      	add	r2, r3
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	68da      	ldr	r2, [r3, #12]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	429a      	cmp	r2, r3
 801606a:	d207      	bcs.n	801607c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	689a      	ldr	r2, [r3, #8]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016074:	425b      	negs	r3, r3
 8016076:	441a      	add	r2, r3
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2b02      	cmp	r3, #2
 8016080:	d105      	bne.n	801608e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d002      	beq.n	801608e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016088:	693b      	ldr	r3, [r7, #16]
 801608a:	3b01      	subs	r3, #1
 801608c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	1c5a      	adds	r2, r3, #1
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8016096:	697b      	ldr	r3, [r7, #20]
}
 8016098:	4618      	mov	r0, r3
 801609a:	3718      	adds	r7, #24
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d018      	beq.n	80160e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	68da      	ldr	r2, [r3, #12]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160ba:	441a      	add	r2, r3
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	68da      	ldr	r2, [r3, #12]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	689b      	ldr	r3, [r3, #8]
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d303      	bcc.n	80160d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681a      	ldr	r2, [r3, #0]
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	68d9      	ldr	r1, [r3, #12]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160dc:	461a      	mov	r2, r3
 80160de:	6838      	ldr	r0, [r7, #0]
 80160e0:	f006 f85f 	bl	801c1a2 <memcpy>
	}
}
 80160e4:	bf00      	nop
 80160e6:	3708      	adds	r7, #8
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b084      	sub	sp, #16
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80160f4:	f001 fef0 	bl	8017ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80160fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016100:	e011      	b.n	8016126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016106:	2b00      	cmp	r3, #0
 8016108:	d012      	beq.n	8016130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	3324      	adds	r3, #36	@ 0x24
 801610e:	4618      	mov	r0, r3
 8016110:	f000 fd5c 	bl	8016bcc <xTaskRemoveFromEventList>
 8016114:	4603      	mov	r3, r0
 8016116:	2b00      	cmp	r3, #0
 8016118:	d001      	beq.n	801611e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801611a:	f000 fe35 	bl	8016d88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801611e:	7bfb      	ldrb	r3, [r7, #15]
 8016120:	3b01      	subs	r3, #1
 8016122:	b2db      	uxtb	r3, r3
 8016124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801612a:	2b00      	cmp	r3, #0
 801612c:	dce9      	bgt.n	8016102 <prvUnlockQueue+0x16>
 801612e:	e000      	b.n	8016132 <prvUnlockQueue+0x46>
					break;
 8016130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	22ff      	movs	r2, #255	@ 0xff
 8016136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801613a:	f001 feff 	bl	8017f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801613e:	f001 fecb 	bl	8017ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801614a:	e011      	b.n	8016170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	691b      	ldr	r3, [r3, #16]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d012      	beq.n	801617a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	3310      	adds	r3, #16
 8016158:	4618      	mov	r0, r3
 801615a:	f000 fd37 	bl	8016bcc <xTaskRemoveFromEventList>
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d001      	beq.n	8016168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016164:	f000 fe10 	bl	8016d88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016168:	7bbb      	ldrb	r3, [r7, #14]
 801616a:	3b01      	subs	r3, #1
 801616c:	b2db      	uxtb	r3, r3
 801616e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016174:	2b00      	cmp	r3, #0
 8016176:	dce9      	bgt.n	801614c <prvUnlockQueue+0x60>
 8016178:	e000      	b.n	801617c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801617a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	22ff      	movs	r2, #255	@ 0xff
 8016180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8016184:	f001 feda 	bl	8017f3c <vPortExitCritical>
}
 8016188:	bf00      	nop
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b084      	sub	sp, #16
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016198:	f001 fe9e 	bl	8017ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d102      	bne.n	80161aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80161a4:	2301      	movs	r3, #1
 80161a6:	60fb      	str	r3, [r7, #12]
 80161a8:	e001      	b.n	80161ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80161aa:	2300      	movs	r3, #0
 80161ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80161ae:	f001 fec5 	bl	8017f3c <vPortExitCritical>

	return xReturn;
 80161b2:	68fb      	ldr	r3, [r7, #12]
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	3710      	adds	r7, #16
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}

080161bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80161c4:	f001 fe88 	bl	8017ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d102      	bne.n	80161da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80161d4:	2301      	movs	r3, #1
 80161d6:	60fb      	str	r3, [r7, #12]
 80161d8:	e001      	b.n	80161de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80161da:	2300      	movs	r3, #0
 80161dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80161de:	f001 fead 	bl	8017f3c <vPortExitCritical>

	return xReturn;
 80161e2:	68fb      	ldr	r3, [r7, #12]
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3710      	adds	r7, #16
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}

080161ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80161ec:	b480      	push	{r7}
 80161ee:	b085      	sub	sp, #20
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
 80161f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80161f6:	2300      	movs	r3, #0
 80161f8:	60fb      	str	r3, [r7, #12]
 80161fa:	e014      	b.n	8016226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80161fc:	4a0f      	ldr	r2, [pc, #60]	@ (801623c <vQueueAddToRegistry+0x50>)
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d10b      	bne.n	8016220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016208:	490c      	ldr	r1, [pc, #48]	@ (801623c <vQueueAddToRegistry+0x50>)
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	683a      	ldr	r2, [r7, #0]
 801620e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016212:	4a0a      	ldr	r2, [pc, #40]	@ (801623c <vQueueAddToRegistry+0x50>)
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	4413      	add	r3, r2
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801621e:	e006      	b.n	801622e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	3301      	adds	r3, #1
 8016224:	60fb      	str	r3, [r7, #12]
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2b07      	cmp	r3, #7
 801622a:	d9e7      	bls.n	80161fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801622c:	bf00      	nop
 801622e:	bf00      	nop
 8016230:	3714      	adds	r7, #20
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop
 801623c:	20005e5c 	.word	0x20005e5c

08016240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016240:	b580      	push	{r7, lr}
 8016242:	b086      	sub	sp, #24
 8016244:	af00      	add	r7, sp, #0
 8016246:	60f8      	str	r0, [r7, #12]
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016250:	f001 fe42 	bl	8017ed8 <vPortEnterCritical>
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801625a:	b25b      	sxtb	r3, r3
 801625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016260:	d103      	bne.n	801626a <vQueueWaitForMessageRestricted+0x2a>
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	2200      	movs	r2, #0
 8016266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016270:	b25b      	sxtb	r3, r3
 8016272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016276:	d103      	bne.n	8016280 <vQueueWaitForMessageRestricted+0x40>
 8016278:	697b      	ldr	r3, [r7, #20]
 801627a:	2200      	movs	r2, #0
 801627c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016280:	f001 fe5c 	bl	8017f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016288:	2b00      	cmp	r3, #0
 801628a:	d106      	bne.n	801629a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801628c:	697b      	ldr	r3, [r7, #20]
 801628e:	3324      	adds	r3, #36	@ 0x24
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	4618      	mov	r0, r3
 8016296:	f000 fc6d 	bl	8016b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801629a:	6978      	ldr	r0, [r7, #20]
 801629c:	f7ff ff26 	bl	80160ec <prvUnlockQueue>
	}
 80162a0:	bf00      	nop
 80162a2:	3718      	adds	r7, #24
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b08e      	sub	sp, #56	@ 0x38
 80162ac:	af04      	add	r7, sp, #16
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
 80162b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80162b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d10b      	bne.n	80162d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80162bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162c0:	f383 8811 	msr	BASEPRI, r3
 80162c4:	f3bf 8f6f 	isb	sy
 80162c8:	f3bf 8f4f 	dsb	sy
 80162cc:	623b      	str	r3, [r7, #32]
}
 80162ce:	bf00      	nop
 80162d0:	bf00      	nop
 80162d2:	e7fd      	b.n	80162d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80162d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d10b      	bne.n	80162f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80162da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162de:	f383 8811 	msr	BASEPRI, r3
 80162e2:	f3bf 8f6f 	isb	sy
 80162e6:	f3bf 8f4f 	dsb	sy
 80162ea:	61fb      	str	r3, [r7, #28]
}
 80162ec:	bf00      	nop
 80162ee:	bf00      	nop
 80162f0:	e7fd      	b.n	80162ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80162f2:	23a8      	movs	r3, #168	@ 0xa8
 80162f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80162fa:	d00b      	beq.n	8016314 <xTaskCreateStatic+0x6c>
	__asm volatile
 80162fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016300:	f383 8811 	msr	BASEPRI, r3
 8016304:	f3bf 8f6f 	isb	sy
 8016308:	f3bf 8f4f 	dsb	sy
 801630c:	61bb      	str	r3, [r7, #24]
}
 801630e:	bf00      	nop
 8016310:	bf00      	nop
 8016312:	e7fd      	b.n	8016310 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016318:	2b00      	cmp	r3, #0
 801631a:	d01e      	beq.n	801635a <xTaskCreateStatic+0xb2>
 801631c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801631e:	2b00      	cmp	r3, #0
 8016320:	d01b      	beq.n	801635a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016324:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801632a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801632e:	2202      	movs	r2, #2
 8016330:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016334:	2300      	movs	r3, #0
 8016336:	9303      	str	r3, [sp, #12]
 8016338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	f107 0314 	add.w	r3, r7, #20
 8016340:	9301      	str	r3, [sp, #4]
 8016342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016344:	9300      	str	r3, [sp, #0]
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	68b9      	ldr	r1, [r7, #8]
 801634c:	68f8      	ldr	r0, [r7, #12]
 801634e:	f000 f851 	bl	80163f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016354:	f000 f8f6 	bl	8016544 <prvAddNewTaskToReadyList>
 8016358:	e001      	b.n	801635e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801635a:	2300      	movs	r3, #0
 801635c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801635e:	697b      	ldr	r3, [r7, #20]
	}
 8016360:	4618      	mov	r0, r3
 8016362:	3728      	adds	r7, #40	@ 0x28
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016368:	b580      	push	{r7, lr}
 801636a:	b08c      	sub	sp, #48	@ 0x30
 801636c:	af04      	add	r7, sp, #16
 801636e:	60f8      	str	r0, [r7, #12]
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	603b      	str	r3, [r7, #0]
 8016374:	4613      	mov	r3, r2
 8016376:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016378:	88fb      	ldrh	r3, [r7, #6]
 801637a:	009b      	lsls	r3, r3, #2
 801637c:	4618      	mov	r0, r3
 801637e:	f001 fecd 	bl	801811c <pvPortMalloc>
 8016382:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d00e      	beq.n	80163a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801638a:	20a8      	movs	r0, #168	@ 0xa8
 801638c:	f001 fec6 	bl	801811c <pvPortMalloc>
 8016390:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d003      	beq.n	80163a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	697a      	ldr	r2, [r7, #20]
 801639c:	631a      	str	r2, [r3, #48]	@ 0x30
 801639e:	e005      	b.n	80163ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80163a0:	6978      	ldr	r0, [r7, #20]
 80163a2:	f001 ff89 	bl	80182b8 <vPortFree>
 80163a6:	e001      	b.n	80163ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80163a8:	2300      	movs	r3, #0
 80163aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d017      	beq.n	80163e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	2200      	movs	r2, #0
 80163b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80163ba:	88fa      	ldrh	r2, [r7, #6]
 80163bc:	2300      	movs	r3, #0
 80163be:	9303      	str	r3, [sp, #12]
 80163c0:	69fb      	ldr	r3, [r7, #28]
 80163c2:	9302      	str	r3, [sp, #8]
 80163c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163c6:	9301      	str	r3, [sp, #4]
 80163c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	68b9      	ldr	r1, [r7, #8]
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f000 f80f 	bl	80163f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80163d6:	69f8      	ldr	r0, [r7, #28]
 80163d8:	f000 f8b4 	bl	8016544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80163dc:	2301      	movs	r3, #1
 80163de:	61bb      	str	r3, [r7, #24]
 80163e0:	e002      	b.n	80163e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80163e2:	f04f 33ff 	mov.w	r3, #4294967295
 80163e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80163e8:	69bb      	ldr	r3, [r7, #24]
	}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3720      	adds	r7, #32
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
	...

080163f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b088      	sub	sp, #32
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
 8016400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016404:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	461a      	mov	r2, r3
 801640c:	21a5      	movs	r1, #165	@ 0xa5
 801640e:	f005 fdd9 	bl	801bfc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801641c:	3b01      	subs	r3, #1
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	4413      	add	r3, r2
 8016422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016424:	69bb      	ldr	r3, [r7, #24]
 8016426:	f023 0307 	bic.w	r3, r3, #7
 801642a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	f003 0307 	and.w	r3, r3, #7
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00b      	beq.n	801644e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8016436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801643a:	f383 8811 	msr	BASEPRI, r3
 801643e:	f3bf 8f6f 	isb	sy
 8016442:	f3bf 8f4f 	dsb	sy
 8016446:	617b      	str	r3, [r7, #20]
}
 8016448:	bf00      	nop
 801644a:	bf00      	nop
 801644c:	e7fd      	b.n	801644a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d01f      	beq.n	8016494 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016454:	2300      	movs	r3, #0
 8016456:	61fb      	str	r3, [r7, #28]
 8016458:	e012      	b.n	8016480 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801645a:	68ba      	ldr	r2, [r7, #8]
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	4413      	add	r3, r2
 8016460:	7819      	ldrb	r1, [r3, #0]
 8016462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016464:	69fb      	ldr	r3, [r7, #28]
 8016466:	4413      	add	r3, r2
 8016468:	3334      	adds	r3, #52	@ 0x34
 801646a:	460a      	mov	r2, r1
 801646c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801646e:	68ba      	ldr	r2, [r7, #8]
 8016470:	69fb      	ldr	r3, [r7, #28]
 8016472:	4413      	add	r3, r2
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d006      	beq.n	8016488 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801647a:	69fb      	ldr	r3, [r7, #28]
 801647c:	3301      	adds	r3, #1
 801647e:	61fb      	str	r3, [r7, #28]
 8016480:	69fb      	ldr	r3, [r7, #28]
 8016482:	2b0f      	cmp	r3, #15
 8016484:	d9e9      	bls.n	801645a <prvInitialiseNewTask+0x66>
 8016486:	e000      	b.n	801648a <prvInitialiseNewTask+0x96>
			{
				break;
 8016488:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801648c:	2200      	movs	r2, #0
 801648e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016492:	e003      	b.n	801649c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016496:	2200      	movs	r2, #0
 8016498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801649e:	2b37      	cmp	r3, #55	@ 0x37
 80164a0:	d901      	bls.n	80164a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80164a2:	2337      	movs	r3, #55	@ 0x37
 80164a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80164a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80164ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80164b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164b4:	2200      	movs	r2, #0
 80164b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80164b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ba:	3304      	adds	r3, #4
 80164bc:	4618      	mov	r0, r3
 80164be:	f7fe ffcf 	bl	8015460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80164c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164c4:	3318      	adds	r3, #24
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7fe ffca 	bl	8015460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80164cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80164d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80164dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80164e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164e4:	2200      	movs	r2, #0
 80164e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80164ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ec:	2200      	movs	r2, #0
 80164ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80164f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164f4:	3354      	adds	r3, #84	@ 0x54
 80164f6:	224c      	movs	r2, #76	@ 0x4c
 80164f8:	2100      	movs	r1, #0
 80164fa:	4618      	mov	r0, r3
 80164fc:	f005 fd62 	bl	801bfc4 <memset>
 8016500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016502:	4a0d      	ldr	r2, [pc, #52]	@ (8016538 <prvInitialiseNewTask+0x144>)
 8016504:	659a      	str	r2, [r3, #88]	@ 0x58
 8016506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016508:	4a0c      	ldr	r2, [pc, #48]	@ (801653c <prvInitialiseNewTask+0x148>)
 801650a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801650e:	4a0c      	ldr	r2, [pc, #48]	@ (8016540 <prvInitialiseNewTask+0x14c>)
 8016510:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	68f9      	ldr	r1, [r7, #12]
 8016516:	69b8      	ldr	r0, [r7, #24]
 8016518:	f001 fbaa 	bl	8017c70 <pxPortInitialiseStack>
 801651c:	4602      	mov	r2, r0
 801651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016520:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016524:	2b00      	cmp	r3, #0
 8016526:	d002      	beq.n	801652e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801652a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801652c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801652e:	bf00      	nop
 8016530:	3720      	adds	r7, #32
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	2000c2e0 	.word	0x2000c2e0
 801653c:	2000c348 	.word	0x2000c348
 8016540:	2000c3b0 	.word	0x2000c3b0

08016544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801654c:	f001 fcc4 	bl	8017ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016550:	4b2d      	ldr	r3, [pc, #180]	@ (8016608 <prvAddNewTaskToReadyList+0xc4>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	3301      	adds	r3, #1
 8016556:	4a2c      	ldr	r2, [pc, #176]	@ (8016608 <prvAddNewTaskToReadyList+0xc4>)
 8016558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801655a:	4b2c      	ldr	r3, [pc, #176]	@ (801660c <prvAddNewTaskToReadyList+0xc8>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d109      	bne.n	8016576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016562:	4a2a      	ldr	r2, [pc, #168]	@ (801660c <prvAddNewTaskToReadyList+0xc8>)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016568:	4b27      	ldr	r3, [pc, #156]	@ (8016608 <prvAddNewTaskToReadyList+0xc4>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d110      	bne.n	8016592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016570:	f000 fc2e 	bl	8016dd0 <prvInitialiseTaskLists>
 8016574:	e00d      	b.n	8016592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016576:	4b26      	ldr	r3, [pc, #152]	@ (8016610 <prvAddNewTaskToReadyList+0xcc>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d109      	bne.n	8016592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801657e:	4b23      	ldr	r3, [pc, #140]	@ (801660c <prvAddNewTaskToReadyList+0xc8>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016588:	429a      	cmp	r2, r3
 801658a:	d802      	bhi.n	8016592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801658c:	4a1f      	ldr	r2, [pc, #124]	@ (801660c <prvAddNewTaskToReadyList+0xc8>)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016592:	4b20      	ldr	r3, [pc, #128]	@ (8016614 <prvAddNewTaskToReadyList+0xd0>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	3301      	adds	r3, #1
 8016598:	4a1e      	ldr	r2, [pc, #120]	@ (8016614 <prvAddNewTaskToReadyList+0xd0>)
 801659a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801659c:	4b1d      	ldr	r3, [pc, #116]	@ (8016614 <prvAddNewTaskToReadyList+0xd0>)
 801659e:	681a      	ldr	r2, [r3, #0]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165a8:	4b1b      	ldr	r3, [pc, #108]	@ (8016618 <prvAddNewTaskToReadyList+0xd4>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d903      	bls.n	80165b8 <prvAddNewTaskToReadyList+0x74>
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165b4:	4a18      	ldr	r2, [pc, #96]	@ (8016618 <prvAddNewTaskToReadyList+0xd4>)
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165bc:	4613      	mov	r3, r2
 80165be:	009b      	lsls	r3, r3, #2
 80165c0:	4413      	add	r3, r2
 80165c2:	009b      	lsls	r3, r3, #2
 80165c4:	4a15      	ldr	r2, [pc, #84]	@ (801661c <prvAddNewTaskToReadyList+0xd8>)
 80165c6:	441a      	add	r2, r3
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	3304      	adds	r3, #4
 80165cc:	4619      	mov	r1, r3
 80165ce:	4610      	mov	r0, r2
 80165d0:	f7fe ff53 	bl	801547a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80165d4:	f001 fcb2 	bl	8017f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80165d8:	4b0d      	ldr	r3, [pc, #52]	@ (8016610 <prvAddNewTaskToReadyList+0xcc>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d00e      	beq.n	80165fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80165e0:	4b0a      	ldr	r3, [pc, #40]	@ (801660c <prvAddNewTaskToReadyList+0xc8>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d207      	bcs.n	80165fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80165ee:	4b0c      	ldr	r3, [pc, #48]	@ (8016620 <prvAddNewTaskToReadyList+0xdc>)
 80165f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80165f4:	601a      	str	r2, [r3, #0]
 80165f6:	f3bf 8f4f 	dsb	sy
 80165fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165fe:	bf00      	nop
 8016600:	3708      	adds	r7, #8
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	20006370 	.word	0x20006370
 801660c:	20005e9c 	.word	0x20005e9c
 8016610:	2000637c 	.word	0x2000637c
 8016614:	2000638c 	.word	0x2000638c
 8016618:	20006378 	.word	0x20006378
 801661c:	20005ea0 	.word	0x20005ea0
 8016620:	e000ed04 	.word	0xe000ed04

08016624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801662c:	2300      	movs	r3, #0
 801662e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d018      	beq.n	8016668 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016636:	4b14      	ldr	r3, [pc, #80]	@ (8016688 <vTaskDelay+0x64>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d00b      	beq.n	8016656 <vTaskDelay+0x32>
	__asm volatile
 801663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016642:	f383 8811 	msr	BASEPRI, r3
 8016646:	f3bf 8f6f 	isb	sy
 801664a:	f3bf 8f4f 	dsb	sy
 801664e:	60bb      	str	r3, [r7, #8]
}
 8016650:	bf00      	nop
 8016652:	bf00      	nop
 8016654:	e7fd      	b.n	8016652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016656:	f000 f88b 	bl	8016770 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801665a:	2100      	movs	r1, #0
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f000 fefb 	bl	8017458 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016662:	f000 f893 	bl	801678c <xTaskResumeAll>
 8016666:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d107      	bne.n	801667e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801666e:	4b07      	ldr	r3, [pc, #28]	@ (801668c <vTaskDelay+0x68>)
 8016670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016674:	601a      	str	r2, [r3, #0]
 8016676:	f3bf 8f4f 	dsb	sy
 801667a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801667e:	bf00      	nop
 8016680:	3710      	adds	r7, #16
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}
 8016686:	bf00      	nop
 8016688:	20006398 	.word	0x20006398
 801668c:	e000ed04 	.word	0xe000ed04

08016690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b08a      	sub	sp, #40	@ 0x28
 8016694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016696:	2300      	movs	r3, #0
 8016698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801669a:	2300      	movs	r3, #0
 801669c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801669e:	463a      	mov	r2, r7
 80166a0:	1d39      	adds	r1, r7, #4
 80166a2:	f107 0308 	add.w	r3, r7, #8
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fe fe86 	bl	80153b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80166ac:	6839      	ldr	r1, [r7, #0]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	68ba      	ldr	r2, [r7, #8]
 80166b2:	9202      	str	r2, [sp, #8]
 80166b4:	9301      	str	r3, [sp, #4]
 80166b6:	2300      	movs	r3, #0
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	2300      	movs	r3, #0
 80166bc:	460a      	mov	r2, r1
 80166be:	4924      	ldr	r1, [pc, #144]	@ (8016750 <vTaskStartScheduler+0xc0>)
 80166c0:	4824      	ldr	r0, [pc, #144]	@ (8016754 <vTaskStartScheduler+0xc4>)
 80166c2:	f7ff fdf1 	bl	80162a8 <xTaskCreateStatic>
 80166c6:	4603      	mov	r3, r0
 80166c8:	4a23      	ldr	r2, [pc, #140]	@ (8016758 <vTaskStartScheduler+0xc8>)
 80166ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80166cc:	4b22      	ldr	r3, [pc, #136]	@ (8016758 <vTaskStartScheduler+0xc8>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d002      	beq.n	80166da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80166d4:	2301      	movs	r3, #1
 80166d6:	617b      	str	r3, [r7, #20]
 80166d8:	e001      	b.n	80166de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80166da:	2300      	movs	r3, #0
 80166dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d102      	bne.n	80166ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80166e4:	f000 ff0c 	bl	8017500 <xTimerCreateTimerTask>
 80166e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	2b01      	cmp	r3, #1
 80166ee:	d11b      	bne.n	8016728 <vTaskStartScheduler+0x98>
	__asm volatile
 80166f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f4:	f383 8811 	msr	BASEPRI, r3
 80166f8:	f3bf 8f6f 	isb	sy
 80166fc:	f3bf 8f4f 	dsb	sy
 8016700:	613b      	str	r3, [r7, #16]
}
 8016702:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016704:	4b15      	ldr	r3, [pc, #84]	@ (801675c <vTaskStartScheduler+0xcc>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	3354      	adds	r3, #84	@ 0x54
 801670a:	4a15      	ldr	r2, [pc, #84]	@ (8016760 <vTaskStartScheduler+0xd0>)
 801670c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801670e:	4b15      	ldr	r3, [pc, #84]	@ (8016764 <vTaskStartScheduler+0xd4>)
 8016710:	f04f 32ff 	mov.w	r2, #4294967295
 8016714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016716:	4b14      	ldr	r3, [pc, #80]	@ (8016768 <vTaskStartScheduler+0xd8>)
 8016718:	2201      	movs	r2, #1
 801671a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801671c:	4b13      	ldr	r3, [pc, #76]	@ (801676c <vTaskStartScheduler+0xdc>)
 801671e:	2200      	movs	r2, #0
 8016720:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016722:	f001 fb35 	bl	8017d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016726:	e00f      	b.n	8016748 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672e:	d10b      	bne.n	8016748 <vTaskStartScheduler+0xb8>
	__asm volatile
 8016730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016734:	f383 8811 	msr	BASEPRI, r3
 8016738:	f3bf 8f6f 	isb	sy
 801673c:	f3bf 8f4f 	dsb	sy
 8016740:	60fb      	str	r3, [r7, #12]
}
 8016742:	bf00      	nop
 8016744:	bf00      	nop
 8016746:	e7fd      	b.n	8016744 <vTaskStartScheduler+0xb4>
}
 8016748:	bf00      	nop
 801674a:	3718      	adds	r7, #24
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}
 8016750:	08021f28 	.word	0x08021f28
 8016754:	08016da1 	.word	0x08016da1
 8016758:	20006394 	.word	0x20006394
 801675c:	20005e9c 	.word	0x20005e9c
 8016760:	20000160 	.word	0x20000160
 8016764:	20006390 	.word	0x20006390
 8016768:	2000637c 	.word	0x2000637c
 801676c:	20006374 	.word	0x20006374

08016770 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016770:	b480      	push	{r7}
 8016772:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016774:	4b04      	ldr	r3, [pc, #16]	@ (8016788 <vTaskSuspendAll+0x18>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	3301      	adds	r3, #1
 801677a:	4a03      	ldr	r2, [pc, #12]	@ (8016788 <vTaskSuspendAll+0x18>)
 801677c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801677e:	bf00      	nop
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr
 8016788:	20006398 	.word	0x20006398

0801678c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016792:	2300      	movs	r3, #0
 8016794:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016796:	2300      	movs	r3, #0
 8016798:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801679a:	4b42      	ldr	r3, [pc, #264]	@ (80168a4 <xTaskResumeAll+0x118>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d10b      	bne.n	80167ba <xTaskResumeAll+0x2e>
	__asm volatile
 80167a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167a6:	f383 8811 	msr	BASEPRI, r3
 80167aa:	f3bf 8f6f 	isb	sy
 80167ae:	f3bf 8f4f 	dsb	sy
 80167b2:	603b      	str	r3, [r7, #0]
}
 80167b4:	bf00      	nop
 80167b6:	bf00      	nop
 80167b8:	e7fd      	b.n	80167b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80167ba:	f001 fb8d 	bl	8017ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80167be:	4b39      	ldr	r3, [pc, #228]	@ (80168a4 <xTaskResumeAll+0x118>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	3b01      	subs	r3, #1
 80167c4:	4a37      	ldr	r2, [pc, #220]	@ (80168a4 <xTaskResumeAll+0x118>)
 80167c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80167c8:	4b36      	ldr	r3, [pc, #216]	@ (80168a4 <xTaskResumeAll+0x118>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d162      	bne.n	8016896 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80167d0:	4b35      	ldr	r3, [pc, #212]	@ (80168a8 <xTaskResumeAll+0x11c>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d05e      	beq.n	8016896 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80167d8:	e02f      	b.n	801683a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167da:	4b34      	ldr	r3, [pc, #208]	@ (80168ac <xTaskResumeAll+0x120>)
 80167dc:	68db      	ldr	r3, [r3, #12]
 80167de:	68db      	ldr	r3, [r3, #12]
 80167e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	3318      	adds	r3, #24
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7fe fea4 	bl	8015534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	3304      	adds	r3, #4
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7fe fe9f 	bl	8015534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80167fa:	4b2d      	ldr	r3, [pc, #180]	@ (80168b0 <xTaskResumeAll+0x124>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d903      	bls.n	801680a <xTaskResumeAll+0x7e>
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016806:	4a2a      	ldr	r2, [pc, #168]	@ (80168b0 <xTaskResumeAll+0x124>)
 8016808:	6013      	str	r3, [r2, #0]
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801680e:	4613      	mov	r3, r2
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	4413      	add	r3, r2
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	4a27      	ldr	r2, [pc, #156]	@ (80168b4 <xTaskResumeAll+0x128>)
 8016818:	441a      	add	r2, r3
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	3304      	adds	r3, #4
 801681e:	4619      	mov	r1, r3
 8016820:	4610      	mov	r0, r2
 8016822:	f7fe fe2a 	bl	801547a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801682a:	4b23      	ldr	r3, [pc, #140]	@ (80168b8 <xTaskResumeAll+0x12c>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016830:	429a      	cmp	r2, r3
 8016832:	d302      	bcc.n	801683a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016834:	4b21      	ldr	r3, [pc, #132]	@ (80168bc <xTaskResumeAll+0x130>)
 8016836:	2201      	movs	r2, #1
 8016838:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801683a:	4b1c      	ldr	r3, [pc, #112]	@ (80168ac <xTaskResumeAll+0x120>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d1cb      	bne.n	80167da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d001      	beq.n	801684c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016848:	f000 fb66 	bl	8016f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801684c:	4b1c      	ldr	r3, [pc, #112]	@ (80168c0 <xTaskResumeAll+0x134>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d010      	beq.n	801687a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016858:	f000 f846 	bl	80168e8 <xTaskIncrementTick>
 801685c:	4603      	mov	r3, r0
 801685e:	2b00      	cmp	r3, #0
 8016860:	d002      	beq.n	8016868 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8016862:	4b16      	ldr	r3, [pc, #88]	@ (80168bc <xTaskResumeAll+0x130>)
 8016864:	2201      	movs	r2, #1
 8016866:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	3b01      	subs	r3, #1
 801686c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d1f1      	bne.n	8016858 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8016874:	4b12      	ldr	r3, [pc, #72]	@ (80168c0 <xTaskResumeAll+0x134>)
 8016876:	2200      	movs	r2, #0
 8016878:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801687a:	4b10      	ldr	r3, [pc, #64]	@ (80168bc <xTaskResumeAll+0x130>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d009      	beq.n	8016896 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016882:	2301      	movs	r3, #1
 8016884:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016886:	4b0f      	ldr	r3, [pc, #60]	@ (80168c4 <xTaskResumeAll+0x138>)
 8016888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801688c:	601a      	str	r2, [r3, #0]
 801688e:	f3bf 8f4f 	dsb	sy
 8016892:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016896:	f001 fb51 	bl	8017f3c <vPortExitCritical>

	return xAlreadyYielded;
 801689a:	68bb      	ldr	r3, [r7, #8]
}
 801689c:	4618      	mov	r0, r3
 801689e:	3710      	adds	r7, #16
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	20006398 	.word	0x20006398
 80168a8:	20006370 	.word	0x20006370
 80168ac:	20006330 	.word	0x20006330
 80168b0:	20006378 	.word	0x20006378
 80168b4:	20005ea0 	.word	0x20005ea0
 80168b8:	20005e9c 	.word	0x20005e9c
 80168bc:	20006384 	.word	0x20006384
 80168c0:	20006380 	.word	0x20006380
 80168c4:	e000ed04 	.word	0xe000ed04

080168c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80168c8:	b480      	push	{r7}
 80168ca:	b083      	sub	sp, #12
 80168cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80168ce:	4b05      	ldr	r3, [pc, #20]	@ (80168e4 <xTaskGetTickCount+0x1c>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80168d4:	687b      	ldr	r3, [r7, #4]
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	370c      	adds	r7, #12
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop
 80168e4:	20006374 	.word	0x20006374

080168e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b086      	sub	sp, #24
 80168ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80168ee:	2300      	movs	r3, #0
 80168f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168f2:	4b4f      	ldr	r3, [pc, #316]	@ (8016a30 <xTaskIncrementTick+0x148>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	f040 8090 	bne.w	8016a1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80168fc:	4b4d      	ldr	r3, [pc, #308]	@ (8016a34 <xTaskIncrementTick+0x14c>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	3301      	adds	r3, #1
 8016902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016904:	4a4b      	ldr	r2, [pc, #300]	@ (8016a34 <xTaskIncrementTick+0x14c>)
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d121      	bne.n	8016954 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8016910:	4b49      	ldr	r3, [pc, #292]	@ (8016a38 <xTaskIncrementTick+0x150>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00b      	beq.n	8016932 <xTaskIncrementTick+0x4a>
	__asm volatile
 801691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801691e:	f383 8811 	msr	BASEPRI, r3
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	f3bf 8f4f 	dsb	sy
 801692a:	603b      	str	r3, [r7, #0]
}
 801692c:	bf00      	nop
 801692e:	bf00      	nop
 8016930:	e7fd      	b.n	801692e <xTaskIncrementTick+0x46>
 8016932:	4b41      	ldr	r3, [pc, #260]	@ (8016a38 <xTaskIncrementTick+0x150>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	60fb      	str	r3, [r7, #12]
 8016938:	4b40      	ldr	r3, [pc, #256]	@ (8016a3c <xTaskIncrementTick+0x154>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	4a3e      	ldr	r2, [pc, #248]	@ (8016a38 <xTaskIncrementTick+0x150>)
 801693e:	6013      	str	r3, [r2, #0]
 8016940:	4a3e      	ldr	r2, [pc, #248]	@ (8016a3c <xTaskIncrementTick+0x154>)
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	6013      	str	r3, [r2, #0]
 8016946:	4b3e      	ldr	r3, [pc, #248]	@ (8016a40 <xTaskIncrementTick+0x158>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	3301      	adds	r3, #1
 801694c:	4a3c      	ldr	r2, [pc, #240]	@ (8016a40 <xTaskIncrementTick+0x158>)
 801694e:	6013      	str	r3, [r2, #0]
 8016950:	f000 fae2 	bl	8016f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016954:	4b3b      	ldr	r3, [pc, #236]	@ (8016a44 <xTaskIncrementTick+0x15c>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	693a      	ldr	r2, [r7, #16]
 801695a:	429a      	cmp	r2, r3
 801695c:	d349      	bcc.n	80169f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801695e:	4b36      	ldr	r3, [pc, #216]	@ (8016a38 <xTaskIncrementTick+0x150>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d104      	bne.n	8016972 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016968:	4b36      	ldr	r3, [pc, #216]	@ (8016a44 <xTaskIncrementTick+0x15c>)
 801696a:	f04f 32ff 	mov.w	r2, #4294967295
 801696e:	601a      	str	r2, [r3, #0]
					break;
 8016970:	e03f      	b.n	80169f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016972:	4b31      	ldr	r3, [pc, #196]	@ (8016a38 <xTaskIncrementTick+0x150>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	68db      	ldr	r3, [r3, #12]
 801697a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016982:	693a      	ldr	r2, [r7, #16]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	429a      	cmp	r2, r3
 8016988:	d203      	bcs.n	8016992 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801698a:	4a2e      	ldr	r2, [pc, #184]	@ (8016a44 <xTaskIncrementTick+0x15c>)
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016990:	e02f      	b.n	80169f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	3304      	adds	r3, #4
 8016996:	4618      	mov	r0, r3
 8016998:	f7fe fdcc 	bl	8015534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d004      	beq.n	80169ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80169a4:	68bb      	ldr	r3, [r7, #8]
 80169a6:	3318      	adds	r3, #24
 80169a8:	4618      	mov	r0, r3
 80169aa:	f7fe fdc3 	bl	8015534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169b2:	4b25      	ldr	r3, [pc, #148]	@ (8016a48 <xTaskIncrementTick+0x160>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d903      	bls.n	80169c2 <xTaskIncrementTick+0xda>
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169be:	4a22      	ldr	r2, [pc, #136]	@ (8016a48 <xTaskIncrementTick+0x160>)
 80169c0:	6013      	str	r3, [r2, #0]
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169c6:	4613      	mov	r3, r2
 80169c8:	009b      	lsls	r3, r3, #2
 80169ca:	4413      	add	r3, r2
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	4a1f      	ldr	r2, [pc, #124]	@ (8016a4c <xTaskIncrementTick+0x164>)
 80169d0:	441a      	add	r2, r3
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	3304      	adds	r3, #4
 80169d6:	4619      	mov	r1, r3
 80169d8:	4610      	mov	r0, r2
 80169da:	f7fe fd4e 	bl	801547a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169e2:	4b1b      	ldr	r3, [pc, #108]	@ (8016a50 <xTaskIncrementTick+0x168>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d3b8      	bcc.n	801695e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80169ec:	2301      	movs	r3, #1
 80169ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80169f0:	e7b5      	b.n	801695e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80169f2:	4b17      	ldr	r3, [pc, #92]	@ (8016a50 <xTaskIncrementTick+0x168>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169f8:	4914      	ldr	r1, [pc, #80]	@ (8016a4c <xTaskIncrementTick+0x164>)
 80169fa:	4613      	mov	r3, r2
 80169fc:	009b      	lsls	r3, r3, #2
 80169fe:	4413      	add	r3, r2
 8016a00:	009b      	lsls	r3, r3, #2
 8016a02:	440b      	add	r3, r1
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	d901      	bls.n	8016a0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016a0e:	4b11      	ldr	r3, [pc, #68]	@ (8016a54 <xTaskIncrementTick+0x16c>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d007      	beq.n	8016a26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8016a16:	2301      	movs	r3, #1
 8016a18:	617b      	str	r3, [r7, #20]
 8016a1a:	e004      	b.n	8016a26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8016a58 <xTaskIncrementTick+0x170>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	3301      	adds	r3, #1
 8016a22:	4a0d      	ldr	r2, [pc, #52]	@ (8016a58 <xTaskIncrementTick+0x170>)
 8016a24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016a26:	697b      	ldr	r3, [r7, #20]
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3718      	adds	r7, #24
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	20006398 	.word	0x20006398
 8016a34:	20006374 	.word	0x20006374
 8016a38:	20006328 	.word	0x20006328
 8016a3c:	2000632c 	.word	0x2000632c
 8016a40:	20006388 	.word	0x20006388
 8016a44:	20006390 	.word	0x20006390
 8016a48:	20006378 	.word	0x20006378
 8016a4c:	20005ea0 	.word	0x20005ea0
 8016a50:	20005e9c 	.word	0x20005e9c
 8016a54:	20006384 	.word	0x20006384
 8016a58:	20006380 	.word	0x20006380

08016a5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016a62:	4b2b      	ldr	r3, [pc, #172]	@ (8016b10 <vTaskSwitchContext+0xb4>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d003      	beq.n	8016a72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8016b14 <vTaskSwitchContext+0xb8>)
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016a70:	e047      	b.n	8016b02 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8016a72:	4b28      	ldr	r3, [pc, #160]	@ (8016b14 <vTaskSwitchContext+0xb8>)
 8016a74:	2200      	movs	r2, #0
 8016a76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a78:	4b27      	ldr	r3, [pc, #156]	@ (8016b18 <vTaskSwitchContext+0xbc>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	60fb      	str	r3, [r7, #12]
 8016a7e:	e011      	b.n	8016aa4 <vTaskSwitchContext+0x48>
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d10b      	bne.n	8016a9e <vTaskSwitchContext+0x42>
	__asm volatile
 8016a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a8a:	f383 8811 	msr	BASEPRI, r3
 8016a8e:	f3bf 8f6f 	isb	sy
 8016a92:	f3bf 8f4f 	dsb	sy
 8016a96:	607b      	str	r3, [r7, #4]
}
 8016a98:	bf00      	nop
 8016a9a:	bf00      	nop
 8016a9c:	e7fd      	b.n	8016a9a <vTaskSwitchContext+0x3e>
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	60fb      	str	r3, [r7, #12]
 8016aa4:	491d      	ldr	r1, [pc, #116]	@ (8016b1c <vTaskSwitchContext+0xc0>)
 8016aa6:	68fa      	ldr	r2, [r7, #12]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	4413      	add	r3, r2
 8016aae:	009b      	lsls	r3, r3, #2
 8016ab0:	440b      	add	r3, r1
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d0e3      	beq.n	8016a80 <vTaskSwitchContext+0x24>
 8016ab8:	68fa      	ldr	r2, [r7, #12]
 8016aba:	4613      	mov	r3, r2
 8016abc:	009b      	lsls	r3, r3, #2
 8016abe:	4413      	add	r3, r2
 8016ac0:	009b      	lsls	r3, r3, #2
 8016ac2:	4a16      	ldr	r2, [pc, #88]	@ (8016b1c <vTaskSwitchContext+0xc0>)
 8016ac4:	4413      	add	r3, r2
 8016ac6:	60bb      	str	r3, [r7, #8]
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	685a      	ldr	r2, [r3, #4]
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	605a      	str	r2, [r3, #4]
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	685a      	ldr	r2, [r3, #4]
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	3308      	adds	r3, #8
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d104      	bne.n	8016ae8 <vTaskSwitchContext+0x8c>
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	685a      	ldr	r2, [r3, #4]
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	605a      	str	r2, [r3, #4]
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	68db      	ldr	r3, [r3, #12]
 8016aee:	4a0c      	ldr	r2, [pc, #48]	@ (8016b20 <vTaskSwitchContext+0xc4>)
 8016af0:	6013      	str	r3, [r2, #0]
 8016af2:	4a09      	ldr	r2, [pc, #36]	@ (8016b18 <vTaskSwitchContext+0xbc>)
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016af8:	4b09      	ldr	r3, [pc, #36]	@ (8016b20 <vTaskSwitchContext+0xc4>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	3354      	adds	r3, #84	@ 0x54
 8016afe:	4a09      	ldr	r2, [pc, #36]	@ (8016b24 <vTaskSwitchContext+0xc8>)
 8016b00:	6013      	str	r3, [r2, #0]
}
 8016b02:	bf00      	nop
 8016b04:	3714      	adds	r7, #20
 8016b06:	46bd      	mov	sp, r7
 8016b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop
 8016b10:	20006398 	.word	0x20006398
 8016b14:	20006384 	.word	0x20006384
 8016b18:	20006378 	.word	0x20006378
 8016b1c:	20005ea0 	.word	0x20005ea0
 8016b20:	20005e9c 	.word	0x20005e9c
 8016b24:	20000160 	.word	0x20000160

08016b28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d10b      	bne.n	8016b50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8016b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b3c:	f383 8811 	msr	BASEPRI, r3
 8016b40:	f3bf 8f6f 	isb	sy
 8016b44:	f3bf 8f4f 	dsb	sy
 8016b48:	60fb      	str	r3, [r7, #12]
}
 8016b4a:	bf00      	nop
 8016b4c:	bf00      	nop
 8016b4e:	e7fd      	b.n	8016b4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b50:	4b07      	ldr	r3, [pc, #28]	@ (8016b70 <vTaskPlaceOnEventList+0x48>)
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	3318      	adds	r3, #24
 8016b56:	4619      	mov	r1, r3
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f7fe fcb2 	bl	80154c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b5e:	2101      	movs	r1, #1
 8016b60:	6838      	ldr	r0, [r7, #0]
 8016b62:	f000 fc79 	bl	8017458 <prvAddCurrentTaskToDelayedList>
}
 8016b66:	bf00      	nop
 8016b68:	3710      	adds	r7, #16
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}
 8016b6e:	bf00      	nop
 8016b70:	20005e9c 	.word	0x20005e9c

08016b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b086      	sub	sp, #24
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	60f8      	str	r0, [r7, #12]
 8016b7c:	60b9      	str	r1, [r7, #8]
 8016b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d10b      	bne.n	8016b9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8016b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b8a:	f383 8811 	msr	BASEPRI, r3
 8016b8e:	f3bf 8f6f 	isb	sy
 8016b92:	f3bf 8f4f 	dsb	sy
 8016b96:	617b      	str	r3, [r7, #20]
}
 8016b98:	bf00      	nop
 8016b9a:	bf00      	nop
 8016b9c:	e7fd      	b.n	8016b9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8016bc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	3318      	adds	r3, #24
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	68f8      	ldr	r0, [r7, #12]
 8016ba8:	f7fe fc67 	bl	801547a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d002      	beq.n	8016bb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8016bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016bb8:	6879      	ldr	r1, [r7, #4]
 8016bba:	68b8      	ldr	r0, [r7, #8]
 8016bbc:	f000 fc4c 	bl	8017458 <prvAddCurrentTaskToDelayedList>
	}
 8016bc0:	bf00      	nop
 8016bc2:	3718      	adds	r7, #24
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}
 8016bc8:	20005e9c 	.word	0x20005e9c

08016bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b086      	sub	sp, #24
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	68db      	ldr	r3, [r3, #12]
 8016bd8:	68db      	ldr	r3, [r3, #12]
 8016bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d10b      	bne.n	8016bfa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8016be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016be6:	f383 8811 	msr	BASEPRI, r3
 8016bea:	f3bf 8f6f 	isb	sy
 8016bee:	f3bf 8f4f 	dsb	sy
 8016bf2:	60fb      	str	r3, [r7, #12]
}
 8016bf4:	bf00      	nop
 8016bf6:	bf00      	nop
 8016bf8:	e7fd      	b.n	8016bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	3318      	adds	r3, #24
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7fe fc98 	bl	8015534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c04:	4b1d      	ldr	r3, [pc, #116]	@ (8016c7c <xTaskRemoveFromEventList+0xb0>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d11d      	bne.n	8016c48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016c0c:	693b      	ldr	r3, [r7, #16]
 8016c0e:	3304      	adds	r3, #4
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7fe fc8f 	bl	8015534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c1a:	4b19      	ldr	r3, [pc, #100]	@ (8016c80 <xTaskRemoveFromEventList+0xb4>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d903      	bls.n	8016c2a <xTaskRemoveFromEventList+0x5e>
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c26:	4a16      	ldr	r2, [pc, #88]	@ (8016c80 <xTaskRemoveFromEventList+0xb4>)
 8016c28:	6013      	str	r3, [r2, #0]
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c2e:	4613      	mov	r3, r2
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	4413      	add	r3, r2
 8016c34:	009b      	lsls	r3, r3, #2
 8016c36:	4a13      	ldr	r2, [pc, #76]	@ (8016c84 <xTaskRemoveFromEventList+0xb8>)
 8016c38:	441a      	add	r2, r3
 8016c3a:	693b      	ldr	r3, [r7, #16]
 8016c3c:	3304      	adds	r3, #4
 8016c3e:	4619      	mov	r1, r3
 8016c40:	4610      	mov	r0, r2
 8016c42:	f7fe fc1a 	bl	801547a <vListInsertEnd>
 8016c46:	e005      	b.n	8016c54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	3318      	adds	r3, #24
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	480e      	ldr	r0, [pc, #56]	@ (8016c88 <xTaskRemoveFromEventList+0xbc>)
 8016c50:	f7fe fc13 	bl	801547a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c58:	4b0c      	ldr	r3, [pc, #48]	@ (8016c8c <xTaskRemoveFromEventList+0xc0>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d905      	bls.n	8016c6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016c62:	2301      	movs	r3, #1
 8016c64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016c66:	4b0a      	ldr	r3, [pc, #40]	@ (8016c90 <xTaskRemoveFromEventList+0xc4>)
 8016c68:	2201      	movs	r2, #1
 8016c6a:	601a      	str	r2, [r3, #0]
 8016c6c:	e001      	b.n	8016c72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016c72:	697b      	ldr	r3, [r7, #20]
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3718      	adds	r7, #24
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	20006398 	.word	0x20006398
 8016c80:	20006378 	.word	0x20006378
 8016c84:	20005ea0 	.word	0x20005ea0
 8016c88:	20006330 	.word	0x20006330
 8016c8c:	20005e9c 	.word	0x20005e9c
 8016c90:	20006384 	.word	0x20006384

08016c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016c94:	b480      	push	{r7}
 8016c96:	b083      	sub	sp, #12
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c9c:	4b06      	ldr	r3, [pc, #24]	@ (8016cb8 <vTaskInternalSetTimeOutState+0x24>)
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016ca4:	4b05      	ldr	r3, [pc, #20]	@ (8016cbc <vTaskInternalSetTimeOutState+0x28>)
 8016ca6:	681a      	ldr	r2, [r3, #0]
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	605a      	str	r2, [r3, #4]
}
 8016cac:	bf00      	nop
 8016cae:	370c      	adds	r7, #12
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr
 8016cb8:	20006388 	.word	0x20006388
 8016cbc:	20006374 	.word	0x20006374

08016cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b088      	sub	sp, #32
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d10b      	bne.n	8016ce8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8016cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cd4:	f383 8811 	msr	BASEPRI, r3
 8016cd8:	f3bf 8f6f 	isb	sy
 8016cdc:	f3bf 8f4f 	dsb	sy
 8016ce0:	613b      	str	r3, [r7, #16]
}
 8016ce2:	bf00      	nop
 8016ce4:	bf00      	nop
 8016ce6:	e7fd      	b.n	8016ce4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d10b      	bne.n	8016d06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8016cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cf2:	f383 8811 	msr	BASEPRI, r3
 8016cf6:	f3bf 8f6f 	isb	sy
 8016cfa:	f3bf 8f4f 	dsb	sy
 8016cfe:	60fb      	str	r3, [r7, #12]
}
 8016d00:	bf00      	nop
 8016d02:	bf00      	nop
 8016d04:	e7fd      	b.n	8016d02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8016d06:	f001 f8e7 	bl	8017ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8016d80 <xTaskCheckForTimeOut+0xc0>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	69ba      	ldr	r2, [r7, #24]
 8016d16:	1ad3      	subs	r3, r2, r3
 8016d18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d22:	d102      	bne.n	8016d2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016d24:	2300      	movs	r3, #0
 8016d26:	61fb      	str	r3, [r7, #28]
 8016d28:	e023      	b.n	8016d72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	4b15      	ldr	r3, [pc, #84]	@ (8016d84 <xTaskCheckForTimeOut+0xc4>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d007      	beq.n	8016d46 <xTaskCheckForTimeOut+0x86>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	685b      	ldr	r3, [r3, #4]
 8016d3a:	69ba      	ldr	r2, [r7, #24]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d302      	bcc.n	8016d46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016d40:	2301      	movs	r3, #1
 8016d42:	61fb      	str	r3, [r7, #28]
 8016d44:	e015      	b.n	8016d72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	697a      	ldr	r2, [r7, #20]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d20b      	bcs.n	8016d68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	681a      	ldr	r2, [r3, #0]
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	1ad2      	subs	r2, r2, r3
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f7ff ff99 	bl	8016c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016d62:	2300      	movs	r3, #0
 8016d64:	61fb      	str	r3, [r7, #28]
 8016d66:	e004      	b.n	8016d72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016d6e:	2301      	movs	r3, #1
 8016d70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016d72:	f001 f8e3 	bl	8017f3c <vPortExitCritical>

	return xReturn;
 8016d76:	69fb      	ldr	r3, [r7, #28]
}
 8016d78:	4618      	mov	r0, r3
 8016d7a:	3720      	adds	r7, #32
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	bd80      	pop	{r7, pc}
 8016d80:	20006374 	.word	0x20006374
 8016d84:	20006388 	.word	0x20006388

08016d88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016d88:	b480      	push	{r7}
 8016d8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016d8c:	4b03      	ldr	r3, [pc, #12]	@ (8016d9c <vTaskMissedYield+0x14>)
 8016d8e:	2201      	movs	r2, #1
 8016d90:	601a      	str	r2, [r3, #0]
}
 8016d92:	bf00      	nop
 8016d94:	46bd      	mov	sp, r7
 8016d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9a:	4770      	bx	lr
 8016d9c:	20006384 	.word	0x20006384

08016da0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016da8:	f000 f852 	bl	8016e50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016dac:	4b06      	ldr	r3, [pc, #24]	@ (8016dc8 <prvIdleTask+0x28>)
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	d9f9      	bls.n	8016da8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016db4:	4b05      	ldr	r3, [pc, #20]	@ (8016dcc <prvIdleTask+0x2c>)
 8016db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016dba:	601a      	str	r2, [r3, #0]
 8016dbc:	f3bf 8f4f 	dsb	sy
 8016dc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016dc4:	e7f0      	b.n	8016da8 <prvIdleTask+0x8>
 8016dc6:	bf00      	nop
 8016dc8:	20005ea0 	.word	0x20005ea0
 8016dcc:	e000ed04 	.word	0xe000ed04

08016dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	607b      	str	r3, [r7, #4]
 8016dda:	e00c      	b.n	8016df6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	4613      	mov	r3, r2
 8016de0:	009b      	lsls	r3, r3, #2
 8016de2:	4413      	add	r3, r2
 8016de4:	009b      	lsls	r3, r3, #2
 8016de6:	4a12      	ldr	r2, [pc, #72]	@ (8016e30 <prvInitialiseTaskLists+0x60>)
 8016de8:	4413      	add	r3, r2
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7fe fb18 	bl	8015420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	3301      	adds	r3, #1
 8016df4:	607b      	str	r3, [r7, #4]
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2b37      	cmp	r3, #55	@ 0x37
 8016dfa:	d9ef      	bls.n	8016ddc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016dfc:	480d      	ldr	r0, [pc, #52]	@ (8016e34 <prvInitialiseTaskLists+0x64>)
 8016dfe:	f7fe fb0f 	bl	8015420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016e02:	480d      	ldr	r0, [pc, #52]	@ (8016e38 <prvInitialiseTaskLists+0x68>)
 8016e04:	f7fe fb0c 	bl	8015420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016e08:	480c      	ldr	r0, [pc, #48]	@ (8016e3c <prvInitialiseTaskLists+0x6c>)
 8016e0a:	f7fe fb09 	bl	8015420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016e0e:	480c      	ldr	r0, [pc, #48]	@ (8016e40 <prvInitialiseTaskLists+0x70>)
 8016e10:	f7fe fb06 	bl	8015420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016e14:	480b      	ldr	r0, [pc, #44]	@ (8016e44 <prvInitialiseTaskLists+0x74>)
 8016e16:	f7fe fb03 	bl	8015420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8016e48 <prvInitialiseTaskLists+0x78>)
 8016e1c:	4a05      	ldr	r2, [pc, #20]	@ (8016e34 <prvInitialiseTaskLists+0x64>)
 8016e1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016e20:	4b0a      	ldr	r3, [pc, #40]	@ (8016e4c <prvInitialiseTaskLists+0x7c>)
 8016e22:	4a05      	ldr	r2, [pc, #20]	@ (8016e38 <prvInitialiseTaskLists+0x68>)
 8016e24:	601a      	str	r2, [r3, #0]
}
 8016e26:	bf00      	nop
 8016e28:	3708      	adds	r7, #8
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}
 8016e2e:	bf00      	nop
 8016e30:	20005ea0 	.word	0x20005ea0
 8016e34:	20006300 	.word	0x20006300
 8016e38:	20006314 	.word	0x20006314
 8016e3c:	20006330 	.word	0x20006330
 8016e40:	20006344 	.word	0x20006344
 8016e44:	2000635c 	.word	0x2000635c
 8016e48:	20006328 	.word	0x20006328
 8016e4c:	2000632c 	.word	0x2000632c

08016e50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e56:	e019      	b.n	8016e8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016e58:	f001 f83e 	bl	8017ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e5c:	4b10      	ldr	r3, [pc, #64]	@ (8016ea0 <prvCheckTasksWaitingTermination+0x50>)
 8016e5e:	68db      	ldr	r3, [r3, #12]
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	3304      	adds	r3, #4
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7fe fb63 	bl	8015534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ea4 <prvCheckTasksWaitingTermination+0x54>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	3b01      	subs	r3, #1
 8016e74:	4a0b      	ldr	r2, [pc, #44]	@ (8016ea4 <prvCheckTasksWaitingTermination+0x54>)
 8016e76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016e78:	4b0b      	ldr	r3, [pc, #44]	@ (8016ea8 <prvCheckTasksWaitingTermination+0x58>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8016ea8 <prvCheckTasksWaitingTermination+0x58>)
 8016e80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016e82:	f001 f85b 	bl	8017f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 f810 	bl	8016eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e8c:	4b06      	ldr	r3, [pc, #24]	@ (8016ea8 <prvCheckTasksWaitingTermination+0x58>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d1e1      	bne.n	8016e58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e94:	bf00      	nop
 8016e96:	bf00      	nop
 8016e98:	3708      	adds	r7, #8
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	20006344 	.word	0x20006344
 8016ea4:	20006370 	.word	0x20006370
 8016ea8:	20006358 	.word	0x20006358

08016eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	3354      	adds	r3, #84	@ 0x54
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f005 f8b1 	bl	801c020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d108      	bne.n	8016eda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f001 f9f3 	bl	80182b8 <vPortFree>
				vPortFree( pxTCB );
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f001 f9f0 	bl	80182b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016ed8:	e019      	b.n	8016f0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d103      	bne.n	8016eec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f001 f9e7 	bl	80182b8 <vPortFree>
	}
 8016eea:	e010      	b.n	8016f0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016ef2:	2b02      	cmp	r3, #2
 8016ef4:	d00b      	beq.n	8016f0e <prvDeleteTCB+0x62>
	__asm volatile
 8016ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016efa:	f383 8811 	msr	BASEPRI, r3
 8016efe:	f3bf 8f6f 	isb	sy
 8016f02:	f3bf 8f4f 	dsb	sy
 8016f06:	60fb      	str	r3, [r7, #12]
}
 8016f08:	bf00      	nop
 8016f0a:	bf00      	nop
 8016f0c:	e7fd      	b.n	8016f0a <prvDeleteTCB+0x5e>
	}
 8016f0e:	bf00      	nop
 8016f10:	3710      	adds	r7, #16
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
	...

08016f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b083      	sub	sp, #12
 8016f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8016f50 <prvResetNextTaskUnblockTime+0x38>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d104      	bne.n	8016f32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016f28:	4b0a      	ldr	r3, [pc, #40]	@ (8016f54 <prvResetNextTaskUnblockTime+0x3c>)
 8016f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016f30:	e008      	b.n	8016f44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f32:	4b07      	ldr	r3, [pc, #28]	@ (8016f50 <prvResetNextTaskUnblockTime+0x38>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	68db      	ldr	r3, [r3, #12]
 8016f38:	68db      	ldr	r3, [r3, #12]
 8016f3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	685b      	ldr	r3, [r3, #4]
 8016f40:	4a04      	ldr	r2, [pc, #16]	@ (8016f54 <prvResetNextTaskUnblockTime+0x3c>)
 8016f42:	6013      	str	r3, [r2, #0]
}
 8016f44:	bf00      	nop
 8016f46:	370c      	adds	r7, #12
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr
 8016f50:	20006328 	.word	0x20006328
 8016f54:	20006390 	.word	0x20006390

08016f58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016f58:	b480      	push	{r7}
 8016f5a:	b083      	sub	sp, #12
 8016f5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016f5e:	4b05      	ldr	r3, [pc, #20]	@ (8016f74 <xTaskGetCurrentTaskHandle+0x1c>)
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016f64:	687b      	ldr	r3, [r7, #4]
	}
 8016f66:	4618      	mov	r0, r3
 8016f68:	370c      	adds	r7, #12
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f70:	4770      	bx	lr
 8016f72:	bf00      	nop
 8016f74:	20005e9c 	.word	0x20005e9c

08016f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016f78:	b480      	push	{r7}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8016fac <xTaskGetSchedulerState+0x34>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d102      	bne.n	8016f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016f86:	2301      	movs	r3, #1
 8016f88:	607b      	str	r3, [r7, #4]
 8016f8a:	e008      	b.n	8016f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f8c:	4b08      	ldr	r3, [pc, #32]	@ (8016fb0 <xTaskGetSchedulerState+0x38>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d102      	bne.n	8016f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016f94:	2302      	movs	r3, #2
 8016f96:	607b      	str	r3, [r7, #4]
 8016f98:	e001      	b.n	8016f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016f9e:	687b      	ldr	r3, [r7, #4]
	}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	370c      	adds	r7, #12
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016faa:	4770      	bx	lr
 8016fac:	2000637c 	.word	0x2000637c
 8016fb0:	20006398 	.word	0x20006398

08016fb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b084      	sub	sp, #16
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d051      	beq.n	801706e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016fce:	4b2a      	ldr	r3, [pc, #168]	@ (8017078 <xTaskPriorityInherit+0xc4>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d241      	bcs.n	801705c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016fd8:	68bb      	ldr	r3, [r7, #8]
 8016fda:	699b      	ldr	r3, [r3, #24]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	db06      	blt.n	8016fee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016fe0:	4b25      	ldr	r3, [pc, #148]	@ (8017078 <xTaskPriorityInherit+0xc4>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fe6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	6959      	ldr	r1, [r3, #20]
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ff6:	4613      	mov	r3, r2
 8016ff8:	009b      	lsls	r3, r3, #2
 8016ffa:	4413      	add	r3, r2
 8016ffc:	009b      	lsls	r3, r3, #2
 8016ffe:	4a1f      	ldr	r2, [pc, #124]	@ (801707c <xTaskPriorityInherit+0xc8>)
 8017000:	4413      	add	r3, r2
 8017002:	4299      	cmp	r1, r3
 8017004:	d122      	bne.n	801704c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	3304      	adds	r3, #4
 801700a:	4618      	mov	r0, r3
 801700c:	f7fe fa92 	bl	8015534 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017010:	4b19      	ldr	r3, [pc, #100]	@ (8017078 <xTaskPriorityInherit+0xc4>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801701e:	4b18      	ldr	r3, [pc, #96]	@ (8017080 <xTaskPriorityInherit+0xcc>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	429a      	cmp	r2, r3
 8017024:	d903      	bls.n	801702e <xTaskPriorityInherit+0x7a>
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801702a:	4a15      	ldr	r2, [pc, #84]	@ (8017080 <xTaskPriorityInherit+0xcc>)
 801702c:	6013      	str	r3, [r2, #0]
 801702e:	68bb      	ldr	r3, [r7, #8]
 8017030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017032:	4613      	mov	r3, r2
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	4413      	add	r3, r2
 8017038:	009b      	lsls	r3, r3, #2
 801703a:	4a10      	ldr	r2, [pc, #64]	@ (801707c <xTaskPriorityInherit+0xc8>)
 801703c:	441a      	add	r2, r3
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	3304      	adds	r3, #4
 8017042:	4619      	mov	r1, r3
 8017044:	4610      	mov	r0, r2
 8017046:	f7fe fa18 	bl	801547a <vListInsertEnd>
 801704a:	e004      	b.n	8017056 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801704c:	4b0a      	ldr	r3, [pc, #40]	@ (8017078 <xTaskPriorityInherit+0xc4>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017056:	2301      	movs	r3, #1
 8017058:	60fb      	str	r3, [r7, #12]
 801705a:	e008      	b.n	801706e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017060:	4b05      	ldr	r3, [pc, #20]	@ (8017078 <xTaskPriorityInherit+0xc4>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017066:	429a      	cmp	r2, r3
 8017068:	d201      	bcs.n	801706e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801706a:	2301      	movs	r3, #1
 801706c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801706e:	68fb      	ldr	r3, [r7, #12]
	}
 8017070:	4618      	mov	r0, r3
 8017072:	3710      	adds	r7, #16
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	20005e9c 	.word	0x20005e9c
 801707c:	20005ea0 	.word	0x20005ea0
 8017080:	20006378 	.word	0x20006378

08017084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017084:	b580      	push	{r7, lr}
 8017086:	b086      	sub	sp, #24
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017090:	2300      	movs	r3, #0
 8017092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d058      	beq.n	801714c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801709a:	4b2f      	ldr	r3, [pc, #188]	@ (8017158 <xTaskPriorityDisinherit+0xd4>)
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	693a      	ldr	r2, [r7, #16]
 80170a0:	429a      	cmp	r2, r3
 80170a2:	d00b      	beq.n	80170bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80170a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170a8:	f383 8811 	msr	BASEPRI, r3
 80170ac:	f3bf 8f6f 	isb	sy
 80170b0:	f3bf 8f4f 	dsb	sy
 80170b4:	60fb      	str	r3, [r7, #12]
}
 80170b6:	bf00      	nop
 80170b8:	bf00      	nop
 80170ba:	e7fd      	b.n	80170b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d10b      	bne.n	80170dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80170c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170c8:	f383 8811 	msr	BASEPRI, r3
 80170cc:	f3bf 8f6f 	isb	sy
 80170d0:	f3bf 8f4f 	dsb	sy
 80170d4:	60bb      	str	r3, [r7, #8]
}
 80170d6:	bf00      	nop
 80170d8:	bf00      	nop
 80170da:	e7fd      	b.n	80170d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80170dc:	693b      	ldr	r3, [r7, #16]
 80170de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170e0:	1e5a      	subs	r2, r3, #1
 80170e2:	693b      	ldr	r3, [r7, #16]
 80170e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80170e6:	693b      	ldr	r3, [r7, #16]
 80170e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80170ea:	693b      	ldr	r3, [r7, #16]
 80170ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d02c      	beq.n	801714c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d128      	bne.n	801714c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	3304      	adds	r3, #4
 80170fe:	4618      	mov	r0, r3
 8017100:	f7fe fa18 	bl	8015534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801710c:	693b      	ldr	r3, [r7, #16]
 801710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017110:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017118:	693b      	ldr	r3, [r7, #16]
 801711a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801711c:	4b0f      	ldr	r3, [pc, #60]	@ (801715c <xTaskPriorityDisinherit+0xd8>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	429a      	cmp	r2, r3
 8017122:	d903      	bls.n	801712c <xTaskPriorityDisinherit+0xa8>
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017128:	4a0c      	ldr	r2, [pc, #48]	@ (801715c <xTaskPriorityDisinherit+0xd8>)
 801712a:	6013      	str	r3, [r2, #0]
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017130:	4613      	mov	r3, r2
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	4413      	add	r3, r2
 8017136:	009b      	lsls	r3, r3, #2
 8017138:	4a09      	ldr	r2, [pc, #36]	@ (8017160 <xTaskPriorityDisinherit+0xdc>)
 801713a:	441a      	add	r2, r3
 801713c:	693b      	ldr	r3, [r7, #16]
 801713e:	3304      	adds	r3, #4
 8017140:	4619      	mov	r1, r3
 8017142:	4610      	mov	r0, r2
 8017144:	f7fe f999 	bl	801547a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017148:	2301      	movs	r3, #1
 801714a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801714c:	697b      	ldr	r3, [r7, #20]
	}
 801714e:	4618      	mov	r0, r3
 8017150:	3718      	adds	r7, #24
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	20005e9c 	.word	0x20005e9c
 801715c:	20006378 	.word	0x20006378
 8017160:	20005ea0 	.word	0x20005ea0

08017164 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017164:	b580      	push	{r7, lr}
 8017166:	b088      	sub	sp, #32
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017172:	2301      	movs	r3, #1
 8017174:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d06c      	beq.n	8017256 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017180:	2b00      	cmp	r3, #0
 8017182:	d10b      	bne.n	801719c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8017184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017188:	f383 8811 	msr	BASEPRI, r3
 801718c:	f3bf 8f6f 	isb	sy
 8017190:	f3bf 8f4f 	dsb	sy
 8017194:	60fb      	str	r3, [r7, #12]
}
 8017196:	bf00      	nop
 8017198:	bf00      	nop
 801719a:	e7fd      	b.n	8017198 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801719c:	69bb      	ldr	r3, [r7, #24]
 801719e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80171a0:	683a      	ldr	r2, [r7, #0]
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d902      	bls.n	80171ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	61fb      	str	r3, [r7, #28]
 80171aa:	e002      	b.n	80171b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80171ac:	69bb      	ldr	r3, [r7, #24]
 80171ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80171b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80171b2:	69bb      	ldr	r3, [r7, #24]
 80171b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171b6:	69fa      	ldr	r2, [r7, #28]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d04c      	beq.n	8017256 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80171bc:	69bb      	ldr	r3, [r7, #24]
 80171be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80171c0:	697a      	ldr	r2, [r7, #20]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d147      	bne.n	8017256 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80171c6:	4b26      	ldr	r3, [pc, #152]	@ (8017260 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	69ba      	ldr	r2, [r7, #24]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d10b      	bne.n	80171e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80171d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171d4:	f383 8811 	msr	BASEPRI, r3
 80171d8:	f3bf 8f6f 	isb	sy
 80171dc:	f3bf 8f4f 	dsb	sy
 80171e0:	60bb      	str	r3, [r7, #8]
}
 80171e2:	bf00      	nop
 80171e4:	bf00      	nop
 80171e6:	e7fd      	b.n	80171e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80171e8:	69bb      	ldr	r3, [r7, #24]
 80171ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80171ee:	69bb      	ldr	r3, [r7, #24]
 80171f0:	69fa      	ldr	r2, [r7, #28]
 80171f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80171f4:	69bb      	ldr	r3, [r7, #24]
 80171f6:	699b      	ldr	r3, [r3, #24]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	db04      	blt.n	8017206 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171fc:	69fb      	ldr	r3, [r7, #28]
 80171fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017202:	69bb      	ldr	r3, [r7, #24]
 8017204:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	6959      	ldr	r1, [r3, #20]
 801720a:	693a      	ldr	r2, [r7, #16]
 801720c:	4613      	mov	r3, r2
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	4413      	add	r3, r2
 8017212:	009b      	lsls	r3, r3, #2
 8017214:	4a13      	ldr	r2, [pc, #76]	@ (8017264 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017216:	4413      	add	r3, r2
 8017218:	4299      	cmp	r1, r3
 801721a:	d11c      	bne.n	8017256 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801721c:	69bb      	ldr	r3, [r7, #24]
 801721e:	3304      	adds	r3, #4
 8017220:	4618      	mov	r0, r3
 8017222:	f7fe f987 	bl	8015534 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017226:	69bb      	ldr	r3, [r7, #24]
 8017228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801722a:	4b0f      	ldr	r3, [pc, #60]	@ (8017268 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	429a      	cmp	r2, r3
 8017230:	d903      	bls.n	801723a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017236:	4a0c      	ldr	r2, [pc, #48]	@ (8017268 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017238:	6013      	str	r3, [r2, #0]
 801723a:	69bb      	ldr	r3, [r7, #24]
 801723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801723e:	4613      	mov	r3, r2
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	4413      	add	r3, r2
 8017244:	009b      	lsls	r3, r3, #2
 8017246:	4a07      	ldr	r2, [pc, #28]	@ (8017264 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017248:	441a      	add	r2, r3
 801724a:	69bb      	ldr	r3, [r7, #24]
 801724c:	3304      	adds	r3, #4
 801724e:	4619      	mov	r1, r3
 8017250:	4610      	mov	r0, r2
 8017252:	f7fe f912 	bl	801547a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017256:	bf00      	nop
 8017258:	3720      	adds	r7, #32
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}
 801725e:	bf00      	nop
 8017260:	20005e9c 	.word	0x20005e9c
 8017264:	20005ea0 	.word	0x20005ea0
 8017268:	20006378 	.word	0x20006378

0801726c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801726c:	b480      	push	{r7}
 801726e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017270:	4b07      	ldr	r3, [pc, #28]	@ (8017290 <pvTaskIncrementMutexHeldCount+0x24>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d004      	beq.n	8017282 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017278:	4b05      	ldr	r3, [pc, #20]	@ (8017290 <pvTaskIncrementMutexHeldCount+0x24>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801727e:	3201      	adds	r2, #1
 8017280:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8017282:	4b03      	ldr	r3, [pc, #12]	@ (8017290 <pvTaskIncrementMutexHeldCount+0x24>)
 8017284:	681b      	ldr	r3, [r3, #0]
	}
 8017286:	4618      	mov	r0, r3
 8017288:	46bd      	mov	sp, r7
 801728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728e:	4770      	bx	lr
 8017290:	20005e9c 	.word	0x20005e9c

08017294 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8017294:	b580      	push	{r7, lr}
 8017296:	b084      	sub	sp, #16
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801729e:	f000 fe1b 	bl	8017ed8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80172a2:	4b20      	ldr	r3, [pc, #128]	@ (8017324 <ulTaskNotifyTake+0x90>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d113      	bne.n	80172d6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80172ae:	4b1d      	ldr	r3, [pc, #116]	@ (8017324 <ulTaskNotifyTake+0x90>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2201      	movs	r2, #1
 80172b4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00b      	beq.n	80172d6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80172be:	2101      	movs	r1, #1
 80172c0:	6838      	ldr	r0, [r7, #0]
 80172c2:	f000 f8c9 	bl	8017458 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80172c6:	4b18      	ldr	r3, [pc, #96]	@ (8017328 <ulTaskNotifyTake+0x94>)
 80172c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	f3bf 8f4f 	dsb	sy
 80172d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80172d6:	f000 fe31 	bl	8017f3c <vPortExitCritical>

		taskENTER_CRITICAL();
 80172da:	f000 fdfd 	bl	8017ed8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80172de:	4b11      	ldr	r3, [pc, #68]	@ (8017324 <ulTaskNotifyTake+0x90>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80172e6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d00e      	beq.n	801730c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d005      	beq.n	8017300 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80172f4:	4b0b      	ldr	r3, [pc, #44]	@ (8017324 <ulTaskNotifyTake+0x90>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	2200      	movs	r2, #0
 80172fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80172fe:	e005      	b.n	801730c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8017300:	4b08      	ldr	r3, [pc, #32]	@ (8017324 <ulTaskNotifyTake+0x90>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	68fa      	ldr	r2, [r7, #12]
 8017306:	3a01      	subs	r2, #1
 8017308:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801730c:	4b05      	ldr	r3, [pc, #20]	@ (8017324 <ulTaskNotifyTake+0x90>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2200      	movs	r2, #0
 8017312:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8017316:	f000 fe11 	bl	8017f3c <vPortExitCritical>

		return ulReturn;
 801731a:	68fb      	ldr	r3, [r7, #12]
	}
 801731c:	4618      	mov	r0, r3
 801731e:	3710      	adds	r7, #16
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	20005e9c 	.word	0x20005e9c
 8017328:	e000ed04 	.word	0xe000ed04

0801732c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801732c:	b580      	push	{r7, lr}
 801732e:	b08a      	sub	sp, #40	@ 0x28
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d10b      	bne.n	8017354 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 801733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017340:	f383 8811 	msr	BASEPRI, r3
 8017344:	f3bf 8f6f 	isb	sy
 8017348:	f3bf 8f4f 	dsb	sy
 801734c:	61bb      	str	r3, [r7, #24]
}
 801734e:	bf00      	nop
 8017350:	bf00      	nop
 8017352:	e7fd      	b.n	8017350 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017354:	f000 fea0 	bl	8018098 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 801735c:	f3ef 8211 	mrs	r2, BASEPRI
 8017360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017364:	f383 8811 	msr	BASEPRI, r3
 8017368:	f3bf 8f6f 	isb	sy
 801736c:	f3bf 8f4f 	dsb	sy
 8017370:	617a      	str	r2, [r7, #20]
 8017372:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017374:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017376:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801737a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801737e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017382:	2202      	movs	r2, #2
 8017384:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8017388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801738a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801738e:	1c5a      	adds	r2, r3, #1
 8017390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017392:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017396:	7ffb      	ldrb	r3, [r7, #31]
 8017398:	2b01      	cmp	r3, #1
 801739a:	d147      	bne.n	801742c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d00b      	beq.n	80173bc <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80173a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a8:	f383 8811 	msr	BASEPRI, r3
 80173ac:	f3bf 8f6f 	isb	sy
 80173b0:	f3bf 8f4f 	dsb	sy
 80173b4:	60fb      	str	r3, [r7, #12]
}
 80173b6:	bf00      	nop
 80173b8:	bf00      	nop
 80173ba:	e7fd      	b.n	80173b8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80173bc:	4b20      	ldr	r3, [pc, #128]	@ (8017440 <vTaskNotifyGiveFromISR+0x114>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d11d      	bne.n	8017400 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173c6:	3304      	adds	r3, #4
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7fe f8b3 	bl	8015534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80173ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80173d2:	4b1c      	ldr	r3, [pc, #112]	@ (8017444 <vTaskNotifyGiveFromISR+0x118>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	429a      	cmp	r2, r3
 80173d8:	d903      	bls.n	80173e2 <vTaskNotifyGiveFromISR+0xb6>
 80173da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173de:	4a19      	ldr	r2, [pc, #100]	@ (8017444 <vTaskNotifyGiveFromISR+0x118>)
 80173e0:	6013      	str	r3, [r2, #0]
 80173e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80173e6:	4613      	mov	r3, r2
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	4413      	add	r3, r2
 80173ec:	009b      	lsls	r3, r3, #2
 80173ee:	4a16      	ldr	r2, [pc, #88]	@ (8017448 <vTaskNotifyGiveFromISR+0x11c>)
 80173f0:	441a      	add	r2, r3
 80173f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f4:	3304      	adds	r3, #4
 80173f6:	4619      	mov	r1, r3
 80173f8:	4610      	mov	r0, r2
 80173fa:	f7fe f83e 	bl	801547a <vListInsertEnd>
 80173fe:	e005      	b.n	801740c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017402:	3318      	adds	r3, #24
 8017404:	4619      	mov	r1, r3
 8017406:	4811      	ldr	r0, [pc, #68]	@ (801744c <vTaskNotifyGiveFromISR+0x120>)
 8017408:	f7fe f837 	bl	801547a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801740e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017410:	4b0f      	ldr	r3, [pc, #60]	@ (8017450 <vTaskNotifyGiveFromISR+0x124>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017416:	429a      	cmp	r2, r3
 8017418:	d908      	bls.n	801742c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d002      	beq.n	8017426 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	2201      	movs	r2, #1
 8017424:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017426:	4b0b      	ldr	r3, [pc, #44]	@ (8017454 <vTaskNotifyGiveFromISR+0x128>)
 8017428:	2201      	movs	r2, #1
 801742a:	601a      	str	r2, [r3, #0]
 801742c:	6a3b      	ldr	r3, [r7, #32]
 801742e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	f383 8811 	msr	BASEPRI, r3
}
 8017436:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8017438:	bf00      	nop
 801743a:	3728      	adds	r7, #40	@ 0x28
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	20006398 	.word	0x20006398
 8017444:	20006378 	.word	0x20006378
 8017448:	20005ea0 	.word	0x20005ea0
 801744c:	20006330 	.word	0x20006330
 8017450:	20005e9c 	.word	0x20005e9c
 8017454:	20006384 	.word	0x20006384

08017458 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017462:	4b21      	ldr	r3, [pc, #132]	@ (80174e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017468:	4b20      	ldr	r3, [pc, #128]	@ (80174ec <prvAddCurrentTaskToDelayedList+0x94>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	3304      	adds	r3, #4
 801746e:	4618      	mov	r0, r3
 8017470:	f7fe f860 	bl	8015534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801747a:	d10a      	bne.n	8017492 <prvAddCurrentTaskToDelayedList+0x3a>
 801747c:	683b      	ldr	r3, [r7, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d007      	beq.n	8017492 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017482:	4b1a      	ldr	r3, [pc, #104]	@ (80174ec <prvAddCurrentTaskToDelayedList+0x94>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	3304      	adds	r3, #4
 8017488:	4619      	mov	r1, r3
 801748a:	4819      	ldr	r0, [pc, #100]	@ (80174f0 <prvAddCurrentTaskToDelayedList+0x98>)
 801748c:	f7fd fff5 	bl	801547a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017490:	e026      	b.n	80174e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017492:	68fa      	ldr	r2, [r7, #12]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	4413      	add	r3, r2
 8017498:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801749a:	4b14      	ldr	r3, [pc, #80]	@ (80174ec <prvAddCurrentTaskToDelayedList+0x94>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	68ba      	ldr	r2, [r7, #8]
 80174a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80174a2:	68ba      	ldr	r2, [r7, #8]
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	429a      	cmp	r2, r3
 80174a8:	d209      	bcs.n	80174be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80174aa:	4b12      	ldr	r3, [pc, #72]	@ (80174f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80174ac:	681a      	ldr	r2, [r3, #0]
 80174ae:	4b0f      	ldr	r3, [pc, #60]	@ (80174ec <prvAddCurrentTaskToDelayedList+0x94>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	3304      	adds	r3, #4
 80174b4:	4619      	mov	r1, r3
 80174b6:	4610      	mov	r0, r2
 80174b8:	f7fe f803 	bl	80154c2 <vListInsert>
}
 80174bc:	e010      	b.n	80174e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80174be:	4b0e      	ldr	r3, [pc, #56]	@ (80174f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80174c0:	681a      	ldr	r2, [r3, #0]
 80174c2:	4b0a      	ldr	r3, [pc, #40]	@ (80174ec <prvAddCurrentTaskToDelayedList+0x94>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	3304      	adds	r3, #4
 80174c8:	4619      	mov	r1, r3
 80174ca:	4610      	mov	r0, r2
 80174cc:	f7fd fff9 	bl	80154c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80174d0:	4b0a      	ldr	r3, [pc, #40]	@ (80174fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	68ba      	ldr	r2, [r7, #8]
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d202      	bcs.n	80174e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80174da:	4a08      	ldr	r2, [pc, #32]	@ (80174fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	6013      	str	r3, [r2, #0]
}
 80174e0:	bf00      	nop
 80174e2:	3710      	adds	r7, #16
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}
 80174e8:	20006374 	.word	0x20006374
 80174ec:	20005e9c 	.word	0x20005e9c
 80174f0:	2000635c 	.word	0x2000635c
 80174f4:	2000632c 	.word	0x2000632c
 80174f8:	20006328 	.word	0x20006328
 80174fc:	20006390 	.word	0x20006390

08017500 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b08a      	sub	sp, #40	@ 0x28
 8017504:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017506:	2300      	movs	r3, #0
 8017508:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801750a:	f000 fb71 	bl	8017bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801750e:	4b1d      	ldr	r3, [pc, #116]	@ (8017584 <xTimerCreateTimerTask+0x84>)
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d021      	beq.n	801755a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017516:	2300      	movs	r3, #0
 8017518:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801751a:	2300      	movs	r3, #0
 801751c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801751e:	1d3a      	adds	r2, r7, #4
 8017520:	f107 0108 	add.w	r1, r7, #8
 8017524:	f107 030c 	add.w	r3, r7, #12
 8017528:	4618      	mov	r0, r3
 801752a:	f7fd ff5f 	bl	80153ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801752e:	6879      	ldr	r1, [r7, #4]
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	68fa      	ldr	r2, [r7, #12]
 8017534:	9202      	str	r2, [sp, #8]
 8017536:	9301      	str	r3, [sp, #4]
 8017538:	2302      	movs	r3, #2
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	2300      	movs	r3, #0
 801753e:	460a      	mov	r2, r1
 8017540:	4911      	ldr	r1, [pc, #68]	@ (8017588 <xTimerCreateTimerTask+0x88>)
 8017542:	4812      	ldr	r0, [pc, #72]	@ (801758c <xTimerCreateTimerTask+0x8c>)
 8017544:	f7fe feb0 	bl	80162a8 <xTaskCreateStatic>
 8017548:	4603      	mov	r3, r0
 801754a:	4a11      	ldr	r2, [pc, #68]	@ (8017590 <xTimerCreateTimerTask+0x90>)
 801754c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801754e:	4b10      	ldr	r3, [pc, #64]	@ (8017590 <xTimerCreateTimerTask+0x90>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d001      	beq.n	801755a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017556:	2301      	movs	r3, #1
 8017558:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801755a:	697b      	ldr	r3, [r7, #20]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d10b      	bne.n	8017578 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8017560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017564:	f383 8811 	msr	BASEPRI, r3
 8017568:	f3bf 8f6f 	isb	sy
 801756c:	f3bf 8f4f 	dsb	sy
 8017570:	613b      	str	r3, [r7, #16]
}
 8017572:	bf00      	nop
 8017574:	bf00      	nop
 8017576:	e7fd      	b.n	8017574 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017578:	697b      	ldr	r3, [r7, #20]
}
 801757a:	4618      	mov	r0, r3
 801757c:	3718      	adds	r7, #24
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	200063cc 	.word	0x200063cc
 8017588:	08021f30 	.word	0x08021f30
 801758c:	08017789 	.word	0x08017789
 8017590:	200063d0 	.word	0x200063d0

08017594 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8017594:	b580      	push	{r7, lr}
 8017596:	b088      	sub	sp, #32
 8017598:	af02      	add	r7, sp, #8
 801759a:	60f8      	str	r0, [r7, #12]
 801759c:	60b9      	str	r1, [r7, #8]
 801759e:	607a      	str	r2, [r7, #4]
 80175a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80175a2:	202c      	movs	r0, #44	@ 0x2c
 80175a4:	f000 fdba 	bl	801811c <pvPortMalloc>
 80175a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80175aa:	697b      	ldr	r3, [r7, #20]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d00d      	beq.n	80175cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	2200      	movs	r2, #0
 80175b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80175b8:	697b      	ldr	r3, [r7, #20]
 80175ba:	9301      	str	r3, [sp, #4]
 80175bc:	6a3b      	ldr	r3, [r7, #32]
 80175be:	9300      	str	r3, [sp, #0]
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	687a      	ldr	r2, [r7, #4]
 80175c4:	68b9      	ldr	r1, [r7, #8]
 80175c6:	68f8      	ldr	r0, [r7, #12]
 80175c8:	f000 f805 	bl	80175d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80175cc:	697b      	ldr	r3, [r7, #20]
	}
 80175ce:	4618      	mov	r0, r3
 80175d0:	3718      	adds	r7, #24
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}

080175d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80175d6:	b580      	push	{r7, lr}
 80175d8:	b086      	sub	sp, #24
 80175da:	af00      	add	r7, sp, #0
 80175dc:	60f8      	str	r0, [r7, #12]
 80175de:	60b9      	str	r1, [r7, #8]
 80175e0:	607a      	str	r2, [r7, #4]
 80175e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d10b      	bne.n	8017602 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80175ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175ee:	f383 8811 	msr	BASEPRI, r3
 80175f2:	f3bf 8f6f 	isb	sy
 80175f6:	f3bf 8f4f 	dsb	sy
 80175fa:	617b      	str	r3, [r7, #20]
}
 80175fc:	bf00      	nop
 80175fe:	bf00      	nop
 8017600:	e7fd      	b.n	80175fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8017602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017604:	2b00      	cmp	r3, #0
 8017606:	d01e      	beq.n	8017646 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8017608:	f000 faf2 	bl	8017bf0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801760e:	68fa      	ldr	r2, [r7, #12]
 8017610:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8017612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017614:	68ba      	ldr	r2, [r7, #8]
 8017616:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8017618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801761a:	683a      	ldr	r2, [r7, #0]
 801761c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017620:	6a3a      	ldr	r2, [r7, #32]
 8017622:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8017624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017626:	3304      	adds	r3, #4
 8017628:	4618      	mov	r0, r3
 801762a:	f7fd ff19 	bl	8015460 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d008      	beq.n	8017646 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8017634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801763a:	f043 0304 	orr.w	r3, r3, #4
 801763e:	b2da      	uxtb	r2, r3
 8017640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8017646:	bf00      	nop
 8017648:	3718      	adds	r7, #24
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
	...

08017650 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017650:	b580      	push	{r7, lr}
 8017652:	b08a      	sub	sp, #40	@ 0x28
 8017654:	af00      	add	r7, sp, #0
 8017656:	60f8      	str	r0, [r7, #12]
 8017658:	60b9      	str	r1, [r7, #8]
 801765a:	607a      	str	r2, [r7, #4]
 801765c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801765e:	2300      	movs	r3, #0
 8017660:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d10b      	bne.n	8017680 <xTimerGenericCommand+0x30>
	__asm volatile
 8017668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801766c:	f383 8811 	msr	BASEPRI, r3
 8017670:	f3bf 8f6f 	isb	sy
 8017674:	f3bf 8f4f 	dsb	sy
 8017678:	623b      	str	r3, [r7, #32]
}
 801767a:	bf00      	nop
 801767c:	bf00      	nop
 801767e:	e7fd      	b.n	801767c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017680:	4b19      	ldr	r3, [pc, #100]	@ (80176e8 <xTimerGenericCommand+0x98>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d02a      	beq.n	80176de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	2b05      	cmp	r3, #5
 8017698:	dc18      	bgt.n	80176cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801769a:	f7ff fc6d 	bl	8016f78 <xTaskGetSchedulerState>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b02      	cmp	r3, #2
 80176a2:	d109      	bne.n	80176b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80176a4:	4b10      	ldr	r3, [pc, #64]	@ (80176e8 <xTimerGenericCommand+0x98>)
 80176a6:	6818      	ldr	r0, [r3, #0]
 80176a8:	f107 0110 	add.w	r1, r7, #16
 80176ac:	2300      	movs	r3, #0
 80176ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80176b0:	f7fe f8e2 	bl	8015878 <xQueueGenericSend>
 80176b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80176b6:	e012      	b.n	80176de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80176b8:	4b0b      	ldr	r3, [pc, #44]	@ (80176e8 <xTimerGenericCommand+0x98>)
 80176ba:	6818      	ldr	r0, [r3, #0]
 80176bc:	f107 0110 	add.w	r1, r7, #16
 80176c0:	2300      	movs	r3, #0
 80176c2:	2200      	movs	r2, #0
 80176c4:	f7fe f8d8 	bl	8015878 <xQueueGenericSend>
 80176c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80176ca:	e008      	b.n	80176de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80176cc:	4b06      	ldr	r3, [pc, #24]	@ (80176e8 <xTimerGenericCommand+0x98>)
 80176ce:	6818      	ldr	r0, [r3, #0]
 80176d0:	f107 0110 	add.w	r1, r7, #16
 80176d4:	2300      	movs	r3, #0
 80176d6:	683a      	ldr	r2, [r7, #0]
 80176d8:	f7fe f9d0 	bl	8015a7c <xQueueGenericSendFromISR>
 80176dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80176de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	3728      	adds	r7, #40	@ 0x28
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}
 80176e8:	200063cc 	.word	0x200063cc

080176ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b088      	sub	sp, #32
 80176f0:	af02      	add	r7, sp, #8
 80176f2:	6078      	str	r0, [r7, #4]
 80176f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80176f6:	4b23      	ldr	r3, [pc, #140]	@ (8017784 <prvProcessExpiredTimer+0x98>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	68db      	ldr	r3, [r3, #12]
 80176fc:	68db      	ldr	r3, [r3, #12]
 80176fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017700:	697b      	ldr	r3, [r7, #20]
 8017702:	3304      	adds	r3, #4
 8017704:	4618      	mov	r0, r3
 8017706:	f7fd ff15 	bl	8015534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017710:	f003 0304 	and.w	r3, r3, #4
 8017714:	2b00      	cmp	r3, #0
 8017716:	d023      	beq.n	8017760 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017718:	697b      	ldr	r3, [r7, #20]
 801771a:	699a      	ldr	r2, [r3, #24]
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	18d1      	adds	r1, r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	6978      	ldr	r0, [r7, #20]
 8017726:	f000 f8d5 	bl	80178d4 <prvInsertTimerInActiveList>
 801772a:	4603      	mov	r3, r0
 801772c:	2b00      	cmp	r3, #0
 801772e:	d020      	beq.n	8017772 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017730:	2300      	movs	r3, #0
 8017732:	9300      	str	r3, [sp, #0]
 8017734:	2300      	movs	r3, #0
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	2100      	movs	r1, #0
 801773a:	6978      	ldr	r0, [r7, #20]
 801773c:	f7ff ff88 	bl	8017650 <xTimerGenericCommand>
 8017740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017742:	693b      	ldr	r3, [r7, #16]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d114      	bne.n	8017772 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8017748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801774c:	f383 8811 	msr	BASEPRI, r3
 8017750:	f3bf 8f6f 	isb	sy
 8017754:	f3bf 8f4f 	dsb	sy
 8017758:	60fb      	str	r3, [r7, #12]
}
 801775a:	bf00      	nop
 801775c:	bf00      	nop
 801775e:	e7fd      	b.n	801775c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017760:	697b      	ldr	r3, [r7, #20]
 8017762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017766:	f023 0301 	bic.w	r3, r3, #1
 801776a:	b2da      	uxtb	r2, r3
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017772:	697b      	ldr	r3, [r7, #20]
 8017774:	6a1b      	ldr	r3, [r3, #32]
 8017776:	6978      	ldr	r0, [r7, #20]
 8017778:	4798      	blx	r3
}
 801777a:	bf00      	nop
 801777c:	3718      	adds	r7, #24
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	200063c4 	.word	0x200063c4

08017788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b084      	sub	sp, #16
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017790:	f107 0308 	add.w	r3, r7, #8
 8017794:	4618      	mov	r0, r3
 8017796:	f000 f859 	bl	801784c <prvGetNextExpireTime>
 801779a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801779c:	68bb      	ldr	r3, [r7, #8]
 801779e:	4619      	mov	r1, r3
 80177a0:	68f8      	ldr	r0, [r7, #12]
 80177a2:	f000 f805 	bl	80177b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80177a6:	f000 f8d7 	bl	8017958 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80177aa:	bf00      	nop
 80177ac:	e7f0      	b.n	8017790 <prvTimerTask+0x8>
	...

080177b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
 80177b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80177ba:	f7fe ffd9 	bl	8016770 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80177be:	f107 0308 	add.w	r3, r7, #8
 80177c2:	4618      	mov	r0, r3
 80177c4:	f000 f866 	bl	8017894 <prvSampleTimeNow>
 80177c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d130      	bne.n	8017832 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80177d0:	683b      	ldr	r3, [r7, #0]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d10a      	bne.n	80177ec <prvProcessTimerOrBlockTask+0x3c>
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d806      	bhi.n	80177ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80177de:	f7fe ffd5 	bl	801678c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80177e2:	68f9      	ldr	r1, [r7, #12]
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f7ff ff81 	bl	80176ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80177ea:	e024      	b.n	8017836 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d008      	beq.n	8017804 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80177f2:	4b13      	ldr	r3, [pc, #76]	@ (8017840 <prvProcessTimerOrBlockTask+0x90>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d101      	bne.n	8017800 <prvProcessTimerOrBlockTask+0x50>
 80177fc:	2301      	movs	r3, #1
 80177fe:	e000      	b.n	8017802 <prvProcessTimerOrBlockTask+0x52>
 8017800:	2300      	movs	r3, #0
 8017802:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017804:	4b0f      	ldr	r3, [pc, #60]	@ (8017844 <prvProcessTimerOrBlockTask+0x94>)
 8017806:	6818      	ldr	r0, [r3, #0]
 8017808:	687a      	ldr	r2, [r7, #4]
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	1ad3      	subs	r3, r2, r3
 801780e:	683a      	ldr	r2, [r7, #0]
 8017810:	4619      	mov	r1, r3
 8017812:	f7fe fd15 	bl	8016240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017816:	f7fe ffb9 	bl	801678c <xTaskResumeAll>
 801781a:	4603      	mov	r3, r0
 801781c:	2b00      	cmp	r3, #0
 801781e:	d10a      	bne.n	8017836 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017820:	4b09      	ldr	r3, [pc, #36]	@ (8017848 <prvProcessTimerOrBlockTask+0x98>)
 8017822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017826:	601a      	str	r2, [r3, #0]
 8017828:	f3bf 8f4f 	dsb	sy
 801782c:	f3bf 8f6f 	isb	sy
}
 8017830:	e001      	b.n	8017836 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017832:	f7fe ffab 	bl	801678c <xTaskResumeAll>
}
 8017836:	bf00      	nop
 8017838:	3710      	adds	r7, #16
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
 801783e:	bf00      	nop
 8017840:	200063c8 	.word	0x200063c8
 8017844:	200063cc 	.word	0x200063cc
 8017848:	e000ed04 	.word	0xe000ed04

0801784c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801784c:	b480      	push	{r7}
 801784e:	b085      	sub	sp, #20
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017854:	4b0e      	ldr	r3, [pc, #56]	@ (8017890 <prvGetNextExpireTime+0x44>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d101      	bne.n	8017862 <prvGetNextExpireTime+0x16>
 801785e:	2201      	movs	r2, #1
 8017860:	e000      	b.n	8017864 <prvGetNextExpireTime+0x18>
 8017862:	2200      	movs	r2, #0
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d105      	bne.n	801787c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017870:	4b07      	ldr	r3, [pc, #28]	@ (8017890 <prvGetNextExpireTime+0x44>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	68db      	ldr	r3, [r3, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	60fb      	str	r3, [r7, #12]
 801787a:	e001      	b.n	8017880 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801787c:	2300      	movs	r3, #0
 801787e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017880:	68fb      	ldr	r3, [r7, #12]
}
 8017882:	4618      	mov	r0, r3
 8017884:	3714      	adds	r7, #20
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr
 801788e:	bf00      	nop
 8017890:	200063c4 	.word	0x200063c4

08017894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801789c:	f7ff f814 	bl	80168c8 <xTaskGetTickCount>
 80178a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80178a2:	4b0b      	ldr	r3, [pc, #44]	@ (80178d0 <prvSampleTimeNow+0x3c>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	68fa      	ldr	r2, [r7, #12]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d205      	bcs.n	80178b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80178ac:	f000 f93a 	bl	8017b24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2201      	movs	r2, #1
 80178b4:	601a      	str	r2, [r3, #0]
 80178b6:	e002      	b.n	80178be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	2200      	movs	r2, #0
 80178bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80178be:	4a04      	ldr	r2, [pc, #16]	@ (80178d0 <prvSampleTimeNow+0x3c>)
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80178c4:	68fb      	ldr	r3, [r7, #12]
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	3710      	adds	r7, #16
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}
 80178ce:	bf00      	nop
 80178d0:	200063d4 	.word	0x200063d4

080178d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b086      	sub	sp, #24
 80178d8:	af00      	add	r7, sp, #0
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	607a      	str	r2, [r7, #4]
 80178e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80178e2:	2300      	movs	r3, #0
 80178e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	68ba      	ldr	r2, [r7, #8]
 80178ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	68fa      	ldr	r2, [r7, #12]
 80178f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80178f2:	68ba      	ldr	r2, [r7, #8]
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d812      	bhi.n	8017920 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178fa:	687a      	ldr	r2, [r7, #4]
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	1ad2      	subs	r2, r2, r3
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	699b      	ldr	r3, [r3, #24]
 8017904:	429a      	cmp	r2, r3
 8017906:	d302      	bcc.n	801790e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017908:	2301      	movs	r3, #1
 801790a:	617b      	str	r3, [r7, #20]
 801790c:	e01b      	b.n	8017946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801790e:	4b10      	ldr	r3, [pc, #64]	@ (8017950 <prvInsertTimerInActiveList+0x7c>)
 8017910:	681a      	ldr	r2, [r3, #0]
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	3304      	adds	r3, #4
 8017916:	4619      	mov	r1, r3
 8017918:	4610      	mov	r0, r2
 801791a:	f7fd fdd2 	bl	80154c2 <vListInsert>
 801791e:	e012      	b.n	8017946 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	429a      	cmp	r2, r3
 8017926:	d206      	bcs.n	8017936 <prvInsertTimerInActiveList+0x62>
 8017928:	68ba      	ldr	r2, [r7, #8]
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	429a      	cmp	r2, r3
 801792e:	d302      	bcc.n	8017936 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017930:	2301      	movs	r3, #1
 8017932:	617b      	str	r3, [r7, #20]
 8017934:	e007      	b.n	8017946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017936:	4b07      	ldr	r3, [pc, #28]	@ (8017954 <prvInsertTimerInActiveList+0x80>)
 8017938:	681a      	ldr	r2, [r3, #0]
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	3304      	adds	r3, #4
 801793e:	4619      	mov	r1, r3
 8017940:	4610      	mov	r0, r2
 8017942:	f7fd fdbe 	bl	80154c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017946:	697b      	ldr	r3, [r7, #20]
}
 8017948:	4618      	mov	r0, r3
 801794a:	3718      	adds	r7, #24
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	200063c8 	.word	0x200063c8
 8017954:	200063c4 	.word	0x200063c4

08017958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b08e      	sub	sp, #56	@ 0x38
 801795c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801795e:	e0ce      	b.n	8017afe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	da19      	bge.n	801799a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017966:	1d3b      	adds	r3, r7, #4
 8017968:	3304      	adds	r3, #4
 801796a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801796e:	2b00      	cmp	r3, #0
 8017970:	d10b      	bne.n	801798a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8017972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017976:	f383 8811 	msr	BASEPRI, r3
 801797a:	f3bf 8f6f 	isb	sy
 801797e:	f3bf 8f4f 	dsb	sy
 8017982:	61fb      	str	r3, [r7, #28]
}
 8017984:	bf00      	nop
 8017986:	bf00      	nop
 8017988:	e7fd      	b.n	8017986 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801798a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017990:	6850      	ldr	r0, [r2, #4]
 8017992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017994:	6892      	ldr	r2, [r2, #8]
 8017996:	4611      	mov	r1, r2
 8017998:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2b00      	cmp	r3, #0
 801799e:	f2c0 80ae 	blt.w	8017afe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80179a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179a8:	695b      	ldr	r3, [r3, #20]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d004      	beq.n	80179b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80179ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179b0:	3304      	adds	r3, #4
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fd fdbe 	bl	8015534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80179b8:	463b      	mov	r3, r7
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7ff ff6a 	bl	8017894 <prvSampleTimeNow>
 80179c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2b09      	cmp	r3, #9
 80179c6:	f200 8097 	bhi.w	8017af8 <prvProcessReceivedCommands+0x1a0>
 80179ca:	a201      	add	r2, pc, #4	@ (adr r2, 80179d0 <prvProcessReceivedCommands+0x78>)
 80179cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179d0:	080179f9 	.word	0x080179f9
 80179d4:	080179f9 	.word	0x080179f9
 80179d8:	080179f9 	.word	0x080179f9
 80179dc:	08017a6f 	.word	0x08017a6f
 80179e0:	08017a83 	.word	0x08017a83
 80179e4:	08017acf 	.word	0x08017acf
 80179e8:	080179f9 	.word	0x080179f9
 80179ec:	080179f9 	.word	0x080179f9
 80179f0:	08017a6f 	.word	0x08017a6f
 80179f4:	08017a83 	.word	0x08017a83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80179f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80179fe:	f043 0301 	orr.w	r3, r3, #1
 8017a02:	b2da      	uxtb	r2, r3
 8017a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017a0a:	68ba      	ldr	r2, [r7, #8]
 8017a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a0e:	699b      	ldr	r3, [r3, #24]
 8017a10:	18d1      	adds	r1, r2, r3
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017a18:	f7ff ff5c 	bl	80178d4 <prvInsertTimerInActiveList>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d06c      	beq.n	8017afc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a24:	6a1b      	ldr	r3, [r3, #32]
 8017a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017a28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017a30:	f003 0304 	and.w	r3, r3, #4
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d061      	beq.n	8017afc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017a38:	68ba      	ldr	r2, [r7, #8]
 8017a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a3c:	699b      	ldr	r3, [r3, #24]
 8017a3e:	441a      	add	r2, r3
 8017a40:	2300      	movs	r3, #0
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	2300      	movs	r3, #0
 8017a46:	2100      	movs	r1, #0
 8017a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017a4a:	f7ff fe01 	bl	8017650 <xTimerGenericCommand>
 8017a4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017a50:	6a3b      	ldr	r3, [r7, #32]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d152      	bne.n	8017afc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8017a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a5a:	f383 8811 	msr	BASEPRI, r3
 8017a5e:	f3bf 8f6f 	isb	sy
 8017a62:	f3bf 8f4f 	dsb	sy
 8017a66:	61bb      	str	r3, [r7, #24]
}
 8017a68:	bf00      	nop
 8017a6a:	bf00      	nop
 8017a6c:	e7fd      	b.n	8017a6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017a74:	f023 0301 	bic.w	r3, r3, #1
 8017a78:	b2da      	uxtb	r2, r3
 8017a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017a80:	e03d      	b.n	8017afe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017a88:	f043 0301 	orr.w	r3, r3, #1
 8017a8c:	b2da      	uxtb	r2, r3
 8017a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017a94:	68ba      	ldr	r2, [r7, #8]
 8017a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a9c:	699b      	ldr	r3, [r3, #24]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d10b      	bne.n	8017aba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8017aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017aa6:	f383 8811 	msr	BASEPRI, r3
 8017aaa:	f3bf 8f6f 	isb	sy
 8017aae:	f3bf 8f4f 	dsb	sy
 8017ab2:	617b      	str	r3, [r7, #20]
}
 8017ab4:	bf00      	nop
 8017ab6:	bf00      	nop
 8017ab8:	e7fd      	b.n	8017ab6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017abc:	699a      	ldr	r2, [r3, #24]
 8017abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ac0:	18d1      	adds	r1, r2, r3
 8017ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ac8:	f7ff ff04 	bl	80178d4 <prvInsertTimerInActiveList>
					break;
 8017acc:	e017      	b.n	8017afe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017ad4:	f003 0302 	and.w	r3, r3, #2
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d103      	bne.n	8017ae4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8017adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ade:	f000 fbeb 	bl	80182b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017ae2:	e00c      	b.n	8017afe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017aea:	f023 0301 	bic.w	r3, r3, #1
 8017aee:	b2da      	uxtb	r2, r3
 8017af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017af6:	e002      	b.n	8017afe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8017af8:	bf00      	nop
 8017afa:	e000      	b.n	8017afe <prvProcessReceivedCommands+0x1a6>
					break;
 8017afc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017afe:	4b08      	ldr	r3, [pc, #32]	@ (8017b20 <prvProcessReceivedCommands+0x1c8>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	1d39      	adds	r1, r7, #4
 8017b04:	2200      	movs	r2, #0
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7fe f856 	bl	8015bb8 <xQueueReceive>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	f47f af26 	bne.w	8017960 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017b14:	bf00      	nop
 8017b16:	bf00      	nop
 8017b18:	3730      	adds	r7, #48	@ 0x30
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	200063cc 	.word	0x200063cc

08017b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b088      	sub	sp, #32
 8017b28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017b2a:	e049      	b.n	8017bc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8017be8 <prvSwitchTimerLists+0xc4>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	68db      	ldr	r3, [r3, #12]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b36:	4b2c      	ldr	r3, [pc, #176]	@ (8017be8 <prvSwitchTimerLists+0xc4>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	68db      	ldr	r3, [r3, #12]
 8017b3c:	68db      	ldr	r3, [r3, #12]
 8017b3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	3304      	adds	r3, #4
 8017b44:	4618      	mov	r0, r3
 8017b46:	f7fd fcf5 	bl	8015534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	6a1b      	ldr	r3, [r3, #32]
 8017b4e:	68f8      	ldr	r0, [r7, #12]
 8017b50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b58:	f003 0304 	and.w	r3, r3, #4
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d02f      	beq.n	8017bc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	699b      	ldr	r3, [r3, #24]
 8017b64:	693a      	ldr	r2, [r7, #16]
 8017b66:	4413      	add	r3, r2
 8017b68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017b6a:	68ba      	ldr	r2, [r7, #8]
 8017b6c:	693b      	ldr	r3, [r7, #16]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d90e      	bls.n	8017b90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	68ba      	ldr	r2, [r7, #8]
 8017b76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	68fa      	ldr	r2, [r7, #12]
 8017b7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8017be8 <prvSwitchTimerLists+0xc4>)
 8017b80:	681a      	ldr	r2, [r3, #0]
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	3304      	adds	r3, #4
 8017b86:	4619      	mov	r1, r3
 8017b88:	4610      	mov	r0, r2
 8017b8a:	f7fd fc9a 	bl	80154c2 <vListInsert>
 8017b8e:	e017      	b.n	8017bc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017b90:	2300      	movs	r3, #0
 8017b92:	9300      	str	r3, [sp, #0]
 8017b94:	2300      	movs	r3, #0
 8017b96:	693a      	ldr	r2, [r7, #16]
 8017b98:	2100      	movs	r1, #0
 8017b9a:	68f8      	ldr	r0, [r7, #12]
 8017b9c:	f7ff fd58 	bl	8017650 <xTimerGenericCommand>
 8017ba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d10b      	bne.n	8017bc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8017ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bac:	f383 8811 	msr	BASEPRI, r3
 8017bb0:	f3bf 8f6f 	isb	sy
 8017bb4:	f3bf 8f4f 	dsb	sy
 8017bb8:	603b      	str	r3, [r7, #0]
}
 8017bba:	bf00      	nop
 8017bbc:	bf00      	nop
 8017bbe:	e7fd      	b.n	8017bbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017bc0:	4b09      	ldr	r3, [pc, #36]	@ (8017be8 <prvSwitchTimerLists+0xc4>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d1b0      	bne.n	8017b2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017bca:	4b07      	ldr	r3, [pc, #28]	@ (8017be8 <prvSwitchTimerLists+0xc4>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017bd0:	4b06      	ldr	r3, [pc, #24]	@ (8017bec <prvSwitchTimerLists+0xc8>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	4a04      	ldr	r2, [pc, #16]	@ (8017be8 <prvSwitchTimerLists+0xc4>)
 8017bd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017bd8:	4a04      	ldr	r2, [pc, #16]	@ (8017bec <prvSwitchTimerLists+0xc8>)
 8017bda:	697b      	ldr	r3, [r7, #20]
 8017bdc:	6013      	str	r3, [r2, #0]
}
 8017bde:	bf00      	nop
 8017be0:	3718      	adds	r7, #24
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}
 8017be6:	bf00      	nop
 8017be8:	200063c4 	.word	0x200063c4
 8017bec:	200063c8 	.word	0x200063c8

08017bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017bf6:	f000 f96f 	bl	8017ed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017bfa:	4b15      	ldr	r3, [pc, #84]	@ (8017c50 <prvCheckForValidListAndQueue+0x60>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d120      	bne.n	8017c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017c02:	4814      	ldr	r0, [pc, #80]	@ (8017c54 <prvCheckForValidListAndQueue+0x64>)
 8017c04:	f7fd fc0c 	bl	8015420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017c08:	4813      	ldr	r0, [pc, #76]	@ (8017c58 <prvCheckForValidListAndQueue+0x68>)
 8017c0a:	f7fd fc09 	bl	8015420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017c0e:	4b13      	ldr	r3, [pc, #76]	@ (8017c5c <prvCheckForValidListAndQueue+0x6c>)
 8017c10:	4a10      	ldr	r2, [pc, #64]	@ (8017c54 <prvCheckForValidListAndQueue+0x64>)
 8017c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017c14:	4b12      	ldr	r3, [pc, #72]	@ (8017c60 <prvCheckForValidListAndQueue+0x70>)
 8017c16:	4a10      	ldr	r2, [pc, #64]	@ (8017c58 <prvCheckForValidListAndQueue+0x68>)
 8017c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	9300      	str	r3, [sp, #0]
 8017c1e:	4b11      	ldr	r3, [pc, #68]	@ (8017c64 <prvCheckForValidListAndQueue+0x74>)
 8017c20:	4a11      	ldr	r2, [pc, #68]	@ (8017c68 <prvCheckForValidListAndQueue+0x78>)
 8017c22:	2110      	movs	r1, #16
 8017c24:	200a      	movs	r0, #10
 8017c26:	f7fd fd19 	bl	801565c <xQueueGenericCreateStatic>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	4a08      	ldr	r2, [pc, #32]	@ (8017c50 <prvCheckForValidListAndQueue+0x60>)
 8017c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017c30:	4b07      	ldr	r3, [pc, #28]	@ (8017c50 <prvCheckForValidListAndQueue+0x60>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d005      	beq.n	8017c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017c38:	4b05      	ldr	r3, [pc, #20]	@ (8017c50 <prvCheckForValidListAndQueue+0x60>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	490b      	ldr	r1, [pc, #44]	@ (8017c6c <prvCheckForValidListAndQueue+0x7c>)
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7fe fad4 	bl	80161ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017c44:	f000 f97a 	bl	8017f3c <vPortExitCritical>
}
 8017c48:	bf00      	nop
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
 8017c4e:	bf00      	nop
 8017c50:	200063cc 	.word	0x200063cc
 8017c54:	2000639c 	.word	0x2000639c
 8017c58:	200063b0 	.word	0x200063b0
 8017c5c:	200063c4 	.word	0x200063c4
 8017c60:	200063c8 	.word	0x200063c8
 8017c64:	20006478 	.word	0x20006478
 8017c68:	200063d8 	.word	0x200063d8
 8017c6c:	08021f38 	.word	0x08021f38

08017c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017c70:	b480      	push	{r7}
 8017c72:	b085      	sub	sp, #20
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	60f8      	str	r0, [r7, #12]
 8017c78:	60b9      	str	r1, [r7, #8]
 8017c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	3b04      	subs	r3, #4
 8017c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	3b04      	subs	r3, #4
 8017c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	f023 0201 	bic.w	r2, r3, #1
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	3b04      	subs	r3, #4
 8017c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8017cd4 <pxPortInitialiseStack+0x64>)
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	3b14      	subs	r3, #20
 8017caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017cac:	687a      	ldr	r2, [r7, #4]
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	3b04      	subs	r3, #4
 8017cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	f06f 0202 	mvn.w	r2, #2
 8017cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	3b20      	subs	r3, #32
 8017cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3714      	adds	r7, #20
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd2:	4770      	bx	lr
 8017cd4:	08017cd9 	.word	0x08017cd9

08017cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017cd8:	b480      	push	{r7}
 8017cda:	b085      	sub	sp, #20
 8017cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017ce2:	4b13      	ldr	r3, [pc, #76]	@ (8017d30 <prvTaskExitError+0x58>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cea:	d00b      	beq.n	8017d04 <prvTaskExitError+0x2c>
	__asm volatile
 8017cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cf0:	f383 8811 	msr	BASEPRI, r3
 8017cf4:	f3bf 8f6f 	isb	sy
 8017cf8:	f3bf 8f4f 	dsb	sy
 8017cfc:	60fb      	str	r3, [r7, #12]
}
 8017cfe:	bf00      	nop
 8017d00:	bf00      	nop
 8017d02:	e7fd      	b.n	8017d00 <prvTaskExitError+0x28>
	__asm volatile
 8017d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d08:	f383 8811 	msr	BASEPRI, r3
 8017d0c:	f3bf 8f6f 	isb	sy
 8017d10:	f3bf 8f4f 	dsb	sy
 8017d14:	60bb      	str	r3, [r7, #8]
}
 8017d16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017d18:	bf00      	nop
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d0fc      	beq.n	8017d1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017d20:	bf00      	nop
 8017d22:	bf00      	nop
 8017d24:	3714      	adds	r7, #20
 8017d26:	46bd      	mov	sp, r7
 8017d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	200000ec 	.word	0x200000ec
	...

08017d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017d40:	4b07      	ldr	r3, [pc, #28]	@ (8017d60 <pxCurrentTCBConst2>)
 8017d42:	6819      	ldr	r1, [r3, #0]
 8017d44:	6808      	ldr	r0, [r1, #0]
 8017d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4a:	f380 8809 	msr	PSP, r0
 8017d4e:	f3bf 8f6f 	isb	sy
 8017d52:	f04f 0000 	mov.w	r0, #0
 8017d56:	f380 8811 	msr	BASEPRI, r0
 8017d5a:	4770      	bx	lr
 8017d5c:	f3af 8000 	nop.w

08017d60 <pxCurrentTCBConst2>:
 8017d60:	20005e9c 	.word	0x20005e9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017d64:	bf00      	nop
 8017d66:	bf00      	nop

08017d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017d68:	4808      	ldr	r0, [pc, #32]	@ (8017d8c <prvPortStartFirstTask+0x24>)
 8017d6a:	6800      	ldr	r0, [r0, #0]
 8017d6c:	6800      	ldr	r0, [r0, #0]
 8017d6e:	f380 8808 	msr	MSP, r0
 8017d72:	f04f 0000 	mov.w	r0, #0
 8017d76:	f380 8814 	msr	CONTROL, r0
 8017d7a:	b662      	cpsie	i
 8017d7c:	b661      	cpsie	f
 8017d7e:	f3bf 8f4f 	dsb	sy
 8017d82:	f3bf 8f6f 	isb	sy
 8017d86:	df00      	svc	0
 8017d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017d8a:	bf00      	nop
 8017d8c:	e000ed08 	.word	0xe000ed08

08017d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b086      	sub	sp, #24
 8017d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017d96:	4b47      	ldr	r3, [pc, #284]	@ (8017eb4 <xPortStartScheduler+0x124>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4a47      	ldr	r2, [pc, #284]	@ (8017eb8 <xPortStartScheduler+0x128>)
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d10b      	bne.n	8017db8 <xPortStartScheduler+0x28>
	__asm volatile
 8017da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017da4:	f383 8811 	msr	BASEPRI, r3
 8017da8:	f3bf 8f6f 	isb	sy
 8017dac:	f3bf 8f4f 	dsb	sy
 8017db0:	60fb      	str	r3, [r7, #12]
}
 8017db2:	bf00      	nop
 8017db4:	bf00      	nop
 8017db6:	e7fd      	b.n	8017db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017db8:	4b3e      	ldr	r3, [pc, #248]	@ (8017eb4 <xPortStartScheduler+0x124>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8017ebc <xPortStartScheduler+0x12c>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d10b      	bne.n	8017dda <xPortStartScheduler+0x4a>
	__asm volatile
 8017dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017dc6:	f383 8811 	msr	BASEPRI, r3
 8017dca:	f3bf 8f6f 	isb	sy
 8017dce:	f3bf 8f4f 	dsb	sy
 8017dd2:	613b      	str	r3, [r7, #16]
}
 8017dd4:	bf00      	nop
 8017dd6:	bf00      	nop
 8017dd8:	e7fd      	b.n	8017dd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017dda:	4b39      	ldr	r3, [pc, #228]	@ (8017ec0 <xPortStartScheduler+0x130>)
 8017ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017dde:	697b      	ldr	r3, [r7, #20]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	b2db      	uxtb	r3, r3
 8017de4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017de6:	697b      	ldr	r3, [r7, #20]
 8017de8:	22ff      	movs	r2, #255	@ 0xff
 8017dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017dec:	697b      	ldr	r3, [r7, #20]
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	b2db      	uxtb	r3, r3
 8017df2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017df4:	78fb      	ldrb	r3, [r7, #3]
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8017dfc:	b2da      	uxtb	r2, r3
 8017dfe:	4b31      	ldr	r3, [pc, #196]	@ (8017ec4 <xPortStartScheduler+0x134>)
 8017e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017e02:	4b31      	ldr	r3, [pc, #196]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e04:	2207      	movs	r2, #7
 8017e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e08:	e009      	b.n	8017e1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8017e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	3b01      	subs	r3, #1
 8017e10:	4a2d      	ldr	r2, [pc, #180]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017e14:	78fb      	ldrb	r3, [r7, #3]
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e1e:	78fb      	ldrb	r3, [r7, #3]
 8017e20:	b2db      	uxtb	r3, r3
 8017e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017e26:	2b80      	cmp	r3, #128	@ 0x80
 8017e28:	d0ef      	beq.n	8017e0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017e2a:	4b27      	ldr	r3, [pc, #156]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	f1c3 0307 	rsb	r3, r3, #7
 8017e32:	2b04      	cmp	r3, #4
 8017e34:	d00b      	beq.n	8017e4e <xPortStartScheduler+0xbe>
	__asm volatile
 8017e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e3a:	f383 8811 	msr	BASEPRI, r3
 8017e3e:	f3bf 8f6f 	isb	sy
 8017e42:	f3bf 8f4f 	dsb	sy
 8017e46:	60bb      	str	r3, [r7, #8]
}
 8017e48:	bf00      	nop
 8017e4a:	bf00      	nop
 8017e4c:	e7fd      	b.n	8017e4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	021b      	lsls	r3, r3, #8
 8017e54:	4a1c      	ldr	r2, [pc, #112]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017e58:	4b1b      	ldr	r3, [pc, #108]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017e60:	4a19      	ldr	r2, [pc, #100]	@ (8017ec8 <xPortStartScheduler+0x138>)
 8017e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	b2da      	uxtb	r2, r3
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017e6c:	4b17      	ldr	r3, [pc, #92]	@ (8017ecc <xPortStartScheduler+0x13c>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4a16      	ldr	r2, [pc, #88]	@ (8017ecc <xPortStartScheduler+0x13c>)
 8017e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017e78:	4b14      	ldr	r3, [pc, #80]	@ (8017ecc <xPortStartScheduler+0x13c>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4a13      	ldr	r2, [pc, #76]	@ (8017ecc <xPortStartScheduler+0x13c>)
 8017e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017e84:	f000 f8da 	bl	801803c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017e88:	4b11      	ldr	r3, [pc, #68]	@ (8017ed0 <xPortStartScheduler+0x140>)
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017e8e:	f000 f8f9 	bl	8018084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017e92:	4b10      	ldr	r3, [pc, #64]	@ (8017ed4 <xPortStartScheduler+0x144>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	4a0f      	ldr	r2, [pc, #60]	@ (8017ed4 <xPortStartScheduler+0x144>)
 8017e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8017e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017e9e:	f7ff ff63 	bl	8017d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017ea2:	f7fe fddb 	bl	8016a5c <vTaskSwitchContext>
	prvTaskExitError();
 8017ea6:	f7ff ff17 	bl	8017cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017eaa:	2300      	movs	r3, #0
}
 8017eac:	4618      	mov	r0, r3
 8017eae:	3718      	adds	r7, #24
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}
 8017eb4:	e000ed00 	.word	0xe000ed00
 8017eb8:	410fc271 	.word	0x410fc271
 8017ebc:	410fc270 	.word	0x410fc270
 8017ec0:	e000e400 	.word	0xe000e400
 8017ec4:	200064c8 	.word	0x200064c8
 8017ec8:	200064cc 	.word	0x200064cc
 8017ecc:	e000ed20 	.word	0xe000ed20
 8017ed0:	200000ec 	.word	0x200000ec
 8017ed4:	e000ef34 	.word	0xe000ef34

08017ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017ed8:	b480      	push	{r7}
 8017eda:	b083      	sub	sp, #12
 8017edc:	af00      	add	r7, sp, #0
	__asm volatile
 8017ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ee2:	f383 8811 	msr	BASEPRI, r3
 8017ee6:	f3bf 8f6f 	isb	sy
 8017eea:	f3bf 8f4f 	dsb	sy
 8017eee:	607b      	str	r3, [r7, #4]
}
 8017ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017ef2:	4b10      	ldr	r3, [pc, #64]	@ (8017f34 <vPortEnterCritical+0x5c>)
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8017f34 <vPortEnterCritical+0x5c>)
 8017efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017efc:	4b0d      	ldr	r3, [pc, #52]	@ (8017f34 <vPortEnterCritical+0x5c>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d110      	bne.n	8017f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017f04:	4b0c      	ldr	r3, [pc, #48]	@ (8017f38 <vPortEnterCritical+0x60>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d00b      	beq.n	8017f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8017f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f12:	f383 8811 	msr	BASEPRI, r3
 8017f16:	f3bf 8f6f 	isb	sy
 8017f1a:	f3bf 8f4f 	dsb	sy
 8017f1e:	603b      	str	r3, [r7, #0]
}
 8017f20:	bf00      	nop
 8017f22:	bf00      	nop
 8017f24:	e7fd      	b.n	8017f22 <vPortEnterCritical+0x4a>
	}
}
 8017f26:	bf00      	nop
 8017f28:	370c      	adds	r7, #12
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f30:	4770      	bx	lr
 8017f32:	bf00      	nop
 8017f34:	200000ec 	.word	0x200000ec
 8017f38:	e000ed04 	.word	0xe000ed04

08017f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	b083      	sub	sp, #12
 8017f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017f42:	4b12      	ldr	r3, [pc, #72]	@ (8017f8c <vPortExitCritical+0x50>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d10b      	bne.n	8017f62 <vPortExitCritical+0x26>
	__asm volatile
 8017f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f4e:	f383 8811 	msr	BASEPRI, r3
 8017f52:	f3bf 8f6f 	isb	sy
 8017f56:	f3bf 8f4f 	dsb	sy
 8017f5a:	607b      	str	r3, [r7, #4]
}
 8017f5c:	bf00      	nop
 8017f5e:	bf00      	nop
 8017f60:	e7fd      	b.n	8017f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017f62:	4b0a      	ldr	r3, [pc, #40]	@ (8017f8c <vPortExitCritical+0x50>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	3b01      	subs	r3, #1
 8017f68:	4a08      	ldr	r2, [pc, #32]	@ (8017f8c <vPortExitCritical+0x50>)
 8017f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017f6c:	4b07      	ldr	r3, [pc, #28]	@ (8017f8c <vPortExitCritical+0x50>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d105      	bne.n	8017f80 <vPortExitCritical+0x44>
 8017f74:	2300      	movs	r3, #0
 8017f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	f383 8811 	msr	BASEPRI, r3
}
 8017f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017f80:	bf00      	nop
 8017f82:	370c      	adds	r7, #12
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr
 8017f8c:	200000ec 	.word	0x200000ec

08017f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017f90:	f3ef 8009 	mrs	r0, PSP
 8017f94:	f3bf 8f6f 	isb	sy
 8017f98:	4b15      	ldr	r3, [pc, #84]	@ (8017ff0 <pxCurrentTCBConst>)
 8017f9a:	681a      	ldr	r2, [r3, #0]
 8017f9c:	f01e 0f10 	tst.w	lr, #16
 8017fa0:	bf08      	it	eq
 8017fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017faa:	6010      	str	r0, [r2, #0]
 8017fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017fb4:	f380 8811 	msr	BASEPRI, r0
 8017fb8:	f3bf 8f4f 	dsb	sy
 8017fbc:	f3bf 8f6f 	isb	sy
 8017fc0:	f7fe fd4c 	bl	8016a5c <vTaskSwitchContext>
 8017fc4:	f04f 0000 	mov.w	r0, #0
 8017fc8:	f380 8811 	msr	BASEPRI, r0
 8017fcc:	bc09      	pop	{r0, r3}
 8017fce:	6819      	ldr	r1, [r3, #0]
 8017fd0:	6808      	ldr	r0, [r1, #0]
 8017fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd6:	f01e 0f10 	tst.w	lr, #16
 8017fda:	bf08      	it	eq
 8017fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017fe0:	f380 8809 	msr	PSP, r0
 8017fe4:	f3bf 8f6f 	isb	sy
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop
 8017fec:	f3af 8000 	nop.w

08017ff0 <pxCurrentTCBConst>:
 8017ff0:	20005e9c 	.word	0x20005e9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017ff4:	bf00      	nop
 8017ff6:	bf00      	nop

08017ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b082      	sub	sp, #8
 8017ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8017ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018002:	f383 8811 	msr	BASEPRI, r3
 8018006:	f3bf 8f6f 	isb	sy
 801800a:	f3bf 8f4f 	dsb	sy
 801800e:	607b      	str	r3, [r7, #4]
}
 8018010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018012:	f7fe fc69 	bl	80168e8 <xTaskIncrementTick>
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	d003      	beq.n	8018024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801801c:	4b06      	ldr	r3, [pc, #24]	@ (8018038 <xPortSysTickHandler+0x40>)
 801801e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018022:	601a      	str	r2, [r3, #0]
 8018024:	2300      	movs	r3, #0
 8018026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	f383 8811 	msr	BASEPRI, r3
}
 801802e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018030:	bf00      	nop
 8018032:	3708      	adds	r7, #8
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	e000ed04 	.word	0xe000ed04

0801803c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801803c:	b480      	push	{r7}
 801803e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018040:	4b0b      	ldr	r3, [pc, #44]	@ (8018070 <vPortSetupTimerInterrupt+0x34>)
 8018042:	2200      	movs	r2, #0
 8018044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018046:	4b0b      	ldr	r3, [pc, #44]	@ (8018074 <vPortSetupTimerInterrupt+0x38>)
 8018048:	2200      	movs	r2, #0
 801804a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801804c:	4b0a      	ldr	r3, [pc, #40]	@ (8018078 <vPortSetupTimerInterrupt+0x3c>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4a0a      	ldr	r2, [pc, #40]	@ (801807c <vPortSetupTimerInterrupt+0x40>)
 8018052:	fba2 2303 	umull	r2, r3, r2, r3
 8018056:	099b      	lsrs	r3, r3, #6
 8018058:	4a09      	ldr	r2, [pc, #36]	@ (8018080 <vPortSetupTimerInterrupt+0x44>)
 801805a:	3b01      	subs	r3, #1
 801805c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801805e:	4b04      	ldr	r3, [pc, #16]	@ (8018070 <vPortSetupTimerInterrupt+0x34>)
 8018060:	2207      	movs	r2, #7
 8018062:	601a      	str	r2, [r3, #0]
}
 8018064:	bf00      	nop
 8018066:	46bd      	mov	sp, r7
 8018068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop
 8018070:	e000e010 	.word	0xe000e010
 8018074:	e000e018 	.word	0xe000e018
 8018078:	20000054 	.word	0x20000054
 801807c:	10624dd3 	.word	0x10624dd3
 8018080:	e000e014 	.word	0xe000e014

08018084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018094 <vPortEnableVFP+0x10>
 8018088:	6801      	ldr	r1, [r0, #0]
 801808a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801808e:	6001      	str	r1, [r0, #0]
 8018090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018092:	bf00      	nop
 8018094:	e000ed88 	.word	0xe000ed88

08018098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018098:	b480      	push	{r7}
 801809a:	b085      	sub	sp, #20
 801809c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801809e:	f3ef 8305 	mrs	r3, IPSR
 80180a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	2b0f      	cmp	r3, #15
 80180a8:	d915      	bls.n	80180d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80180aa:	4a18      	ldr	r2, [pc, #96]	@ (801810c <vPortValidateInterruptPriority+0x74>)
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	4413      	add	r3, r2
 80180b0:	781b      	ldrb	r3, [r3, #0]
 80180b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80180b4:	4b16      	ldr	r3, [pc, #88]	@ (8018110 <vPortValidateInterruptPriority+0x78>)
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	7afa      	ldrb	r2, [r7, #11]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d20b      	bcs.n	80180d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80180be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180c2:	f383 8811 	msr	BASEPRI, r3
 80180c6:	f3bf 8f6f 	isb	sy
 80180ca:	f3bf 8f4f 	dsb	sy
 80180ce:	607b      	str	r3, [r7, #4]
}
 80180d0:	bf00      	nop
 80180d2:	bf00      	nop
 80180d4:	e7fd      	b.n	80180d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80180d6:	4b0f      	ldr	r3, [pc, #60]	@ (8018114 <vPortValidateInterruptPriority+0x7c>)
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80180de:	4b0e      	ldr	r3, [pc, #56]	@ (8018118 <vPortValidateInterruptPriority+0x80>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	429a      	cmp	r2, r3
 80180e4:	d90b      	bls.n	80180fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80180e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180ea:	f383 8811 	msr	BASEPRI, r3
 80180ee:	f3bf 8f6f 	isb	sy
 80180f2:	f3bf 8f4f 	dsb	sy
 80180f6:	603b      	str	r3, [r7, #0]
}
 80180f8:	bf00      	nop
 80180fa:	bf00      	nop
 80180fc:	e7fd      	b.n	80180fa <vPortValidateInterruptPriority+0x62>
	}
 80180fe:	bf00      	nop
 8018100:	3714      	adds	r7, #20
 8018102:	46bd      	mov	sp, r7
 8018104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018108:	4770      	bx	lr
 801810a:	bf00      	nop
 801810c:	e000e3f0 	.word	0xe000e3f0
 8018110:	200064c8 	.word	0x200064c8
 8018114:	e000ed0c 	.word	0xe000ed0c
 8018118:	200064cc 	.word	0x200064cc

0801811c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b08a      	sub	sp, #40	@ 0x28
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018124:	2300      	movs	r3, #0
 8018126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018128:	f7fe fb22 	bl	8016770 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801812c:	4b5c      	ldr	r3, [pc, #368]	@ (80182a0 <pvPortMalloc+0x184>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d101      	bne.n	8018138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018134:	f000 f924 	bl	8018380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018138:	4b5a      	ldr	r3, [pc, #360]	@ (80182a4 <pvPortMalloc+0x188>)
 801813a:	681a      	ldr	r2, [r3, #0]
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	4013      	ands	r3, r2
 8018140:	2b00      	cmp	r3, #0
 8018142:	f040 8095 	bne.w	8018270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d01e      	beq.n	801818a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801814c:	2208      	movs	r2, #8
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	4413      	add	r3, r2
 8018152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f003 0307 	and.w	r3, r3, #7
 801815a:	2b00      	cmp	r3, #0
 801815c:	d015      	beq.n	801818a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f023 0307 	bic.w	r3, r3, #7
 8018164:	3308      	adds	r3, #8
 8018166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f003 0307 	and.w	r3, r3, #7
 801816e:	2b00      	cmp	r3, #0
 8018170:	d00b      	beq.n	801818a <pvPortMalloc+0x6e>
	__asm volatile
 8018172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018176:	f383 8811 	msr	BASEPRI, r3
 801817a:	f3bf 8f6f 	isb	sy
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	617b      	str	r3, [r7, #20]
}
 8018184:	bf00      	nop
 8018186:	bf00      	nop
 8018188:	e7fd      	b.n	8018186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d06f      	beq.n	8018270 <pvPortMalloc+0x154>
 8018190:	4b45      	ldr	r3, [pc, #276]	@ (80182a8 <pvPortMalloc+0x18c>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	687a      	ldr	r2, [r7, #4]
 8018196:	429a      	cmp	r2, r3
 8018198:	d86a      	bhi.n	8018270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801819a:	4b44      	ldr	r3, [pc, #272]	@ (80182ac <pvPortMalloc+0x190>)
 801819c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801819e:	4b43      	ldr	r3, [pc, #268]	@ (80182ac <pvPortMalloc+0x190>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80181a4:	e004      	b.n	80181b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80181a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80181aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80181b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	687a      	ldr	r2, [r7, #4]
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d903      	bls.n	80181c2 <pvPortMalloc+0xa6>
 80181ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d1f1      	bne.n	80181a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80181c2:	4b37      	ldr	r3, [pc, #220]	@ (80182a0 <pvPortMalloc+0x184>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d051      	beq.n	8018270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80181cc:	6a3b      	ldr	r3, [r7, #32]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2208      	movs	r2, #8
 80181d2:	4413      	add	r3, r2
 80181d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80181d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181d8:	681a      	ldr	r2, [r3, #0]
 80181da:	6a3b      	ldr	r3, [r7, #32]
 80181dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80181de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181e0:	685a      	ldr	r2, [r3, #4]
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	1ad2      	subs	r2, r2, r3
 80181e6:	2308      	movs	r3, #8
 80181e8:	005b      	lsls	r3, r3, #1
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d920      	bls.n	8018230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80181ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	4413      	add	r3, r2
 80181f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80181f6:	69bb      	ldr	r3, [r7, #24]
 80181f8:	f003 0307 	and.w	r3, r3, #7
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d00b      	beq.n	8018218 <pvPortMalloc+0xfc>
	__asm volatile
 8018200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018204:	f383 8811 	msr	BASEPRI, r3
 8018208:	f3bf 8f6f 	isb	sy
 801820c:	f3bf 8f4f 	dsb	sy
 8018210:	613b      	str	r3, [r7, #16]
}
 8018212:	bf00      	nop
 8018214:	bf00      	nop
 8018216:	e7fd      	b.n	8018214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801821a:	685a      	ldr	r2, [r3, #4]
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	1ad2      	subs	r2, r2, r3
 8018220:	69bb      	ldr	r3, [r7, #24]
 8018222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018226:	687a      	ldr	r2, [r7, #4]
 8018228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801822a:	69b8      	ldr	r0, [r7, #24]
 801822c:	f000 f90a 	bl	8018444 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018230:	4b1d      	ldr	r3, [pc, #116]	@ (80182a8 <pvPortMalloc+0x18c>)
 8018232:	681a      	ldr	r2, [r3, #0]
 8018234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018236:	685b      	ldr	r3, [r3, #4]
 8018238:	1ad3      	subs	r3, r2, r3
 801823a:	4a1b      	ldr	r2, [pc, #108]	@ (80182a8 <pvPortMalloc+0x18c>)
 801823c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801823e:	4b1a      	ldr	r3, [pc, #104]	@ (80182a8 <pvPortMalloc+0x18c>)
 8018240:	681a      	ldr	r2, [r3, #0]
 8018242:	4b1b      	ldr	r3, [pc, #108]	@ (80182b0 <pvPortMalloc+0x194>)
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	429a      	cmp	r2, r3
 8018248:	d203      	bcs.n	8018252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801824a:	4b17      	ldr	r3, [pc, #92]	@ (80182a8 <pvPortMalloc+0x18c>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	4a18      	ldr	r2, [pc, #96]	@ (80182b0 <pvPortMalloc+0x194>)
 8018250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018254:	685a      	ldr	r2, [r3, #4]
 8018256:	4b13      	ldr	r3, [pc, #76]	@ (80182a4 <pvPortMalloc+0x188>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	431a      	orrs	r2, r3
 801825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801825e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018262:	2200      	movs	r2, #0
 8018264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018266:	4b13      	ldr	r3, [pc, #76]	@ (80182b4 <pvPortMalloc+0x198>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	3301      	adds	r3, #1
 801826c:	4a11      	ldr	r2, [pc, #68]	@ (80182b4 <pvPortMalloc+0x198>)
 801826e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018270:	f7fe fa8c 	bl	801678c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018274:	69fb      	ldr	r3, [r7, #28]
 8018276:	f003 0307 	and.w	r3, r3, #7
 801827a:	2b00      	cmp	r3, #0
 801827c:	d00b      	beq.n	8018296 <pvPortMalloc+0x17a>
	__asm volatile
 801827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018282:	f383 8811 	msr	BASEPRI, r3
 8018286:	f3bf 8f6f 	isb	sy
 801828a:	f3bf 8f4f 	dsb	sy
 801828e:	60fb      	str	r3, [r7, #12]
}
 8018290:	bf00      	nop
 8018292:	bf00      	nop
 8018294:	e7fd      	b.n	8018292 <pvPortMalloc+0x176>
	return pvReturn;
 8018296:	69fb      	ldr	r3, [r7, #28]
}
 8018298:	4618      	mov	r0, r3
 801829a:	3728      	adds	r7, #40	@ 0x28
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}
 80182a0:	2000a0d8 	.word	0x2000a0d8
 80182a4:	2000a0ec 	.word	0x2000a0ec
 80182a8:	2000a0dc 	.word	0x2000a0dc
 80182ac:	2000a0d0 	.word	0x2000a0d0
 80182b0:	2000a0e0 	.word	0x2000a0e0
 80182b4:	2000a0e4 	.word	0x2000a0e4

080182b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b086      	sub	sp, #24
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d04f      	beq.n	801836a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80182ca:	2308      	movs	r3, #8
 80182cc:	425b      	negs	r3, r3
 80182ce:	697a      	ldr	r2, [r7, #20]
 80182d0:	4413      	add	r3, r2
 80182d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	685a      	ldr	r2, [r3, #4]
 80182dc:	4b25      	ldr	r3, [pc, #148]	@ (8018374 <vPortFree+0xbc>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4013      	ands	r3, r2
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d10b      	bne.n	80182fe <vPortFree+0x46>
	__asm volatile
 80182e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182ea:	f383 8811 	msr	BASEPRI, r3
 80182ee:	f3bf 8f6f 	isb	sy
 80182f2:	f3bf 8f4f 	dsb	sy
 80182f6:	60fb      	str	r3, [r7, #12]
}
 80182f8:	bf00      	nop
 80182fa:	bf00      	nop
 80182fc:	e7fd      	b.n	80182fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80182fe:	693b      	ldr	r3, [r7, #16]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d00b      	beq.n	801831e <vPortFree+0x66>
	__asm volatile
 8018306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801830a:	f383 8811 	msr	BASEPRI, r3
 801830e:	f3bf 8f6f 	isb	sy
 8018312:	f3bf 8f4f 	dsb	sy
 8018316:	60bb      	str	r3, [r7, #8]
}
 8018318:	bf00      	nop
 801831a:	bf00      	nop
 801831c:	e7fd      	b.n	801831a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801831e:	693b      	ldr	r3, [r7, #16]
 8018320:	685a      	ldr	r2, [r3, #4]
 8018322:	4b14      	ldr	r3, [pc, #80]	@ (8018374 <vPortFree+0xbc>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	4013      	ands	r3, r2
 8018328:	2b00      	cmp	r3, #0
 801832a:	d01e      	beq.n	801836a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801832c:	693b      	ldr	r3, [r7, #16]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d11a      	bne.n	801836a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018334:	693b      	ldr	r3, [r7, #16]
 8018336:	685a      	ldr	r2, [r3, #4]
 8018338:	4b0e      	ldr	r3, [pc, #56]	@ (8018374 <vPortFree+0xbc>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	43db      	mvns	r3, r3
 801833e:	401a      	ands	r2, r3
 8018340:	693b      	ldr	r3, [r7, #16]
 8018342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018344:	f7fe fa14 	bl	8016770 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018348:	693b      	ldr	r3, [r7, #16]
 801834a:	685a      	ldr	r2, [r3, #4]
 801834c:	4b0a      	ldr	r3, [pc, #40]	@ (8018378 <vPortFree+0xc0>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4413      	add	r3, r2
 8018352:	4a09      	ldr	r2, [pc, #36]	@ (8018378 <vPortFree+0xc0>)
 8018354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018356:	6938      	ldr	r0, [r7, #16]
 8018358:	f000 f874 	bl	8018444 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801835c:	4b07      	ldr	r3, [pc, #28]	@ (801837c <vPortFree+0xc4>)
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	3301      	adds	r3, #1
 8018362:	4a06      	ldr	r2, [pc, #24]	@ (801837c <vPortFree+0xc4>)
 8018364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018366:	f7fe fa11 	bl	801678c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801836a:	bf00      	nop
 801836c:	3718      	adds	r7, #24
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	2000a0ec 	.word	0x2000a0ec
 8018378:	2000a0dc 	.word	0x2000a0dc
 801837c:	2000a0e8 	.word	0x2000a0e8

08018380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018380:	b480      	push	{r7}
 8018382:	b085      	sub	sp, #20
 8018384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018386:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801838a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801838c:	4b27      	ldr	r3, [pc, #156]	@ (801842c <prvHeapInit+0xac>)
 801838e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f003 0307 	and.w	r3, r3, #7
 8018396:	2b00      	cmp	r3, #0
 8018398:	d00c      	beq.n	80183b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	3307      	adds	r3, #7
 801839e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	f023 0307 	bic.w	r3, r3, #7
 80183a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80183a8:	68ba      	ldr	r2, [r7, #8]
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	1ad3      	subs	r3, r2, r3
 80183ae:	4a1f      	ldr	r2, [pc, #124]	@ (801842c <prvHeapInit+0xac>)
 80183b0:	4413      	add	r3, r2
 80183b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80183b8:	4a1d      	ldr	r2, [pc, #116]	@ (8018430 <prvHeapInit+0xb0>)
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80183be:	4b1c      	ldr	r3, [pc, #112]	@ (8018430 <prvHeapInit+0xb0>)
 80183c0:	2200      	movs	r2, #0
 80183c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	68ba      	ldr	r2, [r7, #8]
 80183c8:	4413      	add	r3, r2
 80183ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80183cc:	2208      	movs	r2, #8
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	1a9b      	subs	r3, r3, r2
 80183d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	f023 0307 	bic.w	r3, r3, #7
 80183da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	4a15      	ldr	r2, [pc, #84]	@ (8018434 <prvHeapInit+0xb4>)
 80183e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80183e2:	4b14      	ldr	r3, [pc, #80]	@ (8018434 <prvHeapInit+0xb4>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2200      	movs	r2, #0
 80183e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80183ea:	4b12      	ldr	r3, [pc, #72]	@ (8018434 <prvHeapInit+0xb4>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	2200      	movs	r2, #0
 80183f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	68fa      	ldr	r2, [r7, #12]
 80183fa:	1ad2      	subs	r2, r2, r3
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018400:	4b0c      	ldr	r3, [pc, #48]	@ (8018434 <prvHeapInit+0xb4>)
 8018402:	681a      	ldr	r2, [r3, #0]
 8018404:	683b      	ldr	r3, [r7, #0]
 8018406:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	685b      	ldr	r3, [r3, #4]
 801840c:	4a0a      	ldr	r2, [pc, #40]	@ (8018438 <prvHeapInit+0xb8>)
 801840e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	4a09      	ldr	r2, [pc, #36]	@ (801843c <prvHeapInit+0xbc>)
 8018416:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018418:	4b09      	ldr	r3, [pc, #36]	@ (8018440 <prvHeapInit+0xc0>)
 801841a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801841e:	601a      	str	r2, [r3, #0]
}
 8018420:	bf00      	nop
 8018422:	3714      	adds	r7, #20
 8018424:	46bd      	mov	sp, r7
 8018426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842a:	4770      	bx	lr
 801842c:	200064d0 	.word	0x200064d0
 8018430:	2000a0d0 	.word	0x2000a0d0
 8018434:	2000a0d8 	.word	0x2000a0d8
 8018438:	2000a0e0 	.word	0x2000a0e0
 801843c:	2000a0dc 	.word	0x2000a0dc
 8018440:	2000a0ec 	.word	0x2000a0ec

08018444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018444:	b480      	push	{r7}
 8018446:	b085      	sub	sp, #20
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801844c:	4b28      	ldr	r3, [pc, #160]	@ (80184f0 <prvInsertBlockIntoFreeList+0xac>)
 801844e:	60fb      	str	r3, [r7, #12]
 8018450:	e002      	b.n	8018458 <prvInsertBlockIntoFreeList+0x14>
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	60fb      	str	r3, [r7, #12]
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	429a      	cmp	r2, r3
 8018460:	d8f7      	bhi.n	8018452 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	685b      	ldr	r3, [r3, #4]
 801846a:	68ba      	ldr	r2, [r7, #8]
 801846c:	4413      	add	r3, r2
 801846e:	687a      	ldr	r2, [r7, #4]
 8018470:	429a      	cmp	r2, r3
 8018472:	d108      	bne.n	8018486 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	685a      	ldr	r2, [r3, #4]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	685b      	ldr	r3, [r3, #4]
 801847c:	441a      	add	r2, r3
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	685b      	ldr	r3, [r3, #4]
 801848e:	68ba      	ldr	r2, [r7, #8]
 8018490:	441a      	add	r2, r3
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	429a      	cmp	r2, r3
 8018498:	d118      	bne.n	80184cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	681a      	ldr	r2, [r3, #0]
 801849e:	4b15      	ldr	r3, [pc, #84]	@ (80184f4 <prvInsertBlockIntoFreeList+0xb0>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d00d      	beq.n	80184c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	685a      	ldr	r2, [r3, #4]
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	685b      	ldr	r3, [r3, #4]
 80184b0:	441a      	add	r2, r3
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	681a      	ldr	r2, [r3, #0]
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	601a      	str	r2, [r3, #0]
 80184c0:	e008      	b.n	80184d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80184c2:	4b0c      	ldr	r3, [pc, #48]	@ (80184f4 <prvInsertBlockIntoFreeList+0xb0>)
 80184c4:	681a      	ldr	r2, [r3, #0]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	601a      	str	r2, [r3, #0]
 80184ca:	e003      	b.n	80184d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	681a      	ldr	r2, [r3, #0]
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80184d4:	68fa      	ldr	r2, [r7, #12]
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d002      	beq.n	80184e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	687a      	ldr	r2, [r7, #4]
 80184e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80184e2:	bf00      	nop
 80184e4:	3714      	adds	r7, #20
 80184e6:	46bd      	mov	sp, r7
 80184e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ec:	4770      	bx	lr
 80184ee:	bf00      	nop
 80184f0:	2000a0d0 	.word	0x2000a0d0
 80184f4:	2000a0d8 	.word	0x2000a0d8

080184f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80184fc:	2200      	movs	r2, #0
 80184fe:	4912      	ldr	r1, [pc, #72]	@ (8018548 <MX_USB_DEVICE_Init+0x50>)
 8018500:	4812      	ldr	r0, [pc, #72]	@ (801854c <MX_USB_DEVICE_Init+0x54>)
 8018502:	f7fb fb1b 	bl	8013b3c <USBD_Init>
 8018506:	4603      	mov	r3, r0
 8018508:	2b00      	cmp	r3, #0
 801850a:	d001      	beq.n	8018510 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801850c:	f7f1 fa56 	bl	80099bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018510:	490f      	ldr	r1, [pc, #60]	@ (8018550 <MX_USB_DEVICE_Init+0x58>)
 8018512:	480e      	ldr	r0, [pc, #56]	@ (801854c <MX_USB_DEVICE_Init+0x54>)
 8018514:	f7fb fb42 	bl	8013b9c <USBD_RegisterClass>
 8018518:	4603      	mov	r3, r0
 801851a:	2b00      	cmp	r3, #0
 801851c:	d001      	beq.n	8018522 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801851e:	f7f1 fa4d 	bl	80099bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018522:	490c      	ldr	r1, [pc, #48]	@ (8018554 <MX_USB_DEVICE_Init+0x5c>)
 8018524:	4809      	ldr	r0, [pc, #36]	@ (801854c <MX_USB_DEVICE_Init+0x54>)
 8018526:	f7fb fa39 	bl	801399c <USBD_CDC_RegisterInterface>
 801852a:	4603      	mov	r3, r0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d001      	beq.n	8018534 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018530:	f7f1 fa44 	bl	80099bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018534:	4805      	ldr	r0, [pc, #20]	@ (801854c <MX_USB_DEVICE_Init+0x54>)
 8018536:	f7fb fb67 	bl	8013c08 <USBD_Start>
 801853a:	4603      	mov	r3, r0
 801853c:	2b00      	cmp	r3, #0
 801853e:	d001      	beq.n	8018544 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018540:	f7f1 fa3c 	bl	80099bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018544:	bf00      	nop
 8018546:	bd80      	pop	{r7, pc}
 8018548:	20000104 	.word	0x20000104
 801854c:	2000a0f0 	.word	0x2000a0f0
 8018550:	2000006c 	.word	0x2000006c
 8018554:	200000f0 	.word	0x200000f0

08018558 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b08a      	sub	sp, #40	@ 0x28
 801855c:	af00      	add	r7, sp, #0
 801855e:	2300      	movs	r3, #0
 8018560:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018562:	f3ef 8310 	mrs	r3, PRIMASK
 8018566:	61fb      	str	r3, [r7, #28]
  return(result);
 8018568:	69fb      	ldr	r3, [r7, #28]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 801856a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801856c:	b672      	cpsid	i
}
 801856e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018570:	f3bf 8f4f 	dsb	sy
}
 8018574:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018576:	f3bf 8f6f 	isb	sy
}
 801857a:	bf00      	nop
    return old;
 801857c:	69bb      	ldr	r3, [r7, #24]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 801857e:	617b      	str	r3, [r7, #20]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8018580:	6a3b      	ldr	r3, [r7, #32]
 8018582:	2b01      	cmp	r3, #1
 8018584:	d001      	beq.n	801858a <CDC_Init_FS+0x32>
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	e000      	b.n	801858c <CDC_Init_FS+0x34>
 801858a:	2300      	movs	r3, #0
  /* USER CODE BEGIN 3 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 801858c:	607b      	str	r3, [r7, #4]
 801858e:	2301      	movs	r3, #1
 8018590:	627b      	str	r3, [r7, #36]	@ 0x24
 8018592:	e007      	b.n	80185a4 <CDC_Init_FS+0x4c>
	{
		ring_buffer_init(&rx_ringbuffer, rx_buffer, RX_BUFFER_SIZE);
 8018594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018598:	4917      	ldr	r1, [pc, #92]	@ (80185f8 <CDC_Init_FS+0xa0>)
 801859a:	4818      	ldr	r0, [pc, #96]	@ (80185fc <CDC_Init_FS+0xa4>)
 801859c:	f7f0 fcd6 	bl	8008f4c <ring_buffer_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80185a0:	2300      	movs	r3, #0
 80185a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80185a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d1f4      	bne.n	8018594 <CDC_Init_FS+0x3c>
 80185aa:	1d3b      	adds	r3, r7, #4
 80185ac:	613b      	str	r3, [r7, #16]
	exit_critical(*sreg);		// restore saved I-bit
 80185ae:	693b      	ldr	r3, [r7, #16]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80185b4:	f3bf 8f5f 	dmb	sy
}
 80185b8:	bf00      	nop
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	f383 8810 	msr	PRIMASK, r3
}
 80185c4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80185c6:	f3bf 8f4f 	dsb	sy
}
 80185ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80185cc:	f3bf 8f6f 	isb	sy
}
 80185d0:	bf00      	nop
}
 80185d2:	bf00      	nop
}
 80185d4:	bf00      	nop
	}


  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80185d6:	2200      	movs	r2, #0
 80185d8:	4909      	ldr	r1, [pc, #36]	@ (8018600 <CDC_Init_FS+0xa8>)
 80185da:	480a      	ldr	r0, [pc, #40]	@ (8018604 <CDC_Init_FS+0xac>)
 80185dc:	f7fb f9f8 	bl	80139d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80185e0:	4909      	ldr	r1, [pc, #36]	@ (8018608 <CDC_Init_FS+0xb0>)
 80185e2:	4808      	ldr	r0, [pc, #32]	@ (8018604 <CDC_Init_FS+0xac>)
 80185e4:	f7fb fa16 	bl	8013a14 <USBD_CDC_SetRxBuffer>

  // Arm the first OUT transfer so the host can send data
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80185e8:	4806      	ldr	r0, [pc, #24]	@ (8018604 <CDC_Init_FS+0xac>)
 80185ea:	f7fb fa71 	bl	8013ad0 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80185ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3728      	adds	r7, #40	@ 0x28
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	2000b3cc 	.word	0x2000b3cc
 80185fc:	2000b7cc 	.word	0x2000b7cc
 8018600:	2000abcc 	.word	0x2000abcc
 8018604:	2000a0f0 	.word	0x2000a0f0
 8018608:	2000a3cc 	.word	0x2000a3cc

0801860c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b08a      	sub	sp, #40	@ 0x28
 8018610:	af00      	add	r7, sp, #0
 8018612:	2300      	movs	r3, #0
 8018614:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018616:	f3ef 8310 	mrs	r3, PRIMASK
 801861a:	61fb      	str	r3, [r7, #28]
  return(result);
 801861c:	69fb      	ldr	r3, [r7, #28]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 801861e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8018620:	b672      	cpsid	i
}
 8018622:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018624:	f3bf 8f4f 	dsb	sy
}
 8018628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801862a:	f3bf 8f6f 	isb	sy
}
 801862e:	bf00      	nop
    return old;
 8018630:	69bb      	ldr	r3, [r7, #24]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8018632:	617b      	str	r3, [r7, #20]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8018634:	6a3b      	ldr	r3, [r7, #32]
 8018636:	2b01      	cmp	r3, #1
 8018638:	d001      	beq.n	801863e <CDC_DeInit_FS+0x32>
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	e000      	b.n	8018640 <CDC_DeInit_FS+0x34>
 801863e:	2300      	movs	r3, #0
  /* USER CODE BEGIN 4 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8018640:	607b      	str	r3, [r7, #4]
 8018642:	2301      	movs	r3, #1
 8018644:	627b      	str	r3, [r7, #36]	@ 0x24
 8018646:	e004      	b.n	8018652 <CDC_DeInit_FS+0x46>
	{
		ring_buffer_clear(&rx_ringbuffer);
 8018648:	4811      	ldr	r0, [pc, #68]	@ (8018690 <CDC_DeInit_FS+0x84>)
 801864a:	f7f0 fe0c 	bl	8009266 <ring_buffer_clear>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 801864e:	2300      	movs	r3, #0
 8018650:	627b      	str	r3, [r7, #36]	@ 0x24
 8018652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018654:	2b00      	cmp	r3, #0
 8018656:	d1f7      	bne.n	8018648 <CDC_DeInit_FS+0x3c>
 8018658:	1d3b      	adds	r3, r7, #4
 801865a:	613b      	str	r3, [r7, #16]
	exit_critical(*sreg);		// restore saved I-bit
 801865c:	693b      	ldr	r3, [r7, #16]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8018662:	f3bf 8f5f 	dmb	sy
}
 8018666:	bf00      	nop
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801866c:	68bb      	ldr	r3, [r7, #8]
 801866e:	f383 8810 	msr	PRIMASK, r3
}
 8018672:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018674:	f3bf 8f4f 	dsb	sy
}
 8018678:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801867a:	f3bf 8f6f 	isb	sy
}
 801867e:	bf00      	nop
}
 8018680:	bf00      	nop
}
 8018682:	bf00      	nop
	}

  return (USBD_OK);
 8018684:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018686:	4618      	mov	r0, r3
 8018688:	3728      	adds	r7, #40	@ 0x28
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	2000b7cc 	.word	0x2000b7cc

08018694 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018694:	b480      	push	{r7}
 8018696:	b083      	sub	sp, #12
 8018698:	af00      	add	r7, sp, #0
 801869a:	4603      	mov	r3, r0
 801869c:	6039      	str	r1, [r7, #0]
 801869e:	71fb      	strb	r3, [r7, #7]
 80186a0:	4613      	mov	r3, r2
 80186a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80186a4:	79fb      	ldrb	r3, [r7, #7]
 80186a6:	2b23      	cmp	r3, #35	@ 0x23
 80186a8:	d84a      	bhi.n	8018740 <CDC_Control_FS+0xac>
 80186aa:	a201      	add	r2, pc, #4	@ (adr r2, 80186b0 <CDC_Control_FS+0x1c>)
 80186ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b0:	08018741 	.word	0x08018741
 80186b4:	08018741 	.word	0x08018741
 80186b8:	08018741 	.word	0x08018741
 80186bc:	08018741 	.word	0x08018741
 80186c0:	08018741 	.word	0x08018741
 80186c4:	08018741 	.word	0x08018741
 80186c8:	08018741 	.word	0x08018741
 80186cc:	08018741 	.word	0x08018741
 80186d0:	08018741 	.word	0x08018741
 80186d4:	08018741 	.word	0x08018741
 80186d8:	08018741 	.word	0x08018741
 80186dc:	08018741 	.word	0x08018741
 80186e0:	08018741 	.word	0x08018741
 80186e4:	08018741 	.word	0x08018741
 80186e8:	08018741 	.word	0x08018741
 80186ec:	08018741 	.word	0x08018741
 80186f0:	08018741 	.word	0x08018741
 80186f4:	08018741 	.word	0x08018741
 80186f8:	08018741 	.word	0x08018741
 80186fc:	08018741 	.word	0x08018741
 8018700:	08018741 	.word	0x08018741
 8018704:	08018741 	.word	0x08018741
 8018708:	08018741 	.word	0x08018741
 801870c:	08018741 	.word	0x08018741
 8018710:	08018741 	.word	0x08018741
 8018714:	08018741 	.word	0x08018741
 8018718:	08018741 	.word	0x08018741
 801871c:	08018741 	.word	0x08018741
 8018720:	08018741 	.word	0x08018741
 8018724:	08018741 	.word	0x08018741
 8018728:	08018741 	.word	0x08018741
 801872c:	08018741 	.word	0x08018741
 8018730:	08018741 	.word	0x08018741
 8018734:	08018741 	.word	0x08018741
 8018738:	08018741 	.word	0x08018741
 801873c:	08018741 	.word	0x08018741
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018740:	bf00      	nop
  }

  return (USBD_OK);
 8018742:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018744:	4618      	mov	r0, r3
 8018746:	370c      	adds	r7, #12
 8018748:	46bd      	mov	sp, r7
 801874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874e:	4770      	bx	lr

08018750 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b08c      	sub	sp, #48	@ 0x30
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	6039      	str	r1, [r7, #0]
 801875a:	2300      	movs	r3, #0
 801875c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801875e:	f3ef 8310 	mrs	r3, PRIMASK
 8018762:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8018766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8018768:	b672      	cpsid	i
}
 801876a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 801876c:	f3bf 8f4f 	dsb	sy
}
 8018770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018772:	f3bf 8f6f 	isb	sy
}
 8018776:	bf00      	nop
    return old;
 8018778:	6a3b      	ldr	r3, [r7, #32]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 801877a:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 801877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801877e:	2b01      	cmp	r3, #1
 8018780:	d001      	beq.n	8018786 <CDC_Receive_FS+0x36>
 8018782:	69fb      	ldr	r3, [r7, #28]
 8018784:	e000      	b.n	8018788 <CDC_Receive_FS+0x38>
 8018786:	2300      	movs	r3, #0
  /* USER CODE BEGIN 6 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8018788:	60fb      	str	r3, [r7, #12]
 801878a:	2301      	movs	r3, #1
 801878c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801878e:	e008      	b.n	80187a2 <CDC_Receive_FS+0x52>
	{
		ring_buffer_enqueue_arr(&rx_ringbuffer, Buf, *Len);
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	461a      	mov	r2, r3
 8018796:	6879      	ldr	r1, [r7, #4]
 8018798:	4815      	ldr	r0, [pc, #84]	@ (80187f0 <CDC_Receive_FS+0xa0>)
 801879a:	f7f0 fc8e 	bl	80090ba <ring_buffer_enqueue_arr>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 801879e:	2300      	movs	r3, #0
 80187a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80187a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d1f3      	bne.n	8018790 <CDC_Receive_FS+0x40>
 80187a8:	f107 030c 	add.w	r3, r7, #12
 80187ac:	61bb      	str	r3, [r7, #24]
	exit_critical(*sreg);		// restore saved I-bit
 80187ae:	69bb      	ldr	r3, [r7, #24]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 80187b4:	f3bf 8f5f 	dmb	sy
}
 80187b8:	bf00      	nop
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187be:	693b      	ldr	r3, [r7, #16]
 80187c0:	f383 8810 	msr	PRIMASK, r3
}
 80187c4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80187c6:	f3bf 8f4f 	dsb	sy
}
 80187ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80187cc:	f3bf 8f6f 	isb	sy
}
 80187d0:	bf00      	nop
}
 80187d2:	bf00      	nop
}
 80187d4:	bf00      	nop
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80187d6:	4907      	ldr	r1, [pc, #28]	@ (80187f4 <CDC_Receive_FS+0xa4>)
 80187d8:	4807      	ldr	r0, [pc, #28]	@ (80187f8 <CDC_Receive_FS+0xa8>)
 80187da:	f7fb f91b 	bl	8013a14 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80187de:	4806      	ldr	r0, [pc, #24]	@ (80187f8 <CDC_Receive_FS+0xa8>)
 80187e0:	f7fb f976 	bl	8013ad0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80187e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3730      	adds	r7, #48	@ 0x30
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	2000b7cc 	.word	0x2000b7cc
 80187f4:	2000a3cc 	.word	0x2000a3cc
 80187f8:	2000a0f0 	.word	0x2000a0f0

080187fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b084      	sub	sp, #16
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
 8018804:	460b      	mov	r3, r1
 8018806:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018808:	2300      	movs	r3, #0
 801880a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801880c:	4b0d      	ldr	r3, [pc, #52]	@ (8018844 <CDC_Transmit_FS+0x48>)
 801880e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018812:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801881a:	2b00      	cmp	r3, #0
 801881c:	d001      	beq.n	8018822 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801881e:	2301      	movs	r3, #1
 8018820:	e00b      	b.n	801883a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018822:	887b      	ldrh	r3, [r7, #2]
 8018824:	461a      	mov	r2, r3
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	4806      	ldr	r0, [pc, #24]	@ (8018844 <CDC_Transmit_FS+0x48>)
 801882a:	f7fb f8d1 	bl	80139d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801882e:	4805      	ldr	r0, [pc, #20]	@ (8018844 <CDC_Transmit_FS+0x48>)
 8018830:	f7fb f90e 	bl	8013a50 <USBD_CDC_TransmitPacket>
 8018834:	4603      	mov	r3, r0
 8018836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018838:	7bfb      	ldrb	r3, [r7, #15]
}
 801883a:	4618      	mov	r0, r3
 801883c:	3710      	adds	r7, #16
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}
 8018842:	bf00      	nop
 8018844:	2000a0f0 	.word	0x2000a0f0

08018848 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018848:	b480      	push	{r7}
 801884a:	b087      	sub	sp, #28
 801884c:	af00      	add	r7, sp, #0
 801884e:	60f8      	str	r0, [r7, #12]
 8018850:	60b9      	str	r1, [r7, #8]
 8018852:	4613      	mov	r3, r2
 8018854:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018856:	2300      	movs	r3, #0
 8018858:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801885a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801885e:	4618      	mov	r0, r3
 8018860:	371c      	adds	r7, #28
 8018862:	46bd      	mov	sp, r7
 8018864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018868:	4770      	bx	lr
	...

0801886c <CDC_recv_data>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

size_t CDC_recv_data(char* out_buf, size_t max_len)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b08c      	sub	sp, #48	@ 0x30
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
 8018874:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d002      	beq.n	8018882 <CDC_recv_data+0x16>
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d101      	bne.n	8018886 <CDC_recv_data+0x1a>
        return 0;
 8018882:	2300      	movs	r3, #0
 8018884:	e03f      	b.n	8018906 <CDC_recv_data+0x9a>
 8018886:	2300      	movs	r3, #0
 8018888:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801888a:	f3ef 8310 	mrs	r3, PRIMASK
 801888e:	623b      	str	r3, [r7, #32]
  return(result);
 8018890:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8018892:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018894:	b672      	cpsid	i
}
 8018896:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018898:	f3bf 8f4f 	dsb	sy
}
 801889c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801889e:	f3bf 8f6f 	isb	sy
}
 80188a2:	bf00      	nop
    return old;
 80188a4:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 80188a6:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 80188a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188aa:	2b01      	cmp	r3, #1
 80188ac:	d001      	beq.n	80188b2 <CDC_recv_data+0x46>
 80188ae:	69bb      	ldr	r3, [r7, #24]
 80188b0:	e000      	b.n	80188b4 <CDC_recv_data+0x48>
 80188b2:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80188b4:	60bb      	str	r3, [r7, #8]
 80188b6:	2301      	movs	r3, #1
 80188b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80188ba:	e009      	b.n	80188d0 <CDC_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 80188bc:	f7f2 fe50 	bl	800b560 <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&rx_ringbuffer, (uint8_t*)out_buf, max_len);
 80188c0:	683a      	ldr	r2, [r7, #0]
 80188c2:	6879      	ldr	r1, [r7, #4]
 80188c4:	4812      	ldr	r0, [pc, #72]	@ (8018910 <CDC_recv_data+0xa4>)
 80188c6:	f7f0 fc52 	bl	800916e <ring_buffer_dequeue_arr>
 80188ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80188cc:	2300      	movs	r3, #0
 80188ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80188d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d1f2      	bne.n	80188bc <CDC_recv_data+0x50>
 80188d6:	f107 0308 	add.w	r3, r7, #8
 80188da:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 80188e2:	f3bf 8f5f 	dmb	sy
}
 80188e6:	bf00      	nop
 80188e8:	693b      	ldr	r3, [r7, #16]
 80188ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	f383 8810 	msr	PRIMASK, r3
}
 80188f2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80188f4:	f3bf 8f4f 	dsb	sy
}
 80188f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80188fa:	f3bf 8f6f 	isb	sy
}
 80188fe:	bf00      	nop
}
 8018900:	bf00      	nop
}
 8018902:	bf00      	nop
    }

    return bytes_read;
 8018904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018906:	4618      	mov	r0, r3
 8018908:	3730      	adds	r7, #48	@ 0x30
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	2000b7cc 	.word	0x2000b7cc

08018914 <usb_printf>:
    return used;
}
#include "stdarg.h"
char usb_printf_buffer[512];
void usb_printf(const char *fmt, ...)
{
 8018914:	b40f      	push	{r0, r1, r2, r3}
 8018916:	b580      	push	{r7, lr}
 8018918:	b082      	sub	sp, #8
 801891a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 801891c:	f107 0314 	add.w	r3, r7, #20
 8018920:	607b      	str	r3, [r7, #4]
    vsnprintf(usb_printf_buffer, sizeof(usb_printf_buffer), fmt, args);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	693a      	ldr	r2, [r7, #16]
 8018926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801892a:	480c      	ldr	r0, [pc, #48]	@ (801895c <usb_printf+0x48>)
 801892c:	f003 fa8e 	bl	801be4c <vsniprintf>
    va_end(args);

    // wait until previous transmission is done
    while (CDC_Transmit_FS((uint8_t*)usb_printf_buffer, strlen(usb_printf_buffer)) == USBD_BUSY)
 8018930:	bf00      	nop
 8018932:	480a      	ldr	r0, [pc, #40]	@ (801895c <usb_printf+0x48>)
 8018934:	f7e7 fcac 	bl	8000290 <strlen>
 8018938:	4603      	mov	r3, r0
 801893a:	b29b      	uxth	r3, r3
 801893c:	4619      	mov	r1, r3
 801893e:	4807      	ldr	r0, [pc, #28]	@ (801895c <usb_printf+0x48>)
 8018940:	f7ff ff5c 	bl	80187fc <CDC_Transmit_FS>
 8018944:	4603      	mov	r3, r0
 8018946:	2b01      	cmp	r3, #1
 8018948:	d0f3      	beq.n	8018932 <usb_printf+0x1e>
        ;  // simple blocking retry
}
 801894a:	bf00      	nop
 801894c:	bf00      	nop
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018956:	b004      	add	sp, #16
 8018958:	4770      	bx	lr
 801895a:	bf00      	nop
 801895c:	2000b7dc 	.word	0x2000b7dc

08018960 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018960:	b480      	push	{r7}
 8018962:	b083      	sub	sp, #12
 8018964:	af00      	add	r7, sp, #0
 8018966:	4603      	mov	r3, r0
 8018968:	6039      	str	r1, [r7, #0]
 801896a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	2212      	movs	r2, #18
 8018970:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018972:	4b03      	ldr	r3, [pc, #12]	@ (8018980 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018974:	4618      	mov	r0, r3
 8018976:	370c      	adds	r7, #12
 8018978:	46bd      	mov	sp, r7
 801897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897e:	4770      	bx	lr
 8018980:	20000120 	.word	0x20000120

08018984 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018984:	b480      	push	{r7}
 8018986:	b083      	sub	sp, #12
 8018988:	af00      	add	r7, sp, #0
 801898a:	4603      	mov	r3, r0
 801898c:	6039      	str	r1, [r7, #0]
 801898e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018990:	683b      	ldr	r3, [r7, #0]
 8018992:	2204      	movs	r2, #4
 8018994:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018996:	4b03      	ldr	r3, [pc, #12]	@ (80189a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018998:	4618      	mov	r0, r3
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr
 80189a4:	20000134 	.word	0x20000134

080189a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	4603      	mov	r3, r0
 80189b0:	6039      	str	r1, [r7, #0]
 80189b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80189b4:	79fb      	ldrb	r3, [r7, #7]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d105      	bne.n	80189c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80189ba:	683a      	ldr	r2, [r7, #0]
 80189bc:	4907      	ldr	r1, [pc, #28]	@ (80189dc <USBD_FS_ProductStrDescriptor+0x34>)
 80189be:	4808      	ldr	r0, [pc, #32]	@ (80189e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80189c0:	f7fc fad2 	bl	8014f68 <USBD_GetString>
 80189c4:	e004      	b.n	80189d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80189c6:	683a      	ldr	r2, [r7, #0]
 80189c8:	4904      	ldr	r1, [pc, #16]	@ (80189dc <USBD_FS_ProductStrDescriptor+0x34>)
 80189ca:	4805      	ldr	r0, [pc, #20]	@ (80189e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80189cc:	f7fc facc 	bl	8014f68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80189d0:	4b02      	ldr	r3, [pc, #8]	@ (80189dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80189d2:	4618      	mov	r0, r3
 80189d4:	3708      	adds	r7, #8
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	2000b9dc 	.word	0x2000b9dc
 80189e0:	08021f40 	.word	0x08021f40

080189e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b082      	sub	sp, #8
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	4603      	mov	r3, r0
 80189ec:	6039      	str	r1, [r7, #0]
 80189ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80189f0:	683a      	ldr	r2, [r7, #0]
 80189f2:	4904      	ldr	r1, [pc, #16]	@ (8018a04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80189f4:	4804      	ldr	r0, [pc, #16]	@ (8018a08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80189f6:	f7fc fab7 	bl	8014f68 <USBD_GetString>
  return USBD_StrDesc;
 80189fa:	4b02      	ldr	r3, [pc, #8]	@ (8018a04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3708      	adds	r7, #8
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	2000b9dc 	.word	0x2000b9dc
 8018a08:	08021f58 	.word	0x08021f58

08018a0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b082      	sub	sp, #8
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	4603      	mov	r3, r0
 8018a14:	6039      	str	r1, [r7, #0]
 8018a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	221a      	movs	r2, #26
 8018a1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018a1e:	f000 f843 	bl	8018aa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018a22:	4b02      	ldr	r3, [pc, #8]	@ (8018a2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3708      	adds	r7, #8
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	20000138 	.word	0x20000138

08018a30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	4603      	mov	r3, r0
 8018a38:	6039      	str	r1, [r7, #0]
 8018a3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018a3c:	79fb      	ldrb	r3, [r7, #7]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d105      	bne.n	8018a4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a42:	683a      	ldr	r2, [r7, #0]
 8018a44:	4907      	ldr	r1, [pc, #28]	@ (8018a64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a46:	4808      	ldr	r0, [pc, #32]	@ (8018a68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a48:	f7fc fa8e 	bl	8014f68 <USBD_GetString>
 8018a4c:	e004      	b.n	8018a58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a4e:	683a      	ldr	r2, [r7, #0]
 8018a50:	4904      	ldr	r1, [pc, #16]	@ (8018a64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a52:	4805      	ldr	r0, [pc, #20]	@ (8018a68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a54:	f7fc fa88 	bl	8014f68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a58:	4b02      	ldr	r3, [pc, #8]	@ (8018a64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3708      	adds	r7, #8
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}
 8018a62:	bf00      	nop
 8018a64:	2000b9dc 	.word	0x2000b9dc
 8018a68:	08021f6c 	.word	0x08021f6c

08018a6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b082      	sub	sp, #8
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	4603      	mov	r3, r0
 8018a74:	6039      	str	r1, [r7, #0]
 8018a76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a78:	79fb      	ldrb	r3, [r7, #7]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d105      	bne.n	8018a8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a7e:	683a      	ldr	r2, [r7, #0]
 8018a80:	4907      	ldr	r1, [pc, #28]	@ (8018aa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a82:	4808      	ldr	r0, [pc, #32]	@ (8018aa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a84:	f7fc fa70 	bl	8014f68 <USBD_GetString>
 8018a88:	e004      	b.n	8018a94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a8a:	683a      	ldr	r2, [r7, #0]
 8018a8c:	4904      	ldr	r1, [pc, #16]	@ (8018aa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a8e:	4805      	ldr	r0, [pc, #20]	@ (8018aa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a90:	f7fc fa6a 	bl	8014f68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a94:	4b02      	ldr	r3, [pc, #8]	@ (8018aa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3708      	adds	r7, #8
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	2000b9dc 	.word	0x2000b9dc
 8018aa4:	08021f78 	.word	0x08021f78

08018aa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018aae:	4b0f      	ldr	r3, [pc, #60]	@ (8018aec <Get_SerialNum+0x44>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8018af0 <Get_SerialNum+0x48>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018aba:	4b0e      	ldr	r3, [pc, #56]	@ (8018af4 <Get_SerialNum+0x4c>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018ac0:	68fa      	ldr	r2, [r7, #12]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	4413      	add	r3, r2
 8018ac6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d009      	beq.n	8018ae2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018ace:	2208      	movs	r2, #8
 8018ad0:	4909      	ldr	r1, [pc, #36]	@ (8018af8 <Get_SerialNum+0x50>)
 8018ad2:	68f8      	ldr	r0, [r7, #12]
 8018ad4:	f000 f814 	bl	8018b00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018ad8:	2204      	movs	r2, #4
 8018ada:	4908      	ldr	r1, [pc, #32]	@ (8018afc <Get_SerialNum+0x54>)
 8018adc:	68b8      	ldr	r0, [r7, #8]
 8018ade:	f000 f80f 	bl	8018b00 <IntToUnicode>
  }
}
 8018ae2:	bf00      	nop
 8018ae4:	3710      	adds	r7, #16
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}
 8018aea:	bf00      	nop
 8018aec:	1fff7a10 	.word	0x1fff7a10
 8018af0:	1fff7a14 	.word	0x1fff7a14
 8018af4:	1fff7a18 	.word	0x1fff7a18
 8018af8:	2000013a 	.word	0x2000013a
 8018afc:	2000014a 	.word	0x2000014a

08018b00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018b00:	b480      	push	{r7}
 8018b02:	b087      	sub	sp, #28
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	60f8      	str	r0, [r7, #12]
 8018b08:	60b9      	str	r1, [r7, #8]
 8018b0a:	4613      	mov	r3, r2
 8018b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018b12:	2300      	movs	r3, #0
 8018b14:	75fb      	strb	r3, [r7, #23]
 8018b16:	e027      	b.n	8018b68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	0f1b      	lsrs	r3, r3, #28
 8018b1c:	2b09      	cmp	r3, #9
 8018b1e:	d80b      	bhi.n	8018b38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	0f1b      	lsrs	r3, r3, #28
 8018b24:	b2da      	uxtb	r2, r3
 8018b26:	7dfb      	ldrb	r3, [r7, #23]
 8018b28:	005b      	lsls	r3, r3, #1
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	440b      	add	r3, r1
 8018b30:	3230      	adds	r2, #48	@ 0x30
 8018b32:	b2d2      	uxtb	r2, r2
 8018b34:	701a      	strb	r2, [r3, #0]
 8018b36:	e00a      	b.n	8018b4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	0f1b      	lsrs	r3, r3, #28
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	7dfb      	ldrb	r3, [r7, #23]
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	4619      	mov	r1, r3
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	440b      	add	r3, r1
 8018b48:	3237      	adds	r2, #55	@ 0x37
 8018b4a:	b2d2      	uxtb	r2, r2
 8018b4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	011b      	lsls	r3, r3, #4
 8018b52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018b54:	7dfb      	ldrb	r3, [r7, #23]
 8018b56:	005b      	lsls	r3, r3, #1
 8018b58:	3301      	adds	r3, #1
 8018b5a:	68ba      	ldr	r2, [r7, #8]
 8018b5c:	4413      	add	r3, r2
 8018b5e:	2200      	movs	r2, #0
 8018b60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018b62:	7dfb      	ldrb	r3, [r7, #23]
 8018b64:	3301      	adds	r3, #1
 8018b66:	75fb      	strb	r3, [r7, #23]
 8018b68:	7dfa      	ldrb	r2, [r7, #23]
 8018b6a:	79fb      	ldrb	r3, [r7, #7]
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	d3d3      	bcc.n	8018b18 <IntToUnicode+0x18>
  }
}
 8018b70:	bf00      	nop
 8018b72:	bf00      	nop
 8018b74:	371c      	adds	r7, #28
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr
	...

08018b80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b08a      	sub	sp, #40	@ 0x28
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b88:	f107 0314 	add.w	r3, r7, #20
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	601a      	str	r2, [r3, #0]
 8018b90:	605a      	str	r2, [r3, #4]
 8018b92:	609a      	str	r2, [r3, #8]
 8018b94:	60da      	str	r2, [r3, #12]
 8018b96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018ba0:	d13a      	bne.n	8018c18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	613b      	str	r3, [r7, #16]
 8018ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018baa:	4a1d      	ldr	r2, [pc, #116]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018bac:	f043 0301 	orr.w	r3, r3, #1
 8018bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8018bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018bb6:	f003 0301 	and.w	r3, r3, #1
 8018bba:	613b      	str	r3, [r7, #16]
 8018bbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018bbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bc4:	2302      	movs	r3, #2
 8018bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bcc:	2303      	movs	r3, #3
 8018bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018bd0:	230a      	movs	r3, #10
 8018bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bd4:	f107 0314 	add.w	r3, r7, #20
 8018bd8:	4619      	mov	r1, r3
 8018bda:	4812      	ldr	r0, [pc, #72]	@ (8018c24 <HAL_PCD_MspInit+0xa4>)
 8018bdc:	f7f3 fd08 	bl	800c5f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018be0:	4b0f      	ldr	r3, [pc, #60]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018be4:	4a0e      	ldr	r2, [pc, #56]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018bea:	6353      	str	r3, [r2, #52]	@ 0x34
 8018bec:	2300      	movs	r3, #0
 8018bee:	60fb      	str	r3, [r7, #12]
 8018bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018bfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8018bfc:	4b08      	ldr	r3, [pc, #32]	@ (8018c20 <HAL_PCD_MspInit+0xa0>)
 8018bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018c04:	60fb      	str	r3, [r7, #12]
 8018c06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018c08:	2200      	movs	r2, #0
 8018c0a:	2105      	movs	r1, #5
 8018c0c:	2043      	movs	r0, #67	@ 0x43
 8018c0e:	f7f3 f857 	bl	800bcc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018c12:	2043      	movs	r0, #67	@ 0x43
 8018c14:	f7f3 f870 	bl	800bcf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018c18:	bf00      	nop
 8018c1a:	3728      	adds	r7, #40	@ 0x28
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}
 8018c20:	40023800 	.word	0x40023800
 8018c24:	40020000 	.word	0x40020000

08018c28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018c3c:	4619      	mov	r1, r3
 8018c3e:	4610      	mov	r0, r2
 8018c40:	f7fb f82f 	bl	8013ca2 <USBD_LL_SetupStage>
}
 8018c44:	bf00      	nop
 8018c46:	3708      	adds	r7, #8
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}

08018c4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
 8018c54:	460b      	mov	r3, r1
 8018c56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018c5e:	78fa      	ldrb	r2, [r7, #3]
 8018c60:	6879      	ldr	r1, [r7, #4]
 8018c62:	4613      	mov	r3, r2
 8018c64:	00db      	lsls	r3, r3, #3
 8018c66:	4413      	add	r3, r2
 8018c68:	009b      	lsls	r3, r3, #2
 8018c6a:	440b      	add	r3, r1
 8018c6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018c70:	681a      	ldr	r2, [r3, #0]
 8018c72:	78fb      	ldrb	r3, [r7, #3]
 8018c74:	4619      	mov	r1, r3
 8018c76:	f7fb f869 	bl	8013d4c <USBD_LL_DataOutStage>
}
 8018c7a:	bf00      	nop
 8018c7c:	3708      	adds	r7, #8
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}

08018c82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c82:	b580      	push	{r7, lr}
 8018c84:	b082      	sub	sp, #8
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	6078      	str	r0, [r7, #4]
 8018c8a:	460b      	mov	r3, r1
 8018c8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018c94:	78fa      	ldrb	r2, [r7, #3]
 8018c96:	6879      	ldr	r1, [r7, #4]
 8018c98:	4613      	mov	r3, r2
 8018c9a:	00db      	lsls	r3, r3, #3
 8018c9c:	4413      	add	r3, r2
 8018c9e:	009b      	lsls	r3, r3, #2
 8018ca0:	440b      	add	r3, r1
 8018ca2:	3320      	adds	r3, #32
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	78fb      	ldrb	r3, [r7, #3]
 8018ca8:	4619      	mov	r1, r3
 8018caa:	f7fb f902 	bl	8013eb2 <USBD_LL_DataInStage>
}
 8018cae:	bf00      	nop
 8018cb0:	3708      	adds	r7, #8
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}

08018cb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cb6:	b580      	push	{r7, lr}
 8018cb8:	b082      	sub	sp, #8
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7fb fa3c 	bl	8014142 <USBD_LL_SOF>
}
 8018cca:	bf00      	nop
 8018ccc:	3708      	adds	r7, #8
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bd80      	pop	{r7, pc}

08018cd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cd2:	b580      	push	{r7, lr}
 8018cd4:	b084      	sub	sp, #16
 8018cd6:	af00      	add	r7, sp, #0
 8018cd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	79db      	ldrb	r3, [r3, #7]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d102      	bne.n	8018cec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	73fb      	strb	r3, [r7, #15]
 8018cea:	e008      	b.n	8018cfe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	79db      	ldrb	r3, [r3, #7]
 8018cf0:	2b02      	cmp	r3, #2
 8018cf2:	d102      	bne.n	8018cfa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	73fb      	strb	r3, [r7, #15]
 8018cf8:	e001      	b.n	8018cfe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018cfa:	f7f0 fe5f 	bl	80099bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d04:	7bfa      	ldrb	r2, [r7, #15]
 8018d06:	4611      	mov	r1, r2
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f7fb f9d6 	bl	80140ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7fb f97e 	bl	8014016 <USBD_LL_Reset>
}
 8018d1a:	bf00      	nop
 8018d1c:	3710      	adds	r7, #16
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd80      	pop	{r7, pc}
	...

08018d24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7fb f9d1 	bl	80140da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	6812      	ldr	r2, [r2, #0]
 8018d46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018d4a:	f043 0301 	orr.w	r3, r3, #1
 8018d4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	7adb      	ldrb	r3, [r3, #11]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d005      	beq.n	8018d64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018d58:	4b04      	ldr	r3, [pc, #16]	@ (8018d6c <HAL_PCD_SuspendCallback+0x48>)
 8018d5a:	691b      	ldr	r3, [r3, #16]
 8018d5c:	4a03      	ldr	r2, [pc, #12]	@ (8018d6c <HAL_PCD_SuspendCallback+0x48>)
 8018d5e:	f043 0306 	orr.w	r3, r3, #6
 8018d62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018d64:	bf00      	nop
 8018d66:	3708      	adds	r7, #8
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	e000ed00 	.word	0xe000ed00

08018d70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b082      	sub	sp, #8
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7fb f9c7 	bl	8014112 <USBD_LL_Resume>
}
 8018d84:	bf00      	nop
 8018d86:	3708      	adds	r7, #8
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	bd80      	pop	{r7, pc}

08018d8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b082      	sub	sp, #8
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	460b      	mov	r3, r1
 8018d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d9e:	78fa      	ldrb	r2, [r7, #3]
 8018da0:	4611      	mov	r1, r2
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7fb fa1f 	bl	80141e6 <USBD_LL_IsoOUTIncomplete>
}
 8018da8:	bf00      	nop
 8018daa:	3708      	adds	r7, #8
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}

08018db0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b082      	sub	sp, #8
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	460b      	mov	r3, r1
 8018dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018dc2:	78fa      	ldrb	r2, [r7, #3]
 8018dc4:	4611      	mov	r1, r2
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fb f9db 	bl	8014182 <USBD_LL_IsoINIncomplete>
}
 8018dcc:	bf00      	nop
 8018dce:	3708      	adds	r7, #8
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	bd80      	pop	{r7, pc}

08018dd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7fb fa31 	bl	801424a <USBD_LL_DevConnected>
}
 8018de8:	bf00      	nop
 8018dea:	3708      	adds	r7, #8
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f7fb fa2e 	bl	8014260 <USBD_LL_DevDisconnected>
}
 8018e04:	bf00      	nop
 8018e06:	3708      	adds	r7, #8
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd80      	pop	{r7, pc}

08018e0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	781b      	ldrb	r3, [r3, #0]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d13c      	bne.n	8018e96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018e1c:	4a20      	ldr	r2, [pc, #128]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	4a1e      	ldr	r2, [pc, #120]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8018e32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018e34:	4b1a      	ldr	r3, [pc, #104]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e36:	2204      	movs	r2, #4
 8018e38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018e3a:	4b19      	ldr	r3, [pc, #100]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e3c:	2202      	movs	r2, #2
 8018e3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018e40:	4b17      	ldr	r3, [pc, #92]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e42:	2200      	movs	r2, #0
 8018e44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018e46:	4b16      	ldr	r3, [pc, #88]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e48:	2202      	movs	r2, #2
 8018e4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018e4c:	4b14      	ldr	r3, [pc, #80]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e4e:	2200      	movs	r2, #0
 8018e50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018e52:	4b13      	ldr	r3, [pc, #76]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e54:	2200      	movs	r2, #0
 8018e56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018e58:	4b11      	ldr	r3, [pc, #68]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018e5e:	4b10      	ldr	r3, [pc, #64]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e60:	2200      	movs	r2, #0
 8018e62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018e64:	4b0e      	ldr	r3, [pc, #56]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e66:	2200      	movs	r2, #0
 8018e68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018e6a:	480d      	ldr	r0, [pc, #52]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e6c:	f7f3 fe71 	bl	800cb52 <HAL_PCD_Init>
 8018e70:	4603      	mov	r3, r0
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d001      	beq.n	8018e7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018e76:	f7f0 fda1 	bl	80099bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018e7a:	2180      	movs	r1, #128	@ 0x80
 8018e7c:	4808      	ldr	r0, [pc, #32]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e7e:	f7f5 f89e 	bl	800dfbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018e82:	2240      	movs	r2, #64	@ 0x40
 8018e84:	2100      	movs	r1, #0
 8018e86:	4806      	ldr	r0, [pc, #24]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e88:	f7f5 f852 	bl	800df30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018e8c:	2280      	movs	r2, #128	@ 0x80
 8018e8e:	2101      	movs	r1, #1
 8018e90:	4803      	ldr	r0, [pc, #12]	@ (8018ea0 <USBD_LL_Init+0x94>)
 8018e92:	f7f5 f84d 	bl	800df30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018e96:	2300      	movs	r3, #0
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3708      	adds	r7, #8
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	2000bbdc 	.word	0x2000bbdc

08018ea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018eac:	2300      	movs	r3, #0
 8018eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7f3 ff58 	bl	800cd70 <HAL_PCD_Start>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ec4:	7bfb      	ldrb	r3, [r7, #15]
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f000 f942 	bl	8019150 <USBD_Get_USB_Status>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	3710      	adds	r7, #16
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}

08018eda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018eda:	b580      	push	{r7, lr}
 8018edc:	b084      	sub	sp, #16
 8018ede:	af00      	add	r7, sp, #0
 8018ee0:	6078      	str	r0, [r7, #4]
 8018ee2:	4608      	mov	r0, r1
 8018ee4:	4611      	mov	r1, r2
 8018ee6:	461a      	mov	r2, r3
 8018ee8:	4603      	mov	r3, r0
 8018eea:	70fb      	strb	r3, [r7, #3]
 8018eec:	460b      	mov	r3, r1
 8018eee:	70bb      	strb	r3, [r7, #2]
 8018ef0:	4613      	mov	r3, r2
 8018ef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ef8:	2300      	movs	r3, #0
 8018efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f02:	78bb      	ldrb	r3, [r7, #2]
 8018f04:	883a      	ldrh	r2, [r7, #0]
 8018f06:	78f9      	ldrb	r1, [r7, #3]
 8018f08:	f7f4 fc2c 	bl	800d764 <HAL_PCD_EP_Open>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f10:	7bfb      	ldrb	r3, [r7, #15]
 8018f12:	4618      	mov	r0, r3
 8018f14:	f000 f91c 	bl	8019150 <USBD_Get_USB_Status>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	3710      	adds	r7, #16
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}

08018f26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f26:	b580      	push	{r7, lr}
 8018f28:	b084      	sub	sp, #16
 8018f2a:	af00      	add	r7, sp, #0
 8018f2c:	6078      	str	r0, [r7, #4]
 8018f2e:	460b      	mov	r3, r1
 8018f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f32:	2300      	movs	r3, #0
 8018f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f36:	2300      	movs	r3, #0
 8018f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f40:	78fa      	ldrb	r2, [r7, #3]
 8018f42:	4611      	mov	r1, r2
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7f4 fc77 	bl	800d838 <HAL_PCD_EP_Close>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f4e:	7bfb      	ldrb	r3, [r7, #15]
 8018f50:	4618      	mov	r0, r3
 8018f52:	f000 f8fd 	bl	8019150 <USBD_Get_USB_Status>
 8018f56:	4603      	mov	r3, r0
 8018f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	3710      	adds	r7, #16
 8018f60:	46bd      	mov	sp, r7
 8018f62:	bd80      	pop	{r7, pc}

08018f64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b084      	sub	sp, #16
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
 8018f6c:	460b      	mov	r3, r1
 8018f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f70:	2300      	movs	r3, #0
 8018f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f74:	2300      	movs	r3, #0
 8018f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f7e:	78fa      	ldrb	r2, [r7, #3]
 8018f80:	4611      	mov	r1, r2
 8018f82:	4618      	mov	r0, r3
 8018f84:	f7f4 fd2f 	bl	800d9e6 <HAL_PCD_EP_SetStall>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f8c:	7bfb      	ldrb	r3, [r7, #15]
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f000 f8de 	bl	8019150 <USBD_Get_USB_Status>
 8018f94:	4603      	mov	r3, r0
 8018f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	3710      	adds	r7, #16
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}

08018fa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fa2:	b580      	push	{r7, lr}
 8018fa4:	b084      	sub	sp, #16
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	6078      	str	r0, [r7, #4]
 8018faa:	460b      	mov	r3, r1
 8018fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018fbc:	78fa      	ldrb	r2, [r7, #3]
 8018fbe:	4611      	mov	r1, r2
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f7f4 fd73 	bl	800daac <HAL_PCD_EP_ClrStall>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fca:	7bfb      	ldrb	r3, [r7, #15]
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f000 f8bf 	bl	8019150 <USBD_Get_USB_Status>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fd8:	4618      	mov	r0, r3
 8018fda:	3710      	adds	r7, #16
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fe0:	b480      	push	{r7}
 8018fe2:	b085      	sub	sp, #20
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	460b      	mov	r3, r1
 8018fea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	da0b      	bge.n	8019014 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018ffc:	78fb      	ldrb	r3, [r7, #3]
 8018ffe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019002:	68f9      	ldr	r1, [r7, #12]
 8019004:	4613      	mov	r3, r2
 8019006:	00db      	lsls	r3, r3, #3
 8019008:	4413      	add	r3, r2
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	440b      	add	r3, r1
 801900e:	3316      	adds	r3, #22
 8019010:	781b      	ldrb	r3, [r3, #0]
 8019012:	e00b      	b.n	801902c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019014:	78fb      	ldrb	r3, [r7, #3]
 8019016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801901a:	68f9      	ldr	r1, [r7, #12]
 801901c:	4613      	mov	r3, r2
 801901e:	00db      	lsls	r3, r3, #3
 8019020:	4413      	add	r3, r2
 8019022:	009b      	lsls	r3, r3, #2
 8019024:	440b      	add	r3, r1
 8019026:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801902a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801902c:	4618      	mov	r0, r3
 801902e:	3714      	adds	r7, #20
 8019030:	46bd      	mov	sp, r7
 8019032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019036:	4770      	bx	lr

08019038 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b084      	sub	sp, #16
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
 8019040:	460b      	mov	r3, r1
 8019042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019044:	2300      	movs	r3, #0
 8019046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019048:	2300      	movs	r3, #0
 801904a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019052:	78fa      	ldrb	r2, [r7, #3]
 8019054:	4611      	mov	r1, r2
 8019056:	4618      	mov	r0, r3
 8019058:	f7f4 fb60 	bl	800d71c <HAL_PCD_SetAddress>
 801905c:	4603      	mov	r3, r0
 801905e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019060:	7bfb      	ldrb	r3, [r7, #15]
 8019062:	4618      	mov	r0, r3
 8019064:	f000 f874 	bl	8019150 <USBD_Get_USB_Status>
 8019068:	4603      	mov	r3, r0
 801906a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801906c:	7bbb      	ldrb	r3, [r7, #14]
}
 801906e:	4618      	mov	r0, r3
 8019070:	3710      	adds	r7, #16
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}

08019076 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019076:	b580      	push	{r7, lr}
 8019078:	b086      	sub	sp, #24
 801907a:	af00      	add	r7, sp, #0
 801907c:	60f8      	str	r0, [r7, #12]
 801907e:	607a      	str	r2, [r7, #4]
 8019080:	603b      	str	r3, [r7, #0]
 8019082:	460b      	mov	r3, r1
 8019084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019086:	2300      	movs	r3, #0
 8019088:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801908a:	2300      	movs	r3, #0
 801908c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019094:	7af9      	ldrb	r1, [r7, #11]
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	687a      	ldr	r2, [r7, #4]
 801909a:	f7f4 fc6a 	bl	800d972 <HAL_PCD_EP_Transmit>
 801909e:	4603      	mov	r3, r0
 80190a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190a2:	7dfb      	ldrb	r3, [r7, #23]
 80190a4:	4618      	mov	r0, r3
 80190a6:	f000 f853 	bl	8019150 <USBD_Get_USB_Status>
 80190aa:	4603      	mov	r3, r0
 80190ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80190ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	3718      	adds	r7, #24
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b086      	sub	sp, #24
 80190bc:	af00      	add	r7, sp, #0
 80190be:	60f8      	str	r0, [r7, #12]
 80190c0:	607a      	str	r2, [r7, #4]
 80190c2:	603b      	str	r3, [r7, #0]
 80190c4:	460b      	mov	r3, r1
 80190c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190c8:	2300      	movs	r3, #0
 80190ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190cc:	2300      	movs	r3, #0
 80190ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80190d6:	7af9      	ldrb	r1, [r7, #11]
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	687a      	ldr	r2, [r7, #4]
 80190dc:	f7f4 fbf6 	bl	800d8cc <HAL_PCD_EP_Receive>
 80190e0:	4603      	mov	r3, r0
 80190e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190e4:	7dfb      	ldrb	r3, [r7, #23]
 80190e6:	4618      	mov	r0, r3
 80190e8:	f000 f832 	bl	8019150 <USBD_Get_USB_Status>
 80190ec:	4603      	mov	r3, r0
 80190ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80190f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3718      	adds	r7, #24
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bd80      	pop	{r7, pc}

080190fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190fa:	b580      	push	{r7, lr}
 80190fc:	b082      	sub	sp, #8
 80190fe:	af00      	add	r7, sp, #0
 8019100:	6078      	str	r0, [r7, #4]
 8019102:	460b      	mov	r3, r1
 8019104:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801910c:	78fa      	ldrb	r2, [r7, #3]
 801910e:	4611      	mov	r1, r2
 8019110:	4618      	mov	r0, r3
 8019112:	f7f4 fc16 	bl	800d942 <HAL_PCD_EP_GetRxCount>
 8019116:	4603      	mov	r3, r0
}
 8019118:	4618      	mov	r0, r3
 801911a:	3708      	adds	r7, #8
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}

08019120 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019120:	b480      	push	{r7}
 8019122:	b083      	sub	sp, #12
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019128:	4b03      	ldr	r3, [pc, #12]	@ (8019138 <USBD_static_malloc+0x18>)
}
 801912a:	4618      	mov	r0, r3
 801912c:	370c      	adds	r7, #12
 801912e:	46bd      	mov	sp, r7
 8019130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019134:	4770      	bx	lr
 8019136:	bf00      	nop
 8019138:	2000c0c0 	.word	0x2000c0c0

0801913c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801913c:	b480      	push	{r7}
 801913e:	b083      	sub	sp, #12
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]

}
 8019144:	bf00      	nop
 8019146:	370c      	adds	r7, #12
 8019148:	46bd      	mov	sp, r7
 801914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914e:	4770      	bx	lr

08019150 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019150:	b480      	push	{r7}
 8019152:	b085      	sub	sp, #20
 8019154:	af00      	add	r7, sp, #0
 8019156:	4603      	mov	r3, r0
 8019158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801915a:	2300      	movs	r3, #0
 801915c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801915e:	79fb      	ldrb	r3, [r7, #7]
 8019160:	2b03      	cmp	r3, #3
 8019162:	d817      	bhi.n	8019194 <USBD_Get_USB_Status+0x44>
 8019164:	a201      	add	r2, pc, #4	@ (adr r2, 801916c <USBD_Get_USB_Status+0x1c>)
 8019166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801916a:	bf00      	nop
 801916c:	0801917d 	.word	0x0801917d
 8019170:	08019183 	.word	0x08019183
 8019174:	08019189 	.word	0x08019189
 8019178:	0801918f 	.word	0x0801918f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801917c:	2300      	movs	r3, #0
 801917e:	73fb      	strb	r3, [r7, #15]
    break;
 8019180:	e00b      	b.n	801919a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019182:	2303      	movs	r3, #3
 8019184:	73fb      	strb	r3, [r7, #15]
    break;
 8019186:	e008      	b.n	801919a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019188:	2301      	movs	r3, #1
 801918a:	73fb      	strb	r3, [r7, #15]
    break;
 801918c:	e005      	b.n	801919a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801918e:	2303      	movs	r3, #3
 8019190:	73fb      	strb	r3, [r7, #15]
    break;
 8019192:	e002      	b.n	801919a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019194:	2303      	movs	r3, #3
 8019196:	73fb      	strb	r3, [r7, #15]
    break;
 8019198:	bf00      	nop
  }
  return usb_status;
 801919a:	7bfb      	ldrb	r3, [r7, #15]
}
 801919c:	4618      	mov	r0, r3
 801919e:	3714      	adds	r7, #20
 80191a0:	46bd      	mov	sp, r7
 80191a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a6:	4770      	bx	lr

080191a8 <acosf>:
 80191a8:	b508      	push	{r3, lr}
 80191aa:	ed2d 8b02 	vpush	{d8}
 80191ae:	eeb0 8a40 	vmov.f32	s16, s0
 80191b2:	f000 faef 	bl	8019794 <__ieee754_acosf>
 80191b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80191ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191be:	eef0 8a40 	vmov.f32	s17, s0
 80191c2:	d615      	bvs.n	80191f0 <acosf+0x48>
 80191c4:	eeb0 0a48 	vmov.f32	s0, s16
 80191c8:	f000 f9d6 	bl	8019578 <fabsf>
 80191cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80191d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80191d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191d8:	dd0a      	ble.n	80191f0 <acosf+0x48>
 80191da:	f002 ffb5 	bl	801c148 <__errno>
 80191de:	ecbd 8b02 	vpop	{d8}
 80191e2:	2321      	movs	r3, #33	@ 0x21
 80191e4:	6003      	str	r3, [r0, #0]
 80191e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80191ea:	4804      	ldr	r0, [pc, #16]	@ (80191fc <acosf+0x54>)
 80191ec:	f000 ba28 	b.w	8019640 <nanf>
 80191f0:	eeb0 0a68 	vmov.f32	s0, s17
 80191f4:	ecbd 8b02 	vpop	{d8}
 80191f8:	bd08      	pop	{r3, pc}
 80191fa:	bf00      	nop
 80191fc:	080220ef 	.word	0x080220ef

08019200 <asinf>:
 8019200:	b508      	push	{r3, lr}
 8019202:	ed2d 8b02 	vpush	{d8}
 8019206:	eeb0 8a40 	vmov.f32	s16, s0
 801920a:	f000 fbb9 	bl	8019980 <__ieee754_asinf>
 801920e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019216:	eef0 8a40 	vmov.f32	s17, s0
 801921a:	d615      	bvs.n	8019248 <asinf+0x48>
 801921c:	eeb0 0a48 	vmov.f32	s0, s16
 8019220:	f000 f9aa 	bl	8019578 <fabsf>
 8019224:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019228:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801922c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019230:	dd0a      	ble.n	8019248 <asinf+0x48>
 8019232:	f002 ff89 	bl	801c148 <__errno>
 8019236:	ecbd 8b02 	vpop	{d8}
 801923a:	2321      	movs	r3, #33	@ 0x21
 801923c:	6003      	str	r3, [r0, #0]
 801923e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019242:	4804      	ldr	r0, [pc, #16]	@ (8019254 <asinf+0x54>)
 8019244:	f000 b9fc 	b.w	8019640 <nanf>
 8019248:	eeb0 0a68 	vmov.f32	s0, s17
 801924c:	ecbd 8b02 	vpop	{d8}
 8019250:	bd08      	pop	{r3, pc}
 8019252:	bf00      	nop
 8019254:	080220ef 	.word	0x080220ef

08019258 <atan2f>:
 8019258:	f000 bc76 	b.w	8019b48 <__ieee754_atan2f>

0801925c <powf>:
 801925c:	b508      	push	{r3, lr}
 801925e:	ed2d 8b04 	vpush	{d8-d9}
 8019262:	eeb0 8a60 	vmov.f32	s16, s1
 8019266:	eeb0 9a40 	vmov.f32	s18, s0
 801926a:	f000 fd0d 	bl	8019c88 <__ieee754_powf>
 801926e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019276:	eef0 8a40 	vmov.f32	s17, s0
 801927a:	d63e      	bvs.n	80192fa <powf+0x9e>
 801927c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8019280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019284:	d112      	bne.n	80192ac <powf+0x50>
 8019286:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801928a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801928e:	d039      	beq.n	8019304 <powf+0xa8>
 8019290:	eeb0 0a48 	vmov.f32	s0, s16
 8019294:	f000 f9be 	bl	8019614 <finitef>
 8019298:	b378      	cbz	r0, 80192fa <powf+0x9e>
 801929a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192a2:	d52a      	bpl.n	80192fa <powf+0x9e>
 80192a4:	f002 ff50 	bl	801c148 <__errno>
 80192a8:	2322      	movs	r3, #34	@ 0x22
 80192aa:	e014      	b.n	80192d6 <powf+0x7a>
 80192ac:	f000 f9b2 	bl	8019614 <finitef>
 80192b0:	b998      	cbnz	r0, 80192da <powf+0x7e>
 80192b2:	eeb0 0a49 	vmov.f32	s0, s18
 80192b6:	f000 f9ad 	bl	8019614 <finitef>
 80192ba:	b170      	cbz	r0, 80192da <powf+0x7e>
 80192bc:	eeb0 0a48 	vmov.f32	s0, s16
 80192c0:	f000 f9a8 	bl	8019614 <finitef>
 80192c4:	b148      	cbz	r0, 80192da <powf+0x7e>
 80192c6:	eef4 8a68 	vcmp.f32	s17, s17
 80192ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ce:	d7e9      	bvc.n	80192a4 <powf+0x48>
 80192d0:	f002 ff3a 	bl	801c148 <__errno>
 80192d4:	2321      	movs	r3, #33	@ 0x21
 80192d6:	6003      	str	r3, [r0, #0]
 80192d8:	e00f      	b.n	80192fa <powf+0x9e>
 80192da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80192de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e2:	d10a      	bne.n	80192fa <powf+0x9e>
 80192e4:	eeb0 0a49 	vmov.f32	s0, s18
 80192e8:	f000 f994 	bl	8019614 <finitef>
 80192ec:	b128      	cbz	r0, 80192fa <powf+0x9e>
 80192ee:	eeb0 0a48 	vmov.f32	s0, s16
 80192f2:	f000 f98f 	bl	8019614 <finitef>
 80192f6:	2800      	cmp	r0, #0
 80192f8:	d1d4      	bne.n	80192a4 <powf+0x48>
 80192fa:	eeb0 0a68 	vmov.f32	s0, s17
 80192fe:	ecbd 8b04 	vpop	{d8-d9}
 8019302:	bd08      	pop	{r3, pc}
 8019304:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8019308:	e7f7      	b.n	80192fa <powf+0x9e>
	...

0801930c <sqrtf>:
 801930c:	b508      	push	{r3, lr}
 801930e:	ed2d 8b02 	vpush	{d8}
 8019312:	eeb0 8a40 	vmov.f32	s16, s0
 8019316:	f000 f999 	bl	801964c <__ieee754_sqrtf>
 801931a:	eeb4 8a48 	vcmp.f32	s16, s16
 801931e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019322:	d60c      	bvs.n	801933e <sqrtf+0x32>
 8019324:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019344 <sqrtf+0x38>
 8019328:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019330:	d505      	bpl.n	801933e <sqrtf+0x32>
 8019332:	f002 ff09 	bl	801c148 <__errno>
 8019336:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801933a:	2321      	movs	r3, #33	@ 0x21
 801933c:	6003      	str	r3, [r0, #0]
 801933e:	ecbd 8b02 	vpop	{d8}
 8019342:	bd08      	pop	{r3, pc}
 8019344:	00000000 	.word	0x00000000

08019348 <atanf>:
 8019348:	b538      	push	{r3, r4, r5, lr}
 801934a:	ee10 5a10 	vmov	r5, s0
 801934e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019352:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8019356:	eef0 7a40 	vmov.f32	s15, s0
 801935a:	d310      	bcc.n	801937e <atanf+0x36>
 801935c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8019360:	d904      	bls.n	801936c <atanf+0x24>
 8019362:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019366:	eeb0 0a67 	vmov.f32	s0, s15
 801936a:	bd38      	pop	{r3, r4, r5, pc}
 801936c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80194a4 <atanf+0x15c>
 8019370:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80194a8 <atanf+0x160>
 8019374:	2d00      	cmp	r5, #0
 8019376:	bfc8      	it	gt
 8019378:	eef0 7a47 	vmovgt.f32	s15, s14
 801937c:	e7f3      	b.n	8019366 <atanf+0x1e>
 801937e:	4b4b      	ldr	r3, [pc, #300]	@ (80194ac <atanf+0x164>)
 8019380:	429c      	cmp	r4, r3
 8019382:	d810      	bhi.n	80193a6 <atanf+0x5e>
 8019384:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8019388:	d20a      	bcs.n	80193a0 <atanf+0x58>
 801938a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80194b0 <atanf+0x168>
 801938e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019396:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801939e:	dce2      	bgt.n	8019366 <atanf+0x1e>
 80193a0:	f04f 33ff 	mov.w	r3, #4294967295
 80193a4:	e013      	b.n	80193ce <atanf+0x86>
 80193a6:	f000 f8e7 	bl	8019578 <fabsf>
 80193aa:	4b42      	ldr	r3, [pc, #264]	@ (80194b4 <atanf+0x16c>)
 80193ac:	429c      	cmp	r4, r3
 80193ae:	d84f      	bhi.n	8019450 <atanf+0x108>
 80193b0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80193b4:	429c      	cmp	r4, r3
 80193b6:	d841      	bhi.n	801943c <atanf+0xf4>
 80193b8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80193bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80193c0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80193c4:	2300      	movs	r3, #0
 80193c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80193ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80193ce:	1c5a      	adds	r2, r3, #1
 80193d0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80193d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80194b8 <atanf+0x170>
 80193d8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80194bc <atanf+0x174>
 80193dc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80194c0 <atanf+0x178>
 80193e0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80193e4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80193e8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80194c4 <atanf+0x17c>
 80193ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80193f0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80194c8 <atanf+0x180>
 80193f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80193f8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80194cc <atanf+0x184>
 80193fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019400:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80194d0 <atanf+0x188>
 8019404:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019408:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80194d4 <atanf+0x18c>
 801940c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019410:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80194d8 <atanf+0x190>
 8019414:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019418:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80194dc <atanf+0x194>
 801941c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019420:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80194e0 <atanf+0x198>
 8019424:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019428:	ee27 7a26 	vmul.f32	s14, s14, s13
 801942c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019434:	d121      	bne.n	801947a <atanf+0x132>
 8019436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801943a:	e794      	b.n	8019366 <atanf+0x1e>
 801943c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019440:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019444:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019448:	2301      	movs	r3, #1
 801944a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801944e:	e7be      	b.n	80193ce <atanf+0x86>
 8019450:	4b24      	ldr	r3, [pc, #144]	@ (80194e4 <atanf+0x19c>)
 8019452:	429c      	cmp	r4, r3
 8019454:	d80b      	bhi.n	801946e <atanf+0x126>
 8019456:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801945a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801945e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019462:	2302      	movs	r3, #2
 8019464:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801946c:	e7af      	b.n	80193ce <atanf+0x86>
 801946e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8019472:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019476:	2303      	movs	r3, #3
 8019478:	e7a9      	b.n	80193ce <atanf+0x86>
 801947a:	4a1b      	ldr	r2, [pc, #108]	@ (80194e8 <atanf+0x1a0>)
 801947c:	491b      	ldr	r1, [pc, #108]	@ (80194ec <atanf+0x1a4>)
 801947e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019482:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019486:	edd3 6a00 	vldr	s13, [r3]
 801948a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801948e:	2d00      	cmp	r5, #0
 8019490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019494:	edd2 7a00 	vldr	s15, [r2]
 8019498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801949c:	bfb8      	it	lt
 801949e:	eef1 7a67 	vneglt.f32	s15, s15
 80194a2:	e760      	b.n	8019366 <atanf+0x1e>
 80194a4:	bfc90fdb 	.word	0xbfc90fdb
 80194a8:	3fc90fdb 	.word	0x3fc90fdb
 80194ac:	3edfffff 	.word	0x3edfffff
 80194b0:	7149f2ca 	.word	0x7149f2ca
 80194b4:	3f97ffff 	.word	0x3f97ffff
 80194b8:	3c8569d7 	.word	0x3c8569d7
 80194bc:	3d4bda59 	.word	0x3d4bda59
 80194c0:	bd6ef16b 	.word	0xbd6ef16b
 80194c4:	3d886b35 	.word	0x3d886b35
 80194c8:	3dba2e6e 	.word	0x3dba2e6e
 80194cc:	3e124925 	.word	0x3e124925
 80194d0:	3eaaaaab 	.word	0x3eaaaaab
 80194d4:	bd15a221 	.word	0xbd15a221
 80194d8:	bd9d8795 	.word	0xbd9d8795
 80194dc:	bde38e38 	.word	0xbde38e38
 80194e0:	be4ccccd 	.word	0xbe4ccccd
 80194e4:	401bffff 	.word	0x401bffff
 80194e8:	0802226c 	.word	0x0802226c
 80194ec:	0802225c 	.word	0x0802225c

080194f0 <cosf>:
 80194f0:	ee10 3a10 	vmov	r3, s0
 80194f4:	b507      	push	{r0, r1, r2, lr}
 80194f6:	4a1e      	ldr	r2, [pc, #120]	@ (8019570 <cosf+0x80>)
 80194f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80194fc:	4293      	cmp	r3, r2
 80194fe:	d806      	bhi.n	801950e <cosf+0x1e>
 8019500:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019574 <cosf+0x84>
 8019504:	b003      	add	sp, #12
 8019506:	f85d eb04 	ldr.w	lr, [sp], #4
 801950a:	f000 b8a3 	b.w	8019654 <__kernel_cosf>
 801950e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019512:	d304      	bcc.n	801951e <cosf+0x2e>
 8019514:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019518:	b003      	add	sp, #12
 801951a:	f85d fb04 	ldr.w	pc, [sp], #4
 801951e:	4668      	mov	r0, sp
 8019520:	f000 fe80 	bl	801a224 <__ieee754_rem_pio2f>
 8019524:	f000 0003 	and.w	r0, r0, #3
 8019528:	2801      	cmp	r0, #1
 801952a:	d009      	beq.n	8019540 <cosf+0x50>
 801952c:	2802      	cmp	r0, #2
 801952e:	d010      	beq.n	8019552 <cosf+0x62>
 8019530:	b9b0      	cbnz	r0, 8019560 <cosf+0x70>
 8019532:	eddd 0a01 	vldr	s1, [sp, #4]
 8019536:	ed9d 0a00 	vldr	s0, [sp]
 801953a:	f000 f88b 	bl	8019654 <__kernel_cosf>
 801953e:	e7eb      	b.n	8019518 <cosf+0x28>
 8019540:	eddd 0a01 	vldr	s1, [sp, #4]
 8019544:	ed9d 0a00 	vldr	s0, [sp]
 8019548:	f000 f8dc 	bl	8019704 <__kernel_sinf>
 801954c:	eeb1 0a40 	vneg.f32	s0, s0
 8019550:	e7e2      	b.n	8019518 <cosf+0x28>
 8019552:	eddd 0a01 	vldr	s1, [sp, #4]
 8019556:	ed9d 0a00 	vldr	s0, [sp]
 801955a:	f000 f87b 	bl	8019654 <__kernel_cosf>
 801955e:	e7f5      	b.n	801954c <cosf+0x5c>
 8019560:	eddd 0a01 	vldr	s1, [sp, #4]
 8019564:	ed9d 0a00 	vldr	s0, [sp]
 8019568:	2001      	movs	r0, #1
 801956a:	f000 f8cb 	bl	8019704 <__kernel_sinf>
 801956e:	e7d3      	b.n	8019518 <cosf+0x28>
 8019570:	3f490fd8 	.word	0x3f490fd8
 8019574:	00000000 	.word	0x00000000

08019578 <fabsf>:
 8019578:	ee10 3a10 	vmov	r3, s0
 801957c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019580:	ee00 3a10 	vmov	s0, r3
 8019584:	4770      	bx	lr
	...

08019588 <sinf>:
 8019588:	ee10 3a10 	vmov	r3, s0
 801958c:	b507      	push	{r0, r1, r2, lr}
 801958e:	4a1f      	ldr	r2, [pc, #124]	@ (801960c <sinf+0x84>)
 8019590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019594:	4293      	cmp	r3, r2
 8019596:	d807      	bhi.n	80195a8 <sinf+0x20>
 8019598:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8019610 <sinf+0x88>
 801959c:	2000      	movs	r0, #0
 801959e:	b003      	add	sp, #12
 80195a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80195a4:	f000 b8ae 	b.w	8019704 <__kernel_sinf>
 80195a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80195ac:	d304      	bcc.n	80195b8 <sinf+0x30>
 80195ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195b2:	b003      	add	sp, #12
 80195b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80195b8:	4668      	mov	r0, sp
 80195ba:	f000 fe33 	bl	801a224 <__ieee754_rem_pio2f>
 80195be:	f000 0003 	and.w	r0, r0, #3
 80195c2:	2801      	cmp	r0, #1
 80195c4:	d00a      	beq.n	80195dc <sinf+0x54>
 80195c6:	2802      	cmp	r0, #2
 80195c8:	d00f      	beq.n	80195ea <sinf+0x62>
 80195ca:	b9c0      	cbnz	r0, 80195fe <sinf+0x76>
 80195cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80195d0:	ed9d 0a00 	vldr	s0, [sp]
 80195d4:	2001      	movs	r0, #1
 80195d6:	f000 f895 	bl	8019704 <__kernel_sinf>
 80195da:	e7ea      	b.n	80195b2 <sinf+0x2a>
 80195dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80195e0:	ed9d 0a00 	vldr	s0, [sp]
 80195e4:	f000 f836 	bl	8019654 <__kernel_cosf>
 80195e8:	e7e3      	b.n	80195b2 <sinf+0x2a>
 80195ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80195ee:	ed9d 0a00 	vldr	s0, [sp]
 80195f2:	2001      	movs	r0, #1
 80195f4:	f000 f886 	bl	8019704 <__kernel_sinf>
 80195f8:	eeb1 0a40 	vneg.f32	s0, s0
 80195fc:	e7d9      	b.n	80195b2 <sinf+0x2a>
 80195fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8019602:	ed9d 0a00 	vldr	s0, [sp]
 8019606:	f000 f825 	bl	8019654 <__kernel_cosf>
 801960a:	e7f5      	b.n	80195f8 <sinf+0x70>
 801960c:	3f490fd8 	.word	0x3f490fd8
 8019610:	00000000 	.word	0x00000000

08019614 <finitef>:
 8019614:	ee10 3a10 	vmov	r3, s0
 8019618:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801961c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8019620:	bfac      	ite	ge
 8019622:	2000      	movge	r0, #0
 8019624:	2001      	movlt	r0, #1
 8019626:	4770      	bx	lr

08019628 <copysignf>:
 8019628:	ee10 2a10 	vmov	r2, s0
 801962c:	ee10 3a90 	vmov	r3, s1
 8019630:	f362 031e 	bfi	r3, r2, #0, #31
 8019634:	ee00 3a90 	vmov	s1, r3
 8019638:	eeb0 0a60 	vmov.f32	s0, s1
 801963c:	4770      	bx	lr
	...

08019640 <nanf>:
 8019640:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019648 <nanf+0x8>
 8019644:	4770      	bx	lr
 8019646:	bf00      	nop
 8019648:	7fc00000 	.word	0x7fc00000

0801964c <__ieee754_sqrtf>:
 801964c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019650:	4770      	bx	lr
	...

08019654 <__kernel_cosf>:
 8019654:	ee10 3a10 	vmov	r3, s0
 8019658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801965c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019660:	eef0 6a40 	vmov.f32	s13, s0
 8019664:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019668:	d204      	bcs.n	8019674 <__kernel_cosf+0x20>
 801966a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801966e:	ee17 2a90 	vmov	r2, s15
 8019672:	b342      	cbz	r2, 80196c6 <__kernel_cosf+0x72>
 8019674:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019678:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80196e4 <__kernel_cosf+0x90>
 801967c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80196e8 <__kernel_cosf+0x94>
 8019680:	4a1a      	ldr	r2, [pc, #104]	@ (80196ec <__kernel_cosf+0x98>)
 8019682:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019686:	4293      	cmp	r3, r2
 8019688:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80196f0 <__kernel_cosf+0x9c>
 801968c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019690:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80196f4 <__kernel_cosf+0xa0>
 8019694:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019698:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80196f8 <__kernel_cosf+0xa4>
 801969c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80196a0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80196fc <__kernel_cosf+0xa8>
 80196a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80196a8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80196ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 80196b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80196b4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80196b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80196bc:	d804      	bhi.n	80196c8 <__kernel_cosf+0x74>
 80196be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80196c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80196c6:	4770      	bx	lr
 80196c8:	4a0d      	ldr	r2, [pc, #52]	@ (8019700 <__kernel_cosf+0xac>)
 80196ca:	4293      	cmp	r3, r2
 80196cc:	bf9a      	itte	ls
 80196ce:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80196d2:	ee07 3a10 	vmovls	s14, r3
 80196d6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80196da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80196de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80196e2:	e7ec      	b.n	80196be <__kernel_cosf+0x6a>
 80196e4:	ad47d74e 	.word	0xad47d74e
 80196e8:	310f74f6 	.word	0x310f74f6
 80196ec:	3e999999 	.word	0x3e999999
 80196f0:	b493f27c 	.word	0xb493f27c
 80196f4:	37d00d01 	.word	0x37d00d01
 80196f8:	bab60b61 	.word	0xbab60b61
 80196fc:	3d2aaaab 	.word	0x3d2aaaab
 8019700:	3f480000 	.word	0x3f480000

08019704 <__kernel_sinf>:
 8019704:	ee10 3a10 	vmov	r3, s0
 8019708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801970c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019710:	d204      	bcs.n	801971c <__kernel_sinf+0x18>
 8019712:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019716:	ee17 3a90 	vmov	r3, s15
 801971a:	b35b      	cbz	r3, 8019774 <__kernel_sinf+0x70>
 801971c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019720:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019778 <__kernel_sinf+0x74>
 8019724:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801977c <__kernel_sinf+0x78>
 8019728:	eea7 6a27 	vfma.f32	s12, s14, s15
 801972c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019780 <__kernel_sinf+0x7c>
 8019730:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019734:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019784 <__kernel_sinf+0x80>
 8019738:	eea7 6a87 	vfma.f32	s12, s15, s14
 801973c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8019788 <__kernel_sinf+0x84>
 8019740:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019744:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019748:	b930      	cbnz	r0, 8019758 <__kernel_sinf+0x54>
 801974a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801978c <__kernel_sinf+0x88>
 801974e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019752:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019756:	4770      	bx	lr
 8019758:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801975c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019760:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019764:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019768:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019790 <__kernel_sinf+0x8c>
 801976c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019770:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019774:	4770      	bx	lr
 8019776:	bf00      	nop
 8019778:	2f2ec9d3 	.word	0x2f2ec9d3
 801977c:	b2d72f34 	.word	0xb2d72f34
 8019780:	3638ef1b 	.word	0x3638ef1b
 8019784:	b9500d01 	.word	0xb9500d01
 8019788:	3c088889 	.word	0x3c088889
 801978c:	be2aaaab 	.word	0xbe2aaaab
 8019790:	3e2aaaab 	.word	0x3e2aaaab

08019794 <__ieee754_acosf>:
 8019794:	b508      	push	{r3, lr}
 8019796:	ee10 3a10 	vmov	r3, s0
 801979a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801979e:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80197a2:	ed2d 8b0c 	vpush	{d8-d13}
 80197a6:	d10a      	bne.n	80197be <__ieee754_acosf+0x2a>
 80197a8:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 801993c <__ieee754_acosf+0x1a8>
 80197ac:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8019940 <__ieee754_acosf+0x1ac>
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	bfc8      	it	gt
 80197b4:	eeb0 0a67 	vmovgt.f32	s0, s15
 80197b8:	ecbd 8b0c 	vpop	{d8-d13}
 80197bc:	bd08      	pop	{r3, pc}
 80197be:	d904      	bls.n	80197ca <__ieee754_acosf+0x36>
 80197c0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80197c4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80197c8:	e7f6      	b.n	80197b8 <__ieee754_acosf+0x24>
 80197ca:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80197ce:	d23c      	bcs.n	801984a <__ieee754_acosf+0xb6>
 80197d0:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80197d4:	f240 80af 	bls.w	8019936 <__ieee754_acosf+0x1a2>
 80197d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80197dc:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8019944 <__ieee754_acosf+0x1b0>
 80197e0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8019948 <__ieee754_acosf+0x1b4>
 80197e4:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 801994c <__ieee754_acosf+0x1b8>
 80197e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80197ec:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8019950 <__ieee754_acosf+0x1bc>
 80197f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80197f4:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8019954 <__ieee754_acosf+0x1c0>
 80197f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80197fc:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8019958 <__ieee754_acosf+0x1c4>
 8019800:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019804:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801995c <__ieee754_acosf+0x1c8>
 8019808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801980c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8019960 <__ieee754_acosf+0x1cc>
 8019810:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019814:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8019964 <__ieee754_acosf+0x1d0>
 8019818:	eee6 6a27 	vfma.f32	s13, s12, s15
 801981c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8019968 <__ieee754_acosf+0x1d4>
 8019820:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019828:	eee6 6a27 	vfma.f32	s13, s12, s15
 801982c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019830:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801996c <__ieee754_acosf+0x1d8>
 8019834:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8019838:	eee0 7a46 	vfms.f32	s15, s0, s12
 801983c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019840:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8019970 <__ieee754_acosf+0x1dc>
 8019844:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019848:	e7b6      	b.n	80197b8 <__ieee754_acosf+0x24>
 801984a:	2b00      	cmp	r3, #0
 801984c:	eddf da3d 	vldr	s27, [pc, #244]	@ 8019944 <__ieee754_acosf+0x1b0>
 8019850:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8019948 <__ieee754_acosf+0x1b4>
 8019854:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8019950 <__ieee754_acosf+0x1bc>
 8019858:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8019954 <__ieee754_acosf+0x1c0>
 801985c:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8019958 <__ieee754_acosf+0x1c4>
 8019860:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 801995c <__ieee754_acosf+0x1c8>
 8019864:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8019960 <__ieee754_acosf+0x1cc>
 8019868:	eddf aa38 	vldr	s21, [pc, #224]	@ 801994c <__ieee754_acosf+0x1b8>
 801986c:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8019964 <__ieee754_acosf+0x1d0>
 8019870:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8019968 <__ieee754_acosf+0x1d4>
 8019874:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8019878:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801987c:	da28      	bge.n	80198d0 <__ieee754_acosf+0x13c>
 801987e:	ee30 8a09 	vadd.f32	s16, s0, s18
 8019882:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019886:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801988a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801988e:	eeac ca80 	vfma.f32	s24, s25, s0
 8019892:	eeaa aa80 	vfma.f32	s20, s21, s0
 8019896:	eeec ba00 	vfma.f32	s23, s24, s0
 801989a:	eeea 9a00 	vfma.f32	s19, s20, s0
 801989e:	eeab ba80 	vfma.f32	s22, s23, s0
 80198a2:	eea9 9a80 	vfma.f32	s18, s19, s0
 80198a6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80198aa:	ee68 8a80 	vmul.f32	s17, s17, s0
 80198ae:	f7ff fecd 	bl	801964c <__ieee754_sqrtf>
 80198b2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80198b6:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8019974 <__ieee754_acosf+0x1e0>
 80198ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80198be:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80198c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80198c6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8019978 <__ieee754_acosf+0x1e4>
 80198ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80198ce:	e773      	b.n	80197b8 <__ieee754_acosf+0x24>
 80198d0:	ee39 8a40 	vsub.f32	s16, s18, s0
 80198d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80198d8:	eeb0 0a48 	vmov.f32	s0, s16
 80198dc:	f7ff feb6 	bl	801964c <__ieee754_sqrtf>
 80198e0:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80198e4:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80198e8:	eeac ca88 	vfma.f32	s24, s25, s16
 80198ec:	eeaa aa88 	vfma.f32	s20, s21, s16
 80198f0:	eeec ba08 	vfma.f32	s23, s24, s16
 80198f4:	ee10 3a10 	vmov	r3, s0
 80198f8:	eeab ba88 	vfma.f32	s22, s23, s16
 80198fc:	f36f 030b 	bfc	r3, #0, #12
 8019900:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019904:	ee07 3a90 	vmov	s15, r3
 8019908:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801990c:	eeb0 6a48 	vmov.f32	s12, s16
 8019910:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019914:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019918:	ee70 6a27 	vadd.f32	s13, s0, s15
 801991c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019920:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019924:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019928:	eea0 7a26 	vfma.f32	s14, s0, s13
 801992c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019930:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019934:	e740      	b.n	80197b8 <__ieee754_acosf+0x24>
 8019936:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801997c <__ieee754_acosf+0x1e8>
 801993a:	e73d      	b.n	80197b8 <__ieee754_acosf+0x24>
 801993c:	40490fdb 	.word	0x40490fdb
 8019940:	00000000 	.word	0x00000000
 8019944:	3811ef08 	.word	0x3811ef08
 8019948:	3a4f7f04 	.word	0x3a4f7f04
 801994c:	bf303361 	.word	0xbf303361
 8019950:	bd241146 	.word	0xbd241146
 8019954:	3e4e0aa8 	.word	0x3e4e0aa8
 8019958:	bea6b090 	.word	0xbea6b090
 801995c:	3e2aaaab 	.word	0x3e2aaaab
 8019960:	3d9dc62e 	.word	0x3d9dc62e
 8019964:	4001572d 	.word	0x4001572d
 8019968:	c019d139 	.word	0xc019d139
 801996c:	33a22168 	.word	0x33a22168
 8019970:	3fc90fda 	.word	0x3fc90fda
 8019974:	b3a22168 	.word	0xb3a22168
 8019978:	40490fda 	.word	0x40490fda
 801997c:	3fc90fdb 	.word	0x3fc90fdb

08019980 <__ieee754_asinf>:
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	ee10 5a10 	vmov	r5, s0
 8019986:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801998a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801998e:	ed2d 8b04 	vpush	{d8-d9}
 8019992:	d10c      	bne.n	80199ae <__ieee754_asinf+0x2e>
 8019994:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019b08 <__ieee754_asinf+0x188>
 8019998:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8019b0c <__ieee754_asinf+0x18c>
 801999c:	ee60 7a27 	vmul.f32	s15, s0, s15
 80199a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80199a4:	eeb0 0a67 	vmov.f32	s0, s15
 80199a8:	ecbd 8b04 	vpop	{d8-d9}
 80199ac:	bd38      	pop	{r3, r4, r5, pc}
 80199ae:	d904      	bls.n	80199ba <__ieee754_asinf+0x3a>
 80199b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80199b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80199b8:	e7f6      	b.n	80199a8 <__ieee754_asinf+0x28>
 80199ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80199be:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80199c2:	d20b      	bcs.n	80199dc <__ieee754_asinf+0x5c>
 80199c4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80199c8:	d252      	bcs.n	8019a70 <__ieee754_asinf+0xf0>
 80199ca:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8019b10 <__ieee754_asinf+0x190>
 80199ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 80199d2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80199d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199da:	dce5      	bgt.n	80199a8 <__ieee754_asinf+0x28>
 80199dc:	f7ff fdcc 	bl	8019578 <fabsf>
 80199e0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80199e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80199e8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80199ec:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8019b14 <__ieee754_asinf+0x194>
 80199f0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8019b18 <__ieee754_asinf+0x198>
 80199f4:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8019b1c <__ieee754_asinf+0x19c>
 80199f8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80199fc:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8019b20 <__ieee754_asinf+0x1a0>
 8019a00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019a04:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8019b24 <__ieee754_asinf+0x1a4>
 8019a08:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019a0c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8019b28 <__ieee754_asinf+0x1a8>
 8019a10:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019a14:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8019b2c <__ieee754_asinf+0x1ac>
 8019a18:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019a1c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8019b30 <__ieee754_asinf+0x1b0>
 8019a20:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019a24:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8019b34 <__ieee754_asinf+0x1b4>
 8019a28:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019a2c:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8019b38 <__ieee754_asinf+0x1b8>
 8019a30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019a34:	eeb0 0a48 	vmov.f32	s0, s16
 8019a38:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019a3c:	f7ff fe06 	bl	801964c <__ieee754_sqrtf>
 8019a40:	4b3e      	ldr	r3, [pc, #248]	@ (8019b3c <__ieee754_asinf+0x1bc>)
 8019a42:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019a46:	429c      	cmp	r4, r3
 8019a48:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019a4c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8019a50:	d93d      	bls.n	8019ace <__ieee754_asinf+0x14e>
 8019a52:	eea0 0a06 	vfma.f32	s0, s0, s12
 8019a56:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8019b40 <__ieee754_asinf+0x1c0>
 8019a5a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019a5e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8019b0c <__ieee754_asinf+0x18c>
 8019a62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019a66:	2d00      	cmp	r5, #0
 8019a68:	bfd8      	it	le
 8019a6a:	eeb1 0a40 	vnegle.f32	s0, s0
 8019a6e:	e79b      	b.n	80199a8 <__ieee754_asinf+0x28>
 8019a70:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019a74:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8019b18 <__ieee754_asinf+0x198>
 8019a78:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8019b14 <__ieee754_asinf+0x194>
 8019a7c:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8019b2c <__ieee754_asinf+0x1ac>
 8019a80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019a84:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8019b20 <__ieee754_asinf+0x1a0>
 8019a88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019a8c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8019b24 <__ieee754_asinf+0x1a4>
 8019a90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019a94:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8019b28 <__ieee754_asinf+0x1a8>
 8019a98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019a9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8019b1c <__ieee754_asinf+0x19c>
 8019aa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019aa4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8019b30 <__ieee754_asinf+0x1b0>
 8019aa8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019aac:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8019b34 <__ieee754_asinf+0x1b4>
 8019ab0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019ab4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8019b38 <__ieee754_asinf+0x1b8>
 8019ab8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019ac0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8019ac4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019ac8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019acc:	e76c      	b.n	80199a8 <__ieee754_asinf+0x28>
 8019ace:	ee10 3a10 	vmov	r3, s0
 8019ad2:	f36f 030b 	bfc	r3, #0, #12
 8019ad6:	ee07 3a10 	vmov	s14, r3
 8019ada:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019ade:	ee70 5a00 	vadd.f32	s11, s0, s0
 8019ae2:	ee30 0a07 	vadd.f32	s0, s0, s14
 8019ae6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019b08 <__ieee754_asinf+0x188>
 8019aea:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8019aee:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8019b44 <__ieee754_asinf+0x1c4>
 8019af2:	eee5 7a66 	vfms.f32	s15, s10, s13
 8019af6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8019afa:	eeb0 6a40 	vmov.f32	s12, s0
 8019afe:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019b02:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019b06:	e7ac      	b.n	8019a62 <__ieee754_asinf+0xe2>
 8019b08:	b33bbd2e 	.word	0xb33bbd2e
 8019b0c:	3fc90fdb 	.word	0x3fc90fdb
 8019b10:	7149f2ca 	.word	0x7149f2ca
 8019b14:	3a4f7f04 	.word	0x3a4f7f04
 8019b18:	3811ef08 	.word	0x3811ef08
 8019b1c:	3e2aaaab 	.word	0x3e2aaaab
 8019b20:	bd241146 	.word	0xbd241146
 8019b24:	3e4e0aa8 	.word	0x3e4e0aa8
 8019b28:	bea6b090 	.word	0xbea6b090
 8019b2c:	3d9dc62e 	.word	0x3d9dc62e
 8019b30:	bf303361 	.word	0xbf303361
 8019b34:	4001572d 	.word	0x4001572d
 8019b38:	c019d139 	.word	0xc019d139
 8019b3c:	3f799999 	.word	0x3f799999
 8019b40:	333bbd2e 	.word	0x333bbd2e
 8019b44:	3f490fdb 	.word	0x3f490fdb

08019b48 <__ieee754_atan2f>:
 8019b48:	ee10 2a90 	vmov	r2, s1
 8019b4c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8019b50:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019b54:	b510      	push	{r4, lr}
 8019b56:	eef0 7a40 	vmov.f32	s15, s0
 8019b5a:	d806      	bhi.n	8019b6a <__ieee754_atan2f+0x22>
 8019b5c:	ee10 0a10 	vmov	r0, s0
 8019b60:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8019b64:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019b68:	d904      	bls.n	8019b74 <__ieee754_atan2f+0x2c>
 8019b6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8019b72:	bd10      	pop	{r4, pc}
 8019b74:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019b78:	d103      	bne.n	8019b82 <__ieee754_atan2f+0x3a>
 8019b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b7e:	f7ff bbe3 	b.w	8019348 <atanf>
 8019b82:	1794      	asrs	r4, r2, #30
 8019b84:	f004 0402 	and.w	r4, r4, #2
 8019b88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019b8c:	b943      	cbnz	r3, 8019ba0 <__ieee754_atan2f+0x58>
 8019b8e:	2c02      	cmp	r4, #2
 8019b90:	d05e      	beq.n	8019c50 <__ieee754_atan2f+0x108>
 8019b92:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019c64 <__ieee754_atan2f+0x11c>
 8019b96:	2c03      	cmp	r4, #3
 8019b98:	bf08      	it	eq
 8019b9a:	eef0 7a47 	vmoveq.f32	s15, s14
 8019b9e:	e7e6      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019ba0:	b941      	cbnz	r1, 8019bb4 <__ieee754_atan2f+0x6c>
 8019ba2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8019c68 <__ieee754_atan2f+0x120>
 8019ba6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8019c6c <__ieee754_atan2f+0x124>
 8019baa:	2800      	cmp	r0, #0
 8019bac:	bfa8      	it	ge
 8019bae:	eef0 7a47 	vmovge.f32	s15, s14
 8019bb2:	e7dc      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019bb4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019bb8:	d110      	bne.n	8019bdc <__ieee754_atan2f+0x94>
 8019bba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019bbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8019bc2:	d107      	bne.n	8019bd4 <__ieee754_atan2f+0x8c>
 8019bc4:	2c02      	cmp	r4, #2
 8019bc6:	d846      	bhi.n	8019c56 <__ieee754_atan2f+0x10e>
 8019bc8:	4b29      	ldr	r3, [pc, #164]	@ (8019c70 <__ieee754_atan2f+0x128>)
 8019bca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019bce:	edd3 7a00 	vldr	s15, [r3]
 8019bd2:	e7cc      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019bd4:	2c02      	cmp	r4, #2
 8019bd6:	d841      	bhi.n	8019c5c <__ieee754_atan2f+0x114>
 8019bd8:	4b26      	ldr	r3, [pc, #152]	@ (8019c74 <__ieee754_atan2f+0x12c>)
 8019bda:	e7f6      	b.n	8019bca <__ieee754_atan2f+0x82>
 8019bdc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019be0:	d0df      	beq.n	8019ba2 <__ieee754_atan2f+0x5a>
 8019be2:	1a5b      	subs	r3, r3, r1
 8019be4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8019be8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019bec:	da1a      	bge.n	8019c24 <__ieee754_atan2f+0xdc>
 8019bee:	2a00      	cmp	r2, #0
 8019bf0:	da01      	bge.n	8019bf6 <__ieee754_atan2f+0xae>
 8019bf2:	313c      	adds	r1, #60	@ 0x3c
 8019bf4:	db19      	blt.n	8019c2a <__ieee754_atan2f+0xe2>
 8019bf6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019bfa:	f7ff fcbd 	bl	8019578 <fabsf>
 8019bfe:	f7ff fba3 	bl	8019348 <atanf>
 8019c02:	eef0 7a40 	vmov.f32	s15, s0
 8019c06:	2c01      	cmp	r4, #1
 8019c08:	d012      	beq.n	8019c30 <__ieee754_atan2f+0xe8>
 8019c0a:	2c02      	cmp	r4, #2
 8019c0c:	d017      	beq.n	8019c3e <__ieee754_atan2f+0xf6>
 8019c0e:	2c00      	cmp	r4, #0
 8019c10:	d0ad      	beq.n	8019b6e <__ieee754_atan2f+0x26>
 8019c12:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8019c78 <__ieee754_atan2f+0x130>
 8019c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019c1a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8019c7c <__ieee754_atan2f+0x134>
 8019c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c22:	e7a4      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019c24:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8019c6c <__ieee754_atan2f+0x124>
 8019c28:	e7ed      	b.n	8019c06 <__ieee754_atan2f+0xbe>
 8019c2a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019c80 <__ieee754_atan2f+0x138>
 8019c2e:	e7ea      	b.n	8019c06 <__ieee754_atan2f+0xbe>
 8019c30:	ee17 3a90 	vmov	r3, s15
 8019c34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019c38:	ee07 3a90 	vmov	s15, r3
 8019c3c:	e797      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019c3e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8019c78 <__ieee754_atan2f+0x130>
 8019c42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019c46:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8019c7c <__ieee754_atan2f+0x134>
 8019c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c4e:	e78e      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019c50:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8019c7c <__ieee754_atan2f+0x134>
 8019c54:	e78b      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019c56:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8019c84 <__ieee754_atan2f+0x13c>
 8019c5a:	e788      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019c5c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019c80 <__ieee754_atan2f+0x138>
 8019c60:	e785      	b.n	8019b6e <__ieee754_atan2f+0x26>
 8019c62:	bf00      	nop
 8019c64:	c0490fdb 	.word	0xc0490fdb
 8019c68:	bfc90fdb 	.word	0xbfc90fdb
 8019c6c:	3fc90fdb 	.word	0x3fc90fdb
 8019c70:	08022288 	.word	0x08022288
 8019c74:	0802227c 	.word	0x0802227c
 8019c78:	33bbbd2e 	.word	0x33bbbd2e
 8019c7c:	40490fdb 	.word	0x40490fdb
 8019c80:	00000000 	.word	0x00000000
 8019c84:	3f490fdb 	.word	0x3f490fdb

08019c88 <__ieee754_powf>:
 8019c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c8c:	ee10 4a90 	vmov	r4, s1
 8019c90:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8019c94:	ed2d 8b02 	vpush	{d8}
 8019c98:	ee10 6a10 	vmov	r6, s0
 8019c9c:	eeb0 8a40 	vmov.f32	s16, s0
 8019ca0:	eef0 8a60 	vmov.f32	s17, s1
 8019ca4:	d10c      	bne.n	8019cc0 <__ieee754_powf+0x38>
 8019ca6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8019caa:	0076      	lsls	r6, r6, #1
 8019cac:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8019cb0:	f240 8274 	bls.w	801a19c <__ieee754_powf+0x514>
 8019cb4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019cb8:	ecbd 8b02 	vpop	{d8}
 8019cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cc0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8019cc4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8019cc8:	d802      	bhi.n	8019cd0 <__ieee754_powf+0x48>
 8019cca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019cce:	d908      	bls.n	8019ce2 <__ieee754_powf+0x5a>
 8019cd0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8019cd4:	d1ee      	bne.n	8019cb4 <__ieee754_powf+0x2c>
 8019cd6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8019cda:	0064      	lsls	r4, r4, #1
 8019cdc:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8019ce0:	e7e6      	b.n	8019cb0 <__ieee754_powf+0x28>
 8019ce2:	2e00      	cmp	r6, #0
 8019ce4:	da1f      	bge.n	8019d26 <__ieee754_powf+0x9e>
 8019ce6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8019cea:	f080 8260 	bcs.w	801a1ae <__ieee754_powf+0x526>
 8019cee:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019cf2:	d32f      	bcc.n	8019d54 <__ieee754_powf+0xcc>
 8019cf4:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8019cf8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8019cfc:	fa49 f503 	asr.w	r5, r9, r3
 8019d00:	fa05 f303 	lsl.w	r3, r5, r3
 8019d04:	454b      	cmp	r3, r9
 8019d06:	d123      	bne.n	8019d50 <__ieee754_powf+0xc8>
 8019d08:	f005 0501 	and.w	r5, r5, #1
 8019d0c:	f1c5 0502 	rsb	r5, r5, #2
 8019d10:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019d14:	d11f      	bne.n	8019d56 <__ieee754_powf+0xce>
 8019d16:	2c00      	cmp	r4, #0
 8019d18:	f280 8246 	bge.w	801a1a8 <__ieee754_powf+0x520>
 8019d1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019d20:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019d24:	e7c8      	b.n	8019cb8 <__ieee754_powf+0x30>
 8019d26:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019d2a:	d111      	bne.n	8019d50 <__ieee754_powf+0xc8>
 8019d2c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8019d30:	f000 8234 	beq.w	801a19c <__ieee754_powf+0x514>
 8019d34:	d906      	bls.n	8019d44 <__ieee754_powf+0xbc>
 8019d36:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 801a04c <__ieee754_powf+0x3c4>
 8019d3a:	2c00      	cmp	r4, #0
 8019d3c:	bfa8      	it	ge
 8019d3e:	eeb0 0a68 	vmovge.f32	s0, s17
 8019d42:	e7b9      	b.n	8019cb8 <__ieee754_powf+0x30>
 8019d44:	2c00      	cmp	r4, #0
 8019d46:	f280 822c 	bge.w	801a1a2 <__ieee754_powf+0x51a>
 8019d4a:	eeb1 0a68 	vneg.f32	s0, s17
 8019d4e:	e7b3      	b.n	8019cb8 <__ieee754_powf+0x30>
 8019d50:	2500      	movs	r5, #0
 8019d52:	e7dd      	b.n	8019d10 <__ieee754_powf+0x88>
 8019d54:	2500      	movs	r5, #0
 8019d56:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019d5a:	d102      	bne.n	8019d62 <__ieee754_powf+0xda>
 8019d5c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019d60:	e7aa      	b.n	8019cb8 <__ieee754_powf+0x30>
 8019d62:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019d66:	f040 8227 	bne.w	801a1b8 <__ieee754_powf+0x530>
 8019d6a:	2e00      	cmp	r6, #0
 8019d6c:	f2c0 8224 	blt.w	801a1b8 <__ieee754_powf+0x530>
 8019d70:	eeb0 0a48 	vmov.f32	s0, s16
 8019d74:	ecbd 8b02 	vpop	{d8}
 8019d78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d7c:	f7ff bc66 	b.w	801964c <__ieee754_sqrtf>
 8019d80:	2d01      	cmp	r5, #1
 8019d82:	d199      	bne.n	8019cb8 <__ieee754_powf+0x30>
 8019d84:	eeb1 0a40 	vneg.f32	s0, s0
 8019d88:	e796      	b.n	8019cb8 <__ieee754_powf+0x30>
 8019d8a:	0ff0      	lsrs	r0, r6, #31
 8019d8c:	3801      	subs	r0, #1
 8019d8e:	ea55 0300 	orrs.w	r3, r5, r0
 8019d92:	d104      	bne.n	8019d9e <__ieee754_powf+0x116>
 8019d94:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019d98:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019d9c:	e78c      	b.n	8019cb8 <__ieee754_powf+0x30>
 8019d9e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8019da2:	d96d      	bls.n	8019e80 <__ieee754_powf+0x1f8>
 8019da4:	4baa      	ldr	r3, [pc, #680]	@ (801a050 <__ieee754_powf+0x3c8>)
 8019da6:	4598      	cmp	r8, r3
 8019da8:	d808      	bhi.n	8019dbc <__ieee754_powf+0x134>
 8019daa:	2c00      	cmp	r4, #0
 8019dac:	da0b      	bge.n	8019dc6 <__ieee754_powf+0x13e>
 8019dae:	2000      	movs	r0, #0
 8019db0:	ecbd 8b02 	vpop	{d8}
 8019db4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019db8:	f000 bbea 	b.w	801a590 <__math_oflowf>
 8019dbc:	4ba5      	ldr	r3, [pc, #660]	@ (801a054 <__ieee754_powf+0x3cc>)
 8019dbe:	4598      	cmp	r8, r3
 8019dc0:	d908      	bls.n	8019dd4 <__ieee754_powf+0x14c>
 8019dc2:	2c00      	cmp	r4, #0
 8019dc4:	dcf3      	bgt.n	8019dae <__ieee754_powf+0x126>
 8019dc6:	2000      	movs	r0, #0
 8019dc8:	ecbd 8b02 	vpop	{d8}
 8019dcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019dd0:	f000 bbd8 	b.w	801a584 <__math_uflowf>
 8019dd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019dd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019ddc:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801a058 <__ieee754_powf+0x3d0>
 8019de0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019de4:	eee0 6a67 	vfms.f32	s13, s0, s15
 8019de8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019dec:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019df0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019df4:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801a05c <__ieee754_powf+0x3d4>
 8019df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019dfc:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801a060 <__ieee754_powf+0x3d8>
 8019e00:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8019e04:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801a064 <__ieee754_powf+0x3dc>
 8019e08:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019e0c:	eeb0 7a67 	vmov.f32	s14, s15
 8019e10:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019e14:	ee17 3a10 	vmov	r3, s14
 8019e18:	f36f 030b 	bfc	r3, #0, #12
 8019e1c:	ee07 3a10 	vmov	s14, r3
 8019e20:	eeb0 6a47 	vmov.f32	s12, s14
 8019e24:	eea0 6a66 	vfms.f32	s12, s0, s13
 8019e28:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019e2c:	3d01      	subs	r5, #1
 8019e2e:	4305      	orrs	r5, r0
 8019e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019e34:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8019e38:	f36f 040b 	bfc	r4, #0, #12
 8019e3c:	bf18      	it	ne
 8019e3e:	eeb0 8a66 	vmovne.f32	s16, s13
 8019e42:	ee06 4a90 	vmov	s13, r4
 8019e46:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019e4a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8019e4e:	ee67 7a26 	vmul.f32	s15, s14, s13
 8019e52:	eee6 0a07 	vfma.f32	s1, s12, s14
 8019e56:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019e5a:	ee17 1a10 	vmov	r1, s14
 8019e5e:	2900      	cmp	r1, #0
 8019e60:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019e64:	f340 80dd 	ble.w	801a022 <__ieee754_powf+0x39a>
 8019e68:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8019e6c:	f240 80ca 	bls.w	801a004 <__ieee754_powf+0x37c>
 8019e70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e78:	bf4c      	ite	mi
 8019e7a:	2001      	movmi	r0, #1
 8019e7c:	2000      	movpl	r0, #0
 8019e7e:	e797      	b.n	8019db0 <__ieee754_powf+0x128>
 8019e80:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8019e84:	bf01      	itttt	eq
 8019e86:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801a068 <__ieee754_powf+0x3e0>
 8019e8a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8019e8e:	f06f 0317 	mvneq.w	r3, #23
 8019e92:	ee17 7a90 	vmoveq	r7, s15
 8019e96:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8019e9a:	bf18      	it	ne
 8019e9c:	2300      	movne	r3, #0
 8019e9e:	3a7f      	subs	r2, #127	@ 0x7f
 8019ea0:	441a      	add	r2, r3
 8019ea2:	4b72      	ldr	r3, [pc, #456]	@ (801a06c <__ieee754_powf+0x3e4>)
 8019ea4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8019ea8:	429f      	cmp	r7, r3
 8019eaa:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8019eae:	dd06      	ble.n	8019ebe <__ieee754_powf+0x236>
 8019eb0:	4b6f      	ldr	r3, [pc, #444]	@ (801a070 <__ieee754_powf+0x3e8>)
 8019eb2:	429f      	cmp	r7, r3
 8019eb4:	f340 80a4 	ble.w	801a000 <__ieee754_powf+0x378>
 8019eb8:	3201      	adds	r2, #1
 8019eba:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8019ebe:	2600      	movs	r6, #0
 8019ec0:	4b6c      	ldr	r3, [pc, #432]	@ (801a074 <__ieee754_powf+0x3ec>)
 8019ec2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8019ec6:	ee07 1a10 	vmov	s14, r1
 8019eca:	edd3 5a00 	vldr	s11, [r3]
 8019ece:	4b6a      	ldr	r3, [pc, #424]	@ (801a078 <__ieee754_powf+0x3f0>)
 8019ed0:	ee75 7a87 	vadd.f32	s15, s11, s14
 8019ed4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019ed8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8019edc:	1049      	asrs	r1, r1, #1
 8019ede:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8019ee2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8019ee6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8019eea:	ee37 6a65 	vsub.f32	s12, s14, s11
 8019eee:	ee07 1a90 	vmov	s15, r1
 8019ef2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8019ef6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8019efa:	ee15 7a10 	vmov	r7, s10
 8019efe:	401f      	ands	r7, r3
 8019f00:	ee06 7a90 	vmov	s13, r7
 8019f04:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8019f08:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019f0c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019f10:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019f14:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801a07c <__ieee754_powf+0x3f4>
 8019f18:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801a080 <__ieee754_powf+0x3f8>
 8019f1c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019f20:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801a084 <__ieee754_powf+0x3fc>
 8019f24:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019f28:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801a058 <__ieee754_powf+0x3d0>
 8019f2c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019f30:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801a088 <__ieee754_powf+0x400>
 8019f34:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019f38:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801a08c <__ieee754_powf+0x404>
 8019f3c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019f40:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019f44:	ee35 7a26 	vadd.f32	s14, s10, s13
 8019f48:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8019f4c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019f50:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019f54:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8019f58:	eef0 5a67 	vmov.f32	s11, s15
 8019f5c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8019f60:	ee75 5a87 	vadd.f32	s11, s11, s14
 8019f64:	ee15 1a90 	vmov	r1, s11
 8019f68:	4019      	ands	r1, r3
 8019f6a:	ee05 1a90 	vmov	s11, r1
 8019f6e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019f72:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8019f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019f7e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019f82:	eeb0 6a67 	vmov.f32	s12, s15
 8019f86:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019f8a:	ee16 1a10 	vmov	r1, s12
 8019f8e:	4019      	ands	r1, r3
 8019f90:	ee06 1a10 	vmov	s12, r1
 8019f94:	eeb0 7a46 	vmov.f32	s14, s12
 8019f98:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8019f9c:	493c      	ldr	r1, [pc, #240]	@ (801a090 <__ieee754_powf+0x408>)
 8019f9e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8019fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019fa6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801a094 <__ieee754_powf+0x40c>
 8019faa:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801a098 <__ieee754_powf+0x410>
 8019fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019fb2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801a09c <__ieee754_powf+0x414>
 8019fb6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019fba:	ed91 7a00 	vldr	s14, [r1]
 8019fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fc2:	ee07 2a10 	vmov	s14, r2
 8019fc6:	4a36      	ldr	r2, [pc, #216]	@ (801a0a0 <__ieee754_powf+0x418>)
 8019fc8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019fcc:	eeb0 7a67 	vmov.f32	s14, s15
 8019fd0:	eea6 7a25 	vfma.f32	s14, s12, s11
 8019fd4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8019fd8:	ed92 5a00 	vldr	s10, [r2]
 8019fdc:	ee37 7a05 	vadd.f32	s14, s14, s10
 8019fe0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019fe4:	ee17 2a10 	vmov	r2, s14
 8019fe8:	401a      	ands	r2, r3
 8019fea:	ee07 2a10 	vmov	s14, r2
 8019fee:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019ff2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019ff6:	eee6 6a65 	vfms.f32	s13, s12, s11
 8019ffa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019ffe:	e715      	b.n	8019e2c <__ieee754_powf+0x1a4>
 801a000:	2601      	movs	r6, #1
 801a002:	e75d      	b.n	8019ec0 <__ieee754_powf+0x238>
 801a004:	d152      	bne.n	801a0ac <__ieee754_powf+0x424>
 801a006:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801a0a4 <__ieee754_powf+0x41c>
 801a00a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a00e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801a012:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a01a:	f73f af29 	bgt.w	8019e70 <__ieee754_powf+0x1e8>
 801a01e:	2386      	movs	r3, #134	@ 0x86
 801a020:	e048      	b.n	801a0b4 <__ieee754_powf+0x42c>
 801a022:	4a21      	ldr	r2, [pc, #132]	@ (801a0a8 <__ieee754_powf+0x420>)
 801a024:	4293      	cmp	r3, r2
 801a026:	d907      	bls.n	801a038 <__ieee754_powf+0x3b0>
 801a028:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a030:	bf4c      	ite	mi
 801a032:	2001      	movmi	r0, #1
 801a034:	2000      	movpl	r0, #0
 801a036:	e6c7      	b.n	8019dc8 <__ieee754_powf+0x140>
 801a038:	d138      	bne.n	801a0ac <__ieee754_powf+0x424>
 801a03a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a03e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801a042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a046:	dbea      	blt.n	801a01e <__ieee754_powf+0x396>
 801a048:	e7ee      	b.n	801a028 <__ieee754_powf+0x3a0>
 801a04a:	bf00      	nop
 801a04c:	00000000 	.word	0x00000000
 801a050:	3f7ffff3 	.word	0x3f7ffff3
 801a054:	3f800007 	.word	0x3f800007
 801a058:	3eaaaaab 	.word	0x3eaaaaab
 801a05c:	3fb8aa00 	.word	0x3fb8aa00
 801a060:	3fb8aa3b 	.word	0x3fb8aa3b
 801a064:	36eca570 	.word	0x36eca570
 801a068:	4b800000 	.word	0x4b800000
 801a06c:	001cc471 	.word	0x001cc471
 801a070:	005db3d6 	.word	0x005db3d6
 801a074:	080222a4 	.word	0x080222a4
 801a078:	fffff000 	.word	0xfffff000
 801a07c:	3e6c3255 	.word	0x3e6c3255
 801a080:	3e53f142 	.word	0x3e53f142
 801a084:	3e8ba305 	.word	0x3e8ba305
 801a088:	3edb6db7 	.word	0x3edb6db7
 801a08c:	3f19999a 	.word	0x3f19999a
 801a090:	08022294 	.word	0x08022294
 801a094:	3f76384f 	.word	0x3f76384f
 801a098:	3f763800 	.word	0x3f763800
 801a09c:	369dc3a0 	.word	0x369dc3a0
 801a0a0:	0802229c 	.word	0x0802229c
 801a0a4:	3338aa3c 	.word	0x3338aa3c
 801a0a8:	43160000 	.word	0x43160000
 801a0ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801a0b0:	d96f      	bls.n	801a192 <__ieee754_powf+0x50a>
 801a0b2:	15db      	asrs	r3, r3, #23
 801a0b4:	3b7e      	subs	r3, #126	@ 0x7e
 801a0b6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801a0ba:	4118      	asrs	r0, r3
 801a0bc:	4408      	add	r0, r1
 801a0be:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801a0c2:	4a4e      	ldr	r2, [pc, #312]	@ (801a1fc <__ieee754_powf+0x574>)
 801a0c4:	3b7f      	subs	r3, #127	@ 0x7f
 801a0c6:	411a      	asrs	r2, r3
 801a0c8:	4002      	ands	r2, r0
 801a0ca:	ee07 2a10 	vmov	s14, r2
 801a0ce:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801a0d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801a0d6:	f1c3 0317 	rsb	r3, r3, #23
 801a0da:	4118      	asrs	r0, r3
 801a0dc:	2900      	cmp	r1, #0
 801a0de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0e2:	bfb8      	it	lt
 801a0e4:	4240      	neglt	r0, r0
 801a0e6:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801a0ea:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801a200 <__ieee754_powf+0x578>
 801a0ee:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801a204 <__ieee754_powf+0x57c>
 801a0f2:	ee16 3a90 	vmov	r3, s13
 801a0f6:	f36f 030b 	bfc	r3, #0, #12
 801a0fa:	ee06 3a90 	vmov	s13, r3
 801a0fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a102:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a106:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a10a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801a208 <__ieee754_powf+0x580>
 801a10e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a112:	eee0 7a87 	vfma.f32	s15, s1, s14
 801a116:	eeb0 7a67 	vmov.f32	s14, s15
 801a11a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801a11e:	eef0 5a47 	vmov.f32	s11, s14
 801a122:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801a126:	ee67 6a07 	vmul.f32	s13, s14, s14
 801a12a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a12e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801a20c <__ieee754_powf+0x584>
 801a132:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801a210 <__ieee754_powf+0x588>
 801a136:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a13a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801a214 <__ieee754_powf+0x58c>
 801a13e:	eee6 5a26 	vfma.f32	s11, s12, s13
 801a142:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801a218 <__ieee754_powf+0x590>
 801a146:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801a14a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801a21c <__ieee754_powf+0x594>
 801a14e:	eee6 5a26 	vfma.f32	s11, s12, s13
 801a152:	eeb0 6a47 	vmov.f32	s12, s14
 801a156:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801a15a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801a15e:	ee67 5a06 	vmul.f32	s11, s14, s12
 801a162:	ee36 6a66 	vsub.f32	s12, s12, s13
 801a166:	eee7 7a27 	vfma.f32	s15, s14, s15
 801a16a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801a16e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a176:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a17a:	ee10 3a10 	vmov	r3, s0
 801a17e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801a182:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a186:	da06      	bge.n	801a196 <__ieee754_powf+0x50e>
 801a188:	f000 f97c 	bl	801a484 <scalbnf>
 801a18c:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a190:	e592      	b.n	8019cb8 <__ieee754_powf+0x30>
 801a192:	2000      	movs	r0, #0
 801a194:	e7a7      	b.n	801a0e6 <__ieee754_powf+0x45e>
 801a196:	ee00 3a10 	vmov	s0, r3
 801a19a:	e7f7      	b.n	801a18c <__ieee754_powf+0x504>
 801a19c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a1a0:	e58a      	b.n	8019cb8 <__ieee754_powf+0x30>
 801a1a2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801a220 <__ieee754_powf+0x598>
 801a1a6:	e587      	b.n	8019cb8 <__ieee754_powf+0x30>
 801a1a8:	eeb0 0a48 	vmov.f32	s0, s16
 801a1ac:	e584      	b.n	8019cb8 <__ieee754_powf+0x30>
 801a1ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801a1b2:	f43f adbb 	beq.w	8019d2c <__ieee754_powf+0xa4>
 801a1b6:	2502      	movs	r5, #2
 801a1b8:	eeb0 0a48 	vmov.f32	s0, s16
 801a1bc:	f7ff f9dc 	bl	8019578 <fabsf>
 801a1c0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801a1c4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801a1c8:	4647      	mov	r7, r8
 801a1ca:	d003      	beq.n	801a1d4 <__ieee754_powf+0x54c>
 801a1cc:	f1b8 0f00 	cmp.w	r8, #0
 801a1d0:	f47f addb 	bne.w	8019d8a <__ieee754_powf+0x102>
 801a1d4:	2c00      	cmp	r4, #0
 801a1d6:	bfbc      	itt	lt
 801a1d8:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801a1dc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801a1e0:	2e00      	cmp	r6, #0
 801a1e2:	f6bf ad69 	bge.w	8019cb8 <__ieee754_powf+0x30>
 801a1e6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801a1ea:	ea58 0805 	orrs.w	r8, r8, r5
 801a1ee:	f47f adc7 	bne.w	8019d80 <__ieee754_powf+0xf8>
 801a1f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a1f6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a1fa:	e55d      	b.n	8019cb8 <__ieee754_powf+0x30>
 801a1fc:	ff800000 	.word	0xff800000
 801a200:	3f317218 	.word	0x3f317218
 801a204:	3f317200 	.word	0x3f317200
 801a208:	35bfbe8c 	.word	0x35bfbe8c
 801a20c:	b5ddea0e 	.word	0xb5ddea0e
 801a210:	3331bb4c 	.word	0x3331bb4c
 801a214:	388ab355 	.word	0x388ab355
 801a218:	bb360b61 	.word	0xbb360b61
 801a21c:	3e2aaaab 	.word	0x3e2aaaab
 801a220:	00000000 	.word	0x00000000

0801a224 <__ieee754_rem_pio2f>:
 801a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a226:	ee10 6a10 	vmov	r6, s0
 801a22a:	4b88      	ldr	r3, [pc, #544]	@ (801a44c <__ieee754_rem_pio2f+0x228>)
 801a22c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801a230:	429d      	cmp	r5, r3
 801a232:	b087      	sub	sp, #28
 801a234:	4604      	mov	r4, r0
 801a236:	d805      	bhi.n	801a244 <__ieee754_rem_pio2f+0x20>
 801a238:	2300      	movs	r3, #0
 801a23a:	ed80 0a00 	vstr	s0, [r0]
 801a23e:	6043      	str	r3, [r0, #4]
 801a240:	2000      	movs	r0, #0
 801a242:	e022      	b.n	801a28a <__ieee754_rem_pio2f+0x66>
 801a244:	4b82      	ldr	r3, [pc, #520]	@ (801a450 <__ieee754_rem_pio2f+0x22c>)
 801a246:	429d      	cmp	r5, r3
 801a248:	d83a      	bhi.n	801a2c0 <__ieee754_rem_pio2f+0x9c>
 801a24a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a24e:	2e00      	cmp	r6, #0
 801a250:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801a454 <__ieee754_rem_pio2f+0x230>
 801a254:	4a80      	ldr	r2, [pc, #512]	@ (801a458 <__ieee754_rem_pio2f+0x234>)
 801a256:	f023 030f 	bic.w	r3, r3, #15
 801a25a:	dd18      	ble.n	801a28e <__ieee754_rem_pio2f+0x6a>
 801a25c:	4293      	cmp	r3, r2
 801a25e:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a262:	bf09      	itett	eq
 801a264:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801a45c <__ieee754_rem_pio2f+0x238>
 801a268:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801a460 <__ieee754_rem_pio2f+0x23c>
 801a26c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801a464 <__ieee754_rem_pio2f+0x240>
 801a270:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a274:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801a278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a27c:	ed80 7a00 	vstr	s14, [r0]
 801a280:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a284:	edc0 7a01 	vstr	s15, [r0, #4]
 801a288:	2001      	movs	r0, #1
 801a28a:	b007      	add	sp, #28
 801a28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a28e:	4293      	cmp	r3, r2
 801a290:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a294:	bf09      	itett	eq
 801a296:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801a45c <__ieee754_rem_pio2f+0x238>
 801a29a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801a460 <__ieee754_rem_pio2f+0x23c>
 801a29e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801a464 <__ieee754_rem_pio2f+0x240>
 801a2a2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a2a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a2aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a2ae:	ed80 7a00 	vstr	s14, [r0]
 801a2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a2b6:	edc0 7a01 	vstr	s15, [r0, #4]
 801a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a2be:	e7e4      	b.n	801a28a <__ieee754_rem_pio2f+0x66>
 801a2c0:	4b69      	ldr	r3, [pc, #420]	@ (801a468 <__ieee754_rem_pio2f+0x244>)
 801a2c2:	429d      	cmp	r5, r3
 801a2c4:	d873      	bhi.n	801a3ae <__ieee754_rem_pio2f+0x18a>
 801a2c6:	f7ff f957 	bl	8019578 <fabsf>
 801a2ca:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801a46c <__ieee754_rem_pio2f+0x248>
 801a2ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a2d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a2da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a2de:	ee17 0a90 	vmov	r0, s15
 801a2e2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a454 <__ieee754_rem_pio2f+0x230>
 801a2e6:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a2ea:	281f      	cmp	r0, #31
 801a2ec:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a460 <__ieee754_rem_pio2f+0x23c>
 801a2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a2f4:	eeb1 6a47 	vneg.f32	s12, s14
 801a2f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a2fc:	ee16 1a90 	vmov	r1, s13
 801a300:	dc09      	bgt.n	801a316 <__ieee754_rem_pio2f+0xf2>
 801a302:	4a5b      	ldr	r2, [pc, #364]	@ (801a470 <__ieee754_rem_pio2f+0x24c>)
 801a304:	1e47      	subs	r7, r0, #1
 801a306:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a30a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801a30e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801a312:	4293      	cmp	r3, r2
 801a314:	d107      	bne.n	801a326 <__ieee754_rem_pio2f+0x102>
 801a316:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801a31a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801a31e:	2a08      	cmp	r2, #8
 801a320:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a324:	dc14      	bgt.n	801a350 <__ieee754_rem_pio2f+0x12c>
 801a326:	6021      	str	r1, [r4, #0]
 801a328:	ed94 7a00 	vldr	s14, [r4]
 801a32c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a330:	2e00      	cmp	r6, #0
 801a332:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a336:	ed84 0a01 	vstr	s0, [r4, #4]
 801a33a:	daa6      	bge.n	801a28a <__ieee754_rem_pio2f+0x66>
 801a33c:	eeb1 7a47 	vneg.f32	s14, s14
 801a340:	eeb1 0a40 	vneg.f32	s0, s0
 801a344:	ed84 7a00 	vstr	s14, [r4]
 801a348:	ed84 0a01 	vstr	s0, [r4, #4]
 801a34c:	4240      	negs	r0, r0
 801a34e:	e79c      	b.n	801a28a <__ieee754_rem_pio2f+0x66>
 801a350:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801a45c <__ieee754_rem_pio2f+0x238>
 801a354:	eef0 6a40 	vmov.f32	s13, s0
 801a358:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a35c:	ee70 7a66 	vsub.f32	s15, s0, s13
 801a360:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a364:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801a464 <__ieee754_rem_pio2f+0x240>
 801a368:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a36c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a370:	ee15 2a90 	vmov	r2, s11
 801a374:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a378:	1a5b      	subs	r3, r3, r1
 801a37a:	2b19      	cmp	r3, #25
 801a37c:	dc04      	bgt.n	801a388 <__ieee754_rem_pio2f+0x164>
 801a37e:	edc4 5a00 	vstr	s11, [r4]
 801a382:	eeb0 0a66 	vmov.f32	s0, s13
 801a386:	e7cf      	b.n	801a328 <__ieee754_rem_pio2f+0x104>
 801a388:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801a474 <__ieee754_rem_pio2f+0x250>
 801a38c:	eeb0 0a66 	vmov.f32	s0, s13
 801a390:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a394:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a398:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801a478 <__ieee754_rem_pio2f+0x254>
 801a39c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a3a0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a3a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a3a8:	ed84 7a00 	vstr	s14, [r4]
 801a3ac:	e7bc      	b.n	801a328 <__ieee754_rem_pio2f+0x104>
 801a3ae:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801a3b2:	d306      	bcc.n	801a3c2 <__ieee754_rem_pio2f+0x19e>
 801a3b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a3b8:	edc0 7a01 	vstr	s15, [r0, #4]
 801a3bc:	edc0 7a00 	vstr	s15, [r0]
 801a3c0:	e73e      	b.n	801a240 <__ieee754_rem_pio2f+0x1c>
 801a3c2:	15ea      	asrs	r2, r5, #23
 801a3c4:	3a86      	subs	r2, #134	@ 0x86
 801a3c6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a3ca:	ee07 3a90 	vmov	s15, r3
 801a3ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a3d2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801a47c <__ieee754_rem_pio2f+0x258>
 801a3d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3de:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a3e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a3e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a3ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3f2:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a3f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a3fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a402:	edcd 7a05 	vstr	s15, [sp, #20]
 801a406:	d11e      	bne.n	801a446 <__ieee754_rem_pio2f+0x222>
 801a408:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a410:	bf0c      	ite	eq
 801a412:	2301      	moveq	r3, #1
 801a414:	2302      	movne	r3, #2
 801a416:	491a      	ldr	r1, [pc, #104]	@ (801a480 <__ieee754_rem_pio2f+0x25c>)
 801a418:	9101      	str	r1, [sp, #4]
 801a41a:	2102      	movs	r1, #2
 801a41c:	9100      	str	r1, [sp, #0]
 801a41e:	a803      	add	r0, sp, #12
 801a420:	4621      	mov	r1, r4
 801a422:	f000 f8bb 	bl	801a59c <__kernel_rem_pio2f>
 801a426:	2e00      	cmp	r6, #0
 801a428:	f6bf af2f 	bge.w	801a28a <__ieee754_rem_pio2f+0x66>
 801a42c:	edd4 7a00 	vldr	s15, [r4]
 801a430:	eef1 7a67 	vneg.f32	s15, s15
 801a434:	edc4 7a00 	vstr	s15, [r4]
 801a438:	edd4 7a01 	vldr	s15, [r4, #4]
 801a43c:	eef1 7a67 	vneg.f32	s15, s15
 801a440:	edc4 7a01 	vstr	s15, [r4, #4]
 801a444:	e782      	b.n	801a34c <__ieee754_rem_pio2f+0x128>
 801a446:	2303      	movs	r3, #3
 801a448:	e7e5      	b.n	801a416 <__ieee754_rem_pio2f+0x1f2>
 801a44a:	bf00      	nop
 801a44c:	3f490fd8 	.word	0x3f490fd8
 801a450:	4016cbe3 	.word	0x4016cbe3
 801a454:	3fc90f80 	.word	0x3fc90f80
 801a458:	3fc90fd0 	.word	0x3fc90fd0
 801a45c:	37354400 	.word	0x37354400
 801a460:	37354443 	.word	0x37354443
 801a464:	2e85a308 	.word	0x2e85a308
 801a468:	43490f80 	.word	0x43490f80
 801a46c:	3f22f984 	.word	0x3f22f984
 801a470:	080222ac 	.word	0x080222ac
 801a474:	2e85a300 	.word	0x2e85a300
 801a478:	248d3132 	.word	0x248d3132
 801a47c:	43800000 	.word	0x43800000
 801a480:	0802232c 	.word	0x0802232c

0801a484 <scalbnf>:
 801a484:	ee10 3a10 	vmov	r3, s0
 801a488:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801a48c:	d02b      	beq.n	801a4e6 <scalbnf+0x62>
 801a48e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801a492:	d302      	bcc.n	801a49a <scalbnf+0x16>
 801a494:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a498:	4770      	bx	lr
 801a49a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a49e:	d123      	bne.n	801a4e8 <scalbnf+0x64>
 801a4a0:	4b24      	ldr	r3, [pc, #144]	@ (801a534 <scalbnf+0xb0>)
 801a4a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801a538 <scalbnf+0xb4>
 801a4a6:	4298      	cmp	r0, r3
 801a4a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a4ac:	db17      	blt.n	801a4de <scalbnf+0x5a>
 801a4ae:	ee10 3a10 	vmov	r3, s0
 801a4b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a4b6:	3a19      	subs	r2, #25
 801a4b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801a4bc:	4288      	cmp	r0, r1
 801a4be:	dd15      	ble.n	801a4ec <scalbnf+0x68>
 801a4c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801a53c <scalbnf+0xb8>
 801a4c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801a540 <scalbnf+0xbc>
 801a4c8:	ee10 3a10 	vmov	r3, s0
 801a4cc:	eeb0 7a67 	vmov.f32	s14, s15
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	bfb8      	it	lt
 801a4d4:	eef0 7a66 	vmovlt.f32	s15, s13
 801a4d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801a4dc:	4770      	bx	lr
 801a4de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a544 <scalbnf+0xc0>
 801a4e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a4e6:	4770      	bx	lr
 801a4e8:	0dd2      	lsrs	r2, r2, #23
 801a4ea:	e7e5      	b.n	801a4b8 <scalbnf+0x34>
 801a4ec:	4410      	add	r0, r2
 801a4ee:	28fe      	cmp	r0, #254	@ 0xfe
 801a4f0:	dce6      	bgt.n	801a4c0 <scalbnf+0x3c>
 801a4f2:	2800      	cmp	r0, #0
 801a4f4:	dd06      	ble.n	801a504 <scalbnf+0x80>
 801a4f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a4fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a4fe:	ee00 3a10 	vmov	s0, r3
 801a502:	4770      	bx	lr
 801a504:	f110 0f16 	cmn.w	r0, #22
 801a508:	da09      	bge.n	801a51e <scalbnf+0x9a>
 801a50a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801a544 <scalbnf+0xc0>
 801a50e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801a548 <scalbnf+0xc4>
 801a512:	ee10 3a10 	vmov	r3, s0
 801a516:	eeb0 7a67 	vmov.f32	s14, s15
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	e7d9      	b.n	801a4d2 <scalbnf+0x4e>
 801a51e:	3019      	adds	r0, #25
 801a520:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a524:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a528:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a54c <scalbnf+0xc8>
 801a52c:	ee07 3a90 	vmov	s15, r3
 801a530:	e7d7      	b.n	801a4e2 <scalbnf+0x5e>
 801a532:	bf00      	nop
 801a534:	ffff3cb0 	.word	0xffff3cb0
 801a538:	4c000000 	.word	0x4c000000
 801a53c:	7149f2ca 	.word	0x7149f2ca
 801a540:	f149f2ca 	.word	0xf149f2ca
 801a544:	0da24260 	.word	0x0da24260
 801a548:	8da24260 	.word	0x8da24260
 801a54c:	33000000 	.word	0x33000000

0801a550 <with_errnof>:
 801a550:	b510      	push	{r4, lr}
 801a552:	ed2d 8b02 	vpush	{d8}
 801a556:	eeb0 8a40 	vmov.f32	s16, s0
 801a55a:	4604      	mov	r4, r0
 801a55c:	f001 fdf4 	bl	801c148 <__errno>
 801a560:	eeb0 0a48 	vmov.f32	s0, s16
 801a564:	ecbd 8b02 	vpop	{d8}
 801a568:	6004      	str	r4, [r0, #0]
 801a56a:	bd10      	pop	{r4, pc}

0801a56c <xflowf>:
 801a56c:	b130      	cbz	r0, 801a57c <xflowf+0x10>
 801a56e:	eef1 7a40 	vneg.f32	s15, s0
 801a572:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a576:	2022      	movs	r0, #34	@ 0x22
 801a578:	f7ff bfea 	b.w	801a550 <with_errnof>
 801a57c:	eef0 7a40 	vmov.f32	s15, s0
 801a580:	e7f7      	b.n	801a572 <xflowf+0x6>
	...

0801a584 <__math_uflowf>:
 801a584:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a58c <__math_uflowf+0x8>
 801a588:	f7ff bff0 	b.w	801a56c <xflowf>
 801a58c:	10000000 	.word	0x10000000

0801a590 <__math_oflowf>:
 801a590:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a598 <__math_oflowf+0x8>
 801a594:	f7ff bfea 	b.w	801a56c <xflowf>
 801a598:	70000000 	.word	0x70000000

0801a59c <__kernel_rem_pio2f>:
 801a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5a0:	ed2d 8b04 	vpush	{d8-d9}
 801a5a4:	b0d9      	sub	sp, #356	@ 0x164
 801a5a6:	4690      	mov	r8, r2
 801a5a8:	9001      	str	r0, [sp, #4]
 801a5aa:	4ab6      	ldr	r2, [pc, #728]	@ (801a884 <__kernel_rem_pio2f+0x2e8>)
 801a5ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801a5ae:	f118 0f04 	cmn.w	r8, #4
 801a5b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801a5b6:	460f      	mov	r7, r1
 801a5b8:	f103 3bff 	add.w	fp, r3, #4294967295
 801a5bc:	db26      	blt.n	801a60c <__kernel_rem_pio2f+0x70>
 801a5be:	f1b8 0203 	subs.w	r2, r8, #3
 801a5c2:	bf48      	it	mi
 801a5c4:	f108 0204 	addmi.w	r2, r8, #4
 801a5c8:	10d2      	asrs	r2, r2, #3
 801a5ca:	1c55      	adds	r5, r2, #1
 801a5cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a5ce:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a5d2:	00e8      	lsls	r0, r5, #3
 801a5d4:	eba2 060b 	sub.w	r6, r2, fp
 801a5d8:	9002      	str	r0, [sp, #8]
 801a5da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801a5de:	eb0a 0c0b 	add.w	ip, sl, fp
 801a5e2:	ac1c      	add	r4, sp, #112	@ 0x70
 801a5e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801a5e8:	2000      	movs	r0, #0
 801a5ea:	4560      	cmp	r0, ip
 801a5ec:	dd10      	ble.n	801a610 <__kernel_rem_pio2f+0x74>
 801a5ee:	a91c      	add	r1, sp, #112	@ 0x70
 801a5f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801a5f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801a5f8:	2600      	movs	r6, #0
 801a5fa:	4556      	cmp	r6, sl
 801a5fc:	dc24      	bgt.n	801a648 <__kernel_rem_pio2f+0xac>
 801a5fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a602:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a606:	4684      	mov	ip, r0
 801a608:	2400      	movs	r4, #0
 801a60a:	e016      	b.n	801a63a <__kernel_rem_pio2f+0x9e>
 801a60c:	2200      	movs	r2, #0
 801a60e:	e7dc      	b.n	801a5ca <__kernel_rem_pio2f+0x2e>
 801a610:	42c6      	cmn	r6, r0
 801a612:	bf5d      	ittte	pl
 801a614:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801a618:	ee07 1a90 	vmovpl	s15, r1
 801a61c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a620:	eef0 7a47 	vmovmi.f32	s15, s14
 801a624:	ece4 7a01 	vstmia	r4!, {s15}
 801a628:	3001      	adds	r0, #1
 801a62a:	e7de      	b.n	801a5ea <__kernel_rem_pio2f+0x4e>
 801a62c:	ecfe 6a01 	vldmia	lr!, {s13}
 801a630:	ed3c 7a01 	vldmdb	ip!, {s14}
 801a634:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a638:	3401      	adds	r4, #1
 801a63a:	455c      	cmp	r4, fp
 801a63c:	ddf6      	ble.n	801a62c <__kernel_rem_pio2f+0x90>
 801a63e:	ece9 7a01 	vstmia	r9!, {s15}
 801a642:	3601      	adds	r6, #1
 801a644:	3004      	adds	r0, #4
 801a646:	e7d8      	b.n	801a5fa <__kernel_rem_pio2f+0x5e>
 801a648:	a908      	add	r1, sp, #32
 801a64a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a64e:	9104      	str	r1, [sp, #16]
 801a650:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a652:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801a890 <__kernel_rem_pio2f+0x2f4>
 801a656:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801a88c <__kernel_rem_pio2f+0x2f0>
 801a65a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a65e:	9203      	str	r2, [sp, #12]
 801a660:	4654      	mov	r4, sl
 801a662:	00a2      	lsls	r2, r4, #2
 801a664:	9205      	str	r2, [sp, #20]
 801a666:	aa58      	add	r2, sp, #352	@ 0x160
 801a668:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801a66c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801a670:	a944      	add	r1, sp, #272	@ 0x110
 801a672:	aa08      	add	r2, sp, #32
 801a674:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801a678:	4694      	mov	ip, r2
 801a67a:	4626      	mov	r6, r4
 801a67c:	2e00      	cmp	r6, #0
 801a67e:	dc4c      	bgt.n	801a71a <__kernel_rem_pio2f+0x17e>
 801a680:	4628      	mov	r0, r5
 801a682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a686:	f7ff fefd 	bl	801a484 <scalbnf>
 801a68a:	eeb0 8a40 	vmov.f32	s16, s0
 801a68e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801a692:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a696:	f000 f9e9 	bl	801aa6c <floorf>
 801a69a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801a69e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a6a2:	2d00      	cmp	r5, #0
 801a6a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a6a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a6ac:	ee17 9a90 	vmov	r9, s15
 801a6b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a6b8:	dd41      	ble.n	801a73e <__kernel_rem_pio2f+0x1a2>
 801a6ba:	f104 3cff 	add.w	ip, r4, #4294967295
 801a6be:	a908      	add	r1, sp, #32
 801a6c0:	f1c5 0e08 	rsb	lr, r5, #8
 801a6c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801a6c8:	fa46 f00e 	asr.w	r0, r6, lr
 801a6cc:	4481      	add	r9, r0
 801a6ce:	fa00 f00e 	lsl.w	r0, r0, lr
 801a6d2:	1a36      	subs	r6, r6, r0
 801a6d4:	f1c5 0007 	rsb	r0, r5, #7
 801a6d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801a6dc:	4106      	asrs	r6, r0
 801a6de:	2e00      	cmp	r6, #0
 801a6e0:	dd3c      	ble.n	801a75c <__kernel_rem_pio2f+0x1c0>
 801a6e2:	f04f 0e00 	mov.w	lr, #0
 801a6e6:	f109 0901 	add.w	r9, r9, #1
 801a6ea:	4670      	mov	r0, lr
 801a6ec:	4574      	cmp	r4, lr
 801a6ee:	dc68      	bgt.n	801a7c2 <__kernel_rem_pio2f+0x226>
 801a6f0:	2d00      	cmp	r5, #0
 801a6f2:	dd03      	ble.n	801a6fc <__kernel_rem_pio2f+0x160>
 801a6f4:	2d01      	cmp	r5, #1
 801a6f6:	d074      	beq.n	801a7e2 <__kernel_rem_pio2f+0x246>
 801a6f8:	2d02      	cmp	r5, #2
 801a6fa:	d07d      	beq.n	801a7f8 <__kernel_rem_pio2f+0x25c>
 801a6fc:	2e02      	cmp	r6, #2
 801a6fe:	d12d      	bne.n	801a75c <__kernel_rem_pio2f+0x1c0>
 801a700:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a704:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a708:	b340      	cbz	r0, 801a75c <__kernel_rem_pio2f+0x1c0>
 801a70a:	4628      	mov	r0, r5
 801a70c:	9306      	str	r3, [sp, #24]
 801a70e:	f7ff feb9 	bl	801a484 <scalbnf>
 801a712:	9b06      	ldr	r3, [sp, #24]
 801a714:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a718:	e020      	b.n	801a75c <__kernel_rem_pio2f+0x1c0>
 801a71a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a71e:	3e01      	subs	r6, #1
 801a720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a728:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a72c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a730:	ecac 0a01 	vstmia	ip!, {s0}
 801a734:	ed30 0a01 	vldmdb	r0!, {s0}
 801a738:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a73c:	e79e      	b.n	801a67c <__kernel_rem_pio2f+0xe0>
 801a73e:	d105      	bne.n	801a74c <__kernel_rem_pio2f+0x1b0>
 801a740:	1e60      	subs	r0, r4, #1
 801a742:	a908      	add	r1, sp, #32
 801a744:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801a748:	11f6      	asrs	r6, r6, #7
 801a74a:	e7c8      	b.n	801a6de <__kernel_rem_pio2f+0x142>
 801a74c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a750:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a758:	da31      	bge.n	801a7be <__kernel_rem_pio2f+0x222>
 801a75a:	2600      	movs	r6, #0
 801a75c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a764:	f040 8098 	bne.w	801a898 <__kernel_rem_pio2f+0x2fc>
 801a768:	1e60      	subs	r0, r4, #1
 801a76a:	2200      	movs	r2, #0
 801a76c:	4550      	cmp	r0, sl
 801a76e:	da4b      	bge.n	801a808 <__kernel_rem_pio2f+0x26c>
 801a770:	2a00      	cmp	r2, #0
 801a772:	d065      	beq.n	801a840 <__kernel_rem_pio2f+0x2a4>
 801a774:	3c01      	subs	r4, #1
 801a776:	ab08      	add	r3, sp, #32
 801a778:	3d08      	subs	r5, #8
 801a77a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d0f8      	beq.n	801a774 <__kernel_rem_pio2f+0x1d8>
 801a782:	4628      	mov	r0, r5
 801a784:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a788:	f7ff fe7c 	bl	801a484 <scalbnf>
 801a78c:	1c63      	adds	r3, r4, #1
 801a78e:	aa44      	add	r2, sp, #272	@ 0x110
 801a790:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801a890 <__kernel_rem_pio2f+0x2f4>
 801a794:	0099      	lsls	r1, r3, #2
 801a796:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a79a:	4623      	mov	r3, r4
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	f280 80a9 	bge.w	801a8f4 <__kernel_rem_pio2f+0x358>
 801a7a2:	4623      	mov	r3, r4
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	f2c0 80c7 	blt.w	801a938 <__kernel_rem_pio2f+0x39c>
 801a7aa:	aa44      	add	r2, sp, #272	@ 0x110
 801a7ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801a7b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801a888 <__kernel_rem_pio2f+0x2ec>
 801a7b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a7b8:	2000      	movs	r0, #0
 801a7ba:	1ae2      	subs	r2, r4, r3
 801a7bc:	e0b1      	b.n	801a922 <__kernel_rem_pio2f+0x386>
 801a7be:	2602      	movs	r6, #2
 801a7c0:	e78f      	b.n	801a6e2 <__kernel_rem_pio2f+0x146>
 801a7c2:	f852 1b04 	ldr.w	r1, [r2], #4
 801a7c6:	b948      	cbnz	r0, 801a7dc <__kernel_rem_pio2f+0x240>
 801a7c8:	b121      	cbz	r1, 801a7d4 <__kernel_rem_pio2f+0x238>
 801a7ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801a7ce:	f842 1c04 	str.w	r1, [r2, #-4]
 801a7d2:	2101      	movs	r1, #1
 801a7d4:	f10e 0e01 	add.w	lr, lr, #1
 801a7d8:	4608      	mov	r0, r1
 801a7da:	e787      	b.n	801a6ec <__kernel_rem_pio2f+0x150>
 801a7dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801a7e0:	e7f5      	b.n	801a7ce <__kernel_rem_pio2f+0x232>
 801a7e2:	f104 3cff 	add.w	ip, r4, #4294967295
 801a7e6:	aa08      	add	r2, sp, #32
 801a7e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a7ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a7f0:	a908      	add	r1, sp, #32
 801a7f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a7f6:	e781      	b.n	801a6fc <__kernel_rem_pio2f+0x160>
 801a7f8:	f104 3cff 	add.w	ip, r4, #4294967295
 801a7fc:	aa08      	add	r2, sp, #32
 801a7fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a802:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a806:	e7f3      	b.n	801a7f0 <__kernel_rem_pio2f+0x254>
 801a808:	a908      	add	r1, sp, #32
 801a80a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a80e:	3801      	subs	r0, #1
 801a810:	430a      	orrs	r2, r1
 801a812:	e7ab      	b.n	801a76c <__kernel_rem_pio2f+0x1d0>
 801a814:	3201      	adds	r2, #1
 801a816:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a81a:	2e00      	cmp	r6, #0
 801a81c:	d0fa      	beq.n	801a814 <__kernel_rem_pio2f+0x278>
 801a81e:	9905      	ldr	r1, [sp, #20]
 801a820:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801a824:	eb0d 0001 	add.w	r0, sp, r1
 801a828:	18e6      	adds	r6, r4, r3
 801a82a:	a91c      	add	r1, sp, #112	@ 0x70
 801a82c:	f104 0c01 	add.w	ip, r4, #1
 801a830:	384c      	subs	r0, #76	@ 0x4c
 801a832:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801a836:	4422      	add	r2, r4
 801a838:	4562      	cmp	r2, ip
 801a83a:	da04      	bge.n	801a846 <__kernel_rem_pio2f+0x2aa>
 801a83c:	4614      	mov	r4, r2
 801a83e:	e710      	b.n	801a662 <__kernel_rem_pio2f+0xc6>
 801a840:	9804      	ldr	r0, [sp, #16]
 801a842:	2201      	movs	r2, #1
 801a844:	e7e7      	b.n	801a816 <__kernel_rem_pio2f+0x27a>
 801a846:	9903      	ldr	r1, [sp, #12]
 801a848:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a84c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a850:	9105      	str	r1, [sp, #20]
 801a852:	ee07 1a90 	vmov	s15, r1
 801a856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a85a:	2400      	movs	r4, #0
 801a85c:	ece6 7a01 	vstmia	r6!, {s15}
 801a860:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a864:	46b1      	mov	r9, r6
 801a866:	455c      	cmp	r4, fp
 801a868:	dd04      	ble.n	801a874 <__kernel_rem_pio2f+0x2d8>
 801a86a:	ece0 7a01 	vstmia	r0!, {s15}
 801a86e:	f10c 0c01 	add.w	ip, ip, #1
 801a872:	e7e1      	b.n	801a838 <__kernel_rem_pio2f+0x29c>
 801a874:	ecfe 6a01 	vldmia	lr!, {s13}
 801a878:	ed39 7a01 	vldmdb	r9!, {s14}
 801a87c:	3401      	adds	r4, #1
 801a87e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a882:	e7f0      	b.n	801a866 <__kernel_rem_pio2f+0x2ca>
 801a884:	08022670 	.word	0x08022670
 801a888:	08022644 	.word	0x08022644
 801a88c:	43800000 	.word	0x43800000
 801a890:	3b800000 	.word	0x3b800000
 801a894:	00000000 	.word	0x00000000
 801a898:	9b02      	ldr	r3, [sp, #8]
 801a89a:	eeb0 0a48 	vmov.f32	s0, s16
 801a89e:	eba3 0008 	sub.w	r0, r3, r8
 801a8a2:	f7ff fdef 	bl	801a484 <scalbnf>
 801a8a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801a88c <__kernel_rem_pio2f+0x2f0>
 801a8aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b2:	db19      	blt.n	801a8e8 <__kernel_rem_pio2f+0x34c>
 801a8b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801a890 <__kernel_rem_pio2f+0x2f4>
 801a8b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a8bc:	aa08      	add	r2, sp, #32
 801a8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a8c2:	3508      	adds	r5, #8
 801a8c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a8cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a8d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a8d4:	ee10 3a10 	vmov	r3, s0
 801a8d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a8dc:	ee17 3a90 	vmov	r3, s15
 801a8e0:	3401      	adds	r4, #1
 801a8e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a8e6:	e74c      	b.n	801a782 <__kernel_rem_pio2f+0x1e6>
 801a8e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a8ec:	aa08      	add	r2, sp, #32
 801a8ee:	ee10 3a10 	vmov	r3, s0
 801a8f2:	e7f6      	b.n	801a8e2 <__kernel_rem_pio2f+0x346>
 801a8f4:	a808      	add	r0, sp, #32
 801a8f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a8fa:	9001      	str	r0, [sp, #4]
 801a8fc:	ee07 0a90 	vmov	s15, r0
 801a900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a904:	3b01      	subs	r3, #1
 801a906:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a90a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a90e:	ed62 7a01 	vstmdb	r2!, {s15}
 801a912:	e743      	b.n	801a79c <__kernel_rem_pio2f+0x200>
 801a914:	ecfc 6a01 	vldmia	ip!, {s13}
 801a918:	ecb5 7a01 	vldmia	r5!, {s14}
 801a91c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a920:	3001      	adds	r0, #1
 801a922:	4550      	cmp	r0, sl
 801a924:	dc01      	bgt.n	801a92a <__kernel_rem_pio2f+0x38e>
 801a926:	4290      	cmp	r0, r2
 801a928:	ddf4      	ble.n	801a914 <__kernel_rem_pio2f+0x378>
 801a92a:	a858      	add	r0, sp, #352	@ 0x160
 801a92c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a930:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801a934:	3b01      	subs	r3, #1
 801a936:	e735      	b.n	801a7a4 <__kernel_rem_pio2f+0x208>
 801a938:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a93a:	2b02      	cmp	r3, #2
 801a93c:	dc09      	bgt.n	801a952 <__kernel_rem_pio2f+0x3b6>
 801a93e:	2b00      	cmp	r3, #0
 801a940:	dc27      	bgt.n	801a992 <__kernel_rem_pio2f+0x3f6>
 801a942:	d040      	beq.n	801a9c6 <__kernel_rem_pio2f+0x42a>
 801a944:	f009 0007 	and.w	r0, r9, #7
 801a948:	b059      	add	sp, #356	@ 0x164
 801a94a:	ecbd 8b04 	vpop	{d8-d9}
 801a94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a952:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a954:	2b03      	cmp	r3, #3
 801a956:	d1f5      	bne.n	801a944 <__kernel_rem_pio2f+0x3a8>
 801a958:	aa30      	add	r2, sp, #192	@ 0xc0
 801a95a:	1f0b      	subs	r3, r1, #4
 801a95c:	4413      	add	r3, r2
 801a95e:	461a      	mov	r2, r3
 801a960:	4620      	mov	r0, r4
 801a962:	2800      	cmp	r0, #0
 801a964:	dc50      	bgt.n	801aa08 <__kernel_rem_pio2f+0x46c>
 801a966:	4622      	mov	r2, r4
 801a968:	2a01      	cmp	r2, #1
 801a96a:	dc5d      	bgt.n	801aa28 <__kernel_rem_pio2f+0x48c>
 801a96c:	ab30      	add	r3, sp, #192	@ 0xc0
 801a96e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a972:	440b      	add	r3, r1
 801a974:	2c01      	cmp	r4, #1
 801a976:	dc67      	bgt.n	801aa48 <__kernel_rem_pio2f+0x4ac>
 801a978:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a97c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801a980:	2e00      	cmp	r6, #0
 801a982:	d167      	bne.n	801aa54 <__kernel_rem_pio2f+0x4b8>
 801a984:	edc7 6a00 	vstr	s13, [r7]
 801a988:	ed87 7a01 	vstr	s14, [r7, #4]
 801a98c:	edc7 7a02 	vstr	s15, [r7, #8]
 801a990:	e7d8      	b.n	801a944 <__kernel_rem_pio2f+0x3a8>
 801a992:	ab30      	add	r3, sp, #192	@ 0xc0
 801a994:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a998:	440b      	add	r3, r1
 801a99a:	4622      	mov	r2, r4
 801a99c:	2a00      	cmp	r2, #0
 801a99e:	da24      	bge.n	801a9ea <__kernel_rem_pio2f+0x44e>
 801a9a0:	b34e      	cbz	r6, 801a9f6 <__kernel_rem_pio2f+0x45a>
 801a9a2:	eef1 7a47 	vneg.f32	s15, s14
 801a9a6:	edc7 7a00 	vstr	s15, [r7]
 801a9aa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801a9ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a9b2:	aa31      	add	r2, sp, #196	@ 0xc4
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	429c      	cmp	r4, r3
 801a9b8:	da20      	bge.n	801a9fc <__kernel_rem_pio2f+0x460>
 801a9ba:	b10e      	cbz	r6, 801a9c0 <__kernel_rem_pio2f+0x424>
 801a9bc:	eef1 7a67 	vneg.f32	s15, s15
 801a9c0:	edc7 7a01 	vstr	s15, [r7, #4]
 801a9c4:	e7be      	b.n	801a944 <__kernel_rem_pio2f+0x3a8>
 801a9c6:	ab30      	add	r3, sp, #192	@ 0xc0
 801a9c8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801a894 <__kernel_rem_pio2f+0x2f8>
 801a9cc:	440b      	add	r3, r1
 801a9ce:	2c00      	cmp	r4, #0
 801a9d0:	da05      	bge.n	801a9de <__kernel_rem_pio2f+0x442>
 801a9d2:	b10e      	cbz	r6, 801a9d8 <__kernel_rem_pio2f+0x43c>
 801a9d4:	eef1 7a67 	vneg.f32	s15, s15
 801a9d8:	edc7 7a00 	vstr	s15, [r7]
 801a9dc:	e7b2      	b.n	801a944 <__kernel_rem_pio2f+0x3a8>
 801a9de:	ed33 7a01 	vldmdb	r3!, {s14}
 801a9e2:	3c01      	subs	r4, #1
 801a9e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a9e8:	e7f1      	b.n	801a9ce <__kernel_rem_pio2f+0x432>
 801a9ea:	ed73 7a01 	vldmdb	r3!, {s15}
 801a9ee:	3a01      	subs	r2, #1
 801a9f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a9f4:	e7d2      	b.n	801a99c <__kernel_rem_pio2f+0x400>
 801a9f6:	eef0 7a47 	vmov.f32	s15, s14
 801a9fa:	e7d4      	b.n	801a9a6 <__kernel_rem_pio2f+0x40a>
 801a9fc:	ecb2 7a01 	vldmia	r2!, {s14}
 801aa00:	3301      	adds	r3, #1
 801aa02:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa06:	e7d6      	b.n	801a9b6 <__kernel_rem_pio2f+0x41a>
 801aa08:	ed72 7a01 	vldmdb	r2!, {s15}
 801aa0c:	edd2 6a01 	vldr	s13, [r2, #4]
 801aa10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aa14:	3801      	subs	r0, #1
 801aa16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa1a:	ed82 7a00 	vstr	s14, [r2]
 801aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa22:	edc2 7a01 	vstr	s15, [r2, #4]
 801aa26:	e79c      	b.n	801a962 <__kernel_rem_pio2f+0x3c6>
 801aa28:	ed73 7a01 	vldmdb	r3!, {s15}
 801aa2c:	edd3 6a01 	vldr	s13, [r3, #4]
 801aa30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aa34:	3a01      	subs	r2, #1
 801aa36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa3a:	ed83 7a00 	vstr	s14, [r3]
 801aa3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa42:	edc3 7a01 	vstr	s15, [r3, #4]
 801aa46:	e78f      	b.n	801a968 <__kernel_rem_pio2f+0x3cc>
 801aa48:	ed33 7a01 	vldmdb	r3!, {s14}
 801aa4c:	3c01      	subs	r4, #1
 801aa4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa52:	e78f      	b.n	801a974 <__kernel_rem_pio2f+0x3d8>
 801aa54:	eef1 6a66 	vneg.f32	s13, s13
 801aa58:	eeb1 7a47 	vneg.f32	s14, s14
 801aa5c:	edc7 6a00 	vstr	s13, [r7]
 801aa60:	ed87 7a01 	vstr	s14, [r7, #4]
 801aa64:	eef1 7a67 	vneg.f32	s15, s15
 801aa68:	e790      	b.n	801a98c <__kernel_rem_pio2f+0x3f0>
 801aa6a:	bf00      	nop

0801aa6c <floorf>:
 801aa6c:	ee10 3a10 	vmov	r3, s0
 801aa70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801aa74:	3a7f      	subs	r2, #127	@ 0x7f
 801aa76:	2a16      	cmp	r2, #22
 801aa78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801aa7c:	dc2b      	bgt.n	801aad6 <floorf+0x6a>
 801aa7e:	2a00      	cmp	r2, #0
 801aa80:	da12      	bge.n	801aaa8 <floorf+0x3c>
 801aa82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801aae8 <floorf+0x7c>
 801aa86:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aa8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa92:	dd06      	ble.n	801aaa2 <floorf+0x36>
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	da24      	bge.n	801aae2 <floorf+0x76>
 801aa98:	2900      	cmp	r1, #0
 801aa9a:	4b14      	ldr	r3, [pc, #80]	@ (801aaec <floorf+0x80>)
 801aa9c:	bf08      	it	eq
 801aa9e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801aaa2:	ee00 3a10 	vmov	s0, r3
 801aaa6:	4770      	bx	lr
 801aaa8:	4911      	ldr	r1, [pc, #68]	@ (801aaf0 <floorf+0x84>)
 801aaaa:	4111      	asrs	r1, r2
 801aaac:	420b      	tst	r3, r1
 801aaae:	d0fa      	beq.n	801aaa6 <floorf+0x3a>
 801aab0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801aae8 <floorf+0x7c>
 801aab4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aac0:	ddef      	ble.n	801aaa2 <floorf+0x36>
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	bfbe      	ittt	lt
 801aac6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801aaca:	fa40 f202 	asrlt.w	r2, r0, r2
 801aace:	189b      	addlt	r3, r3, r2
 801aad0:	ea23 0301 	bic.w	r3, r3, r1
 801aad4:	e7e5      	b.n	801aaa2 <floorf+0x36>
 801aad6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801aada:	d3e4      	bcc.n	801aaa6 <floorf+0x3a>
 801aadc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aae0:	4770      	bx	lr
 801aae2:	2300      	movs	r3, #0
 801aae4:	e7dd      	b.n	801aaa2 <floorf+0x36>
 801aae6:	bf00      	nop
 801aae8:	7149f2ca 	.word	0x7149f2ca
 801aaec:	bf800000 	.word	0xbf800000
 801aaf0:	007fffff 	.word	0x007fffff

0801aaf4 <__cvt>:
 801aaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf8:	ec57 6b10 	vmov	r6, r7, d0
 801aafc:	2f00      	cmp	r7, #0
 801aafe:	460c      	mov	r4, r1
 801ab00:	4619      	mov	r1, r3
 801ab02:	463b      	mov	r3, r7
 801ab04:	bfbb      	ittet	lt
 801ab06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801ab0a:	461f      	movlt	r7, r3
 801ab0c:	2300      	movge	r3, #0
 801ab0e:	232d      	movlt	r3, #45	@ 0x2d
 801ab10:	700b      	strb	r3, [r1, #0]
 801ab12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ab14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801ab18:	4691      	mov	r9, r2
 801ab1a:	f023 0820 	bic.w	r8, r3, #32
 801ab1e:	bfbc      	itt	lt
 801ab20:	4632      	movlt	r2, r6
 801ab22:	4616      	movlt	r6, r2
 801ab24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ab28:	d005      	beq.n	801ab36 <__cvt+0x42>
 801ab2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801ab2e:	d100      	bne.n	801ab32 <__cvt+0x3e>
 801ab30:	3401      	adds	r4, #1
 801ab32:	2102      	movs	r1, #2
 801ab34:	e000      	b.n	801ab38 <__cvt+0x44>
 801ab36:	2103      	movs	r1, #3
 801ab38:	ab03      	add	r3, sp, #12
 801ab3a:	9301      	str	r3, [sp, #4]
 801ab3c:	ab02      	add	r3, sp, #8
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	ec47 6b10 	vmov	d0, r6, r7
 801ab44:	4653      	mov	r3, sl
 801ab46:	4622      	mov	r2, r4
 801ab48:	f001 fbe2 	bl	801c310 <_dtoa_r>
 801ab4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801ab50:	4605      	mov	r5, r0
 801ab52:	d119      	bne.n	801ab88 <__cvt+0x94>
 801ab54:	f019 0f01 	tst.w	r9, #1
 801ab58:	d00e      	beq.n	801ab78 <__cvt+0x84>
 801ab5a:	eb00 0904 	add.w	r9, r0, r4
 801ab5e:	2200      	movs	r2, #0
 801ab60:	2300      	movs	r3, #0
 801ab62:	4630      	mov	r0, r6
 801ab64:	4639      	mov	r1, r7
 801ab66:	f7e5 ffbf 	bl	8000ae8 <__aeabi_dcmpeq>
 801ab6a:	b108      	cbz	r0, 801ab70 <__cvt+0x7c>
 801ab6c:	f8cd 900c 	str.w	r9, [sp, #12]
 801ab70:	2230      	movs	r2, #48	@ 0x30
 801ab72:	9b03      	ldr	r3, [sp, #12]
 801ab74:	454b      	cmp	r3, r9
 801ab76:	d31e      	bcc.n	801abb6 <__cvt+0xc2>
 801ab78:	9b03      	ldr	r3, [sp, #12]
 801ab7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab7c:	1b5b      	subs	r3, r3, r5
 801ab7e:	4628      	mov	r0, r5
 801ab80:	6013      	str	r3, [r2, #0]
 801ab82:	b004      	add	sp, #16
 801ab84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ab8c:	eb00 0904 	add.w	r9, r0, r4
 801ab90:	d1e5      	bne.n	801ab5e <__cvt+0x6a>
 801ab92:	7803      	ldrb	r3, [r0, #0]
 801ab94:	2b30      	cmp	r3, #48	@ 0x30
 801ab96:	d10a      	bne.n	801abae <__cvt+0xba>
 801ab98:	2200      	movs	r2, #0
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	4639      	mov	r1, r7
 801aba0:	f7e5 ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 801aba4:	b918      	cbnz	r0, 801abae <__cvt+0xba>
 801aba6:	f1c4 0401 	rsb	r4, r4, #1
 801abaa:	f8ca 4000 	str.w	r4, [sl]
 801abae:	f8da 3000 	ldr.w	r3, [sl]
 801abb2:	4499      	add	r9, r3
 801abb4:	e7d3      	b.n	801ab5e <__cvt+0x6a>
 801abb6:	1c59      	adds	r1, r3, #1
 801abb8:	9103      	str	r1, [sp, #12]
 801abba:	701a      	strb	r2, [r3, #0]
 801abbc:	e7d9      	b.n	801ab72 <__cvt+0x7e>

0801abbe <__exponent>:
 801abbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801abc0:	2900      	cmp	r1, #0
 801abc2:	bfba      	itte	lt
 801abc4:	4249      	neglt	r1, r1
 801abc6:	232d      	movlt	r3, #45	@ 0x2d
 801abc8:	232b      	movge	r3, #43	@ 0x2b
 801abca:	2909      	cmp	r1, #9
 801abcc:	7002      	strb	r2, [r0, #0]
 801abce:	7043      	strb	r3, [r0, #1]
 801abd0:	dd29      	ble.n	801ac26 <__exponent+0x68>
 801abd2:	f10d 0307 	add.w	r3, sp, #7
 801abd6:	461d      	mov	r5, r3
 801abd8:	270a      	movs	r7, #10
 801abda:	461a      	mov	r2, r3
 801abdc:	fbb1 f6f7 	udiv	r6, r1, r7
 801abe0:	fb07 1416 	mls	r4, r7, r6, r1
 801abe4:	3430      	adds	r4, #48	@ 0x30
 801abe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 801abea:	460c      	mov	r4, r1
 801abec:	2c63      	cmp	r4, #99	@ 0x63
 801abee:	f103 33ff 	add.w	r3, r3, #4294967295
 801abf2:	4631      	mov	r1, r6
 801abf4:	dcf1      	bgt.n	801abda <__exponent+0x1c>
 801abf6:	3130      	adds	r1, #48	@ 0x30
 801abf8:	1e94      	subs	r4, r2, #2
 801abfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 801abfe:	1c41      	adds	r1, r0, #1
 801ac00:	4623      	mov	r3, r4
 801ac02:	42ab      	cmp	r3, r5
 801ac04:	d30a      	bcc.n	801ac1c <__exponent+0x5e>
 801ac06:	f10d 0309 	add.w	r3, sp, #9
 801ac0a:	1a9b      	subs	r3, r3, r2
 801ac0c:	42ac      	cmp	r4, r5
 801ac0e:	bf88      	it	hi
 801ac10:	2300      	movhi	r3, #0
 801ac12:	3302      	adds	r3, #2
 801ac14:	4403      	add	r3, r0
 801ac16:	1a18      	subs	r0, r3, r0
 801ac18:	b003      	add	sp, #12
 801ac1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ac20:	f801 6f01 	strb.w	r6, [r1, #1]!
 801ac24:	e7ed      	b.n	801ac02 <__exponent+0x44>
 801ac26:	2330      	movs	r3, #48	@ 0x30
 801ac28:	3130      	adds	r1, #48	@ 0x30
 801ac2a:	7083      	strb	r3, [r0, #2]
 801ac2c:	70c1      	strb	r1, [r0, #3]
 801ac2e:	1d03      	adds	r3, r0, #4
 801ac30:	e7f1      	b.n	801ac16 <__exponent+0x58>
	...

0801ac34 <_printf_float>:
 801ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac38:	b08d      	sub	sp, #52	@ 0x34
 801ac3a:	460c      	mov	r4, r1
 801ac3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801ac40:	4616      	mov	r6, r2
 801ac42:	461f      	mov	r7, r3
 801ac44:	4605      	mov	r5, r0
 801ac46:	f001 f9d7 	bl	801bff8 <_localeconv_r>
 801ac4a:	6803      	ldr	r3, [r0, #0]
 801ac4c:	9304      	str	r3, [sp, #16]
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f7e5 fb1e 	bl	8000290 <strlen>
 801ac54:	2300      	movs	r3, #0
 801ac56:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac58:	f8d8 3000 	ldr.w	r3, [r8]
 801ac5c:	9005      	str	r0, [sp, #20]
 801ac5e:	3307      	adds	r3, #7
 801ac60:	f023 0307 	bic.w	r3, r3, #7
 801ac64:	f103 0208 	add.w	r2, r3, #8
 801ac68:	f894 a018 	ldrb.w	sl, [r4, #24]
 801ac6c:	f8d4 b000 	ldr.w	fp, [r4]
 801ac70:	f8c8 2000 	str.w	r2, [r8]
 801ac74:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ac78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801ac7c:	9307      	str	r3, [sp, #28]
 801ac7e:	f8cd 8018 	str.w	r8, [sp, #24]
 801ac82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801ac86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac8a:	4b9c      	ldr	r3, [pc, #624]	@ (801aefc <_printf_float+0x2c8>)
 801ac8c:	f04f 32ff 	mov.w	r2, #4294967295
 801ac90:	f7e5 ff5c 	bl	8000b4c <__aeabi_dcmpun>
 801ac94:	bb70      	cbnz	r0, 801acf4 <_printf_float+0xc0>
 801ac96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac9a:	4b98      	ldr	r3, [pc, #608]	@ (801aefc <_printf_float+0x2c8>)
 801ac9c:	f04f 32ff 	mov.w	r2, #4294967295
 801aca0:	f7e5 ff36 	bl	8000b10 <__aeabi_dcmple>
 801aca4:	bb30      	cbnz	r0, 801acf4 <_printf_float+0xc0>
 801aca6:	2200      	movs	r2, #0
 801aca8:	2300      	movs	r3, #0
 801acaa:	4640      	mov	r0, r8
 801acac:	4649      	mov	r1, r9
 801acae:	f7e5 ff25 	bl	8000afc <__aeabi_dcmplt>
 801acb2:	b110      	cbz	r0, 801acba <_printf_float+0x86>
 801acb4:	232d      	movs	r3, #45	@ 0x2d
 801acb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801acba:	4a91      	ldr	r2, [pc, #580]	@ (801af00 <_printf_float+0x2cc>)
 801acbc:	4b91      	ldr	r3, [pc, #580]	@ (801af04 <_printf_float+0x2d0>)
 801acbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801acc2:	bf8c      	ite	hi
 801acc4:	4690      	movhi	r8, r2
 801acc6:	4698      	movls	r8, r3
 801acc8:	2303      	movs	r3, #3
 801acca:	6123      	str	r3, [r4, #16]
 801accc:	f02b 0304 	bic.w	r3, fp, #4
 801acd0:	6023      	str	r3, [r4, #0]
 801acd2:	f04f 0900 	mov.w	r9, #0
 801acd6:	9700      	str	r7, [sp, #0]
 801acd8:	4633      	mov	r3, r6
 801acda:	aa0b      	add	r2, sp, #44	@ 0x2c
 801acdc:	4621      	mov	r1, r4
 801acde:	4628      	mov	r0, r5
 801ace0:	f000 fb1e 	bl	801b320 <_printf_common>
 801ace4:	3001      	adds	r0, #1
 801ace6:	f040 808d 	bne.w	801ae04 <_printf_float+0x1d0>
 801acea:	f04f 30ff 	mov.w	r0, #4294967295
 801acee:	b00d      	add	sp, #52	@ 0x34
 801acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acf4:	4642      	mov	r2, r8
 801acf6:	464b      	mov	r3, r9
 801acf8:	4640      	mov	r0, r8
 801acfa:	4649      	mov	r1, r9
 801acfc:	f7e5 ff26 	bl	8000b4c <__aeabi_dcmpun>
 801ad00:	b140      	cbz	r0, 801ad14 <_printf_float+0xe0>
 801ad02:	464b      	mov	r3, r9
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	bfbc      	itt	lt
 801ad08:	232d      	movlt	r3, #45	@ 0x2d
 801ad0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ad0e:	4a7e      	ldr	r2, [pc, #504]	@ (801af08 <_printf_float+0x2d4>)
 801ad10:	4b7e      	ldr	r3, [pc, #504]	@ (801af0c <_printf_float+0x2d8>)
 801ad12:	e7d4      	b.n	801acbe <_printf_float+0x8a>
 801ad14:	6863      	ldr	r3, [r4, #4]
 801ad16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801ad1a:	9206      	str	r2, [sp, #24]
 801ad1c:	1c5a      	adds	r2, r3, #1
 801ad1e:	d13b      	bne.n	801ad98 <_printf_float+0x164>
 801ad20:	2306      	movs	r3, #6
 801ad22:	6063      	str	r3, [r4, #4]
 801ad24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801ad28:	2300      	movs	r3, #0
 801ad2a:	6022      	str	r2, [r4, #0]
 801ad2c:	9303      	str	r3, [sp, #12]
 801ad2e:	ab0a      	add	r3, sp, #40	@ 0x28
 801ad30:	e9cd a301 	strd	sl, r3, [sp, #4]
 801ad34:	ab09      	add	r3, sp, #36	@ 0x24
 801ad36:	9300      	str	r3, [sp, #0]
 801ad38:	6861      	ldr	r1, [r4, #4]
 801ad3a:	ec49 8b10 	vmov	d0, r8, r9
 801ad3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801ad42:	4628      	mov	r0, r5
 801ad44:	f7ff fed6 	bl	801aaf4 <__cvt>
 801ad48:	9b06      	ldr	r3, [sp, #24]
 801ad4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ad4c:	2b47      	cmp	r3, #71	@ 0x47
 801ad4e:	4680      	mov	r8, r0
 801ad50:	d129      	bne.n	801ada6 <_printf_float+0x172>
 801ad52:	1cc8      	adds	r0, r1, #3
 801ad54:	db02      	blt.n	801ad5c <_printf_float+0x128>
 801ad56:	6863      	ldr	r3, [r4, #4]
 801ad58:	4299      	cmp	r1, r3
 801ad5a:	dd41      	ble.n	801ade0 <_printf_float+0x1ac>
 801ad5c:	f1aa 0a02 	sub.w	sl, sl, #2
 801ad60:	fa5f fa8a 	uxtb.w	sl, sl
 801ad64:	3901      	subs	r1, #1
 801ad66:	4652      	mov	r2, sl
 801ad68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801ad6c:	9109      	str	r1, [sp, #36]	@ 0x24
 801ad6e:	f7ff ff26 	bl	801abbe <__exponent>
 801ad72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ad74:	1813      	adds	r3, r2, r0
 801ad76:	2a01      	cmp	r2, #1
 801ad78:	4681      	mov	r9, r0
 801ad7a:	6123      	str	r3, [r4, #16]
 801ad7c:	dc02      	bgt.n	801ad84 <_printf_float+0x150>
 801ad7e:	6822      	ldr	r2, [r4, #0]
 801ad80:	07d2      	lsls	r2, r2, #31
 801ad82:	d501      	bpl.n	801ad88 <_printf_float+0x154>
 801ad84:	3301      	adds	r3, #1
 801ad86:	6123      	str	r3, [r4, #16]
 801ad88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d0a2      	beq.n	801acd6 <_printf_float+0xa2>
 801ad90:	232d      	movs	r3, #45	@ 0x2d
 801ad92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ad96:	e79e      	b.n	801acd6 <_printf_float+0xa2>
 801ad98:	9a06      	ldr	r2, [sp, #24]
 801ad9a:	2a47      	cmp	r2, #71	@ 0x47
 801ad9c:	d1c2      	bne.n	801ad24 <_printf_float+0xf0>
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d1c0      	bne.n	801ad24 <_printf_float+0xf0>
 801ada2:	2301      	movs	r3, #1
 801ada4:	e7bd      	b.n	801ad22 <_printf_float+0xee>
 801ada6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801adaa:	d9db      	bls.n	801ad64 <_printf_float+0x130>
 801adac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801adb0:	d118      	bne.n	801ade4 <_printf_float+0x1b0>
 801adb2:	2900      	cmp	r1, #0
 801adb4:	6863      	ldr	r3, [r4, #4]
 801adb6:	dd0b      	ble.n	801add0 <_printf_float+0x19c>
 801adb8:	6121      	str	r1, [r4, #16]
 801adba:	b913      	cbnz	r3, 801adc2 <_printf_float+0x18e>
 801adbc:	6822      	ldr	r2, [r4, #0]
 801adbe:	07d0      	lsls	r0, r2, #31
 801adc0:	d502      	bpl.n	801adc8 <_printf_float+0x194>
 801adc2:	3301      	adds	r3, #1
 801adc4:	440b      	add	r3, r1
 801adc6:	6123      	str	r3, [r4, #16]
 801adc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801adca:	f04f 0900 	mov.w	r9, #0
 801adce:	e7db      	b.n	801ad88 <_printf_float+0x154>
 801add0:	b913      	cbnz	r3, 801add8 <_printf_float+0x1a4>
 801add2:	6822      	ldr	r2, [r4, #0]
 801add4:	07d2      	lsls	r2, r2, #31
 801add6:	d501      	bpl.n	801addc <_printf_float+0x1a8>
 801add8:	3302      	adds	r3, #2
 801adda:	e7f4      	b.n	801adc6 <_printf_float+0x192>
 801addc:	2301      	movs	r3, #1
 801adde:	e7f2      	b.n	801adc6 <_printf_float+0x192>
 801ade0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801ade4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ade6:	4299      	cmp	r1, r3
 801ade8:	db05      	blt.n	801adf6 <_printf_float+0x1c2>
 801adea:	6823      	ldr	r3, [r4, #0]
 801adec:	6121      	str	r1, [r4, #16]
 801adee:	07d8      	lsls	r0, r3, #31
 801adf0:	d5ea      	bpl.n	801adc8 <_printf_float+0x194>
 801adf2:	1c4b      	adds	r3, r1, #1
 801adf4:	e7e7      	b.n	801adc6 <_printf_float+0x192>
 801adf6:	2900      	cmp	r1, #0
 801adf8:	bfd4      	ite	le
 801adfa:	f1c1 0202 	rsble	r2, r1, #2
 801adfe:	2201      	movgt	r2, #1
 801ae00:	4413      	add	r3, r2
 801ae02:	e7e0      	b.n	801adc6 <_printf_float+0x192>
 801ae04:	6823      	ldr	r3, [r4, #0]
 801ae06:	055a      	lsls	r2, r3, #21
 801ae08:	d407      	bmi.n	801ae1a <_printf_float+0x1e6>
 801ae0a:	6923      	ldr	r3, [r4, #16]
 801ae0c:	4642      	mov	r2, r8
 801ae0e:	4631      	mov	r1, r6
 801ae10:	4628      	mov	r0, r5
 801ae12:	47b8      	blx	r7
 801ae14:	3001      	adds	r0, #1
 801ae16:	d12b      	bne.n	801ae70 <_printf_float+0x23c>
 801ae18:	e767      	b.n	801acea <_printf_float+0xb6>
 801ae1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801ae1e:	f240 80dd 	bls.w	801afdc <_printf_float+0x3a8>
 801ae22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ae26:	2200      	movs	r2, #0
 801ae28:	2300      	movs	r3, #0
 801ae2a:	f7e5 fe5d 	bl	8000ae8 <__aeabi_dcmpeq>
 801ae2e:	2800      	cmp	r0, #0
 801ae30:	d033      	beq.n	801ae9a <_printf_float+0x266>
 801ae32:	4a37      	ldr	r2, [pc, #220]	@ (801af10 <_printf_float+0x2dc>)
 801ae34:	2301      	movs	r3, #1
 801ae36:	4631      	mov	r1, r6
 801ae38:	4628      	mov	r0, r5
 801ae3a:	47b8      	blx	r7
 801ae3c:	3001      	adds	r0, #1
 801ae3e:	f43f af54 	beq.w	801acea <_printf_float+0xb6>
 801ae42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ae46:	4543      	cmp	r3, r8
 801ae48:	db02      	blt.n	801ae50 <_printf_float+0x21c>
 801ae4a:	6823      	ldr	r3, [r4, #0]
 801ae4c:	07d8      	lsls	r0, r3, #31
 801ae4e:	d50f      	bpl.n	801ae70 <_printf_float+0x23c>
 801ae50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ae54:	4631      	mov	r1, r6
 801ae56:	4628      	mov	r0, r5
 801ae58:	47b8      	blx	r7
 801ae5a:	3001      	adds	r0, #1
 801ae5c:	f43f af45 	beq.w	801acea <_printf_float+0xb6>
 801ae60:	f04f 0900 	mov.w	r9, #0
 801ae64:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae68:	f104 0a1a 	add.w	sl, r4, #26
 801ae6c:	45c8      	cmp	r8, r9
 801ae6e:	dc09      	bgt.n	801ae84 <_printf_float+0x250>
 801ae70:	6823      	ldr	r3, [r4, #0]
 801ae72:	079b      	lsls	r3, r3, #30
 801ae74:	f100 8103 	bmi.w	801b07e <_printf_float+0x44a>
 801ae78:	68e0      	ldr	r0, [r4, #12]
 801ae7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ae7c:	4298      	cmp	r0, r3
 801ae7e:	bfb8      	it	lt
 801ae80:	4618      	movlt	r0, r3
 801ae82:	e734      	b.n	801acee <_printf_float+0xba>
 801ae84:	2301      	movs	r3, #1
 801ae86:	4652      	mov	r2, sl
 801ae88:	4631      	mov	r1, r6
 801ae8a:	4628      	mov	r0, r5
 801ae8c:	47b8      	blx	r7
 801ae8e:	3001      	adds	r0, #1
 801ae90:	f43f af2b 	beq.w	801acea <_printf_float+0xb6>
 801ae94:	f109 0901 	add.w	r9, r9, #1
 801ae98:	e7e8      	b.n	801ae6c <_printf_float+0x238>
 801ae9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	dc39      	bgt.n	801af14 <_printf_float+0x2e0>
 801aea0:	4a1b      	ldr	r2, [pc, #108]	@ (801af10 <_printf_float+0x2dc>)
 801aea2:	2301      	movs	r3, #1
 801aea4:	4631      	mov	r1, r6
 801aea6:	4628      	mov	r0, r5
 801aea8:	47b8      	blx	r7
 801aeaa:	3001      	adds	r0, #1
 801aeac:	f43f af1d 	beq.w	801acea <_printf_float+0xb6>
 801aeb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801aeb4:	ea59 0303 	orrs.w	r3, r9, r3
 801aeb8:	d102      	bne.n	801aec0 <_printf_float+0x28c>
 801aeba:	6823      	ldr	r3, [r4, #0]
 801aebc:	07d9      	lsls	r1, r3, #31
 801aebe:	d5d7      	bpl.n	801ae70 <_printf_float+0x23c>
 801aec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aec4:	4631      	mov	r1, r6
 801aec6:	4628      	mov	r0, r5
 801aec8:	47b8      	blx	r7
 801aeca:	3001      	adds	r0, #1
 801aecc:	f43f af0d 	beq.w	801acea <_printf_float+0xb6>
 801aed0:	f04f 0a00 	mov.w	sl, #0
 801aed4:	f104 0b1a 	add.w	fp, r4, #26
 801aed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aeda:	425b      	negs	r3, r3
 801aedc:	4553      	cmp	r3, sl
 801aede:	dc01      	bgt.n	801aee4 <_printf_float+0x2b0>
 801aee0:	464b      	mov	r3, r9
 801aee2:	e793      	b.n	801ae0c <_printf_float+0x1d8>
 801aee4:	2301      	movs	r3, #1
 801aee6:	465a      	mov	r2, fp
 801aee8:	4631      	mov	r1, r6
 801aeea:	4628      	mov	r0, r5
 801aeec:	47b8      	blx	r7
 801aeee:	3001      	adds	r0, #1
 801aef0:	f43f aefb 	beq.w	801acea <_printf_float+0xb6>
 801aef4:	f10a 0a01 	add.w	sl, sl, #1
 801aef8:	e7ee      	b.n	801aed8 <_printf_float+0x2a4>
 801aefa:	bf00      	nop
 801aefc:	7fefffff 	.word	0x7fefffff
 801af00:	08022070 	.word	0x08022070
 801af04:	0802206c 	.word	0x0802206c
 801af08:	08022078 	.word	0x08022078
 801af0c:	08022074 	.word	0x08022074
 801af10:	080221ee 	.word	0x080221ee
 801af14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801af16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801af1a:	4553      	cmp	r3, sl
 801af1c:	bfa8      	it	ge
 801af1e:	4653      	movge	r3, sl
 801af20:	2b00      	cmp	r3, #0
 801af22:	4699      	mov	r9, r3
 801af24:	dc36      	bgt.n	801af94 <_printf_float+0x360>
 801af26:	f04f 0b00 	mov.w	fp, #0
 801af2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801af2e:	f104 021a 	add.w	r2, r4, #26
 801af32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801af34:	9306      	str	r3, [sp, #24]
 801af36:	eba3 0309 	sub.w	r3, r3, r9
 801af3a:	455b      	cmp	r3, fp
 801af3c:	dc31      	bgt.n	801afa2 <_printf_float+0x36e>
 801af3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af40:	459a      	cmp	sl, r3
 801af42:	dc3a      	bgt.n	801afba <_printf_float+0x386>
 801af44:	6823      	ldr	r3, [r4, #0]
 801af46:	07da      	lsls	r2, r3, #31
 801af48:	d437      	bmi.n	801afba <_printf_float+0x386>
 801af4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af4c:	ebaa 0903 	sub.w	r9, sl, r3
 801af50:	9b06      	ldr	r3, [sp, #24]
 801af52:	ebaa 0303 	sub.w	r3, sl, r3
 801af56:	4599      	cmp	r9, r3
 801af58:	bfa8      	it	ge
 801af5a:	4699      	movge	r9, r3
 801af5c:	f1b9 0f00 	cmp.w	r9, #0
 801af60:	dc33      	bgt.n	801afca <_printf_float+0x396>
 801af62:	f04f 0800 	mov.w	r8, #0
 801af66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801af6a:	f104 0b1a 	add.w	fp, r4, #26
 801af6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af70:	ebaa 0303 	sub.w	r3, sl, r3
 801af74:	eba3 0309 	sub.w	r3, r3, r9
 801af78:	4543      	cmp	r3, r8
 801af7a:	f77f af79 	ble.w	801ae70 <_printf_float+0x23c>
 801af7e:	2301      	movs	r3, #1
 801af80:	465a      	mov	r2, fp
 801af82:	4631      	mov	r1, r6
 801af84:	4628      	mov	r0, r5
 801af86:	47b8      	blx	r7
 801af88:	3001      	adds	r0, #1
 801af8a:	f43f aeae 	beq.w	801acea <_printf_float+0xb6>
 801af8e:	f108 0801 	add.w	r8, r8, #1
 801af92:	e7ec      	b.n	801af6e <_printf_float+0x33a>
 801af94:	4642      	mov	r2, r8
 801af96:	4631      	mov	r1, r6
 801af98:	4628      	mov	r0, r5
 801af9a:	47b8      	blx	r7
 801af9c:	3001      	adds	r0, #1
 801af9e:	d1c2      	bne.n	801af26 <_printf_float+0x2f2>
 801afa0:	e6a3      	b.n	801acea <_printf_float+0xb6>
 801afa2:	2301      	movs	r3, #1
 801afa4:	4631      	mov	r1, r6
 801afa6:	4628      	mov	r0, r5
 801afa8:	9206      	str	r2, [sp, #24]
 801afaa:	47b8      	blx	r7
 801afac:	3001      	adds	r0, #1
 801afae:	f43f ae9c 	beq.w	801acea <_printf_float+0xb6>
 801afb2:	9a06      	ldr	r2, [sp, #24]
 801afb4:	f10b 0b01 	add.w	fp, fp, #1
 801afb8:	e7bb      	b.n	801af32 <_printf_float+0x2fe>
 801afba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801afbe:	4631      	mov	r1, r6
 801afc0:	4628      	mov	r0, r5
 801afc2:	47b8      	blx	r7
 801afc4:	3001      	adds	r0, #1
 801afc6:	d1c0      	bne.n	801af4a <_printf_float+0x316>
 801afc8:	e68f      	b.n	801acea <_printf_float+0xb6>
 801afca:	9a06      	ldr	r2, [sp, #24]
 801afcc:	464b      	mov	r3, r9
 801afce:	4442      	add	r2, r8
 801afd0:	4631      	mov	r1, r6
 801afd2:	4628      	mov	r0, r5
 801afd4:	47b8      	blx	r7
 801afd6:	3001      	adds	r0, #1
 801afd8:	d1c3      	bne.n	801af62 <_printf_float+0x32e>
 801afda:	e686      	b.n	801acea <_printf_float+0xb6>
 801afdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801afe0:	f1ba 0f01 	cmp.w	sl, #1
 801afe4:	dc01      	bgt.n	801afea <_printf_float+0x3b6>
 801afe6:	07db      	lsls	r3, r3, #31
 801afe8:	d536      	bpl.n	801b058 <_printf_float+0x424>
 801afea:	2301      	movs	r3, #1
 801afec:	4642      	mov	r2, r8
 801afee:	4631      	mov	r1, r6
 801aff0:	4628      	mov	r0, r5
 801aff2:	47b8      	blx	r7
 801aff4:	3001      	adds	r0, #1
 801aff6:	f43f ae78 	beq.w	801acea <_printf_float+0xb6>
 801affa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801affe:	4631      	mov	r1, r6
 801b000:	4628      	mov	r0, r5
 801b002:	47b8      	blx	r7
 801b004:	3001      	adds	r0, #1
 801b006:	f43f ae70 	beq.w	801acea <_printf_float+0xb6>
 801b00a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801b00e:	2200      	movs	r2, #0
 801b010:	2300      	movs	r3, #0
 801b012:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b016:	f7e5 fd67 	bl	8000ae8 <__aeabi_dcmpeq>
 801b01a:	b9c0      	cbnz	r0, 801b04e <_printf_float+0x41a>
 801b01c:	4653      	mov	r3, sl
 801b01e:	f108 0201 	add.w	r2, r8, #1
 801b022:	4631      	mov	r1, r6
 801b024:	4628      	mov	r0, r5
 801b026:	47b8      	blx	r7
 801b028:	3001      	adds	r0, #1
 801b02a:	d10c      	bne.n	801b046 <_printf_float+0x412>
 801b02c:	e65d      	b.n	801acea <_printf_float+0xb6>
 801b02e:	2301      	movs	r3, #1
 801b030:	465a      	mov	r2, fp
 801b032:	4631      	mov	r1, r6
 801b034:	4628      	mov	r0, r5
 801b036:	47b8      	blx	r7
 801b038:	3001      	adds	r0, #1
 801b03a:	f43f ae56 	beq.w	801acea <_printf_float+0xb6>
 801b03e:	f108 0801 	add.w	r8, r8, #1
 801b042:	45d0      	cmp	r8, sl
 801b044:	dbf3      	blt.n	801b02e <_printf_float+0x3fa>
 801b046:	464b      	mov	r3, r9
 801b048:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801b04c:	e6df      	b.n	801ae0e <_printf_float+0x1da>
 801b04e:	f04f 0800 	mov.w	r8, #0
 801b052:	f104 0b1a 	add.w	fp, r4, #26
 801b056:	e7f4      	b.n	801b042 <_printf_float+0x40e>
 801b058:	2301      	movs	r3, #1
 801b05a:	4642      	mov	r2, r8
 801b05c:	e7e1      	b.n	801b022 <_printf_float+0x3ee>
 801b05e:	2301      	movs	r3, #1
 801b060:	464a      	mov	r2, r9
 801b062:	4631      	mov	r1, r6
 801b064:	4628      	mov	r0, r5
 801b066:	47b8      	blx	r7
 801b068:	3001      	adds	r0, #1
 801b06a:	f43f ae3e 	beq.w	801acea <_printf_float+0xb6>
 801b06e:	f108 0801 	add.w	r8, r8, #1
 801b072:	68e3      	ldr	r3, [r4, #12]
 801b074:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b076:	1a5b      	subs	r3, r3, r1
 801b078:	4543      	cmp	r3, r8
 801b07a:	dcf0      	bgt.n	801b05e <_printf_float+0x42a>
 801b07c:	e6fc      	b.n	801ae78 <_printf_float+0x244>
 801b07e:	f04f 0800 	mov.w	r8, #0
 801b082:	f104 0919 	add.w	r9, r4, #25
 801b086:	e7f4      	b.n	801b072 <_printf_float+0x43e>

0801b088 <__sfputc_r>:
 801b088:	6893      	ldr	r3, [r2, #8]
 801b08a:	3b01      	subs	r3, #1
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	b410      	push	{r4}
 801b090:	6093      	str	r3, [r2, #8]
 801b092:	da08      	bge.n	801b0a6 <__sfputc_r+0x1e>
 801b094:	6994      	ldr	r4, [r2, #24]
 801b096:	42a3      	cmp	r3, r4
 801b098:	db01      	blt.n	801b09e <__sfputc_r+0x16>
 801b09a:	290a      	cmp	r1, #10
 801b09c:	d103      	bne.n	801b0a6 <__sfputc_r+0x1e>
 801b09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0a2:	f000 bee1 	b.w	801be68 <__swbuf_r>
 801b0a6:	6813      	ldr	r3, [r2, #0]
 801b0a8:	1c58      	adds	r0, r3, #1
 801b0aa:	6010      	str	r0, [r2, #0]
 801b0ac:	7019      	strb	r1, [r3, #0]
 801b0ae:	4608      	mov	r0, r1
 801b0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0b4:	4770      	bx	lr

0801b0b6 <__sfputs_r>:
 801b0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0b8:	4606      	mov	r6, r0
 801b0ba:	460f      	mov	r7, r1
 801b0bc:	4614      	mov	r4, r2
 801b0be:	18d5      	adds	r5, r2, r3
 801b0c0:	42ac      	cmp	r4, r5
 801b0c2:	d101      	bne.n	801b0c8 <__sfputs_r+0x12>
 801b0c4:	2000      	movs	r0, #0
 801b0c6:	e007      	b.n	801b0d8 <__sfputs_r+0x22>
 801b0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0cc:	463a      	mov	r2, r7
 801b0ce:	4630      	mov	r0, r6
 801b0d0:	f7ff ffda 	bl	801b088 <__sfputc_r>
 801b0d4:	1c43      	adds	r3, r0, #1
 801b0d6:	d1f3      	bne.n	801b0c0 <__sfputs_r+0xa>
 801b0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b0dc <_vfiprintf_r>:
 801b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e0:	460d      	mov	r5, r1
 801b0e2:	b09d      	sub	sp, #116	@ 0x74
 801b0e4:	4614      	mov	r4, r2
 801b0e6:	4698      	mov	r8, r3
 801b0e8:	4606      	mov	r6, r0
 801b0ea:	b118      	cbz	r0, 801b0f4 <_vfiprintf_r+0x18>
 801b0ec:	6a03      	ldr	r3, [r0, #32]
 801b0ee:	b90b      	cbnz	r3, 801b0f4 <_vfiprintf_r+0x18>
 801b0f0:	f000 fd3c 	bl	801bb6c <__sinit>
 801b0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b0f6:	07d9      	lsls	r1, r3, #31
 801b0f8:	d405      	bmi.n	801b106 <_vfiprintf_r+0x2a>
 801b0fa:	89ab      	ldrh	r3, [r5, #12]
 801b0fc:	059a      	lsls	r2, r3, #22
 801b0fe:	d402      	bmi.n	801b106 <_vfiprintf_r+0x2a>
 801b100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b102:	f001 f84c 	bl	801c19e <__retarget_lock_acquire_recursive>
 801b106:	89ab      	ldrh	r3, [r5, #12]
 801b108:	071b      	lsls	r3, r3, #28
 801b10a:	d501      	bpl.n	801b110 <_vfiprintf_r+0x34>
 801b10c:	692b      	ldr	r3, [r5, #16]
 801b10e:	b99b      	cbnz	r3, 801b138 <_vfiprintf_r+0x5c>
 801b110:	4629      	mov	r1, r5
 801b112:	4630      	mov	r0, r6
 801b114:	f000 fee6 	bl	801bee4 <__swsetup_r>
 801b118:	b170      	cbz	r0, 801b138 <_vfiprintf_r+0x5c>
 801b11a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b11c:	07dc      	lsls	r4, r3, #31
 801b11e:	d504      	bpl.n	801b12a <_vfiprintf_r+0x4e>
 801b120:	f04f 30ff 	mov.w	r0, #4294967295
 801b124:	b01d      	add	sp, #116	@ 0x74
 801b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b12a:	89ab      	ldrh	r3, [r5, #12]
 801b12c:	0598      	lsls	r0, r3, #22
 801b12e:	d4f7      	bmi.n	801b120 <_vfiprintf_r+0x44>
 801b130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b132:	f001 f835 	bl	801c1a0 <__retarget_lock_release_recursive>
 801b136:	e7f3      	b.n	801b120 <_vfiprintf_r+0x44>
 801b138:	2300      	movs	r3, #0
 801b13a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b13c:	2320      	movs	r3, #32
 801b13e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b142:	f8cd 800c 	str.w	r8, [sp, #12]
 801b146:	2330      	movs	r3, #48	@ 0x30
 801b148:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b2f8 <_vfiprintf_r+0x21c>
 801b14c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b150:	f04f 0901 	mov.w	r9, #1
 801b154:	4623      	mov	r3, r4
 801b156:	469a      	mov	sl, r3
 801b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b15c:	b10a      	cbz	r2, 801b162 <_vfiprintf_r+0x86>
 801b15e:	2a25      	cmp	r2, #37	@ 0x25
 801b160:	d1f9      	bne.n	801b156 <_vfiprintf_r+0x7a>
 801b162:	ebba 0b04 	subs.w	fp, sl, r4
 801b166:	d00b      	beq.n	801b180 <_vfiprintf_r+0xa4>
 801b168:	465b      	mov	r3, fp
 801b16a:	4622      	mov	r2, r4
 801b16c:	4629      	mov	r1, r5
 801b16e:	4630      	mov	r0, r6
 801b170:	f7ff ffa1 	bl	801b0b6 <__sfputs_r>
 801b174:	3001      	adds	r0, #1
 801b176:	f000 80a7 	beq.w	801b2c8 <_vfiprintf_r+0x1ec>
 801b17a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b17c:	445a      	add	r2, fp
 801b17e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b180:	f89a 3000 	ldrb.w	r3, [sl]
 801b184:	2b00      	cmp	r3, #0
 801b186:	f000 809f 	beq.w	801b2c8 <_vfiprintf_r+0x1ec>
 801b18a:	2300      	movs	r3, #0
 801b18c:	f04f 32ff 	mov.w	r2, #4294967295
 801b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b194:	f10a 0a01 	add.w	sl, sl, #1
 801b198:	9304      	str	r3, [sp, #16]
 801b19a:	9307      	str	r3, [sp, #28]
 801b19c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b1a0:	931a      	str	r3, [sp, #104]	@ 0x68
 801b1a2:	4654      	mov	r4, sl
 801b1a4:	2205      	movs	r2, #5
 801b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1aa:	4853      	ldr	r0, [pc, #332]	@ (801b2f8 <_vfiprintf_r+0x21c>)
 801b1ac:	f7e5 f820 	bl	80001f0 <memchr>
 801b1b0:	9a04      	ldr	r2, [sp, #16]
 801b1b2:	b9d8      	cbnz	r0, 801b1ec <_vfiprintf_r+0x110>
 801b1b4:	06d1      	lsls	r1, r2, #27
 801b1b6:	bf44      	itt	mi
 801b1b8:	2320      	movmi	r3, #32
 801b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1be:	0713      	lsls	r3, r2, #28
 801b1c0:	bf44      	itt	mi
 801b1c2:	232b      	movmi	r3, #43	@ 0x2b
 801b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 801b1cc:	2b2a      	cmp	r3, #42	@ 0x2a
 801b1ce:	d015      	beq.n	801b1fc <_vfiprintf_r+0x120>
 801b1d0:	9a07      	ldr	r2, [sp, #28]
 801b1d2:	4654      	mov	r4, sl
 801b1d4:	2000      	movs	r0, #0
 801b1d6:	f04f 0c0a 	mov.w	ip, #10
 801b1da:	4621      	mov	r1, r4
 801b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b1e0:	3b30      	subs	r3, #48	@ 0x30
 801b1e2:	2b09      	cmp	r3, #9
 801b1e4:	d94b      	bls.n	801b27e <_vfiprintf_r+0x1a2>
 801b1e6:	b1b0      	cbz	r0, 801b216 <_vfiprintf_r+0x13a>
 801b1e8:	9207      	str	r2, [sp, #28]
 801b1ea:	e014      	b.n	801b216 <_vfiprintf_r+0x13a>
 801b1ec:	eba0 0308 	sub.w	r3, r0, r8
 801b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 801b1f4:	4313      	orrs	r3, r2
 801b1f6:	9304      	str	r3, [sp, #16]
 801b1f8:	46a2      	mov	sl, r4
 801b1fa:	e7d2      	b.n	801b1a2 <_vfiprintf_r+0xc6>
 801b1fc:	9b03      	ldr	r3, [sp, #12]
 801b1fe:	1d19      	adds	r1, r3, #4
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	9103      	str	r1, [sp, #12]
 801b204:	2b00      	cmp	r3, #0
 801b206:	bfbb      	ittet	lt
 801b208:	425b      	neglt	r3, r3
 801b20a:	f042 0202 	orrlt.w	r2, r2, #2
 801b20e:	9307      	strge	r3, [sp, #28]
 801b210:	9307      	strlt	r3, [sp, #28]
 801b212:	bfb8      	it	lt
 801b214:	9204      	strlt	r2, [sp, #16]
 801b216:	7823      	ldrb	r3, [r4, #0]
 801b218:	2b2e      	cmp	r3, #46	@ 0x2e
 801b21a:	d10a      	bne.n	801b232 <_vfiprintf_r+0x156>
 801b21c:	7863      	ldrb	r3, [r4, #1]
 801b21e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b220:	d132      	bne.n	801b288 <_vfiprintf_r+0x1ac>
 801b222:	9b03      	ldr	r3, [sp, #12]
 801b224:	1d1a      	adds	r2, r3, #4
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	9203      	str	r2, [sp, #12]
 801b22a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b22e:	3402      	adds	r4, #2
 801b230:	9305      	str	r3, [sp, #20]
 801b232:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b308 <_vfiprintf_r+0x22c>
 801b236:	7821      	ldrb	r1, [r4, #0]
 801b238:	2203      	movs	r2, #3
 801b23a:	4650      	mov	r0, sl
 801b23c:	f7e4 ffd8 	bl	80001f0 <memchr>
 801b240:	b138      	cbz	r0, 801b252 <_vfiprintf_r+0x176>
 801b242:	9b04      	ldr	r3, [sp, #16]
 801b244:	eba0 000a 	sub.w	r0, r0, sl
 801b248:	2240      	movs	r2, #64	@ 0x40
 801b24a:	4082      	lsls	r2, r0
 801b24c:	4313      	orrs	r3, r2
 801b24e:	3401      	adds	r4, #1
 801b250:	9304      	str	r3, [sp, #16]
 801b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b256:	4829      	ldr	r0, [pc, #164]	@ (801b2fc <_vfiprintf_r+0x220>)
 801b258:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b25c:	2206      	movs	r2, #6
 801b25e:	f7e4 ffc7 	bl	80001f0 <memchr>
 801b262:	2800      	cmp	r0, #0
 801b264:	d03f      	beq.n	801b2e6 <_vfiprintf_r+0x20a>
 801b266:	4b26      	ldr	r3, [pc, #152]	@ (801b300 <_vfiprintf_r+0x224>)
 801b268:	bb1b      	cbnz	r3, 801b2b2 <_vfiprintf_r+0x1d6>
 801b26a:	9b03      	ldr	r3, [sp, #12]
 801b26c:	3307      	adds	r3, #7
 801b26e:	f023 0307 	bic.w	r3, r3, #7
 801b272:	3308      	adds	r3, #8
 801b274:	9303      	str	r3, [sp, #12]
 801b276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b278:	443b      	add	r3, r7
 801b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b27c:	e76a      	b.n	801b154 <_vfiprintf_r+0x78>
 801b27e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b282:	460c      	mov	r4, r1
 801b284:	2001      	movs	r0, #1
 801b286:	e7a8      	b.n	801b1da <_vfiprintf_r+0xfe>
 801b288:	2300      	movs	r3, #0
 801b28a:	3401      	adds	r4, #1
 801b28c:	9305      	str	r3, [sp, #20]
 801b28e:	4619      	mov	r1, r3
 801b290:	f04f 0c0a 	mov.w	ip, #10
 801b294:	4620      	mov	r0, r4
 801b296:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b29a:	3a30      	subs	r2, #48	@ 0x30
 801b29c:	2a09      	cmp	r2, #9
 801b29e:	d903      	bls.n	801b2a8 <_vfiprintf_r+0x1cc>
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d0c6      	beq.n	801b232 <_vfiprintf_r+0x156>
 801b2a4:	9105      	str	r1, [sp, #20]
 801b2a6:	e7c4      	b.n	801b232 <_vfiprintf_r+0x156>
 801b2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2ac:	4604      	mov	r4, r0
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	e7f0      	b.n	801b294 <_vfiprintf_r+0x1b8>
 801b2b2:	ab03      	add	r3, sp, #12
 801b2b4:	9300      	str	r3, [sp, #0]
 801b2b6:	462a      	mov	r2, r5
 801b2b8:	4b12      	ldr	r3, [pc, #72]	@ (801b304 <_vfiprintf_r+0x228>)
 801b2ba:	a904      	add	r1, sp, #16
 801b2bc:	4630      	mov	r0, r6
 801b2be:	f7ff fcb9 	bl	801ac34 <_printf_float>
 801b2c2:	4607      	mov	r7, r0
 801b2c4:	1c78      	adds	r0, r7, #1
 801b2c6:	d1d6      	bne.n	801b276 <_vfiprintf_r+0x19a>
 801b2c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2ca:	07d9      	lsls	r1, r3, #31
 801b2cc:	d405      	bmi.n	801b2da <_vfiprintf_r+0x1fe>
 801b2ce:	89ab      	ldrh	r3, [r5, #12]
 801b2d0:	059a      	lsls	r2, r3, #22
 801b2d2:	d402      	bmi.n	801b2da <_vfiprintf_r+0x1fe>
 801b2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2d6:	f000 ff63 	bl	801c1a0 <__retarget_lock_release_recursive>
 801b2da:	89ab      	ldrh	r3, [r5, #12]
 801b2dc:	065b      	lsls	r3, r3, #25
 801b2de:	f53f af1f 	bmi.w	801b120 <_vfiprintf_r+0x44>
 801b2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b2e4:	e71e      	b.n	801b124 <_vfiprintf_r+0x48>
 801b2e6:	ab03      	add	r3, sp, #12
 801b2e8:	9300      	str	r3, [sp, #0]
 801b2ea:	462a      	mov	r2, r5
 801b2ec:	4b05      	ldr	r3, [pc, #20]	@ (801b304 <_vfiprintf_r+0x228>)
 801b2ee:	a904      	add	r1, sp, #16
 801b2f0:	4630      	mov	r0, r6
 801b2f2:	f000 f883 	bl	801b3fc <_printf_i>
 801b2f6:	e7e4      	b.n	801b2c2 <_vfiprintf_r+0x1e6>
 801b2f8:	0802207c 	.word	0x0802207c
 801b2fc:	08022086 	.word	0x08022086
 801b300:	0801ac35 	.word	0x0801ac35
 801b304:	0801b0b7 	.word	0x0801b0b7
 801b308:	08022082 	.word	0x08022082

0801b30c <vfiprintf>:
 801b30c:	4613      	mov	r3, r2
 801b30e:	460a      	mov	r2, r1
 801b310:	4601      	mov	r1, r0
 801b312:	4802      	ldr	r0, [pc, #8]	@ (801b31c <vfiprintf+0x10>)
 801b314:	6800      	ldr	r0, [r0, #0]
 801b316:	f7ff bee1 	b.w	801b0dc <_vfiprintf_r>
 801b31a:	bf00      	nop
 801b31c:	20000160 	.word	0x20000160

0801b320 <_printf_common>:
 801b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b324:	4616      	mov	r6, r2
 801b326:	4698      	mov	r8, r3
 801b328:	688a      	ldr	r2, [r1, #8]
 801b32a:	690b      	ldr	r3, [r1, #16]
 801b32c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b330:	4293      	cmp	r3, r2
 801b332:	bfb8      	it	lt
 801b334:	4613      	movlt	r3, r2
 801b336:	6033      	str	r3, [r6, #0]
 801b338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b33c:	4607      	mov	r7, r0
 801b33e:	460c      	mov	r4, r1
 801b340:	b10a      	cbz	r2, 801b346 <_printf_common+0x26>
 801b342:	3301      	adds	r3, #1
 801b344:	6033      	str	r3, [r6, #0]
 801b346:	6823      	ldr	r3, [r4, #0]
 801b348:	0699      	lsls	r1, r3, #26
 801b34a:	bf42      	ittt	mi
 801b34c:	6833      	ldrmi	r3, [r6, #0]
 801b34e:	3302      	addmi	r3, #2
 801b350:	6033      	strmi	r3, [r6, #0]
 801b352:	6825      	ldr	r5, [r4, #0]
 801b354:	f015 0506 	ands.w	r5, r5, #6
 801b358:	d106      	bne.n	801b368 <_printf_common+0x48>
 801b35a:	f104 0a19 	add.w	sl, r4, #25
 801b35e:	68e3      	ldr	r3, [r4, #12]
 801b360:	6832      	ldr	r2, [r6, #0]
 801b362:	1a9b      	subs	r3, r3, r2
 801b364:	42ab      	cmp	r3, r5
 801b366:	dc26      	bgt.n	801b3b6 <_printf_common+0x96>
 801b368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b36c:	6822      	ldr	r2, [r4, #0]
 801b36e:	3b00      	subs	r3, #0
 801b370:	bf18      	it	ne
 801b372:	2301      	movne	r3, #1
 801b374:	0692      	lsls	r2, r2, #26
 801b376:	d42b      	bmi.n	801b3d0 <_printf_common+0xb0>
 801b378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b37c:	4641      	mov	r1, r8
 801b37e:	4638      	mov	r0, r7
 801b380:	47c8      	blx	r9
 801b382:	3001      	adds	r0, #1
 801b384:	d01e      	beq.n	801b3c4 <_printf_common+0xa4>
 801b386:	6823      	ldr	r3, [r4, #0]
 801b388:	6922      	ldr	r2, [r4, #16]
 801b38a:	f003 0306 	and.w	r3, r3, #6
 801b38e:	2b04      	cmp	r3, #4
 801b390:	bf02      	ittt	eq
 801b392:	68e5      	ldreq	r5, [r4, #12]
 801b394:	6833      	ldreq	r3, [r6, #0]
 801b396:	1aed      	subeq	r5, r5, r3
 801b398:	68a3      	ldr	r3, [r4, #8]
 801b39a:	bf0c      	ite	eq
 801b39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b3a0:	2500      	movne	r5, #0
 801b3a2:	4293      	cmp	r3, r2
 801b3a4:	bfc4      	itt	gt
 801b3a6:	1a9b      	subgt	r3, r3, r2
 801b3a8:	18ed      	addgt	r5, r5, r3
 801b3aa:	2600      	movs	r6, #0
 801b3ac:	341a      	adds	r4, #26
 801b3ae:	42b5      	cmp	r5, r6
 801b3b0:	d11a      	bne.n	801b3e8 <_printf_common+0xc8>
 801b3b2:	2000      	movs	r0, #0
 801b3b4:	e008      	b.n	801b3c8 <_printf_common+0xa8>
 801b3b6:	2301      	movs	r3, #1
 801b3b8:	4652      	mov	r2, sl
 801b3ba:	4641      	mov	r1, r8
 801b3bc:	4638      	mov	r0, r7
 801b3be:	47c8      	blx	r9
 801b3c0:	3001      	adds	r0, #1
 801b3c2:	d103      	bne.n	801b3cc <_printf_common+0xac>
 801b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3cc:	3501      	adds	r5, #1
 801b3ce:	e7c6      	b.n	801b35e <_printf_common+0x3e>
 801b3d0:	18e1      	adds	r1, r4, r3
 801b3d2:	1c5a      	adds	r2, r3, #1
 801b3d4:	2030      	movs	r0, #48	@ 0x30
 801b3d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b3da:	4422      	add	r2, r4
 801b3dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b3e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b3e4:	3302      	adds	r3, #2
 801b3e6:	e7c7      	b.n	801b378 <_printf_common+0x58>
 801b3e8:	2301      	movs	r3, #1
 801b3ea:	4622      	mov	r2, r4
 801b3ec:	4641      	mov	r1, r8
 801b3ee:	4638      	mov	r0, r7
 801b3f0:	47c8      	blx	r9
 801b3f2:	3001      	adds	r0, #1
 801b3f4:	d0e6      	beq.n	801b3c4 <_printf_common+0xa4>
 801b3f6:	3601      	adds	r6, #1
 801b3f8:	e7d9      	b.n	801b3ae <_printf_common+0x8e>
	...

0801b3fc <_printf_i>:
 801b3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b400:	7e0f      	ldrb	r7, [r1, #24]
 801b402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b404:	2f78      	cmp	r7, #120	@ 0x78
 801b406:	4691      	mov	r9, r2
 801b408:	4680      	mov	r8, r0
 801b40a:	460c      	mov	r4, r1
 801b40c:	469a      	mov	sl, r3
 801b40e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b412:	d807      	bhi.n	801b424 <_printf_i+0x28>
 801b414:	2f62      	cmp	r7, #98	@ 0x62
 801b416:	d80a      	bhi.n	801b42e <_printf_i+0x32>
 801b418:	2f00      	cmp	r7, #0
 801b41a:	f000 80d1 	beq.w	801b5c0 <_printf_i+0x1c4>
 801b41e:	2f58      	cmp	r7, #88	@ 0x58
 801b420:	f000 80b8 	beq.w	801b594 <_printf_i+0x198>
 801b424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b42c:	e03a      	b.n	801b4a4 <_printf_i+0xa8>
 801b42e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b432:	2b15      	cmp	r3, #21
 801b434:	d8f6      	bhi.n	801b424 <_printf_i+0x28>
 801b436:	a101      	add	r1, pc, #4	@ (adr r1, 801b43c <_printf_i+0x40>)
 801b438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b43c:	0801b495 	.word	0x0801b495
 801b440:	0801b4a9 	.word	0x0801b4a9
 801b444:	0801b425 	.word	0x0801b425
 801b448:	0801b425 	.word	0x0801b425
 801b44c:	0801b425 	.word	0x0801b425
 801b450:	0801b425 	.word	0x0801b425
 801b454:	0801b4a9 	.word	0x0801b4a9
 801b458:	0801b425 	.word	0x0801b425
 801b45c:	0801b425 	.word	0x0801b425
 801b460:	0801b425 	.word	0x0801b425
 801b464:	0801b425 	.word	0x0801b425
 801b468:	0801b5a7 	.word	0x0801b5a7
 801b46c:	0801b4d3 	.word	0x0801b4d3
 801b470:	0801b561 	.word	0x0801b561
 801b474:	0801b425 	.word	0x0801b425
 801b478:	0801b425 	.word	0x0801b425
 801b47c:	0801b5c9 	.word	0x0801b5c9
 801b480:	0801b425 	.word	0x0801b425
 801b484:	0801b4d3 	.word	0x0801b4d3
 801b488:	0801b425 	.word	0x0801b425
 801b48c:	0801b425 	.word	0x0801b425
 801b490:	0801b569 	.word	0x0801b569
 801b494:	6833      	ldr	r3, [r6, #0]
 801b496:	1d1a      	adds	r2, r3, #4
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	6032      	str	r2, [r6, #0]
 801b49c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b4a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	e09c      	b.n	801b5e2 <_printf_i+0x1e6>
 801b4a8:	6833      	ldr	r3, [r6, #0]
 801b4aa:	6820      	ldr	r0, [r4, #0]
 801b4ac:	1d19      	adds	r1, r3, #4
 801b4ae:	6031      	str	r1, [r6, #0]
 801b4b0:	0606      	lsls	r6, r0, #24
 801b4b2:	d501      	bpl.n	801b4b8 <_printf_i+0xbc>
 801b4b4:	681d      	ldr	r5, [r3, #0]
 801b4b6:	e003      	b.n	801b4c0 <_printf_i+0xc4>
 801b4b8:	0645      	lsls	r5, r0, #25
 801b4ba:	d5fb      	bpl.n	801b4b4 <_printf_i+0xb8>
 801b4bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b4c0:	2d00      	cmp	r5, #0
 801b4c2:	da03      	bge.n	801b4cc <_printf_i+0xd0>
 801b4c4:	232d      	movs	r3, #45	@ 0x2d
 801b4c6:	426d      	negs	r5, r5
 801b4c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b4cc:	4858      	ldr	r0, [pc, #352]	@ (801b630 <_printf_i+0x234>)
 801b4ce:	230a      	movs	r3, #10
 801b4d0:	e011      	b.n	801b4f6 <_printf_i+0xfa>
 801b4d2:	6821      	ldr	r1, [r4, #0]
 801b4d4:	6833      	ldr	r3, [r6, #0]
 801b4d6:	0608      	lsls	r0, r1, #24
 801b4d8:	f853 5b04 	ldr.w	r5, [r3], #4
 801b4dc:	d402      	bmi.n	801b4e4 <_printf_i+0xe8>
 801b4de:	0649      	lsls	r1, r1, #25
 801b4e0:	bf48      	it	mi
 801b4e2:	b2ad      	uxthmi	r5, r5
 801b4e4:	2f6f      	cmp	r7, #111	@ 0x6f
 801b4e6:	4852      	ldr	r0, [pc, #328]	@ (801b630 <_printf_i+0x234>)
 801b4e8:	6033      	str	r3, [r6, #0]
 801b4ea:	bf14      	ite	ne
 801b4ec:	230a      	movne	r3, #10
 801b4ee:	2308      	moveq	r3, #8
 801b4f0:	2100      	movs	r1, #0
 801b4f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b4f6:	6866      	ldr	r6, [r4, #4]
 801b4f8:	60a6      	str	r6, [r4, #8]
 801b4fa:	2e00      	cmp	r6, #0
 801b4fc:	db05      	blt.n	801b50a <_printf_i+0x10e>
 801b4fe:	6821      	ldr	r1, [r4, #0]
 801b500:	432e      	orrs	r6, r5
 801b502:	f021 0104 	bic.w	r1, r1, #4
 801b506:	6021      	str	r1, [r4, #0]
 801b508:	d04b      	beq.n	801b5a2 <_printf_i+0x1a6>
 801b50a:	4616      	mov	r6, r2
 801b50c:	fbb5 f1f3 	udiv	r1, r5, r3
 801b510:	fb03 5711 	mls	r7, r3, r1, r5
 801b514:	5dc7      	ldrb	r7, [r0, r7]
 801b516:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b51a:	462f      	mov	r7, r5
 801b51c:	42bb      	cmp	r3, r7
 801b51e:	460d      	mov	r5, r1
 801b520:	d9f4      	bls.n	801b50c <_printf_i+0x110>
 801b522:	2b08      	cmp	r3, #8
 801b524:	d10b      	bne.n	801b53e <_printf_i+0x142>
 801b526:	6823      	ldr	r3, [r4, #0]
 801b528:	07df      	lsls	r7, r3, #31
 801b52a:	d508      	bpl.n	801b53e <_printf_i+0x142>
 801b52c:	6923      	ldr	r3, [r4, #16]
 801b52e:	6861      	ldr	r1, [r4, #4]
 801b530:	4299      	cmp	r1, r3
 801b532:	bfde      	ittt	le
 801b534:	2330      	movle	r3, #48	@ 0x30
 801b536:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b53a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b53e:	1b92      	subs	r2, r2, r6
 801b540:	6122      	str	r2, [r4, #16]
 801b542:	f8cd a000 	str.w	sl, [sp]
 801b546:	464b      	mov	r3, r9
 801b548:	aa03      	add	r2, sp, #12
 801b54a:	4621      	mov	r1, r4
 801b54c:	4640      	mov	r0, r8
 801b54e:	f7ff fee7 	bl	801b320 <_printf_common>
 801b552:	3001      	adds	r0, #1
 801b554:	d14a      	bne.n	801b5ec <_printf_i+0x1f0>
 801b556:	f04f 30ff 	mov.w	r0, #4294967295
 801b55a:	b004      	add	sp, #16
 801b55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b560:	6823      	ldr	r3, [r4, #0]
 801b562:	f043 0320 	orr.w	r3, r3, #32
 801b566:	6023      	str	r3, [r4, #0]
 801b568:	4832      	ldr	r0, [pc, #200]	@ (801b634 <_printf_i+0x238>)
 801b56a:	2778      	movs	r7, #120	@ 0x78
 801b56c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b570:	6823      	ldr	r3, [r4, #0]
 801b572:	6831      	ldr	r1, [r6, #0]
 801b574:	061f      	lsls	r7, r3, #24
 801b576:	f851 5b04 	ldr.w	r5, [r1], #4
 801b57a:	d402      	bmi.n	801b582 <_printf_i+0x186>
 801b57c:	065f      	lsls	r7, r3, #25
 801b57e:	bf48      	it	mi
 801b580:	b2ad      	uxthmi	r5, r5
 801b582:	6031      	str	r1, [r6, #0]
 801b584:	07d9      	lsls	r1, r3, #31
 801b586:	bf44      	itt	mi
 801b588:	f043 0320 	orrmi.w	r3, r3, #32
 801b58c:	6023      	strmi	r3, [r4, #0]
 801b58e:	b11d      	cbz	r5, 801b598 <_printf_i+0x19c>
 801b590:	2310      	movs	r3, #16
 801b592:	e7ad      	b.n	801b4f0 <_printf_i+0xf4>
 801b594:	4826      	ldr	r0, [pc, #152]	@ (801b630 <_printf_i+0x234>)
 801b596:	e7e9      	b.n	801b56c <_printf_i+0x170>
 801b598:	6823      	ldr	r3, [r4, #0]
 801b59a:	f023 0320 	bic.w	r3, r3, #32
 801b59e:	6023      	str	r3, [r4, #0]
 801b5a0:	e7f6      	b.n	801b590 <_printf_i+0x194>
 801b5a2:	4616      	mov	r6, r2
 801b5a4:	e7bd      	b.n	801b522 <_printf_i+0x126>
 801b5a6:	6833      	ldr	r3, [r6, #0]
 801b5a8:	6825      	ldr	r5, [r4, #0]
 801b5aa:	6961      	ldr	r1, [r4, #20]
 801b5ac:	1d18      	adds	r0, r3, #4
 801b5ae:	6030      	str	r0, [r6, #0]
 801b5b0:	062e      	lsls	r6, r5, #24
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	d501      	bpl.n	801b5ba <_printf_i+0x1be>
 801b5b6:	6019      	str	r1, [r3, #0]
 801b5b8:	e002      	b.n	801b5c0 <_printf_i+0x1c4>
 801b5ba:	0668      	lsls	r0, r5, #25
 801b5bc:	d5fb      	bpl.n	801b5b6 <_printf_i+0x1ba>
 801b5be:	8019      	strh	r1, [r3, #0]
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	6123      	str	r3, [r4, #16]
 801b5c4:	4616      	mov	r6, r2
 801b5c6:	e7bc      	b.n	801b542 <_printf_i+0x146>
 801b5c8:	6833      	ldr	r3, [r6, #0]
 801b5ca:	1d1a      	adds	r2, r3, #4
 801b5cc:	6032      	str	r2, [r6, #0]
 801b5ce:	681e      	ldr	r6, [r3, #0]
 801b5d0:	6862      	ldr	r2, [r4, #4]
 801b5d2:	2100      	movs	r1, #0
 801b5d4:	4630      	mov	r0, r6
 801b5d6:	f7e4 fe0b 	bl	80001f0 <memchr>
 801b5da:	b108      	cbz	r0, 801b5e0 <_printf_i+0x1e4>
 801b5dc:	1b80      	subs	r0, r0, r6
 801b5de:	6060      	str	r0, [r4, #4]
 801b5e0:	6863      	ldr	r3, [r4, #4]
 801b5e2:	6123      	str	r3, [r4, #16]
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b5ea:	e7aa      	b.n	801b542 <_printf_i+0x146>
 801b5ec:	6923      	ldr	r3, [r4, #16]
 801b5ee:	4632      	mov	r2, r6
 801b5f0:	4649      	mov	r1, r9
 801b5f2:	4640      	mov	r0, r8
 801b5f4:	47d0      	blx	sl
 801b5f6:	3001      	adds	r0, #1
 801b5f8:	d0ad      	beq.n	801b556 <_printf_i+0x15a>
 801b5fa:	6823      	ldr	r3, [r4, #0]
 801b5fc:	079b      	lsls	r3, r3, #30
 801b5fe:	d413      	bmi.n	801b628 <_printf_i+0x22c>
 801b600:	68e0      	ldr	r0, [r4, #12]
 801b602:	9b03      	ldr	r3, [sp, #12]
 801b604:	4298      	cmp	r0, r3
 801b606:	bfb8      	it	lt
 801b608:	4618      	movlt	r0, r3
 801b60a:	e7a6      	b.n	801b55a <_printf_i+0x15e>
 801b60c:	2301      	movs	r3, #1
 801b60e:	4632      	mov	r2, r6
 801b610:	4649      	mov	r1, r9
 801b612:	4640      	mov	r0, r8
 801b614:	47d0      	blx	sl
 801b616:	3001      	adds	r0, #1
 801b618:	d09d      	beq.n	801b556 <_printf_i+0x15a>
 801b61a:	3501      	adds	r5, #1
 801b61c:	68e3      	ldr	r3, [r4, #12]
 801b61e:	9903      	ldr	r1, [sp, #12]
 801b620:	1a5b      	subs	r3, r3, r1
 801b622:	42ab      	cmp	r3, r5
 801b624:	dcf2      	bgt.n	801b60c <_printf_i+0x210>
 801b626:	e7eb      	b.n	801b600 <_printf_i+0x204>
 801b628:	2500      	movs	r5, #0
 801b62a:	f104 0619 	add.w	r6, r4, #25
 801b62e:	e7f5      	b.n	801b61c <_printf_i+0x220>
 801b630:	0802208d 	.word	0x0802208d
 801b634:	0802209e 	.word	0x0802209e

0801b638 <_scanf_float>:
 801b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b63c:	b087      	sub	sp, #28
 801b63e:	4691      	mov	r9, r2
 801b640:	9303      	str	r3, [sp, #12]
 801b642:	688b      	ldr	r3, [r1, #8]
 801b644:	1e5a      	subs	r2, r3, #1
 801b646:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b64a:	bf81      	itttt	hi
 801b64c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b650:	eb03 0b05 	addhi.w	fp, r3, r5
 801b654:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b658:	608b      	strhi	r3, [r1, #8]
 801b65a:	680b      	ldr	r3, [r1, #0]
 801b65c:	460a      	mov	r2, r1
 801b65e:	f04f 0500 	mov.w	r5, #0
 801b662:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801b666:	f842 3b1c 	str.w	r3, [r2], #28
 801b66a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b66e:	4680      	mov	r8, r0
 801b670:	460c      	mov	r4, r1
 801b672:	bf98      	it	ls
 801b674:	f04f 0b00 	movls.w	fp, #0
 801b678:	9201      	str	r2, [sp, #4]
 801b67a:	4616      	mov	r6, r2
 801b67c:	46aa      	mov	sl, r5
 801b67e:	462f      	mov	r7, r5
 801b680:	9502      	str	r5, [sp, #8]
 801b682:	68a2      	ldr	r2, [r4, #8]
 801b684:	b15a      	cbz	r2, 801b69e <_scanf_float+0x66>
 801b686:	f8d9 3000 	ldr.w	r3, [r9]
 801b68a:	781b      	ldrb	r3, [r3, #0]
 801b68c:	2b4e      	cmp	r3, #78	@ 0x4e
 801b68e:	d863      	bhi.n	801b758 <_scanf_float+0x120>
 801b690:	2b40      	cmp	r3, #64	@ 0x40
 801b692:	d83b      	bhi.n	801b70c <_scanf_float+0xd4>
 801b694:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801b698:	b2c8      	uxtb	r0, r1
 801b69a:	280e      	cmp	r0, #14
 801b69c:	d939      	bls.n	801b712 <_scanf_float+0xda>
 801b69e:	b11f      	cbz	r7, 801b6a8 <_scanf_float+0x70>
 801b6a0:	6823      	ldr	r3, [r4, #0]
 801b6a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b6a6:	6023      	str	r3, [r4, #0]
 801b6a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6ac:	f1ba 0f01 	cmp.w	sl, #1
 801b6b0:	f200 8114 	bhi.w	801b8dc <_scanf_float+0x2a4>
 801b6b4:	9b01      	ldr	r3, [sp, #4]
 801b6b6:	429e      	cmp	r6, r3
 801b6b8:	f200 8105 	bhi.w	801b8c6 <_scanf_float+0x28e>
 801b6bc:	2001      	movs	r0, #1
 801b6be:	b007      	add	sp, #28
 801b6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6c4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801b6c8:	2a0d      	cmp	r2, #13
 801b6ca:	d8e8      	bhi.n	801b69e <_scanf_float+0x66>
 801b6cc:	a101      	add	r1, pc, #4	@ (adr r1, 801b6d4 <_scanf_float+0x9c>)
 801b6ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b6d2:	bf00      	nop
 801b6d4:	0801b81d 	.word	0x0801b81d
 801b6d8:	0801b69f 	.word	0x0801b69f
 801b6dc:	0801b69f 	.word	0x0801b69f
 801b6e0:	0801b69f 	.word	0x0801b69f
 801b6e4:	0801b879 	.word	0x0801b879
 801b6e8:	0801b853 	.word	0x0801b853
 801b6ec:	0801b69f 	.word	0x0801b69f
 801b6f0:	0801b69f 	.word	0x0801b69f
 801b6f4:	0801b82b 	.word	0x0801b82b
 801b6f8:	0801b69f 	.word	0x0801b69f
 801b6fc:	0801b69f 	.word	0x0801b69f
 801b700:	0801b69f 	.word	0x0801b69f
 801b704:	0801b69f 	.word	0x0801b69f
 801b708:	0801b7e7 	.word	0x0801b7e7
 801b70c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b710:	e7da      	b.n	801b6c8 <_scanf_float+0x90>
 801b712:	290e      	cmp	r1, #14
 801b714:	d8c3      	bhi.n	801b69e <_scanf_float+0x66>
 801b716:	a001      	add	r0, pc, #4	@ (adr r0, 801b71c <_scanf_float+0xe4>)
 801b718:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b71c:	0801b7d7 	.word	0x0801b7d7
 801b720:	0801b69f 	.word	0x0801b69f
 801b724:	0801b7d7 	.word	0x0801b7d7
 801b728:	0801b867 	.word	0x0801b867
 801b72c:	0801b69f 	.word	0x0801b69f
 801b730:	0801b779 	.word	0x0801b779
 801b734:	0801b7bd 	.word	0x0801b7bd
 801b738:	0801b7bd 	.word	0x0801b7bd
 801b73c:	0801b7bd 	.word	0x0801b7bd
 801b740:	0801b7bd 	.word	0x0801b7bd
 801b744:	0801b7bd 	.word	0x0801b7bd
 801b748:	0801b7bd 	.word	0x0801b7bd
 801b74c:	0801b7bd 	.word	0x0801b7bd
 801b750:	0801b7bd 	.word	0x0801b7bd
 801b754:	0801b7bd 	.word	0x0801b7bd
 801b758:	2b6e      	cmp	r3, #110	@ 0x6e
 801b75a:	d809      	bhi.n	801b770 <_scanf_float+0x138>
 801b75c:	2b60      	cmp	r3, #96	@ 0x60
 801b75e:	d8b1      	bhi.n	801b6c4 <_scanf_float+0x8c>
 801b760:	2b54      	cmp	r3, #84	@ 0x54
 801b762:	d07b      	beq.n	801b85c <_scanf_float+0x224>
 801b764:	2b59      	cmp	r3, #89	@ 0x59
 801b766:	d19a      	bne.n	801b69e <_scanf_float+0x66>
 801b768:	2d07      	cmp	r5, #7
 801b76a:	d198      	bne.n	801b69e <_scanf_float+0x66>
 801b76c:	2508      	movs	r5, #8
 801b76e:	e02f      	b.n	801b7d0 <_scanf_float+0x198>
 801b770:	2b74      	cmp	r3, #116	@ 0x74
 801b772:	d073      	beq.n	801b85c <_scanf_float+0x224>
 801b774:	2b79      	cmp	r3, #121	@ 0x79
 801b776:	e7f6      	b.n	801b766 <_scanf_float+0x12e>
 801b778:	6821      	ldr	r1, [r4, #0]
 801b77a:	05c8      	lsls	r0, r1, #23
 801b77c:	d51e      	bpl.n	801b7bc <_scanf_float+0x184>
 801b77e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b782:	6021      	str	r1, [r4, #0]
 801b784:	3701      	adds	r7, #1
 801b786:	f1bb 0f00 	cmp.w	fp, #0
 801b78a:	d003      	beq.n	801b794 <_scanf_float+0x15c>
 801b78c:	3201      	adds	r2, #1
 801b78e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b792:	60a2      	str	r2, [r4, #8]
 801b794:	68a3      	ldr	r3, [r4, #8]
 801b796:	3b01      	subs	r3, #1
 801b798:	60a3      	str	r3, [r4, #8]
 801b79a:	6923      	ldr	r3, [r4, #16]
 801b79c:	3301      	adds	r3, #1
 801b79e:	6123      	str	r3, [r4, #16]
 801b7a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b7a4:	3b01      	subs	r3, #1
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	f8c9 3004 	str.w	r3, [r9, #4]
 801b7ac:	f340 8082 	ble.w	801b8b4 <_scanf_float+0x27c>
 801b7b0:	f8d9 3000 	ldr.w	r3, [r9]
 801b7b4:	3301      	adds	r3, #1
 801b7b6:	f8c9 3000 	str.w	r3, [r9]
 801b7ba:	e762      	b.n	801b682 <_scanf_float+0x4a>
 801b7bc:	eb1a 0105 	adds.w	r1, sl, r5
 801b7c0:	f47f af6d 	bne.w	801b69e <_scanf_float+0x66>
 801b7c4:	6822      	ldr	r2, [r4, #0]
 801b7c6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b7ca:	6022      	str	r2, [r4, #0]
 801b7cc:	460d      	mov	r5, r1
 801b7ce:	468a      	mov	sl, r1
 801b7d0:	f806 3b01 	strb.w	r3, [r6], #1
 801b7d4:	e7de      	b.n	801b794 <_scanf_float+0x15c>
 801b7d6:	6822      	ldr	r2, [r4, #0]
 801b7d8:	0610      	lsls	r0, r2, #24
 801b7da:	f57f af60 	bpl.w	801b69e <_scanf_float+0x66>
 801b7de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b7e2:	6022      	str	r2, [r4, #0]
 801b7e4:	e7f4      	b.n	801b7d0 <_scanf_float+0x198>
 801b7e6:	f1ba 0f00 	cmp.w	sl, #0
 801b7ea:	d10c      	bne.n	801b806 <_scanf_float+0x1ce>
 801b7ec:	b977      	cbnz	r7, 801b80c <_scanf_float+0x1d4>
 801b7ee:	6822      	ldr	r2, [r4, #0]
 801b7f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b7f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b7f8:	d108      	bne.n	801b80c <_scanf_float+0x1d4>
 801b7fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b7fe:	6022      	str	r2, [r4, #0]
 801b800:	f04f 0a01 	mov.w	sl, #1
 801b804:	e7e4      	b.n	801b7d0 <_scanf_float+0x198>
 801b806:	f1ba 0f02 	cmp.w	sl, #2
 801b80a:	d050      	beq.n	801b8ae <_scanf_float+0x276>
 801b80c:	2d01      	cmp	r5, #1
 801b80e:	d002      	beq.n	801b816 <_scanf_float+0x1de>
 801b810:	2d04      	cmp	r5, #4
 801b812:	f47f af44 	bne.w	801b69e <_scanf_float+0x66>
 801b816:	3501      	adds	r5, #1
 801b818:	b2ed      	uxtb	r5, r5
 801b81a:	e7d9      	b.n	801b7d0 <_scanf_float+0x198>
 801b81c:	f1ba 0f01 	cmp.w	sl, #1
 801b820:	f47f af3d 	bne.w	801b69e <_scanf_float+0x66>
 801b824:	f04f 0a02 	mov.w	sl, #2
 801b828:	e7d2      	b.n	801b7d0 <_scanf_float+0x198>
 801b82a:	b975      	cbnz	r5, 801b84a <_scanf_float+0x212>
 801b82c:	2f00      	cmp	r7, #0
 801b82e:	f47f af37 	bne.w	801b6a0 <_scanf_float+0x68>
 801b832:	6822      	ldr	r2, [r4, #0]
 801b834:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b838:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b83c:	f040 8103 	bne.w	801ba46 <_scanf_float+0x40e>
 801b840:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b844:	6022      	str	r2, [r4, #0]
 801b846:	2501      	movs	r5, #1
 801b848:	e7c2      	b.n	801b7d0 <_scanf_float+0x198>
 801b84a:	2d03      	cmp	r5, #3
 801b84c:	d0e3      	beq.n	801b816 <_scanf_float+0x1de>
 801b84e:	2d05      	cmp	r5, #5
 801b850:	e7df      	b.n	801b812 <_scanf_float+0x1da>
 801b852:	2d02      	cmp	r5, #2
 801b854:	f47f af23 	bne.w	801b69e <_scanf_float+0x66>
 801b858:	2503      	movs	r5, #3
 801b85a:	e7b9      	b.n	801b7d0 <_scanf_float+0x198>
 801b85c:	2d06      	cmp	r5, #6
 801b85e:	f47f af1e 	bne.w	801b69e <_scanf_float+0x66>
 801b862:	2507      	movs	r5, #7
 801b864:	e7b4      	b.n	801b7d0 <_scanf_float+0x198>
 801b866:	6822      	ldr	r2, [r4, #0]
 801b868:	0591      	lsls	r1, r2, #22
 801b86a:	f57f af18 	bpl.w	801b69e <_scanf_float+0x66>
 801b86e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b872:	6022      	str	r2, [r4, #0]
 801b874:	9702      	str	r7, [sp, #8]
 801b876:	e7ab      	b.n	801b7d0 <_scanf_float+0x198>
 801b878:	6822      	ldr	r2, [r4, #0]
 801b87a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b87e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b882:	d005      	beq.n	801b890 <_scanf_float+0x258>
 801b884:	0550      	lsls	r0, r2, #21
 801b886:	f57f af0a 	bpl.w	801b69e <_scanf_float+0x66>
 801b88a:	2f00      	cmp	r7, #0
 801b88c:	f000 80db 	beq.w	801ba46 <_scanf_float+0x40e>
 801b890:	0591      	lsls	r1, r2, #22
 801b892:	bf58      	it	pl
 801b894:	9902      	ldrpl	r1, [sp, #8]
 801b896:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b89a:	bf58      	it	pl
 801b89c:	1a79      	subpl	r1, r7, r1
 801b89e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b8a2:	bf58      	it	pl
 801b8a4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b8a8:	6022      	str	r2, [r4, #0]
 801b8aa:	2700      	movs	r7, #0
 801b8ac:	e790      	b.n	801b7d0 <_scanf_float+0x198>
 801b8ae:	f04f 0a03 	mov.w	sl, #3
 801b8b2:	e78d      	b.n	801b7d0 <_scanf_float+0x198>
 801b8b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b8b8:	4649      	mov	r1, r9
 801b8ba:	4640      	mov	r0, r8
 801b8bc:	4798      	blx	r3
 801b8be:	2800      	cmp	r0, #0
 801b8c0:	f43f aedf 	beq.w	801b682 <_scanf_float+0x4a>
 801b8c4:	e6eb      	b.n	801b69e <_scanf_float+0x66>
 801b8c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b8ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8ce:	464a      	mov	r2, r9
 801b8d0:	4640      	mov	r0, r8
 801b8d2:	4798      	blx	r3
 801b8d4:	6923      	ldr	r3, [r4, #16]
 801b8d6:	3b01      	subs	r3, #1
 801b8d8:	6123      	str	r3, [r4, #16]
 801b8da:	e6eb      	b.n	801b6b4 <_scanf_float+0x7c>
 801b8dc:	1e6b      	subs	r3, r5, #1
 801b8de:	2b06      	cmp	r3, #6
 801b8e0:	d824      	bhi.n	801b92c <_scanf_float+0x2f4>
 801b8e2:	2d02      	cmp	r5, #2
 801b8e4:	d836      	bhi.n	801b954 <_scanf_float+0x31c>
 801b8e6:	9b01      	ldr	r3, [sp, #4]
 801b8e8:	429e      	cmp	r6, r3
 801b8ea:	f67f aee7 	bls.w	801b6bc <_scanf_float+0x84>
 801b8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b8f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8f6:	464a      	mov	r2, r9
 801b8f8:	4640      	mov	r0, r8
 801b8fa:	4798      	blx	r3
 801b8fc:	6923      	ldr	r3, [r4, #16]
 801b8fe:	3b01      	subs	r3, #1
 801b900:	6123      	str	r3, [r4, #16]
 801b902:	e7f0      	b.n	801b8e6 <_scanf_float+0x2ae>
 801b904:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b908:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b90c:	464a      	mov	r2, r9
 801b90e:	4640      	mov	r0, r8
 801b910:	4798      	blx	r3
 801b912:	6923      	ldr	r3, [r4, #16]
 801b914:	3b01      	subs	r3, #1
 801b916:	6123      	str	r3, [r4, #16]
 801b918:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b91c:	fa5f fa8a 	uxtb.w	sl, sl
 801b920:	f1ba 0f02 	cmp.w	sl, #2
 801b924:	d1ee      	bne.n	801b904 <_scanf_float+0x2cc>
 801b926:	3d03      	subs	r5, #3
 801b928:	b2ed      	uxtb	r5, r5
 801b92a:	1b76      	subs	r6, r6, r5
 801b92c:	6823      	ldr	r3, [r4, #0]
 801b92e:	05da      	lsls	r2, r3, #23
 801b930:	d530      	bpl.n	801b994 <_scanf_float+0x35c>
 801b932:	055b      	lsls	r3, r3, #21
 801b934:	d511      	bpl.n	801b95a <_scanf_float+0x322>
 801b936:	9b01      	ldr	r3, [sp, #4]
 801b938:	429e      	cmp	r6, r3
 801b93a:	f67f aebf 	bls.w	801b6bc <_scanf_float+0x84>
 801b93e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b946:	464a      	mov	r2, r9
 801b948:	4640      	mov	r0, r8
 801b94a:	4798      	blx	r3
 801b94c:	6923      	ldr	r3, [r4, #16]
 801b94e:	3b01      	subs	r3, #1
 801b950:	6123      	str	r3, [r4, #16]
 801b952:	e7f0      	b.n	801b936 <_scanf_float+0x2fe>
 801b954:	46aa      	mov	sl, r5
 801b956:	46b3      	mov	fp, r6
 801b958:	e7de      	b.n	801b918 <_scanf_float+0x2e0>
 801b95a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b95e:	6923      	ldr	r3, [r4, #16]
 801b960:	2965      	cmp	r1, #101	@ 0x65
 801b962:	f103 33ff 	add.w	r3, r3, #4294967295
 801b966:	f106 35ff 	add.w	r5, r6, #4294967295
 801b96a:	6123      	str	r3, [r4, #16]
 801b96c:	d00c      	beq.n	801b988 <_scanf_float+0x350>
 801b96e:	2945      	cmp	r1, #69	@ 0x45
 801b970:	d00a      	beq.n	801b988 <_scanf_float+0x350>
 801b972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b976:	464a      	mov	r2, r9
 801b978:	4640      	mov	r0, r8
 801b97a:	4798      	blx	r3
 801b97c:	6923      	ldr	r3, [r4, #16]
 801b97e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b982:	3b01      	subs	r3, #1
 801b984:	1eb5      	subs	r5, r6, #2
 801b986:	6123      	str	r3, [r4, #16]
 801b988:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b98c:	464a      	mov	r2, r9
 801b98e:	4640      	mov	r0, r8
 801b990:	4798      	blx	r3
 801b992:	462e      	mov	r6, r5
 801b994:	6822      	ldr	r2, [r4, #0]
 801b996:	f012 0210 	ands.w	r2, r2, #16
 801b99a:	d001      	beq.n	801b9a0 <_scanf_float+0x368>
 801b99c:	2000      	movs	r0, #0
 801b99e:	e68e      	b.n	801b6be <_scanf_float+0x86>
 801b9a0:	7032      	strb	r2, [r6, #0]
 801b9a2:	6823      	ldr	r3, [r4, #0]
 801b9a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b9a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b9ac:	d125      	bne.n	801b9fa <_scanf_float+0x3c2>
 801b9ae:	9b02      	ldr	r3, [sp, #8]
 801b9b0:	429f      	cmp	r7, r3
 801b9b2:	d00a      	beq.n	801b9ca <_scanf_float+0x392>
 801b9b4:	1bda      	subs	r2, r3, r7
 801b9b6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b9ba:	429e      	cmp	r6, r3
 801b9bc:	bf28      	it	cs
 801b9be:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b9c2:	4922      	ldr	r1, [pc, #136]	@ (801ba4c <_scanf_float+0x414>)
 801b9c4:	4630      	mov	r0, r6
 801b9c6:	f000 f97f 	bl	801bcc8 <siprintf>
 801b9ca:	9901      	ldr	r1, [sp, #4]
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	4640      	mov	r0, r8
 801b9d0:	f002 fe4a 	bl	801e668 <_strtod_r>
 801b9d4:	9b03      	ldr	r3, [sp, #12]
 801b9d6:	6821      	ldr	r1, [r4, #0]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	f011 0f02 	tst.w	r1, #2
 801b9de:	ec57 6b10 	vmov	r6, r7, d0
 801b9e2:	f103 0204 	add.w	r2, r3, #4
 801b9e6:	d015      	beq.n	801ba14 <_scanf_float+0x3dc>
 801b9e8:	9903      	ldr	r1, [sp, #12]
 801b9ea:	600a      	str	r2, [r1, #0]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	e9c3 6700 	strd	r6, r7, [r3]
 801b9f2:	68e3      	ldr	r3, [r4, #12]
 801b9f4:	3301      	adds	r3, #1
 801b9f6:	60e3      	str	r3, [r4, #12]
 801b9f8:	e7d0      	b.n	801b99c <_scanf_float+0x364>
 801b9fa:	9b04      	ldr	r3, [sp, #16]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d0e4      	beq.n	801b9ca <_scanf_float+0x392>
 801ba00:	9905      	ldr	r1, [sp, #20]
 801ba02:	230a      	movs	r3, #10
 801ba04:	3101      	adds	r1, #1
 801ba06:	4640      	mov	r0, r8
 801ba08:	f002 feae 	bl	801e768 <_strtol_r>
 801ba0c:	9b04      	ldr	r3, [sp, #16]
 801ba0e:	9e05      	ldr	r6, [sp, #20]
 801ba10:	1ac2      	subs	r2, r0, r3
 801ba12:	e7d0      	b.n	801b9b6 <_scanf_float+0x37e>
 801ba14:	f011 0f04 	tst.w	r1, #4
 801ba18:	9903      	ldr	r1, [sp, #12]
 801ba1a:	600a      	str	r2, [r1, #0]
 801ba1c:	d1e6      	bne.n	801b9ec <_scanf_float+0x3b4>
 801ba1e:	681d      	ldr	r5, [r3, #0]
 801ba20:	4632      	mov	r2, r6
 801ba22:	463b      	mov	r3, r7
 801ba24:	4630      	mov	r0, r6
 801ba26:	4639      	mov	r1, r7
 801ba28:	f7e5 f890 	bl	8000b4c <__aeabi_dcmpun>
 801ba2c:	b128      	cbz	r0, 801ba3a <_scanf_float+0x402>
 801ba2e:	4808      	ldr	r0, [pc, #32]	@ (801ba50 <_scanf_float+0x418>)
 801ba30:	f7fd fe06 	bl	8019640 <nanf>
 801ba34:	ed85 0a00 	vstr	s0, [r5]
 801ba38:	e7db      	b.n	801b9f2 <_scanf_float+0x3ba>
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	4639      	mov	r1, r7
 801ba3e:	f7e5 f8e3 	bl	8000c08 <__aeabi_d2f>
 801ba42:	6028      	str	r0, [r5, #0]
 801ba44:	e7d5      	b.n	801b9f2 <_scanf_float+0x3ba>
 801ba46:	2700      	movs	r7, #0
 801ba48:	e62e      	b.n	801b6a8 <_scanf_float+0x70>
 801ba4a:	bf00      	nop
 801ba4c:	080220af 	.word	0x080220af
 801ba50:	080220ef 	.word	0x080220ef

0801ba54 <std>:
 801ba54:	2300      	movs	r3, #0
 801ba56:	b510      	push	{r4, lr}
 801ba58:	4604      	mov	r4, r0
 801ba5a:	e9c0 3300 	strd	r3, r3, [r0]
 801ba5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ba62:	6083      	str	r3, [r0, #8]
 801ba64:	8181      	strh	r1, [r0, #12]
 801ba66:	6643      	str	r3, [r0, #100]	@ 0x64
 801ba68:	81c2      	strh	r2, [r0, #14]
 801ba6a:	6183      	str	r3, [r0, #24]
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	2208      	movs	r2, #8
 801ba70:	305c      	adds	r0, #92	@ 0x5c
 801ba72:	f000 faa7 	bl	801bfc4 <memset>
 801ba76:	4b0d      	ldr	r3, [pc, #52]	@ (801baac <std+0x58>)
 801ba78:	6263      	str	r3, [r4, #36]	@ 0x24
 801ba7a:	4b0d      	ldr	r3, [pc, #52]	@ (801bab0 <std+0x5c>)
 801ba7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ba7e:	4b0d      	ldr	r3, [pc, #52]	@ (801bab4 <std+0x60>)
 801ba80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ba82:	4b0d      	ldr	r3, [pc, #52]	@ (801bab8 <std+0x64>)
 801ba84:	6323      	str	r3, [r4, #48]	@ 0x30
 801ba86:	4b0d      	ldr	r3, [pc, #52]	@ (801babc <std+0x68>)
 801ba88:	6224      	str	r4, [r4, #32]
 801ba8a:	429c      	cmp	r4, r3
 801ba8c:	d006      	beq.n	801ba9c <std+0x48>
 801ba8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ba92:	4294      	cmp	r4, r2
 801ba94:	d002      	beq.n	801ba9c <std+0x48>
 801ba96:	33d0      	adds	r3, #208	@ 0xd0
 801ba98:	429c      	cmp	r4, r3
 801ba9a:	d105      	bne.n	801baa8 <std+0x54>
 801ba9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801baa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baa4:	f000 bb7a 	b.w	801c19c <__retarget_lock_init_recursive>
 801baa8:	bd10      	pop	{r4, pc}
 801baaa:	bf00      	nop
 801baac:	0801bd65 	.word	0x0801bd65
 801bab0:	0801bd8b 	.word	0x0801bd8b
 801bab4:	0801bdc3 	.word	0x0801bdc3
 801bab8:	0801bde7 	.word	0x0801bde7
 801babc:	2000c2e0 	.word	0x2000c2e0

0801bac0 <stdio_exit_handler>:
 801bac0:	4a02      	ldr	r2, [pc, #8]	@ (801bacc <stdio_exit_handler+0xc>)
 801bac2:	4903      	ldr	r1, [pc, #12]	@ (801bad0 <stdio_exit_handler+0x10>)
 801bac4:	4803      	ldr	r0, [pc, #12]	@ (801bad4 <stdio_exit_handler+0x14>)
 801bac6:	f000 b869 	b.w	801bb9c <_fwalk_sglue>
 801baca:	bf00      	nop
 801bacc:	20000154 	.word	0x20000154
 801bad0:	0801f161 	.word	0x0801f161
 801bad4:	20000164 	.word	0x20000164

0801bad8 <cleanup_stdio>:
 801bad8:	6841      	ldr	r1, [r0, #4]
 801bada:	4b0c      	ldr	r3, [pc, #48]	@ (801bb0c <cleanup_stdio+0x34>)
 801badc:	4299      	cmp	r1, r3
 801bade:	b510      	push	{r4, lr}
 801bae0:	4604      	mov	r4, r0
 801bae2:	d001      	beq.n	801bae8 <cleanup_stdio+0x10>
 801bae4:	f003 fb3c 	bl	801f160 <_fflush_r>
 801bae8:	68a1      	ldr	r1, [r4, #8]
 801baea:	4b09      	ldr	r3, [pc, #36]	@ (801bb10 <cleanup_stdio+0x38>)
 801baec:	4299      	cmp	r1, r3
 801baee:	d002      	beq.n	801baf6 <cleanup_stdio+0x1e>
 801baf0:	4620      	mov	r0, r4
 801baf2:	f003 fb35 	bl	801f160 <_fflush_r>
 801baf6:	68e1      	ldr	r1, [r4, #12]
 801baf8:	4b06      	ldr	r3, [pc, #24]	@ (801bb14 <cleanup_stdio+0x3c>)
 801bafa:	4299      	cmp	r1, r3
 801bafc:	d004      	beq.n	801bb08 <cleanup_stdio+0x30>
 801bafe:	4620      	mov	r0, r4
 801bb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb04:	f003 bb2c 	b.w	801f160 <_fflush_r>
 801bb08:	bd10      	pop	{r4, pc}
 801bb0a:	bf00      	nop
 801bb0c:	2000c2e0 	.word	0x2000c2e0
 801bb10:	2000c348 	.word	0x2000c348
 801bb14:	2000c3b0 	.word	0x2000c3b0

0801bb18 <global_stdio_init.part.0>:
 801bb18:	b510      	push	{r4, lr}
 801bb1a:	4b0b      	ldr	r3, [pc, #44]	@ (801bb48 <global_stdio_init.part.0+0x30>)
 801bb1c:	4c0b      	ldr	r4, [pc, #44]	@ (801bb4c <global_stdio_init.part.0+0x34>)
 801bb1e:	4a0c      	ldr	r2, [pc, #48]	@ (801bb50 <global_stdio_init.part.0+0x38>)
 801bb20:	601a      	str	r2, [r3, #0]
 801bb22:	4620      	mov	r0, r4
 801bb24:	2200      	movs	r2, #0
 801bb26:	2104      	movs	r1, #4
 801bb28:	f7ff ff94 	bl	801ba54 <std>
 801bb2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801bb30:	2201      	movs	r2, #1
 801bb32:	2109      	movs	r1, #9
 801bb34:	f7ff ff8e 	bl	801ba54 <std>
 801bb38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801bb3c:	2202      	movs	r2, #2
 801bb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb42:	2112      	movs	r1, #18
 801bb44:	f7ff bf86 	b.w	801ba54 <std>
 801bb48:	2000c418 	.word	0x2000c418
 801bb4c:	2000c2e0 	.word	0x2000c2e0
 801bb50:	0801bac1 	.word	0x0801bac1

0801bb54 <__sfp_lock_acquire>:
 801bb54:	4801      	ldr	r0, [pc, #4]	@ (801bb5c <__sfp_lock_acquire+0x8>)
 801bb56:	f000 bb22 	b.w	801c19e <__retarget_lock_acquire_recursive>
 801bb5a:	bf00      	nop
 801bb5c:	2000c421 	.word	0x2000c421

0801bb60 <__sfp_lock_release>:
 801bb60:	4801      	ldr	r0, [pc, #4]	@ (801bb68 <__sfp_lock_release+0x8>)
 801bb62:	f000 bb1d 	b.w	801c1a0 <__retarget_lock_release_recursive>
 801bb66:	bf00      	nop
 801bb68:	2000c421 	.word	0x2000c421

0801bb6c <__sinit>:
 801bb6c:	b510      	push	{r4, lr}
 801bb6e:	4604      	mov	r4, r0
 801bb70:	f7ff fff0 	bl	801bb54 <__sfp_lock_acquire>
 801bb74:	6a23      	ldr	r3, [r4, #32]
 801bb76:	b11b      	cbz	r3, 801bb80 <__sinit+0x14>
 801bb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb7c:	f7ff bff0 	b.w	801bb60 <__sfp_lock_release>
 801bb80:	4b04      	ldr	r3, [pc, #16]	@ (801bb94 <__sinit+0x28>)
 801bb82:	6223      	str	r3, [r4, #32]
 801bb84:	4b04      	ldr	r3, [pc, #16]	@ (801bb98 <__sinit+0x2c>)
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d1f5      	bne.n	801bb78 <__sinit+0xc>
 801bb8c:	f7ff ffc4 	bl	801bb18 <global_stdio_init.part.0>
 801bb90:	e7f2      	b.n	801bb78 <__sinit+0xc>
 801bb92:	bf00      	nop
 801bb94:	0801bad9 	.word	0x0801bad9
 801bb98:	2000c418 	.word	0x2000c418

0801bb9c <_fwalk_sglue>:
 801bb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bba0:	4607      	mov	r7, r0
 801bba2:	4688      	mov	r8, r1
 801bba4:	4614      	mov	r4, r2
 801bba6:	2600      	movs	r6, #0
 801bba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bbac:	f1b9 0901 	subs.w	r9, r9, #1
 801bbb0:	d505      	bpl.n	801bbbe <_fwalk_sglue+0x22>
 801bbb2:	6824      	ldr	r4, [r4, #0]
 801bbb4:	2c00      	cmp	r4, #0
 801bbb6:	d1f7      	bne.n	801bba8 <_fwalk_sglue+0xc>
 801bbb8:	4630      	mov	r0, r6
 801bbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbbe:	89ab      	ldrh	r3, [r5, #12]
 801bbc0:	2b01      	cmp	r3, #1
 801bbc2:	d907      	bls.n	801bbd4 <_fwalk_sglue+0x38>
 801bbc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bbc8:	3301      	adds	r3, #1
 801bbca:	d003      	beq.n	801bbd4 <_fwalk_sglue+0x38>
 801bbcc:	4629      	mov	r1, r5
 801bbce:	4638      	mov	r0, r7
 801bbd0:	47c0      	blx	r8
 801bbd2:	4306      	orrs	r6, r0
 801bbd4:	3568      	adds	r5, #104	@ 0x68
 801bbd6:	e7e9      	b.n	801bbac <_fwalk_sglue+0x10>

0801bbd8 <iprintf>:
 801bbd8:	b40f      	push	{r0, r1, r2, r3}
 801bbda:	b507      	push	{r0, r1, r2, lr}
 801bbdc:	4906      	ldr	r1, [pc, #24]	@ (801bbf8 <iprintf+0x20>)
 801bbde:	ab04      	add	r3, sp, #16
 801bbe0:	6808      	ldr	r0, [r1, #0]
 801bbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbe6:	6881      	ldr	r1, [r0, #8]
 801bbe8:	9301      	str	r3, [sp, #4]
 801bbea:	f7ff fa77 	bl	801b0dc <_vfiprintf_r>
 801bbee:	b003      	add	sp, #12
 801bbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bbf4:	b004      	add	sp, #16
 801bbf6:	4770      	bx	lr
 801bbf8:	20000160 	.word	0x20000160

0801bbfc <putchar>:
 801bbfc:	4b02      	ldr	r3, [pc, #8]	@ (801bc08 <putchar+0xc>)
 801bbfe:	4601      	mov	r1, r0
 801bc00:	6818      	ldr	r0, [r3, #0]
 801bc02:	6882      	ldr	r2, [r0, #8]
 801bc04:	f003 bb48 	b.w	801f298 <_putc_r>
 801bc08:	20000160 	.word	0x20000160

0801bc0c <_puts_r>:
 801bc0c:	6a03      	ldr	r3, [r0, #32]
 801bc0e:	b570      	push	{r4, r5, r6, lr}
 801bc10:	6884      	ldr	r4, [r0, #8]
 801bc12:	4605      	mov	r5, r0
 801bc14:	460e      	mov	r6, r1
 801bc16:	b90b      	cbnz	r3, 801bc1c <_puts_r+0x10>
 801bc18:	f7ff ffa8 	bl	801bb6c <__sinit>
 801bc1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bc1e:	07db      	lsls	r3, r3, #31
 801bc20:	d405      	bmi.n	801bc2e <_puts_r+0x22>
 801bc22:	89a3      	ldrh	r3, [r4, #12]
 801bc24:	0598      	lsls	r0, r3, #22
 801bc26:	d402      	bmi.n	801bc2e <_puts_r+0x22>
 801bc28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc2a:	f000 fab8 	bl	801c19e <__retarget_lock_acquire_recursive>
 801bc2e:	89a3      	ldrh	r3, [r4, #12]
 801bc30:	0719      	lsls	r1, r3, #28
 801bc32:	d502      	bpl.n	801bc3a <_puts_r+0x2e>
 801bc34:	6923      	ldr	r3, [r4, #16]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d135      	bne.n	801bca6 <_puts_r+0x9a>
 801bc3a:	4621      	mov	r1, r4
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	f000 f951 	bl	801bee4 <__swsetup_r>
 801bc42:	b380      	cbz	r0, 801bca6 <_puts_r+0x9a>
 801bc44:	f04f 35ff 	mov.w	r5, #4294967295
 801bc48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bc4a:	07da      	lsls	r2, r3, #31
 801bc4c:	d405      	bmi.n	801bc5a <_puts_r+0x4e>
 801bc4e:	89a3      	ldrh	r3, [r4, #12]
 801bc50:	059b      	lsls	r3, r3, #22
 801bc52:	d402      	bmi.n	801bc5a <_puts_r+0x4e>
 801bc54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc56:	f000 faa3 	bl	801c1a0 <__retarget_lock_release_recursive>
 801bc5a:	4628      	mov	r0, r5
 801bc5c:	bd70      	pop	{r4, r5, r6, pc}
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	da04      	bge.n	801bc6c <_puts_r+0x60>
 801bc62:	69a2      	ldr	r2, [r4, #24]
 801bc64:	429a      	cmp	r2, r3
 801bc66:	dc17      	bgt.n	801bc98 <_puts_r+0x8c>
 801bc68:	290a      	cmp	r1, #10
 801bc6a:	d015      	beq.n	801bc98 <_puts_r+0x8c>
 801bc6c:	6823      	ldr	r3, [r4, #0]
 801bc6e:	1c5a      	adds	r2, r3, #1
 801bc70:	6022      	str	r2, [r4, #0]
 801bc72:	7019      	strb	r1, [r3, #0]
 801bc74:	68a3      	ldr	r3, [r4, #8]
 801bc76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bc7a:	3b01      	subs	r3, #1
 801bc7c:	60a3      	str	r3, [r4, #8]
 801bc7e:	2900      	cmp	r1, #0
 801bc80:	d1ed      	bne.n	801bc5e <_puts_r+0x52>
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	da11      	bge.n	801bcaa <_puts_r+0x9e>
 801bc86:	4622      	mov	r2, r4
 801bc88:	210a      	movs	r1, #10
 801bc8a:	4628      	mov	r0, r5
 801bc8c:	f000 f8ec 	bl	801be68 <__swbuf_r>
 801bc90:	3001      	adds	r0, #1
 801bc92:	d0d7      	beq.n	801bc44 <_puts_r+0x38>
 801bc94:	250a      	movs	r5, #10
 801bc96:	e7d7      	b.n	801bc48 <_puts_r+0x3c>
 801bc98:	4622      	mov	r2, r4
 801bc9a:	4628      	mov	r0, r5
 801bc9c:	f000 f8e4 	bl	801be68 <__swbuf_r>
 801bca0:	3001      	adds	r0, #1
 801bca2:	d1e7      	bne.n	801bc74 <_puts_r+0x68>
 801bca4:	e7ce      	b.n	801bc44 <_puts_r+0x38>
 801bca6:	3e01      	subs	r6, #1
 801bca8:	e7e4      	b.n	801bc74 <_puts_r+0x68>
 801bcaa:	6823      	ldr	r3, [r4, #0]
 801bcac:	1c5a      	adds	r2, r3, #1
 801bcae:	6022      	str	r2, [r4, #0]
 801bcb0:	220a      	movs	r2, #10
 801bcb2:	701a      	strb	r2, [r3, #0]
 801bcb4:	e7ee      	b.n	801bc94 <_puts_r+0x88>
	...

0801bcb8 <puts>:
 801bcb8:	4b02      	ldr	r3, [pc, #8]	@ (801bcc4 <puts+0xc>)
 801bcba:	4601      	mov	r1, r0
 801bcbc:	6818      	ldr	r0, [r3, #0]
 801bcbe:	f7ff bfa5 	b.w	801bc0c <_puts_r>
 801bcc2:	bf00      	nop
 801bcc4:	20000160 	.word	0x20000160

0801bcc8 <siprintf>:
 801bcc8:	b40e      	push	{r1, r2, r3}
 801bcca:	b510      	push	{r4, lr}
 801bccc:	b09d      	sub	sp, #116	@ 0x74
 801bcce:	ab1f      	add	r3, sp, #124	@ 0x7c
 801bcd0:	9002      	str	r0, [sp, #8]
 801bcd2:	9006      	str	r0, [sp, #24]
 801bcd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801bcd8:	480a      	ldr	r0, [pc, #40]	@ (801bd04 <siprintf+0x3c>)
 801bcda:	9107      	str	r1, [sp, #28]
 801bcdc:	9104      	str	r1, [sp, #16]
 801bcde:	490a      	ldr	r1, [pc, #40]	@ (801bd08 <siprintf+0x40>)
 801bce0:	f853 2b04 	ldr.w	r2, [r3], #4
 801bce4:	9105      	str	r1, [sp, #20]
 801bce6:	2400      	movs	r4, #0
 801bce8:	a902      	add	r1, sp, #8
 801bcea:	6800      	ldr	r0, [r0, #0]
 801bcec:	9301      	str	r3, [sp, #4]
 801bcee:	941b      	str	r4, [sp, #108]	@ 0x6c
 801bcf0:	f002 fd98 	bl	801e824 <_svfiprintf_r>
 801bcf4:	9b02      	ldr	r3, [sp, #8]
 801bcf6:	701c      	strb	r4, [r3, #0]
 801bcf8:	b01d      	add	sp, #116	@ 0x74
 801bcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcfe:	b003      	add	sp, #12
 801bd00:	4770      	bx	lr
 801bd02:	bf00      	nop
 801bd04:	20000160 	.word	0x20000160
 801bd08:	ffff0208 	.word	0xffff0208

0801bd0c <siscanf>:
 801bd0c:	b40e      	push	{r1, r2, r3}
 801bd0e:	b570      	push	{r4, r5, r6, lr}
 801bd10:	b09d      	sub	sp, #116	@ 0x74
 801bd12:	ac21      	add	r4, sp, #132	@ 0x84
 801bd14:	2500      	movs	r5, #0
 801bd16:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801bd1a:	f854 6b04 	ldr.w	r6, [r4], #4
 801bd1e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bd22:	951b      	str	r5, [sp, #108]	@ 0x6c
 801bd24:	9002      	str	r0, [sp, #8]
 801bd26:	9006      	str	r0, [sp, #24]
 801bd28:	f7e4 fab2 	bl	8000290 <strlen>
 801bd2c:	4b0b      	ldr	r3, [pc, #44]	@ (801bd5c <siscanf+0x50>)
 801bd2e:	9003      	str	r0, [sp, #12]
 801bd30:	9007      	str	r0, [sp, #28]
 801bd32:	480b      	ldr	r0, [pc, #44]	@ (801bd60 <siscanf+0x54>)
 801bd34:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bd36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bd3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bd3e:	4632      	mov	r2, r6
 801bd40:	4623      	mov	r3, r4
 801bd42:	a902      	add	r1, sp, #8
 801bd44:	6800      	ldr	r0, [r0, #0]
 801bd46:	950f      	str	r5, [sp, #60]	@ 0x3c
 801bd48:	9514      	str	r5, [sp, #80]	@ 0x50
 801bd4a:	9401      	str	r4, [sp, #4]
 801bd4c:	f002 fec0 	bl	801ead0 <__ssvfiscanf_r>
 801bd50:	b01d      	add	sp, #116	@ 0x74
 801bd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd56:	b003      	add	sp, #12
 801bd58:	4770      	bx	lr
 801bd5a:	bf00      	nop
 801bd5c:	0801bd87 	.word	0x0801bd87
 801bd60:	20000160 	.word	0x20000160

0801bd64 <__sread>:
 801bd64:	b510      	push	{r4, lr}
 801bd66:	460c      	mov	r4, r1
 801bd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd6c:	f000 f9c8 	bl	801c100 <_read_r>
 801bd70:	2800      	cmp	r0, #0
 801bd72:	bfab      	itete	ge
 801bd74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bd76:	89a3      	ldrhlt	r3, [r4, #12]
 801bd78:	181b      	addge	r3, r3, r0
 801bd7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bd7e:	bfac      	ite	ge
 801bd80:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bd82:	81a3      	strhlt	r3, [r4, #12]
 801bd84:	bd10      	pop	{r4, pc}

0801bd86 <__seofread>:
 801bd86:	2000      	movs	r0, #0
 801bd88:	4770      	bx	lr

0801bd8a <__swrite>:
 801bd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd8e:	461f      	mov	r7, r3
 801bd90:	898b      	ldrh	r3, [r1, #12]
 801bd92:	05db      	lsls	r3, r3, #23
 801bd94:	4605      	mov	r5, r0
 801bd96:	460c      	mov	r4, r1
 801bd98:	4616      	mov	r6, r2
 801bd9a:	d505      	bpl.n	801bda8 <__swrite+0x1e>
 801bd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bda0:	2302      	movs	r3, #2
 801bda2:	2200      	movs	r2, #0
 801bda4:	f000 f99a 	bl	801c0dc <_lseek_r>
 801bda8:	89a3      	ldrh	r3, [r4, #12]
 801bdaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bdae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bdb2:	81a3      	strh	r3, [r4, #12]
 801bdb4:	4632      	mov	r2, r6
 801bdb6:	463b      	mov	r3, r7
 801bdb8:	4628      	mov	r0, r5
 801bdba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdbe:	f000 b9b1 	b.w	801c124 <_write_r>

0801bdc2 <__sseek>:
 801bdc2:	b510      	push	{r4, lr}
 801bdc4:	460c      	mov	r4, r1
 801bdc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdca:	f000 f987 	bl	801c0dc <_lseek_r>
 801bdce:	1c43      	adds	r3, r0, #1
 801bdd0:	89a3      	ldrh	r3, [r4, #12]
 801bdd2:	bf15      	itete	ne
 801bdd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bdd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bdda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bdde:	81a3      	strheq	r3, [r4, #12]
 801bde0:	bf18      	it	ne
 801bde2:	81a3      	strhne	r3, [r4, #12]
 801bde4:	bd10      	pop	{r4, pc}

0801bde6 <__sclose>:
 801bde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdea:	f000 b909 	b.w	801c000 <_close_r>

0801bdee <_vsniprintf_r>:
 801bdee:	b530      	push	{r4, r5, lr}
 801bdf0:	4614      	mov	r4, r2
 801bdf2:	2c00      	cmp	r4, #0
 801bdf4:	b09b      	sub	sp, #108	@ 0x6c
 801bdf6:	4605      	mov	r5, r0
 801bdf8:	461a      	mov	r2, r3
 801bdfa:	da05      	bge.n	801be08 <_vsniprintf_r+0x1a>
 801bdfc:	238b      	movs	r3, #139	@ 0x8b
 801bdfe:	6003      	str	r3, [r0, #0]
 801be00:	f04f 30ff 	mov.w	r0, #4294967295
 801be04:	b01b      	add	sp, #108	@ 0x6c
 801be06:	bd30      	pop	{r4, r5, pc}
 801be08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801be0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801be10:	f04f 0300 	mov.w	r3, #0
 801be14:	9319      	str	r3, [sp, #100]	@ 0x64
 801be16:	bf14      	ite	ne
 801be18:	f104 33ff 	addne.w	r3, r4, #4294967295
 801be1c:	4623      	moveq	r3, r4
 801be1e:	9302      	str	r3, [sp, #8]
 801be20:	9305      	str	r3, [sp, #20]
 801be22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801be26:	9100      	str	r1, [sp, #0]
 801be28:	9104      	str	r1, [sp, #16]
 801be2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801be2e:	4669      	mov	r1, sp
 801be30:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801be32:	f002 fcf7 	bl	801e824 <_svfiprintf_r>
 801be36:	1c43      	adds	r3, r0, #1
 801be38:	bfbc      	itt	lt
 801be3a:	238b      	movlt	r3, #139	@ 0x8b
 801be3c:	602b      	strlt	r3, [r5, #0]
 801be3e:	2c00      	cmp	r4, #0
 801be40:	d0e0      	beq.n	801be04 <_vsniprintf_r+0x16>
 801be42:	9b00      	ldr	r3, [sp, #0]
 801be44:	2200      	movs	r2, #0
 801be46:	701a      	strb	r2, [r3, #0]
 801be48:	e7dc      	b.n	801be04 <_vsniprintf_r+0x16>
	...

0801be4c <vsniprintf>:
 801be4c:	b507      	push	{r0, r1, r2, lr}
 801be4e:	9300      	str	r3, [sp, #0]
 801be50:	4613      	mov	r3, r2
 801be52:	460a      	mov	r2, r1
 801be54:	4601      	mov	r1, r0
 801be56:	4803      	ldr	r0, [pc, #12]	@ (801be64 <vsniprintf+0x18>)
 801be58:	6800      	ldr	r0, [r0, #0]
 801be5a:	f7ff ffc8 	bl	801bdee <_vsniprintf_r>
 801be5e:	b003      	add	sp, #12
 801be60:	f85d fb04 	ldr.w	pc, [sp], #4
 801be64:	20000160 	.word	0x20000160

0801be68 <__swbuf_r>:
 801be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be6a:	460e      	mov	r6, r1
 801be6c:	4614      	mov	r4, r2
 801be6e:	4605      	mov	r5, r0
 801be70:	b118      	cbz	r0, 801be7a <__swbuf_r+0x12>
 801be72:	6a03      	ldr	r3, [r0, #32]
 801be74:	b90b      	cbnz	r3, 801be7a <__swbuf_r+0x12>
 801be76:	f7ff fe79 	bl	801bb6c <__sinit>
 801be7a:	69a3      	ldr	r3, [r4, #24]
 801be7c:	60a3      	str	r3, [r4, #8]
 801be7e:	89a3      	ldrh	r3, [r4, #12]
 801be80:	071a      	lsls	r2, r3, #28
 801be82:	d501      	bpl.n	801be88 <__swbuf_r+0x20>
 801be84:	6923      	ldr	r3, [r4, #16]
 801be86:	b943      	cbnz	r3, 801be9a <__swbuf_r+0x32>
 801be88:	4621      	mov	r1, r4
 801be8a:	4628      	mov	r0, r5
 801be8c:	f000 f82a 	bl	801bee4 <__swsetup_r>
 801be90:	b118      	cbz	r0, 801be9a <__swbuf_r+0x32>
 801be92:	f04f 37ff 	mov.w	r7, #4294967295
 801be96:	4638      	mov	r0, r7
 801be98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be9a:	6823      	ldr	r3, [r4, #0]
 801be9c:	6922      	ldr	r2, [r4, #16]
 801be9e:	1a98      	subs	r0, r3, r2
 801bea0:	6963      	ldr	r3, [r4, #20]
 801bea2:	b2f6      	uxtb	r6, r6
 801bea4:	4283      	cmp	r3, r0
 801bea6:	4637      	mov	r7, r6
 801bea8:	dc05      	bgt.n	801beb6 <__swbuf_r+0x4e>
 801beaa:	4621      	mov	r1, r4
 801beac:	4628      	mov	r0, r5
 801beae:	f003 f957 	bl	801f160 <_fflush_r>
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d1ed      	bne.n	801be92 <__swbuf_r+0x2a>
 801beb6:	68a3      	ldr	r3, [r4, #8]
 801beb8:	3b01      	subs	r3, #1
 801beba:	60a3      	str	r3, [r4, #8]
 801bebc:	6823      	ldr	r3, [r4, #0]
 801bebe:	1c5a      	adds	r2, r3, #1
 801bec0:	6022      	str	r2, [r4, #0]
 801bec2:	701e      	strb	r6, [r3, #0]
 801bec4:	6962      	ldr	r2, [r4, #20]
 801bec6:	1c43      	adds	r3, r0, #1
 801bec8:	429a      	cmp	r2, r3
 801beca:	d004      	beq.n	801bed6 <__swbuf_r+0x6e>
 801becc:	89a3      	ldrh	r3, [r4, #12]
 801bece:	07db      	lsls	r3, r3, #31
 801bed0:	d5e1      	bpl.n	801be96 <__swbuf_r+0x2e>
 801bed2:	2e0a      	cmp	r6, #10
 801bed4:	d1df      	bne.n	801be96 <__swbuf_r+0x2e>
 801bed6:	4621      	mov	r1, r4
 801bed8:	4628      	mov	r0, r5
 801beda:	f003 f941 	bl	801f160 <_fflush_r>
 801bede:	2800      	cmp	r0, #0
 801bee0:	d0d9      	beq.n	801be96 <__swbuf_r+0x2e>
 801bee2:	e7d6      	b.n	801be92 <__swbuf_r+0x2a>

0801bee4 <__swsetup_r>:
 801bee4:	b538      	push	{r3, r4, r5, lr}
 801bee6:	4b29      	ldr	r3, [pc, #164]	@ (801bf8c <__swsetup_r+0xa8>)
 801bee8:	4605      	mov	r5, r0
 801beea:	6818      	ldr	r0, [r3, #0]
 801beec:	460c      	mov	r4, r1
 801beee:	b118      	cbz	r0, 801bef8 <__swsetup_r+0x14>
 801bef0:	6a03      	ldr	r3, [r0, #32]
 801bef2:	b90b      	cbnz	r3, 801bef8 <__swsetup_r+0x14>
 801bef4:	f7ff fe3a 	bl	801bb6c <__sinit>
 801bef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801befc:	0719      	lsls	r1, r3, #28
 801befe:	d422      	bmi.n	801bf46 <__swsetup_r+0x62>
 801bf00:	06da      	lsls	r2, r3, #27
 801bf02:	d407      	bmi.n	801bf14 <__swsetup_r+0x30>
 801bf04:	2209      	movs	r2, #9
 801bf06:	602a      	str	r2, [r5, #0]
 801bf08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf0c:	81a3      	strh	r3, [r4, #12]
 801bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 801bf12:	e033      	b.n	801bf7c <__swsetup_r+0x98>
 801bf14:	0758      	lsls	r0, r3, #29
 801bf16:	d512      	bpl.n	801bf3e <__swsetup_r+0x5a>
 801bf18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bf1a:	b141      	cbz	r1, 801bf2e <__swsetup_r+0x4a>
 801bf1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bf20:	4299      	cmp	r1, r3
 801bf22:	d002      	beq.n	801bf2a <__swsetup_r+0x46>
 801bf24:	4628      	mov	r0, r5
 801bf26:	f000 ffc3 	bl	801ceb0 <_free_r>
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	6363      	str	r3, [r4, #52]	@ 0x34
 801bf2e:	89a3      	ldrh	r3, [r4, #12]
 801bf30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bf34:	81a3      	strh	r3, [r4, #12]
 801bf36:	2300      	movs	r3, #0
 801bf38:	6063      	str	r3, [r4, #4]
 801bf3a:	6923      	ldr	r3, [r4, #16]
 801bf3c:	6023      	str	r3, [r4, #0]
 801bf3e:	89a3      	ldrh	r3, [r4, #12]
 801bf40:	f043 0308 	orr.w	r3, r3, #8
 801bf44:	81a3      	strh	r3, [r4, #12]
 801bf46:	6923      	ldr	r3, [r4, #16]
 801bf48:	b94b      	cbnz	r3, 801bf5e <__swsetup_r+0x7a>
 801bf4a:	89a3      	ldrh	r3, [r4, #12]
 801bf4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801bf50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bf54:	d003      	beq.n	801bf5e <__swsetup_r+0x7a>
 801bf56:	4621      	mov	r1, r4
 801bf58:	4628      	mov	r0, r5
 801bf5a:	f003 f961 	bl	801f220 <__smakebuf_r>
 801bf5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf62:	f013 0201 	ands.w	r2, r3, #1
 801bf66:	d00a      	beq.n	801bf7e <__swsetup_r+0x9a>
 801bf68:	2200      	movs	r2, #0
 801bf6a:	60a2      	str	r2, [r4, #8]
 801bf6c:	6962      	ldr	r2, [r4, #20]
 801bf6e:	4252      	negs	r2, r2
 801bf70:	61a2      	str	r2, [r4, #24]
 801bf72:	6922      	ldr	r2, [r4, #16]
 801bf74:	b942      	cbnz	r2, 801bf88 <__swsetup_r+0xa4>
 801bf76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801bf7a:	d1c5      	bne.n	801bf08 <__swsetup_r+0x24>
 801bf7c:	bd38      	pop	{r3, r4, r5, pc}
 801bf7e:	0799      	lsls	r1, r3, #30
 801bf80:	bf58      	it	pl
 801bf82:	6962      	ldrpl	r2, [r4, #20]
 801bf84:	60a2      	str	r2, [r4, #8]
 801bf86:	e7f4      	b.n	801bf72 <__swsetup_r+0x8e>
 801bf88:	2000      	movs	r0, #0
 801bf8a:	e7f7      	b.n	801bf7c <__swsetup_r+0x98>
 801bf8c:	20000160 	.word	0x20000160

0801bf90 <memmove>:
 801bf90:	4288      	cmp	r0, r1
 801bf92:	b510      	push	{r4, lr}
 801bf94:	eb01 0402 	add.w	r4, r1, r2
 801bf98:	d902      	bls.n	801bfa0 <memmove+0x10>
 801bf9a:	4284      	cmp	r4, r0
 801bf9c:	4623      	mov	r3, r4
 801bf9e:	d807      	bhi.n	801bfb0 <memmove+0x20>
 801bfa0:	1e43      	subs	r3, r0, #1
 801bfa2:	42a1      	cmp	r1, r4
 801bfa4:	d008      	beq.n	801bfb8 <memmove+0x28>
 801bfa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bfaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bfae:	e7f8      	b.n	801bfa2 <memmove+0x12>
 801bfb0:	4402      	add	r2, r0
 801bfb2:	4601      	mov	r1, r0
 801bfb4:	428a      	cmp	r2, r1
 801bfb6:	d100      	bne.n	801bfba <memmove+0x2a>
 801bfb8:	bd10      	pop	{r4, pc}
 801bfba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bfbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bfc2:	e7f7      	b.n	801bfb4 <memmove+0x24>

0801bfc4 <memset>:
 801bfc4:	4402      	add	r2, r0
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	4293      	cmp	r3, r2
 801bfca:	d100      	bne.n	801bfce <memset+0xa>
 801bfcc:	4770      	bx	lr
 801bfce:	f803 1b01 	strb.w	r1, [r3], #1
 801bfd2:	e7f9      	b.n	801bfc8 <memset+0x4>

0801bfd4 <strncmp>:
 801bfd4:	b510      	push	{r4, lr}
 801bfd6:	b16a      	cbz	r2, 801bff4 <strncmp+0x20>
 801bfd8:	3901      	subs	r1, #1
 801bfda:	1884      	adds	r4, r0, r2
 801bfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfe0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bfe4:	429a      	cmp	r2, r3
 801bfe6:	d103      	bne.n	801bff0 <strncmp+0x1c>
 801bfe8:	42a0      	cmp	r0, r4
 801bfea:	d001      	beq.n	801bff0 <strncmp+0x1c>
 801bfec:	2a00      	cmp	r2, #0
 801bfee:	d1f5      	bne.n	801bfdc <strncmp+0x8>
 801bff0:	1ad0      	subs	r0, r2, r3
 801bff2:	bd10      	pop	{r4, pc}
 801bff4:	4610      	mov	r0, r2
 801bff6:	e7fc      	b.n	801bff2 <strncmp+0x1e>

0801bff8 <_localeconv_r>:
 801bff8:	4800      	ldr	r0, [pc, #0]	@ (801bffc <_localeconv_r+0x4>)
 801bffa:	4770      	bx	lr
 801bffc:	200002a0 	.word	0x200002a0

0801c000 <_close_r>:
 801c000:	b538      	push	{r3, r4, r5, lr}
 801c002:	4d06      	ldr	r5, [pc, #24]	@ (801c01c <_close_r+0x1c>)
 801c004:	2300      	movs	r3, #0
 801c006:	4604      	mov	r4, r0
 801c008:	4608      	mov	r0, r1
 801c00a:	602b      	str	r3, [r5, #0]
 801c00c:	f7ee fea4 	bl	800ad58 <_close>
 801c010:	1c43      	adds	r3, r0, #1
 801c012:	d102      	bne.n	801c01a <_close_r+0x1a>
 801c014:	682b      	ldr	r3, [r5, #0]
 801c016:	b103      	cbz	r3, 801c01a <_close_r+0x1a>
 801c018:	6023      	str	r3, [r4, #0]
 801c01a:	bd38      	pop	{r3, r4, r5, pc}
 801c01c:	2000c41c 	.word	0x2000c41c

0801c020 <_reclaim_reent>:
 801c020:	4b2d      	ldr	r3, [pc, #180]	@ (801c0d8 <_reclaim_reent+0xb8>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4283      	cmp	r3, r0
 801c026:	b570      	push	{r4, r5, r6, lr}
 801c028:	4604      	mov	r4, r0
 801c02a:	d053      	beq.n	801c0d4 <_reclaim_reent+0xb4>
 801c02c:	69c3      	ldr	r3, [r0, #28]
 801c02e:	b31b      	cbz	r3, 801c078 <_reclaim_reent+0x58>
 801c030:	68db      	ldr	r3, [r3, #12]
 801c032:	b163      	cbz	r3, 801c04e <_reclaim_reent+0x2e>
 801c034:	2500      	movs	r5, #0
 801c036:	69e3      	ldr	r3, [r4, #28]
 801c038:	68db      	ldr	r3, [r3, #12]
 801c03a:	5959      	ldr	r1, [r3, r5]
 801c03c:	b9b1      	cbnz	r1, 801c06c <_reclaim_reent+0x4c>
 801c03e:	3504      	adds	r5, #4
 801c040:	2d80      	cmp	r5, #128	@ 0x80
 801c042:	d1f8      	bne.n	801c036 <_reclaim_reent+0x16>
 801c044:	69e3      	ldr	r3, [r4, #28]
 801c046:	4620      	mov	r0, r4
 801c048:	68d9      	ldr	r1, [r3, #12]
 801c04a:	f000 ff31 	bl	801ceb0 <_free_r>
 801c04e:	69e3      	ldr	r3, [r4, #28]
 801c050:	6819      	ldr	r1, [r3, #0]
 801c052:	b111      	cbz	r1, 801c05a <_reclaim_reent+0x3a>
 801c054:	4620      	mov	r0, r4
 801c056:	f000 ff2b 	bl	801ceb0 <_free_r>
 801c05a:	69e3      	ldr	r3, [r4, #28]
 801c05c:	689d      	ldr	r5, [r3, #8]
 801c05e:	b15d      	cbz	r5, 801c078 <_reclaim_reent+0x58>
 801c060:	4629      	mov	r1, r5
 801c062:	4620      	mov	r0, r4
 801c064:	682d      	ldr	r5, [r5, #0]
 801c066:	f000 ff23 	bl	801ceb0 <_free_r>
 801c06a:	e7f8      	b.n	801c05e <_reclaim_reent+0x3e>
 801c06c:	680e      	ldr	r6, [r1, #0]
 801c06e:	4620      	mov	r0, r4
 801c070:	f000 ff1e 	bl	801ceb0 <_free_r>
 801c074:	4631      	mov	r1, r6
 801c076:	e7e1      	b.n	801c03c <_reclaim_reent+0x1c>
 801c078:	6961      	ldr	r1, [r4, #20]
 801c07a:	b111      	cbz	r1, 801c082 <_reclaim_reent+0x62>
 801c07c:	4620      	mov	r0, r4
 801c07e:	f000 ff17 	bl	801ceb0 <_free_r>
 801c082:	69e1      	ldr	r1, [r4, #28]
 801c084:	b111      	cbz	r1, 801c08c <_reclaim_reent+0x6c>
 801c086:	4620      	mov	r0, r4
 801c088:	f000 ff12 	bl	801ceb0 <_free_r>
 801c08c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c08e:	b111      	cbz	r1, 801c096 <_reclaim_reent+0x76>
 801c090:	4620      	mov	r0, r4
 801c092:	f000 ff0d 	bl	801ceb0 <_free_r>
 801c096:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c098:	b111      	cbz	r1, 801c0a0 <_reclaim_reent+0x80>
 801c09a:	4620      	mov	r0, r4
 801c09c:	f000 ff08 	bl	801ceb0 <_free_r>
 801c0a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c0a2:	b111      	cbz	r1, 801c0aa <_reclaim_reent+0x8a>
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	f000 ff03 	bl	801ceb0 <_free_r>
 801c0aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c0ac:	b111      	cbz	r1, 801c0b4 <_reclaim_reent+0x94>
 801c0ae:	4620      	mov	r0, r4
 801c0b0:	f000 fefe 	bl	801ceb0 <_free_r>
 801c0b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c0b6:	b111      	cbz	r1, 801c0be <_reclaim_reent+0x9e>
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	f000 fef9 	bl	801ceb0 <_free_r>
 801c0be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c0c0:	b111      	cbz	r1, 801c0c8 <_reclaim_reent+0xa8>
 801c0c2:	4620      	mov	r0, r4
 801c0c4:	f000 fef4 	bl	801ceb0 <_free_r>
 801c0c8:	6a23      	ldr	r3, [r4, #32]
 801c0ca:	b11b      	cbz	r3, 801c0d4 <_reclaim_reent+0xb4>
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0d2:	4718      	bx	r3
 801c0d4:	bd70      	pop	{r4, r5, r6, pc}
 801c0d6:	bf00      	nop
 801c0d8:	20000160 	.word	0x20000160

0801c0dc <_lseek_r>:
 801c0dc:	b538      	push	{r3, r4, r5, lr}
 801c0de:	4d07      	ldr	r5, [pc, #28]	@ (801c0fc <_lseek_r+0x20>)
 801c0e0:	4604      	mov	r4, r0
 801c0e2:	4608      	mov	r0, r1
 801c0e4:	4611      	mov	r1, r2
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	602a      	str	r2, [r5, #0]
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	f7ee fe5b 	bl	800ada6 <_lseek>
 801c0f0:	1c43      	adds	r3, r0, #1
 801c0f2:	d102      	bne.n	801c0fa <_lseek_r+0x1e>
 801c0f4:	682b      	ldr	r3, [r5, #0]
 801c0f6:	b103      	cbz	r3, 801c0fa <_lseek_r+0x1e>
 801c0f8:	6023      	str	r3, [r4, #0]
 801c0fa:	bd38      	pop	{r3, r4, r5, pc}
 801c0fc:	2000c41c 	.word	0x2000c41c

0801c100 <_read_r>:
 801c100:	b538      	push	{r3, r4, r5, lr}
 801c102:	4d07      	ldr	r5, [pc, #28]	@ (801c120 <_read_r+0x20>)
 801c104:	4604      	mov	r4, r0
 801c106:	4608      	mov	r0, r1
 801c108:	4611      	mov	r1, r2
 801c10a:	2200      	movs	r2, #0
 801c10c:	602a      	str	r2, [r5, #0]
 801c10e:	461a      	mov	r2, r3
 801c110:	f7ee fe05 	bl	800ad1e <_read>
 801c114:	1c43      	adds	r3, r0, #1
 801c116:	d102      	bne.n	801c11e <_read_r+0x1e>
 801c118:	682b      	ldr	r3, [r5, #0]
 801c11a:	b103      	cbz	r3, 801c11e <_read_r+0x1e>
 801c11c:	6023      	str	r3, [r4, #0]
 801c11e:	bd38      	pop	{r3, r4, r5, pc}
 801c120:	2000c41c 	.word	0x2000c41c

0801c124 <_write_r>:
 801c124:	b538      	push	{r3, r4, r5, lr}
 801c126:	4d07      	ldr	r5, [pc, #28]	@ (801c144 <_write_r+0x20>)
 801c128:	4604      	mov	r4, r0
 801c12a:	4608      	mov	r0, r1
 801c12c:	4611      	mov	r1, r2
 801c12e:	2200      	movs	r2, #0
 801c130:	602a      	str	r2, [r5, #0]
 801c132:	461a      	mov	r2, r3
 801c134:	f7ed fb8a 	bl	800984c <_write>
 801c138:	1c43      	adds	r3, r0, #1
 801c13a:	d102      	bne.n	801c142 <_write_r+0x1e>
 801c13c:	682b      	ldr	r3, [r5, #0]
 801c13e:	b103      	cbz	r3, 801c142 <_write_r+0x1e>
 801c140:	6023      	str	r3, [r4, #0]
 801c142:	bd38      	pop	{r3, r4, r5, pc}
 801c144:	2000c41c 	.word	0x2000c41c

0801c148 <__errno>:
 801c148:	4b01      	ldr	r3, [pc, #4]	@ (801c150 <__errno+0x8>)
 801c14a:	6818      	ldr	r0, [r3, #0]
 801c14c:	4770      	bx	lr
 801c14e:	bf00      	nop
 801c150:	20000160 	.word	0x20000160

0801c154 <__libc_init_array>:
 801c154:	b570      	push	{r4, r5, r6, lr}
 801c156:	4d0d      	ldr	r5, [pc, #52]	@ (801c18c <__libc_init_array+0x38>)
 801c158:	4c0d      	ldr	r4, [pc, #52]	@ (801c190 <__libc_init_array+0x3c>)
 801c15a:	1b64      	subs	r4, r4, r5
 801c15c:	10a4      	asrs	r4, r4, #2
 801c15e:	2600      	movs	r6, #0
 801c160:	42a6      	cmp	r6, r4
 801c162:	d109      	bne.n	801c178 <__libc_init_array+0x24>
 801c164:	4d0b      	ldr	r5, [pc, #44]	@ (801c194 <__libc_init_array+0x40>)
 801c166:	4c0c      	ldr	r4, [pc, #48]	@ (801c198 <__libc_init_array+0x44>)
 801c168:	f003 fdaa 	bl	801fcc0 <_init>
 801c16c:	1b64      	subs	r4, r4, r5
 801c16e:	10a4      	asrs	r4, r4, #2
 801c170:	2600      	movs	r6, #0
 801c172:	42a6      	cmp	r6, r4
 801c174:	d105      	bne.n	801c182 <__libc_init_array+0x2e>
 801c176:	bd70      	pop	{r4, r5, r6, pc}
 801c178:	f855 3b04 	ldr.w	r3, [r5], #4
 801c17c:	4798      	blx	r3
 801c17e:	3601      	adds	r6, #1
 801c180:	e7ee      	b.n	801c160 <__libc_init_array+0xc>
 801c182:	f855 3b04 	ldr.w	r3, [r5], #4
 801c186:	4798      	blx	r3
 801c188:	3601      	adds	r6, #1
 801c18a:	e7f2      	b.n	801c172 <__libc_init_array+0x1e>
 801c18c:	080228d4 	.word	0x080228d4
 801c190:	080228d4 	.word	0x080228d4
 801c194:	080228d4 	.word	0x080228d4
 801c198:	080228d8 	.word	0x080228d8

0801c19c <__retarget_lock_init_recursive>:
 801c19c:	4770      	bx	lr

0801c19e <__retarget_lock_acquire_recursive>:
 801c19e:	4770      	bx	lr

0801c1a0 <__retarget_lock_release_recursive>:
 801c1a0:	4770      	bx	lr

0801c1a2 <memcpy>:
 801c1a2:	440a      	add	r2, r1
 801c1a4:	4291      	cmp	r1, r2
 801c1a6:	f100 33ff 	add.w	r3, r0, #4294967295
 801c1aa:	d100      	bne.n	801c1ae <memcpy+0xc>
 801c1ac:	4770      	bx	lr
 801c1ae:	b510      	push	{r4, lr}
 801c1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c1b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c1b8:	4291      	cmp	r1, r2
 801c1ba:	d1f9      	bne.n	801c1b0 <memcpy+0xe>
 801c1bc:	bd10      	pop	{r4, pc}
	...

0801c1c0 <__assert_func>:
 801c1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c1c2:	4614      	mov	r4, r2
 801c1c4:	461a      	mov	r2, r3
 801c1c6:	4b09      	ldr	r3, [pc, #36]	@ (801c1ec <__assert_func+0x2c>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	4605      	mov	r5, r0
 801c1cc:	68d8      	ldr	r0, [r3, #12]
 801c1ce:	b14c      	cbz	r4, 801c1e4 <__assert_func+0x24>
 801c1d0:	4b07      	ldr	r3, [pc, #28]	@ (801c1f0 <__assert_func+0x30>)
 801c1d2:	9100      	str	r1, [sp, #0]
 801c1d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c1d8:	4906      	ldr	r1, [pc, #24]	@ (801c1f4 <__assert_func+0x34>)
 801c1da:	462b      	mov	r3, r5
 801c1dc:	f002 ffe8 	bl	801f1b0 <fiprintf>
 801c1e0:	f003 f93e 	bl	801f460 <abort>
 801c1e4:	4b04      	ldr	r3, [pc, #16]	@ (801c1f8 <__assert_func+0x38>)
 801c1e6:	461c      	mov	r4, r3
 801c1e8:	e7f3      	b.n	801c1d2 <__assert_func+0x12>
 801c1ea:	bf00      	nop
 801c1ec:	20000160 	.word	0x20000160
 801c1f0:	080220b4 	.word	0x080220b4
 801c1f4:	080220c1 	.word	0x080220c1
 801c1f8:	080220ef 	.word	0x080220ef

0801c1fc <quorem>:
 801c1fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c200:	6903      	ldr	r3, [r0, #16]
 801c202:	690c      	ldr	r4, [r1, #16]
 801c204:	42a3      	cmp	r3, r4
 801c206:	4607      	mov	r7, r0
 801c208:	db7e      	blt.n	801c308 <quorem+0x10c>
 801c20a:	3c01      	subs	r4, #1
 801c20c:	f101 0814 	add.w	r8, r1, #20
 801c210:	00a3      	lsls	r3, r4, #2
 801c212:	f100 0514 	add.w	r5, r0, #20
 801c216:	9300      	str	r3, [sp, #0]
 801c218:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c21c:	9301      	str	r3, [sp, #4]
 801c21e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c226:	3301      	adds	r3, #1
 801c228:	429a      	cmp	r2, r3
 801c22a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c22e:	fbb2 f6f3 	udiv	r6, r2, r3
 801c232:	d32e      	bcc.n	801c292 <quorem+0x96>
 801c234:	f04f 0a00 	mov.w	sl, #0
 801c238:	46c4      	mov	ip, r8
 801c23a:	46ae      	mov	lr, r5
 801c23c:	46d3      	mov	fp, sl
 801c23e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c242:	b298      	uxth	r0, r3
 801c244:	fb06 a000 	mla	r0, r6, r0, sl
 801c248:	0c02      	lsrs	r2, r0, #16
 801c24a:	0c1b      	lsrs	r3, r3, #16
 801c24c:	fb06 2303 	mla	r3, r6, r3, r2
 801c250:	f8de 2000 	ldr.w	r2, [lr]
 801c254:	b280      	uxth	r0, r0
 801c256:	b292      	uxth	r2, r2
 801c258:	1a12      	subs	r2, r2, r0
 801c25a:	445a      	add	r2, fp
 801c25c:	f8de 0000 	ldr.w	r0, [lr]
 801c260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c264:	b29b      	uxth	r3, r3
 801c266:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c26a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c26e:	b292      	uxth	r2, r2
 801c270:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c274:	45e1      	cmp	r9, ip
 801c276:	f84e 2b04 	str.w	r2, [lr], #4
 801c27a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c27e:	d2de      	bcs.n	801c23e <quorem+0x42>
 801c280:	9b00      	ldr	r3, [sp, #0]
 801c282:	58eb      	ldr	r3, [r5, r3]
 801c284:	b92b      	cbnz	r3, 801c292 <quorem+0x96>
 801c286:	9b01      	ldr	r3, [sp, #4]
 801c288:	3b04      	subs	r3, #4
 801c28a:	429d      	cmp	r5, r3
 801c28c:	461a      	mov	r2, r3
 801c28e:	d32f      	bcc.n	801c2f0 <quorem+0xf4>
 801c290:	613c      	str	r4, [r7, #16]
 801c292:	4638      	mov	r0, r7
 801c294:	f001 f9c8 	bl	801d628 <__mcmp>
 801c298:	2800      	cmp	r0, #0
 801c29a:	db25      	blt.n	801c2e8 <quorem+0xec>
 801c29c:	4629      	mov	r1, r5
 801c29e:	2000      	movs	r0, #0
 801c2a0:	f858 2b04 	ldr.w	r2, [r8], #4
 801c2a4:	f8d1 c000 	ldr.w	ip, [r1]
 801c2a8:	fa1f fe82 	uxth.w	lr, r2
 801c2ac:	fa1f f38c 	uxth.w	r3, ip
 801c2b0:	eba3 030e 	sub.w	r3, r3, lr
 801c2b4:	4403      	add	r3, r0
 801c2b6:	0c12      	lsrs	r2, r2, #16
 801c2b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c2bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c2c0:	b29b      	uxth	r3, r3
 801c2c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c2c6:	45c1      	cmp	r9, r8
 801c2c8:	f841 3b04 	str.w	r3, [r1], #4
 801c2cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c2d0:	d2e6      	bcs.n	801c2a0 <quorem+0xa4>
 801c2d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c2d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c2da:	b922      	cbnz	r2, 801c2e6 <quorem+0xea>
 801c2dc:	3b04      	subs	r3, #4
 801c2de:	429d      	cmp	r5, r3
 801c2e0:	461a      	mov	r2, r3
 801c2e2:	d30b      	bcc.n	801c2fc <quorem+0x100>
 801c2e4:	613c      	str	r4, [r7, #16]
 801c2e6:	3601      	adds	r6, #1
 801c2e8:	4630      	mov	r0, r6
 801c2ea:	b003      	add	sp, #12
 801c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f0:	6812      	ldr	r2, [r2, #0]
 801c2f2:	3b04      	subs	r3, #4
 801c2f4:	2a00      	cmp	r2, #0
 801c2f6:	d1cb      	bne.n	801c290 <quorem+0x94>
 801c2f8:	3c01      	subs	r4, #1
 801c2fa:	e7c6      	b.n	801c28a <quorem+0x8e>
 801c2fc:	6812      	ldr	r2, [r2, #0]
 801c2fe:	3b04      	subs	r3, #4
 801c300:	2a00      	cmp	r2, #0
 801c302:	d1ef      	bne.n	801c2e4 <quorem+0xe8>
 801c304:	3c01      	subs	r4, #1
 801c306:	e7ea      	b.n	801c2de <quorem+0xe2>
 801c308:	2000      	movs	r0, #0
 801c30a:	e7ee      	b.n	801c2ea <quorem+0xee>
 801c30c:	0000      	movs	r0, r0
	...

0801c310 <_dtoa_r>:
 801c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c314:	69c7      	ldr	r7, [r0, #28]
 801c316:	b097      	sub	sp, #92	@ 0x5c
 801c318:	ed8d 0b04 	vstr	d0, [sp, #16]
 801c31c:	ec55 4b10 	vmov	r4, r5, d0
 801c320:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c322:	9107      	str	r1, [sp, #28]
 801c324:	4681      	mov	r9, r0
 801c326:	920c      	str	r2, [sp, #48]	@ 0x30
 801c328:	9311      	str	r3, [sp, #68]	@ 0x44
 801c32a:	b97f      	cbnz	r7, 801c34c <_dtoa_r+0x3c>
 801c32c:	2010      	movs	r0, #16
 801c32e:	f000 fe09 	bl	801cf44 <malloc>
 801c332:	4602      	mov	r2, r0
 801c334:	f8c9 001c 	str.w	r0, [r9, #28]
 801c338:	b920      	cbnz	r0, 801c344 <_dtoa_r+0x34>
 801c33a:	4ba9      	ldr	r3, [pc, #676]	@ (801c5e0 <_dtoa_r+0x2d0>)
 801c33c:	21ef      	movs	r1, #239	@ 0xef
 801c33e:	48a9      	ldr	r0, [pc, #676]	@ (801c5e4 <_dtoa_r+0x2d4>)
 801c340:	f7ff ff3e 	bl	801c1c0 <__assert_func>
 801c344:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c348:	6007      	str	r7, [r0, #0]
 801c34a:	60c7      	str	r7, [r0, #12]
 801c34c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c350:	6819      	ldr	r1, [r3, #0]
 801c352:	b159      	cbz	r1, 801c36c <_dtoa_r+0x5c>
 801c354:	685a      	ldr	r2, [r3, #4]
 801c356:	604a      	str	r2, [r1, #4]
 801c358:	2301      	movs	r3, #1
 801c35a:	4093      	lsls	r3, r2
 801c35c:	608b      	str	r3, [r1, #8]
 801c35e:	4648      	mov	r0, r9
 801c360:	f000 fee6 	bl	801d130 <_Bfree>
 801c364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c368:	2200      	movs	r2, #0
 801c36a:	601a      	str	r2, [r3, #0]
 801c36c:	1e2b      	subs	r3, r5, #0
 801c36e:	bfb9      	ittee	lt
 801c370:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c374:	9305      	strlt	r3, [sp, #20]
 801c376:	2300      	movge	r3, #0
 801c378:	6033      	strge	r3, [r6, #0]
 801c37a:	9f05      	ldr	r7, [sp, #20]
 801c37c:	4b9a      	ldr	r3, [pc, #616]	@ (801c5e8 <_dtoa_r+0x2d8>)
 801c37e:	bfbc      	itt	lt
 801c380:	2201      	movlt	r2, #1
 801c382:	6032      	strlt	r2, [r6, #0]
 801c384:	43bb      	bics	r3, r7
 801c386:	d112      	bne.n	801c3ae <_dtoa_r+0x9e>
 801c388:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c38a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c38e:	6013      	str	r3, [r2, #0]
 801c390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c394:	4323      	orrs	r3, r4
 801c396:	f000 855a 	beq.w	801ce4e <_dtoa_r+0xb3e>
 801c39a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c39c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801c5fc <_dtoa_r+0x2ec>
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	f000 855c 	beq.w	801ce5e <_dtoa_r+0xb4e>
 801c3a6:	f10a 0303 	add.w	r3, sl, #3
 801c3aa:	f000 bd56 	b.w	801ce5a <_dtoa_r+0xb4a>
 801c3ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	ec51 0b17 	vmov	r0, r1, d7
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801c3be:	f7e4 fb93 	bl	8000ae8 <__aeabi_dcmpeq>
 801c3c2:	4680      	mov	r8, r0
 801c3c4:	b158      	cbz	r0, 801c3de <_dtoa_r+0xce>
 801c3c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c3c8:	2301      	movs	r3, #1
 801c3ca:	6013      	str	r3, [r2, #0]
 801c3cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c3ce:	b113      	cbz	r3, 801c3d6 <_dtoa_r+0xc6>
 801c3d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c3d2:	4b86      	ldr	r3, [pc, #536]	@ (801c5ec <_dtoa_r+0x2dc>)
 801c3d4:	6013      	str	r3, [r2, #0]
 801c3d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801c600 <_dtoa_r+0x2f0>
 801c3da:	f000 bd40 	b.w	801ce5e <_dtoa_r+0xb4e>
 801c3de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801c3e2:	aa14      	add	r2, sp, #80	@ 0x50
 801c3e4:	a915      	add	r1, sp, #84	@ 0x54
 801c3e6:	4648      	mov	r0, r9
 801c3e8:	f001 fa3e 	bl	801d868 <__d2b>
 801c3ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801c3f0:	9002      	str	r0, [sp, #8]
 801c3f2:	2e00      	cmp	r6, #0
 801c3f4:	d078      	beq.n	801c4e8 <_dtoa_r+0x1d8>
 801c3f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c3f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801c3fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c404:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c408:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c40c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801c410:	4619      	mov	r1, r3
 801c412:	2200      	movs	r2, #0
 801c414:	4b76      	ldr	r3, [pc, #472]	@ (801c5f0 <_dtoa_r+0x2e0>)
 801c416:	f7e3 ff47 	bl	80002a8 <__aeabi_dsub>
 801c41a:	a36b      	add	r3, pc, #428	@ (adr r3, 801c5c8 <_dtoa_r+0x2b8>)
 801c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c420:	f7e4 f8fa 	bl	8000618 <__aeabi_dmul>
 801c424:	a36a      	add	r3, pc, #424	@ (adr r3, 801c5d0 <_dtoa_r+0x2c0>)
 801c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c42a:	f7e3 ff3f 	bl	80002ac <__adddf3>
 801c42e:	4604      	mov	r4, r0
 801c430:	4630      	mov	r0, r6
 801c432:	460d      	mov	r5, r1
 801c434:	f7e4 f886 	bl	8000544 <__aeabi_i2d>
 801c438:	a367      	add	r3, pc, #412	@ (adr r3, 801c5d8 <_dtoa_r+0x2c8>)
 801c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c43e:	f7e4 f8eb 	bl	8000618 <__aeabi_dmul>
 801c442:	4602      	mov	r2, r0
 801c444:	460b      	mov	r3, r1
 801c446:	4620      	mov	r0, r4
 801c448:	4629      	mov	r1, r5
 801c44a:	f7e3 ff2f 	bl	80002ac <__adddf3>
 801c44e:	4604      	mov	r4, r0
 801c450:	460d      	mov	r5, r1
 801c452:	f7e4 fb91 	bl	8000b78 <__aeabi_d2iz>
 801c456:	2200      	movs	r2, #0
 801c458:	4607      	mov	r7, r0
 801c45a:	2300      	movs	r3, #0
 801c45c:	4620      	mov	r0, r4
 801c45e:	4629      	mov	r1, r5
 801c460:	f7e4 fb4c 	bl	8000afc <__aeabi_dcmplt>
 801c464:	b140      	cbz	r0, 801c478 <_dtoa_r+0x168>
 801c466:	4638      	mov	r0, r7
 801c468:	f7e4 f86c 	bl	8000544 <__aeabi_i2d>
 801c46c:	4622      	mov	r2, r4
 801c46e:	462b      	mov	r3, r5
 801c470:	f7e4 fb3a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c474:	b900      	cbnz	r0, 801c478 <_dtoa_r+0x168>
 801c476:	3f01      	subs	r7, #1
 801c478:	2f16      	cmp	r7, #22
 801c47a:	d852      	bhi.n	801c522 <_dtoa_r+0x212>
 801c47c:	4b5d      	ldr	r3, [pc, #372]	@ (801c5f4 <_dtoa_r+0x2e4>)
 801c47e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c486:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c48a:	f7e4 fb37 	bl	8000afc <__aeabi_dcmplt>
 801c48e:	2800      	cmp	r0, #0
 801c490:	d049      	beq.n	801c526 <_dtoa_r+0x216>
 801c492:	3f01      	subs	r7, #1
 801c494:	2300      	movs	r3, #0
 801c496:	9310      	str	r3, [sp, #64]	@ 0x40
 801c498:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c49a:	1b9b      	subs	r3, r3, r6
 801c49c:	1e5a      	subs	r2, r3, #1
 801c49e:	bf45      	ittet	mi
 801c4a0:	f1c3 0301 	rsbmi	r3, r3, #1
 801c4a4:	9300      	strmi	r3, [sp, #0]
 801c4a6:	2300      	movpl	r3, #0
 801c4a8:	2300      	movmi	r3, #0
 801c4aa:	9206      	str	r2, [sp, #24]
 801c4ac:	bf54      	ite	pl
 801c4ae:	9300      	strpl	r3, [sp, #0]
 801c4b0:	9306      	strmi	r3, [sp, #24]
 801c4b2:	2f00      	cmp	r7, #0
 801c4b4:	db39      	blt.n	801c52a <_dtoa_r+0x21a>
 801c4b6:	9b06      	ldr	r3, [sp, #24]
 801c4b8:	970d      	str	r7, [sp, #52]	@ 0x34
 801c4ba:	443b      	add	r3, r7
 801c4bc:	9306      	str	r3, [sp, #24]
 801c4be:	2300      	movs	r3, #0
 801c4c0:	9308      	str	r3, [sp, #32]
 801c4c2:	9b07      	ldr	r3, [sp, #28]
 801c4c4:	2b09      	cmp	r3, #9
 801c4c6:	d863      	bhi.n	801c590 <_dtoa_r+0x280>
 801c4c8:	2b05      	cmp	r3, #5
 801c4ca:	bfc4      	itt	gt
 801c4cc:	3b04      	subgt	r3, #4
 801c4ce:	9307      	strgt	r3, [sp, #28]
 801c4d0:	9b07      	ldr	r3, [sp, #28]
 801c4d2:	f1a3 0302 	sub.w	r3, r3, #2
 801c4d6:	bfcc      	ite	gt
 801c4d8:	2400      	movgt	r4, #0
 801c4da:	2401      	movle	r4, #1
 801c4dc:	2b03      	cmp	r3, #3
 801c4de:	d863      	bhi.n	801c5a8 <_dtoa_r+0x298>
 801c4e0:	e8df f003 	tbb	[pc, r3]
 801c4e4:	2b375452 	.word	0x2b375452
 801c4e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801c4ec:	441e      	add	r6, r3
 801c4ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801c4f2:	2b20      	cmp	r3, #32
 801c4f4:	bfc1      	itttt	gt
 801c4f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801c4fa:	409f      	lslgt	r7, r3
 801c4fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801c500:	fa24 f303 	lsrgt.w	r3, r4, r3
 801c504:	bfd6      	itet	le
 801c506:	f1c3 0320 	rsble	r3, r3, #32
 801c50a:	ea47 0003 	orrgt.w	r0, r7, r3
 801c50e:	fa04 f003 	lslle.w	r0, r4, r3
 801c512:	f7e4 f807 	bl	8000524 <__aeabi_ui2d>
 801c516:	2201      	movs	r2, #1
 801c518:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801c51c:	3e01      	subs	r6, #1
 801c51e:	9212      	str	r2, [sp, #72]	@ 0x48
 801c520:	e776      	b.n	801c410 <_dtoa_r+0x100>
 801c522:	2301      	movs	r3, #1
 801c524:	e7b7      	b.n	801c496 <_dtoa_r+0x186>
 801c526:	9010      	str	r0, [sp, #64]	@ 0x40
 801c528:	e7b6      	b.n	801c498 <_dtoa_r+0x188>
 801c52a:	9b00      	ldr	r3, [sp, #0]
 801c52c:	1bdb      	subs	r3, r3, r7
 801c52e:	9300      	str	r3, [sp, #0]
 801c530:	427b      	negs	r3, r7
 801c532:	9308      	str	r3, [sp, #32]
 801c534:	2300      	movs	r3, #0
 801c536:	930d      	str	r3, [sp, #52]	@ 0x34
 801c538:	e7c3      	b.n	801c4c2 <_dtoa_r+0x1b2>
 801c53a:	2301      	movs	r3, #1
 801c53c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c53e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c540:	eb07 0b03 	add.w	fp, r7, r3
 801c544:	f10b 0301 	add.w	r3, fp, #1
 801c548:	2b01      	cmp	r3, #1
 801c54a:	9303      	str	r3, [sp, #12]
 801c54c:	bfb8      	it	lt
 801c54e:	2301      	movlt	r3, #1
 801c550:	e006      	b.n	801c560 <_dtoa_r+0x250>
 801c552:	2301      	movs	r3, #1
 801c554:	9309      	str	r3, [sp, #36]	@ 0x24
 801c556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c558:	2b00      	cmp	r3, #0
 801c55a:	dd28      	ble.n	801c5ae <_dtoa_r+0x29e>
 801c55c:	469b      	mov	fp, r3
 801c55e:	9303      	str	r3, [sp, #12]
 801c560:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801c564:	2100      	movs	r1, #0
 801c566:	2204      	movs	r2, #4
 801c568:	f102 0514 	add.w	r5, r2, #20
 801c56c:	429d      	cmp	r5, r3
 801c56e:	d926      	bls.n	801c5be <_dtoa_r+0x2ae>
 801c570:	6041      	str	r1, [r0, #4]
 801c572:	4648      	mov	r0, r9
 801c574:	f000 fd9c 	bl	801d0b0 <_Balloc>
 801c578:	4682      	mov	sl, r0
 801c57a:	2800      	cmp	r0, #0
 801c57c:	d142      	bne.n	801c604 <_dtoa_r+0x2f4>
 801c57e:	4b1e      	ldr	r3, [pc, #120]	@ (801c5f8 <_dtoa_r+0x2e8>)
 801c580:	4602      	mov	r2, r0
 801c582:	f240 11af 	movw	r1, #431	@ 0x1af
 801c586:	e6da      	b.n	801c33e <_dtoa_r+0x2e>
 801c588:	2300      	movs	r3, #0
 801c58a:	e7e3      	b.n	801c554 <_dtoa_r+0x244>
 801c58c:	2300      	movs	r3, #0
 801c58e:	e7d5      	b.n	801c53c <_dtoa_r+0x22c>
 801c590:	2401      	movs	r4, #1
 801c592:	2300      	movs	r3, #0
 801c594:	9307      	str	r3, [sp, #28]
 801c596:	9409      	str	r4, [sp, #36]	@ 0x24
 801c598:	f04f 3bff 	mov.w	fp, #4294967295
 801c59c:	2200      	movs	r2, #0
 801c59e:	f8cd b00c 	str.w	fp, [sp, #12]
 801c5a2:	2312      	movs	r3, #18
 801c5a4:	920c      	str	r2, [sp, #48]	@ 0x30
 801c5a6:	e7db      	b.n	801c560 <_dtoa_r+0x250>
 801c5a8:	2301      	movs	r3, #1
 801c5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5ac:	e7f4      	b.n	801c598 <_dtoa_r+0x288>
 801c5ae:	f04f 0b01 	mov.w	fp, #1
 801c5b2:	f8cd b00c 	str.w	fp, [sp, #12]
 801c5b6:	465b      	mov	r3, fp
 801c5b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801c5bc:	e7d0      	b.n	801c560 <_dtoa_r+0x250>
 801c5be:	3101      	adds	r1, #1
 801c5c0:	0052      	lsls	r2, r2, #1
 801c5c2:	e7d1      	b.n	801c568 <_dtoa_r+0x258>
 801c5c4:	f3af 8000 	nop.w
 801c5c8:	636f4361 	.word	0x636f4361
 801c5cc:	3fd287a7 	.word	0x3fd287a7
 801c5d0:	8b60c8b3 	.word	0x8b60c8b3
 801c5d4:	3fc68a28 	.word	0x3fc68a28
 801c5d8:	509f79fb 	.word	0x509f79fb
 801c5dc:	3fd34413 	.word	0x3fd34413
 801c5e0:	080220fd 	.word	0x080220fd
 801c5e4:	08022114 	.word	0x08022114
 801c5e8:	7ff00000 	.word	0x7ff00000
 801c5ec:	080221ef 	.word	0x080221ef
 801c5f0:	3ff80000 	.word	0x3ff80000
 801c5f4:	080226b0 	.word	0x080226b0
 801c5f8:	0802216c 	.word	0x0802216c
 801c5fc:	080220f9 	.word	0x080220f9
 801c600:	080221ee 	.word	0x080221ee
 801c604:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c608:	6018      	str	r0, [r3, #0]
 801c60a:	9b03      	ldr	r3, [sp, #12]
 801c60c:	2b0e      	cmp	r3, #14
 801c60e:	f200 80a1 	bhi.w	801c754 <_dtoa_r+0x444>
 801c612:	2c00      	cmp	r4, #0
 801c614:	f000 809e 	beq.w	801c754 <_dtoa_r+0x444>
 801c618:	2f00      	cmp	r7, #0
 801c61a:	dd33      	ble.n	801c684 <_dtoa_r+0x374>
 801c61c:	4b9c      	ldr	r3, [pc, #624]	@ (801c890 <_dtoa_r+0x580>)
 801c61e:	f007 020f 	and.w	r2, r7, #15
 801c622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c626:	ed93 7b00 	vldr	d7, [r3]
 801c62a:	05f8      	lsls	r0, r7, #23
 801c62c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801c630:	ea4f 1427 	mov.w	r4, r7, asr #4
 801c634:	d516      	bpl.n	801c664 <_dtoa_r+0x354>
 801c636:	4b97      	ldr	r3, [pc, #604]	@ (801c894 <_dtoa_r+0x584>)
 801c638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c63c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c640:	f7e4 f914 	bl	800086c <__aeabi_ddiv>
 801c644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c648:	f004 040f 	and.w	r4, r4, #15
 801c64c:	2603      	movs	r6, #3
 801c64e:	4d91      	ldr	r5, [pc, #580]	@ (801c894 <_dtoa_r+0x584>)
 801c650:	b954      	cbnz	r4, 801c668 <_dtoa_r+0x358>
 801c652:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c65a:	f7e4 f907 	bl	800086c <__aeabi_ddiv>
 801c65e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c662:	e028      	b.n	801c6b6 <_dtoa_r+0x3a6>
 801c664:	2602      	movs	r6, #2
 801c666:	e7f2      	b.n	801c64e <_dtoa_r+0x33e>
 801c668:	07e1      	lsls	r1, r4, #31
 801c66a:	d508      	bpl.n	801c67e <_dtoa_r+0x36e>
 801c66c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801c670:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c674:	f7e3 ffd0 	bl	8000618 <__aeabi_dmul>
 801c678:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c67c:	3601      	adds	r6, #1
 801c67e:	1064      	asrs	r4, r4, #1
 801c680:	3508      	adds	r5, #8
 801c682:	e7e5      	b.n	801c650 <_dtoa_r+0x340>
 801c684:	f000 80af 	beq.w	801c7e6 <_dtoa_r+0x4d6>
 801c688:	427c      	negs	r4, r7
 801c68a:	4b81      	ldr	r3, [pc, #516]	@ (801c890 <_dtoa_r+0x580>)
 801c68c:	4d81      	ldr	r5, [pc, #516]	@ (801c894 <_dtoa_r+0x584>)
 801c68e:	f004 020f 	and.w	r2, r4, #15
 801c692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c69a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c69e:	f7e3 ffbb 	bl	8000618 <__aeabi_dmul>
 801c6a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c6a6:	1124      	asrs	r4, r4, #4
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	2602      	movs	r6, #2
 801c6ac:	2c00      	cmp	r4, #0
 801c6ae:	f040 808f 	bne.w	801c7d0 <_dtoa_r+0x4c0>
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d1d3      	bne.n	801c65e <_dtoa_r+0x34e>
 801c6b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c6b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	f000 8094 	beq.w	801c7ea <_dtoa_r+0x4da>
 801c6c2:	4b75      	ldr	r3, [pc, #468]	@ (801c898 <_dtoa_r+0x588>)
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	4629      	mov	r1, r5
 801c6ca:	f7e4 fa17 	bl	8000afc <__aeabi_dcmplt>
 801c6ce:	2800      	cmp	r0, #0
 801c6d0:	f000 808b 	beq.w	801c7ea <_dtoa_r+0x4da>
 801c6d4:	9b03      	ldr	r3, [sp, #12]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	f000 8087 	beq.w	801c7ea <_dtoa_r+0x4da>
 801c6dc:	f1bb 0f00 	cmp.w	fp, #0
 801c6e0:	dd34      	ble.n	801c74c <_dtoa_r+0x43c>
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	4b6d      	ldr	r3, [pc, #436]	@ (801c89c <_dtoa_r+0x58c>)
 801c6e6:	2200      	movs	r2, #0
 801c6e8:	4629      	mov	r1, r5
 801c6ea:	f7e3 ff95 	bl	8000618 <__aeabi_dmul>
 801c6ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c6f2:	f107 38ff 	add.w	r8, r7, #4294967295
 801c6f6:	3601      	adds	r6, #1
 801c6f8:	465c      	mov	r4, fp
 801c6fa:	4630      	mov	r0, r6
 801c6fc:	f7e3 ff22 	bl	8000544 <__aeabi_i2d>
 801c700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c704:	f7e3 ff88 	bl	8000618 <__aeabi_dmul>
 801c708:	4b65      	ldr	r3, [pc, #404]	@ (801c8a0 <_dtoa_r+0x590>)
 801c70a:	2200      	movs	r2, #0
 801c70c:	f7e3 fdce 	bl	80002ac <__adddf3>
 801c710:	4605      	mov	r5, r0
 801c712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801c716:	2c00      	cmp	r4, #0
 801c718:	d16a      	bne.n	801c7f0 <_dtoa_r+0x4e0>
 801c71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c71e:	4b61      	ldr	r3, [pc, #388]	@ (801c8a4 <_dtoa_r+0x594>)
 801c720:	2200      	movs	r2, #0
 801c722:	f7e3 fdc1 	bl	80002a8 <__aeabi_dsub>
 801c726:	4602      	mov	r2, r0
 801c728:	460b      	mov	r3, r1
 801c72a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c72e:	462a      	mov	r2, r5
 801c730:	4633      	mov	r3, r6
 801c732:	f7e4 fa01 	bl	8000b38 <__aeabi_dcmpgt>
 801c736:	2800      	cmp	r0, #0
 801c738:	f040 8298 	bne.w	801cc6c <_dtoa_r+0x95c>
 801c73c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c740:	462a      	mov	r2, r5
 801c742:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801c746:	f7e4 f9d9 	bl	8000afc <__aeabi_dcmplt>
 801c74a:	bb38      	cbnz	r0, 801c79c <_dtoa_r+0x48c>
 801c74c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801c750:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801c754:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c756:	2b00      	cmp	r3, #0
 801c758:	f2c0 8157 	blt.w	801ca0a <_dtoa_r+0x6fa>
 801c75c:	2f0e      	cmp	r7, #14
 801c75e:	f300 8154 	bgt.w	801ca0a <_dtoa_r+0x6fa>
 801c762:	4b4b      	ldr	r3, [pc, #300]	@ (801c890 <_dtoa_r+0x580>)
 801c764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c768:	ed93 7b00 	vldr	d7, [r3]
 801c76c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c76e:	2b00      	cmp	r3, #0
 801c770:	ed8d 7b00 	vstr	d7, [sp]
 801c774:	f280 80e5 	bge.w	801c942 <_dtoa_r+0x632>
 801c778:	9b03      	ldr	r3, [sp, #12]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	f300 80e1 	bgt.w	801c942 <_dtoa_r+0x632>
 801c780:	d10c      	bne.n	801c79c <_dtoa_r+0x48c>
 801c782:	4b48      	ldr	r3, [pc, #288]	@ (801c8a4 <_dtoa_r+0x594>)
 801c784:	2200      	movs	r2, #0
 801c786:	ec51 0b17 	vmov	r0, r1, d7
 801c78a:	f7e3 ff45 	bl	8000618 <__aeabi_dmul>
 801c78e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c792:	f7e4 f9c7 	bl	8000b24 <__aeabi_dcmpge>
 801c796:	2800      	cmp	r0, #0
 801c798:	f000 8266 	beq.w	801cc68 <_dtoa_r+0x958>
 801c79c:	2400      	movs	r4, #0
 801c79e:	4625      	mov	r5, r4
 801c7a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c7a2:	4656      	mov	r6, sl
 801c7a4:	ea6f 0803 	mvn.w	r8, r3
 801c7a8:	2700      	movs	r7, #0
 801c7aa:	4621      	mov	r1, r4
 801c7ac:	4648      	mov	r0, r9
 801c7ae:	f000 fcbf 	bl	801d130 <_Bfree>
 801c7b2:	2d00      	cmp	r5, #0
 801c7b4:	f000 80bd 	beq.w	801c932 <_dtoa_r+0x622>
 801c7b8:	b12f      	cbz	r7, 801c7c6 <_dtoa_r+0x4b6>
 801c7ba:	42af      	cmp	r7, r5
 801c7bc:	d003      	beq.n	801c7c6 <_dtoa_r+0x4b6>
 801c7be:	4639      	mov	r1, r7
 801c7c0:	4648      	mov	r0, r9
 801c7c2:	f000 fcb5 	bl	801d130 <_Bfree>
 801c7c6:	4629      	mov	r1, r5
 801c7c8:	4648      	mov	r0, r9
 801c7ca:	f000 fcb1 	bl	801d130 <_Bfree>
 801c7ce:	e0b0      	b.n	801c932 <_dtoa_r+0x622>
 801c7d0:	07e2      	lsls	r2, r4, #31
 801c7d2:	d505      	bpl.n	801c7e0 <_dtoa_r+0x4d0>
 801c7d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c7d8:	f7e3 ff1e 	bl	8000618 <__aeabi_dmul>
 801c7dc:	3601      	adds	r6, #1
 801c7de:	2301      	movs	r3, #1
 801c7e0:	1064      	asrs	r4, r4, #1
 801c7e2:	3508      	adds	r5, #8
 801c7e4:	e762      	b.n	801c6ac <_dtoa_r+0x39c>
 801c7e6:	2602      	movs	r6, #2
 801c7e8:	e765      	b.n	801c6b6 <_dtoa_r+0x3a6>
 801c7ea:	9c03      	ldr	r4, [sp, #12]
 801c7ec:	46b8      	mov	r8, r7
 801c7ee:	e784      	b.n	801c6fa <_dtoa_r+0x3ea>
 801c7f0:	4b27      	ldr	r3, [pc, #156]	@ (801c890 <_dtoa_r+0x580>)
 801c7f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c7f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c7f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c7fc:	4454      	add	r4, sl
 801c7fe:	2900      	cmp	r1, #0
 801c800:	d054      	beq.n	801c8ac <_dtoa_r+0x59c>
 801c802:	4929      	ldr	r1, [pc, #164]	@ (801c8a8 <_dtoa_r+0x598>)
 801c804:	2000      	movs	r0, #0
 801c806:	f7e4 f831 	bl	800086c <__aeabi_ddiv>
 801c80a:	4633      	mov	r3, r6
 801c80c:	462a      	mov	r2, r5
 801c80e:	f7e3 fd4b 	bl	80002a8 <__aeabi_dsub>
 801c812:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c816:	4656      	mov	r6, sl
 801c818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c81c:	f7e4 f9ac 	bl	8000b78 <__aeabi_d2iz>
 801c820:	4605      	mov	r5, r0
 801c822:	f7e3 fe8f 	bl	8000544 <__aeabi_i2d>
 801c826:	4602      	mov	r2, r0
 801c828:	460b      	mov	r3, r1
 801c82a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c82e:	f7e3 fd3b 	bl	80002a8 <__aeabi_dsub>
 801c832:	3530      	adds	r5, #48	@ 0x30
 801c834:	4602      	mov	r2, r0
 801c836:	460b      	mov	r3, r1
 801c838:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c83c:	f806 5b01 	strb.w	r5, [r6], #1
 801c840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c844:	f7e4 f95a 	bl	8000afc <__aeabi_dcmplt>
 801c848:	2800      	cmp	r0, #0
 801c84a:	d172      	bne.n	801c932 <_dtoa_r+0x622>
 801c84c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c850:	4911      	ldr	r1, [pc, #68]	@ (801c898 <_dtoa_r+0x588>)
 801c852:	2000      	movs	r0, #0
 801c854:	f7e3 fd28 	bl	80002a8 <__aeabi_dsub>
 801c858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c85c:	f7e4 f94e 	bl	8000afc <__aeabi_dcmplt>
 801c860:	2800      	cmp	r0, #0
 801c862:	f040 80b4 	bne.w	801c9ce <_dtoa_r+0x6be>
 801c866:	42a6      	cmp	r6, r4
 801c868:	f43f af70 	beq.w	801c74c <_dtoa_r+0x43c>
 801c86c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801c870:	4b0a      	ldr	r3, [pc, #40]	@ (801c89c <_dtoa_r+0x58c>)
 801c872:	2200      	movs	r2, #0
 801c874:	f7e3 fed0 	bl	8000618 <__aeabi_dmul>
 801c878:	4b08      	ldr	r3, [pc, #32]	@ (801c89c <_dtoa_r+0x58c>)
 801c87a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c87e:	2200      	movs	r2, #0
 801c880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c884:	f7e3 fec8 	bl	8000618 <__aeabi_dmul>
 801c888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c88c:	e7c4      	b.n	801c818 <_dtoa_r+0x508>
 801c88e:	bf00      	nop
 801c890:	080226b0 	.word	0x080226b0
 801c894:	08022688 	.word	0x08022688
 801c898:	3ff00000 	.word	0x3ff00000
 801c89c:	40240000 	.word	0x40240000
 801c8a0:	401c0000 	.word	0x401c0000
 801c8a4:	40140000 	.word	0x40140000
 801c8a8:	3fe00000 	.word	0x3fe00000
 801c8ac:	4631      	mov	r1, r6
 801c8ae:	4628      	mov	r0, r5
 801c8b0:	f7e3 feb2 	bl	8000618 <__aeabi_dmul>
 801c8b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c8b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801c8ba:	4656      	mov	r6, sl
 801c8bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c8c0:	f7e4 f95a 	bl	8000b78 <__aeabi_d2iz>
 801c8c4:	4605      	mov	r5, r0
 801c8c6:	f7e3 fe3d 	bl	8000544 <__aeabi_i2d>
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	460b      	mov	r3, r1
 801c8ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c8d2:	f7e3 fce9 	bl	80002a8 <__aeabi_dsub>
 801c8d6:	3530      	adds	r5, #48	@ 0x30
 801c8d8:	f806 5b01 	strb.w	r5, [r6], #1
 801c8dc:	4602      	mov	r2, r0
 801c8de:	460b      	mov	r3, r1
 801c8e0:	42a6      	cmp	r6, r4
 801c8e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c8e6:	f04f 0200 	mov.w	r2, #0
 801c8ea:	d124      	bne.n	801c936 <_dtoa_r+0x626>
 801c8ec:	4baf      	ldr	r3, [pc, #700]	@ (801cbac <_dtoa_r+0x89c>)
 801c8ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801c8f2:	f7e3 fcdb 	bl	80002ac <__adddf3>
 801c8f6:	4602      	mov	r2, r0
 801c8f8:	460b      	mov	r3, r1
 801c8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c8fe:	f7e4 f91b 	bl	8000b38 <__aeabi_dcmpgt>
 801c902:	2800      	cmp	r0, #0
 801c904:	d163      	bne.n	801c9ce <_dtoa_r+0x6be>
 801c906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c90a:	49a8      	ldr	r1, [pc, #672]	@ (801cbac <_dtoa_r+0x89c>)
 801c90c:	2000      	movs	r0, #0
 801c90e:	f7e3 fccb 	bl	80002a8 <__aeabi_dsub>
 801c912:	4602      	mov	r2, r0
 801c914:	460b      	mov	r3, r1
 801c916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c91a:	f7e4 f8ef 	bl	8000afc <__aeabi_dcmplt>
 801c91e:	2800      	cmp	r0, #0
 801c920:	f43f af14 	beq.w	801c74c <_dtoa_r+0x43c>
 801c924:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c926:	1e73      	subs	r3, r6, #1
 801c928:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c92a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c92e:	2b30      	cmp	r3, #48	@ 0x30
 801c930:	d0f8      	beq.n	801c924 <_dtoa_r+0x614>
 801c932:	4647      	mov	r7, r8
 801c934:	e03b      	b.n	801c9ae <_dtoa_r+0x69e>
 801c936:	4b9e      	ldr	r3, [pc, #632]	@ (801cbb0 <_dtoa_r+0x8a0>)
 801c938:	f7e3 fe6e 	bl	8000618 <__aeabi_dmul>
 801c93c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c940:	e7bc      	b.n	801c8bc <_dtoa_r+0x5ac>
 801c942:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801c946:	4656      	mov	r6, sl
 801c948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c94c:	4620      	mov	r0, r4
 801c94e:	4629      	mov	r1, r5
 801c950:	f7e3 ff8c 	bl	800086c <__aeabi_ddiv>
 801c954:	f7e4 f910 	bl	8000b78 <__aeabi_d2iz>
 801c958:	4680      	mov	r8, r0
 801c95a:	f7e3 fdf3 	bl	8000544 <__aeabi_i2d>
 801c95e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c962:	f7e3 fe59 	bl	8000618 <__aeabi_dmul>
 801c966:	4602      	mov	r2, r0
 801c968:	460b      	mov	r3, r1
 801c96a:	4620      	mov	r0, r4
 801c96c:	4629      	mov	r1, r5
 801c96e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801c972:	f7e3 fc99 	bl	80002a8 <__aeabi_dsub>
 801c976:	f806 4b01 	strb.w	r4, [r6], #1
 801c97a:	9d03      	ldr	r5, [sp, #12]
 801c97c:	eba6 040a 	sub.w	r4, r6, sl
 801c980:	42a5      	cmp	r5, r4
 801c982:	4602      	mov	r2, r0
 801c984:	460b      	mov	r3, r1
 801c986:	d133      	bne.n	801c9f0 <_dtoa_r+0x6e0>
 801c988:	f7e3 fc90 	bl	80002ac <__adddf3>
 801c98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c990:	4604      	mov	r4, r0
 801c992:	460d      	mov	r5, r1
 801c994:	f7e4 f8d0 	bl	8000b38 <__aeabi_dcmpgt>
 801c998:	b9c0      	cbnz	r0, 801c9cc <_dtoa_r+0x6bc>
 801c99a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c99e:	4620      	mov	r0, r4
 801c9a0:	4629      	mov	r1, r5
 801c9a2:	f7e4 f8a1 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9a6:	b110      	cbz	r0, 801c9ae <_dtoa_r+0x69e>
 801c9a8:	f018 0f01 	tst.w	r8, #1
 801c9ac:	d10e      	bne.n	801c9cc <_dtoa_r+0x6bc>
 801c9ae:	9902      	ldr	r1, [sp, #8]
 801c9b0:	4648      	mov	r0, r9
 801c9b2:	f000 fbbd 	bl	801d130 <_Bfree>
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	7033      	strb	r3, [r6, #0]
 801c9ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c9bc:	3701      	adds	r7, #1
 801c9be:	601f      	str	r7, [r3, #0]
 801c9c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	f000 824b 	beq.w	801ce5e <_dtoa_r+0xb4e>
 801c9c8:	601e      	str	r6, [r3, #0]
 801c9ca:	e248      	b.n	801ce5e <_dtoa_r+0xb4e>
 801c9cc:	46b8      	mov	r8, r7
 801c9ce:	4633      	mov	r3, r6
 801c9d0:	461e      	mov	r6, r3
 801c9d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c9d6:	2a39      	cmp	r2, #57	@ 0x39
 801c9d8:	d106      	bne.n	801c9e8 <_dtoa_r+0x6d8>
 801c9da:	459a      	cmp	sl, r3
 801c9dc:	d1f8      	bne.n	801c9d0 <_dtoa_r+0x6c0>
 801c9de:	2230      	movs	r2, #48	@ 0x30
 801c9e0:	f108 0801 	add.w	r8, r8, #1
 801c9e4:	f88a 2000 	strb.w	r2, [sl]
 801c9e8:	781a      	ldrb	r2, [r3, #0]
 801c9ea:	3201      	adds	r2, #1
 801c9ec:	701a      	strb	r2, [r3, #0]
 801c9ee:	e7a0      	b.n	801c932 <_dtoa_r+0x622>
 801c9f0:	4b6f      	ldr	r3, [pc, #444]	@ (801cbb0 <_dtoa_r+0x8a0>)
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	f7e3 fe10 	bl	8000618 <__aeabi_dmul>
 801c9f8:	2200      	movs	r2, #0
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	4604      	mov	r4, r0
 801c9fe:	460d      	mov	r5, r1
 801ca00:	f7e4 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca04:	2800      	cmp	r0, #0
 801ca06:	d09f      	beq.n	801c948 <_dtoa_r+0x638>
 801ca08:	e7d1      	b.n	801c9ae <_dtoa_r+0x69e>
 801ca0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca0c:	2a00      	cmp	r2, #0
 801ca0e:	f000 80ea 	beq.w	801cbe6 <_dtoa_r+0x8d6>
 801ca12:	9a07      	ldr	r2, [sp, #28]
 801ca14:	2a01      	cmp	r2, #1
 801ca16:	f300 80cd 	bgt.w	801cbb4 <_dtoa_r+0x8a4>
 801ca1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ca1c:	2a00      	cmp	r2, #0
 801ca1e:	f000 80c1 	beq.w	801cba4 <_dtoa_r+0x894>
 801ca22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ca26:	9c08      	ldr	r4, [sp, #32]
 801ca28:	9e00      	ldr	r6, [sp, #0]
 801ca2a:	9a00      	ldr	r2, [sp, #0]
 801ca2c:	441a      	add	r2, r3
 801ca2e:	9200      	str	r2, [sp, #0]
 801ca30:	9a06      	ldr	r2, [sp, #24]
 801ca32:	2101      	movs	r1, #1
 801ca34:	441a      	add	r2, r3
 801ca36:	4648      	mov	r0, r9
 801ca38:	9206      	str	r2, [sp, #24]
 801ca3a:	f000 fc77 	bl	801d32c <__i2b>
 801ca3e:	4605      	mov	r5, r0
 801ca40:	b166      	cbz	r6, 801ca5c <_dtoa_r+0x74c>
 801ca42:	9b06      	ldr	r3, [sp, #24]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	dd09      	ble.n	801ca5c <_dtoa_r+0x74c>
 801ca48:	42b3      	cmp	r3, r6
 801ca4a:	9a00      	ldr	r2, [sp, #0]
 801ca4c:	bfa8      	it	ge
 801ca4e:	4633      	movge	r3, r6
 801ca50:	1ad2      	subs	r2, r2, r3
 801ca52:	9200      	str	r2, [sp, #0]
 801ca54:	9a06      	ldr	r2, [sp, #24]
 801ca56:	1af6      	subs	r6, r6, r3
 801ca58:	1ad3      	subs	r3, r2, r3
 801ca5a:	9306      	str	r3, [sp, #24]
 801ca5c:	9b08      	ldr	r3, [sp, #32]
 801ca5e:	b30b      	cbz	r3, 801caa4 <_dtoa_r+0x794>
 801ca60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	f000 80c6 	beq.w	801cbf4 <_dtoa_r+0x8e4>
 801ca68:	2c00      	cmp	r4, #0
 801ca6a:	f000 80c0 	beq.w	801cbee <_dtoa_r+0x8de>
 801ca6e:	4629      	mov	r1, r5
 801ca70:	4622      	mov	r2, r4
 801ca72:	4648      	mov	r0, r9
 801ca74:	f000 fd12 	bl	801d49c <__pow5mult>
 801ca78:	9a02      	ldr	r2, [sp, #8]
 801ca7a:	4601      	mov	r1, r0
 801ca7c:	4605      	mov	r5, r0
 801ca7e:	4648      	mov	r0, r9
 801ca80:	f000 fc6a 	bl	801d358 <__multiply>
 801ca84:	9902      	ldr	r1, [sp, #8]
 801ca86:	4680      	mov	r8, r0
 801ca88:	4648      	mov	r0, r9
 801ca8a:	f000 fb51 	bl	801d130 <_Bfree>
 801ca8e:	9b08      	ldr	r3, [sp, #32]
 801ca90:	1b1b      	subs	r3, r3, r4
 801ca92:	9308      	str	r3, [sp, #32]
 801ca94:	f000 80b1 	beq.w	801cbfa <_dtoa_r+0x8ea>
 801ca98:	9a08      	ldr	r2, [sp, #32]
 801ca9a:	4641      	mov	r1, r8
 801ca9c:	4648      	mov	r0, r9
 801ca9e:	f000 fcfd 	bl	801d49c <__pow5mult>
 801caa2:	9002      	str	r0, [sp, #8]
 801caa4:	2101      	movs	r1, #1
 801caa6:	4648      	mov	r0, r9
 801caa8:	f000 fc40 	bl	801d32c <__i2b>
 801caac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801caae:	4604      	mov	r4, r0
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	f000 81d8 	beq.w	801ce66 <_dtoa_r+0xb56>
 801cab6:	461a      	mov	r2, r3
 801cab8:	4601      	mov	r1, r0
 801caba:	4648      	mov	r0, r9
 801cabc:	f000 fcee 	bl	801d49c <__pow5mult>
 801cac0:	9b07      	ldr	r3, [sp, #28]
 801cac2:	2b01      	cmp	r3, #1
 801cac4:	4604      	mov	r4, r0
 801cac6:	f300 809f 	bgt.w	801cc08 <_dtoa_r+0x8f8>
 801caca:	9b04      	ldr	r3, [sp, #16]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	f040 8097 	bne.w	801cc00 <_dtoa_r+0x8f0>
 801cad2:	9b05      	ldr	r3, [sp, #20]
 801cad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cad8:	2b00      	cmp	r3, #0
 801cada:	f040 8093 	bne.w	801cc04 <_dtoa_r+0x8f4>
 801cade:	9b05      	ldr	r3, [sp, #20]
 801cae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cae4:	0d1b      	lsrs	r3, r3, #20
 801cae6:	051b      	lsls	r3, r3, #20
 801cae8:	b133      	cbz	r3, 801caf8 <_dtoa_r+0x7e8>
 801caea:	9b00      	ldr	r3, [sp, #0]
 801caec:	3301      	adds	r3, #1
 801caee:	9300      	str	r3, [sp, #0]
 801caf0:	9b06      	ldr	r3, [sp, #24]
 801caf2:	3301      	adds	r3, #1
 801caf4:	9306      	str	r3, [sp, #24]
 801caf6:	2301      	movs	r3, #1
 801caf8:	9308      	str	r3, [sp, #32]
 801cafa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	f000 81b8 	beq.w	801ce72 <_dtoa_r+0xb62>
 801cb02:	6923      	ldr	r3, [r4, #16]
 801cb04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cb08:	6918      	ldr	r0, [r3, #16]
 801cb0a:	f000 fbc3 	bl	801d294 <__hi0bits>
 801cb0e:	f1c0 0020 	rsb	r0, r0, #32
 801cb12:	9b06      	ldr	r3, [sp, #24]
 801cb14:	4418      	add	r0, r3
 801cb16:	f010 001f 	ands.w	r0, r0, #31
 801cb1a:	f000 8082 	beq.w	801cc22 <_dtoa_r+0x912>
 801cb1e:	f1c0 0320 	rsb	r3, r0, #32
 801cb22:	2b04      	cmp	r3, #4
 801cb24:	dd73      	ble.n	801cc0e <_dtoa_r+0x8fe>
 801cb26:	9b00      	ldr	r3, [sp, #0]
 801cb28:	f1c0 001c 	rsb	r0, r0, #28
 801cb2c:	4403      	add	r3, r0
 801cb2e:	9300      	str	r3, [sp, #0]
 801cb30:	9b06      	ldr	r3, [sp, #24]
 801cb32:	4403      	add	r3, r0
 801cb34:	4406      	add	r6, r0
 801cb36:	9306      	str	r3, [sp, #24]
 801cb38:	9b00      	ldr	r3, [sp, #0]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	dd05      	ble.n	801cb4a <_dtoa_r+0x83a>
 801cb3e:	9902      	ldr	r1, [sp, #8]
 801cb40:	461a      	mov	r2, r3
 801cb42:	4648      	mov	r0, r9
 801cb44:	f000 fd04 	bl	801d550 <__lshift>
 801cb48:	9002      	str	r0, [sp, #8]
 801cb4a:	9b06      	ldr	r3, [sp, #24]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	dd05      	ble.n	801cb5c <_dtoa_r+0x84c>
 801cb50:	4621      	mov	r1, r4
 801cb52:	461a      	mov	r2, r3
 801cb54:	4648      	mov	r0, r9
 801cb56:	f000 fcfb 	bl	801d550 <__lshift>
 801cb5a:	4604      	mov	r4, r0
 801cb5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d061      	beq.n	801cc26 <_dtoa_r+0x916>
 801cb62:	9802      	ldr	r0, [sp, #8]
 801cb64:	4621      	mov	r1, r4
 801cb66:	f000 fd5f 	bl	801d628 <__mcmp>
 801cb6a:	2800      	cmp	r0, #0
 801cb6c:	da5b      	bge.n	801cc26 <_dtoa_r+0x916>
 801cb6e:	2300      	movs	r3, #0
 801cb70:	9902      	ldr	r1, [sp, #8]
 801cb72:	220a      	movs	r2, #10
 801cb74:	4648      	mov	r0, r9
 801cb76:	f000 fafd 	bl	801d174 <__multadd>
 801cb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb7c:	9002      	str	r0, [sp, #8]
 801cb7e:	f107 38ff 	add.w	r8, r7, #4294967295
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	f000 8177 	beq.w	801ce76 <_dtoa_r+0xb66>
 801cb88:	4629      	mov	r1, r5
 801cb8a:	2300      	movs	r3, #0
 801cb8c:	220a      	movs	r2, #10
 801cb8e:	4648      	mov	r0, r9
 801cb90:	f000 faf0 	bl	801d174 <__multadd>
 801cb94:	f1bb 0f00 	cmp.w	fp, #0
 801cb98:	4605      	mov	r5, r0
 801cb9a:	dc6f      	bgt.n	801cc7c <_dtoa_r+0x96c>
 801cb9c:	9b07      	ldr	r3, [sp, #28]
 801cb9e:	2b02      	cmp	r3, #2
 801cba0:	dc49      	bgt.n	801cc36 <_dtoa_r+0x926>
 801cba2:	e06b      	b.n	801cc7c <_dtoa_r+0x96c>
 801cba4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801cbaa:	e73c      	b.n	801ca26 <_dtoa_r+0x716>
 801cbac:	3fe00000 	.word	0x3fe00000
 801cbb0:	40240000 	.word	0x40240000
 801cbb4:	9b03      	ldr	r3, [sp, #12]
 801cbb6:	1e5c      	subs	r4, r3, #1
 801cbb8:	9b08      	ldr	r3, [sp, #32]
 801cbba:	42a3      	cmp	r3, r4
 801cbbc:	db09      	blt.n	801cbd2 <_dtoa_r+0x8c2>
 801cbbe:	1b1c      	subs	r4, r3, r4
 801cbc0:	9b03      	ldr	r3, [sp, #12]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	f6bf af30 	bge.w	801ca28 <_dtoa_r+0x718>
 801cbc8:	9b00      	ldr	r3, [sp, #0]
 801cbca:	9a03      	ldr	r2, [sp, #12]
 801cbcc:	1a9e      	subs	r6, r3, r2
 801cbce:	2300      	movs	r3, #0
 801cbd0:	e72b      	b.n	801ca2a <_dtoa_r+0x71a>
 801cbd2:	9b08      	ldr	r3, [sp, #32]
 801cbd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cbd6:	9408      	str	r4, [sp, #32]
 801cbd8:	1ae3      	subs	r3, r4, r3
 801cbda:	441a      	add	r2, r3
 801cbdc:	9e00      	ldr	r6, [sp, #0]
 801cbde:	9b03      	ldr	r3, [sp, #12]
 801cbe0:	920d      	str	r2, [sp, #52]	@ 0x34
 801cbe2:	2400      	movs	r4, #0
 801cbe4:	e721      	b.n	801ca2a <_dtoa_r+0x71a>
 801cbe6:	9c08      	ldr	r4, [sp, #32]
 801cbe8:	9e00      	ldr	r6, [sp, #0]
 801cbea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801cbec:	e728      	b.n	801ca40 <_dtoa_r+0x730>
 801cbee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cbf2:	e751      	b.n	801ca98 <_dtoa_r+0x788>
 801cbf4:	9a08      	ldr	r2, [sp, #32]
 801cbf6:	9902      	ldr	r1, [sp, #8]
 801cbf8:	e750      	b.n	801ca9c <_dtoa_r+0x78c>
 801cbfa:	f8cd 8008 	str.w	r8, [sp, #8]
 801cbfe:	e751      	b.n	801caa4 <_dtoa_r+0x794>
 801cc00:	2300      	movs	r3, #0
 801cc02:	e779      	b.n	801caf8 <_dtoa_r+0x7e8>
 801cc04:	9b04      	ldr	r3, [sp, #16]
 801cc06:	e777      	b.n	801caf8 <_dtoa_r+0x7e8>
 801cc08:	2300      	movs	r3, #0
 801cc0a:	9308      	str	r3, [sp, #32]
 801cc0c:	e779      	b.n	801cb02 <_dtoa_r+0x7f2>
 801cc0e:	d093      	beq.n	801cb38 <_dtoa_r+0x828>
 801cc10:	9a00      	ldr	r2, [sp, #0]
 801cc12:	331c      	adds	r3, #28
 801cc14:	441a      	add	r2, r3
 801cc16:	9200      	str	r2, [sp, #0]
 801cc18:	9a06      	ldr	r2, [sp, #24]
 801cc1a:	441a      	add	r2, r3
 801cc1c:	441e      	add	r6, r3
 801cc1e:	9206      	str	r2, [sp, #24]
 801cc20:	e78a      	b.n	801cb38 <_dtoa_r+0x828>
 801cc22:	4603      	mov	r3, r0
 801cc24:	e7f4      	b.n	801cc10 <_dtoa_r+0x900>
 801cc26:	9b03      	ldr	r3, [sp, #12]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	46b8      	mov	r8, r7
 801cc2c:	dc20      	bgt.n	801cc70 <_dtoa_r+0x960>
 801cc2e:	469b      	mov	fp, r3
 801cc30:	9b07      	ldr	r3, [sp, #28]
 801cc32:	2b02      	cmp	r3, #2
 801cc34:	dd1e      	ble.n	801cc74 <_dtoa_r+0x964>
 801cc36:	f1bb 0f00 	cmp.w	fp, #0
 801cc3a:	f47f adb1 	bne.w	801c7a0 <_dtoa_r+0x490>
 801cc3e:	4621      	mov	r1, r4
 801cc40:	465b      	mov	r3, fp
 801cc42:	2205      	movs	r2, #5
 801cc44:	4648      	mov	r0, r9
 801cc46:	f000 fa95 	bl	801d174 <__multadd>
 801cc4a:	4601      	mov	r1, r0
 801cc4c:	4604      	mov	r4, r0
 801cc4e:	9802      	ldr	r0, [sp, #8]
 801cc50:	f000 fcea 	bl	801d628 <__mcmp>
 801cc54:	2800      	cmp	r0, #0
 801cc56:	f77f ada3 	ble.w	801c7a0 <_dtoa_r+0x490>
 801cc5a:	4656      	mov	r6, sl
 801cc5c:	2331      	movs	r3, #49	@ 0x31
 801cc5e:	f806 3b01 	strb.w	r3, [r6], #1
 801cc62:	f108 0801 	add.w	r8, r8, #1
 801cc66:	e59f      	b.n	801c7a8 <_dtoa_r+0x498>
 801cc68:	9c03      	ldr	r4, [sp, #12]
 801cc6a:	46b8      	mov	r8, r7
 801cc6c:	4625      	mov	r5, r4
 801cc6e:	e7f4      	b.n	801cc5a <_dtoa_r+0x94a>
 801cc70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801cc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	f000 8101 	beq.w	801ce7e <_dtoa_r+0xb6e>
 801cc7c:	2e00      	cmp	r6, #0
 801cc7e:	dd05      	ble.n	801cc8c <_dtoa_r+0x97c>
 801cc80:	4629      	mov	r1, r5
 801cc82:	4632      	mov	r2, r6
 801cc84:	4648      	mov	r0, r9
 801cc86:	f000 fc63 	bl	801d550 <__lshift>
 801cc8a:	4605      	mov	r5, r0
 801cc8c:	9b08      	ldr	r3, [sp, #32]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d05c      	beq.n	801cd4c <_dtoa_r+0xa3c>
 801cc92:	6869      	ldr	r1, [r5, #4]
 801cc94:	4648      	mov	r0, r9
 801cc96:	f000 fa0b 	bl	801d0b0 <_Balloc>
 801cc9a:	4606      	mov	r6, r0
 801cc9c:	b928      	cbnz	r0, 801ccaa <_dtoa_r+0x99a>
 801cc9e:	4b82      	ldr	r3, [pc, #520]	@ (801cea8 <_dtoa_r+0xb98>)
 801cca0:	4602      	mov	r2, r0
 801cca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801cca6:	f7ff bb4a 	b.w	801c33e <_dtoa_r+0x2e>
 801ccaa:	692a      	ldr	r2, [r5, #16]
 801ccac:	3202      	adds	r2, #2
 801ccae:	0092      	lsls	r2, r2, #2
 801ccb0:	f105 010c 	add.w	r1, r5, #12
 801ccb4:	300c      	adds	r0, #12
 801ccb6:	f7ff fa74 	bl	801c1a2 <memcpy>
 801ccba:	2201      	movs	r2, #1
 801ccbc:	4631      	mov	r1, r6
 801ccbe:	4648      	mov	r0, r9
 801ccc0:	f000 fc46 	bl	801d550 <__lshift>
 801ccc4:	f10a 0301 	add.w	r3, sl, #1
 801ccc8:	9300      	str	r3, [sp, #0]
 801ccca:	eb0a 030b 	add.w	r3, sl, fp
 801ccce:	9308      	str	r3, [sp, #32]
 801ccd0:	9b04      	ldr	r3, [sp, #16]
 801ccd2:	f003 0301 	and.w	r3, r3, #1
 801ccd6:	462f      	mov	r7, r5
 801ccd8:	9306      	str	r3, [sp, #24]
 801ccda:	4605      	mov	r5, r0
 801ccdc:	9b00      	ldr	r3, [sp, #0]
 801ccde:	9802      	ldr	r0, [sp, #8]
 801cce0:	4621      	mov	r1, r4
 801cce2:	f103 3bff 	add.w	fp, r3, #4294967295
 801cce6:	f7ff fa89 	bl	801c1fc <quorem>
 801ccea:	4603      	mov	r3, r0
 801ccec:	3330      	adds	r3, #48	@ 0x30
 801ccee:	9003      	str	r0, [sp, #12]
 801ccf0:	4639      	mov	r1, r7
 801ccf2:	9802      	ldr	r0, [sp, #8]
 801ccf4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccf6:	f000 fc97 	bl	801d628 <__mcmp>
 801ccfa:	462a      	mov	r2, r5
 801ccfc:	9004      	str	r0, [sp, #16]
 801ccfe:	4621      	mov	r1, r4
 801cd00:	4648      	mov	r0, r9
 801cd02:	f000 fcad 	bl	801d660 <__mdiff>
 801cd06:	68c2      	ldr	r2, [r0, #12]
 801cd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd0a:	4606      	mov	r6, r0
 801cd0c:	bb02      	cbnz	r2, 801cd50 <_dtoa_r+0xa40>
 801cd0e:	4601      	mov	r1, r0
 801cd10:	9802      	ldr	r0, [sp, #8]
 801cd12:	f000 fc89 	bl	801d628 <__mcmp>
 801cd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd18:	4602      	mov	r2, r0
 801cd1a:	4631      	mov	r1, r6
 801cd1c:	4648      	mov	r0, r9
 801cd1e:	920c      	str	r2, [sp, #48]	@ 0x30
 801cd20:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd22:	f000 fa05 	bl	801d130 <_Bfree>
 801cd26:	9b07      	ldr	r3, [sp, #28]
 801cd28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cd2a:	9e00      	ldr	r6, [sp, #0]
 801cd2c:	ea42 0103 	orr.w	r1, r2, r3
 801cd30:	9b06      	ldr	r3, [sp, #24]
 801cd32:	4319      	orrs	r1, r3
 801cd34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd36:	d10d      	bne.n	801cd54 <_dtoa_r+0xa44>
 801cd38:	2b39      	cmp	r3, #57	@ 0x39
 801cd3a:	d027      	beq.n	801cd8c <_dtoa_r+0xa7c>
 801cd3c:	9a04      	ldr	r2, [sp, #16]
 801cd3e:	2a00      	cmp	r2, #0
 801cd40:	dd01      	ble.n	801cd46 <_dtoa_r+0xa36>
 801cd42:	9b03      	ldr	r3, [sp, #12]
 801cd44:	3331      	adds	r3, #49	@ 0x31
 801cd46:	f88b 3000 	strb.w	r3, [fp]
 801cd4a:	e52e      	b.n	801c7aa <_dtoa_r+0x49a>
 801cd4c:	4628      	mov	r0, r5
 801cd4e:	e7b9      	b.n	801ccc4 <_dtoa_r+0x9b4>
 801cd50:	2201      	movs	r2, #1
 801cd52:	e7e2      	b.n	801cd1a <_dtoa_r+0xa0a>
 801cd54:	9904      	ldr	r1, [sp, #16]
 801cd56:	2900      	cmp	r1, #0
 801cd58:	db04      	blt.n	801cd64 <_dtoa_r+0xa54>
 801cd5a:	9807      	ldr	r0, [sp, #28]
 801cd5c:	4301      	orrs	r1, r0
 801cd5e:	9806      	ldr	r0, [sp, #24]
 801cd60:	4301      	orrs	r1, r0
 801cd62:	d120      	bne.n	801cda6 <_dtoa_r+0xa96>
 801cd64:	2a00      	cmp	r2, #0
 801cd66:	ddee      	ble.n	801cd46 <_dtoa_r+0xa36>
 801cd68:	9902      	ldr	r1, [sp, #8]
 801cd6a:	9300      	str	r3, [sp, #0]
 801cd6c:	2201      	movs	r2, #1
 801cd6e:	4648      	mov	r0, r9
 801cd70:	f000 fbee 	bl	801d550 <__lshift>
 801cd74:	4621      	mov	r1, r4
 801cd76:	9002      	str	r0, [sp, #8]
 801cd78:	f000 fc56 	bl	801d628 <__mcmp>
 801cd7c:	2800      	cmp	r0, #0
 801cd7e:	9b00      	ldr	r3, [sp, #0]
 801cd80:	dc02      	bgt.n	801cd88 <_dtoa_r+0xa78>
 801cd82:	d1e0      	bne.n	801cd46 <_dtoa_r+0xa36>
 801cd84:	07da      	lsls	r2, r3, #31
 801cd86:	d5de      	bpl.n	801cd46 <_dtoa_r+0xa36>
 801cd88:	2b39      	cmp	r3, #57	@ 0x39
 801cd8a:	d1da      	bne.n	801cd42 <_dtoa_r+0xa32>
 801cd8c:	2339      	movs	r3, #57	@ 0x39
 801cd8e:	f88b 3000 	strb.w	r3, [fp]
 801cd92:	4633      	mov	r3, r6
 801cd94:	461e      	mov	r6, r3
 801cd96:	3b01      	subs	r3, #1
 801cd98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801cd9c:	2a39      	cmp	r2, #57	@ 0x39
 801cd9e:	d04e      	beq.n	801ce3e <_dtoa_r+0xb2e>
 801cda0:	3201      	adds	r2, #1
 801cda2:	701a      	strb	r2, [r3, #0]
 801cda4:	e501      	b.n	801c7aa <_dtoa_r+0x49a>
 801cda6:	2a00      	cmp	r2, #0
 801cda8:	dd03      	ble.n	801cdb2 <_dtoa_r+0xaa2>
 801cdaa:	2b39      	cmp	r3, #57	@ 0x39
 801cdac:	d0ee      	beq.n	801cd8c <_dtoa_r+0xa7c>
 801cdae:	3301      	adds	r3, #1
 801cdb0:	e7c9      	b.n	801cd46 <_dtoa_r+0xa36>
 801cdb2:	9a00      	ldr	r2, [sp, #0]
 801cdb4:	9908      	ldr	r1, [sp, #32]
 801cdb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cdba:	428a      	cmp	r2, r1
 801cdbc:	d028      	beq.n	801ce10 <_dtoa_r+0xb00>
 801cdbe:	9902      	ldr	r1, [sp, #8]
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	220a      	movs	r2, #10
 801cdc4:	4648      	mov	r0, r9
 801cdc6:	f000 f9d5 	bl	801d174 <__multadd>
 801cdca:	42af      	cmp	r7, r5
 801cdcc:	9002      	str	r0, [sp, #8]
 801cdce:	f04f 0300 	mov.w	r3, #0
 801cdd2:	f04f 020a 	mov.w	r2, #10
 801cdd6:	4639      	mov	r1, r7
 801cdd8:	4648      	mov	r0, r9
 801cdda:	d107      	bne.n	801cdec <_dtoa_r+0xadc>
 801cddc:	f000 f9ca 	bl	801d174 <__multadd>
 801cde0:	4607      	mov	r7, r0
 801cde2:	4605      	mov	r5, r0
 801cde4:	9b00      	ldr	r3, [sp, #0]
 801cde6:	3301      	adds	r3, #1
 801cde8:	9300      	str	r3, [sp, #0]
 801cdea:	e777      	b.n	801ccdc <_dtoa_r+0x9cc>
 801cdec:	f000 f9c2 	bl	801d174 <__multadd>
 801cdf0:	4629      	mov	r1, r5
 801cdf2:	4607      	mov	r7, r0
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	220a      	movs	r2, #10
 801cdf8:	4648      	mov	r0, r9
 801cdfa:	f000 f9bb 	bl	801d174 <__multadd>
 801cdfe:	4605      	mov	r5, r0
 801ce00:	e7f0      	b.n	801cde4 <_dtoa_r+0xad4>
 801ce02:	f1bb 0f00 	cmp.w	fp, #0
 801ce06:	bfcc      	ite	gt
 801ce08:	465e      	movgt	r6, fp
 801ce0a:	2601      	movle	r6, #1
 801ce0c:	4456      	add	r6, sl
 801ce0e:	2700      	movs	r7, #0
 801ce10:	9902      	ldr	r1, [sp, #8]
 801ce12:	9300      	str	r3, [sp, #0]
 801ce14:	2201      	movs	r2, #1
 801ce16:	4648      	mov	r0, r9
 801ce18:	f000 fb9a 	bl	801d550 <__lshift>
 801ce1c:	4621      	mov	r1, r4
 801ce1e:	9002      	str	r0, [sp, #8]
 801ce20:	f000 fc02 	bl	801d628 <__mcmp>
 801ce24:	2800      	cmp	r0, #0
 801ce26:	dcb4      	bgt.n	801cd92 <_dtoa_r+0xa82>
 801ce28:	d102      	bne.n	801ce30 <_dtoa_r+0xb20>
 801ce2a:	9b00      	ldr	r3, [sp, #0]
 801ce2c:	07db      	lsls	r3, r3, #31
 801ce2e:	d4b0      	bmi.n	801cd92 <_dtoa_r+0xa82>
 801ce30:	4633      	mov	r3, r6
 801ce32:	461e      	mov	r6, r3
 801ce34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ce38:	2a30      	cmp	r2, #48	@ 0x30
 801ce3a:	d0fa      	beq.n	801ce32 <_dtoa_r+0xb22>
 801ce3c:	e4b5      	b.n	801c7aa <_dtoa_r+0x49a>
 801ce3e:	459a      	cmp	sl, r3
 801ce40:	d1a8      	bne.n	801cd94 <_dtoa_r+0xa84>
 801ce42:	2331      	movs	r3, #49	@ 0x31
 801ce44:	f108 0801 	add.w	r8, r8, #1
 801ce48:	f88a 3000 	strb.w	r3, [sl]
 801ce4c:	e4ad      	b.n	801c7aa <_dtoa_r+0x49a>
 801ce4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ce50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801ceac <_dtoa_r+0xb9c>
 801ce54:	b11b      	cbz	r3, 801ce5e <_dtoa_r+0xb4e>
 801ce56:	f10a 0308 	add.w	r3, sl, #8
 801ce5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ce5c:	6013      	str	r3, [r2, #0]
 801ce5e:	4650      	mov	r0, sl
 801ce60:	b017      	add	sp, #92	@ 0x5c
 801ce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce66:	9b07      	ldr	r3, [sp, #28]
 801ce68:	2b01      	cmp	r3, #1
 801ce6a:	f77f ae2e 	ble.w	801caca <_dtoa_r+0x7ba>
 801ce6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce70:	9308      	str	r3, [sp, #32]
 801ce72:	2001      	movs	r0, #1
 801ce74:	e64d      	b.n	801cb12 <_dtoa_r+0x802>
 801ce76:	f1bb 0f00 	cmp.w	fp, #0
 801ce7a:	f77f aed9 	ble.w	801cc30 <_dtoa_r+0x920>
 801ce7e:	4656      	mov	r6, sl
 801ce80:	9802      	ldr	r0, [sp, #8]
 801ce82:	4621      	mov	r1, r4
 801ce84:	f7ff f9ba 	bl	801c1fc <quorem>
 801ce88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801ce8c:	f806 3b01 	strb.w	r3, [r6], #1
 801ce90:	eba6 020a 	sub.w	r2, r6, sl
 801ce94:	4593      	cmp	fp, r2
 801ce96:	ddb4      	ble.n	801ce02 <_dtoa_r+0xaf2>
 801ce98:	9902      	ldr	r1, [sp, #8]
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	220a      	movs	r2, #10
 801ce9e:	4648      	mov	r0, r9
 801cea0:	f000 f968 	bl	801d174 <__multadd>
 801cea4:	9002      	str	r0, [sp, #8]
 801cea6:	e7eb      	b.n	801ce80 <_dtoa_r+0xb70>
 801cea8:	0802216c 	.word	0x0802216c
 801ceac:	080220f0 	.word	0x080220f0

0801ceb0 <_free_r>:
 801ceb0:	b538      	push	{r3, r4, r5, lr}
 801ceb2:	4605      	mov	r5, r0
 801ceb4:	2900      	cmp	r1, #0
 801ceb6:	d041      	beq.n	801cf3c <_free_r+0x8c>
 801ceb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cebc:	1f0c      	subs	r4, r1, #4
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	bfb8      	it	lt
 801cec2:	18e4      	addlt	r4, r4, r3
 801cec4:	f000 f8e8 	bl	801d098 <__malloc_lock>
 801cec8:	4a1d      	ldr	r2, [pc, #116]	@ (801cf40 <_free_r+0x90>)
 801ceca:	6813      	ldr	r3, [r2, #0]
 801cecc:	b933      	cbnz	r3, 801cedc <_free_r+0x2c>
 801cece:	6063      	str	r3, [r4, #4]
 801ced0:	6014      	str	r4, [r2, #0]
 801ced2:	4628      	mov	r0, r5
 801ced4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ced8:	f000 b8e4 	b.w	801d0a4 <__malloc_unlock>
 801cedc:	42a3      	cmp	r3, r4
 801cede:	d908      	bls.n	801cef2 <_free_r+0x42>
 801cee0:	6820      	ldr	r0, [r4, #0]
 801cee2:	1821      	adds	r1, r4, r0
 801cee4:	428b      	cmp	r3, r1
 801cee6:	bf01      	itttt	eq
 801cee8:	6819      	ldreq	r1, [r3, #0]
 801ceea:	685b      	ldreq	r3, [r3, #4]
 801ceec:	1809      	addeq	r1, r1, r0
 801ceee:	6021      	streq	r1, [r4, #0]
 801cef0:	e7ed      	b.n	801cece <_free_r+0x1e>
 801cef2:	461a      	mov	r2, r3
 801cef4:	685b      	ldr	r3, [r3, #4]
 801cef6:	b10b      	cbz	r3, 801cefc <_free_r+0x4c>
 801cef8:	42a3      	cmp	r3, r4
 801cefa:	d9fa      	bls.n	801cef2 <_free_r+0x42>
 801cefc:	6811      	ldr	r1, [r2, #0]
 801cefe:	1850      	adds	r0, r2, r1
 801cf00:	42a0      	cmp	r0, r4
 801cf02:	d10b      	bne.n	801cf1c <_free_r+0x6c>
 801cf04:	6820      	ldr	r0, [r4, #0]
 801cf06:	4401      	add	r1, r0
 801cf08:	1850      	adds	r0, r2, r1
 801cf0a:	4283      	cmp	r3, r0
 801cf0c:	6011      	str	r1, [r2, #0]
 801cf0e:	d1e0      	bne.n	801ced2 <_free_r+0x22>
 801cf10:	6818      	ldr	r0, [r3, #0]
 801cf12:	685b      	ldr	r3, [r3, #4]
 801cf14:	6053      	str	r3, [r2, #4]
 801cf16:	4408      	add	r0, r1
 801cf18:	6010      	str	r0, [r2, #0]
 801cf1a:	e7da      	b.n	801ced2 <_free_r+0x22>
 801cf1c:	d902      	bls.n	801cf24 <_free_r+0x74>
 801cf1e:	230c      	movs	r3, #12
 801cf20:	602b      	str	r3, [r5, #0]
 801cf22:	e7d6      	b.n	801ced2 <_free_r+0x22>
 801cf24:	6820      	ldr	r0, [r4, #0]
 801cf26:	1821      	adds	r1, r4, r0
 801cf28:	428b      	cmp	r3, r1
 801cf2a:	bf04      	itt	eq
 801cf2c:	6819      	ldreq	r1, [r3, #0]
 801cf2e:	685b      	ldreq	r3, [r3, #4]
 801cf30:	6063      	str	r3, [r4, #4]
 801cf32:	bf04      	itt	eq
 801cf34:	1809      	addeq	r1, r1, r0
 801cf36:	6021      	streq	r1, [r4, #0]
 801cf38:	6054      	str	r4, [r2, #4]
 801cf3a:	e7ca      	b.n	801ced2 <_free_r+0x22>
 801cf3c:	bd38      	pop	{r3, r4, r5, pc}
 801cf3e:	bf00      	nop
 801cf40:	2000c428 	.word	0x2000c428

0801cf44 <malloc>:
 801cf44:	4b02      	ldr	r3, [pc, #8]	@ (801cf50 <malloc+0xc>)
 801cf46:	4601      	mov	r1, r0
 801cf48:	6818      	ldr	r0, [r3, #0]
 801cf4a:	f000 b825 	b.w	801cf98 <_malloc_r>
 801cf4e:	bf00      	nop
 801cf50:	20000160 	.word	0x20000160

0801cf54 <sbrk_aligned>:
 801cf54:	b570      	push	{r4, r5, r6, lr}
 801cf56:	4e0f      	ldr	r6, [pc, #60]	@ (801cf94 <sbrk_aligned+0x40>)
 801cf58:	460c      	mov	r4, r1
 801cf5a:	6831      	ldr	r1, [r6, #0]
 801cf5c:	4605      	mov	r5, r0
 801cf5e:	b911      	cbnz	r1, 801cf66 <sbrk_aligned+0x12>
 801cf60:	f002 fa64 	bl	801f42c <_sbrk_r>
 801cf64:	6030      	str	r0, [r6, #0]
 801cf66:	4621      	mov	r1, r4
 801cf68:	4628      	mov	r0, r5
 801cf6a:	f002 fa5f 	bl	801f42c <_sbrk_r>
 801cf6e:	1c43      	adds	r3, r0, #1
 801cf70:	d103      	bne.n	801cf7a <sbrk_aligned+0x26>
 801cf72:	f04f 34ff 	mov.w	r4, #4294967295
 801cf76:	4620      	mov	r0, r4
 801cf78:	bd70      	pop	{r4, r5, r6, pc}
 801cf7a:	1cc4      	adds	r4, r0, #3
 801cf7c:	f024 0403 	bic.w	r4, r4, #3
 801cf80:	42a0      	cmp	r0, r4
 801cf82:	d0f8      	beq.n	801cf76 <sbrk_aligned+0x22>
 801cf84:	1a21      	subs	r1, r4, r0
 801cf86:	4628      	mov	r0, r5
 801cf88:	f002 fa50 	bl	801f42c <_sbrk_r>
 801cf8c:	3001      	adds	r0, #1
 801cf8e:	d1f2      	bne.n	801cf76 <sbrk_aligned+0x22>
 801cf90:	e7ef      	b.n	801cf72 <sbrk_aligned+0x1e>
 801cf92:	bf00      	nop
 801cf94:	2000c424 	.word	0x2000c424

0801cf98 <_malloc_r>:
 801cf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf9c:	1ccd      	adds	r5, r1, #3
 801cf9e:	f025 0503 	bic.w	r5, r5, #3
 801cfa2:	3508      	adds	r5, #8
 801cfa4:	2d0c      	cmp	r5, #12
 801cfa6:	bf38      	it	cc
 801cfa8:	250c      	movcc	r5, #12
 801cfaa:	2d00      	cmp	r5, #0
 801cfac:	4606      	mov	r6, r0
 801cfae:	db01      	blt.n	801cfb4 <_malloc_r+0x1c>
 801cfb0:	42a9      	cmp	r1, r5
 801cfb2:	d904      	bls.n	801cfbe <_malloc_r+0x26>
 801cfb4:	230c      	movs	r3, #12
 801cfb6:	6033      	str	r3, [r6, #0]
 801cfb8:	2000      	movs	r0, #0
 801cfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d094 <_malloc_r+0xfc>
 801cfc2:	f000 f869 	bl	801d098 <__malloc_lock>
 801cfc6:	f8d8 3000 	ldr.w	r3, [r8]
 801cfca:	461c      	mov	r4, r3
 801cfcc:	bb44      	cbnz	r4, 801d020 <_malloc_r+0x88>
 801cfce:	4629      	mov	r1, r5
 801cfd0:	4630      	mov	r0, r6
 801cfd2:	f7ff ffbf 	bl	801cf54 <sbrk_aligned>
 801cfd6:	1c43      	adds	r3, r0, #1
 801cfd8:	4604      	mov	r4, r0
 801cfda:	d158      	bne.n	801d08e <_malloc_r+0xf6>
 801cfdc:	f8d8 4000 	ldr.w	r4, [r8]
 801cfe0:	4627      	mov	r7, r4
 801cfe2:	2f00      	cmp	r7, #0
 801cfe4:	d143      	bne.n	801d06e <_malloc_r+0xd6>
 801cfe6:	2c00      	cmp	r4, #0
 801cfe8:	d04b      	beq.n	801d082 <_malloc_r+0xea>
 801cfea:	6823      	ldr	r3, [r4, #0]
 801cfec:	4639      	mov	r1, r7
 801cfee:	4630      	mov	r0, r6
 801cff0:	eb04 0903 	add.w	r9, r4, r3
 801cff4:	f002 fa1a 	bl	801f42c <_sbrk_r>
 801cff8:	4581      	cmp	r9, r0
 801cffa:	d142      	bne.n	801d082 <_malloc_r+0xea>
 801cffc:	6821      	ldr	r1, [r4, #0]
 801cffe:	1a6d      	subs	r5, r5, r1
 801d000:	4629      	mov	r1, r5
 801d002:	4630      	mov	r0, r6
 801d004:	f7ff ffa6 	bl	801cf54 <sbrk_aligned>
 801d008:	3001      	adds	r0, #1
 801d00a:	d03a      	beq.n	801d082 <_malloc_r+0xea>
 801d00c:	6823      	ldr	r3, [r4, #0]
 801d00e:	442b      	add	r3, r5
 801d010:	6023      	str	r3, [r4, #0]
 801d012:	f8d8 3000 	ldr.w	r3, [r8]
 801d016:	685a      	ldr	r2, [r3, #4]
 801d018:	bb62      	cbnz	r2, 801d074 <_malloc_r+0xdc>
 801d01a:	f8c8 7000 	str.w	r7, [r8]
 801d01e:	e00f      	b.n	801d040 <_malloc_r+0xa8>
 801d020:	6822      	ldr	r2, [r4, #0]
 801d022:	1b52      	subs	r2, r2, r5
 801d024:	d420      	bmi.n	801d068 <_malloc_r+0xd0>
 801d026:	2a0b      	cmp	r2, #11
 801d028:	d917      	bls.n	801d05a <_malloc_r+0xc2>
 801d02a:	1961      	adds	r1, r4, r5
 801d02c:	42a3      	cmp	r3, r4
 801d02e:	6025      	str	r5, [r4, #0]
 801d030:	bf18      	it	ne
 801d032:	6059      	strne	r1, [r3, #4]
 801d034:	6863      	ldr	r3, [r4, #4]
 801d036:	bf08      	it	eq
 801d038:	f8c8 1000 	streq.w	r1, [r8]
 801d03c:	5162      	str	r2, [r4, r5]
 801d03e:	604b      	str	r3, [r1, #4]
 801d040:	4630      	mov	r0, r6
 801d042:	f000 f82f 	bl	801d0a4 <__malloc_unlock>
 801d046:	f104 000b 	add.w	r0, r4, #11
 801d04a:	1d23      	adds	r3, r4, #4
 801d04c:	f020 0007 	bic.w	r0, r0, #7
 801d050:	1ac2      	subs	r2, r0, r3
 801d052:	bf1c      	itt	ne
 801d054:	1a1b      	subne	r3, r3, r0
 801d056:	50a3      	strne	r3, [r4, r2]
 801d058:	e7af      	b.n	801cfba <_malloc_r+0x22>
 801d05a:	6862      	ldr	r2, [r4, #4]
 801d05c:	42a3      	cmp	r3, r4
 801d05e:	bf0c      	ite	eq
 801d060:	f8c8 2000 	streq.w	r2, [r8]
 801d064:	605a      	strne	r2, [r3, #4]
 801d066:	e7eb      	b.n	801d040 <_malloc_r+0xa8>
 801d068:	4623      	mov	r3, r4
 801d06a:	6864      	ldr	r4, [r4, #4]
 801d06c:	e7ae      	b.n	801cfcc <_malloc_r+0x34>
 801d06e:	463c      	mov	r4, r7
 801d070:	687f      	ldr	r7, [r7, #4]
 801d072:	e7b6      	b.n	801cfe2 <_malloc_r+0x4a>
 801d074:	461a      	mov	r2, r3
 801d076:	685b      	ldr	r3, [r3, #4]
 801d078:	42a3      	cmp	r3, r4
 801d07a:	d1fb      	bne.n	801d074 <_malloc_r+0xdc>
 801d07c:	2300      	movs	r3, #0
 801d07e:	6053      	str	r3, [r2, #4]
 801d080:	e7de      	b.n	801d040 <_malloc_r+0xa8>
 801d082:	230c      	movs	r3, #12
 801d084:	6033      	str	r3, [r6, #0]
 801d086:	4630      	mov	r0, r6
 801d088:	f000 f80c 	bl	801d0a4 <__malloc_unlock>
 801d08c:	e794      	b.n	801cfb8 <_malloc_r+0x20>
 801d08e:	6005      	str	r5, [r0, #0]
 801d090:	e7d6      	b.n	801d040 <_malloc_r+0xa8>
 801d092:	bf00      	nop
 801d094:	2000c428 	.word	0x2000c428

0801d098 <__malloc_lock>:
 801d098:	4801      	ldr	r0, [pc, #4]	@ (801d0a0 <__malloc_lock+0x8>)
 801d09a:	f7ff b880 	b.w	801c19e <__retarget_lock_acquire_recursive>
 801d09e:	bf00      	nop
 801d0a0:	2000c420 	.word	0x2000c420

0801d0a4 <__malloc_unlock>:
 801d0a4:	4801      	ldr	r0, [pc, #4]	@ (801d0ac <__malloc_unlock+0x8>)
 801d0a6:	f7ff b87b 	b.w	801c1a0 <__retarget_lock_release_recursive>
 801d0aa:	bf00      	nop
 801d0ac:	2000c420 	.word	0x2000c420

0801d0b0 <_Balloc>:
 801d0b0:	b570      	push	{r4, r5, r6, lr}
 801d0b2:	69c6      	ldr	r6, [r0, #28]
 801d0b4:	4604      	mov	r4, r0
 801d0b6:	460d      	mov	r5, r1
 801d0b8:	b976      	cbnz	r6, 801d0d8 <_Balloc+0x28>
 801d0ba:	2010      	movs	r0, #16
 801d0bc:	f7ff ff42 	bl	801cf44 <malloc>
 801d0c0:	4602      	mov	r2, r0
 801d0c2:	61e0      	str	r0, [r4, #28]
 801d0c4:	b920      	cbnz	r0, 801d0d0 <_Balloc+0x20>
 801d0c6:	4b18      	ldr	r3, [pc, #96]	@ (801d128 <_Balloc+0x78>)
 801d0c8:	4818      	ldr	r0, [pc, #96]	@ (801d12c <_Balloc+0x7c>)
 801d0ca:	216b      	movs	r1, #107	@ 0x6b
 801d0cc:	f7ff f878 	bl	801c1c0 <__assert_func>
 801d0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d0d4:	6006      	str	r6, [r0, #0]
 801d0d6:	60c6      	str	r6, [r0, #12]
 801d0d8:	69e6      	ldr	r6, [r4, #28]
 801d0da:	68f3      	ldr	r3, [r6, #12]
 801d0dc:	b183      	cbz	r3, 801d100 <_Balloc+0x50>
 801d0de:	69e3      	ldr	r3, [r4, #28]
 801d0e0:	68db      	ldr	r3, [r3, #12]
 801d0e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d0e6:	b9b8      	cbnz	r0, 801d118 <_Balloc+0x68>
 801d0e8:	2101      	movs	r1, #1
 801d0ea:	fa01 f605 	lsl.w	r6, r1, r5
 801d0ee:	1d72      	adds	r2, r6, #5
 801d0f0:	0092      	lsls	r2, r2, #2
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	f002 f9bb 	bl	801f46e <_calloc_r>
 801d0f8:	b160      	cbz	r0, 801d114 <_Balloc+0x64>
 801d0fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d0fe:	e00e      	b.n	801d11e <_Balloc+0x6e>
 801d100:	2221      	movs	r2, #33	@ 0x21
 801d102:	2104      	movs	r1, #4
 801d104:	4620      	mov	r0, r4
 801d106:	f002 f9b2 	bl	801f46e <_calloc_r>
 801d10a:	69e3      	ldr	r3, [r4, #28]
 801d10c:	60f0      	str	r0, [r6, #12]
 801d10e:	68db      	ldr	r3, [r3, #12]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d1e4      	bne.n	801d0de <_Balloc+0x2e>
 801d114:	2000      	movs	r0, #0
 801d116:	bd70      	pop	{r4, r5, r6, pc}
 801d118:	6802      	ldr	r2, [r0, #0]
 801d11a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d11e:	2300      	movs	r3, #0
 801d120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d124:	e7f7      	b.n	801d116 <_Balloc+0x66>
 801d126:	bf00      	nop
 801d128:	080220fd 	.word	0x080220fd
 801d12c:	0802217d 	.word	0x0802217d

0801d130 <_Bfree>:
 801d130:	b570      	push	{r4, r5, r6, lr}
 801d132:	69c6      	ldr	r6, [r0, #28]
 801d134:	4605      	mov	r5, r0
 801d136:	460c      	mov	r4, r1
 801d138:	b976      	cbnz	r6, 801d158 <_Bfree+0x28>
 801d13a:	2010      	movs	r0, #16
 801d13c:	f7ff ff02 	bl	801cf44 <malloc>
 801d140:	4602      	mov	r2, r0
 801d142:	61e8      	str	r0, [r5, #28]
 801d144:	b920      	cbnz	r0, 801d150 <_Bfree+0x20>
 801d146:	4b09      	ldr	r3, [pc, #36]	@ (801d16c <_Bfree+0x3c>)
 801d148:	4809      	ldr	r0, [pc, #36]	@ (801d170 <_Bfree+0x40>)
 801d14a:	218f      	movs	r1, #143	@ 0x8f
 801d14c:	f7ff f838 	bl	801c1c0 <__assert_func>
 801d150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d154:	6006      	str	r6, [r0, #0]
 801d156:	60c6      	str	r6, [r0, #12]
 801d158:	b13c      	cbz	r4, 801d16a <_Bfree+0x3a>
 801d15a:	69eb      	ldr	r3, [r5, #28]
 801d15c:	6862      	ldr	r2, [r4, #4]
 801d15e:	68db      	ldr	r3, [r3, #12]
 801d160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d164:	6021      	str	r1, [r4, #0]
 801d166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d16a:	bd70      	pop	{r4, r5, r6, pc}
 801d16c:	080220fd 	.word	0x080220fd
 801d170:	0802217d 	.word	0x0802217d

0801d174 <__multadd>:
 801d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d178:	690d      	ldr	r5, [r1, #16]
 801d17a:	4607      	mov	r7, r0
 801d17c:	460c      	mov	r4, r1
 801d17e:	461e      	mov	r6, r3
 801d180:	f101 0c14 	add.w	ip, r1, #20
 801d184:	2000      	movs	r0, #0
 801d186:	f8dc 3000 	ldr.w	r3, [ip]
 801d18a:	b299      	uxth	r1, r3
 801d18c:	fb02 6101 	mla	r1, r2, r1, r6
 801d190:	0c1e      	lsrs	r6, r3, #16
 801d192:	0c0b      	lsrs	r3, r1, #16
 801d194:	fb02 3306 	mla	r3, r2, r6, r3
 801d198:	b289      	uxth	r1, r1
 801d19a:	3001      	adds	r0, #1
 801d19c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d1a0:	4285      	cmp	r5, r0
 801d1a2:	f84c 1b04 	str.w	r1, [ip], #4
 801d1a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d1aa:	dcec      	bgt.n	801d186 <__multadd+0x12>
 801d1ac:	b30e      	cbz	r6, 801d1f2 <__multadd+0x7e>
 801d1ae:	68a3      	ldr	r3, [r4, #8]
 801d1b0:	42ab      	cmp	r3, r5
 801d1b2:	dc19      	bgt.n	801d1e8 <__multadd+0x74>
 801d1b4:	6861      	ldr	r1, [r4, #4]
 801d1b6:	4638      	mov	r0, r7
 801d1b8:	3101      	adds	r1, #1
 801d1ba:	f7ff ff79 	bl	801d0b0 <_Balloc>
 801d1be:	4680      	mov	r8, r0
 801d1c0:	b928      	cbnz	r0, 801d1ce <__multadd+0x5a>
 801d1c2:	4602      	mov	r2, r0
 801d1c4:	4b0c      	ldr	r3, [pc, #48]	@ (801d1f8 <__multadd+0x84>)
 801d1c6:	480d      	ldr	r0, [pc, #52]	@ (801d1fc <__multadd+0x88>)
 801d1c8:	21ba      	movs	r1, #186	@ 0xba
 801d1ca:	f7fe fff9 	bl	801c1c0 <__assert_func>
 801d1ce:	6922      	ldr	r2, [r4, #16]
 801d1d0:	3202      	adds	r2, #2
 801d1d2:	f104 010c 	add.w	r1, r4, #12
 801d1d6:	0092      	lsls	r2, r2, #2
 801d1d8:	300c      	adds	r0, #12
 801d1da:	f7fe ffe2 	bl	801c1a2 <memcpy>
 801d1de:	4621      	mov	r1, r4
 801d1e0:	4638      	mov	r0, r7
 801d1e2:	f7ff ffa5 	bl	801d130 <_Bfree>
 801d1e6:	4644      	mov	r4, r8
 801d1e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d1ec:	3501      	adds	r5, #1
 801d1ee:	615e      	str	r6, [r3, #20]
 801d1f0:	6125      	str	r5, [r4, #16]
 801d1f2:	4620      	mov	r0, r4
 801d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1f8:	0802216c 	.word	0x0802216c
 801d1fc:	0802217d 	.word	0x0802217d

0801d200 <__s2b>:
 801d200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d204:	460c      	mov	r4, r1
 801d206:	4615      	mov	r5, r2
 801d208:	461f      	mov	r7, r3
 801d20a:	2209      	movs	r2, #9
 801d20c:	3308      	adds	r3, #8
 801d20e:	4606      	mov	r6, r0
 801d210:	fb93 f3f2 	sdiv	r3, r3, r2
 801d214:	2100      	movs	r1, #0
 801d216:	2201      	movs	r2, #1
 801d218:	429a      	cmp	r2, r3
 801d21a:	db09      	blt.n	801d230 <__s2b+0x30>
 801d21c:	4630      	mov	r0, r6
 801d21e:	f7ff ff47 	bl	801d0b0 <_Balloc>
 801d222:	b940      	cbnz	r0, 801d236 <__s2b+0x36>
 801d224:	4602      	mov	r2, r0
 801d226:	4b19      	ldr	r3, [pc, #100]	@ (801d28c <__s2b+0x8c>)
 801d228:	4819      	ldr	r0, [pc, #100]	@ (801d290 <__s2b+0x90>)
 801d22a:	21d3      	movs	r1, #211	@ 0xd3
 801d22c:	f7fe ffc8 	bl	801c1c0 <__assert_func>
 801d230:	0052      	lsls	r2, r2, #1
 801d232:	3101      	adds	r1, #1
 801d234:	e7f0      	b.n	801d218 <__s2b+0x18>
 801d236:	9b08      	ldr	r3, [sp, #32]
 801d238:	6143      	str	r3, [r0, #20]
 801d23a:	2d09      	cmp	r5, #9
 801d23c:	f04f 0301 	mov.w	r3, #1
 801d240:	6103      	str	r3, [r0, #16]
 801d242:	dd16      	ble.n	801d272 <__s2b+0x72>
 801d244:	f104 0909 	add.w	r9, r4, #9
 801d248:	46c8      	mov	r8, r9
 801d24a:	442c      	add	r4, r5
 801d24c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d250:	4601      	mov	r1, r0
 801d252:	3b30      	subs	r3, #48	@ 0x30
 801d254:	220a      	movs	r2, #10
 801d256:	4630      	mov	r0, r6
 801d258:	f7ff ff8c 	bl	801d174 <__multadd>
 801d25c:	45a0      	cmp	r8, r4
 801d25e:	d1f5      	bne.n	801d24c <__s2b+0x4c>
 801d260:	f1a5 0408 	sub.w	r4, r5, #8
 801d264:	444c      	add	r4, r9
 801d266:	1b2d      	subs	r5, r5, r4
 801d268:	1963      	adds	r3, r4, r5
 801d26a:	42bb      	cmp	r3, r7
 801d26c:	db04      	blt.n	801d278 <__s2b+0x78>
 801d26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d272:	340a      	adds	r4, #10
 801d274:	2509      	movs	r5, #9
 801d276:	e7f6      	b.n	801d266 <__s2b+0x66>
 801d278:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d27c:	4601      	mov	r1, r0
 801d27e:	3b30      	subs	r3, #48	@ 0x30
 801d280:	220a      	movs	r2, #10
 801d282:	4630      	mov	r0, r6
 801d284:	f7ff ff76 	bl	801d174 <__multadd>
 801d288:	e7ee      	b.n	801d268 <__s2b+0x68>
 801d28a:	bf00      	nop
 801d28c:	0802216c 	.word	0x0802216c
 801d290:	0802217d 	.word	0x0802217d

0801d294 <__hi0bits>:
 801d294:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d298:	4603      	mov	r3, r0
 801d29a:	bf36      	itet	cc
 801d29c:	0403      	lslcc	r3, r0, #16
 801d29e:	2000      	movcs	r0, #0
 801d2a0:	2010      	movcc	r0, #16
 801d2a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d2a6:	bf3c      	itt	cc
 801d2a8:	021b      	lslcc	r3, r3, #8
 801d2aa:	3008      	addcc	r0, #8
 801d2ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d2b0:	bf3c      	itt	cc
 801d2b2:	011b      	lslcc	r3, r3, #4
 801d2b4:	3004      	addcc	r0, #4
 801d2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d2ba:	bf3c      	itt	cc
 801d2bc:	009b      	lslcc	r3, r3, #2
 801d2be:	3002      	addcc	r0, #2
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	db05      	blt.n	801d2d0 <__hi0bits+0x3c>
 801d2c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d2c8:	f100 0001 	add.w	r0, r0, #1
 801d2cc:	bf08      	it	eq
 801d2ce:	2020      	moveq	r0, #32
 801d2d0:	4770      	bx	lr

0801d2d2 <__lo0bits>:
 801d2d2:	6803      	ldr	r3, [r0, #0]
 801d2d4:	4602      	mov	r2, r0
 801d2d6:	f013 0007 	ands.w	r0, r3, #7
 801d2da:	d00b      	beq.n	801d2f4 <__lo0bits+0x22>
 801d2dc:	07d9      	lsls	r1, r3, #31
 801d2de:	d421      	bmi.n	801d324 <__lo0bits+0x52>
 801d2e0:	0798      	lsls	r0, r3, #30
 801d2e2:	bf49      	itett	mi
 801d2e4:	085b      	lsrmi	r3, r3, #1
 801d2e6:	089b      	lsrpl	r3, r3, #2
 801d2e8:	2001      	movmi	r0, #1
 801d2ea:	6013      	strmi	r3, [r2, #0]
 801d2ec:	bf5c      	itt	pl
 801d2ee:	6013      	strpl	r3, [r2, #0]
 801d2f0:	2002      	movpl	r0, #2
 801d2f2:	4770      	bx	lr
 801d2f4:	b299      	uxth	r1, r3
 801d2f6:	b909      	cbnz	r1, 801d2fc <__lo0bits+0x2a>
 801d2f8:	0c1b      	lsrs	r3, r3, #16
 801d2fa:	2010      	movs	r0, #16
 801d2fc:	b2d9      	uxtb	r1, r3
 801d2fe:	b909      	cbnz	r1, 801d304 <__lo0bits+0x32>
 801d300:	3008      	adds	r0, #8
 801d302:	0a1b      	lsrs	r3, r3, #8
 801d304:	0719      	lsls	r1, r3, #28
 801d306:	bf04      	itt	eq
 801d308:	091b      	lsreq	r3, r3, #4
 801d30a:	3004      	addeq	r0, #4
 801d30c:	0799      	lsls	r1, r3, #30
 801d30e:	bf04      	itt	eq
 801d310:	089b      	lsreq	r3, r3, #2
 801d312:	3002      	addeq	r0, #2
 801d314:	07d9      	lsls	r1, r3, #31
 801d316:	d403      	bmi.n	801d320 <__lo0bits+0x4e>
 801d318:	085b      	lsrs	r3, r3, #1
 801d31a:	f100 0001 	add.w	r0, r0, #1
 801d31e:	d003      	beq.n	801d328 <__lo0bits+0x56>
 801d320:	6013      	str	r3, [r2, #0]
 801d322:	4770      	bx	lr
 801d324:	2000      	movs	r0, #0
 801d326:	4770      	bx	lr
 801d328:	2020      	movs	r0, #32
 801d32a:	4770      	bx	lr

0801d32c <__i2b>:
 801d32c:	b510      	push	{r4, lr}
 801d32e:	460c      	mov	r4, r1
 801d330:	2101      	movs	r1, #1
 801d332:	f7ff febd 	bl	801d0b0 <_Balloc>
 801d336:	4602      	mov	r2, r0
 801d338:	b928      	cbnz	r0, 801d346 <__i2b+0x1a>
 801d33a:	4b05      	ldr	r3, [pc, #20]	@ (801d350 <__i2b+0x24>)
 801d33c:	4805      	ldr	r0, [pc, #20]	@ (801d354 <__i2b+0x28>)
 801d33e:	f240 1145 	movw	r1, #325	@ 0x145
 801d342:	f7fe ff3d 	bl	801c1c0 <__assert_func>
 801d346:	2301      	movs	r3, #1
 801d348:	6144      	str	r4, [r0, #20]
 801d34a:	6103      	str	r3, [r0, #16]
 801d34c:	bd10      	pop	{r4, pc}
 801d34e:	bf00      	nop
 801d350:	0802216c 	.word	0x0802216c
 801d354:	0802217d 	.word	0x0802217d

0801d358 <__multiply>:
 801d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d35c:	4617      	mov	r7, r2
 801d35e:	690a      	ldr	r2, [r1, #16]
 801d360:	693b      	ldr	r3, [r7, #16]
 801d362:	429a      	cmp	r2, r3
 801d364:	bfa8      	it	ge
 801d366:	463b      	movge	r3, r7
 801d368:	4689      	mov	r9, r1
 801d36a:	bfa4      	itt	ge
 801d36c:	460f      	movge	r7, r1
 801d36e:	4699      	movge	r9, r3
 801d370:	693d      	ldr	r5, [r7, #16]
 801d372:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d376:	68bb      	ldr	r3, [r7, #8]
 801d378:	6879      	ldr	r1, [r7, #4]
 801d37a:	eb05 060a 	add.w	r6, r5, sl
 801d37e:	42b3      	cmp	r3, r6
 801d380:	b085      	sub	sp, #20
 801d382:	bfb8      	it	lt
 801d384:	3101      	addlt	r1, #1
 801d386:	f7ff fe93 	bl	801d0b0 <_Balloc>
 801d38a:	b930      	cbnz	r0, 801d39a <__multiply+0x42>
 801d38c:	4602      	mov	r2, r0
 801d38e:	4b41      	ldr	r3, [pc, #260]	@ (801d494 <__multiply+0x13c>)
 801d390:	4841      	ldr	r0, [pc, #260]	@ (801d498 <__multiply+0x140>)
 801d392:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d396:	f7fe ff13 	bl	801c1c0 <__assert_func>
 801d39a:	f100 0414 	add.w	r4, r0, #20
 801d39e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d3a2:	4623      	mov	r3, r4
 801d3a4:	2200      	movs	r2, #0
 801d3a6:	4573      	cmp	r3, lr
 801d3a8:	d320      	bcc.n	801d3ec <__multiply+0x94>
 801d3aa:	f107 0814 	add.w	r8, r7, #20
 801d3ae:	f109 0114 	add.w	r1, r9, #20
 801d3b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d3b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d3ba:	9302      	str	r3, [sp, #8]
 801d3bc:	1beb      	subs	r3, r5, r7
 801d3be:	3b15      	subs	r3, #21
 801d3c0:	f023 0303 	bic.w	r3, r3, #3
 801d3c4:	3304      	adds	r3, #4
 801d3c6:	3715      	adds	r7, #21
 801d3c8:	42bd      	cmp	r5, r7
 801d3ca:	bf38      	it	cc
 801d3cc:	2304      	movcc	r3, #4
 801d3ce:	9301      	str	r3, [sp, #4]
 801d3d0:	9b02      	ldr	r3, [sp, #8]
 801d3d2:	9103      	str	r1, [sp, #12]
 801d3d4:	428b      	cmp	r3, r1
 801d3d6:	d80c      	bhi.n	801d3f2 <__multiply+0x9a>
 801d3d8:	2e00      	cmp	r6, #0
 801d3da:	dd03      	ble.n	801d3e4 <__multiply+0x8c>
 801d3dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d055      	beq.n	801d490 <__multiply+0x138>
 801d3e4:	6106      	str	r6, [r0, #16]
 801d3e6:	b005      	add	sp, #20
 801d3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ec:	f843 2b04 	str.w	r2, [r3], #4
 801d3f0:	e7d9      	b.n	801d3a6 <__multiply+0x4e>
 801d3f2:	f8b1 a000 	ldrh.w	sl, [r1]
 801d3f6:	f1ba 0f00 	cmp.w	sl, #0
 801d3fa:	d01f      	beq.n	801d43c <__multiply+0xe4>
 801d3fc:	46c4      	mov	ip, r8
 801d3fe:	46a1      	mov	r9, r4
 801d400:	2700      	movs	r7, #0
 801d402:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d406:	f8d9 3000 	ldr.w	r3, [r9]
 801d40a:	fa1f fb82 	uxth.w	fp, r2
 801d40e:	b29b      	uxth	r3, r3
 801d410:	fb0a 330b 	mla	r3, sl, fp, r3
 801d414:	443b      	add	r3, r7
 801d416:	f8d9 7000 	ldr.w	r7, [r9]
 801d41a:	0c12      	lsrs	r2, r2, #16
 801d41c:	0c3f      	lsrs	r7, r7, #16
 801d41e:	fb0a 7202 	mla	r2, sl, r2, r7
 801d422:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d426:	b29b      	uxth	r3, r3
 801d428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d42c:	4565      	cmp	r5, ip
 801d42e:	f849 3b04 	str.w	r3, [r9], #4
 801d432:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d436:	d8e4      	bhi.n	801d402 <__multiply+0xaa>
 801d438:	9b01      	ldr	r3, [sp, #4]
 801d43a:	50e7      	str	r7, [r4, r3]
 801d43c:	9b03      	ldr	r3, [sp, #12]
 801d43e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d442:	3104      	adds	r1, #4
 801d444:	f1b9 0f00 	cmp.w	r9, #0
 801d448:	d020      	beq.n	801d48c <__multiply+0x134>
 801d44a:	6823      	ldr	r3, [r4, #0]
 801d44c:	4647      	mov	r7, r8
 801d44e:	46a4      	mov	ip, r4
 801d450:	f04f 0a00 	mov.w	sl, #0
 801d454:	f8b7 b000 	ldrh.w	fp, [r7]
 801d458:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d45c:	fb09 220b 	mla	r2, r9, fp, r2
 801d460:	4452      	add	r2, sl
 801d462:	b29b      	uxth	r3, r3
 801d464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d468:	f84c 3b04 	str.w	r3, [ip], #4
 801d46c:	f857 3b04 	ldr.w	r3, [r7], #4
 801d470:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d474:	f8bc 3000 	ldrh.w	r3, [ip]
 801d478:	fb09 330a 	mla	r3, r9, sl, r3
 801d47c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d480:	42bd      	cmp	r5, r7
 801d482:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d486:	d8e5      	bhi.n	801d454 <__multiply+0xfc>
 801d488:	9a01      	ldr	r2, [sp, #4]
 801d48a:	50a3      	str	r3, [r4, r2]
 801d48c:	3404      	adds	r4, #4
 801d48e:	e79f      	b.n	801d3d0 <__multiply+0x78>
 801d490:	3e01      	subs	r6, #1
 801d492:	e7a1      	b.n	801d3d8 <__multiply+0x80>
 801d494:	0802216c 	.word	0x0802216c
 801d498:	0802217d 	.word	0x0802217d

0801d49c <__pow5mult>:
 801d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4a0:	4615      	mov	r5, r2
 801d4a2:	f012 0203 	ands.w	r2, r2, #3
 801d4a6:	4607      	mov	r7, r0
 801d4a8:	460e      	mov	r6, r1
 801d4aa:	d007      	beq.n	801d4bc <__pow5mult+0x20>
 801d4ac:	4c25      	ldr	r4, [pc, #148]	@ (801d544 <__pow5mult+0xa8>)
 801d4ae:	3a01      	subs	r2, #1
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d4b6:	f7ff fe5d 	bl	801d174 <__multadd>
 801d4ba:	4606      	mov	r6, r0
 801d4bc:	10ad      	asrs	r5, r5, #2
 801d4be:	d03d      	beq.n	801d53c <__pow5mult+0xa0>
 801d4c0:	69fc      	ldr	r4, [r7, #28]
 801d4c2:	b97c      	cbnz	r4, 801d4e4 <__pow5mult+0x48>
 801d4c4:	2010      	movs	r0, #16
 801d4c6:	f7ff fd3d 	bl	801cf44 <malloc>
 801d4ca:	4602      	mov	r2, r0
 801d4cc:	61f8      	str	r0, [r7, #28]
 801d4ce:	b928      	cbnz	r0, 801d4dc <__pow5mult+0x40>
 801d4d0:	4b1d      	ldr	r3, [pc, #116]	@ (801d548 <__pow5mult+0xac>)
 801d4d2:	481e      	ldr	r0, [pc, #120]	@ (801d54c <__pow5mult+0xb0>)
 801d4d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d4d8:	f7fe fe72 	bl	801c1c0 <__assert_func>
 801d4dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d4e0:	6004      	str	r4, [r0, #0]
 801d4e2:	60c4      	str	r4, [r0, #12]
 801d4e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d4e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d4ec:	b94c      	cbnz	r4, 801d502 <__pow5mult+0x66>
 801d4ee:	f240 2171 	movw	r1, #625	@ 0x271
 801d4f2:	4638      	mov	r0, r7
 801d4f4:	f7ff ff1a 	bl	801d32c <__i2b>
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	f8c8 0008 	str.w	r0, [r8, #8]
 801d4fe:	4604      	mov	r4, r0
 801d500:	6003      	str	r3, [r0, #0]
 801d502:	f04f 0900 	mov.w	r9, #0
 801d506:	07eb      	lsls	r3, r5, #31
 801d508:	d50a      	bpl.n	801d520 <__pow5mult+0x84>
 801d50a:	4631      	mov	r1, r6
 801d50c:	4622      	mov	r2, r4
 801d50e:	4638      	mov	r0, r7
 801d510:	f7ff ff22 	bl	801d358 <__multiply>
 801d514:	4631      	mov	r1, r6
 801d516:	4680      	mov	r8, r0
 801d518:	4638      	mov	r0, r7
 801d51a:	f7ff fe09 	bl	801d130 <_Bfree>
 801d51e:	4646      	mov	r6, r8
 801d520:	106d      	asrs	r5, r5, #1
 801d522:	d00b      	beq.n	801d53c <__pow5mult+0xa0>
 801d524:	6820      	ldr	r0, [r4, #0]
 801d526:	b938      	cbnz	r0, 801d538 <__pow5mult+0x9c>
 801d528:	4622      	mov	r2, r4
 801d52a:	4621      	mov	r1, r4
 801d52c:	4638      	mov	r0, r7
 801d52e:	f7ff ff13 	bl	801d358 <__multiply>
 801d532:	6020      	str	r0, [r4, #0]
 801d534:	f8c0 9000 	str.w	r9, [r0]
 801d538:	4604      	mov	r4, r0
 801d53a:	e7e4      	b.n	801d506 <__pow5mult+0x6a>
 801d53c:	4630      	mov	r0, r6
 801d53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d542:	bf00      	nop
 801d544:	0802267c 	.word	0x0802267c
 801d548:	080220fd 	.word	0x080220fd
 801d54c:	0802217d 	.word	0x0802217d

0801d550 <__lshift>:
 801d550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d554:	460c      	mov	r4, r1
 801d556:	6849      	ldr	r1, [r1, #4]
 801d558:	6923      	ldr	r3, [r4, #16]
 801d55a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d55e:	68a3      	ldr	r3, [r4, #8]
 801d560:	4607      	mov	r7, r0
 801d562:	4691      	mov	r9, r2
 801d564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d568:	f108 0601 	add.w	r6, r8, #1
 801d56c:	42b3      	cmp	r3, r6
 801d56e:	db0b      	blt.n	801d588 <__lshift+0x38>
 801d570:	4638      	mov	r0, r7
 801d572:	f7ff fd9d 	bl	801d0b0 <_Balloc>
 801d576:	4605      	mov	r5, r0
 801d578:	b948      	cbnz	r0, 801d58e <__lshift+0x3e>
 801d57a:	4602      	mov	r2, r0
 801d57c:	4b28      	ldr	r3, [pc, #160]	@ (801d620 <__lshift+0xd0>)
 801d57e:	4829      	ldr	r0, [pc, #164]	@ (801d624 <__lshift+0xd4>)
 801d580:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d584:	f7fe fe1c 	bl	801c1c0 <__assert_func>
 801d588:	3101      	adds	r1, #1
 801d58a:	005b      	lsls	r3, r3, #1
 801d58c:	e7ee      	b.n	801d56c <__lshift+0x1c>
 801d58e:	2300      	movs	r3, #0
 801d590:	f100 0114 	add.w	r1, r0, #20
 801d594:	f100 0210 	add.w	r2, r0, #16
 801d598:	4618      	mov	r0, r3
 801d59a:	4553      	cmp	r3, sl
 801d59c:	db33      	blt.n	801d606 <__lshift+0xb6>
 801d59e:	6920      	ldr	r0, [r4, #16]
 801d5a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d5a4:	f104 0314 	add.w	r3, r4, #20
 801d5a8:	f019 091f 	ands.w	r9, r9, #31
 801d5ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d5b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d5b4:	d02b      	beq.n	801d60e <__lshift+0xbe>
 801d5b6:	f1c9 0e20 	rsb	lr, r9, #32
 801d5ba:	468a      	mov	sl, r1
 801d5bc:	2200      	movs	r2, #0
 801d5be:	6818      	ldr	r0, [r3, #0]
 801d5c0:	fa00 f009 	lsl.w	r0, r0, r9
 801d5c4:	4310      	orrs	r0, r2
 801d5c6:	f84a 0b04 	str.w	r0, [sl], #4
 801d5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5ce:	459c      	cmp	ip, r3
 801d5d0:	fa22 f20e 	lsr.w	r2, r2, lr
 801d5d4:	d8f3      	bhi.n	801d5be <__lshift+0x6e>
 801d5d6:	ebac 0304 	sub.w	r3, ip, r4
 801d5da:	3b15      	subs	r3, #21
 801d5dc:	f023 0303 	bic.w	r3, r3, #3
 801d5e0:	3304      	adds	r3, #4
 801d5e2:	f104 0015 	add.w	r0, r4, #21
 801d5e6:	4560      	cmp	r0, ip
 801d5e8:	bf88      	it	hi
 801d5ea:	2304      	movhi	r3, #4
 801d5ec:	50ca      	str	r2, [r1, r3]
 801d5ee:	b10a      	cbz	r2, 801d5f4 <__lshift+0xa4>
 801d5f0:	f108 0602 	add.w	r6, r8, #2
 801d5f4:	3e01      	subs	r6, #1
 801d5f6:	4638      	mov	r0, r7
 801d5f8:	612e      	str	r6, [r5, #16]
 801d5fa:	4621      	mov	r1, r4
 801d5fc:	f7ff fd98 	bl	801d130 <_Bfree>
 801d600:	4628      	mov	r0, r5
 801d602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d606:	f842 0f04 	str.w	r0, [r2, #4]!
 801d60a:	3301      	adds	r3, #1
 801d60c:	e7c5      	b.n	801d59a <__lshift+0x4a>
 801d60e:	3904      	subs	r1, #4
 801d610:	f853 2b04 	ldr.w	r2, [r3], #4
 801d614:	f841 2f04 	str.w	r2, [r1, #4]!
 801d618:	459c      	cmp	ip, r3
 801d61a:	d8f9      	bhi.n	801d610 <__lshift+0xc0>
 801d61c:	e7ea      	b.n	801d5f4 <__lshift+0xa4>
 801d61e:	bf00      	nop
 801d620:	0802216c 	.word	0x0802216c
 801d624:	0802217d 	.word	0x0802217d

0801d628 <__mcmp>:
 801d628:	690a      	ldr	r2, [r1, #16]
 801d62a:	4603      	mov	r3, r0
 801d62c:	6900      	ldr	r0, [r0, #16]
 801d62e:	1a80      	subs	r0, r0, r2
 801d630:	b530      	push	{r4, r5, lr}
 801d632:	d10e      	bne.n	801d652 <__mcmp+0x2a>
 801d634:	3314      	adds	r3, #20
 801d636:	3114      	adds	r1, #20
 801d638:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d63c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d648:	4295      	cmp	r5, r2
 801d64a:	d003      	beq.n	801d654 <__mcmp+0x2c>
 801d64c:	d205      	bcs.n	801d65a <__mcmp+0x32>
 801d64e:	f04f 30ff 	mov.w	r0, #4294967295
 801d652:	bd30      	pop	{r4, r5, pc}
 801d654:	42a3      	cmp	r3, r4
 801d656:	d3f3      	bcc.n	801d640 <__mcmp+0x18>
 801d658:	e7fb      	b.n	801d652 <__mcmp+0x2a>
 801d65a:	2001      	movs	r0, #1
 801d65c:	e7f9      	b.n	801d652 <__mcmp+0x2a>
	...

0801d660 <__mdiff>:
 801d660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d664:	4689      	mov	r9, r1
 801d666:	4606      	mov	r6, r0
 801d668:	4611      	mov	r1, r2
 801d66a:	4648      	mov	r0, r9
 801d66c:	4614      	mov	r4, r2
 801d66e:	f7ff ffdb 	bl	801d628 <__mcmp>
 801d672:	1e05      	subs	r5, r0, #0
 801d674:	d112      	bne.n	801d69c <__mdiff+0x3c>
 801d676:	4629      	mov	r1, r5
 801d678:	4630      	mov	r0, r6
 801d67a:	f7ff fd19 	bl	801d0b0 <_Balloc>
 801d67e:	4602      	mov	r2, r0
 801d680:	b928      	cbnz	r0, 801d68e <__mdiff+0x2e>
 801d682:	4b3f      	ldr	r3, [pc, #252]	@ (801d780 <__mdiff+0x120>)
 801d684:	f240 2137 	movw	r1, #567	@ 0x237
 801d688:	483e      	ldr	r0, [pc, #248]	@ (801d784 <__mdiff+0x124>)
 801d68a:	f7fe fd99 	bl	801c1c0 <__assert_func>
 801d68e:	2301      	movs	r3, #1
 801d690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d694:	4610      	mov	r0, r2
 801d696:	b003      	add	sp, #12
 801d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d69c:	bfbc      	itt	lt
 801d69e:	464b      	movlt	r3, r9
 801d6a0:	46a1      	movlt	r9, r4
 801d6a2:	4630      	mov	r0, r6
 801d6a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d6a8:	bfba      	itte	lt
 801d6aa:	461c      	movlt	r4, r3
 801d6ac:	2501      	movlt	r5, #1
 801d6ae:	2500      	movge	r5, #0
 801d6b0:	f7ff fcfe 	bl	801d0b0 <_Balloc>
 801d6b4:	4602      	mov	r2, r0
 801d6b6:	b918      	cbnz	r0, 801d6c0 <__mdiff+0x60>
 801d6b8:	4b31      	ldr	r3, [pc, #196]	@ (801d780 <__mdiff+0x120>)
 801d6ba:	f240 2145 	movw	r1, #581	@ 0x245
 801d6be:	e7e3      	b.n	801d688 <__mdiff+0x28>
 801d6c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d6c4:	6926      	ldr	r6, [r4, #16]
 801d6c6:	60c5      	str	r5, [r0, #12]
 801d6c8:	f109 0310 	add.w	r3, r9, #16
 801d6cc:	f109 0514 	add.w	r5, r9, #20
 801d6d0:	f104 0e14 	add.w	lr, r4, #20
 801d6d4:	f100 0b14 	add.w	fp, r0, #20
 801d6d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d6dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d6e0:	9301      	str	r3, [sp, #4]
 801d6e2:	46d9      	mov	r9, fp
 801d6e4:	f04f 0c00 	mov.w	ip, #0
 801d6e8:	9b01      	ldr	r3, [sp, #4]
 801d6ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d6ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d6f2:	9301      	str	r3, [sp, #4]
 801d6f4:	fa1f f38a 	uxth.w	r3, sl
 801d6f8:	4619      	mov	r1, r3
 801d6fa:	b283      	uxth	r3, r0
 801d6fc:	1acb      	subs	r3, r1, r3
 801d6fe:	0c00      	lsrs	r0, r0, #16
 801d700:	4463      	add	r3, ip
 801d702:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d706:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d70a:	b29b      	uxth	r3, r3
 801d70c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d710:	4576      	cmp	r6, lr
 801d712:	f849 3b04 	str.w	r3, [r9], #4
 801d716:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d71a:	d8e5      	bhi.n	801d6e8 <__mdiff+0x88>
 801d71c:	1b33      	subs	r3, r6, r4
 801d71e:	3b15      	subs	r3, #21
 801d720:	f023 0303 	bic.w	r3, r3, #3
 801d724:	3415      	adds	r4, #21
 801d726:	3304      	adds	r3, #4
 801d728:	42a6      	cmp	r6, r4
 801d72a:	bf38      	it	cc
 801d72c:	2304      	movcc	r3, #4
 801d72e:	441d      	add	r5, r3
 801d730:	445b      	add	r3, fp
 801d732:	461e      	mov	r6, r3
 801d734:	462c      	mov	r4, r5
 801d736:	4544      	cmp	r4, r8
 801d738:	d30e      	bcc.n	801d758 <__mdiff+0xf8>
 801d73a:	f108 0103 	add.w	r1, r8, #3
 801d73e:	1b49      	subs	r1, r1, r5
 801d740:	f021 0103 	bic.w	r1, r1, #3
 801d744:	3d03      	subs	r5, #3
 801d746:	45a8      	cmp	r8, r5
 801d748:	bf38      	it	cc
 801d74a:	2100      	movcc	r1, #0
 801d74c:	440b      	add	r3, r1
 801d74e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d752:	b191      	cbz	r1, 801d77a <__mdiff+0x11a>
 801d754:	6117      	str	r7, [r2, #16]
 801d756:	e79d      	b.n	801d694 <__mdiff+0x34>
 801d758:	f854 1b04 	ldr.w	r1, [r4], #4
 801d75c:	46e6      	mov	lr, ip
 801d75e:	0c08      	lsrs	r0, r1, #16
 801d760:	fa1c fc81 	uxtah	ip, ip, r1
 801d764:	4471      	add	r1, lr
 801d766:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d76a:	b289      	uxth	r1, r1
 801d76c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d770:	f846 1b04 	str.w	r1, [r6], #4
 801d774:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d778:	e7dd      	b.n	801d736 <__mdiff+0xd6>
 801d77a:	3f01      	subs	r7, #1
 801d77c:	e7e7      	b.n	801d74e <__mdiff+0xee>
 801d77e:	bf00      	nop
 801d780:	0802216c 	.word	0x0802216c
 801d784:	0802217d 	.word	0x0802217d

0801d788 <__ulp>:
 801d788:	b082      	sub	sp, #8
 801d78a:	ed8d 0b00 	vstr	d0, [sp]
 801d78e:	9a01      	ldr	r2, [sp, #4]
 801d790:	4b0f      	ldr	r3, [pc, #60]	@ (801d7d0 <__ulp+0x48>)
 801d792:	4013      	ands	r3, r2
 801d794:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d798:	2b00      	cmp	r3, #0
 801d79a:	dc08      	bgt.n	801d7ae <__ulp+0x26>
 801d79c:	425b      	negs	r3, r3
 801d79e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d7a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d7a6:	da04      	bge.n	801d7b2 <__ulp+0x2a>
 801d7a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d7ac:	4113      	asrs	r3, r2
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	e008      	b.n	801d7c4 <__ulp+0x3c>
 801d7b2:	f1a2 0314 	sub.w	r3, r2, #20
 801d7b6:	2b1e      	cmp	r3, #30
 801d7b8:	bfda      	itte	le
 801d7ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d7be:	40da      	lsrle	r2, r3
 801d7c0:	2201      	movgt	r2, #1
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	4610      	mov	r0, r2
 801d7c8:	ec41 0b10 	vmov	d0, r0, r1
 801d7cc:	b002      	add	sp, #8
 801d7ce:	4770      	bx	lr
 801d7d0:	7ff00000 	.word	0x7ff00000

0801d7d4 <__b2d>:
 801d7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d8:	6906      	ldr	r6, [r0, #16]
 801d7da:	f100 0814 	add.w	r8, r0, #20
 801d7de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d7e2:	1f37      	subs	r7, r6, #4
 801d7e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d7e8:	4610      	mov	r0, r2
 801d7ea:	f7ff fd53 	bl	801d294 <__hi0bits>
 801d7ee:	f1c0 0320 	rsb	r3, r0, #32
 801d7f2:	280a      	cmp	r0, #10
 801d7f4:	600b      	str	r3, [r1, #0]
 801d7f6:	491b      	ldr	r1, [pc, #108]	@ (801d864 <__b2d+0x90>)
 801d7f8:	dc15      	bgt.n	801d826 <__b2d+0x52>
 801d7fa:	f1c0 0c0b 	rsb	ip, r0, #11
 801d7fe:	fa22 f30c 	lsr.w	r3, r2, ip
 801d802:	45b8      	cmp	r8, r7
 801d804:	ea43 0501 	orr.w	r5, r3, r1
 801d808:	bf34      	ite	cc
 801d80a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d80e:	2300      	movcs	r3, #0
 801d810:	3015      	adds	r0, #21
 801d812:	fa02 f000 	lsl.w	r0, r2, r0
 801d816:	fa23 f30c 	lsr.w	r3, r3, ip
 801d81a:	4303      	orrs	r3, r0
 801d81c:	461c      	mov	r4, r3
 801d81e:	ec45 4b10 	vmov	d0, r4, r5
 801d822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d826:	45b8      	cmp	r8, r7
 801d828:	bf3a      	itte	cc
 801d82a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d82e:	f1a6 0708 	subcc.w	r7, r6, #8
 801d832:	2300      	movcs	r3, #0
 801d834:	380b      	subs	r0, #11
 801d836:	d012      	beq.n	801d85e <__b2d+0x8a>
 801d838:	f1c0 0120 	rsb	r1, r0, #32
 801d83c:	fa23 f401 	lsr.w	r4, r3, r1
 801d840:	4082      	lsls	r2, r0
 801d842:	4322      	orrs	r2, r4
 801d844:	4547      	cmp	r7, r8
 801d846:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d84a:	bf8c      	ite	hi
 801d84c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d850:	2200      	movls	r2, #0
 801d852:	4083      	lsls	r3, r0
 801d854:	40ca      	lsrs	r2, r1
 801d856:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d85a:	4313      	orrs	r3, r2
 801d85c:	e7de      	b.n	801d81c <__b2d+0x48>
 801d85e:	ea42 0501 	orr.w	r5, r2, r1
 801d862:	e7db      	b.n	801d81c <__b2d+0x48>
 801d864:	3ff00000 	.word	0x3ff00000

0801d868 <__d2b>:
 801d868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d86c:	460f      	mov	r7, r1
 801d86e:	2101      	movs	r1, #1
 801d870:	ec59 8b10 	vmov	r8, r9, d0
 801d874:	4616      	mov	r6, r2
 801d876:	f7ff fc1b 	bl	801d0b0 <_Balloc>
 801d87a:	4604      	mov	r4, r0
 801d87c:	b930      	cbnz	r0, 801d88c <__d2b+0x24>
 801d87e:	4602      	mov	r2, r0
 801d880:	4b23      	ldr	r3, [pc, #140]	@ (801d910 <__d2b+0xa8>)
 801d882:	4824      	ldr	r0, [pc, #144]	@ (801d914 <__d2b+0xac>)
 801d884:	f240 310f 	movw	r1, #783	@ 0x30f
 801d888:	f7fe fc9a 	bl	801c1c0 <__assert_func>
 801d88c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d894:	b10d      	cbz	r5, 801d89a <__d2b+0x32>
 801d896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d89a:	9301      	str	r3, [sp, #4]
 801d89c:	f1b8 0300 	subs.w	r3, r8, #0
 801d8a0:	d023      	beq.n	801d8ea <__d2b+0x82>
 801d8a2:	4668      	mov	r0, sp
 801d8a4:	9300      	str	r3, [sp, #0]
 801d8a6:	f7ff fd14 	bl	801d2d2 <__lo0bits>
 801d8aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d8ae:	b1d0      	cbz	r0, 801d8e6 <__d2b+0x7e>
 801d8b0:	f1c0 0320 	rsb	r3, r0, #32
 801d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 801d8b8:	430b      	orrs	r3, r1
 801d8ba:	40c2      	lsrs	r2, r0
 801d8bc:	6163      	str	r3, [r4, #20]
 801d8be:	9201      	str	r2, [sp, #4]
 801d8c0:	9b01      	ldr	r3, [sp, #4]
 801d8c2:	61a3      	str	r3, [r4, #24]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	bf0c      	ite	eq
 801d8c8:	2201      	moveq	r2, #1
 801d8ca:	2202      	movne	r2, #2
 801d8cc:	6122      	str	r2, [r4, #16]
 801d8ce:	b1a5      	cbz	r5, 801d8fa <__d2b+0x92>
 801d8d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d8d4:	4405      	add	r5, r0
 801d8d6:	603d      	str	r5, [r7, #0]
 801d8d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d8dc:	6030      	str	r0, [r6, #0]
 801d8de:	4620      	mov	r0, r4
 801d8e0:	b003      	add	sp, #12
 801d8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8e6:	6161      	str	r1, [r4, #20]
 801d8e8:	e7ea      	b.n	801d8c0 <__d2b+0x58>
 801d8ea:	a801      	add	r0, sp, #4
 801d8ec:	f7ff fcf1 	bl	801d2d2 <__lo0bits>
 801d8f0:	9b01      	ldr	r3, [sp, #4]
 801d8f2:	6163      	str	r3, [r4, #20]
 801d8f4:	3020      	adds	r0, #32
 801d8f6:	2201      	movs	r2, #1
 801d8f8:	e7e8      	b.n	801d8cc <__d2b+0x64>
 801d8fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d8fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d902:	6038      	str	r0, [r7, #0]
 801d904:	6918      	ldr	r0, [r3, #16]
 801d906:	f7ff fcc5 	bl	801d294 <__hi0bits>
 801d90a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d90e:	e7e5      	b.n	801d8dc <__d2b+0x74>
 801d910:	0802216c 	.word	0x0802216c
 801d914:	0802217d 	.word	0x0802217d

0801d918 <__ratio>:
 801d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d91c:	b085      	sub	sp, #20
 801d91e:	e9cd 1000 	strd	r1, r0, [sp]
 801d922:	a902      	add	r1, sp, #8
 801d924:	f7ff ff56 	bl	801d7d4 <__b2d>
 801d928:	9800      	ldr	r0, [sp, #0]
 801d92a:	a903      	add	r1, sp, #12
 801d92c:	ec55 4b10 	vmov	r4, r5, d0
 801d930:	f7ff ff50 	bl	801d7d4 <__b2d>
 801d934:	9b01      	ldr	r3, [sp, #4]
 801d936:	6919      	ldr	r1, [r3, #16]
 801d938:	9b00      	ldr	r3, [sp, #0]
 801d93a:	691b      	ldr	r3, [r3, #16]
 801d93c:	1ac9      	subs	r1, r1, r3
 801d93e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d942:	1a9b      	subs	r3, r3, r2
 801d944:	ec5b ab10 	vmov	sl, fp, d0
 801d948:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	bfce      	itee	gt
 801d950:	462a      	movgt	r2, r5
 801d952:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d956:	465a      	movle	r2, fp
 801d958:	462f      	mov	r7, r5
 801d95a:	46d9      	mov	r9, fp
 801d95c:	bfcc      	ite	gt
 801d95e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d962:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d966:	464b      	mov	r3, r9
 801d968:	4652      	mov	r2, sl
 801d96a:	4620      	mov	r0, r4
 801d96c:	4639      	mov	r1, r7
 801d96e:	f7e2 ff7d 	bl	800086c <__aeabi_ddiv>
 801d972:	ec41 0b10 	vmov	d0, r0, r1
 801d976:	b005      	add	sp, #20
 801d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d97c <__copybits>:
 801d97c:	3901      	subs	r1, #1
 801d97e:	b570      	push	{r4, r5, r6, lr}
 801d980:	1149      	asrs	r1, r1, #5
 801d982:	6914      	ldr	r4, [r2, #16]
 801d984:	3101      	adds	r1, #1
 801d986:	f102 0314 	add.w	r3, r2, #20
 801d98a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d98e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d992:	1f05      	subs	r5, r0, #4
 801d994:	42a3      	cmp	r3, r4
 801d996:	d30c      	bcc.n	801d9b2 <__copybits+0x36>
 801d998:	1aa3      	subs	r3, r4, r2
 801d99a:	3b11      	subs	r3, #17
 801d99c:	f023 0303 	bic.w	r3, r3, #3
 801d9a0:	3211      	adds	r2, #17
 801d9a2:	42a2      	cmp	r2, r4
 801d9a4:	bf88      	it	hi
 801d9a6:	2300      	movhi	r3, #0
 801d9a8:	4418      	add	r0, r3
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	4288      	cmp	r0, r1
 801d9ae:	d305      	bcc.n	801d9bc <__copybits+0x40>
 801d9b0:	bd70      	pop	{r4, r5, r6, pc}
 801d9b2:	f853 6b04 	ldr.w	r6, [r3], #4
 801d9b6:	f845 6f04 	str.w	r6, [r5, #4]!
 801d9ba:	e7eb      	b.n	801d994 <__copybits+0x18>
 801d9bc:	f840 3b04 	str.w	r3, [r0], #4
 801d9c0:	e7f4      	b.n	801d9ac <__copybits+0x30>

0801d9c2 <__any_on>:
 801d9c2:	f100 0214 	add.w	r2, r0, #20
 801d9c6:	6900      	ldr	r0, [r0, #16]
 801d9c8:	114b      	asrs	r3, r1, #5
 801d9ca:	4298      	cmp	r0, r3
 801d9cc:	b510      	push	{r4, lr}
 801d9ce:	db11      	blt.n	801d9f4 <__any_on+0x32>
 801d9d0:	dd0a      	ble.n	801d9e8 <__any_on+0x26>
 801d9d2:	f011 011f 	ands.w	r1, r1, #31
 801d9d6:	d007      	beq.n	801d9e8 <__any_on+0x26>
 801d9d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d9dc:	fa24 f001 	lsr.w	r0, r4, r1
 801d9e0:	fa00 f101 	lsl.w	r1, r0, r1
 801d9e4:	428c      	cmp	r4, r1
 801d9e6:	d10b      	bne.n	801da00 <__any_on+0x3e>
 801d9e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d9ec:	4293      	cmp	r3, r2
 801d9ee:	d803      	bhi.n	801d9f8 <__any_on+0x36>
 801d9f0:	2000      	movs	r0, #0
 801d9f2:	bd10      	pop	{r4, pc}
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	e7f7      	b.n	801d9e8 <__any_on+0x26>
 801d9f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d9fc:	2900      	cmp	r1, #0
 801d9fe:	d0f5      	beq.n	801d9ec <__any_on+0x2a>
 801da00:	2001      	movs	r0, #1
 801da02:	e7f6      	b.n	801d9f2 <__any_on+0x30>

0801da04 <_realloc_r>:
 801da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da08:	4607      	mov	r7, r0
 801da0a:	4614      	mov	r4, r2
 801da0c:	460d      	mov	r5, r1
 801da0e:	b921      	cbnz	r1, 801da1a <_realloc_r+0x16>
 801da10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801da14:	4611      	mov	r1, r2
 801da16:	f7ff babf 	b.w	801cf98 <_malloc_r>
 801da1a:	b92a      	cbnz	r2, 801da28 <_realloc_r+0x24>
 801da1c:	f7ff fa48 	bl	801ceb0 <_free_r>
 801da20:	4625      	mov	r5, r4
 801da22:	4628      	mov	r0, r5
 801da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da28:	f002 f87f 	bl	801fb2a <_malloc_usable_size_r>
 801da2c:	4284      	cmp	r4, r0
 801da2e:	4606      	mov	r6, r0
 801da30:	d802      	bhi.n	801da38 <_realloc_r+0x34>
 801da32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801da36:	d8f4      	bhi.n	801da22 <_realloc_r+0x1e>
 801da38:	4621      	mov	r1, r4
 801da3a:	4638      	mov	r0, r7
 801da3c:	f7ff faac 	bl	801cf98 <_malloc_r>
 801da40:	4680      	mov	r8, r0
 801da42:	b908      	cbnz	r0, 801da48 <_realloc_r+0x44>
 801da44:	4645      	mov	r5, r8
 801da46:	e7ec      	b.n	801da22 <_realloc_r+0x1e>
 801da48:	42b4      	cmp	r4, r6
 801da4a:	4622      	mov	r2, r4
 801da4c:	4629      	mov	r1, r5
 801da4e:	bf28      	it	cs
 801da50:	4632      	movcs	r2, r6
 801da52:	f7fe fba6 	bl	801c1a2 <memcpy>
 801da56:	4629      	mov	r1, r5
 801da58:	4638      	mov	r0, r7
 801da5a:	f7ff fa29 	bl	801ceb0 <_free_r>
 801da5e:	e7f1      	b.n	801da44 <_realloc_r+0x40>

0801da60 <sulp>:
 801da60:	b570      	push	{r4, r5, r6, lr}
 801da62:	4604      	mov	r4, r0
 801da64:	460d      	mov	r5, r1
 801da66:	ec45 4b10 	vmov	d0, r4, r5
 801da6a:	4616      	mov	r6, r2
 801da6c:	f7ff fe8c 	bl	801d788 <__ulp>
 801da70:	ec51 0b10 	vmov	r0, r1, d0
 801da74:	b17e      	cbz	r6, 801da96 <sulp+0x36>
 801da76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801da7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801da7e:	2b00      	cmp	r3, #0
 801da80:	dd09      	ble.n	801da96 <sulp+0x36>
 801da82:	051b      	lsls	r3, r3, #20
 801da84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801da88:	2400      	movs	r4, #0
 801da8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801da8e:	4622      	mov	r2, r4
 801da90:	462b      	mov	r3, r5
 801da92:	f7e2 fdc1 	bl	8000618 <__aeabi_dmul>
 801da96:	ec41 0b10 	vmov	d0, r0, r1
 801da9a:	bd70      	pop	{r4, r5, r6, pc}
 801da9c:	0000      	movs	r0, r0
	...

0801daa0 <_strtod_l>:
 801daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daa4:	b09f      	sub	sp, #124	@ 0x7c
 801daa6:	460c      	mov	r4, r1
 801daa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801daaa:	2200      	movs	r2, #0
 801daac:	921a      	str	r2, [sp, #104]	@ 0x68
 801daae:	9005      	str	r0, [sp, #20]
 801dab0:	f04f 0a00 	mov.w	sl, #0
 801dab4:	f04f 0b00 	mov.w	fp, #0
 801dab8:	460a      	mov	r2, r1
 801daba:	9219      	str	r2, [sp, #100]	@ 0x64
 801dabc:	7811      	ldrb	r1, [r2, #0]
 801dabe:	292b      	cmp	r1, #43	@ 0x2b
 801dac0:	d04a      	beq.n	801db58 <_strtod_l+0xb8>
 801dac2:	d838      	bhi.n	801db36 <_strtod_l+0x96>
 801dac4:	290d      	cmp	r1, #13
 801dac6:	d832      	bhi.n	801db2e <_strtod_l+0x8e>
 801dac8:	2908      	cmp	r1, #8
 801daca:	d832      	bhi.n	801db32 <_strtod_l+0x92>
 801dacc:	2900      	cmp	r1, #0
 801dace:	d03b      	beq.n	801db48 <_strtod_l+0xa8>
 801dad0:	2200      	movs	r2, #0
 801dad2:	920e      	str	r2, [sp, #56]	@ 0x38
 801dad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801dad6:	782a      	ldrb	r2, [r5, #0]
 801dad8:	2a30      	cmp	r2, #48	@ 0x30
 801dada:	f040 80b2 	bne.w	801dc42 <_strtod_l+0x1a2>
 801dade:	786a      	ldrb	r2, [r5, #1]
 801dae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801dae4:	2a58      	cmp	r2, #88	@ 0x58
 801dae6:	d16e      	bne.n	801dbc6 <_strtod_l+0x126>
 801dae8:	9302      	str	r3, [sp, #8]
 801daea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801daec:	9301      	str	r3, [sp, #4]
 801daee:	ab1a      	add	r3, sp, #104	@ 0x68
 801daf0:	9300      	str	r3, [sp, #0]
 801daf2:	4a8f      	ldr	r2, [pc, #572]	@ (801dd30 <_strtod_l+0x290>)
 801daf4:	9805      	ldr	r0, [sp, #20]
 801daf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 801daf8:	a919      	add	r1, sp, #100	@ 0x64
 801dafa:	f001 fd33 	bl	801f564 <__gethex>
 801dafe:	f010 060f 	ands.w	r6, r0, #15
 801db02:	4604      	mov	r4, r0
 801db04:	d005      	beq.n	801db12 <_strtod_l+0x72>
 801db06:	2e06      	cmp	r6, #6
 801db08:	d128      	bne.n	801db5c <_strtod_l+0xbc>
 801db0a:	3501      	adds	r5, #1
 801db0c:	2300      	movs	r3, #0
 801db0e:	9519      	str	r5, [sp, #100]	@ 0x64
 801db10:	930e      	str	r3, [sp, #56]	@ 0x38
 801db12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801db14:	2b00      	cmp	r3, #0
 801db16:	f040 858e 	bne.w	801e636 <_strtod_l+0xb96>
 801db1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db1c:	b1cb      	cbz	r3, 801db52 <_strtod_l+0xb2>
 801db1e:	4652      	mov	r2, sl
 801db20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801db24:	ec43 2b10 	vmov	d0, r2, r3
 801db28:	b01f      	add	sp, #124	@ 0x7c
 801db2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db2e:	2920      	cmp	r1, #32
 801db30:	d1ce      	bne.n	801dad0 <_strtod_l+0x30>
 801db32:	3201      	adds	r2, #1
 801db34:	e7c1      	b.n	801daba <_strtod_l+0x1a>
 801db36:	292d      	cmp	r1, #45	@ 0x2d
 801db38:	d1ca      	bne.n	801dad0 <_strtod_l+0x30>
 801db3a:	2101      	movs	r1, #1
 801db3c:	910e      	str	r1, [sp, #56]	@ 0x38
 801db3e:	1c51      	adds	r1, r2, #1
 801db40:	9119      	str	r1, [sp, #100]	@ 0x64
 801db42:	7852      	ldrb	r2, [r2, #1]
 801db44:	2a00      	cmp	r2, #0
 801db46:	d1c5      	bne.n	801dad4 <_strtod_l+0x34>
 801db48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801db4a:	9419      	str	r4, [sp, #100]	@ 0x64
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	f040 8570 	bne.w	801e632 <_strtod_l+0xb92>
 801db52:	4652      	mov	r2, sl
 801db54:	465b      	mov	r3, fp
 801db56:	e7e5      	b.n	801db24 <_strtod_l+0x84>
 801db58:	2100      	movs	r1, #0
 801db5a:	e7ef      	b.n	801db3c <_strtod_l+0x9c>
 801db5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801db5e:	b13a      	cbz	r2, 801db70 <_strtod_l+0xd0>
 801db60:	2135      	movs	r1, #53	@ 0x35
 801db62:	a81c      	add	r0, sp, #112	@ 0x70
 801db64:	f7ff ff0a 	bl	801d97c <__copybits>
 801db68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801db6a:	9805      	ldr	r0, [sp, #20]
 801db6c:	f7ff fae0 	bl	801d130 <_Bfree>
 801db70:	3e01      	subs	r6, #1
 801db72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801db74:	2e04      	cmp	r6, #4
 801db76:	d806      	bhi.n	801db86 <_strtod_l+0xe6>
 801db78:	e8df f006 	tbb	[pc, r6]
 801db7c:	201d0314 	.word	0x201d0314
 801db80:	14          	.byte	0x14
 801db81:	00          	.byte	0x00
 801db82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801db86:	05e1      	lsls	r1, r4, #23
 801db88:	bf48      	it	mi
 801db8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801db8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801db92:	0d1b      	lsrs	r3, r3, #20
 801db94:	051b      	lsls	r3, r3, #20
 801db96:	2b00      	cmp	r3, #0
 801db98:	d1bb      	bne.n	801db12 <_strtod_l+0x72>
 801db9a:	f7fe fad5 	bl	801c148 <__errno>
 801db9e:	2322      	movs	r3, #34	@ 0x22
 801dba0:	6003      	str	r3, [r0, #0]
 801dba2:	e7b6      	b.n	801db12 <_strtod_l+0x72>
 801dba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801dba8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801dbac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801dbb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801dbb4:	e7e7      	b.n	801db86 <_strtod_l+0xe6>
 801dbb6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801dd38 <_strtod_l+0x298>
 801dbba:	e7e4      	b.n	801db86 <_strtod_l+0xe6>
 801dbbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801dbc0:	f04f 3aff 	mov.w	sl, #4294967295
 801dbc4:	e7df      	b.n	801db86 <_strtod_l+0xe6>
 801dbc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dbc8:	1c5a      	adds	r2, r3, #1
 801dbca:	9219      	str	r2, [sp, #100]	@ 0x64
 801dbcc:	785b      	ldrb	r3, [r3, #1]
 801dbce:	2b30      	cmp	r3, #48	@ 0x30
 801dbd0:	d0f9      	beq.n	801dbc6 <_strtod_l+0x126>
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d09d      	beq.n	801db12 <_strtod_l+0x72>
 801dbd6:	2301      	movs	r3, #1
 801dbd8:	2700      	movs	r7, #0
 801dbda:	9308      	str	r3, [sp, #32]
 801dbdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dbde:	930c      	str	r3, [sp, #48]	@ 0x30
 801dbe0:	970b      	str	r7, [sp, #44]	@ 0x2c
 801dbe2:	46b9      	mov	r9, r7
 801dbe4:	220a      	movs	r2, #10
 801dbe6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801dbe8:	7805      	ldrb	r5, [r0, #0]
 801dbea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801dbee:	b2d9      	uxtb	r1, r3
 801dbf0:	2909      	cmp	r1, #9
 801dbf2:	d928      	bls.n	801dc46 <_strtod_l+0x1a6>
 801dbf4:	494f      	ldr	r1, [pc, #316]	@ (801dd34 <_strtod_l+0x294>)
 801dbf6:	2201      	movs	r2, #1
 801dbf8:	f7fe f9ec 	bl	801bfd4 <strncmp>
 801dbfc:	2800      	cmp	r0, #0
 801dbfe:	d032      	beq.n	801dc66 <_strtod_l+0x1c6>
 801dc00:	2000      	movs	r0, #0
 801dc02:	462a      	mov	r2, r5
 801dc04:	900a      	str	r0, [sp, #40]	@ 0x28
 801dc06:	464d      	mov	r5, r9
 801dc08:	4603      	mov	r3, r0
 801dc0a:	2a65      	cmp	r2, #101	@ 0x65
 801dc0c:	d001      	beq.n	801dc12 <_strtod_l+0x172>
 801dc0e:	2a45      	cmp	r2, #69	@ 0x45
 801dc10:	d114      	bne.n	801dc3c <_strtod_l+0x19c>
 801dc12:	b91d      	cbnz	r5, 801dc1c <_strtod_l+0x17c>
 801dc14:	9a08      	ldr	r2, [sp, #32]
 801dc16:	4302      	orrs	r2, r0
 801dc18:	d096      	beq.n	801db48 <_strtod_l+0xa8>
 801dc1a:	2500      	movs	r5, #0
 801dc1c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801dc1e:	1c62      	adds	r2, r4, #1
 801dc20:	9219      	str	r2, [sp, #100]	@ 0x64
 801dc22:	7862      	ldrb	r2, [r4, #1]
 801dc24:	2a2b      	cmp	r2, #43	@ 0x2b
 801dc26:	d07a      	beq.n	801dd1e <_strtod_l+0x27e>
 801dc28:	2a2d      	cmp	r2, #45	@ 0x2d
 801dc2a:	d07e      	beq.n	801dd2a <_strtod_l+0x28a>
 801dc2c:	f04f 0c00 	mov.w	ip, #0
 801dc30:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801dc34:	2909      	cmp	r1, #9
 801dc36:	f240 8085 	bls.w	801dd44 <_strtod_l+0x2a4>
 801dc3a:	9419      	str	r4, [sp, #100]	@ 0x64
 801dc3c:	f04f 0800 	mov.w	r8, #0
 801dc40:	e0a5      	b.n	801dd8e <_strtod_l+0x2ee>
 801dc42:	2300      	movs	r3, #0
 801dc44:	e7c8      	b.n	801dbd8 <_strtod_l+0x138>
 801dc46:	f1b9 0f08 	cmp.w	r9, #8
 801dc4a:	bfd8      	it	le
 801dc4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801dc4e:	f100 0001 	add.w	r0, r0, #1
 801dc52:	bfda      	itte	le
 801dc54:	fb02 3301 	mlale	r3, r2, r1, r3
 801dc58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801dc5a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801dc5e:	f109 0901 	add.w	r9, r9, #1
 801dc62:	9019      	str	r0, [sp, #100]	@ 0x64
 801dc64:	e7bf      	b.n	801dbe6 <_strtod_l+0x146>
 801dc66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc68:	1c5a      	adds	r2, r3, #1
 801dc6a:	9219      	str	r2, [sp, #100]	@ 0x64
 801dc6c:	785a      	ldrb	r2, [r3, #1]
 801dc6e:	f1b9 0f00 	cmp.w	r9, #0
 801dc72:	d03b      	beq.n	801dcec <_strtod_l+0x24c>
 801dc74:	900a      	str	r0, [sp, #40]	@ 0x28
 801dc76:	464d      	mov	r5, r9
 801dc78:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801dc7c:	2b09      	cmp	r3, #9
 801dc7e:	d912      	bls.n	801dca6 <_strtod_l+0x206>
 801dc80:	2301      	movs	r3, #1
 801dc82:	e7c2      	b.n	801dc0a <_strtod_l+0x16a>
 801dc84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc86:	1c5a      	adds	r2, r3, #1
 801dc88:	9219      	str	r2, [sp, #100]	@ 0x64
 801dc8a:	785a      	ldrb	r2, [r3, #1]
 801dc8c:	3001      	adds	r0, #1
 801dc8e:	2a30      	cmp	r2, #48	@ 0x30
 801dc90:	d0f8      	beq.n	801dc84 <_strtod_l+0x1e4>
 801dc92:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801dc96:	2b08      	cmp	r3, #8
 801dc98:	f200 84d2 	bhi.w	801e640 <_strtod_l+0xba0>
 801dc9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc9e:	900a      	str	r0, [sp, #40]	@ 0x28
 801dca0:	2000      	movs	r0, #0
 801dca2:	930c      	str	r3, [sp, #48]	@ 0x30
 801dca4:	4605      	mov	r5, r0
 801dca6:	3a30      	subs	r2, #48	@ 0x30
 801dca8:	f100 0301 	add.w	r3, r0, #1
 801dcac:	d018      	beq.n	801dce0 <_strtod_l+0x240>
 801dcae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dcb0:	4419      	add	r1, r3
 801dcb2:	910a      	str	r1, [sp, #40]	@ 0x28
 801dcb4:	462e      	mov	r6, r5
 801dcb6:	f04f 0e0a 	mov.w	lr, #10
 801dcba:	1c71      	adds	r1, r6, #1
 801dcbc:	eba1 0c05 	sub.w	ip, r1, r5
 801dcc0:	4563      	cmp	r3, ip
 801dcc2:	dc15      	bgt.n	801dcf0 <_strtod_l+0x250>
 801dcc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801dcc8:	182b      	adds	r3, r5, r0
 801dcca:	2b08      	cmp	r3, #8
 801dccc:	f105 0501 	add.w	r5, r5, #1
 801dcd0:	4405      	add	r5, r0
 801dcd2:	dc1a      	bgt.n	801dd0a <_strtod_l+0x26a>
 801dcd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dcd6:	230a      	movs	r3, #10
 801dcd8:	fb03 2301 	mla	r3, r3, r1, r2
 801dcdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dcde:	2300      	movs	r3, #0
 801dce0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dce2:	1c51      	adds	r1, r2, #1
 801dce4:	9119      	str	r1, [sp, #100]	@ 0x64
 801dce6:	7852      	ldrb	r2, [r2, #1]
 801dce8:	4618      	mov	r0, r3
 801dcea:	e7c5      	b.n	801dc78 <_strtod_l+0x1d8>
 801dcec:	4648      	mov	r0, r9
 801dcee:	e7ce      	b.n	801dc8e <_strtod_l+0x1ee>
 801dcf0:	2e08      	cmp	r6, #8
 801dcf2:	dc05      	bgt.n	801dd00 <_strtod_l+0x260>
 801dcf4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801dcf6:	fb0e f606 	mul.w	r6, lr, r6
 801dcfa:	960b      	str	r6, [sp, #44]	@ 0x2c
 801dcfc:	460e      	mov	r6, r1
 801dcfe:	e7dc      	b.n	801dcba <_strtod_l+0x21a>
 801dd00:	2910      	cmp	r1, #16
 801dd02:	bfd8      	it	le
 801dd04:	fb0e f707 	mulle.w	r7, lr, r7
 801dd08:	e7f8      	b.n	801dcfc <_strtod_l+0x25c>
 801dd0a:	2b0f      	cmp	r3, #15
 801dd0c:	bfdc      	itt	le
 801dd0e:	230a      	movle	r3, #10
 801dd10:	fb03 2707 	mlale	r7, r3, r7, r2
 801dd14:	e7e3      	b.n	801dcde <_strtod_l+0x23e>
 801dd16:	2300      	movs	r3, #0
 801dd18:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	e77a      	b.n	801dc14 <_strtod_l+0x174>
 801dd1e:	f04f 0c00 	mov.w	ip, #0
 801dd22:	1ca2      	adds	r2, r4, #2
 801dd24:	9219      	str	r2, [sp, #100]	@ 0x64
 801dd26:	78a2      	ldrb	r2, [r4, #2]
 801dd28:	e782      	b.n	801dc30 <_strtod_l+0x190>
 801dd2a:	f04f 0c01 	mov.w	ip, #1
 801dd2e:	e7f8      	b.n	801dd22 <_strtod_l+0x282>
 801dd30:	0802278c 	.word	0x0802278c
 801dd34:	080221d6 	.word	0x080221d6
 801dd38:	7ff00000 	.word	0x7ff00000
 801dd3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dd3e:	1c51      	adds	r1, r2, #1
 801dd40:	9119      	str	r1, [sp, #100]	@ 0x64
 801dd42:	7852      	ldrb	r2, [r2, #1]
 801dd44:	2a30      	cmp	r2, #48	@ 0x30
 801dd46:	d0f9      	beq.n	801dd3c <_strtod_l+0x29c>
 801dd48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801dd4c:	2908      	cmp	r1, #8
 801dd4e:	f63f af75 	bhi.w	801dc3c <_strtod_l+0x19c>
 801dd52:	3a30      	subs	r2, #48	@ 0x30
 801dd54:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dd58:	920f      	str	r2, [sp, #60]	@ 0x3c
 801dd5a:	f04f 080a 	mov.w	r8, #10
 801dd5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dd60:	1c56      	adds	r6, r2, #1
 801dd62:	9619      	str	r6, [sp, #100]	@ 0x64
 801dd64:	7852      	ldrb	r2, [r2, #1]
 801dd66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801dd6a:	f1be 0f09 	cmp.w	lr, #9
 801dd6e:	d939      	bls.n	801dde4 <_strtod_l+0x344>
 801dd70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801dd72:	1a76      	subs	r6, r6, r1
 801dd74:	2e08      	cmp	r6, #8
 801dd76:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801dd7a:	dc03      	bgt.n	801dd84 <_strtod_l+0x2e4>
 801dd7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dd7e:	4588      	cmp	r8, r1
 801dd80:	bfa8      	it	ge
 801dd82:	4688      	movge	r8, r1
 801dd84:	f1bc 0f00 	cmp.w	ip, #0
 801dd88:	d001      	beq.n	801dd8e <_strtod_l+0x2ee>
 801dd8a:	f1c8 0800 	rsb	r8, r8, #0
 801dd8e:	2d00      	cmp	r5, #0
 801dd90:	d14e      	bne.n	801de30 <_strtod_l+0x390>
 801dd92:	9908      	ldr	r1, [sp, #32]
 801dd94:	4308      	orrs	r0, r1
 801dd96:	f47f aebc 	bne.w	801db12 <_strtod_l+0x72>
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	f47f aed4 	bne.w	801db48 <_strtod_l+0xa8>
 801dda0:	2a69      	cmp	r2, #105	@ 0x69
 801dda2:	d028      	beq.n	801ddf6 <_strtod_l+0x356>
 801dda4:	dc25      	bgt.n	801ddf2 <_strtod_l+0x352>
 801dda6:	2a49      	cmp	r2, #73	@ 0x49
 801dda8:	d025      	beq.n	801ddf6 <_strtod_l+0x356>
 801ddaa:	2a4e      	cmp	r2, #78	@ 0x4e
 801ddac:	f47f aecc 	bne.w	801db48 <_strtod_l+0xa8>
 801ddb0:	499a      	ldr	r1, [pc, #616]	@ (801e01c <_strtod_l+0x57c>)
 801ddb2:	a819      	add	r0, sp, #100	@ 0x64
 801ddb4:	f001 fdf8 	bl	801f9a8 <__match>
 801ddb8:	2800      	cmp	r0, #0
 801ddba:	f43f aec5 	beq.w	801db48 <_strtod_l+0xa8>
 801ddbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ddc0:	781b      	ldrb	r3, [r3, #0]
 801ddc2:	2b28      	cmp	r3, #40	@ 0x28
 801ddc4:	d12e      	bne.n	801de24 <_strtod_l+0x384>
 801ddc6:	4996      	ldr	r1, [pc, #600]	@ (801e020 <_strtod_l+0x580>)
 801ddc8:	aa1c      	add	r2, sp, #112	@ 0x70
 801ddca:	a819      	add	r0, sp, #100	@ 0x64
 801ddcc:	f001 fe00 	bl	801f9d0 <__hexnan>
 801ddd0:	2805      	cmp	r0, #5
 801ddd2:	d127      	bne.n	801de24 <_strtod_l+0x384>
 801ddd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddd6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801ddda:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801ddde:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801dde2:	e696      	b.n	801db12 <_strtod_l+0x72>
 801dde4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dde6:	fb08 2101 	mla	r1, r8, r1, r2
 801ddea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801ddee:	9209      	str	r2, [sp, #36]	@ 0x24
 801ddf0:	e7b5      	b.n	801dd5e <_strtod_l+0x2be>
 801ddf2:	2a6e      	cmp	r2, #110	@ 0x6e
 801ddf4:	e7da      	b.n	801ddac <_strtod_l+0x30c>
 801ddf6:	498b      	ldr	r1, [pc, #556]	@ (801e024 <_strtod_l+0x584>)
 801ddf8:	a819      	add	r0, sp, #100	@ 0x64
 801ddfa:	f001 fdd5 	bl	801f9a8 <__match>
 801ddfe:	2800      	cmp	r0, #0
 801de00:	f43f aea2 	beq.w	801db48 <_strtod_l+0xa8>
 801de04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801de06:	4988      	ldr	r1, [pc, #544]	@ (801e028 <_strtod_l+0x588>)
 801de08:	3b01      	subs	r3, #1
 801de0a:	a819      	add	r0, sp, #100	@ 0x64
 801de0c:	9319      	str	r3, [sp, #100]	@ 0x64
 801de0e:	f001 fdcb 	bl	801f9a8 <__match>
 801de12:	b910      	cbnz	r0, 801de1a <_strtod_l+0x37a>
 801de14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801de16:	3301      	adds	r3, #1
 801de18:	9319      	str	r3, [sp, #100]	@ 0x64
 801de1a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801e038 <_strtod_l+0x598>
 801de1e:	f04f 0a00 	mov.w	sl, #0
 801de22:	e676      	b.n	801db12 <_strtod_l+0x72>
 801de24:	4881      	ldr	r0, [pc, #516]	@ (801e02c <_strtod_l+0x58c>)
 801de26:	f001 fb13 	bl	801f450 <nan>
 801de2a:	ec5b ab10 	vmov	sl, fp, d0
 801de2e:	e670      	b.n	801db12 <_strtod_l+0x72>
 801de30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de32:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801de34:	eba8 0303 	sub.w	r3, r8, r3
 801de38:	f1b9 0f00 	cmp.w	r9, #0
 801de3c:	bf08      	it	eq
 801de3e:	46a9      	moveq	r9, r5
 801de40:	2d10      	cmp	r5, #16
 801de42:	9309      	str	r3, [sp, #36]	@ 0x24
 801de44:	462c      	mov	r4, r5
 801de46:	bfa8      	it	ge
 801de48:	2410      	movge	r4, #16
 801de4a:	f7e2 fb6b 	bl	8000524 <__aeabi_ui2d>
 801de4e:	2d09      	cmp	r5, #9
 801de50:	4682      	mov	sl, r0
 801de52:	468b      	mov	fp, r1
 801de54:	dc13      	bgt.n	801de7e <_strtod_l+0x3de>
 801de56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de58:	2b00      	cmp	r3, #0
 801de5a:	f43f ae5a 	beq.w	801db12 <_strtod_l+0x72>
 801de5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de60:	dd78      	ble.n	801df54 <_strtod_l+0x4b4>
 801de62:	2b16      	cmp	r3, #22
 801de64:	dc5f      	bgt.n	801df26 <_strtod_l+0x486>
 801de66:	4972      	ldr	r1, [pc, #456]	@ (801e030 <_strtod_l+0x590>)
 801de68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801de6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de70:	4652      	mov	r2, sl
 801de72:	465b      	mov	r3, fp
 801de74:	f7e2 fbd0 	bl	8000618 <__aeabi_dmul>
 801de78:	4682      	mov	sl, r0
 801de7a:	468b      	mov	fp, r1
 801de7c:	e649      	b.n	801db12 <_strtod_l+0x72>
 801de7e:	4b6c      	ldr	r3, [pc, #432]	@ (801e030 <_strtod_l+0x590>)
 801de80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801de84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801de88:	f7e2 fbc6 	bl	8000618 <__aeabi_dmul>
 801de8c:	4682      	mov	sl, r0
 801de8e:	4638      	mov	r0, r7
 801de90:	468b      	mov	fp, r1
 801de92:	f7e2 fb47 	bl	8000524 <__aeabi_ui2d>
 801de96:	4602      	mov	r2, r0
 801de98:	460b      	mov	r3, r1
 801de9a:	4650      	mov	r0, sl
 801de9c:	4659      	mov	r1, fp
 801de9e:	f7e2 fa05 	bl	80002ac <__adddf3>
 801dea2:	2d0f      	cmp	r5, #15
 801dea4:	4682      	mov	sl, r0
 801dea6:	468b      	mov	fp, r1
 801dea8:	ddd5      	ble.n	801de56 <_strtod_l+0x3b6>
 801deaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deac:	1b2c      	subs	r4, r5, r4
 801deae:	441c      	add	r4, r3
 801deb0:	2c00      	cmp	r4, #0
 801deb2:	f340 8093 	ble.w	801dfdc <_strtod_l+0x53c>
 801deb6:	f014 030f 	ands.w	r3, r4, #15
 801deba:	d00a      	beq.n	801ded2 <_strtod_l+0x432>
 801debc:	495c      	ldr	r1, [pc, #368]	@ (801e030 <_strtod_l+0x590>)
 801debe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dec2:	4652      	mov	r2, sl
 801dec4:	465b      	mov	r3, fp
 801dec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801deca:	f7e2 fba5 	bl	8000618 <__aeabi_dmul>
 801dece:	4682      	mov	sl, r0
 801ded0:	468b      	mov	fp, r1
 801ded2:	f034 040f 	bics.w	r4, r4, #15
 801ded6:	d073      	beq.n	801dfc0 <_strtod_l+0x520>
 801ded8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801dedc:	dd49      	ble.n	801df72 <_strtod_l+0x4d2>
 801dede:	2400      	movs	r4, #0
 801dee0:	46a0      	mov	r8, r4
 801dee2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801dee4:	46a1      	mov	r9, r4
 801dee6:	9a05      	ldr	r2, [sp, #20]
 801dee8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801e038 <_strtod_l+0x598>
 801deec:	2322      	movs	r3, #34	@ 0x22
 801deee:	6013      	str	r3, [r2, #0]
 801def0:	f04f 0a00 	mov.w	sl, #0
 801def4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801def6:	2b00      	cmp	r3, #0
 801def8:	f43f ae0b 	beq.w	801db12 <_strtod_l+0x72>
 801defc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801defe:	9805      	ldr	r0, [sp, #20]
 801df00:	f7ff f916 	bl	801d130 <_Bfree>
 801df04:	9805      	ldr	r0, [sp, #20]
 801df06:	4649      	mov	r1, r9
 801df08:	f7ff f912 	bl	801d130 <_Bfree>
 801df0c:	9805      	ldr	r0, [sp, #20]
 801df0e:	4641      	mov	r1, r8
 801df10:	f7ff f90e 	bl	801d130 <_Bfree>
 801df14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801df16:	9805      	ldr	r0, [sp, #20]
 801df18:	f7ff f90a 	bl	801d130 <_Bfree>
 801df1c:	9805      	ldr	r0, [sp, #20]
 801df1e:	4621      	mov	r1, r4
 801df20:	f7ff f906 	bl	801d130 <_Bfree>
 801df24:	e5f5      	b.n	801db12 <_strtod_l+0x72>
 801df26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801df2c:	4293      	cmp	r3, r2
 801df2e:	dbbc      	blt.n	801deaa <_strtod_l+0x40a>
 801df30:	4c3f      	ldr	r4, [pc, #252]	@ (801e030 <_strtod_l+0x590>)
 801df32:	f1c5 050f 	rsb	r5, r5, #15
 801df36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801df3a:	4652      	mov	r2, sl
 801df3c:	465b      	mov	r3, fp
 801df3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df42:	f7e2 fb69 	bl	8000618 <__aeabi_dmul>
 801df46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df48:	1b5d      	subs	r5, r3, r5
 801df4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801df4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801df52:	e78f      	b.n	801de74 <_strtod_l+0x3d4>
 801df54:	3316      	adds	r3, #22
 801df56:	dba8      	blt.n	801deaa <_strtod_l+0x40a>
 801df58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df5a:	eba3 0808 	sub.w	r8, r3, r8
 801df5e:	4b34      	ldr	r3, [pc, #208]	@ (801e030 <_strtod_l+0x590>)
 801df60:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801df64:	e9d8 2300 	ldrd	r2, r3, [r8]
 801df68:	4650      	mov	r0, sl
 801df6a:	4659      	mov	r1, fp
 801df6c:	f7e2 fc7e 	bl	800086c <__aeabi_ddiv>
 801df70:	e782      	b.n	801de78 <_strtod_l+0x3d8>
 801df72:	2300      	movs	r3, #0
 801df74:	4f2f      	ldr	r7, [pc, #188]	@ (801e034 <_strtod_l+0x594>)
 801df76:	1124      	asrs	r4, r4, #4
 801df78:	4650      	mov	r0, sl
 801df7a:	4659      	mov	r1, fp
 801df7c:	461e      	mov	r6, r3
 801df7e:	2c01      	cmp	r4, #1
 801df80:	dc21      	bgt.n	801dfc6 <_strtod_l+0x526>
 801df82:	b10b      	cbz	r3, 801df88 <_strtod_l+0x4e8>
 801df84:	4682      	mov	sl, r0
 801df86:	468b      	mov	fp, r1
 801df88:	492a      	ldr	r1, [pc, #168]	@ (801e034 <_strtod_l+0x594>)
 801df8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801df8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801df92:	4652      	mov	r2, sl
 801df94:	465b      	mov	r3, fp
 801df96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df9a:	f7e2 fb3d 	bl	8000618 <__aeabi_dmul>
 801df9e:	4b26      	ldr	r3, [pc, #152]	@ (801e038 <_strtod_l+0x598>)
 801dfa0:	460a      	mov	r2, r1
 801dfa2:	400b      	ands	r3, r1
 801dfa4:	4925      	ldr	r1, [pc, #148]	@ (801e03c <_strtod_l+0x59c>)
 801dfa6:	428b      	cmp	r3, r1
 801dfa8:	4682      	mov	sl, r0
 801dfaa:	d898      	bhi.n	801dede <_strtod_l+0x43e>
 801dfac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801dfb0:	428b      	cmp	r3, r1
 801dfb2:	bf86      	itte	hi
 801dfb4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801e040 <_strtod_l+0x5a0>
 801dfb8:	f04f 3aff 	movhi.w	sl, #4294967295
 801dfbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	9308      	str	r3, [sp, #32]
 801dfc4:	e076      	b.n	801e0b4 <_strtod_l+0x614>
 801dfc6:	07e2      	lsls	r2, r4, #31
 801dfc8:	d504      	bpl.n	801dfd4 <_strtod_l+0x534>
 801dfca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dfce:	f7e2 fb23 	bl	8000618 <__aeabi_dmul>
 801dfd2:	2301      	movs	r3, #1
 801dfd4:	3601      	adds	r6, #1
 801dfd6:	1064      	asrs	r4, r4, #1
 801dfd8:	3708      	adds	r7, #8
 801dfda:	e7d0      	b.n	801df7e <_strtod_l+0x4de>
 801dfdc:	d0f0      	beq.n	801dfc0 <_strtod_l+0x520>
 801dfde:	4264      	negs	r4, r4
 801dfe0:	f014 020f 	ands.w	r2, r4, #15
 801dfe4:	d00a      	beq.n	801dffc <_strtod_l+0x55c>
 801dfe6:	4b12      	ldr	r3, [pc, #72]	@ (801e030 <_strtod_l+0x590>)
 801dfe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dfec:	4650      	mov	r0, sl
 801dfee:	4659      	mov	r1, fp
 801dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dff4:	f7e2 fc3a 	bl	800086c <__aeabi_ddiv>
 801dff8:	4682      	mov	sl, r0
 801dffa:	468b      	mov	fp, r1
 801dffc:	1124      	asrs	r4, r4, #4
 801dffe:	d0df      	beq.n	801dfc0 <_strtod_l+0x520>
 801e000:	2c1f      	cmp	r4, #31
 801e002:	dd1f      	ble.n	801e044 <_strtod_l+0x5a4>
 801e004:	2400      	movs	r4, #0
 801e006:	46a0      	mov	r8, r4
 801e008:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e00a:	46a1      	mov	r9, r4
 801e00c:	9a05      	ldr	r2, [sp, #20]
 801e00e:	2322      	movs	r3, #34	@ 0x22
 801e010:	f04f 0a00 	mov.w	sl, #0
 801e014:	f04f 0b00 	mov.w	fp, #0
 801e018:	6013      	str	r3, [r2, #0]
 801e01a:	e76b      	b.n	801def4 <_strtod_l+0x454>
 801e01c:	08022079 	.word	0x08022079
 801e020:	08022778 	.word	0x08022778
 801e024:	08022071 	.word	0x08022071
 801e028:	080220f3 	.word	0x080220f3
 801e02c:	080220ef 	.word	0x080220ef
 801e030:	080226b0 	.word	0x080226b0
 801e034:	08022688 	.word	0x08022688
 801e038:	7ff00000 	.word	0x7ff00000
 801e03c:	7ca00000 	.word	0x7ca00000
 801e040:	7fefffff 	.word	0x7fefffff
 801e044:	f014 0310 	ands.w	r3, r4, #16
 801e048:	bf18      	it	ne
 801e04a:	236a      	movne	r3, #106	@ 0x6a
 801e04c:	4ea9      	ldr	r6, [pc, #676]	@ (801e2f4 <_strtod_l+0x854>)
 801e04e:	9308      	str	r3, [sp, #32]
 801e050:	4650      	mov	r0, sl
 801e052:	4659      	mov	r1, fp
 801e054:	2300      	movs	r3, #0
 801e056:	07e7      	lsls	r7, r4, #31
 801e058:	d504      	bpl.n	801e064 <_strtod_l+0x5c4>
 801e05a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e05e:	f7e2 fadb 	bl	8000618 <__aeabi_dmul>
 801e062:	2301      	movs	r3, #1
 801e064:	1064      	asrs	r4, r4, #1
 801e066:	f106 0608 	add.w	r6, r6, #8
 801e06a:	d1f4      	bne.n	801e056 <_strtod_l+0x5b6>
 801e06c:	b10b      	cbz	r3, 801e072 <_strtod_l+0x5d2>
 801e06e:	4682      	mov	sl, r0
 801e070:	468b      	mov	fp, r1
 801e072:	9b08      	ldr	r3, [sp, #32]
 801e074:	b1b3      	cbz	r3, 801e0a4 <_strtod_l+0x604>
 801e076:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801e07a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801e07e:	2b00      	cmp	r3, #0
 801e080:	4659      	mov	r1, fp
 801e082:	dd0f      	ble.n	801e0a4 <_strtod_l+0x604>
 801e084:	2b1f      	cmp	r3, #31
 801e086:	dd56      	ble.n	801e136 <_strtod_l+0x696>
 801e088:	2b34      	cmp	r3, #52	@ 0x34
 801e08a:	bfde      	ittt	le
 801e08c:	f04f 33ff 	movle.w	r3, #4294967295
 801e090:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801e094:	4093      	lslle	r3, r2
 801e096:	f04f 0a00 	mov.w	sl, #0
 801e09a:	bfcc      	ite	gt
 801e09c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801e0a0:	ea03 0b01 	andle.w	fp, r3, r1
 801e0a4:	2200      	movs	r2, #0
 801e0a6:	2300      	movs	r3, #0
 801e0a8:	4650      	mov	r0, sl
 801e0aa:	4659      	mov	r1, fp
 801e0ac:	f7e2 fd1c 	bl	8000ae8 <__aeabi_dcmpeq>
 801e0b0:	2800      	cmp	r0, #0
 801e0b2:	d1a7      	bne.n	801e004 <_strtod_l+0x564>
 801e0b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0b6:	9300      	str	r3, [sp, #0]
 801e0b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e0ba:	9805      	ldr	r0, [sp, #20]
 801e0bc:	462b      	mov	r3, r5
 801e0be:	464a      	mov	r2, r9
 801e0c0:	f7ff f89e 	bl	801d200 <__s2b>
 801e0c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e0c6:	2800      	cmp	r0, #0
 801e0c8:	f43f af09 	beq.w	801dede <_strtod_l+0x43e>
 801e0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0d0:	2a00      	cmp	r2, #0
 801e0d2:	eba3 0308 	sub.w	r3, r3, r8
 801e0d6:	bfa8      	it	ge
 801e0d8:	2300      	movge	r3, #0
 801e0da:	9312      	str	r3, [sp, #72]	@ 0x48
 801e0dc:	2400      	movs	r4, #0
 801e0de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e0e2:	9316      	str	r3, [sp, #88]	@ 0x58
 801e0e4:	46a0      	mov	r8, r4
 801e0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0e8:	9805      	ldr	r0, [sp, #20]
 801e0ea:	6859      	ldr	r1, [r3, #4]
 801e0ec:	f7fe ffe0 	bl	801d0b0 <_Balloc>
 801e0f0:	4681      	mov	r9, r0
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	f43f aef7 	beq.w	801dee6 <_strtod_l+0x446>
 801e0f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0fa:	691a      	ldr	r2, [r3, #16]
 801e0fc:	3202      	adds	r2, #2
 801e0fe:	f103 010c 	add.w	r1, r3, #12
 801e102:	0092      	lsls	r2, r2, #2
 801e104:	300c      	adds	r0, #12
 801e106:	f7fe f84c 	bl	801c1a2 <memcpy>
 801e10a:	ec4b ab10 	vmov	d0, sl, fp
 801e10e:	9805      	ldr	r0, [sp, #20]
 801e110:	aa1c      	add	r2, sp, #112	@ 0x70
 801e112:	a91b      	add	r1, sp, #108	@ 0x6c
 801e114:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801e118:	f7ff fba6 	bl	801d868 <__d2b>
 801e11c:	901a      	str	r0, [sp, #104]	@ 0x68
 801e11e:	2800      	cmp	r0, #0
 801e120:	f43f aee1 	beq.w	801dee6 <_strtod_l+0x446>
 801e124:	9805      	ldr	r0, [sp, #20]
 801e126:	2101      	movs	r1, #1
 801e128:	f7ff f900 	bl	801d32c <__i2b>
 801e12c:	4680      	mov	r8, r0
 801e12e:	b948      	cbnz	r0, 801e144 <_strtod_l+0x6a4>
 801e130:	f04f 0800 	mov.w	r8, #0
 801e134:	e6d7      	b.n	801dee6 <_strtod_l+0x446>
 801e136:	f04f 32ff 	mov.w	r2, #4294967295
 801e13a:	fa02 f303 	lsl.w	r3, r2, r3
 801e13e:	ea03 0a0a 	and.w	sl, r3, sl
 801e142:	e7af      	b.n	801e0a4 <_strtod_l+0x604>
 801e144:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801e146:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801e148:	2d00      	cmp	r5, #0
 801e14a:	bfab      	itete	ge
 801e14c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801e14e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801e150:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801e152:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801e154:	bfac      	ite	ge
 801e156:	18ef      	addge	r7, r5, r3
 801e158:	1b5e      	sublt	r6, r3, r5
 801e15a:	9b08      	ldr	r3, [sp, #32]
 801e15c:	1aed      	subs	r5, r5, r3
 801e15e:	4415      	add	r5, r2
 801e160:	4b65      	ldr	r3, [pc, #404]	@ (801e2f8 <_strtod_l+0x858>)
 801e162:	3d01      	subs	r5, #1
 801e164:	429d      	cmp	r5, r3
 801e166:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801e16a:	da50      	bge.n	801e20e <_strtod_l+0x76e>
 801e16c:	1b5b      	subs	r3, r3, r5
 801e16e:	2b1f      	cmp	r3, #31
 801e170:	eba2 0203 	sub.w	r2, r2, r3
 801e174:	f04f 0101 	mov.w	r1, #1
 801e178:	dc3d      	bgt.n	801e1f6 <_strtod_l+0x756>
 801e17a:	fa01 f303 	lsl.w	r3, r1, r3
 801e17e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e180:	2300      	movs	r3, #0
 801e182:	9310      	str	r3, [sp, #64]	@ 0x40
 801e184:	18bd      	adds	r5, r7, r2
 801e186:	9b08      	ldr	r3, [sp, #32]
 801e188:	42af      	cmp	r7, r5
 801e18a:	4416      	add	r6, r2
 801e18c:	441e      	add	r6, r3
 801e18e:	463b      	mov	r3, r7
 801e190:	bfa8      	it	ge
 801e192:	462b      	movge	r3, r5
 801e194:	42b3      	cmp	r3, r6
 801e196:	bfa8      	it	ge
 801e198:	4633      	movge	r3, r6
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	bfc2      	ittt	gt
 801e19e:	1aed      	subgt	r5, r5, r3
 801e1a0:	1af6      	subgt	r6, r6, r3
 801e1a2:	1aff      	subgt	r7, r7, r3
 801e1a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	dd16      	ble.n	801e1d8 <_strtod_l+0x738>
 801e1aa:	4641      	mov	r1, r8
 801e1ac:	9805      	ldr	r0, [sp, #20]
 801e1ae:	461a      	mov	r2, r3
 801e1b0:	f7ff f974 	bl	801d49c <__pow5mult>
 801e1b4:	4680      	mov	r8, r0
 801e1b6:	2800      	cmp	r0, #0
 801e1b8:	d0ba      	beq.n	801e130 <_strtod_l+0x690>
 801e1ba:	4601      	mov	r1, r0
 801e1bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e1be:	9805      	ldr	r0, [sp, #20]
 801e1c0:	f7ff f8ca 	bl	801d358 <__multiply>
 801e1c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801e1c6:	2800      	cmp	r0, #0
 801e1c8:	f43f ae8d 	beq.w	801dee6 <_strtod_l+0x446>
 801e1cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e1ce:	9805      	ldr	r0, [sp, #20]
 801e1d0:	f7fe ffae 	bl	801d130 <_Bfree>
 801e1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1d6:	931a      	str	r3, [sp, #104]	@ 0x68
 801e1d8:	2d00      	cmp	r5, #0
 801e1da:	dc1d      	bgt.n	801e218 <_strtod_l+0x778>
 801e1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	dd23      	ble.n	801e22a <_strtod_l+0x78a>
 801e1e2:	4649      	mov	r1, r9
 801e1e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e1e6:	9805      	ldr	r0, [sp, #20]
 801e1e8:	f7ff f958 	bl	801d49c <__pow5mult>
 801e1ec:	4681      	mov	r9, r0
 801e1ee:	b9e0      	cbnz	r0, 801e22a <_strtod_l+0x78a>
 801e1f0:	f04f 0900 	mov.w	r9, #0
 801e1f4:	e677      	b.n	801dee6 <_strtod_l+0x446>
 801e1f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801e1fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801e1fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801e202:	35e2      	adds	r5, #226	@ 0xe2
 801e204:	fa01 f305 	lsl.w	r3, r1, r5
 801e208:	9310      	str	r3, [sp, #64]	@ 0x40
 801e20a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e20c:	e7ba      	b.n	801e184 <_strtod_l+0x6e4>
 801e20e:	2300      	movs	r3, #0
 801e210:	9310      	str	r3, [sp, #64]	@ 0x40
 801e212:	2301      	movs	r3, #1
 801e214:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e216:	e7b5      	b.n	801e184 <_strtod_l+0x6e4>
 801e218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e21a:	9805      	ldr	r0, [sp, #20]
 801e21c:	462a      	mov	r2, r5
 801e21e:	f7ff f997 	bl	801d550 <__lshift>
 801e222:	901a      	str	r0, [sp, #104]	@ 0x68
 801e224:	2800      	cmp	r0, #0
 801e226:	d1d9      	bne.n	801e1dc <_strtod_l+0x73c>
 801e228:	e65d      	b.n	801dee6 <_strtod_l+0x446>
 801e22a:	2e00      	cmp	r6, #0
 801e22c:	dd07      	ble.n	801e23e <_strtod_l+0x79e>
 801e22e:	4649      	mov	r1, r9
 801e230:	9805      	ldr	r0, [sp, #20]
 801e232:	4632      	mov	r2, r6
 801e234:	f7ff f98c 	bl	801d550 <__lshift>
 801e238:	4681      	mov	r9, r0
 801e23a:	2800      	cmp	r0, #0
 801e23c:	d0d8      	beq.n	801e1f0 <_strtod_l+0x750>
 801e23e:	2f00      	cmp	r7, #0
 801e240:	dd08      	ble.n	801e254 <_strtod_l+0x7b4>
 801e242:	4641      	mov	r1, r8
 801e244:	9805      	ldr	r0, [sp, #20]
 801e246:	463a      	mov	r2, r7
 801e248:	f7ff f982 	bl	801d550 <__lshift>
 801e24c:	4680      	mov	r8, r0
 801e24e:	2800      	cmp	r0, #0
 801e250:	f43f ae49 	beq.w	801dee6 <_strtod_l+0x446>
 801e254:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e256:	9805      	ldr	r0, [sp, #20]
 801e258:	464a      	mov	r2, r9
 801e25a:	f7ff fa01 	bl	801d660 <__mdiff>
 801e25e:	4604      	mov	r4, r0
 801e260:	2800      	cmp	r0, #0
 801e262:	f43f ae40 	beq.w	801dee6 <_strtod_l+0x446>
 801e266:	68c3      	ldr	r3, [r0, #12]
 801e268:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e26a:	2300      	movs	r3, #0
 801e26c:	60c3      	str	r3, [r0, #12]
 801e26e:	4641      	mov	r1, r8
 801e270:	f7ff f9da 	bl	801d628 <__mcmp>
 801e274:	2800      	cmp	r0, #0
 801e276:	da45      	bge.n	801e304 <_strtod_l+0x864>
 801e278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e27a:	ea53 030a 	orrs.w	r3, r3, sl
 801e27e:	d16b      	bne.n	801e358 <_strtod_l+0x8b8>
 801e280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e284:	2b00      	cmp	r3, #0
 801e286:	d167      	bne.n	801e358 <_strtod_l+0x8b8>
 801e288:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e28c:	0d1b      	lsrs	r3, r3, #20
 801e28e:	051b      	lsls	r3, r3, #20
 801e290:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801e294:	d960      	bls.n	801e358 <_strtod_l+0x8b8>
 801e296:	6963      	ldr	r3, [r4, #20]
 801e298:	b913      	cbnz	r3, 801e2a0 <_strtod_l+0x800>
 801e29a:	6923      	ldr	r3, [r4, #16]
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	dd5b      	ble.n	801e358 <_strtod_l+0x8b8>
 801e2a0:	4621      	mov	r1, r4
 801e2a2:	2201      	movs	r2, #1
 801e2a4:	9805      	ldr	r0, [sp, #20]
 801e2a6:	f7ff f953 	bl	801d550 <__lshift>
 801e2aa:	4641      	mov	r1, r8
 801e2ac:	4604      	mov	r4, r0
 801e2ae:	f7ff f9bb 	bl	801d628 <__mcmp>
 801e2b2:	2800      	cmp	r0, #0
 801e2b4:	dd50      	ble.n	801e358 <_strtod_l+0x8b8>
 801e2b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e2ba:	9a08      	ldr	r2, [sp, #32]
 801e2bc:	0d1b      	lsrs	r3, r3, #20
 801e2be:	051b      	lsls	r3, r3, #20
 801e2c0:	2a00      	cmp	r2, #0
 801e2c2:	d06a      	beq.n	801e39a <_strtod_l+0x8fa>
 801e2c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801e2c8:	d867      	bhi.n	801e39a <_strtod_l+0x8fa>
 801e2ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801e2ce:	f67f ae9d 	bls.w	801e00c <_strtod_l+0x56c>
 801e2d2:	4b0a      	ldr	r3, [pc, #40]	@ (801e2fc <_strtod_l+0x85c>)
 801e2d4:	4650      	mov	r0, sl
 801e2d6:	4659      	mov	r1, fp
 801e2d8:	2200      	movs	r2, #0
 801e2da:	f7e2 f99d 	bl	8000618 <__aeabi_dmul>
 801e2de:	4b08      	ldr	r3, [pc, #32]	@ (801e300 <_strtod_l+0x860>)
 801e2e0:	400b      	ands	r3, r1
 801e2e2:	4682      	mov	sl, r0
 801e2e4:	468b      	mov	fp, r1
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	f47f ae08 	bne.w	801defc <_strtod_l+0x45c>
 801e2ec:	9a05      	ldr	r2, [sp, #20]
 801e2ee:	2322      	movs	r3, #34	@ 0x22
 801e2f0:	6013      	str	r3, [r2, #0]
 801e2f2:	e603      	b.n	801defc <_strtod_l+0x45c>
 801e2f4:	080227a0 	.word	0x080227a0
 801e2f8:	fffffc02 	.word	0xfffffc02
 801e2fc:	39500000 	.word	0x39500000
 801e300:	7ff00000 	.word	0x7ff00000
 801e304:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e308:	d165      	bne.n	801e3d6 <_strtod_l+0x936>
 801e30a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e310:	b35a      	cbz	r2, 801e36a <_strtod_l+0x8ca>
 801e312:	4a9f      	ldr	r2, [pc, #636]	@ (801e590 <_strtod_l+0xaf0>)
 801e314:	4293      	cmp	r3, r2
 801e316:	d12b      	bne.n	801e370 <_strtod_l+0x8d0>
 801e318:	9b08      	ldr	r3, [sp, #32]
 801e31a:	4651      	mov	r1, sl
 801e31c:	b303      	cbz	r3, 801e360 <_strtod_l+0x8c0>
 801e31e:	4b9d      	ldr	r3, [pc, #628]	@ (801e594 <_strtod_l+0xaf4>)
 801e320:	465a      	mov	r2, fp
 801e322:	4013      	ands	r3, r2
 801e324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801e328:	f04f 32ff 	mov.w	r2, #4294967295
 801e32c:	d81b      	bhi.n	801e366 <_strtod_l+0x8c6>
 801e32e:	0d1b      	lsrs	r3, r3, #20
 801e330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801e334:	fa02 f303 	lsl.w	r3, r2, r3
 801e338:	4299      	cmp	r1, r3
 801e33a:	d119      	bne.n	801e370 <_strtod_l+0x8d0>
 801e33c:	4b96      	ldr	r3, [pc, #600]	@ (801e598 <_strtod_l+0xaf8>)
 801e33e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e340:	429a      	cmp	r2, r3
 801e342:	d102      	bne.n	801e34a <_strtod_l+0x8aa>
 801e344:	3101      	adds	r1, #1
 801e346:	f43f adce 	beq.w	801dee6 <_strtod_l+0x446>
 801e34a:	4b92      	ldr	r3, [pc, #584]	@ (801e594 <_strtod_l+0xaf4>)
 801e34c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e34e:	401a      	ands	r2, r3
 801e350:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801e354:	f04f 0a00 	mov.w	sl, #0
 801e358:	9b08      	ldr	r3, [sp, #32]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d1b9      	bne.n	801e2d2 <_strtod_l+0x832>
 801e35e:	e5cd      	b.n	801defc <_strtod_l+0x45c>
 801e360:	f04f 33ff 	mov.w	r3, #4294967295
 801e364:	e7e8      	b.n	801e338 <_strtod_l+0x898>
 801e366:	4613      	mov	r3, r2
 801e368:	e7e6      	b.n	801e338 <_strtod_l+0x898>
 801e36a:	ea53 030a 	orrs.w	r3, r3, sl
 801e36e:	d0a2      	beq.n	801e2b6 <_strtod_l+0x816>
 801e370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e372:	b1db      	cbz	r3, 801e3ac <_strtod_l+0x90c>
 801e374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e376:	4213      	tst	r3, r2
 801e378:	d0ee      	beq.n	801e358 <_strtod_l+0x8b8>
 801e37a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e37c:	9a08      	ldr	r2, [sp, #32]
 801e37e:	4650      	mov	r0, sl
 801e380:	4659      	mov	r1, fp
 801e382:	b1bb      	cbz	r3, 801e3b4 <_strtod_l+0x914>
 801e384:	f7ff fb6c 	bl	801da60 <sulp>
 801e388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e38c:	ec53 2b10 	vmov	r2, r3, d0
 801e390:	f7e1 ff8c 	bl	80002ac <__adddf3>
 801e394:	4682      	mov	sl, r0
 801e396:	468b      	mov	fp, r1
 801e398:	e7de      	b.n	801e358 <_strtod_l+0x8b8>
 801e39a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e39e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e3a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e3a6:	f04f 3aff 	mov.w	sl, #4294967295
 801e3aa:	e7d5      	b.n	801e358 <_strtod_l+0x8b8>
 801e3ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e3ae:	ea13 0f0a 	tst.w	r3, sl
 801e3b2:	e7e1      	b.n	801e378 <_strtod_l+0x8d8>
 801e3b4:	f7ff fb54 	bl	801da60 <sulp>
 801e3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e3bc:	ec53 2b10 	vmov	r2, r3, d0
 801e3c0:	f7e1 ff72 	bl	80002a8 <__aeabi_dsub>
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	4682      	mov	sl, r0
 801e3ca:	468b      	mov	fp, r1
 801e3cc:	f7e2 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 801e3d0:	2800      	cmp	r0, #0
 801e3d2:	d0c1      	beq.n	801e358 <_strtod_l+0x8b8>
 801e3d4:	e61a      	b.n	801e00c <_strtod_l+0x56c>
 801e3d6:	4641      	mov	r1, r8
 801e3d8:	4620      	mov	r0, r4
 801e3da:	f7ff fa9d 	bl	801d918 <__ratio>
 801e3de:	ec57 6b10 	vmov	r6, r7, d0
 801e3e2:	2200      	movs	r2, #0
 801e3e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e3e8:	4630      	mov	r0, r6
 801e3ea:	4639      	mov	r1, r7
 801e3ec:	f7e2 fb90 	bl	8000b10 <__aeabi_dcmple>
 801e3f0:	2800      	cmp	r0, #0
 801e3f2:	d06f      	beq.n	801e4d4 <_strtod_l+0xa34>
 801e3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d17a      	bne.n	801e4f0 <_strtod_l+0xa50>
 801e3fa:	f1ba 0f00 	cmp.w	sl, #0
 801e3fe:	d158      	bne.n	801e4b2 <_strtod_l+0xa12>
 801e400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e406:	2b00      	cmp	r3, #0
 801e408:	d15a      	bne.n	801e4c0 <_strtod_l+0xa20>
 801e40a:	4b64      	ldr	r3, [pc, #400]	@ (801e59c <_strtod_l+0xafc>)
 801e40c:	2200      	movs	r2, #0
 801e40e:	4630      	mov	r0, r6
 801e410:	4639      	mov	r1, r7
 801e412:	f7e2 fb73 	bl	8000afc <__aeabi_dcmplt>
 801e416:	2800      	cmp	r0, #0
 801e418:	d159      	bne.n	801e4ce <_strtod_l+0xa2e>
 801e41a:	4630      	mov	r0, r6
 801e41c:	4639      	mov	r1, r7
 801e41e:	4b60      	ldr	r3, [pc, #384]	@ (801e5a0 <_strtod_l+0xb00>)
 801e420:	2200      	movs	r2, #0
 801e422:	f7e2 f8f9 	bl	8000618 <__aeabi_dmul>
 801e426:	4606      	mov	r6, r0
 801e428:	460f      	mov	r7, r1
 801e42a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801e42e:	9606      	str	r6, [sp, #24]
 801e430:	9307      	str	r3, [sp, #28]
 801e432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e436:	4d57      	ldr	r5, [pc, #348]	@ (801e594 <_strtod_l+0xaf4>)
 801e438:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801e43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e43e:	401d      	ands	r5, r3
 801e440:	4b58      	ldr	r3, [pc, #352]	@ (801e5a4 <_strtod_l+0xb04>)
 801e442:	429d      	cmp	r5, r3
 801e444:	f040 80b2 	bne.w	801e5ac <_strtod_l+0xb0c>
 801e448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e44a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801e44e:	ec4b ab10 	vmov	d0, sl, fp
 801e452:	f7ff f999 	bl	801d788 <__ulp>
 801e456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e45a:	ec51 0b10 	vmov	r0, r1, d0
 801e45e:	f7e2 f8db 	bl	8000618 <__aeabi_dmul>
 801e462:	4652      	mov	r2, sl
 801e464:	465b      	mov	r3, fp
 801e466:	f7e1 ff21 	bl	80002ac <__adddf3>
 801e46a:	460b      	mov	r3, r1
 801e46c:	4949      	ldr	r1, [pc, #292]	@ (801e594 <_strtod_l+0xaf4>)
 801e46e:	4a4e      	ldr	r2, [pc, #312]	@ (801e5a8 <_strtod_l+0xb08>)
 801e470:	4019      	ands	r1, r3
 801e472:	4291      	cmp	r1, r2
 801e474:	4682      	mov	sl, r0
 801e476:	d942      	bls.n	801e4fe <_strtod_l+0xa5e>
 801e478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e47a:	4b47      	ldr	r3, [pc, #284]	@ (801e598 <_strtod_l+0xaf8>)
 801e47c:	429a      	cmp	r2, r3
 801e47e:	d103      	bne.n	801e488 <_strtod_l+0x9e8>
 801e480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e482:	3301      	adds	r3, #1
 801e484:	f43f ad2f 	beq.w	801dee6 <_strtod_l+0x446>
 801e488:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801e598 <_strtod_l+0xaf8>
 801e48c:	f04f 3aff 	mov.w	sl, #4294967295
 801e490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e492:	9805      	ldr	r0, [sp, #20]
 801e494:	f7fe fe4c 	bl	801d130 <_Bfree>
 801e498:	9805      	ldr	r0, [sp, #20]
 801e49a:	4649      	mov	r1, r9
 801e49c:	f7fe fe48 	bl	801d130 <_Bfree>
 801e4a0:	9805      	ldr	r0, [sp, #20]
 801e4a2:	4641      	mov	r1, r8
 801e4a4:	f7fe fe44 	bl	801d130 <_Bfree>
 801e4a8:	9805      	ldr	r0, [sp, #20]
 801e4aa:	4621      	mov	r1, r4
 801e4ac:	f7fe fe40 	bl	801d130 <_Bfree>
 801e4b0:	e619      	b.n	801e0e6 <_strtod_l+0x646>
 801e4b2:	f1ba 0f01 	cmp.w	sl, #1
 801e4b6:	d103      	bne.n	801e4c0 <_strtod_l+0xa20>
 801e4b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	f43f ada6 	beq.w	801e00c <_strtod_l+0x56c>
 801e4c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801e570 <_strtod_l+0xad0>
 801e4c4:	4f35      	ldr	r7, [pc, #212]	@ (801e59c <_strtod_l+0xafc>)
 801e4c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e4ca:	2600      	movs	r6, #0
 801e4cc:	e7b1      	b.n	801e432 <_strtod_l+0x992>
 801e4ce:	4f34      	ldr	r7, [pc, #208]	@ (801e5a0 <_strtod_l+0xb00>)
 801e4d0:	2600      	movs	r6, #0
 801e4d2:	e7aa      	b.n	801e42a <_strtod_l+0x98a>
 801e4d4:	4b32      	ldr	r3, [pc, #200]	@ (801e5a0 <_strtod_l+0xb00>)
 801e4d6:	4630      	mov	r0, r6
 801e4d8:	4639      	mov	r1, r7
 801e4da:	2200      	movs	r2, #0
 801e4dc:	f7e2 f89c 	bl	8000618 <__aeabi_dmul>
 801e4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4e2:	4606      	mov	r6, r0
 801e4e4:	460f      	mov	r7, r1
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	d09f      	beq.n	801e42a <_strtod_l+0x98a>
 801e4ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e4ee:	e7a0      	b.n	801e432 <_strtod_l+0x992>
 801e4f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801e578 <_strtod_l+0xad8>
 801e4f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e4f8:	ec57 6b17 	vmov	r6, r7, d7
 801e4fc:	e799      	b.n	801e432 <_strtod_l+0x992>
 801e4fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801e502:	9b08      	ldr	r3, [sp, #32]
 801e504:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d1c1      	bne.n	801e490 <_strtod_l+0x9f0>
 801e50c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e510:	0d1b      	lsrs	r3, r3, #20
 801e512:	051b      	lsls	r3, r3, #20
 801e514:	429d      	cmp	r5, r3
 801e516:	d1bb      	bne.n	801e490 <_strtod_l+0x9f0>
 801e518:	4630      	mov	r0, r6
 801e51a:	4639      	mov	r1, r7
 801e51c:	f7e2 fbdc 	bl	8000cd8 <__aeabi_d2lz>
 801e520:	f7e2 f84c 	bl	80005bc <__aeabi_l2d>
 801e524:	4602      	mov	r2, r0
 801e526:	460b      	mov	r3, r1
 801e528:	4630      	mov	r0, r6
 801e52a:	4639      	mov	r1, r7
 801e52c:	f7e1 febc 	bl	80002a8 <__aeabi_dsub>
 801e530:	460b      	mov	r3, r1
 801e532:	4602      	mov	r2, r0
 801e534:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801e538:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801e53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e53e:	ea46 060a 	orr.w	r6, r6, sl
 801e542:	431e      	orrs	r6, r3
 801e544:	d06f      	beq.n	801e626 <_strtod_l+0xb86>
 801e546:	a30e      	add	r3, pc, #56	@ (adr r3, 801e580 <_strtod_l+0xae0>)
 801e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54c:	f7e2 fad6 	bl	8000afc <__aeabi_dcmplt>
 801e550:	2800      	cmp	r0, #0
 801e552:	f47f acd3 	bne.w	801defc <_strtod_l+0x45c>
 801e556:	a30c      	add	r3, pc, #48	@ (adr r3, 801e588 <_strtod_l+0xae8>)
 801e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e560:	f7e2 faea 	bl	8000b38 <__aeabi_dcmpgt>
 801e564:	2800      	cmp	r0, #0
 801e566:	d093      	beq.n	801e490 <_strtod_l+0x9f0>
 801e568:	e4c8      	b.n	801defc <_strtod_l+0x45c>
 801e56a:	bf00      	nop
 801e56c:	f3af 8000 	nop.w
 801e570:	00000000 	.word	0x00000000
 801e574:	bff00000 	.word	0xbff00000
 801e578:	00000000 	.word	0x00000000
 801e57c:	3ff00000 	.word	0x3ff00000
 801e580:	94a03595 	.word	0x94a03595
 801e584:	3fdfffff 	.word	0x3fdfffff
 801e588:	35afe535 	.word	0x35afe535
 801e58c:	3fe00000 	.word	0x3fe00000
 801e590:	000fffff 	.word	0x000fffff
 801e594:	7ff00000 	.word	0x7ff00000
 801e598:	7fefffff 	.word	0x7fefffff
 801e59c:	3ff00000 	.word	0x3ff00000
 801e5a0:	3fe00000 	.word	0x3fe00000
 801e5a4:	7fe00000 	.word	0x7fe00000
 801e5a8:	7c9fffff 	.word	0x7c9fffff
 801e5ac:	9b08      	ldr	r3, [sp, #32]
 801e5ae:	b323      	cbz	r3, 801e5fa <_strtod_l+0xb5a>
 801e5b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801e5b4:	d821      	bhi.n	801e5fa <_strtod_l+0xb5a>
 801e5b6:	a328      	add	r3, pc, #160	@ (adr r3, 801e658 <_strtod_l+0xbb8>)
 801e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5bc:	4630      	mov	r0, r6
 801e5be:	4639      	mov	r1, r7
 801e5c0:	f7e2 faa6 	bl	8000b10 <__aeabi_dcmple>
 801e5c4:	b1a0      	cbz	r0, 801e5f0 <_strtod_l+0xb50>
 801e5c6:	4639      	mov	r1, r7
 801e5c8:	4630      	mov	r0, r6
 801e5ca:	f7e2 fafd 	bl	8000bc8 <__aeabi_d2uiz>
 801e5ce:	2801      	cmp	r0, #1
 801e5d0:	bf38      	it	cc
 801e5d2:	2001      	movcc	r0, #1
 801e5d4:	f7e1 ffa6 	bl	8000524 <__aeabi_ui2d>
 801e5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5da:	4606      	mov	r6, r0
 801e5dc:	460f      	mov	r7, r1
 801e5de:	b9fb      	cbnz	r3, 801e620 <_strtod_l+0xb80>
 801e5e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e5e4:	9014      	str	r0, [sp, #80]	@ 0x50
 801e5e6:	9315      	str	r3, [sp, #84]	@ 0x54
 801e5e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801e5ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801e5f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e5f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801e5f6:	1b5b      	subs	r3, r3, r5
 801e5f8:	9311      	str	r3, [sp, #68]	@ 0x44
 801e5fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e5fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801e602:	f7ff f8c1 	bl	801d788 <__ulp>
 801e606:	4650      	mov	r0, sl
 801e608:	ec53 2b10 	vmov	r2, r3, d0
 801e60c:	4659      	mov	r1, fp
 801e60e:	f7e2 f803 	bl	8000618 <__aeabi_dmul>
 801e612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801e616:	f7e1 fe49 	bl	80002ac <__adddf3>
 801e61a:	4682      	mov	sl, r0
 801e61c:	468b      	mov	fp, r1
 801e61e:	e770      	b.n	801e502 <_strtod_l+0xa62>
 801e620:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801e624:	e7e0      	b.n	801e5e8 <_strtod_l+0xb48>
 801e626:	a30e      	add	r3, pc, #56	@ (adr r3, 801e660 <_strtod_l+0xbc0>)
 801e628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62c:	f7e2 fa66 	bl	8000afc <__aeabi_dcmplt>
 801e630:	e798      	b.n	801e564 <_strtod_l+0xac4>
 801e632:	2300      	movs	r3, #0
 801e634:	930e      	str	r3, [sp, #56]	@ 0x38
 801e636:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e63a:	6013      	str	r3, [r2, #0]
 801e63c:	f7ff ba6d 	b.w	801db1a <_strtod_l+0x7a>
 801e640:	2a65      	cmp	r2, #101	@ 0x65
 801e642:	f43f ab68 	beq.w	801dd16 <_strtod_l+0x276>
 801e646:	2a45      	cmp	r2, #69	@ 0x45
 801e648:	f43f ab65 	beq.w	801dd16 <_strtod_l+0x276>
 801e64c:	2301      	movs	r3, #1
 801e64e:	f7ff bba0 	b.w	801dd92 <_strtod_l+0x2f2>
 801e652:	bf00      	nop
 801e654:	f3af 8000 	nop.w
 801e658:	ffc00000 	.word	0xffc00000
 801e65c:	41dfffff 	.word	0x41dfffff
 801e660:	94a03595 	.word	0x94a03595
 801e664:	3fcfffff 	.word	0x3fcfffff

0801e668 <_strtod_r>:
 801e668:	4b01      	ldr	r3, [pc, #4]	@ (801e670 <_strtod_r+0x8>)
 801e66a:	f7ff ba19 	b.w	801daa0 <_strtod_l>
 801e66e:	bf00      	nop
 801e670:	200001b0 	.word	0x200001b0

0801e674 <_strtol_l.isra.0>:
 801e674:	2b24      	cmp	r3, #36	@ 0x24
 801e676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e67a:	4686      	mov	lr, r0
 801e67c:	4690      	mov	r8, r2
 801e67e:	d801      	bhi.n	801e684 <_strtol_l.isra.0+0x10>
 801e680:	2b01      	cmp	r3, #1
 801e682:	d106      	bne.n	801e692 <_strtol_l.isra.0+0x1e>
 801e684:	f7fd fd60 	bl	801c148 <__errno>
 801e688:	2316      	movs	r3, #22
 801e68a:	6003      	str	r3, [r0, #0]
 801e68c:	2000      	movs	r0, #0
 801e68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e692:	4834      	ldr	r0, [pc, #208]	@ (801e764 <_strtol_l.isra.0+0xf0>)
 801e694:	460d      	mov	r5, r1
 801e696:	462a      	mov	r2, r5
 801e698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e69c:	5d06      	ldrb	r6, [r0, r4]
 801e69e:	f016 0608 	ands.w	r6, r6, #8
 801e6a2:	d1f8      	bne.n	801e696 <_strtol_l.isra.0+0x22>
 801e6a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801e6a6:	d110      	bne.n	801e6ca <_strtol_l.isra.0+0x56>
 801e6a8:	782c      	ldrb	r4, [r5, #0]
 801e6aa:	2601      	movs	r6, #1
 801e6ac:	1c95      	adds	r5, r2, #2
 801e6ae:	f033 0210 	bics.w	r2, r3, #16
 801e6b2:	d115      	bne.n	801e6e0 <_strtol_l.isra.0+0x6c>
 801e6b4:	2c30      	cmp	r4, #48	@ 0x30
 801e6b6:	d10d      	bne.n	801e6d4 <_strtol_l.isra.0+0x60>
 801e6b8:	782a      	ldrb	r2, [r5, #0]
 801e6ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801e6be:	2a58      	cmp	r2, #88	@ 0x58
 801e6c0:	d108      	bne.n	801e6d4 <_strtol_l.isra.0+0x60>
 801e6c2:	786c      	ldrb	r4, [r5, #1]
 801e6c4:	3502      	adds	r5, #2
 801e6c6:	2310      	movs	r3, #16
 801e6c8:	e00a      	b.n	801e6e0 <_strtol_l.isra.0+0x6c>
 801e6ca:	2c2b      	cmp	r4, #43	@ 0x2b
 801e6cc:	bf04      	itt	eq
 801e6ce:	782c      	ldrbeq	r4, [r5, #0]
 801e6d0:	1c95      	addeq	r5, r2, #2
 801e6d2:	e7ec      	b.n	801e6ae <_strtol_l.isra.0+0x3a>
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d1f6      	bne.n	801e6c6 <_strtol_l.isra.0+0x52>
 801e6d8:	2c30      	cmp	r4, #48	@ 0x30
 801e6da:	bf14      	ite	ne
 801e6dc:	230a      	movne	r3, #10
 801e6de:	2308      	moveq	r3, #8
 801e6e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801e6e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e6e8:	2200      	movs	r2, #0
 801e6ea:	fbbc f9f3 	udiv	r9, ip, r3
 801e6ee:	4610      	mov	r0, r2
 801e6f0:	fb03 ca19 	mls	sl, r3, r9, ip
 801e6f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801e6f8:	2f09      	cmp	r7, #9
 801e6fa:	d80f      	bhi.n	801e71c <_strtol_l.isra.0+0xa8>
 801e6fc:	463c      	mov	r4, r7
 801e6fe:	42a3      	cmp	r3, r4
 801e700:	dd1b      	ble.n	801e73a <_strtol_l.isra.0+0xc6>
 801e702:	1c57      	adds	r7, r2, #1
 801e704:	d007      	beq.n	801e716 <_strtol_l.isra.0+0xa2>
 801e706:	4581      	cmp	r9, r0
 801e708:	d314      	bcc.n	801e734 <_strtol_l.isra.0+0xc0>
 801e70a:	d101      	bne.n	801e710 <_strtol_l.isra.0+0x9c>
 801e70c:	45a2      	cmp	sl, r4
 801e70e:	db11      	blt.n	801e734 <_strtol_l.isra.0+0xc0>
 801e710:	fb00 4003 	mla	r0, r0, r3, r4
 801e714:	2201      	movs	r2, #1
 801e716:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e71a:	e7eb      	b.n	801e6f4 <_strtol_l.isra.0+0x80>
 801e71c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801e720:	2f19      	cmp	r7, #25
 801e722:	d801      	bhi.n	801e728 <_strtol_l.isra.0+0xb4>
 801e724:	3c37      	subs	r4, #55	@ 0x37
 801e726:	e7ea      	b.n	801e6fe <_strtol_l.isra.0+0x8a>
 801e728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801e72c:	2f19      	cmp	r7, #25
 801e72e:	d804      	bhi.n	801e73a <_strtol_l.isra.0+0xc6>
 801e730:	3c57      	subs	r4, #87	@ 0x57
 801e732:	e7e4      	b.n	801e6fe <_strtol_l.isra.0+0x8a>
 801e734:	f04f 32ff 	mov.w	r2, #4294967295
 801e738:	e7ed      	b.n	801e716 <_strtol_l.isra.0+0xa2>
 801e73a:	1c53      	adds	r3, r2, #1
 801e73c:	d108      	bne.n	801e750 <_strtol_l.isra.0+0xdc>
 801e73e:	2322      	movs	r3, #34	@ 0x22
 801e740:	f8ce 3000 	str.w	r3, [lr]
 801e744:	4660      	mov	r0, ip
 801e746:	f1b8 0f00 	cmp.w	r8, #0
 801e74a:	d0a0      	beq.n	801e68e <_strtol_l.isra.0+0x1a>
 801e74c:	1e69      	subs	r1, r5, #1
 801e74e:	e006      	b.n	801e75e <_strtol_l.isra.0+0xea>
 801e750:	b106      	cbz	r6, 801e754 <_strtol_l.isra.0+0xe0>
 801e752:	4240      	negs	r0, r0
 801e754:	f1b8 0f00 	cmp.w	r8, #0
 801e758:	d099      	beq.n	801e68e <_strtol_l.isra.0+0x1a>
 801e75a:	2a00      	cmp	r2, #0
 801e75c:	d1f6      	bne.n	801e74c <_strtol_l.isra.0+0xd8>
 801e75e:	f8c8 1000 	str.w	r1, [r8]
 801e762:	e794      	b.n	801e68e <_strtol_l.isra.0+0x1a>
 801e764:	080227c9 	.word	0x080227c9

0801e768 <_strtol_r>:
 801e768:	f7ff bf84 	b.w	801e674 <_strtol_l.isra.0>

0801e76c <__ssputs_r>:
 801e76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e770:	688e      	ldr	r6, [r1, #8]
 801e772:	461f      	mov	r7, r3
 801e774:	42be      	cmp	r6, r7
 801e776:	680b      	ldr	r3, [r1, #0]
 801e778:	4682      	mov	sl, r0
 801e77a:	460c      	mov	r4, r1
 801e77c:	4690      	mov	r8, r2
 801e77e:	d82d      	bhi.n	801e7dc <__ssputs_r+0x70>
 801e780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e788:	d026      	beq.n	801e7d8 <__ssputs_r+0x6c>
 801e78a:	6965      	ldr	r5, [r4, #20]
 801e78c:	6909      	ldr	r1, [r1, #16]
 801e78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e792:	eba3 0901 	sub.w	r9, r3, r1
 801e796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e79a:	1c7b      	adds	r3, r7, #1
 801e79c:	444b      	add	r3, r9
 801e79e:	106d      	asrs	r5, r5, #1
 801e7a0:	429d      	cmp	r5, r3
 801e7a2:	bf38      	it	cc
 801e7a4:	461d      	movcc	r5, r3
 801e7a6:	0553      	lsls	r3, r2, #21
 801e7a8:	d527      	bpl.n	801e7fa <__ssputs_r+0x8e>
 801e7aa:	4629      	mov	r1, r5
 801e7ac:	f7fe fbf4 	bl	801cf98 <_malloc_r>
 801e7b0:	4606      	mov	r6, r0
 801e7b2:	b360      	cbz	r0, 801e80e <__ssputs_r+0xa2>
 801e7b4:	6921      	ldr	r1, [r4, #16]
 801e7b6:	464a      	mov	r2, r9
 801e7b8:	f7fd fcf3 	bl	801c1a2 <memcpy>
 801e7bc:	89a3      	ldrh	r3, [r4, #12]
 801e7be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e7c6:	81a3      	strh	r3, [r4, #12]
 801e7c8:	6126      	str	r6, [r4, #16]
 801e7ca:	6165      	str	r5, [r4, #20]
 801e7cc:	444e      	add	r6, r9
 801e7ce:	eba5 0509 	sub.w	r5, r5, r9
 801e7d2:	6026      	str	r6, [r4, #0]
 801e7d4:	60a5      	str	r5, [r4, #8]
 801e7d6:	463e      	mov	r6, r7
 801e7d8:	42be      	cmp	r6, r7
 801e7da:	d900      	bls.n	801e7de <__ssputs_r+0x72>
 801e7dc:	463e      	mov	r6, r7
 801e7de:	6820      	ldr	r0, [r4, #0]
 801e7e0:	4632      	mov	r2, r6
 801e7e2:	4641      	mov	r1, r8
 801e7e4:	f7fd fbd4 	bl	801bf90 <memmove>
 801e7e8:	68a3      	ldr	r3, [r4, #8]
 801e7ea:	1b9b      	subs	r3, r3, r6
 801e7ec:	60a3      	str	r3, [r4, #8]
 801e7ee:	6823      	ldr	r3, [r4, #0]
 801e7f0:	4433      	add	r3, r6
 801e7f2:	6023      	str	r3, [r4, #0]
 801e7f4:	2000      	movs	r0, #0
 801e7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7fa:	462a      	mov	r2, r5
 801e7fc:	f7ff f902 	bl	801da04 <_realloc_r>
 801e800:	4606      	mov	r6, r0
 801e802:	2800      	cmp	r0, #0
 801e804:	d1e0      	bne.n	801e7c8 <__ssputs_r+0x5c>
 801e806:	6921      	ldr	r1, [r4, #16]
 801e808:	4650      	mov	r0, sl
 801e80a:	f7fe fb51 	bl	801ceb0 <_free_r>
 801e80e:	230c      	movs	r3, #12
 801e810:	f8ca 3000 	str.w	r3, [sl]
 801e814:	89a3      	ldrh	r3, [r4, #12]
 801e816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e81a:	81a3      	strh	r3, [r4, #12]
 801e81c:	f04f 30ff 	mov.w	r0, #4294967295
 801e820:	e7e9      	b.n	801e7f6 <__ssputs_r+0x8a>
	...

0801e824 <_svfiprintf_r>:
 801e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e828:	4698      	mov	r8, r3
 801e82a:	898b      	ldrh	r3, [r1, #12]
 801e82c:	061b      	lsls	r3, r3, #24
 801e82e:	b09d      	sub	sp, #116	@ 0x74
 801e830:	4607      	mov	r7, r0
 801e832:	460d      	mov	r5, r1
 801e834:	4614      	mov	r4, r2
 801e836:	d510      	bpl.n	801e85a <_svfiprintf_r+0x36>
 801e838:	690b      	ldr	r3, [r1, #16]
 801e83a:	b973      	cbnz	r3, 801e85a <_svfiprintf_r+0x36>
 801e83c:	2140      	movs	r1, #64	@ 0x40
 801e83e:	f7fe fbab 	bl	801cf98 <_malloc_r>
 801e842:	6028      	str	r0, [r5, #0]
 801e844:	6128      	str	r0, [r5, #16]
 801e846:	b930      	cbnz	r0, 801e856 <_svfiprintf_r+0x32>
 801e848:	230c      	movs	r3, #12
 801e84a:	603b      	str	r3, [r7, #0]
 801e84c:	f04f 30ff 	mov.w	r0, #4294967295
 801e850:	b01d      	add	sp, #116	@ 0x74
 801e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e856:	2340      	movs	r3, #64	@ 0x40
 801e858:	616b      	str	r3, [r5, #20]
 801e85a:	2300      	movs	r3, #0
 801e85c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e85e:	2320      	movs	r3, #32
 801e860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e864:	f8cd 800c 	str.w	r8, [sp, #12]
 801e868:	2330      	movs	r3, #48	@ 0x30
 801e86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ea08 <_svfiprintf_r+0x1e4>
 801e86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e872:	f04f 0901 	mov.w	r9, #1
 801e876:	4623      	mov	r3, r4
 801e878:	469a      	mov	sl, r3
 801e87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e87e:	b10a      	cbz	r2, 801e884 <_svfiprintf_r+0x60>
 801e880:	2a25      	cmp	r2, #37	@ 0x25
 801e882:	d1f9      	bne.n	801e878 <_svfiprintf_r+0x54>
 801e884:	ebba 0b04 	subs.w	fp, sl, r4
 801e888:	d00b      	beq.n	801e8a2 <_svfiprintf_r+0x7e>
 801e88a:	465b      	mov	r3, fp
 801e88c:	4622      	mov	r2, r4
 801e88e:	4629      	mov	r1, r5
 801e890:	4638      	mov	r0, r7
 801e892:	f7ff ff6b 	bl	801e76c <__ssputs_r>
 801e896:	3001      	adds	r0, #1
 801e898:	f000 80a7 	beq.w	801e9ea <_svfiprintf_r+0x1c6>
 801e89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e89e:	445a      	add	r2, fp
 801e8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 801e8a2:	f89a 3000 	ldrb.w	r3, [sl]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	f000 809f 	beq.w	801e9ea <_svfiprintf_r+0x1c6>
 801e8ac:	2300      	movs	r3, #0
 801e8ae:	f04f 32ff 	mov.w	r2, #4294967295
 801e8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8b6:	f10a 0a01 	add.w	sl, sl, #1
 801e8ba:	9304      	str	r3, [sp, #16]
 801e8bc:	9307      	str	r3, [sp, #28]
 801e8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 801e8c4:	4654      	mov	r4, sl
 801e8c6:	2205      	movs	r2, #5
 801e8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8cc:	484e      	ldr	r0, [pc, #312]	@ (801ea08 <_svfiprintf_r+0x1e4>)
 801e8ce:	f7e1 fc8f 	bl	80001f0 <memchr>
 801e8d2:	9a04      	ldr	r2, [sp, #16]
 801e8d4:	b9d8      	cbnz	r0, 801e90e <_svfiprintf_r+0xea>
 801e8d6:	06d0      	lsls	r0, r2, #27
 801e8d8:	bf44      	itt	mi
 801e8da:	2320      	movmi	r3, #32
 801e8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8e0:	0711      	lsls	r1, r2, #28
 801e8e2:	bf44      	itt	mi
 801e8e4:	232b      	movmi	r3, #43	@ 0x2b
 801e8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8ea:	f89a 3000 	ldrb.w	r3, [sl]
 801e8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 801e8f0:	d015      	beq.n	801e91e <_svfiprintf_r+0xfa>
 801e8f2:	9a07      	ldr	r2, [sp, #28]
 801e8f4:	4654      	mov	r4, sl
 801e8f6:	2000      	movs	r0, #0
 801e8f8:	f04f 0c0a 	mov.w	ip, #10
 801e8fc:	4621      	mov	r1, r4
 801e8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e902:	3b30      	subs	r3, #48	@ 0x30
 801e904:	2b09      	cmp	r3, #9
 801e906:	d94b      	bls.n	801e9a0 <_svfiprintf_r+0x17c>
 801e908:	b1b0      	cbz	r0, 801e938 <_svfiprintf_r+0x114>
 801e90a:	9207      	str	r2, [sp, #28]
 801e90c:	e014      	b.n	801e938 <_svfiprintf_r+0x114>
 801e90e:	eba0 0308 	sub.w	r3, r0, r8
 801e912:	fa09 f303 	lsl.w	r3, r9, r3
 801e916:	4313      	orrs	r3, r2
 801e918:	9304      	str	r3, [sp, #16]
 801e91a:	46a2      	mov	sl, r4
 801e91c:	e7d2      	b.n	801e8c4 <_svfiprintf_r+0xa0>
 801e91e:	9b03      	ldr	r3, [sp, #12]
 801e920:	1d19      	adds	r1, r3, #4
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	9103      	str	r1, [sp, #12]
 801e926:	2b00      	cmp	r3, #0
 801e928:	bfbb      	ittet	lt
 801e92a:	425b      	neglt	r3, r3
 801e92c:	f042 0202 	orrlt.w	r2, r2, #2
 801e930:	9307      	strge	r3, [sp, #28]
 801e932:	9307      	strlt	r3, [sp, #28]
 801e934:	bfb8      	it	lt
 801e936:	9204      	strlt	r2, [sp, #16]
 801e938:	7823      	ldrb	r3, [r4, #0]
 801e93a:	2b2e      	cmp	r3, #46	@ 0x2e
 801e93c:	d10a      	bne.n	801e954 <_svfiprintf_r+0x130>
 801e93e:	7863      	ldrb	r3, [r4, #1]
 801e940:	2b2a      	cmp	r3, #42	@ 0x2a
 801e942:	d132      	bne.n	801e9aa <_svfiprintf_r+0x186>
 801e944:	9b03      	ldr	r3, [sp, #12]
 801e946:	1d1a      	adds	r2, r3, #4
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	9203      	str	r2, [sp, #12]
 801e94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e950:	3402      	adds	r4, #2
 801e952:	9305      	str	r3, [sp, #20]
 801e954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ea18 <_svfiprintf_r+0x1f4>
 801e958:	7821      	ldrb	r1, [r4, #0]
 801e95a:	2203      	movs	r2, #3
 801e95c:	4650      	mov	r0, sl
 801e95e:	f7e1 fc47 	bl	80001f0 <memchr>
 801e962:	b138      	cbz	r0, 801e974 <_svfiprintf_r+0x150>
 801e964:	9b04      	ldr	r3, [sp, #16]
 801e966:	eba0 000a 	sub.w	r0, r0, sl
 801e96a:	2240      	movs	r2, #64	@ 0x40
 801e96c:	4082      	lsls	r2, r0
 801e96e:	4313      	orrs	r3, r2
 801e970:	3401      	adds	r4, #1
 801e972:	9304      	str	r3, [sp, #16]
 801e974:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e978:	4824      	ldr	r0, [pc, #144]	@ (801ea0c <_svfiprintf_r+0x1e8>)
 801e97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e97e:	2206      	movs	r2, #6
 801e980:	f7e1 fc36 	bl	80001f0 <memchr>
 801e984:	2800      	cmp	r0, #0
 801e986:	d036      	beq.n	801e9f6 <_svfiprintf_r+0x1d2>
 801e988:	4b21      	ldr	r3, [pc, #132]	@ (801ea10 <_svfiprintf_r+0x1ec>)
 801e98a:	bb1b      	cbnz	r3, 801e9d4 <_svfiprintf_r+0x1b0>
 801e98c:	9b03      	ldr	r3, [sp, #12]
 801e98e:	3307      	adds	r3, #7
 801e990:	f023 0307 	bic.w	r3, r3, #7
 801e994:	3308      	adds	r3, #8
 801e996:	9303      	str	r3, [sp, #12]
 801e998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e99a:	4433      	add	r3, r6
 801e99c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e99e:	e76a      	b.n	801e876 <_svfiprintf_r+0x52>
 801e9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9a4:	460c      	mov	r4, r1
 801e9a6:	2001      	movs	r0, #1
 801e9a8:	e7a8      	b.n	801e8fc <_svfiprintf_r+0xd8>
 801e9aa:	2300      	movs	r3, #0
 801e9ac:	3401      	adds	r4, #1
 801e9ae:	9305      	str	r3, [sp, #20]
 801e9b0:	4619      	mov	r1, r3
 801e9b2:	f04f 0c0a 	mov.w	ip, #10
 801e9b6:	4620      	mov	r0, r4
 801e9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9bc:	3a30      	subs	r2, #48	@ 0x30
 801e9be:	2a09      	cmp	r2, #9
 801e9c0:	d903      	bls.n	801e9ca <_svfiprintf_r+0x1a6>
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d0c6      	beq.n	801e954 <_svfiprintf_r+0x130>
 801e9c6:	9105      	str	r1, [sp, #20]
 801e9c8:	e7c4      	b.n	801e954 <_svfiprintf_r+0x130>
 801e9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9ce:	4604      	mov	r4, r0
 801e9d0:	2301      	movs	r3, #1
 801e9d2:	e7f0      	b.n	801e9b6 <_svfiprintf_r+0x192>
 801e9d4:	ab03      	add	r3, sp, #12
 801e9d6:	9300      	str	r3, [sp, #0]
 801e9d8:	462a      	mov	r2, r5
 801e9da:	4b0e      	ldr	r3, [pc, #56]	@ (801ea14 <_svfiprintf_r+0x1f0>)
 801e9dc:	a904      	add	r1, sp, #16
 801e9de:	4638      	mov	r0, r7
 801e9e0:	f7fc f928 	bl	801ac34 <_printf_float>
 801e9e4:	1c42      	adds	r2, r0, #1
 801e9e6:	4606      	mov	r6, r0
 801e9e8:	d1d6      	bne.n	801e998 <_svfiprintf_r+0x174>
 801e9ea:	89ab      	ldrh	r3, [r5, #12]
 801e9ec:	065b      	lsls	r3, r3, #25
 801e9ee:	f53f af2d 	bmi.w	801e84c <_svfiprintf_r+0x28>
 801e9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e9f4:	e72c      	b.n	801e850 <_svfiprintf_r+0x2c>
 801e9f6:	ab03      	add	r3, sp, #12
 801e9f8:	9300      	str	r3, [sp, #0]
 801e9fa:	462a      	mov	r2, r5
 801e9fc:	4b05      	ldr	r3, [pc, #20]	@ (801ea14 <_svfiprintf_r+0x1f0>)
 801e9fe:	a904      	add	r1, sp, #16
 801ea00:	4638      	mov	r0, r7
 801ea02:	f7fc fcfb 	bl	801b3fc <_printf_i>
 801ea06:	e7ed      	b.n	801e9e4 <_svfiprintf_r+0x1c0>
 801ea08:	0802207c 	.word	0x0802207c
 801ea0c:	08022086 	.word	0x08022086
 801ea10:	0801ac35 	.word	0x0801ac35
 801ea14:	0801e76d 	.word	0x0801e76d
 801ea18:	08022082 	.word	0x08022082

0801ea1c <_sungetc_r>:
 801ea1c:	b538      	push	{r3, r4, r5, lr}
 801ea1e:	1c4b      	adds	r3, r1, #1
 801ea20:	4614      	mov	r4, r2
 801ea22:	d103      	bne.n	801ea2c <_sungetc_r+0x10>
 801ea24:	f04f 35ff 	mov.w	r5, #4294967295
 801ea28:	4628      	mov	r0, r5
 801ea2a:	bd38      	pop	{r3, r4, r5, pc}
 801ea2c:	8993      	ldrh	r3, [r2, #12]
 801ea2e:	f023 0320 	bic.w	r3, r3, #32
 801ea32:	8193      	strh	r3, [r2, #12]
 801ea34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ea36:	6852      	ldr	r2, [r2, #4]
 801ea38:	b2cd      	uxtb	r5, r1
 801ea3a:	b18b      	cbz	r3, 801ea60 <_sungetc_r+0x44>
 801ea3c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ea3e:	4293      	cmp	r3, r2
 801ea40:	dd08      	ble.n	801ea54 <_sungetc_r+0x38>
 801ea42:	6823      	ldr	r3, [r4, #0]
 801ea44:	1e5a      	subs	r2, r3, #1
 801ea46:	6022      	str	r2, [r4, #0]
 801ea48:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ea4c:	6863      	ldr	r3, [r4, #4]
 801ea4e:	3301      	adds	r3, #1
 801ea50:	6063      	str	r3, [r4, #4]
 801ea52:	e7e9      	b.n	801ea28 <_sungetc_r+0xc>
 801ea54:	4621      	mov	r1, r4
 801ea56:	f000 fc8c 	bl	801f372 <__submore>
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	d0f1      	beq.n	801ea42 <_sungetc_r+0x26>
 801ea5e:	e7e1      	b.n	801ea24 <_sungetc_r+0x8>
 801ea60:	6921      	ldr	r1, [r4, #16]
 801ea62:	6823      	ldr	r3, [r4, #0]
 801ea64:	b151      	cbz	r1, 801ea7c <_sungetc_r+0x60>
 801ea66:	4299      	cmp	r1, r3
 801ea68:	d208      	bcs.n	801ea7c <_sungetc_r+0x60>
 801ea6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ea6e:	42a9      	cmp	r1, r5
 801ea70:	d104      	bne.n	801ea7c <_sungetc_r+0x60>
 801ea72:	3b01      	subs	r3, #1
 801ea74:	3201      	adds	r2, #1
 801ea76:	6023      	str	r3, [r4, #0]
 801ea78:	6062      	str	r2, [r4, #4]
 801ea7a:	e7d5      	b.n	801ea28 <_sungetc_r+0xc>
 801ea7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801ea80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ea84:	6363      	str	r3, [r4, #52]	@ 0x34
 801ea86:	2303      	movs	r3, #3
 801ea88:	63a3      	str	r3, [r4, #56]	@ 0x38
 801ea8a:	4623      	mov	r3, r4
 801ea8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ea90:	6023      	str	r3, [r4, #0]
 801ea92:	2301      	movs	r3, #1
 801ea94:	e7dc      	b.n	801ea50 <_sungetc_r+0x34>

0801ea96 <__ssrefill_r>:
 801ea96:	b510      	push	{r4, lr}
 801ea98:	460c      	mov	r4, r1
 801ea9a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801ea9c:	b169      	cbz	r1, 801eaba <__ssrefill_r+0x24>
 801ea9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eaa2:	4299      	cmp	r1, r3
 801eaa4:	d001      	beq.n	801eaaa <__ssrefill_r+0x14>
 801eaa6:	f7fe fa03 	bl	801ceb0 <_free_r>
 801eaaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801eaac:	6063      	str	r3, [r4, #4]
 801eaae:	2000      	movs	r0, #0
 801eab0:	6360      	str	r0, [r4, #52]	@ 0x34
 801eab2:	b113      	cbz	r3, 801eaba <__ssrefill_r+0x24>
 801eab4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801eab6:	6023      	str	r3, [r4, #0]
 801eab8:	bd10      	pop	{r4, pc}
 801eaba:	6923      	ldr	r3, [r4, #16]
 801eabc:	6023      	str	r3, [r4, #0]
 801eabe:	2300      	movs	r3, #0
 801eac0:	6063      	str	r3, [r4, #4]
 801eac2:	89a3      	ldrh	r3, [r4, #12]
 801eac4:	f043 0320 	orr.w	r3, r3, #32
 801eac8:	81a3      	strh	r3, [r4, #12]
 801eaca:	f04f 30ff 	mov.w	r0, #4294967295
 801eace:	e7f3      	b.n	801eab8 <__ssrefill_r+0x22>

0801ead0 <__ssvfiscanf_r>:
 801ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead4:	460c      	mov	r4, r1
 801ead6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801eada:	2100      	movs	r1, #0
 801eadc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801eae0:	49a6      	ldr	r1, [pc, #664]	@ (801ed7c <__ssvfiscanf_r+0x2ac>)
 801eae2:	91a0      	str	r1, [sp, #640]	@ 0x280
 801eae4:	f10d 0804 	add.w	r8, sp, #4
 801eae8:	49a5      	ldr	r1, [pc, #660]	@ (801ed80 <__ssvfiscanf_r+0x2b0>)
 801eaea:	4fa6      	ldr	r7, [pc, #664]	@ (801ed84 <__ssvfiscanf_r+0x2b4>)
 801eaec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801eaf0:	4606      	mov	r6, r0
 801eaf2:	91a1      	str	r1, [sp, #644]	@ 0x284
 801eaf4:	9300      	str	r3, [sp, #0]
 801eaf6:	f892 9000 	ldrb.w	r9, [r2]
 801eafa:	f1b9 0f00 	cmp.w	r9, #0
 801eafe:	f000 8158 	beq.w	801edb2 <__ssvfiscanf_r+0x2e2>
 801eb02:	f817 3009 	ldrb.w	r3, [r7, r9]
 801eb06:	f013 0308 	ands.w	r3, r3, #8
 801eb0a:	f102 0501 	add.w	r5, r2, #1
 801eb0e:	d019      	beq.n	801eb44 <__ssvfiscanf_r+0x74>
 801eb10:	6863      	ldr	r3, [r4, #4]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	dd0f      	ble.n	801eb36 <__ssvfiscanf_r+0x66>
 801eb16:	6823      	ldr	r3, [r4, #0]
 801eb18:	781a      	ldrb	r2, [r3, #0]
 801eb1a:	5cba      	ldrb	r2, [r7, r2]
 801eb1c:	0712      	lsls	r2, r2, #28
 801eb1e:	d401      	bmi.n	801eb24 <__ssvfiscanf_r+0x54>
 801eb20:	462a      	mov	r2, r5
 801eb22:	e7e8      	b.n	801eaf6 <__ssvfiscanf_r+0x26>
 801eb24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801eb26:	3201      	adds	r2, #1
 801eb28:	9245      	str	r2, [sp, #276]	@ 0x114
 801eb2a:	6862      	ldr	r2, [r4, #4]
 801eb2c:	3301      	adds	r3, #1
 801eb2e:	3a01      	subs	r2, #1
 801eb30:	6062      	str	r2, [r4, #4]
 801eb32:	6023      	str	r3, [r4, #0]
 801eb34:	e7ec      	b.n	801eb10 <__ssvfiscanf_r+0x40>
 801eb36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801eb38:	4621      	mov	r1, r4
 801eb3a:	4630      	mov	r0, r6
 801eb3c:	4798      	blx	r3
 801eb3e:	2800      	cmp	r0, #0
 801eb40:	d0e9      	beq.n	801eb16 <__ssvfiscanf_r+0x46>
 801eb42:	e7ed      	b.n	801eb20 <__ssvfiscanf_r+0x50>
 801eb44:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801eb48:	f040 8085 	bne.w	801ec56 <__ssvfiscanf_r+0x186>
 801eb4c:	9341      	str	r3, [sp, #260]	@ 0x104
 801eb4e:	9343      	str	r3, [sp, #268]	@ 0x10c
 801eb50:	7853      	ldrb	r3, [r2, #1]
 801eb52:	2b2a      	cmp	r3, #42	@ 0x2a
 801eb54:	bf02      	ittt	eq
 801eb56:	2310      	moveq	r3, #16
 801eb58:	1c95      	addeq	r5, r2, #2
 801eb5a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801eb5c:	220a      	movs	r2, #10
 801eb5e:	46aa      	mov	sl, r5
 801eb60:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801eb64:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801eb68:	2b09      	cmp	r3, #9
 801eb6a:	d91e      	bls.n	801ebaa <__ssvfiscanf_r+0xda>
 801eb6c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801ed88 <__ssvfiscanf_r+0x2b8>
 801eb70:	2203      	movs	r2, #3
 801eb72:	4658      	mov	r0, fp
 801eb74:	f7e1 fb3c 	bl	80001f0 <memchr>
 801eb78:	b138      	cbz	r0, 801eb8a <__ssvfiscanf_r+0xba>
 801eb7a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801eb7c:	eba0 000b 	sub.w	r0, r0, fp
 801eb80:	2301      	movs	r3, #1
 801eb82:	4083      	lsls	r3, r0
 801eb84:	4313      	orrs	r3, r2
 801eb86:	9341      	str	r3, [sp, #260]	@ 0x104
 801eb88:	4655      	mov	r5, sl
 801eb8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801eb8e:	2b78      	cmp	r3, #120	@ 0x78
 801eb90:	d806      	bhi.n	801eba0 <__ssvfiscanf_r+0xd0>
 801eb92:	2b57      	cmp	r3, #87	@ 0x57
 801eb94:	d810      	bhi.n	801ebb8 <__ssvfiscanf_r+0xe8>
 801eb96:	2b25      	cmp	r3, #37	@ 0x25
 801eb98:	d05d      	beq.n	801ec56 <__ssvfiscanf_r+0x186>
 801eb9a:	d857      	bhi.n	801ec4c <__ssvfiscanf_r+0x17c>
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d075      	beq.n	801ec8c <__ssvfiscanf_r+0x1bc>
 801eba0:	2303      	movs	r3, #3
 801eba2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801eba4:	230a      	movs	r3, #10
 801eba6:	9342      	str	r3, [sp, #264]	@ 0x108
 801eba8:	e088      	b.n	801ecbc <__ssvfiscanf_r+0x1ec>
 801ebaa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801ebac:	fb02 1103 	mla	r1, r2, r3, r1
 801ebb0:	3930      	subs	r1, #48	@ 0x30
 801ebb2:	9143      	str	r1, [sp, #268]	@ 0x10c
 801ebb4:	4655      	mov	r5, sl
 801ebb6:	e7d2      	b.n	801eb5e <__ssvfiscanf_r+0x8e>
 801ebb8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801ebbc:	2a20      	cmp	r2, #32
 801ebbe:	d8ef      	bhi.n	801eba0 <__ssvfiscanf_r+0xd0>
 801ebc0:	a101      	add	r1, pc, #4	@ (adr r1, 801ebc8 <__ssvfiscanf_r+0xf8>)
 801ebc2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ebc6:	bf00      	nop
 801ebc8:	0801ec9b 	.word	0x0801ec9b
 801ebcc:	0801eba1 	.word	0x0801eba1
 801ebd0:	0801eba1 	.word	0x0801eba1
 801ebd4:	0801ecf5 	.word	0x0801ecf5
 801ebd8:	0801eba1 	.word	0x0801eba1
 801ebdc:	0801eba1 	.word	0x0801eba1
 801ebe0:	0801eba1 	.word	0x0801eba1
 801ebe4:	0801eba1 	.word	0x0801eba1
 801ebe8:	0801eba1 	.word	0x0801eba1
 801ebec:	0801eba1 	.word	0x0801eba1
 801ebf0:	0801eba1 	.word	0x0801eba1
 801ebf4:	0801ed0b 	.word	0x0801ed0b
 801ebf8:	0801ecf1 	.word	0x0801ecf1
 801ebfc:	0801ec53 	.word	0x0801ec53
 801ec00:	0801ec53 	.word	0x0801ec53
 801ec04:	0801ec53 	.word	0x0801ec53
 801ec08:	0801eba1 	.word	0x0801eba1
 801ec0c:	0801ecad 	.word	0x0801ecad
 801ec10:	0801eba1 	.word	0x0801eba1
 801ec14:	0801eba1 	.word	0x0801eba1
 801ec18:	0801eba1 	.word	0x0801eba1
 801ec1c:	0801eba1 	.word	0x0801eba1
 801ec20:	0801ed1b 	.word	0x0801ed1b
 801ec24:	0801ecb5 	.word	0x0801ecb5
 801ec28:	0801ec93 	.word	0x0801ec93
 801ec2c:	0801eba1 	.word	0x0801eba1
 801ec30:	0801eba1 	.word	0x0801eba1
 801ec34:	0801ed17 	.word	0x0801ed17
 801ec38:	0801eba1 	.word	0x0801eba1
 801ec3c:	0801ecf1 	.word	0x0801ecf1
 801ec40:	0801eba1 	.word	0x0801eba1
 801ec44:	0801eba1 	.word	0x0801eba1
 801ec48:	0801ec9b 	.word	0x0801ec9b
 801ec4c:	3b45      	subs	r3, #69	@ 0x45
 801ec4e:	2b02      	cmp	r3, #2
 801ec50:	d8a6      	bhi.n	801eba0 <__ssvfiscanf_r+0xd0>
 801ec52:	2305      	movs	r3, #5
 801ec54:	e031      	b.n	801ecba <__ssvfiscanf_r+0x1ea>
 801ec56:	6863      	ldr	r3, [r4, #4]
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	dd0d      	ble.n	801ec78 <__ssvfiscanf_r+0x1a8>
 801ec5c:	6823      	ldr	r3, [r4, #0]
 801ec5e:	781a      	ldrb	r2, [r3, #0]
 801ec60:	454a      	cmp	r2, r9
 801ec62:	f040 80a6 	bne.w	801edb2 <__ssvfiscanf_r+0x2e2>
 801ec66:	3301      	adds	r3, #1
 801ec68:	6862      	ldr	r2, [r4, #4]
 801ec6a:	6023      	str	r3, [r4, #0]
 801ec6c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801ec6e:	3a01      	subs	r2, #1
 801ec70:	3301      	adds	r3, #1
 801ec72:	6062      	str	r2, [r4, #4]
 801ec74:	9345      	str	r3, [sp, #276]	@ 0x114
 801ec76:	e753      	b.n	801eb20 <__ssvfiscanf_r+0x50>
 801ec78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ec7a:	4621      	mov	r1, r4
 801ec7c:	4630      	mov	r0, r6
 801ec7e:	4798      	blx	r3
 801ec80:	2800      	cmp	r0, #0
 801ec82:	d0eb      	beq.n	801ec5c <__ssvfiscanf_r+0x18c>
 801ec84:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801ec86:	2800      	cmp	r0, #0
 801ec88:	f040 808b 	bne.w	801eda2 <__ssvfiscanf_r+0x2d2>
 801ec8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ec90:	e08b      	b.n	801edaa <__ssvfiscanf_r+0x2da>
 801ec92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ec94:	f042 0220 	orr.w	r2, r2, #32
 801ec98:	9241      	str	r2, [sp, #260]	@ 0x104
 801ec9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ec9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801eca0:	9241      	str	r2, [sp, #260]	@ 0x104
 801eca2:	2210      	movs	r2, #16
 801eca4:	2b6e      	cmp	r3, #110	@ 0x6e
 801eca6:	9242      	str	r2, [sp, #264]	@ 0x108
 801eca8:	d902      	bls.n	801ecb0 <__ssvfiscanf_r+0x1e0>
 801ecaa:	e005      	b.n	801ecb8 <__ssvfiscanf_r+0x1e8>
 801ecac:	2300      	movs	r3, #0
 801ecae:	9342      	str	r3, [sp, #264]	@ 0x108
 801ecb0:	2303      	movs	r3, #3
 801ecb2:	e002      	b.n	801ecba <__ssvfiscanf_r+0x1ea>
 801ecb4:	2308      	movs	r3, #8
 801ecb6:	9342      	str	r3, [sp, #264]	@ 0x108
 801ecb8:	2304      	movs	r3, #4
 801ecba:	9347      	str	r3, [sp, #284]	@ 0x11c
 801ecbc:	6863      	ldr	r3, [r4, #4]
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	dd39      	ble.n	801ed36 <__ssvfiscanf_r+0x266>
 801ecc2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ecc4:	0659      	lsls	r1, r3, #25
 801ecc6:	d404      	bmi.n	801ecd2 <__ssvfiscanf_r+0x202>
 801ecc8:	6823      	ldr	r3, [r4, #0]
 801ecca:	781a      	ldrb	r2, [r3, #0]
 801eccc:	5cba      	ldrb	r2, [r7, r2]
 801ecce:	0712      	lsls	r2, r2, #28
 801ecd0:	d438      	bmi.n	801ed44 <__ssvfiscanf_r+0x274>
 801ecd2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801ecd4:	2b02      	cmp	r3, #2
 801ecd6:	dc47      	bgt.n	801ed68 <__ssvfiscanf_r+0x298>
 801ecd8:	466b      	mov	r3, sp
 801ecda:	4622      	mov	r2, r4
 801ecdc:	a941      	add	r1, sp, #260	@ 0x104
 801ecde:	4630      	mov	r0, r6
 801ece0:	f000 f86c 	bl	801edbc <_scanf_chars>
 801ece4:	2801      	cmp	r0, #1
 801ece6:	d064      	beq.n	801edb2 <__ssvfiscanf_r+0x2e2>
 801ece8:	2802      	cmp	r0, #2
 801ecea:	f47f af19 	bne.w	801eb20 <__ssvfiscanf_r+0x50>
 801ecee:	e7c9      	b.n	801ec84 <__ssvfiscanf_r+0x1b4>
 801ecf0:	220a      	movs	r2, #10
 801ecf2:	e7d7      	b.n	801eca4 <__ssvfiscanf_r+0x1d4>
 801ecf4:	4629      	mov	r1, r5
 801ecf6:	4640      	mov	r0, r8
 801ecf8:	f000 fb02 	bl	801f300 <__sccl>
 801ecfc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ecfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed02:	9341      	str	r3, [sp, #260]	@ 0x104
 801ed04:	4605      	mov	r5, r0
 801ed06:	2301      	movs	r3, #1
 801ed08:	e7d7      	b.n	801ecba <__ssvfiscanf_r+0x1ea>
 801ed0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ed0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed10:	9341      	str	r3, [sp, #260]	@ 0x104
 801ed12:	2300      	movs	r3, #0
 801ed14:	e7d1      	b.n	801ecba <__ssvfiscanf_r+0x1ea>
 801ed16:	2302      	movs	r3, #2
 801ed18:	e7cf      	b.n	801ecba <__ssvfiscanf_r+0x1ea>
 801ed1a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801ed1c:	06c3      	lsls	r3, r0, #27
 801ed1e:	f53f aeff 	bmi.w	801eb20 <__ssvfiscanf_r+0x50>
 801ed22:	9b00      	ldr	r3, [sp, #0]
 801ed24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801ed26:	1d19      	adds	r1, r3, #4
 801ed28:	9100      	str	r1, [sp, #0]
 801ed2a:	681b      	ldr	r3, [r3, #0]
 801ed2c:	07c0      	lsls	r0, r0, #31
 801ed2e:	bf4c      	ite	mi
 801ed30:	801a      	strhmi	r2, [r3, #0]
 801ed32:	601a      	strpl	r2, [r3, #0]
 801ed34:	e6f4      	b.n	801eb20 <__ssvfiscanf_r+0x50>
 801ed36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ed38:	4621      	mov	r1, r4
 801ed3a:	4630      	mov	r0, r6
 801ed3c:	4798      	blx	r3
 801ed3e:	2800      	cmp	r0, #0
 801ed40:	d0bf      	beq.n	801ecc2 <__ssvfiscanf_r+0x1f2>
 801ed42:	e79f      	b.n	801ec84 <__ssvfiscanf_r+0x1b4>
 801ed44:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801ed46:	3201      	adds	r2, #1
 801ed48:	9245      	str	r2, [sp, #276]	@ 0x114
 801ed4a:	6862      	ldr	r2, [r4, #4]
 801ed4c:	3a01      	subs	r2, #1
 801ed4e:	2a00      	cmp	r2, #0
 801ed50:	6062      	str	r2, [r4, #4]
 801ed52:	dd02      	ble.n	801ed5a <__ssvfiscanf_r+0x28a>
 801ed54:	3301      	adds	r3, #1
 801ed56:	6023      	str	r3, [r4, #0]
 801ed58:	e7b6      	b.n	801ecc8 <__ssvfiscanf_r+0x1f8>
 801ed5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ed5c:	4621      	mov	r1, r4
 801ed5e:	4630      	mov	r0, r6
 801ed60:	4798      	blx	r3
 801ed62:	2800      	cmp	r0, #0
 801ed64:	d0b0      	beq.n	801ecc8 <__ssvfiscanf_r+0x1f8>
 801ed66:	e78d      	b.n	801ec84 <__ssvfiscanf_r+0x1b4>
 801ed68:	2b04      	cmp	r3, #4
 801ed6a:	dc0f      	bgt.n	801ed8c <__ssvfiscanf_r+0x2bc>
 801ed6c:	466b      	mov	r3, sp
 801ed6e:	4622      	mov	r2, r4
 801ed70:	a941      	add	r1, sp, #260	@ 0x104
 801ed72:	4630      	mov	r0, r6
 801ed74:	f000 f87c 	bl	801ee70 <_scanf_i>
 801ed78:	e7b4      	b.n	801ece4 <__ssvfiscanf_r+0x214>
 801ed7a:	bf00      	nop
 801ed7c:	0801ea1d 	.word	0x0801ea1d
 801ed80:	0801ea97 	.word	0x0801ea97
 801ed84:	080227c9 	.word	0x080227c9
 801ed88:	08022082 	.word	0x08022082
 801ed8c:	4b0a      	ldr	r3, [pc, #40]	@ (801edb8 <__ssvfiscanf_r+0x2e8>)
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	f43f aec6 	beq.w	801eb20 <__ssvfiscanf_r+0x50>
 801ed94:	466b      	mov	r3, sp
 801ed96:	4622      	mov	r2, r4
 801ed98:	a941      	add	r1, sp, #260	@ 0x104
 801ed9a:	4630      	mov	r0, r6
 801ed9c:	f7fc fc4c 	bl	801b638 <_scanf_float>
 801eda0:	e7a0      	b.n	801ece4 <__ssvfiscanf_r+0x214>
 801eda2:	89a3      	ldrh	r3, [r4, #12]
 801eda4:	065b      	lsls	r3, r3, #25
 801eda6:	f53f af71 	bmi.w	801ec8c <__ssvfiscanf_r+0x1bc>
 801edaa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801edae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edb2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801edb4:	e7f9      	b.n	801edaa <__ssvfiscanf_r+0x2da>
 801edb6:	bf00      	nop
 801edb8:	0801b639 	.word	0x0801b639

0801edbc <_scanf_chars>:
 801edbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edc0:	4615      	mov	r5, r2
 801edc2:	688a      	ldr	r2, [r1, #8]
 801edc4:	4680      	mov	r8, r0
 801edc6:	460c      	mov	r4, r1
 801edc8:	b932      	cbnz	r2, 801edd8 <_scanf_chars+0x1c>
 801edca:	698a      	ldr	r2, [r1, #24]
 801edcc:	2a00      	cmp	r2, #0
 801edce:	bf14      	ite	ne
 801edd0:	f04f 32ff 	movne.w	r2, #4294967295
 801edd4:	2201      	moveq	r2, #1
 801edd6:	608a      	str	r2, [r1, #8]
 801edd8:	6822      	ldr	r2, [r4, #0]
 801edda:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801ee6c <_scanf_chars+0xb0>
 801edde:	06d1      	lsls	r1, r2, #27
 801ede0:	bf5f      	itttt	pl
 801ede2:	681a      	ldrpl	r2, [r3, #0]
 801ede4:	1d11      	addpl	r1, r2, #4
 801ede6:	6019      	strpl	r1, [r3, #0]
 801ede8:	6816      	ldrpl	r6, [r2, #0]
 801edea:	2700      	movs	r7, #0
 801edec:	69a0      	ldr	r0, [r4, #24]
 801edee:	b188      	cbz	r0, 801ee14 <_scanf_chars+0x58>
 801edf0:	2801      	cmp	r0, #1
 801edf2:	d107      	bne.n	801ee04 <_scanf_chars+0x48>
 801edf4:	682b      	ldr	r3, [r5, #0]
 801edf6:	781a      	ldrb	r2, [r3, #0]
 801edf8:	6963      	ldr	r3, [r4, #20]
 801edfa:	5c9b      	ldrb	r3, [r3, r2]
 801edfc:	b953      	cbnz	r3, 801ee14 <_scanf_chars+0x58>
 801edfe:	2f00      	cmp	r7, #0
 801ee00:	d031      	beq.n	801ee66 <_scanf_chars+0xaa>
 801ee02:	e022      	b.n	801ee4a <_scanf_chars+0x8e>
 801ee04:	2802      	cmp	r0, #2
 801ee06:	d120      	bne.n	801ee4a <_scanf_chars+0x8e>
 801ee08:	682b      	ldr	r3, [r5, #0]
 801ee0a:	781b      	ldrb	r3, [r3, #0]
 801ee0c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ee10:	071b      	lsls	r3, r3, #28
 801ee12:	d41a      	bmi.n	801ee4a <_scanf_chars+0x8e>
 801ee14:	6823      	ldr	r3, [r4, #0]
 801ee16:	06da      	lsls	r2, r3, #27
 801ee18:	bf5e      	ittt	pl
 801ee1a:	682b      	ldrpl	r3, [r5, #0]
 801ee1c:	781b      	ldrbpl	r3, [r3, #0]
 801ee1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ee22:	682a      	ldr	r2, [r5, #0]
 801ee24:	686b      	ldr	r3, [r5, #4]
 801ee26:	3201      	adds	r2, #1
 801ee28:	602a      	str	r2, [r5, #0]
 801ee2a:	68a2      	ldr	r2, [r4, #8]
 801ee2c:	3b01      	subs	r3, #1
 801ee2e:	3a01      	subs	r2, #1
 801ee30:	606b      	str	r3, [r5, #4]
 801ee32:	3701      	adds	r7, #1
 801ee34:	60a2      	str	r2, [r4, #8]
 801ee36:	b142      	cbz	r2, 801ee4a <_scanf_chars+0x8e>
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	dcd7      	bgt.n	801edec <_scanf_chars+0x30>
 801ee3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ee40:	4629      	mov	r1, r5
 801ee42:	4640      	mov	r0, r8
 801ee44:	4798      	blx	r3
 801ee46:	2800      	cmp	r0, #0
 801ee48:	d0d0      	beq.n	801edec <_scanf_chars+0x30>
 801ee4a:	6823      	ldr	r3, [r4, #0]
 801ee4c:	f013 0310 	ands.w	r3, r3, #16
 801ee50:	d105      	bne.n	801ee5e <_scanf_chars+0xa2>
 801ee52:	68e2      	ldr	r2, [r4, #12]
 801ee54:	3201      	adds	r2, #1
 801ee56:	60e2      	str	r2, [r4, #12]
 801ee58:	69a2      	ldr	r2, [r4, #24]
 801ee5a:	b102      	cbz	r2, 801ee5e <_scanf_chars+0xa2>
 801ee5c:	7033      	strb	r3, [r6, #0]
 801ee5e:	6923      	ldr	r3, [r4, #16]
 801ee60:	443b      	add	r3, r7
 801ee62:	6123      	str	r3, [r4, #16]
 801ee64:	2000      	movs	r0, #0
 801ee66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee6a:	bf00      	nop
 801ee6c:	080227c9 	.word	0x080227c9

0801ee70 <_scanf_i>:
 801ee70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee74:	4698      	mov	r8, r3
 801ee76:	4b74      	ldr	r3, [pc, #464]	@ (801f048 <_scanf_i+0x1d8>)
 801ee78:	460c      	mov	r4, r1
 801ee7a:	4682      	mov	sl, r0
 801ee7c:	4616      	mov	r6, r2
 801ee7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ee82:	b087      	sub	sp, #28
 801ee84:	ab03      	add	r3, sp, #12
 801ee86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ee8a:	4b70      	ldr	r3, [pc, #448]	@ (801f04c <_scanf_i+0x1dc>)
 801ee8c:	69a1      	ldr	r1, [r4, #24]
 801ee8e:	4a70      	ldr	r2, [pc, #448]	@ (801f050 <_scanf_i+0x1e0>)
 801ee90:	2903      	cmp	r1, #3
 801ee92:	bf08      	it	eq
 801ee94:	461a      	moveq	r2, r3
 801ee96:	68a3      	ldr	r3, [r4, #8]
 801ee98:	9201      	str	r2, [sp, #4]
 801ee9a:	1e5a      	subs	r2, r3, #1
 801ee9c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801eea0:	bf88      	it	hi
 801eea2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801eea6:	4627      	mov	r7, r4
 801eea8:	bf82      	ittt	hi
 801eeaa:	eb03 0905 	addhi.w	r9, r3, r5
 801eeae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801eeb2:	60a3      	strhi	r3, [r4, #8]
 801eeb4:	f857 3b1c 	ldr.w	r3, [r7], #28
 801eeb8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801eebc:	bf98      	it	ls
 801eebe:	f04f 0900 	movls.w	r9, #0
 801eec2:	6023      	str	r3, [r4, #0]
 801eec4:	463d      	mov	r5, r7
 801eec6:	f04f 0b00 	mov.w	fp, #0
 801eeca:	6831      	ldr	r1, [r6, #0]
 801eecc:	ab03      	add	r3, sp, #12
 801eece:	7809      	ldrb	r1, [r1, #0]
 801eed0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801eed4:	2202      	movs	r2, #2
 801eed6:	f7e1 f98b 	bl	80001f0 <memchr>
 801eeda:	b328      	cbz	r0, 801ef28 <_scanf_i+0xb8>
 801eedc:	f1bb 0f01 	cmp.w	fp, #1
 801eee0:	d159      	bne.n	801ef96 <_scanf_i+0x126>
 801eee2:	6862      	ldr	r2, [r4, #4]
 801eee4:	b92a      	cbnz	r2, 801eef2 <_scanf_i+0x82>
 801eee6:	6822      	ldr	r2, [r4, #0]
 801eee8:	2108      	movs	r1, #8
 801eeea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801eeee:	6061      	str	r1, [r4, #4]
 801eef0:	6022      	str	r2, [r4, #0]
 801eef2:	6822      	ldr	r2, [r4, #0]
 801eef4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801eef8:	6022      	str	r2, [r4, #0]
 801eefa:	68a2      	ldr	r2, [r4, #8]
 801eefc:	1e51      	subs	r1, r2, #1
 801eefe:	60a1      	str	r1, [r4, #8]
 801ef00:	b192      	cbz	r2, 801ef28 <_scanf_i+0xb8>
 801ef02:	6832      	ldr	r2, [r6, #0]
 801ef04:	1c51      	adds	r1, r2, #1
 801ef06:	6031      	str	r1, [r6, #0]
 801ef08:	7812      	ldrb	r2, [r2, #0]
 801ef0a:	f805 2b01 	strb.w	r2, [r5], #1
 801ef0e:	6872      	ldr	r2, [r6, #4]
 801ef10:	3a01      	subs	r2, #1
 801ef12:	2a00      	cmp	r2, #0
 801ef14:	6072      	str	r2, [r6, #4]
 801ef16:	dc07      	bgt.n	801ef28 <_scanf_i+0xb8>
 801ef18:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801ef1c:	4631      	mov	r1, r6
 801ef1e:	4650      	mov	r0, sl
 801ef20:	4790      	blx	r2
 801ef22:	2800      	cmp	r0, #0
 801ef24:	f040 8085 	bne.w	801f032 <_scanf_i+0x1c2>
 801ef28:	f10b 0b01 	add.w	fp, fp, #1
 801ef2c:	f1bb 0f03 	cmp.w	fp, #3
 801ef30:	d1cb      	bne.n	801eeca <_scanf_i+0x5a>
 801ef32:	6863      	ldr	r3, [r4, #4]
 801ef34:	b90b      	cbnz	r3, 801ef3a <_scanf_i+0xca>
 801ef36:	230a      	movs	r3, #10
 801ef38:	6063      	str	r3, [r4, #4]
 801ef3a:	6863      	ldr	r3, [r4, #4]
 801ef3c:	4945      	ldr	r1, [pc, #276]	@ (801f054 <_scanf_i+0x1e4>)
 801ef3e:	6960      	ldr	r0, [r4, #20]
 801ef40:	1ac9      	subs	r1, r1, r3
 801ef42:	f000 f9dd 	bl	801f300 <__sccl>
 801ef46:	f04f 0b00 	mov.w	fp, #0
 801ef4a:	68a3      	ldr	r3, [r4, #8]
 801ef4c:	6822      	ldr	r2, [r4, #0]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d03d      	beq.n	801efce <_scanf_i+0x15e>
 801ef52:	6831      	ldr	r1, [r6, #0]
 801ef54:	6960      	ldr	r0, [r4, #20]
 801ef56:	f891 c000 	ldrb.w	ip, [r1]
 801ef5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ef5e:	2800      	cmp	r0, #0
 801ef60:	d035      	beq.n	801efce <_scanf_i+0x15e>
 801ef62:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801ef66:	d124      	bne.n	801efb2 <_scanf_i+0x142>
 801ef68:	0510      	lsls	r0, r2, #20
 801ef6a:	d522      	bpl.n	801efb2 <_scanf_i+0x142>
 801ef6c:	f10b 0b01 	add.w	fp, fp, #1
 801ef70:	f1b9 0f00 	cmp.w	r9, #0
 801ef74:	d003      	beq.n	801ef7e <_scanf_i+0x10e>
 801ef76:	3301      	adds	r3, #1
 801ef78:	f109 39ff 	add.w	r9, r9, #4294967295
 801ef7c:	60a3      	str	r3, [r4, #8]
 801ef7e:	6873      	ldr	r3, [r6, #4]
 801ef80:	3b01      	subs	r3, #1
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	6073      	str	r3, [r6, #4]
 801ef86:	dd1b      	ble.n	801efc0 <_scanf_i+0x150>
 801ef88:	6833      	ldr	r3, [r6, #0]
 801ef8a:	3301      	adds	r3, #1
 801ef8c:	6033      	str	r3, [r6, #0]
 801ef8e:	68a3      	ldr	r3, [r4, #8]
 801ef90:	3b01      	subs	r3, #1
 801ef92:	60a3      	str	r3, [r4, #8]
 801ef94:	e7d9      	b.n	801ef4a <_scanf_i+0xda>
 801ef96:	f1bb 0f02 	cmp.w	fp, #2
 801ef9a:	d1ae      	bne.n	801eefa <_scanf_i+0x8a>
 801ef9c:	6822      	ldr	r2, [r4, #0]
 801ef9e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801efa2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801efa6:	d1c4      	bne.n	801ef32 <_scanf_i+0xc2>
 801efa8:	2110      	movs	r1, #16
 801efaa:	6061      	str	r1, [r4, #4]
 801efac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801efb0:	e7a2      	b.n	801eef8 <_scanf_i+0x88>
 801efb2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801efb6:	6022      	str	r2, [r4, #0]
 801efb8:	780b      	ldrb	r3, [r1, #0]
 801efba:	f805 3b01 	strb.w	r3, [r5], #1
 801efbe:	e7de      	b.n	801ef7e <_scanf_i+0x10e>
 801efc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801efc4:	4631      	mov	r1, r6
 801efc6:	4650      	mov	r0, sl
 801efc8:	4798      	blx	r3
 801efca:	2800      	cmp	r0, #0
 801efcc:	d0df      	beq.n	801ef8e <_scanf_i+0x11e>
 801efce:	6823      	ldr	r3, [r4, #0]
 801efd0:	05d9      	lsls	r1, r3, #23
 801efd2:	d50d      	bpl.n	801eff0 <_scanf_i+0x180>
 801efd4:	42bd      	cmp	r5, r7
 801efd6:	d909      	bls.n	801efec <_scanf_i+0x17c>
 801efd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801efdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801efe0:	4632      	mov	r2, r6
 801efe2:	4650      	mov	r0, sl
 801efe4:	4798      	blx	r3
 801efe6:	f105 39ff 	add.w	r9, r5, #4294967295
 801efea:	464d      	mov	r5, r9
 801efec:	42bd      	cmp	r5, r7
 801efee:	d028      	beq.n	801f042 <_scanf_i+0x1d2>
 801eff0:	6822      	ldr	r2, [r4, #0]
 801eff2:	f012 0210 	ands.w	r2, r2, #16
 801eff6:	d113      	bne.n	801f020 <_scanf_i+0x1b0>
 801eff8:	702a      	strb	r2, [r5, #0]
 801effa:	6863      	ldr	r3, [r4, #4]
 801effc:	9e01      	ldr	r6, [sp, #4]
 801effe:	4639      	mov	r1, r7
 801f000:	4650      	mov	r0, sl
 801f002:	47b0      	blx	r6
 801f004:	f8d8 3000 	ldr.w	r3, [r8]
 801f008:	6821      	ldr	r1, [r4, #0]
 801f00a:	1d1a      	adds	r2, r3, #4
 801f00c:	f8c8 2000 	str.w	r2, [r8]
 801f010:	f011 0f20 	tst.w	r1, #32
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	d00f      	beq.n	801f038 <_scanf_i+0x1c8>
 801f018:	6018      	str	r0, [r3, #0]
 801f01a:	68e3      	ldr	r3, [r4, #12]
 801f01c:	3301      	adds	r3, #1
 801f01e:	60e3      	str	r3, [r4, #12]
 801f020:	6923      	ldr	r3, [r4, #16]
 801f022:	1bed      	subs	r5, r5, r7
 801f024:	445d      	add	r5, fp
 801f026:	442b      	add	r3, r5
 801f028:	6123      	str	r3, [r4, #16]
 801f02a:	2000      	movs	r0, #0
 801f02c:	b007      	add	sp, #28
 801f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f032:	f04f 0b00 	mov.w	fp, #0
 801f036:	e7ca      	b.n	801efce <_scanf_i+0x15e>
 801f038:	07ca      	lsls	r2, r1, #31
 801f03a:	bf4c      	ite	mi
 801f03c:	8018      	strhmi	r0, [r3, #0]
 801f03e:	6018      	strpl	r0, [r3, #0]
 801f040:	e7eb      	b.n	801f01a <_scanf_i+0x1aa>
 801f042:	2001      	movs	r0, #1
 801f044:	e7f2      	b.n	801f02c <_scanf_i+0x1bc>
 801f046:	bf00      	nop
 801f048:	08021f88 	.word	0x08021f88
 801f04c:	0801e769 	.word	0x0801e769
 801f050:	0801fc19 	.word	0x0801fc19
 801f054:	080221e8 	.word	0x080221e8

0801f058 <__sflush_r>:
 801f058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f060:	0716      	lsls	r6, r2, #28
 801f062:	4605      	mov	r5, r0
 801f064:	460c      	mov	r4, r1
 801f066:	d454      	bmi.n	801f112 <__sflush_r+0xba>
 801f068:	684b      	ldr	r3, [r1, #4]
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	dc02      	bgt.n	801f074 <__sflush_r+0x1c>
 801f06e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f070:	2b00      	cmp	r3, #0
 801f072:	dd48      	ble.n	801f106 <__sflush_r+0xae>
 801f074:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f076:	2e00      	cmp	r6, #0
 801f078:	d045      	beq.n	801f106 <__sflush_r+0xae>
 801f07a:	2300      	movs	r3, #0
 801f07c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f080:	682f      	ldr	r7, [r5, #0]
 801f082:	6a21      	ldr	r1, [r4, #32]
 801f084:	602b      	str	r3, [r5, #0]
 801f086:	d030      	beq.n	801f0ea <__sflush_r+0x92>
 801f088:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f08a:	89a3      	ldrh	r3, [r4, #12]
 801f08c:	0759      	lsls	r1, r3, #29
 801f08e:	d505      	bpl.n	801f09c <__sflush_r+0x44>
 801f090:	6863      	ldr	r3, [r4, #4]
 801f092:	1ad2      	subs	r2, r2, r3
 801f094:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f096:	b10b      	cbz	r3, 801f09c <__sflush_r+0x44>
 801f098:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f09a:	1ad2      	subs	r2, r2, r3
 801f09c:	2300      	movs	r3, #0
 801f09e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f0a0:	6a21      	ldr	r1, [r4, #32]
 801f0a2:	4628      	mov	r0, r5
 801f0a4:	47b0      	blx	r6
 801f0a6:	1c43      	adds	r3, r0, #1
 801f0a8:	89a3      	ldrh	r3, [r4, #12]
 801f0aa:	d106      	bne.n	801f0ba <__sflush_r+0x62>
 801f0ac:	6829      	ldr	r1, [r5, #0]
 801f0ae:	291d      	cmp	r1, #29
 801f0b0:	d82b      	bhi.n	801f10a <__sflush_r+0xb2>
 801f0b2:	4a2a      	ldr	r2, [pc, #168]	@ (801f15c <__sflush_r+0x104>)
 801f0b4:	40ca      	lsrs	r2, r1
 801f0b6:	07d6      	lsls	r6, r2, #31
 801f0b8:	d527      	bpl.n	801f10a <__sflush_r+0xb2>
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	6062      	str	r2, [r4, #4]
 801f0be:	04d9      	lsls	r1, r3, #19
 801f0c0:	6922      	ldr	r2, [r4, #16]
 801f0c2:	6022      	str	r2, [r4, #0]
 801f0c4:	d504      	bpl.n	801f0d0 <__sflush_r+0x78>
 801f0c6:	1c42      	adds	r2, r0, #1
 801f0c8:	d101      	bne.n	801f0ce <__sflush_r+0x76>
 801f0ca:	682b      	ldr	r3, [r5, #0]
 801f0cc:	b903      	cbnz	r3, 801f0d0 <__sflush_r+0x78>
 801f0ce:	6560      	str	r0, [r4, #84]	@ 0x54
 801f0d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f0d2:	602f      	str	r7, [r5, #0]
 801f0d4:	b1b9      	cbz	r1, 801f106 <__sflush_r+0xae>
 801f0d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f0da:	4299      	cmp	r1, r3
 801f0dc:	d002      	beq.n	801f0e4 <__sflush_r+0x8c>
 801f0de:	4628      	mov	r0, r5
 801f0e0:	f7fd fee6 	bl	801ceb0 <_free_r>
 801f0e4:	2300      	movs	r3, #0
 801f0e6:	6363      	str	r3, [r4, #52]	@ 0x34
 801f0e8:	e00d      	b.n	801f106 <__sflush_r+0xae>
 801f0ea:	2301      	movs	r3, #1
 801f0ec:	4628      	mov	r0, r5
 801f0ee:	47b0      	blx	r6
 801f0f0:	4602      	mov	r2, r0
 801f0f2:	1c50      	adds	r0, r2, #1
 801f0f4:	d1c9      	bne.n	801f08a <__sflush_r+0x32>
 801f0f6:	682b      	ldr	r3, [r5, #0]
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d0c6      	beq.n	801f08a <__sflush_r+0x32>
 801f0fc:	2b1d      	cmp	r3, #29
 801f0fe:	d001      	beq.n	801f104 <__sflush_r+0xac>
 801f100:	2b16      	cmp	r3, #22
 801f102:	d11e      	bne.n	801f142 <__sflush_r+0xea>
 801f104:	602f      	str	r7, [r5, #0]
 801f106:	2000      	movs	r0, #0
 801f108:	e022      	b.n	801f150 <__sflush_r+0xf8>
 801f10a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f10e:	b21b      	sxth	r3, r3
 801f110:	e01b      	b.n	801f14a <__sflush_r+0xf2>
 801f112:	690f      	ldr	r7, [r1, #16]
 801f114:	2f00      	cmp	r7, #0
 801f116:	d0f6      	beq.n	801f106 <__sflush_r+0xae>
 801f118:	0793      	lsls	r3, r2, #30
 801f11a:	680e      	ldr	r6, [r1, #0]
 801f11c:	bf08      	it	eq
 801f11e:	694b      	ldreq	r3, [r1, #20]
 801f120:	600f      	str	r7, [r1, #0]
 801f122:	bf18      	it	ne
 801f124:	2300      	movne	r3, #0
 801f126:	eba6 0807 	sub.w	r8, r6, r7
 801f12a:	608b      	str	r3, [r1, #8]
 801f12c:	f1b8 0f00 	cmp.w	r8, #0
 801f130:	dde9      	ble.n	801f106 <__sflush_r+0xae>
 801f132:	6a21      	ldr	r1, [r4, #32]
 801f134:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f136:	4643      	mov	r3, r8
 801f138:	463a      	mov	r2, r7
 801f13a:	4628      	mov	r0, r5
 801f13c:	47b0      	blx	r6
 801f13e:	2800      	cmp	r0, #0
 801f140:	dc08      	bgt.n	801f154 <__sflush_r+0xfc>
 801f142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f14a:	81a3      	strh	r3, [r4, #12]
 801f14c:	f04f 30ff 	mov.w	r0, #4294967295
 801f150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f154:	4407      	add	r7, r0
 801f156:	eba8 0800 	sub.w	r8, r8, r0
 801f15a:	e7e7      	b.n	801f12c <__sflush_r+0xd4>
 801f15c:	20400001 	.word	0x20400001

0801f160 <_fflush_r>:
 801f160:	b538      	push	{r3, r4, r5, lr}
 801f162:	690b      	ldr	r3, [r1, #16]
 801f164:	4605      	mov	r5, r0
 801f166:	460c      	mov	r4, r1
 801f168:	b913      	cbnz	r3, 801f170 <_fflush_r+0x10>
 801f16a:	2500      	movs	r5, #0
 801f16c:	4628      	mov	r0, r5
 801f16e:	bd38      	pop	{r3, r4, r5, pc}
 801f170:	b118      	cbz	r0, 801f17a <_fflush_r+0x1a>
 801f172:	6a03      	ldr	r3, [r0, #32]
 801f174:	b90b      	cbnz	r3, 801f17a <_fflush_r+0x1a>
 801f176:	f7fc fcf9 	bl	801bb6c <__sinit>
 801f17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d0f3      	beq.n	801f16a <_fflush_r+0xa>
 801f182:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f184:	07d0      	lsls	r0, r2, #31
 801f186:	d404      	bmi.n	801f192 <_fflush_r+0x32>
 801f188:	0599      	lsls	r1, r3, #22
 801f18a:	d402      	bmi.n	801f192 <_fflush_r+0x32>
 801f18c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f18e:	f7fd f806 	bl	801c19e <__retarget_lock_acquire_recursive>
 801f192:	4628      	mov	r0, r5
 801f194:	4621      	mov	r1, r4
 801f196:	f7ff ff5f 	bl	801f058 <__sflush_r>
 801f19a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f19c:	07da      	lsls	r2, r3, #31
 801f19e:	4605      	mov	r5, r0
 801f1a0:	d4e4      	bmi.n	801f16c <_fflush_r+0xc>
 801f1a2:	89a3      	ldrh	r3, [r4, #12]
 801f1a4:	059b      	lsls	r3, r3, #22
 801f1a6:	d4e1      	bmi.n	801f16c <_fflush_r+0xc>
 801f1a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f1aa:	f7fc fff9 	bl	801c1a0 <__retarget_lock_release_recursive>
 801f1ae:	e7dd      	b.n	801f16c <_fflush_r+0xc>

0801f1b0 <fiprintf>:
 801f1b0:	b40e      	push	{r1, r2, r3}
 801f1b2:	b503      	push	{r0, r1, lr}
 801f1b4:	4601      	mov	r1, r0
 801f1b6:	ab03      	add	r3, sp, #12
 801f1b8:	4805      	ldr	r0, [pc, #20]	@ (801f1d0 <fiprintf+0x20>)
 801f1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801f1be:	6800      	ldr	r0, [r0, #0]
 801f1c0:	9301      	str	r3, [sp, #4]
 801f1c2:	f7fb ff8b 	bl	801b0dc <_vfiprintf_r>
 801f1c6:	b002      	add	sp, #8
 801f1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801f1cc:	b003      	add	sp, #12
 801f1ce:	4770      	bx	lr
 801f1d0:	20000160 	.word	0x20000160

0801f1d4 <__swhatbuf_r>:
 801f1d4:	b570      	push	{r4, r5, r6, lr}
 801f1d6:	460c      	mov	r4, r1
 801f1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1dc:	2900      	cmp	r1, #0
 801f1de:	b096      	sub	sp, #88	@ 0x58
 801f1e0:	4615      	mov	r5, r2
 801f1e2:	461e      	mov	r6, r3
 801f1e4:	da0d      	bge.n	801f202 <__swhatbuf_r+0x2e>
 801f1e6:	89a3      	ldrh	r3, [r4, #12]
 801f1e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f1ec:	f04f 0100 	mov.w	r1, #0
 801f1f0:	bf14      	ite	ne
 801f1f2:	2340      	movne	r3, #64	@ 0x40
 801f1f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f1f8:	2000      	movs	r0, #0
 801f1fa:	6031      	str	r1, [r6, #0]
 801f1fc:	602b      	str	r3, [r5, #0]
 801f1fe:	b016      	add	sp, #88	@ 0x58
 801f200:	bd70      	pop	{r4, r5, r6, pc}
 801f202:	466a      	mov	r2, sp
 801f204:	f000 f8f0 	bl	801f3e8 <_fstat_r>
 801f208:	2800      	cmp	r0, #0
 801f20a:	dbec      	blt.n	801f1e6 <__swhatbuf_r+0x12>
 801f20c:	9901      	ldr	r1, [sp, #4]
 801f20e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f216:	4259      	negs	r1, r3
 801f218:	4159      	adcs	r1, r3
 801f21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f21e:	e7eb      	b.n	801f1f8 <__swhatbuf_r+0x24>

0801f220 <__smakebuf_r>:
 801f220:	898b      	ldrh	r3, [r1, #12]
 801f222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f224:	079d      	lsls	r5, r3, #30
 801f226:	4606      	mov	r6, r0
 801f228:	460c      	mov	r4, r1
 801f22a:	d507      	bpl.n	801f23c <__smakebuf_r+0x1c>
 801f22c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f230:	6023      	str	r3, [r4, #0]
 801f232:	6123      	str	r3, [r4, #16]
 801f234:	2301      	movs	r3, #1
 801f236:	6163      	str	r3, [r4, #20]
 801f238:	b003      	add	sp, #12
 801f23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f23c:	ab01      	add	r3, sp, #4
 801f23e:	466a      	mov	r2, sp
 801f240:	f7ff ffc8 	bl	801f1d4 <__swhatbuf_r>
 801f244:	9f00      	ldr	r7, [sp, #0]
 801f246:	4605      	mov	r5, r0
 801f248:	4639      	mov	r1, r7
 801f24a:	4630      	mov	r0, r6
 801f24c:	f7fd fea4 	bl	801cf98 <_malloc_r>
 801f250:	b948      	cbnz	r0, 801f266 <__smakebuf_r+0x46>
 801f252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f256:	059a      	lsls	r2, r3, #22
 801f258:	d4ee      	bmi.n	801f238 <__smakebuf_r+0x18>
 801f25a:	f023 0303 	bic.w	r3, r3, #3
 801f25e:	f043 0302 	orr.w	r3, r3, #2
 801f262:	81a3      	strh	r3, [r4, #12]
 801f264:	e7e2      	b.n	801f22c <__smakebuf_r+0xc>
 801f266:	89a3      	ldrh	r3, [r4, #12]
 801f268:	6020      	str	r0, [r4, #0]
 801f26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f26e:	81a3      	strh	r3, [r4, #12]
 801f270:	9b01      	ldr	r3, [sp, #4]
 801f272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f276:	b15b      	cbz	r3, 801f290 <__smakebuf_r+0x70>
 801f278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f27c:	4630      	mov	r0, r6
 801f27e:	f000 f8c5 	bl	801f40c <_isatty_r>
 801f282:	b128      	cbz	r0, 801f290 <__smakebuf_r+0x70>
 801f284:	89a3      	ldrh	r3, [r4, #12]
 801f286:	f023 0303 	bic.w	r3, r3, #3
 801f28a:	f043 0301 	orr.w	r3, r3, #1
 801f28e:	81a3      	strh	r3, [r4, #12]
 801f290:	89a3      	ldrh	r3, [r4, #12]
 801f292:	431d      	orrs	r5, r3
 801f294:	81a5      	strh	r5, [r4, #12]
 801f296:	e7cf      	b.n	801f238 <__smakebuf_r+0x18>

0801f298 <_putc_r>:
 801f298:	b570      	push	{r4, r5, r6, lr}
 801f29a:	460d      	mov	r5, r1
 801f29c:	4614      	mov	r4, r2
 801f29e:	4606      	mov	r6, r0
 801f2a0:	b118      	cbz	r0, 801f2aa <_putc_r+0x12>
 801f2a2:	6a03      	ldr	r3, [r0, #32]
 801f2a4:	b90b      	cbnz	r3, 801f2aa <_putc_r+0x12>
 801f2a6:	f7fc fc61 	bl	801bb6c <__sinit>
 801f2aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f2ac:	07d8      	lsls	r0, r3, #31
 801f2ae:	d405      	bmi.n	801f2bc <_putc_r+0x24>
 801f2b0:	89a3      	ldrh	r3, [r4, #12]
 801f2b2:	0599      	lsls	r1, r3, #22
 801f2b4:	d402      	bmi.n	801f2bc <_putc_r+0x24>
 801f2b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f2b8:	f7fc ff71 	bl	801c19e <__retarget_lock_acquire_recursive>
 801f2bc:	68a3      	ldr	r3, [r4, #8]
 801f2be:	3b01      	subs	r3, #1
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	60a3      	str	r3, [r4, #8]
 801f2c4:	da05      	bge.n	801f2d2 <_putc_r+0x3a>
 801f2c6:	69a2      	ldr	r2, [r4, #24]
 801f2c8:	4293      	cmp	r3, r2
 801f2ca:	db12      	blt.n	801f2f2 <_putc_r+0x5a>
 801f2cc:	b2eb      	uxtb	r3, r5
 801f2ce:	2b0a      	cmp	r3, #10
 801f2d0:	d00f      	beq.n	801f2f2 <_putc_r+0x5a>
 801f2d2:	6823      	ldr	r3, [r4, #0]
 801f2d4:	1c5a      	adds	r2, r3, #1
 801f2d6:	6022      	str	r2, [r4, #0]
 801f2d8:	701d      	strb	r5, [r3, #0]
 801f2da:	b2ed      	uxtb	r5, r5
 801f2dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f2de:	07da      	lsls	r2, r3, #31
 801f2e0:	d405      	bmi.n	801f2ee <_putc_r+0x56>
 801f2e2:	89a3      	ldrh	r3, [r4, #12]
 801f2e4:	059b      	lsls	r3, r3, #22
 801f2e6:	d402      	bmi.n	801f2ee <_putc_r+0x56>
 801f2e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f2ea:	f7fc ff59 	bl	801c1a0 <__retarget_lock_release_recursive>
 801f2ee:	4628      	mov	r0, r5
 801f2f0:	bd70      	pop	{r4, r5, r6, pc}
 801f2f2:	4629      	mov	r1, r5
 801f2f4:	4622      	mov	r2, r4
 801f2f6:	4630      	mov	r0, r6
 801f2f8:	f7fc fdb6 	bl	801be68 <__swbuf_r>
 801f2fc:	4605      	mov	r5, r0
 801f2fe:	e7ed      	b.n	801f2dc <_putc_r+0x44>

0801f300 <__sccl>:
 801f300:	b570      	push	{r4, r5, r6, lr}
 801f302:	780b      	ldrb	r3, [r1, #0]
 801f304:	4604      	mov	r4, r0
 801f306:	2b5e      	cmp	r3, #94	@ 0x5e
 801f308:	bf0b      	itete	eq
 801f30a:	784b      	ldrbeq	r3, [r1, #1]
 801f30c:	1c4a      	addne	r2, r1, #1
 801f30e:	1c8a      	addeq	r2, r1, #2
 801f310:	2100      	movne	r1, #0
 801f312:	bf08      	it	eq
 801f314:	2101      	moveq	r1, #1
 801f316:	3801      	subs	r0, #1
 801f318:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801f31c:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f320:	42a8      	cmp	r0, r5
 801f322:	d1fb      	bne.n	801f31c <__sccl+0x1c>
 801f324:	b90b      	cbnz	r3, 801f32a <__sccl+0x2a>
 801f326:	1e50      	subs	r0, r2, #1
 801f328:	bd70      	pop	{r4, r5, r6, pc}
 801f32a:	f081 0101 	eor.w	r1, r1, #1
 801f32e:	54e1      	strb	r1, [r4, r3]
 801f330:	4610      	mov	r0, r2
 801f332:	4602      	mov	r2, r0
 801f334:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f338:	2d2d      	cmp	r5, #45	@ 0x2d
 801f33a:	d005      	beq.n	801f348 <__sccl+0x48>
 801f33c:	2d5d      	cmp	r5, #93	@ 0x5d
 801f33e:	d016      	beq.n	801f36e <__sccl+0x6e>
 801f340:	2d00      	cmp	r5, #0
 801f342:	d0f1      	beq.n	801f328 <__sccl+0x28>
 801f344:	462b      	mov	r3, r5
 801f346:	e7f2      	b.n	801f32e <__sccl+0x2e>
 801f348:	7846      	ldrb	r6, [r0, #1]
 801f34a:	2e5d      	cmp	r6, #93	@ 0x5d
 801f34c:	d0fa      	beq.n	801f344 <__sccl+0x44>
 801f34e:	42b3      	cmp	r3, r6
 801f350:	dcf8      	bgt.n	801f344 <__sccl+0x44>
 801f352:	3002      	adds	r0, #2
 801f354:	461a      	mov	r2, r3
 801f356:	3201      	adds	r2, #1
 801f358:	4296      	cmp	r6, r2
 801f35a:	54a1      	strb	r1, [r4, r2]
 801f35c:	dcfb      	bgt.n	801f356 <__sccl+0x56>
 801f35e:	1af2      	subs	r2, r6, r3
 801f360:	3a01      	subs	r2, #1
 801f362:	1c5d      	adds	r5, r3, #1
 801f364:	42b3      	cmp	r3, r6
 801f366:	bfa8      	it	ge
 801f368:	2200      	movge	r2, #0
 801f36a:	18ab      	adds	r3, r5, r2
 801f36c:	e7e1      	b.n	801f332 <__sccl+0x32>
 801f36e:	4610      	mov	r0, r2
 801f370:	e7da      	b.n	801f328 <__sccl+0x28>

0801f372 <__submore>:
 801f372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f376:	460c      	mov	r4, r1
 801f378:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801f37a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f37e:	4299      	cmp	r1, r3
 801f380:	d11d      	bne.n	801f3be <__submore+0x4c>
 801f382:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801f386:	f7fd fe07 	bl	801cf98 <_malloc_r>
 801f38a:	b918      	cbnz	r0, 801f394 <__submore+0x22>
 801f38c:	f04f 30ff 	mov.w	r0, #4294967295
 801f390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f398:	63a3      	str	r3, [r4, #56]	@ 0x38
 801f39a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801f39e:	6360      	str	r0, [r4, #52]	@ 0x34
 801f3a0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801f3a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801f3a8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801f3ac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801f3b0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801f3b4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801f3b8:	6020      	str	r0, [r4, #0]
 801f3ba:	2000      	movs	r0, #0
 801f3bc:	e7e8      	b.n	801f390 <__submore+0x1e>
 801f3be:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801f3c0:	0077      	lsls	r7, r6, #1
 801f3c2:	463a      	mov	r2, r7
 801f3c4:	f7fe fb1e 	bl	801da04 <_realloc_r>
 801f3c8:	4605      	mov	r5, r0
 801f3ca:	2800      	cmp	r0, #0
 801f3cc:	d0de      	beq.n	801f38c <__submore+0x1a>
 801f3ce:	eb00 0806 	add.w	r8, r0, r6
 801f3d2:	4601      	mov	r1, r0
 801f3d4:	4632      	mov	r2, r6
 801f3d6:	4640      	mov	r0, r8
 801f3d8:	f7fc fee3 	bl	801c1a2 <memcpy>
 801f3dc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801f3e0:	f8c4 8000 	str.w	r8, [r4]
 801f3e4:	e7e9      	b.n	801f3ba <__submore+0x48>
	...

0801f3e8 <_fstat_r>:
 801f3e8:	b538      	push	{r3, r4, r5, lr}
 801f3ea:	4d07      	ldr	r5, [pc, #28]	@ (801f408 <_fstat_r+0x20>)
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	4608      	mov	r0, r1
 801f3f2:	4611      	mov	r1, r2
 801f3f4:	602b      	str	r3, [r5, #0]
 801f3f6:	f7eb fcbb 	bl	800ad70 <_fstat>
 801f3fa:	1c43      	adds	r3, r0, #1
 801f3fc:	d102      	bne.n	801f404 <_fstat_r+0x1c>
 801f3fe:	682b      	ldr	r3, [r5, #0]
 801f400:	b103      	cbz	r3, 801f404 <_fstat_r+0x1c>
 801f402:	6023      	str	r3, [r4, #0]
 801f404:	bd38      	pop	{r3, r4, r5, pc}
 801f406:	bf00      	nop
 801f408:	2000c41c 	.word	0x2000c41c

0801f40c <_isatty_r>:
 801f40c:	b538      	push	{r3, r4, r5, lr}
 801f40e:	4d06      	ldr	r5, [pc, #24]	@ (801f428 <_isatty_r+0x1c>)
 801f410:	2300      	movs	r3, #0
 801f412:	4604      	mov	r4, r0
 801f414:	4608      	mov	r0, r1
 801f416:	602b      	str	r3, [r5, #0]
 801f418:	f7eb fcba 	bl	800ad90 <_isatty>
 801f41c:	1c43      	adds	r3, r0, #1
 801f41e:	d102      	bne.n	801f426 <_isatty_r+0x1a>
 801f420:	682b      	ldr	r3, [r5, #0]
 801f422:	b103      	cbz	r3, 801f426 <_isatty_r+0x1a>
 801f424:	6023      	str	r3, [r4, #0]
 801f426:	bd38      	pop	{r3, r4, r5, pc}
 801f428:	2000c41c 	.word	0x2000c41c

0801f42c <_sbrk_r>:
 801f42c:	b538      	push	{r3, r4, r5, lr}
 801f42e:	4d06      	ldr	r5, [pc, #24]	@ (801f448 <_sbrk_r+0x1c>)
 801f430:	2300      	movs	r3, #0
 801f432:	4604      	mov	r4, r0
 801f434:	4608      	mov	r0, r1
 801f436:	602b      	str	r3, [r5, #0]
 801f438:	f7eb fcc2 	bl	800adc0 <_sbrk>
 801f43c:	1c43      	adds	r3, r0, #1
 801f43e:	d102      	bne.n	801f446 <_sbrk_r+0x1a>
 801f440:	682b      	ldr	r3, [r5, #0]
 801f442:	b103      	cbz	r3, 801f446 <_sbrk_r+0x1a>
 801f444:	6023      	str	r3, [r4, #0]
 801f446:	bd38      	pop	{r3, r4, r5, pc}
 801f448:	2000c41c 	.word	0x2000c41c
 801f44c:	00000000 	.word	0x00000000

0801f450 <nan>:
 801f450:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f458 <nan+0x8>
 801f454:	4770      	bx	lr
 801f456:	bf00      	nop
 801f458:	00000000 	.word	0x00000000
 801f45c:	7ff80000 	.word	0x7ff80000

0801f460 <abort>:
 801f460:	b508      	push	{r3, lr}
 801f462:	2006      	movs	r0, #6
 801f464:	f000 fc10 	bl	801fc88 <raise>
 801f468:	2001      	movs	r0, #1
 801f46a:	f7eb fc4d 	bl	800ad08 <_exit>

0801f46e <_calloc_r>:
 801f46e:	b570      	push	{r4, r5, r6, lr}
 801f470:	fba1 5402 	umull	r5, r4, r1, r2
 801f474:	b934      	cbnz	r4, 801f484 <_calloc_r+0x16>
 801f476:	4629      	mov	r1, r5
 801f478:	f7fd fd8e 	bl	801cf98 <_malloc_r>
 801f47c:	4606      	mov	r6, r0
 801f47e:	b928      	cbnz	r0, 801f48c <_calloc_r+0x1e>
 801f480:	4630      	mov	r0, r6
 801f482:	bd70      	pop	{r4, r5, r6, pc}
 801f484:	220c      	movs	r2, #12
 801f486:	6002      	str	r2, [r0, #0]
 801f488:	2600      	movs	r6, #0
 801f48a:	e7f9      	b.n	801f480 <_calloc_r+0x12>
 801f48c:	462a      	mov	r2, r5
 801f48e:	4621      	mov	r1, r4
 801f490:	f7fc fd98 	bl	801bfc4 <memset>
 801f494:	e7f4      	b.n	801f480 <_calloc_r+0x12>

0801f496 <rshift>:
 801f496:	6903      	ldr	r3, [r0, #16]
 801f498:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f4a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f4a4:	f100 0414 	add.w	r4, r0, #20
 801f4a8:	dd45      	ble.n	801f536 <rshift+0xa0>
 801f4aa:	f011 011f 	ands.w	r1, r1, #31
 801f4ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f4b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f4b6:	d10c      	bne.n	801f4d2 <rshift+0x3c>
 801f4b8:	f100 0710 	add.w	r7, r0, #16
 801f4bc:	4629      	mov	r1, r5
 801f4be:	42b1      	cmp	r1, r6
 801f4c0:	d334      	bcc.n	801f52c <rshift+0x96>
 801f4c2:	1a9b      	subs	r3, r3, r2
 801f4c4:	009b      	lsls	r3, r3, #2
 801f4c6:	1eea      	subs	r2, r5, #3
 801f4c8:	4296      	cmp	r6, r2
 801f4ca:	bf38      	it	cc
 801f4cc:	2300      	movcc	r3, #0
 801f4ce:	4423      	add	r3, r4
 801f4d0:	e015      	b.n	801f4fe <rshift+0x68>
 801f4d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f4d6:	f1c1 0820 	rsb	r8, r1, #32
 801f4da:	40cf      	lsrs	r7, r1
 801f4dc:	f105 0e04 	add.w	lr, r5, #4
 801f4e0:	46a1      	mov	r9, r4
 801f4e2:	4576      	cmp	r6, lr
 801f4e4:	46f4      	mov	ip, lr
 801f4e6:	d815      	bhi.n	801f514 <rshift+0x7e>
 801f4e8:	1a9a      	subs	r2, r3, r2
 801f4ea:	0092      	lsls	r2, r2, #2
 801f4ec:	3a04      	subs	r2, #4
 801f4ee:	3501      	adds	r5, #1
 801f4f0:	42ae      	cmp	r6, r5
 801f4f2:	bf38      	it	cc
 801f4f4:	2200      	movcc	r2, #0
 801f4f6:	18a3      	adds	r3, r4, r2
 801f4f8:	50a7      	str	r7, [r4, r2]
 801f4fa:	b107      	cbz	r7, 801f4fe <rshift+0x68>
 801f4fc:	3304      	adds	r3, #4
 801f4fe:	1b1a      	subs	r2, r3, r4
 801f500:	42a3      	cmp	r3, r4
 801f502:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f506:	bf08      	it	eq
 801f508:	2300      	moveq	r3, #0
 801f50a:	6102      	str	r2, [r0, #16]
 801f50c:	bf08      	it	eq
 801f50e:	6143      	streq	r3, [r0, #20]
 801f510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f514:	f8dc c000 	ldr.w	ip, [ip]
 801f518:	fa0c fc08 	lsl.w	ip, ip, r8
 801f51c:	ea4c 0707 	orr.w	r7, ip, r7
 801f520:	f849 7b04 	str.w	r7, [r9], #4
 801f524:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f528:	40cf      	lsrs	r7, r1
 801f52a:	e7da      	b.n	801f4e2 <rshift+0x4c>
 801f52c:	f851 cb04 	ldr.w	ip, [r1], #4
 801f530:	f847 cf04 	str.w	ip, [r7, #4]!
 801f534:	e7c3      	b.n	801f4be <rshift+0x28>
 801f536:	4623      	mov	r3, r4
 801f538:	e7e1      	b.n	801f4fe <rshift+0x68>

0801f53a <__hexdig_fun>:
 801f53a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801f53e:	2b09      	cmp	r3, #9
 801f540:	d802      	bhi.n	801f548 <__hexdig_fun+0xe>
 801f542:	3820      	subs	r0, #32
 801f544:	b2c0      	uxtb	r0, r0
 801f546:	4770      	bx	lr
 801f548:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f54c:	2b05      	cmp	r3, #5
 801f54e:	d801      	bhi.n	801f554 <__hexdig_fun+0x1a>
 801f550:	3847      	subs	r0, #71	@ 0x47
 801f552:	e7f7      	b.n	801f544 <__hexdig_fun+0xa>
 801f554:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f558:	2b05      	cmp	r3, #5
 801f55a:	d801      	bhi.n	801f560 <__hexdig_fun+0x26>
 801f55c:	3827      	subs	r0, #39	@ 0x27
 801f55e:	e7f1      	b.n	801f544 <__hexdig_fun+0xa>
 801f560:	2000      	movs	r0, #0
 801f562:	4770      	bx	lr

0801f564 <__gethex>:
 801f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f568:	b085      	sub	sp, #20
 801f56a:	468a      	mov	sl, r1
 801f56c:	9302      	str	r3, [sp, #8]
 801f56e:	680b      	ldr	r3, [r1, #0]
 801f570:	9001      	str	r0, [sp, #4]
 801f572:	4690      	mov	r8, r2
 801f574:	1c9c      	adds	r4, r3, #2
 801f576:	46a1      	mov	r9, r4
 801f578:	f814 0b01 	ldrb.w	r0, [r4], #1
 801f57c:	2830      	cmp	r0, #48	@ 0x30
 801f57e:	d0fa      	beq.n	801f576 <__gethex+0x12>
 801f580:	eba9 0303 	sub.w	r3, r9, r3
 801f584:	f1a3 0b02 	sub.w	fp, r3, #2
 801f588:	f7ff ffd7 	bl	801f53a <__hexdig_fun>
 801f58c:	4605      	mov	r5, r0
 801f58e:	2800      	cmp	r0, #0
 801f590:	d168      	bne.n	801f664 <__gethex+0x100>
 801f592:	49a0      	ldr	r1, [pc, #640]	@ (801f814 <__gethex+0x2b0>)
 801f594:	2201      	movs	r2, #1
 801f596:	4648      	mov	r0, r9
 801f598:	f7fc fd1c 	bl	801bfd4 <strncmp>
 801f59c:	4607      	mov	r7, r0
 801f59e:	2800      	cmp	r0, #0
 801f5a0:	d167      	bne.n	801f672 <__gethex+0x10e>
 801f5a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801f5a6:	4626      	mov	r6, r4
 801f5a8:	f7ff ffc7 	bl	801f53a <__hexdig_fun>
 801f5ac:	2800      	cmp	r0, #0
 801f5ae:	d062      	beq.n	801f676 <__gethex+0x112>
 801f5b0:	4623      	mov	r3, r4
 801f5b2:	7818      	ldrb	r0, [r3, #0]
 801f5b4:	2830      	cmp	r0, #48	@ 0x30
 801f5b6:	4699      	mov	r9, r3
 801f5b8:	f103 0301 	add.w	r3, r3, #1
 801f5bc:	d0f9      	beq.n	801f5b2 <__gethex+0x4e>
 801f5be:	f7ff ffbc 	bl	801f53a <__hexdig_fun>
 801f5c2:	fab0 f580 	clz	r5, r0
 801f5c6:	096d      	lsrs	r5, r5, #5
 801f5c8:	f04f 0b01 	mov.w	fp, #1
 801f5cc:	464a      	mov	r2, r9
 801f5ce:	4616      	mov	r6, r2
 801f5d0:	3201      	adds	r2, #1
 801f5d2:	7830      	ldrb	r0, [r6, #0]
 801f5d4:	f7ff ffb1 	bl	801f53a <__hexdig_fun>
 801f5d8:	2800      	cmp	r0, #0
 801f5da:	d1f8      	bne.n	801f5ce <__gethex+0x6a>
 801f5dc:	498d      	ldr	r1, [pc, #564]	@ (801f814 <__gethex+0x2b0>)
 801f5de:	2201      	movs	r2, #1
 801f5e0:	4630      	mov	r0, r6
 801f5e2:	f7fc fcf7 	bl	801bfd4 <strncmp>
 801f5e6:	2800      	cmp	r0, #0
 801f5e8:	d13f      	bne.n	801f66a <__gethex+0x106>
 801f5ea:	b944      	cbnz	r4, 801f5fe <__gethex+0x9a>
 801f5ec:	1c74      	adds	r4, r6, #1
 801f5ee:	4622      	mov	r2, r4
 801f5f0:	4616      	mov	r6, r2
 801f5f2:	3201      	adds	r2, #1
 801f5f4:	7830      	ldrb	r0, [r6, #0]
 801f5f6:	f7ff ffa0 	bl	801f53a <__hexdig_fun>
 801f5fa:	2800      	cmp	r0, #0
 801f5fc:	d1f8      	bne.n	801f5f0 <__gethex+0x8c>
 801f5fe:	1ba4      	subs	r4, r4, r6
 801f600:	00a7      	lsls	r7, r4, #2
 801f602:	7833      	ldrb	r3, [r6, #0]
 801f604:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801f608:	2b50      	cmp	r3, #80	@ 0x50
 801f60a:	d13e      	bne.n	801f68a <__gethex+0x126>
 801f60c:	7873      	ldrb	r3, [r6, #1]
 801f60e:	2b2b      	cmp	r3, #43	@ 0x2b
 801f610:	d033      	beq.n	801f67a <__gethex+0x116>
 801f612:	2b2d      	cmp	r3, #45	@ 0x2d
 801f614:	d034      	beq.n	801f680 <__gethex+0x11c>
 801f616:	1c71      	adds	r1, r6, #1
 801f618:	2400      	movs	r4, #0
 801f61a:	7808      	ldrb	r0, [r1, #0]
 801f61c:	f7ff ff8d 	bl	801f53a <__hexdig_fun>
 801f620:	1e43      	subs	r3, r0, #1
 801f622:	b2db      	uxtb	r3, r3
 801f624:	2b18      	cmp	r3, #24
 801f626:	d830      	bhi.n	801f68a <__gethex+0x126>
 801f628:	f1a0 0210 	sub.w	r2, r0, #16
 801f62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f630:	f7ff ff83 	bl	801f53a <__hexdig_fun>
 801f634:	f100 3cff 	add.w	ip, r0, #4294967295
 801f638:	fa5f fc8c 	uxtb.w	ip, ip
 801f63c:	f1bc 0f18 	cmp.w	ip, #24
 801f640:	f04f 030a 	mov.w	r3, #10
 801f644:	d91e      	bls.n	801f684 <__gethex+0x120>
 801f646:	b104      	cbz	r4, 801f64a <__gethex+0xe6>
 801f648:	4252      	negs	r2, r2
 801f64a:	4417      	add	r7, r2
 801f64c:	f8ca 1000 	str.w	r1, [sl]
 801f650:	b1ed      	cbz	r5, 801f68e <__gethex+0x12a>
 801f652:	f1bb 0f00 	cmp.w	fp, #0
 801f656:	bf0c      	ite	eq
 801f658:	2506      	moveq	r5, #6
 801f65a:	2500      	movne	r5, #0
 801f65c:	4628      	mov	r0, r5
 801f65e:	b005      	add	sp, #20
 801f660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f664:	2500      	movs	r5, #0
 801f666:	462c      	mov	r4, r5
 801f668:	e7b0      	b.n	801f5cc <__gethex+0x68>
 801f66a:	2c00      	cmp	r4, #0
 801f66c:	d1c7      	bne.n	801f5fe <__gethex+0x9a>
 801f66e:	4627      	mov	r7, r4
 801f670:	e7c7      	b.n	801f602 <__gethex+0x9e>
 801f672:	464e      	mov	r6, r9
 801f674:	462f      	mov	r7, r5
 801f676:	2501      	movs	r5, #1
 801f678:	e7c3      	b.n	801f602 <__gethex+0x9e>
 801f67a:	2400      	movs	r4, #0
 801f67c:	1cb1      	adds	r1, r6, #2
 801f67e:	e7cc      	b.n	801f61a <__gethex+0xb6>
 801f680:	2401      	movs	r4, #1
 801f682:	e7fb      	b.n	801f67c <__gethex+0x118>
 801f684:	fb03 0002 	mla	r0, r3, r2, r0
 801f688:	e7ce      	b.n	801f628 <__gethex+0xc4>
 801f68a:	4631      	mov	r1, r6
 801f68c:	e7de      	b.n	801f64c <__gethex+0xe8>
 801f68e:	eba6 0309 	sub.w	r3, r6, r9
 801f692:	3b01      	subs	r3, #1
 801f694:	4629      	mov	r1, r5
 801f696:	2b07      	cmp	r3, #7
 801f698:	dc0a      	bgt.n	801f6b0 <__gethex+0x14c>
 801f69a:	9801      	ldr	r0, [sp, #4]
 801f69c:	f7fd fd08 	bl	801d0b0 <_Balloc>
 801f6a0:	4604      	mov	r4, r0
 801f6a2:	b940      	cbnz	r0, 801f6b6 <__gethex+0x152>
 801f6a4:	4b5c      	ldr	r3, [pc, #368]	@ (801f818 <__gethex+0x2b4>)
 801f6a6:	4602      	mov	r2, r0
 801f6a8:	21e4      	movs	r1, #228	@ 0xe4
 801f6aa:	485c      	ldr	r0, [pc, #368]	@ (801f81c <__gethex+0x2b8>)
 801f6ac:	f7fc fd88 	bl	801c1c0 <__assert_func>
 801f6b0:	3101      	adds	r1, #1
 801f6b2:	105b      	asrs	r3, r3, #1
 801f6b4:	e7ef      	b.n	801f696 <__gethex+0x132>
 801f6b6:	f100 0a14 	add.w	sl, r0, #20
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	4655      	mov	r5, sl
 801f6be:	469b      	mov	fp, r3
 801f6c0:	45b1      	cmp	r9, r6
 801f6c2:	d337      	bcc.n	801f734 <__gethex+0x1d0>
 801f6c4:	f845 bb04 	str.w	fp, [r5], #4
 801f6c8:	eba5 050a 	sub.w	r5, r5, sl
 801f6cc:	10ad      	asrs	r5, r5, #2
 801f6ce:	6125      	str	r5, [r4, #16]
 801f6d0:	4658      	mov	r0, fp
 801f6d2:	f7fd fddf 	bl	801d294 <__hi0bits>
 801f6d6:	016d      	lsls	r5, r5, #5
 801f6d8:	f8d8 6000 	ldr.w	r6, [r8]
 801f6dc:	1a2d      	subs	r5, r5, r0
 801f6de:	42b5      	cmp	r5, r6
 801f6e0:	dd54      	ble.n	801f78c <__gethex+0x228>
 801f6e2:	1bad      	subs	r5, r5, r6
 801f6e4:	4629      	mov	r1, r5
 801f6e6:	4620      	mov	r0, r4
 801f6e8:	f7fe f96b 	bl	801d9c2 <__any_on>
 801f6ec:	4681      	mov	r9, r0
 801f6ee:	b178      	cbz	r0, 801f710 <__gethex+0x1ac>
 801f6f0:	1e6b      	subs	r3, r5, #1
 801f6f2:	1159      	asrs	r1, r3, #5
 801f6f4:	f003 021f 	and.w	r2, r3, #31
 801f6f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f6fc:	f04f 0901 	mov.w	r9, #1
 801f700:	fa09 f202 	lsl.w	r2, r9, r2
 801f704:	420a      	tst	r2, r1
 801f706:	d003      	beq.n	801f710 <__gethex+0x1ac>
 801f708:	454b      	cmp	r3, r9
 801f70a:	dc36      	bgt.n	801f77a <__gethex+0x216>
 801f70c:	f04f 0902 	mov.w	r9, #2
 801f710:	4629      	mov	r1, r5
 801f712:	4620      	mov	r0, r4
 801f714:	f7ff febf 	bl	801f496 <rshift>
 801f718:	442f      	add	r7, r5
 801f71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f71e:	42bb      	cmp	r3, r7
 801f720:	da42      	bge.n	801f7a8 <__gethex+0x244>
 801f722:	9801      	ldr	r0, [sp, #4]
 801f724:	4621      	mov	r1, r4
 801f726:	f7fd fd03 	bl	801d130 <_Bfree>
 801f72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f72c:	2300      	movs	r3, #0
 801f72e:	6013      	str	r3, [r2, #0]
 801f730:	25a3      	movs	r5, #163	@ 0xa3
 801f732:	e793      	b.n	801f65c <__gethex+0xf8>
 801f734:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801f738:	2a2e      	cmp	r2, #46	@ 0x2e
 801f73a:	d012      	beq.n	801f762 <__gethex+0x1fe>
 801f73c:	2b20      	cmp	r3, #32
 801f73e:	d104      	bne.n	801f74a <__gethex+0x1e6>
 801f740:	f845 bb04 	str.w	fp, [r5], #4
 801f744:	f04f 0b00 	mov.w	fp, #0
 801f748:	465b      	mov	r3, fp
 801f74a:	7830      	ldrb	r0, [r6, #0]
 801f74c:	9303      	str	r3, [sp, #12]
 801f74e:	f7ff fef4 	bl	801f53a <__hexdig_fun>
 801f752:	9b03      	ldr	r3, [sp, #12]
 801f754:	f000 000f 	and.w	r0, r0, #15
 801f758:	4098      	lsls	r0, r3
 801f75a:	ea4b 0b00 	orr.w	fp, fp, r0
 801f75e:	3304      	adds	r3, #4
 801f760:	e7ae      	b.n	801f6c0 <__gethex+0x15c>
 801f762:	45b1      	cmp	r9, r6
 801f764:	d8ea      	bhi.n	801f73c <__gethex+0x1d8>
 801f766:	492b      	ldr	r1, [pc, #172]	@ (801f814 <__gethex+0x2b0>)
 801f768:	9303      	str	r3, [sp, #12]
 801f76a:	2201      	movs	r2, #1
 801f76c:	4630      	mov	r0, r6
 801f76e:	f7fc fc31 	bl	801bfd4 <strncmp>
 801f772:	9b03      	ldr	r3, [sp, #12]
 801f774:	2800      	cmp	r0, #0
 801f776:	d1e1      	bne.n	801f73c <__gethex+0x1d8>
 801f778:	e7a2      	b.n	801f6c0 <__gethex+0x15c>
 801f77a:	1ea9      	subs	r1, r5, #2
 801f77c:	4620      	mov	r0, r4
 801f77e:	f7fe f920 	bl	801d9c2 <__any_on>
 801f782:	2800      	cmp	r0, #0
 801f784:	d0c2      	beq.n	801f70c <__gethex+0x1a8>
 801f786:	f04f 0903 	mov.w	r9, #3
 801f78a:	e7c1      	b.n	801f710 <__gethex+0x1ac>
 801f78c:	da09      	bge.n	801f7a2 <__gethex+0x23e>
 801f78e:	1b75      	subs	r5, r6, r5
 801f790:	4621      	mov	r1, r4
 801f792:	9801      	ldr	r0, [sp, #4]
 801f794:	462a      	mov	r2, r5
 801f796:	f7fd fedb 	bl	801d550 <__lshift>
 801f79a:	1b7f      	subs	r7, r7, r5
 801f79c:	4604      	mov	r4, r0
 801f79e:	f100 0a14 	add.w	sl, r0, #20
 801f7a2:	f04f 0900 	mov.w	r9, #0
 801f7a6:	e7b8      	b.n	801f71a <__gethex+0x1b6>
 801f7a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f7ac:	42bd      	cmp	r5, r7
 801f7ae:	dd6f      	ble.n	801f890 <__gethex+0x32c>
 801f7b0:	1bed      	subs	r5, r5, r7
 801f7b2:	42ae      	cmp	r6, r5
 801f7b4:	dc34      	bgt.n	801f820 <__gethex+0x2bc>
 801f7b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f7ba:	2b02      	cmp	r3, #2
 801f7bc:	d022      	beq.n	801f804 <__gethex+0x2a0>
 801f7be:	2b03      	cmp	r3, #3
 801f7c0:	d024      	beq.n	801f80c <__gethex+0x2a8>
 801f7c2:	2b01      	cmp	r3, #1
 801f7c4:	d115      	bne.n	801f7f2 <__gethex+0x28e>
 801f7c6:	42ae      	cmp	r6, r5
 801f7c8:	d113      	bne.n	801f7f2 <__gethex+0x28e>
 801f7ca:	2e01      	cmp	r6, #1
 801f7cc:	d10b      	bne.n	801f7e6 <__gethex+0x282>
 801f7ce:	9a02      	ldr	r2, [sp, #8]
 801f7d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f7d4:	6013      	str	r3, [r2, #0]
 801f7d6:	2301      	movs	r3, #1
 801f7d8:	6123      	str	r3, [r4, #16]
 801f7da:	f8ca 3000 	str.w	r3, [sl]
 801f7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7e0:	2562      	movs	r5, #98	@ 0x62
 801f7e2:	601c      	str	r4, [r3, #0]
 801f7e4:	e73a      	b.n	801f65c <__gethex+0xf8>
 801f7e6:	1e71      	subs	r1, r6, #1
 801f7e8:	4620      	mov	r0, r4
 801f7ea:	f7fe f8ea 	bl	801d9c2 <__any_on>
 801f7ee:	2800      	cmp	r0, #0
 801f7f0:	d1ed      	bne.n	801f7ce <__gethex+0x26a>
 801f7f2:	9801      	ldr	r0, [sp, #4]
 801f7f4:	4621      	mov	r1, r4
 801f7f6:	f7fd fc9b 	bl	801d130 <_Bfree>
 801f7fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7fc:	2300      	movs	r3, #0
 801f7fe:	6013      	str	r3, [r2, #0]
 801f800:	2550      	movs	r5, #80	@ 0x50
 801f802:	e72b      	b.n	801f65c <__gethex+0xf8>
 801f804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f806:	2b00      	cmp	r3, #0
 801f808:	d1f3      	bne.n	801f7f2 <__gethex+0x28e>
 801f80a:	e7e0      	b.n	801f7ce <__gethex+0x26a>
 801f80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d1dd      	bne.n	801f7ce <__gethex+0x26a>
 801f812:	e7ee      	b.n	801f7f2 <__gethex+0x28e>
 801f814:	080221d6 	.word	0x080221d6
 801f818:	0802216c 	.word	0x0802216c
 801f81c:	080221fb 	.word	0x080221fb
 801f820:	1e6f      	subs	r7, r5, #1
 801f822:	f1b9 0f00 	cmp.w	r9, #0
 801f826:	d130      	bne.n	801f88a <__gethex+0x326>
 801f828:	b127      	cbz	r7, 801f834 <__gethex+0x2d0>
 801f82a:	4639      	mov	r1, r7
 801f82c:	4620      	mov	r0, r4
 801f82e:	f7fe f8c8 	bl	801d9c2 <__any_on>
 801f832:	4681      	mov	r9, r0
 801f834:	117a      	asrs	r2, r7, #5
 801f836:	2301      	movs	r3, #1
 801f838:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f83c:	f007 071f 	and.w	r7, r7, #31
 801f840:	40bb      	lsls	r3, r7
 801f842:	4213      	tst	r3, r2
 801f844:	4629      	mov	r1, r5
 801f846:	4620      	mov	r0, r4
 801f848:	bf18      	it	ne
 801f84a:	f049 0902 	orrne.w	r9, r9, #2
 801f84e:	f7ff fe22 	bl	801f496 <rshift>
 801f852:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801f856:	1b76      	subs	r6, r6, r5
 801f858:	2502      	movs	r5, #2
 801f85a:	f1b9 0f00 	cmp.w	r9, #0
 801f85e:	d047      	beq.n	801f8f0 <__gethex+0x38c>
 801f860:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f864:	2b02      	cmp	r3, #2
 801f866:	d015      	beq.n	801f894 <__gethex+0x330>
 801f868:	2b03      	cmp	r3, #3
 801f86a:	d017      	beq.n	801f89c <__gethex+0x338>
 801f86c:	2b01      	cmp	r3, #1
 801f86e:	d109      	bne.n	801f884 <__gethex+0x320>
 801f870:	f019 0f02 	tst.w	r9, #2
 801f874:	d006      	beq.n	801f884 <__gethex+0x320>
 801f876:	f8da 3000 	ldr.w	r3, [sl]
 801f87a:	ea49 0903 	orr.w	r9, r9, r3
 801f87e:	f019 0f01 	tst.w	r9, #1
 801f882:	d10e      	bne.n	801f8a2 <__gethex+0x33e>
 801f884:	f045 0510 	orr.w	r5, r5, #16
 801f888:	e032      	b.n	801f8f0 <__gethex+0x38c>
 801f88a:	f04f 0901 	mov.w	r9, #1
 801f88e:	e7d1      	b.n	801f834 <__gethex+0x2d0>
 801f890:	2501      	movs	r5, #1
 801f892:	e7e2      	b.n	801f85a <__gethex+0x2f6>
 801f894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f896:	f1c3 0301 	rsb	r3, r3, #1
 801f89a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d0f0      	beq.n	801f884 <__gethex+0x320>
 801f8a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f8a6:	f104 0314 	add.w	r3, r4, #20
 801f8aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f8ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f8b2:	f04f 0c00 	mov.w	ip, #0
 801f8b6:	4618      	mov	r0, r3
 801f8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f8c0:	d01b      	beq.n	801f8fa <__gethex+0x396>
 801f8c2:	3201      	adds	r2, #1
 801f8c4:	6002      	str	r2, [r0, #0]
 801f8c6:	2d02      	cmp	r5, #2
 801f8c8:	f104 0314 	add.w	r3, r4, #20
 801f8cc:	d13c      	bne.n	801f948 <__gethex+0x3e4>
 801f8ce:	f8d8 2000 	ldr.w	r2, [r8]
 801f8d2:	3a01      	subs	r2, #1
 801f8d4:	42b2      	cmp	r2, r6
 801f8d6:	d109      	bne.n	801f8ec <__gethex+0x388>
 801f8d8:	1171      	asrs	r1, r6, #5
 801f8da:	2201      	movs	r2, #1
 801f8dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f8e0:	f006 061f 	and.w	r6, r6, #31
 801f8e4:	fa02 f606 	lsl.w	r6, r2, r6
 801f8e8:	421e      	tst	r6, r3
 801f8ea:	d13a      	bne.n	801f962 <__gethex+0x3fe>
 801f8ec:	f045 0520 	orr.w	r5, r5, #32
 801f8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8f2:	601c      	str	r4, [r3, #0]
 801f8f4:	9b02      	ldr	r3, [sp, #8]
 801f8f6:	601f      	str	r7, [r3, #0]
 801f8f8:	e6b0      	b.n	801f65c <__gethex+0xf8>
 801f8fa:	4299      	cmp	r1, r3
 801f8fc:	f843 cc04 	str.w	ip, [r3, #-4]
 801f900:	d8d9      	bhi.n	801f8b6 <__gethex+0x352>
 801f902:	68a3      	ldr	r3, [r4, #8]
 801f904:	459b      	cmp	fp, r3
 801f906:	db17      	blt.n	801f938 <__gethex+0x3d4>
 801f908:	6861      	ldr	r1, [r4, #4]
 801f90a:	9801      	ldr	r0, [sp, #4]
 801f90c:	3101      	adds	r1, #1
 801f90e:	f7fd fbcf 	bl	801d0b0 <_Balloc>
 801f912:	4681      	mov	r9, r0
 801f914:	b918      	cbnz	r0, 801f91e <__gethex+0x3ba>
 801f916:	4b1a      	ldr	r3, [pc, #104]	@ (801f980 <__gethex+0x41c>)
 801f918:	4602      	mov	r2, r0
 801f91a:	2184      	movs	r1, #132	@ 0x84
 801f91c:	e6c5      	b.n	801f6aa <__gethex+0x146>
 801f91e:	6922      	ldr	r2, [r4, #16]
 801f920:	3202      	adds	r2, #2
 801f922:	f104 010c 	add.w	r1, r4, #12
 801f926:	0092      	lsls	r2, r2, #2
 801f928:	300c      	adds	r0, #12
 801f92a:	f7fc fc3a 	bl	801c1a2 <memcpy>
 801f92e:	4621      	mov	r1, r4
 801f930:	9801      	ldr	r0, [sp, #4]
 801f932:	f7fd fbfd 	bl	801d130 <_Bfree>
 801f936:	464c      	mov	r4, r9
 801f938:	6923      	ldr	r3, [r4, #16]
 801f93a:	1c5a      	adds	r2, r3, #1
 801f93c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f940:	6122      	str	r2, [r4, #16]
 801f942:	2201      	movs	r2, #1
 801f944:	615a      	str	r2, [r3, #20]
 801f946:	e7be      	b.n	801f8c6 <__gethex+0x362>
 801f948:	6922      	ldr	r2, [r4, #16]
 801f94a:	455a      	cmp	r2, fp
 801f94c:	dd0b      	ble.n	801f966 <__gethex+0x402>
 801f94e:	2101      	movs	r1, #1
 801f950:	4620      	mov	r0, r4
 801f952:	f7ff fda0 	bl	801f496 <rshift>
 801f956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f95a:	3701      	adds	r7, #1
 801f95c:	42bb      	cmp	r3, r7
 801f95e:	f6ff aee0 	blt.w	801f722 <__gethex+0x1be>
 801f962:	2501      	movs	r5, #1
 801f964:	e7c2      	b.n	801f8ec <__gethex+0x388>
 801f966:	f016 061f 	ands.w	r6, r6, #31
 801f96a:	d0fa      	beq.n	801f962 <__gethex+0x3fe>
 801f96c:	4453      	add	r3, sl
 801f96e:	f1c6 0620 	rsb	r6, r6, #32
 801f972:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801f976:	f7fd fc8d 	bl	801d294 <__hi0bits>
 801f97a:	42b0      	cmp	r0, r6
 801f97c:	dbe7      	blt.n	801f94e <__gethex+0x3ea>
 801f97e:	e7f0      	b.n	801f962 <__gethex+0x3fe>
 801f980:	0802216c 	.word	0x0802216c

0801f984 <L_shift>:
 801f984:	f1c2 0208 	rsb	r2, r2, #8
 801f988:	0092      	lsls	r2, r2, #2
 801f98a:	b570      	push	{r4, r5, r6, lr}
 801f98c:	f1c2 0620 	rsb	r6, r2, #32
 801f990:	6843      	ldr	r3, [r0, #4]
 801f992:	6804      	ldr	r4, [r0, #0]
 801f994:	fa03 f506 	lsl.w	r5, r3, r6
 801f998:	432c      	orrs	r4, r5
 801f99a:	40d3      	lsrs	r3, r2
 801f99c:	6004      	str	r4, [r0, #0]
 801f99e:	f840 3f04 	str.w	r3, [r0, #4]!
 801f9a2:	4288      	cmp	r0, r1
 801f9a4:	d3f4      	bcc.n	801f990 <L_shift+0xc>
 801f9a6:	bd70      	pop	{r4, r5, r6, pc}

0801f9a8 <__match>:
 801f9a8:	b530      	push	{r4, r5, lr}
 801f9aa:	6803      	ldr	r3, [r0, #0]
 801f9ac:	3301      	adds	r3, #1
 801f9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f9b2:	b914      	cbnz	r4, 801f9ba <__match+0x12>
 801f9b4:	6003      	str	r3, [r0, #0]
 801f9b6:	2001      	movs	r0, #1
 801f9b8:	bd30      	pop	{r4, r5, pc}
 801f9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f9be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801f9c2:	2d19      	cmp	r5, #25
 801f9c4:	bf98      	it	ls
 801f9c6:	3220      	addls	r2, #32
 801f9c8:	42a2      	cmp	r2, r4
 801f9ca:	d0f0      	beq.n	801f9ae <__match+0x6>
 801f9cc:	2000      	movs	r0, #0
 801f9ce:	e7f3      	b.n	801f9b8 <__match+0x10>

0801f9d0 <__hexnan>:
 801f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d4:	680b      	ldr	r3, [r1, #0]
 801f9d6:	6801      	ldr	r1, [r0, #0]
 801f9d8:	115e      	asrs	r6, r3, #5
 801f9da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f9de:	f013 031f 	ands.w	r3, r3, #31
 801f9e2:	b087      	sub	sp, #28
 801f9e4:	bf18      	it	ne
 801f9e6:	3604      	addne	r6, #4
 801f9e8:	2500      	movs	r5, #0
 801f9ea:	1f37      	subs	r7, r6, #4
 801f9ec:	4682      	mov	sl, r0
 801f9ee:	4690      	mov	r8, r2
 801f9f0:	9301      	str	r3, [sp, #4]
 801f9f2:	f846 5c04 	str.w	r5, [r6, #-4]
 801f9f6:	46b9      	mov	r9, r7
 801f9f8:	463c      	mov	r4, r7
 801f9fa:	9502      	str	r5, [sp, #8]
 801f9fc:	46ab      	mov	fp, r5
 801f9fe:	784a      	ldrb	r2, [r1, #1]
 801fa00:	1c4b      	adds	r3, r1, #1
 801fa02:	9303      	str	r3, [sp, #12]
 801fa04:	b342      	cbz	r2, 801fa58 <__hexnan+0x88>
 801fa06:	4610      	mov	r0, r2
 801fa08:	9105      	str	r1, [sp, #20]
 801fa0a:	9204      	str	r2, [sp, #16]
 801fa0c:	f7ff fd95 	bl	801f53a <__hexdig_fun>
 801fa10:	2800      	cmp	r0, #0
 801fa12:	d151      	bne.n	801fab8 <__hexnan+0xe8>
 801fa14:	9a04      	ldr	r2, [sp, #16]
 801fa16:	9905      	ldr	r1, [sp, #20]
 801fa18:	2a20      	cmp	r2, #32
 801fa1a:	d818      	bhi.n	801fa4e <__hexnan+0x7e>
 801fa1c:	9b02      	ldr	r3, [sp, #8]
 801fa1e:	459b      	cmp	fp, r3
 801fa20:	dd13      	ble.n	801fa4a <__hexnan+0x7a>
 801fa22:	454c      	cmp	r4, r9
 801fa24:	d206      	bcs.n	801fa34 <__hexnan+0x64>
 801fa26:	2d07      	cmp	r5, #7
 801fa28:	dc04      	bgt.n	801fa34 <__hexnan+0x64>
 801fa2a:	462a      	mov	r2, r5
 801fa2c:	4649      	mov	r1, r9
 801fa2e:	4620      	mov	r0, r4
 801fa30:	f7ff ffa8 	bl	801f984 <L_shift>
 801fa34:	4544      	cmp	r4, r8
 801fa36:	d952      	bls.n	801fade <__hexnan+0x10e>
 801fa38:	2300      	movs	r3, #0
 801fa3a:	f1a4 0904 	sub.w	r9, r4, #4
 801fa3e:	f844 3c04 	str.w	r3, [r4, #-4]
 801fa42:	f8cd b008 	str.w	fp, [sp, #8]
 801fa46:	464c      	mov	r4, r9
 801fa48:	461d      	mov	r5, r3
 801fa4a:	9903      	ldr	r1, [sp, #12]
 801fa4c:	e7d7      	b.n	801f9fe <__hexnan+0x2e>
 801fa4e:	2a29      	cmp	r2, #41	@ 0x29
 801fa50:	d157      	bne.n	801fb02 <__hexnan+0x132>
 801fa52:	3102      	adds	r1, #2
 801fa54:	f8ca 1000 	str.w	r1, [sl]
 801fa58:	f1bb 0f00 	cmp.w	fp, #0
 801fa5c:	d051      	beq.n	801fb02 <__hexnan+0x132>
 801fa5e:	454c      	cmp	r4, r9
 801fa60:	d206      	bcs.n	801fa70 <__hexnan+0xa0>
 801fa62:	2d07      	cmp	r5, #7
 801fa64:	dc04      	bgt.n	801fa70 <__hexnan+0xa0>
 801fa66:	462a      	mov	r2, r5
 801fa68:	4649      	mov	r1, r9
 801fa6a:	4620      	mov	r0, r4
 801fa6c:	f7ff ff8a 	bl	801f984 <L_shift>
 801fa70:	4544      	cmp	r4, r8
 801fa72:	d936      	bls.n	801fae2 <__hexnan+0x112>
 801fa74:	f1a8 0204 	sub.w	r2, r8, #4
 801fa78:	4623      	mov	r3, r4
 801fa7a:	f853 1b04 	ldr.w	r1, [r3], #4
 801fa7e:	f842 1f04 	str.w	r1, [r2, #4]!
 801fa82:	429f      	cmp	r7, r3
 801fa84:	d2f9      	bcs.n	801fa7a <__hexnan+0xaa>
 801fa86:	1b3b      	subs	r3, r7, r4
 801fa88:	f023 0303 	bic.w	r3, r3, #3
 801fa8c:	3304      	adds	r3, #4
 801fa8e:	3401      	adds	r4, #1
 801fa90:	3e03      	subs	r6, #3
 801fa92:	42b4      	cmp	r4, r6
 801fa94:	bf88      	it	hi
 801fa96:	2304      	movhi	r3, #4
 801fa98:	4443      	add	r3, r8
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	f843 2b04 	str.w	r2, [r3], #4
 801faa0:	429f      	cmp	r7, r3
 801faa2:	d2fb      	bcs.n	801fa9c <__hexnan+0xcc>
 801faa4:	683b      	ldr	r3, [r7, #0]
 801faa6:	b91b      	cbnz	r3, 801fab0 <__hexnan+0xe0>
 801faa8:	4547      	cmp	r7, r8
 801faaa:	d128      	bne.n	801fafe <__hexnan+0x12e>
 801faac:	2301      	movs	r3, #1
 801faae:	603b      	str	r3, [r7, #0]
 801fab0:	2005      	movs	r0, #5
 801fab2:	b007      	add	sp, #28
 801fab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fab8:	3501      	adds	r5, #1
 801faba:	2d08      	cmp	r5, #8
 801fabc:	f10b 0b01 	add.w	fp, fp, #1
 801fac0:	dd06      	ble.n	801fad0 <__hexnan+0x100>
 801fac2:	4544      	cmp	r4, r8
 801fac4:	d9c1      	bls.n	801fa4a <__hexnan+0x7a>
 801fac6:	2300      	movs	r3, #0
 801fac8:	f844 3c04 	str.w	r3, [r4, #-4]
 801facc:	2501      	movs	r5, #1
 801face:	3c04      	subs	r4, #4
 801fad0:	6822      	ldr	r2, [r4, #0]
 801fad2:	f000 000f 	and.w	r0, r0, #15
 801fad6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fada:	6020      	str	r0, [r4, #0]
 801fadc:	e7b5      	b.n	801fa4a <__hexnan+0x7a>
 801fade:	2508      	movs	r5, #8
 801fae0:	e7b3      	b.n	801fa4a <__hexnan+0x7a>
 801fae2:	9b01      	ldr	r3, [sp, #4]
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d0dd      	beq.n	801faa4 <__hexnan+0xd4>
 801fae8:	f1c3 0320 	rsb	r3, r3, #32
 801faec:	f04f 32ff 	mov.w	r2, #4294967295
 801faf0:	40da      	lsrs	r2, r3
 801faf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801faf6:	4013      	ands	r3, r2
 801faf8:	f846 3c04 	str.w	r3, [r6, #-4]
 801fafc:	e7d2      	b.n	801faa4 <__hexnan+0xd4>
 801fafe:	3f04      	subs	r7, #4
 801fb00:	e7d0      	b.n	801faa4 <__hexnan+0xd4>
 801fb02:	2004      	movs	r0, #4
 801fb04:	e7d5      	b.n	801fab2 <__hexnan+0xe2>

0801fb06 <__ascii_mbtowc>:
 801fb06:	b082      	sub	sp, #8
 801fb08:	b901      	cbnz	r1, 801fb0c <__ascii_mbtowc+0x6>
 801fb0a:	a901      	add	r1, sp, #4
 801fb0c:	b142      	cbz	r2, 801fb20 <__ascii_mbtowc+0x1a>
 801fb0e:	b14b      	cbz	r3, 801fb24 <__ascii_mbtowc+0x1e>
 801fb10:	7813      	ldrb	r3, [r2, #0]
 801fb12:	600b      	str	r3, [r1, #0]
 801fb14:	7812      	ldrb	r2, [r2, #0]
 801fb16:	1e10      	subs	r0, r2, #0
 801fb18:	bf18      	it	ne
 801fb1a:	2001      	movne	r0, #1
 801fb1c:	b002      	add	sp, #8
 801fb1e:	4770      	bx	lr
 801fb20:	4610      	mov	r0, r2
 801fb22:	e7fb      	b.n	801fb1c <__ascii_mbtowc+0x16>
 801fb24:	f06f 0001 	mvn.w	r0, #1
 801fb28:	e7f8      	b.n	801fb1c <__ascii_mbtowc+0x16>

0801fb2a <_malloc_usable_size_r>:
 801fb2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb2e:	1f18      	subs	r0, r3, #4
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	bfbc      	itt	lt
 801fb34:	580b      	ldrlt	r3, [r1, r0]
 801fb36:	18c0      	addlt	r0, r0, r3
 801fb38:	4770      	bx	lr
	...

0801fb3c <_strtoul_l.isra.0>:
 801fb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fb40:	4e34      	ldr	r6, [pc, #208]	@ (801fc14 <_strtoul_l.isra.0+0xd8>)
 801fb42:	4686      	mov	lr, r0
 801fb44:	460d      	mov	r5, r1
 801fb46:	4628      	mov	r0, r5
 801fb48:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fb4c:	5d37      	ldrb	r7, [r6, r4]
 801fb4e:	f017 0708 	ands.w	r7, r7, #8
 801fb52:	d1f8      	bne.n	801fb46 <_strtoul_l.isra.0+0xa>
 801fb54:	2c2d      	cmp	r4, #45	@ 0x2d
 801fb56:	d110      	bne.n	801fb7a <_strtoul_l.isra.0+0x3e>
 801fb58:	782c      	ldrb	r4, [r5, #0]
 801fb5a:	2701      	movs	r7, #1
 801fb5c:	1c85      	adds	r5, r0, #2
 801fb5e:	f033 0010 	bics.w	r0, r3, #16
 801fb62:	d115      	bne.n	801fb90 <_strtoul_l.isra.0+0x54>
 801fb64:	2c30      	cmp	r4, #48	@ 0x30
 801fb66:	d10d      	bne.n	801fb84 <_strtoul_l.isra.0+0x48>
 801fb68:	7828      	ldrb	r0, [r5, #0]
 801fb6a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801fb6e:	2858      	cmp	r0, #88	@ 0x58
 801fb70:	d108      	bne.n	801fb84 <_strtoul_l.isra.0+0x48>
 801fb72:	786c      	ldrb	r4, [r5, #1]
 801fb74:	3502      	adds	r5, #2
 801fb76:	2310      	movs	r3, #16
 801fb78:	e00a      	b.n	801fb90 <_strtoul_l.isra.0+0x54>
 801fb7a:	2c2b      	cmp	r4, #43	@ 0x2b
 801fb7c:	bf04      	itt	eq
 801fb7e:	782c      	ldrbeq	r4, [r5, #0]
 801fb80:	1c85      	addeq	r5, r0, #2
 801fb82:	e7ec      	b.n	801fb5e <_strtoul_l.isra.0+0x22>
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d1f6      	bne.n	801fb76 <_strtoul_l.isra.0+0x3a>
 801fb88:	2c30      	cmp	r4, #48	@ 0x30
 801fb8a:	bf14      	ite	ne
 801fb8c:	230a      	movne	r3, #10
 801fb8e:	2308      	moveq	r3, #8
 801fb90:	f04f 38ff 	mov.w	r8, #4294967295
 801fb94:	2600      	movs	r6, #0
 801fb96:	fbb8 f8f3 	udiv	r8, r8, r3
 801fb9a:	fb03 f908 	mul.w	r9, r3, r8
 801fb9e:	ea6f 0909 	mvn.w	r9, r9
 801fba2:	4630      	mov	r0, r6
 801fba4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801fba8:	f1bc 0f09 	cmp.w	ip, #9
 801fbac:	d810      	bhi.n	801fbd0 <_strtoul_l.isra.0+0x94>
 801fbae:	4664      	mov	r4, ip
 801fbb0:	42a3      	cmp	r3, r4
 801fbb2:	dd1e      	ble.n	801fbf2 <_strtoul_l.isra.0+0xb6>
 801fbb4:	f1b6 3fff 	cmp.w	r6, #4294967295
 801fbb8:	d007      	beq.n	801fbca <_strtoul_l.isra.0+0x8e>
 801fbba:	4580      	cmp	r8, r0
 801fbbc:	d316      	bcc.n	801fbec <_strtoul_l.isra.0+0xb0>
 801fbbe:	d101      	bne.n	801fbc4 <_strtoul_l.isra.0+0x88>
 801fbc0:	45a1      	cmp	r9, r4
 801fbc2:	db13      	blt.n	801fbec <_strtoul_l.isra.0+0xb0>
 801fbc4:	fb00 4003 	mla	r0, r0, r3, r4
 801fbc8:	2601      	movs	r6, #1
 801fbca:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fbce:	e7e9      	b.n	801fba4 <_strtoul_l.isra.0+0x68>
 801fbd0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801fbd4:	f1bc 0f19 	cmp.w	ip, #25
 801fbd8:	d801      	bhi.n	801fbde <_strtoul_l.isra.0+0xa2>
 801fbda:	3c37      	subs	r4, #55	@ 0x37
 801fbdc:	e7e8      	b.n	801fbb0 <_strtoul_l.isra.0+0x74>
 801fbde:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801fbe2:	f1bc 0f19 	cmp.w	ip, #25
 801fbe6:	d804      	bhi.n	801fbf2 <_strtoul_l.isra.0+0xb6>
 801fbe8:	3c57      	subs	r4, #87	@ 0x57
 801fbea:	e7e1      	b.n	801fbb0 <_strtoul_l.isra.0+0x74>
 801fbec:	f04f 36ff 	mov.w	r6, #4294967295
 801fbf0:	e7eb      	b.n	801fbca <_strtoul_l.isra.0+0x8e>
 801fbf2:	1c73      	adds	r3, r6, #1
 801fbf4:	d106      	bne.n	801fc04 <_strtoul_l.isra.0+0xc8>
 801fbf6:	2322      	movs	r3, #34	@ 0x22
 801fbf8:	f8ce 3000 	str.w	r3, [lr]
 801fbfc:	4630      	mov	r0, r6
 801fbfe:	b932      	cbnz	r2, 801fc0e <_strtoul_l.isra.0+0xd2>
 801fc00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fc04:	b107      	cbz	r7, 801fc08 <_strtoul_l.isra.0+0xcc>
 801fc06:	4240      	negs	r0, r0
 801fc08:	2a00      	cmp	r2, #0
 801fc0a:	d0f9      	beq.n	801fc00 <_strtoul_l.isra.0+0xc4>
 801fc0c:	b106      	cbz	r6, 801fc10 <_strtoul_l.isra.0+0xd4>
 801fc0e:	1e69      	subs	r1, r5, #1
 801fc10:	6011      	str	r1, [r2, #0]
 801fc12:	e7f5      	b.n	801fc00 <_strtoul_l.isra.0+0xc4>
 801fc14:	080227c9 	.word	0x080227c9

0801fc18 <_strtoul_r>:
 801fc18:	f7ff bf90 	b.w	801fb3c <_strtoul_l.isra.0>

0801fc1c <__ascii_wctomb>:
 801fc1c:	4603      	mov	r3, r0
 801fc1e:	4608      	mov	r0, r1
 801fc20:	b141      	cbz	r1, 801fc34 <__ascii_wctomb+0x18>
 801fc22:	2aff      	cmp	r2, #255	@ 0xff
 801fc24:	d904      	bls.n	801fc30 <__ascii_wctomb+0x14>
 801fc26:	228a      	movs	r2, #138	@ 0x8a
 801fc28:	601a      	str	r2, [r3, #0]
 801fc2a:	f04f 30ff 	mov.w	r0, #4294967295
 801fc2e:	4770      	bx	lr
 801fc30:	700a      	strb	r2, [r1, #0]
 801fc32:	2001      	movs	r0, #1
 801fc34:	4770      	bx	lr

0801fc36 <_raise_r>:
 801fc36:	291f      	cmp	r1, #31
 801fc38:	b538      	push	{r3, r4, r5, lr}
 801fc3a:	4605      	mov	r5, r0
 801fc3c:	460c      	mov	r4, r1
 801fc3e:	d904      	bls.n	801fc4a <_raise_r+0x14>
 801fc40:	2316      	movs	r3, #22
 801fc42:	6003      	str	r3, [r0, #0]
 801fc44:	f04f 30ff 	mov.w	r0, #4294967295
 801fc48:	bd38      	pop	{r3, r4, r5, pc}
 801fc4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fc4c:	b112      	cbz	r2, 801fc54 <_raise_r+0x1e>
 801fc4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fc52:	b94b      	cbnz	r3, 801fc68 <_raise_r+0x32>
 801fc54:	4628      	mov	r0, r5
 801fc56:	f000 f831 	bl	801fcbc <_getpid_r>
 801fc5a:	4622      	mov	r2, r4
 801fc5c:	4601      	mov	r1, r0
 801fc5e:	4628      	mov	r0, r5
 801fc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc64:	f000 b818 	b.w	801fc98 <_kill_r>
 801fc68:	2b01      	cmp	r3, #1
 801fc6a:	d00a      	beq.n	801fc82 <_raise_r+0x4c>
 801fc6c:	1c59      	adds	r1, r3, #1
 801fc6e:	d103      	bne.n	801fc78 <_raise_r+0x42>
 801fc70:	2316      	movs	r3, #22
 801fc72:	6003      	str	r3, [r0, #0]
 801fc74:	2001      	movs	r0, #1
 801fc76:	e7e7      	b.n	801fc48 <_raise_r+0x12>
 801fc78:	2100      	movs	r1, #0
 801fc7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fc7e:	4620      	mov	r0, r4
 801fc80:	4798      	blx	r3
 801fc82:	2000      	movs	r0, #0
 801fc84:	e7e0      	b.n	801fc48 <_raise_r+0x12>
	...

0801fc88 <raise>:
 801fc88:	4b02      	ldr	r3, [pc, #8]	@ (801fc94 <raise+0xc>)
 801fc8a:	4601      	mov	r1, r0
 801fc8c:	6818      	ldr	r0, [r3, #0]
 801fc8e:	f7ff bfd2 	b.w	801fc36 <_raise_r>
 801fc92:	bf00      	nop
 801fc94:	20000160 	.word	0x20000160

0801fc98 <_kill_r>:
 801fc98:	b538      	push	{r3, r4, r5, lr}
 801fc9a:	4d07      	ldr	r5, [pc, #28]	@ (801fcb8 <_kill_r+0x20>)
 801fc9c:	2300      	movs	r3, #0
 801fc9e:	4604      	mov	r4, r0
 801fca0:	4608      	mov	r0, r1
 801fca2:	4611      	mov	r1, r2
 801fca4:	602b      	str	r3, [r5, #0]
 801fca6:	f7eb f81f 	bl	800ace8 <_kill>
 801fcaa:	1c43      	adds	r3, r0, #1
 801fcac:	d102      	bne.n	801fcb4 <_kill_r+0x1c>
 801fcae:	682b      	ldr	r3, [r5, #0]
 801fcb0:	b103      	cbz	r3, 801fcb4 <_kill_r+0x1c>
 801fcb2:	6023      	str	r3, [r4, #0]
 801fcb4:	bd38      	pop	{r3, r4, r5, pc}
 801fcb6:	bf00      	nop
 801fcb8:	2000c41c 	.word	0x2000c41c

0801fcbc <_getpid_r>:
 801fcbc:	f7eb b80c 	b.w	800acd8 <_getpid>

0801fcc0 <_init>:
 801fcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcc2:	bf00      	nop
 801fcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcc6:	bc08      	pop	{r3}
 801fcc8:	469e      	mov	lr, r3
 801fcca:	4770      	bx	lr

0801fccc <_fini>:
 801fccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcce:	bf00      	nop
 801fcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcd2:	bc08      	pop	{r3}
 801fcd4:	469e      	mov	lr, r3
 801fcd6:	4770      	bx	lr
