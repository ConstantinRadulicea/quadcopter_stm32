
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fbd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0801fd60  0801fd60  00020d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022990  08022990  00024320  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08022990  08022990  00023990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022998  08022998  00024320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022998  08022998  00023998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802299c  0802299c  0002399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000320  20000000  080229a0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00024320  2**0
                  CONTENTS
 10 .bss          0000c120  20000320  20000320  00024320  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000c440  2000c440  00024320  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00024320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a68c  00000000  00000000  00024350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000881d  00000000  00000000  0005e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e50  00000000  00000000  00067200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000023a3  00000000  00000000  0006a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a7a8  00000000  00000000  0006c3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a2e0  00000000  00000000  00096b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc587  00000000  00000000  000d0e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ad402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de54  00000000  00000000  001ad448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001bb29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fd48 	.word	0x0801fd48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	0801fd48 	.word	0x0801fd48

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	ed87 0a02 	vstr	s0, [r7, #8]
 800104c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001050:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800105a:	2234      	movs	r2, #52	@ 0x34
 800105c:	2100      	movs	r1, #0
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f01b f872 	bl	801c148 <memset>

	fc->rate_gain = rate_gain;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	e000      	b.n	800107a <attitude_controller_init+0x3a>
        return;
 8001078:	bf00      	nop

}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09c      	sub	sp, #112	@ 0x70
 8001084:	af00      	add	r7, sp, #0
 8001086:	eeb0 6a40 	vmov.f32	s12, s0
 800108a:	eef0 6a60 	vmov.f32	s13, s1
 800108e:	eeb0 7a41 	vmov.f32	s14, s2
 8001092:	eef0 7a61 	vmov.f32	s15, s3
 8001096:	ed87 6a04 	vstr	s12, [r7, #16]
 800109a:	edc7 6a05 	vstr	s13, [r7, #20]
 800109e:	ed87 7a06 	vstr	s14, [r7, #24]
 80010a2:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fffc 	bl	80030a8 <quatnormalize>
 80010b0:	eeb0 6a40 	vmov.f32	s12, s0
 80010b4:	eef0 6a60 	vmov.f32	s13, s1
 80010b8:	eeb0 7a41 	vmov.f32	s14, s2
 80010bc:	eef0 7a61 	vmov.f32	s15, s3
 80010c0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010c4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010c8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010cc:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 ffdd 	bl	80030a8 <quatnormalize>
 80010ee:	eeb0 6a40 	vmov.f32	s12, s0
 80010f2:	eef0 6a60 	vmov.f32	s13, s1
 80010f6:	eeb0 7a41 	vmov.f32	s14, s2
 80010fa:	eef0 7a61 	vmov.f32	s15, s3
 80010fe:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 8001102:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 8001106:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 800110a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 800110e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ff8c 	bl	8003030 <quatconj>
 8001118:	eeb0 6a40 	vmov.f32	s12, s0
 800111c:	eef0 6a60 	vmov.f32	s13, s1
 8001120:	eeb0 7a41 	vmov.f32	s14, s2
 8001124:	eef0 7a61 	vmov.f32	s15, s3
 8001128:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800112c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001130:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001134:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001138:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f002 f86b 	bl	800321e <quatmultiply>
 8001148:	eeb0 6a40 	vmov.f32	s12, s0
 800114c:	eef0 6a60 	vmov.f32	s13, s1
 8001150:	eeb0 7a41 	vmov.f32	s14, s2
 8001154:	eef0 7a61 	vmov.f32	s15, s3
 8001158:	ed87 6a08 	vstr	s12, [r7, #32]
 800115c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001160:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001164:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f001 ff9b 	bl	80030a8 <quatnormalize>
 8001172:	eeb0 6a40 	vmov.f32	s12, s0
 8001176:	eef0 6a60 	vmov.f32	s13, s1
 800117a:	eeb0 7a41 	vmov.f32	s14, s2
 800117e:	eef0 7a61 	vmov.f32	s15, s3
 8001182:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001186:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800118a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800118e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001192:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001194:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001196:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119a:	ee06 0a10 	vmov	s12, r0
 800119e:	ee06 1a90 	vmov	s13, r1
 80011a2:	ee07 2a10 	vmov	s14, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a46 	vmov.f32	s0, s12
 80011ae:	eef0 0a66 	vmov.f32	s1, s13
 80011b2:	eeb0 1a47 	vmov.f32	s2, s14
 80011b6:	eef0 1a67 	vmov.f32	s3, s15
 80011ba:	3770      	adds	r7, #112	@ 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0a7      	sub	sp, #156	@ 0x9c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	61f8      	str	r0, [r7, #28]
 80011c8:	eeb0 6a40 	vmov.f32	s12, s0
 80011cc:	eef0 6a60 	vmov.f32	s13, s1
 80011d0:	eeb0 7a41 	vmov.f32	s14, s2
 80011d4:	eef0 7a61 	vmov.f32	s15, s3
 80011d8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011dc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011e0:	ed87 3a00 	vstr	s6, [r7]
 80011e4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011e8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011ec:	ed87 7a05 	vstr	s14, [r7, #20]
 80011f0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 81b0 	beq.w	800155c <attitude_controller_angle_mode_update+0x39c>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001202:	eef1 7a67 	vneg.f32	s15, s15
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d505      	bpl.n	8001220 <attitude_controller_angle_mode_update+0x60>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	eef1 7a67 	vneg.f32	s15, s15
 800121e:	e00f      	b.n	8001240 <attitude_controller_angle_mode_update+0x80>
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	edd3 7a05 	vldr	s15, [r3, #20]
 8001226:	ed97 7a02 	vldr	s14, [r7, #8]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd03      	ble.n	800123c <attitude_controller_angle_mode_update+0x7c>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	edd3 7a05 	vldr	s15, [r3, #20]
 800123a:	e001      	b.n	8001240 <attitude_controller_angle_mode_update+0x80>
 800123c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001240:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	edd3 7a05 	vldr	s15, [r3, #20]
 800124a:	eef1 7a67 	vneg.f32	s15, s15
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d505      	bpl.n	8001268 <attitude_controller_angle_mode_update+0xa8>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	eef1 7a67 	vneg.f32	s15, s15
 8001266:	e00f      	b.n	8001288 <attitude_controller_angle_mode_update+0xc8>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	edd3 7a05 	vldr	s15, [r3, #20]
 800126e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd03      	ble.n	8001284 <attitude_controller_angle_mode_update+0xc4>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001282:	e001      	b.n	8001288 <attitude_controller_angle_mode_update+0xc8>
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001292:	eef1 7a67 	vneg.f32	s15, s15
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d505      	bpl.n	80012b0 <attitude_controller_angle_mode_update+0xf0>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	eef1 7a67 	vneg.f32	s15, s15
 80012ae:	e00f      	b.n	80012d0 <attitude_controller_angle_mode_update+0x110>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b6:	ed97 7a00 	vldr	s14, [r7]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd03      	ble.n	80012cc <attitude_controller_angle_mode_update+0x10c>
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ca:	e001      	b.n	80012d0 <attitude_controller_angle_mode_update+0x110>
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	461c      	mov	r4, r3
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 8001308:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f9ff 	bl	8003710 <angle2quat>
 8001312:	eeb0 6a40 	vmov.f32	s12, s0
 8001316:	eef0 6a60 	vmov.f32	s13, s1
 800131a:	eeb0 7a41 	vmov.f32	s14, s2
 800131e:	eef0 7a61 	vmov.f32	s15, s3
 8001322:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001326:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800132a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800132e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001332:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	673b      	str	r3, [r7, #112]	@ 0x70
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	677b      	str	r3, [r7, #116]	@ 0x74
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800134a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800134e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f001 ff62 	bl	800321e <quatmultiply>
 800135a:	eeb0 6a40 	vmov.f32	s12, s0
 800135e:	eef0 6a60 	vmov.f32	s13, s1
 8001362:	eeb0 7a41 	vmov.f32	s14, s2
 8001366:	eef0 7a61 	vmov.f32	s15, s3
 800136a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800136e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001372:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001376:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fb2c 	bl	80039e0 <quat_error>
 8001388:	eeb0 6a40 	vmov.f32	s12, s0
 800138c:	eef0 6a60 	vmov.f32	s13, s1
 8001390:	eeb0 7a41 	vmov.f32	s14, s2
 8001394:	eef0 7a61 	vmov.f32	s15, s3
 8001398:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800139c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 80013a0:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 80013a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 80013a8:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 80013ac:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013b0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80013b4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013b8:	eeb0 0a46 	vmov.f32	s0, s12
 80013bc:	eef0 0a66 	vmov.f32	s1, s13
 80013c0:	eeb0 1a47 	vmov.f32	s2, s14
 80013c4:	eef0 1a67 	vmov.f32	s3, s15
 80013c8:	f7ff fe5a 	bl	8001080 <quat_remove_yaw>
 80013cc:	eeb0 6a40 	vmov.f32	s12, s0
 80013d0:	eef0 6a60 	vmov.f32	s13, s1
 80013d4:	eeb0 7a41 	vmov.f32	s14, s2
 80013d8:	eef0 7a61 	vmov.f32	s15, s3
 80013dc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013e0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013e4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013ec:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013f0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013fc:	eeb0 0a46 	vmov.f32	s0, s12
 8001400:	eef0 0a66 	vmov.f32	s1, s13
 8001404:	eeb0 1a47 	vmov.f32	s2, s14
 8001408:	eef0 1a67 	vmov.f32	s3, s15
 800140c:	f002 f8ca 	bl	80035a4 <quat2rotvec>
 8001410:	eef0 6a40 	vmov.f32	s13, s0
 8001414:	eeb0 7a60 	vmov.f32	s14, s1
 8001418:	eef0 7a41 	vmov.f32	s15, s2
 800141c:	edc7 6a08 	vstr	s13, [r7, #32]
 8001420:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001424:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles3D rotvec_err = quat2rotvec(error_q);

    rotvec_err.z = 0.0f;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 800142e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	edd3 7a04 	vldr	s15, [r3, #16]
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 8001442:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	edd3 7a04 	vldr	s15, [r3, #16]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	ed93 7a04 	vldr	s14, [r3, #16]
 800145c:	edd7 7a00 	vldr	s15, [r7]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	edd3 7a06 	vldr	s15, [r3, #24]
 8001476:	eef1 7a67 	vneg.f32	s15, s15
 800147a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	d505      	bpl.n	8001490 <attitude_controller_angle_mode_update+0x2d0>
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	edd3 7a06 	vldr	s15, [r3, #24]
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	e011      	b.n	80014b4 <attitude_controller_angle_mode_update+0x2f4>
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	edd3 7a06 	vldr	s15, [r3, #24]
 800149c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd03      	ble.n	80014ae <attitude_controller_angle_mode_update+0x2ee>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ac:	e002      	b.n	80014b4 <attitude_controller_angle_mode_update+0x2f4>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014c6:	eef1 7a67 	vneg.f32	s15, s15
 80014ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d505      	bpl.n	80014e0 <attitude_controller_angle_mode_update+0x320>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014da:	eef1 7a67 	vneg.f32	s15, s15
 80014de:	e011      	b.n	8001504 <attitude_controller_angle_mode_update+0x344>
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd03      	ble.n	80014fe <attitude_controller_angle_mode_update+0x33e>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014fc:	e002      	b.n	8001504 <attitude_controller_angle_mode_update+0x344>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	edd3 7a06 	vldr	s15, [r3, #24]
 8001516:	eef1 7a67 	vneg.f32	s15, s15
 800151a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d505      	bpl.n	8001530 <attitude_controller_angle_mode_update+0x370>
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	edd3 7a06 	vldr	s15, [r3, #24]
 800152a:	eef1 7a67 	vneg.f32	s15, s15
 800152e:	e011      	b.n	8001554 <attitude_controller_angle_mode_update+0x394>
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	edd3 7a06 	vldr	s15, [r3, #24]
 800153c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	dd03      	ble.n	800154e <attitude_controller_angle_mode_update+0x38e>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	edd3 7a06 	vldr	s15, [r3, #24]
 800154c:	e002      	b.n	8001554 <attitude_controller_angle_mode_update+0x394>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800155a:	e000      	b.n	800155e <attitude_controller_angle_mode_update+0x39e>
        return;
 800155c:	bf00      	nop

}
 800155e:	379c      	adds	r7, #156	@ 0x9c
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e000      	b.n	80015a6 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 80015a4:	bf00      	nop
	}
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 80015b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	460a      	mov	r2, r1
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4613      	mov	r3, r2
 80015d0:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	4053      	eors	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e014      	b.n	8001614 <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da0a      	bge.n	8001608 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b21b      	sxth	r3, r3
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	e002      	b.n	800160e <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d9e7      	bls.n	80015ea <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 800161a:	88fb      	ldrh	r3, [r7, #6]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00d      	b.n	8001658 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffba 	bl	80015c2 <crc16_ccitt_add>
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3ed      	bcc.n	800163c <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 8001660:	89fb      	ldrh	r3, [r7, #14]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	0000      	movs	r0, r0
 800166c:	0000      	movs	r0, r0
	...

08001670 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	ed87 0a02 	vstr	s0, [r7, #8]
 800167c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001730 <pt1_filter_init_lowpass+0xc0>
 8001688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d908      	bls.n	80016a4 <pt1_filter_init_lowpass+0x34>
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001730 <pt1_filter_init_lowpass+0xc0>
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d804      	bhi.n	80016ae <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e02b      	b.n	8001706 <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 80016ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe ff52 	bl	8000568 <__aeabi_f2d>
 80016c4:	a318      	add	r3, pc, #96	@ (adr r3, 8001728 <pt1_filter_init_lowpass+0xb8>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ffa5 	bl	8000618 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	4917      	ldr	r1, [pc, #92]	@ (8001734 <pt1_filter_init_lowpass+0xc4>)
 80016d8:	f7ff f8c8 	bl	800086c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa90 	bl	8000c08 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80016fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	54442d18 	.word	0x54442d18
 800172c:	401921fb 	.word	0x401921fb
 8001730:	34000000 	.word	0x34000000
 8001734:	3ff00000 	.word	0x3ff00000

08001738 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	ed93 7a03 	vldr	s14, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a03 	vldr	s15, [r3, #12]
 8001756:	ed97 6a00 	vldr	s12, [r7]
 800175a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	ee07 3a90 	vmov	s15, r3
}
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80017aa:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80017b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff59 	bl	8001670 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3310      	adds	r3, #16
 80017c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff50 	bl	8001670 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0410 	add.w	r4, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	ed97 0a00 	vldr	s0, [r7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff9b 	bl	8001738 <pt1_filter_apply_lowpass>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ff94 	bl	8001738 <pt1_filter_apply_lowpass>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
}
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffaa 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3310      	adds	r3, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffa5 	bl	8001782 <pt1_filter_reset>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <flight_control_loop_arm_esc>:
// https://articulatedrobotics.xyz/tools/rotation-calculator/
//static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };	// angle2quat();
static quaternion ground_default_position_q = { .w = 0.999698f, .x = 0.007852f, .y = 0.023297f, .z = 0.000183f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800184e:	f04f 31ff 	mov.w	r1, #4294967295
 8001852:	4618      	mov	r0, r3
 8001854:	f014 fade 	bl	8015e14 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800186c:	2300      	movs	r3, #0
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	f014 f84d 	bl	8015910 <xQueueGenericSend>
	#endif
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	4618      	mov	r0, r3
 8001892:	f014 fabf 	bl	8015e14 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018aa:	2300      	movs	r3, #0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	f014 f82e 	bl	8015910 <xQueueGenericSend>
	#endif
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	4618      	mov	r0, r3
 80018d0:	f014 faa0 	bl	8015e14 <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018da:	f343 0300 	sbfx	r3, r3, #0, #1
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018e8:	2300      	movs	r3, #0
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	f014 f80f 	bl	8015910 <xQueueGenericSend>
	#endif
	return flag;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 8001904:	f240 4204 	movw	r2, #1028	@ 0x404
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f01a fc1c 	bl	801c148 <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b30 <flight_control_loop_init+0x234>
 8001916:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b30 <flight_control_loop_init+0x234>
 800191a:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b30 <flight_control_loop_init+0x234>
 800191e:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b34 <flight_control_loop_init+0x238>
 8001922:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f8a0 	bl	8003a6c <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <flight_control_loop_init+0x23c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	4b80      	ldr	r3, [pc, #512]	@ (8001b38 <flight_control_loop_init+0x23c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <flight_control_loop_init+0x23c>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	edd7 6a05 	vldr	s13, [r7, #20]
 8001944:	ed97 7a06 	vldr	s14, [r7, #24]
 8001948:	edd7 7a07 	vldr	s15, [r7, #28]
 800194c:	497b      	ldr	r1, [pc, #492]	@ (8001b3c <flight_control_loop_init+0x240>)
 800194e:	eeb0 0a66 	vmov.f32	s0, s13
 8001952:	eef0 0a47 	vmov.f32	s1, s14
 8001956:	eeb0 1a67 	vmov.f32	s2, s15
 800195a:	4610      	mov	r0, r2
 800195c:	f002 fade 	bl	8003f1c <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4b77      	ldr	r3, [pc, #476]	@ (8001b40 <flight_control_loop_init+0x244>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	4b75      	ldr	r3, [pc, #468]	@ (8001b40 <flight_control_loop_init+0x244>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b74      	ldr	r3, [pc, #464]	@ (8001b40 <flight_control_loop_init+0x244>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	edd7 6a02 	vldr	s13, [r7, #8]
 8001978:	ed97 7a03 	vldr	s14, [r7, #12]
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	eef0 0a47 	vmov.f32	s1, s14
 8001988:	eeb0 1a67 	vmov.f32	s2, s15
 800198c:	4610      	mov	r0, r2
 800198e:	f002 faa3 	bl	8003ed8 <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4b6b      	ldr	r3, [pc, #428]	@ (8001b44 <flight_control_loop_init+0x248>)
 8001996:	ed93 6a00 	vldr	s12, [r3]
 800199a:	edd3 6a01 	vldr	s13, [r3, #4]
 800199e:	ed93 7a02 	vldr	s14, [r3, #8]
 80019a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019a6:	eeb0 0a46 	vmov.f32	s0, s12
 80019aa:	eef0 0a66 	vmov.f32	s1, s13
 80019ae:	eeb0 1a47 	vmov.f32	s2, s14
 80019b2:	eef0 1a67 	vmov.f32	s3, s15
 80019b6:	4610      	mov	r0, r2
 80019b8:	f002 f8e8 	bl	8003b8c <imu_set_leveled_attitude>

	attitude_controller_init(
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80019c2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001b48 <flight_control_loop_init+0x24c>
 80019c6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001b4c <flight_control_loop_init+0x250>
 80019ca:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb36 	bl	8001040 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019da:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8001b50 <flight_control_loop_init+0x254>
 80019de:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019e2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b30 <flight_control_loop_init+0x234>
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f87e 	bl	8004ae8 <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019f2:	ed9f 2a58 	vldr	s4, [pc, #352]	@ 8001b54 <flight_control_loop_init+0x258>
 80019f6:	eddf 1a58 	vldr	s3, [pc, #352]	@ 8001b58 <flight_control_loop_init+0x25c>
 80019fa:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8001b54 <flight_control_loop_init+0x258>
 80019fe:	eef0 0a0c 	vmov.f32	s1, #12	@ 0x40600000  3.5
 8001a02:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001b5c <flight_control_loop_init+0x260>
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f8fc 	bl	8004c04 <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a12:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a16:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8001b58 <flight_control_loop_init+0x25c>
 8001a1a:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a1e:	eef0 0a0c 	vmov.f32	s1, #12	@ 0x40600000  3.5
 8001a22:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8001b5c <flight_control_loop_init+0x260>
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f91e 	bl	8004c68 <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a32:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a36:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8001b60 <flight_control_loop_init+0x264>
 8001a3a:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a3e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001a42:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f940 	bl	8004ccc <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a52:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a56:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a5a:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001b4c <flight_control_loop_init+0x250>
 8001a5e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001a62:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001b50 <flight_control_loop_init+0x254>
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fc45 	bl	80052f8 <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a74:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a78:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a7c:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001b4c <flight_control_loop_init+0x250>
 8001a80:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001a84:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001b50 <flight_control_loop_init+0x254>
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fc91 	bl	80053b2 <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a96:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a9a:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a9e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001b4c <flight_control_loop_init+0x250>
 8001aa2:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001aa6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001b50 <flight_control_loop_init+0x254>
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fcdf 	bl	8005470 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001ab8:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001b64 <flight_control_loop_init+0x268>
 8001abc:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001b54 <flight_control_loop_init+0x258>
 8001ac0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001ac4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001ac8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001b50 <flight_control_loop_init+0x254>
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fd2e 	bl	8005530 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f013 ff02 	bl	80158de <xQueueCreateMutex>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f013 fefb 	bl	80158de <xQueueCreateMutex>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001af0:	2001      	movs	r0, #1
 8001af2:	f013 fef4 	bl	80158de <xQueueCreateMutex>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001afe:	2001      	movs	r0, #1
 8001b00:	f013 feed 	bl	80158de <xQueueCreateMutex>
 8001b04:	4602      	mov	r2, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f013 fee6 	bl	80158de <xQueueCreateMutex>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f013 fedf 	bl	80158de <xQueueCreateMutex>
 8001b20:	4602      	mov	r2, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	447a0000 	.word	0x447a0000
 8001b34:	42a00000 	.word	0x42a00000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	20000030 	.word	0x20000030
 8001b44:	2000003c 	.word	0x2000003c
 8001b48:	40a78d36 	.word	0x40a78d36
 8001b4c:	3f1c61aa 	.word	0x3f1c61aa
 8001b50:	42200000 	.word	0x42200000
 8001b54:	00000000 	.word	0x00000000
 8001b58:	3f3f7cd0 	.word	0x3f3f7cd0
 8001b5c:	3f19999a 	.word	0x3f19999a
 8001b60:	3e5f66f3 	.word	0x3e5f66f3
 8001b64:	42c80000 	.word	0x42c80000
 8001b68:	3d75c28f 	.word	0x3d75c28f

08001b6c <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b09b      	sub	sp, #108	@ 0x6c
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	4618      	mov	r0, r3
 8001b92:	f014 f93f 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ba0:	f103 0408 	add.w	r4, r3, #8
 8001ba4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ba8:	1d1a      	adds	r2, r3, #4
 8001baa:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001bae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	f003 fd3b 	bl	8005630 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f013 fea3 	bl	8015910 <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f014 f91d 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001be0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001be4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001be8:	f002 f9e6 	bl	8003fb8 <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f013 fe8a 	bl	8015910 <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001c02:	f04f 31ff 	mov.w	r1, #4294967295
 8001c06:	4618      	mov	r0, r3
 8001c08:	f014 f904 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001c12:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001c16:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001c1a:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001c1e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001c22:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c26:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c2a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c2e:	eeb0 3a64 	vmov.f32	s6, s9
 8001c32:	eef0 2a45 	vmov.f32	s5, s10
 8001c36:	eeb0 2a65 	vmov.f32	s4, s11
 8001c3a:	eeb0 0a46 	vmov.f32	s0, s12
 8001c3e:	eef0 0a66 	vmov.f32	s1, s13
 8001c42:	eeb0 1a47 	vmov.f32	s2, s14
 8001c46:	eef0 1a67 	vmov.f32	s3, s15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fab8 	bl	80011c0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	f107 021c 	add.w	r2, r7, #28
 8001c70:	f107 0120 	add.w	r1, r7, #32
 8001c74:	f7ff fc76 	bl	8001564 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	f013 fe44 	bl	8015910 <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f014 f8b5 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001caa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001cae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001dd4 <flight_control_loop_tick+0x268>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd1e      	ble.n	8001cfa <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001cc2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cc6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cca:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001cce:	ed97 6a08 	vldr	s12, [r7, #32]
 8001cd2:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cd6:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cda:	eef0 2a45 	vmov.f32	s5, s10
 8001cde:	eeb0 2a65 	vmov.f32	s4, s11
 8001ce2:	eef0 1a46 	vmov.f32	s3, s12
 8001ce6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cea:	eef0 0a47 	vmov.f32	s1, s14
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f81c 	bl	8004d30 <rate_controller_update>
 8001cf8:	e005      	b.n	8001d06 <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 f9a3 	bl	800504c <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	f107 0114 	add.w	r1, r7, #20
 8001d18:	f003 f9ec 	bl	80050f4 <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	f013 fdf2 	bl	8015910 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295
 8001d36:	4618      	mov	r0, r3
 8001d38:	f014 f86c 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fdbd 	bl	80018bc <flight_control_loop_are_esc_armed>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d018      	beq.n	8001d7a <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d48:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d50:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d54:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d5e:	4618      	mov	r0, r3
 8001d60:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001dd4 <flight_control_loop_tick+0x268>
 8001d64:	eef0 1a46 	vmov.f32	s3, s12
 8001d68:	eeb0 1a66 	vmov.f32	s2, s13
 8001d6c:	eef0 0a47 	vmov.f32	s1, s14
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	f002 fbbe 	bl	80044f4 <motor_mixer_quad_x>
 8001d78:	e010      	b.n	8001d9c <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d7e:	e00a      	b.n	8001d96 <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d84:	33ec      	adds	r3, #236	@ 0xec
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d92:	3301      	adds	r3, #1
 8001d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	ddf1      	ble.n	8001d80 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f013 fda2 	bl	8015910 <xQueueGenericSend>
#endif

}
 8001dcc:	bf00      	nop
 8001dce:	3764      	adds	r7, #100	@ 0x64
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	3d6147ae 	.word	0x3d6147ae

08001dd8 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6178      	str	r0, [r7, #20]
 8001de0:	eef0 6a40 	vmov.f32	s13, s0
 8001de4:	eeb0 7a60 	vmov.f32	s14, s1
 8001de8:	eef0 7a41 	vmov.f32	s15, s2
 8001dec:	edc7 1a01 	vstr	s3, [r7, #4]
 8001df0:	edc7 6a02 	vstr	s13, [r7, #8]
 8001df4:	ed87 7a03 	vstr	s14, [r7, #12]
 8001df8:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e00:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d501      	bpl.n	8001e12 <flight_control_loop_update_rc_control+0x3a>
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e10:	e00c      	b.n	8001e2c <flight_control_loop_update_rc_control+0x54>
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	dd02      	ble.n	8001e2a <flight_control_loop_update_rc_control+0x52>
 8001e24:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e28:	e000      	b.n	8001e2c <flight_control_loop_update_rc_control+0x54>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d501      	bpl.n	8001e44 <flight_control_loop_update_rc_control+0x6c>
 8001e40:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e42:	e00c      	b.n	8001e5e <flight_control_loop_update_rc_control+0x86>
 8001e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dd02      	ble.n	8001e5c <flight_control_loop_update_rc_control+0x84>
 8001e56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e5a:	e000      	b.n	8001e5e <flight_control_loop_update_rc_control+0x86>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e64:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d501      	bpl.n	8001e76 <flight_control_loop_update_rc_control+0x9e>
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e74:	e00c      	b.n	8001e90 <flight_control_loop_update_rc_control+0xb8>
 8001e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	dd02      	ble.n	8001e8e <flight_control_loop_update_rc_control+0xb6>
 8001e88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e8c:	e000      	b.n	8001e90 <flight_control_loop_update_rc_control+0xb8>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d502      	bpl.n	8001ea6 <flight_control_loop_update_rc_control+0xce>
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e00c      	b.n	8001ec0 <flight_control_loop_update_rc_control+0xe8>
 8001ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd02      	ble.n	8001ebe <flight_control_loop_update_rc_control+0xe6>
 8001eb8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ebc:	e000      	b.n	8001ec0 <flight_control_loop_update_rc_control+0xe8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f013 ffa1 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001edc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ee4:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ee8:	eeb0 1a66 	vmov.f32	s2, s13
 8001eec:	eef0 0a47 	vmov.f32	s1, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fb77 	bl	80055e8 <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001f00:	2300      	movs	r3, #0
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	f013 fd03 	bl	8015910 <xQueueGenericSend>
#endif
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	bf800000 	.word	0xbf800000

08001f18 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	61f8      	str	r0, [r7, #28]
 8001f20:	eeb0 5a40 	vmov.f32	s10, s0
 8001f24:	eef0 5a60 	vmov.f32	s11, s1
 8001f28:	eeb0 6a41 	vmov.f32	s12, s2
 8001f2c:	eef0 6a61 	vmov.f32	s13, s3
 8001f30:	eeb0 7a42 	vmov.f32	s14, s4
 8001f34:	eef0 7a62 	vmov.f32	s15, s5
 8001f38:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f3c:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f40:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f44:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f48:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f4c:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f013 ff5a 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f66:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f6a:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f6e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7a:	eef0 1a45 	vmov.f32	s3, s10
 8001f7e:	eeb0 2a65 	vmov.f32	s4, s11
 8001f82:	eef0 2a46 	vmov.f32	s5, s12
 8001f86:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8a:	eef0 0a47 	vmov.f32	s1, s14
 8001f8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 ff5f 	bl	8003e56 <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f013 fcb4 	bl	8015910 <xQueueGenericSend>
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f013 ff25 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e00d      	b.n	8001fec <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	32ec      	adds	r2, #236	@ 0xec
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	440a      	add	r2, r1
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d9ee      	bls.n	8001fd0 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f013 fc87 	bl	8015910 <xQueueGenericSend>
#endif
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <rate_controller_roll_pid_set_fn>:
static const char rate_controller_yaw_pid[] = "rate_controller_yaw_pid";
static const char level_p[] = "level_p";
static const char max_angle[] = "max_angle";

/*=================================================================================*/
int32_t rate_controller_roll_pid_set_fn(int32_t argc, char** argv){
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	if(argc < 5){return -1;}
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b04      	cmp	r3, #4
 800201a:	dc02      	bgt.n	8002022 <rate_controller_roll_pid_set_fn+0x16>
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	e08e      	b.n	8002140 <rate_controller_roll_pid_set_fn+0x134>
	int32_t argc_index = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002026:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002028:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	4618      	mov	r0, r3
 8002032:	f013 feef 	bl	8015e14 <xQueueSemaphoreTake>
			#endif
				int error_detected = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
				float kp, ki, kd, max_integral_error, kff;
				if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f107 021c 	add.w	r2, r7, #28
 8002048:	4940      	ldr	r1, [pc, #256]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 800204a:	4618      	mov	r0, r3
 800204c:	f019 ff20 	bl	801be90 <siscanf>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <rate_controller_roll_pid_set_fn+0x4e>
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	3301      	adds	r3, #1
 800205e:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f107 0218 	add.w	r2, r7, #24
 800206e:	4937      	ldr	r1, [pc, #220]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 8002070:	4618      	mov	r0, r3
 8002072:	f019 ff0d 	bl	801be90 <siscanf>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <rate_controller_roll_pid_set_fn+0x74>
 800207c:	2301      	movs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	3301      	adds	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f107 0214 	add.w	r2, r7, #20
 8002094:	492d      	ldr	r1, [pc, #180]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 8002096:	4618      	mov	r0, r3
 8002098:	f019 fefa 	bl	801be90 <siscanf>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <rate_controller_roll_pid_set_fn+0x9a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	3301      	adds	r3, #1
 80020aa:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f107 0210 	add.w	r2, r7, #16
 80020ba:	4924      	ldr	r1, [pc, #144]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f019 fee7 	bl	801be90 <siscanf>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d001      	beq.n	80020cc <rate_controller_roll_pid_set_fn+0xc0>
 80020c8:	2301      	movs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	3301      	adds	r3, #1
 80020d0:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kff) != 1) {error_detected = 1;}
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f107 020c 	add.w	r2, r7, #12
 80020e0:	491a      	ldr	r1, [pc, #104]	@ (800214c <rate_controller_roll_pid_set_fn+0x140>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f019 fed4 	bl	801be90 <siscanf>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <rate_controller_roll_pid_set_fn+0xe6>
 80020ee:	2301      	movs	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24

				if(error_detected == 0){
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d114      	bne.n	8002122 <rate_controller_roll_pid_set_fn+0x116>
					fcl.rate_controller.pid_roll.Kp = kp;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 80020fc:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
					fcl.rate_controller.pid_roll.Ki = ki;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002104:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
					fcl.rate_controller.pid_roll.Kd = kd;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 800210c:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
					fcl.rate_controller.pid_roll.integral_max_error = max_integral_error;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002114:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
					fcl.rate_controller.pid_roll_k_ff = kff;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 800211c:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
 8002120:	e005      	b.n	800212e <rate_controller_roll_pid_set_fn+0x122>
				}
				else{
					OUT_PRINTF("\r\n");
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <rate_controller_roll_pid_set_fn+0x144>)
 8002124:	f016 fc3c 	bl	80189a0 <usb_printf>
					OUT_PRINTF("ERROR: Parsing error\r\n");
 8002128:	480a      	ldr	r0, [pc, #40]	@ (8002154 <rate_controller_roll_pid_set_fn+0x148>)
 800212a:	f016 fc39 	bl	80189a0 <usb_printf>
				}
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreGive(fcl.rate_controller_mutex);
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <rate_controller_roll_pid_set_fn+0x13c>)
 8002130:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002134:	2300      	movs	r3, #0
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	f013 fbe9 	bl	8015910 <xQueueGenericSend>
			#endif
	return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3728      	adds	r7, #40	@ 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000131c 	.word	0x2000131c
 800214c:	0801fd60 	.word	0x0801fd60
 8002150:	0801fd64 	.word	0x0801fd64
 8002154:	0801fd68 	.word	0x0801fd68

08002158 <rate_controller_roll_pid_set_info_fn>:

int32_t rate_controller_roll_pid_set_info_fn(){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 800215c:	4804      	ldr	r0, [pc, #16]	@ (8002170 <rate_controller_roll_pid_set_info_fn+0x18>)
 800215e:	f016 fc1f 	bl	80189a0 <usb_printf>
	OUT_PRINTF("set %s (float)kp (float)ki (float)kd (float)max_integral_error (float)Kff\r\n", rate_controller_roll_pid);
 8002162:	4904      	ldr	r1, [pc, #16]	@ (8002174 <rate_controller_roll_pid_set_info_fn+0x1c>)
 8002164:	4804      	ldr	r0, [pc, #16]	@ (8002178 <rate_controller_roll_pid_set_info_fn+0x20>)
 8002166:	f016 fc1b 	bl	80189a0 <usb_printf>
	return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	0801fd64 	.word	0x0801fd64
 8002174:	08022054 	.word	0x08022054
 8002178:	0801fd80 	.word	0x0801fd80

0800217c <rate_controller_roll_pid_get_fn>:

int32_t rate_controller_roll_pid_get_fn(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", rate_controller_roll_pid);
 8002180:	492c      	ldr	r1, [pc, #176]	@ (8002234 <rate_controller_roll_pid_get_fn+0xb8>)
 8002182:	482d      	ldr	r0, [pc, #180]	@ (8002238 <rate_controller_roll_pid_get_fn+0xbc>)
 8002184:	f016 fc0c 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002188:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 800218a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800218e:	f04f 31ff 	mov.w	r1, #4294967295
 8002192:	4618      	mov	r0, r3
 8002194:	f013 fe3e 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("Kp: %f\r\n", fcl.rate_controller.pid_roll.Kp);
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 800219a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9e2 	bl	8000568 <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4825      	ldr	r0, [pc, #148]	@ (8002240 <rate_controller_roll_pid_get_fn+0xc4>)
 80021aa:	f016 fbf9 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Ki: %f\r\n", fcl.rate_controller.pid_roll.Ki);
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021b0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9d7 	bl	8000568 <__aeabi_f2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4821      	ldr	r0, [pc, #132]	@ (8002244 <rate_controller_roll_pid_get_fn+0xc8>)
 80021c0:	f016 fbee 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Kd: %f\r\n", fcl.rate_controller.pid_roll.Kd);
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021c6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9cc 	bl	8000568 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	481c      	ldr	r0, [pc, #112]	@ (8002248 <rate_controller_roll_pid_get_fn+0xcc>)
 80021d6:	f016 fbe3 	bl	80189a0 <usb_printf>
	OUT_PRINTF("integral_max_error: %f\r\n", fcl.rate_controller.pid_roll.integral_max_error);
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021dc:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9c1 	bl	8000568 <__aeabi_f2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4818      	ldr	r0, [pc, #96]	@ (800224c <rate_controller_roll_pid_get_fn+0xd0>)
 80021ec:	f016 fbd8 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Kff: %f\r\n", fcl.rate_controller.pid_roll_k_ff);
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 80021f2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f9b6 	bl	8000568 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4813      	ldr	r0, [pc, #76]	@ (8002250 <rate_controller_roll_pid_get_fn+0xd4>)
 8002202:	f016 fbcd 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Max Output: +/- %f\r\n", fcl.rate_controller.pid_roll.max_output);
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 8002208:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9ab 	bl	8000568 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	480f      	ldr	r0, [pc, #60]	@ (8002254 <rate_controller_roll_pid_get_fn+0xd8>)
 8002218:	f016 fbc2 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <rate_controller_roll_pid_get_fn+0xc0>)
 800221e:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002222:	2300      	movs	r3, #0
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	f013 fb72 	bl	8015910 <xQueueGenericSend>
#endif
	return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	08022054 	.word	0x08022054
 8002238:	0801fdcc 	.word	0x0801fdcc
 800223c:	2000131c 	.word	0x2000131c
 8002240:	0801fde0 	.word	0x0801fde0
 8002244:	0801fdec 	.word	0x0801fdec
 8002248:	0801fdf8 	.word	0x0801fdf8
 800224c:	0801fe04 	.word	0x0801fe04
 8002250:	0801fe20 	.word	0x0801fe20
 8002254:	0801fe2c 	.word	0x0801fe2c

08002258 <rate_controller_pitch_pid_set_fn>:
/*=================================================================================*/

/*=================================================================================*/
int32_t rate_controller_pitch_pid_set_fn(int32_t argc, char** argv){
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	if(argc < 5){return -1;}
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b04      	cmp	r3, #4
 8002266:	dc02      	bgt.n	800226e <rate_controller_pitch_pid_set_fn+0x16>
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	e08e      	b.n	800238c <rate_controller_pitch_pid_set_fn+0x134>
	int32_t argc_index = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002272:	4b48      	ldr	r3, [pc, #288]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002274:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	4618      	mov	r0, r3
 800227e:	f013 fdc9 	bl	8015e14 <xQueueSemaphoreTake>
			#endif
				int error_detected = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
				float kp, ki, kd, max_integral_error, kff;
				if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f107 021c 	add.w	r2, r7, #28
 8002294:	4940      	ldr	r1, [pc, #256]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 8002296:	4618      	mov	r0, r3
 8002298:	f019 fdfa 	bl	801be90 <siscanf>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <rate_controller_pitch_pid_set_fn+0x4e>
 80022a2:	2301      	movs	r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	3301      	adds	r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f107 0218 	add.w	r2, r7, #24
 80022ba:	4937      	ldr	r1, [pc, #220]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f019 fde7 	bl	801be90 <siscanf>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d001      	beq.n	80022cc <rate_controller_pitch_pid_set_fn+0x74>
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	3301      	adds	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f107 0214 	add.w	r2, r7, #20
 80022e0:	492d      	ldr	r1, [pc, #180]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f019 fdd4 	bl	801be90 <siscanf>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <rate_controller_pitch_pid_set_fn+0x9a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	3301      	adds	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f107 0210 	add.w	r2, r7, #16
 8002306:	4924      	ldr	r1, [pc, #144]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 8002308:	4618      	mov	r0, r3
 800230a:	f019 fdc1 	bl	801be90 <siscanf>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d001      	beq.n	8002318 <rate_controller_pitch_pid_set_fn+0xc0>
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3301      	adds	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kff) != 1) {error_detected = 1;}
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f107 020c 	add.w	r2, r7, #12
 800232c:	491a      	ldr	r1, [pc, #104]	@ (8002398 <rate_controller_pitch_pid_set_fn+0x140>)
 800232e:	4618      	mov	r0, r3
 8002330:	f019 fdae 	bl	801be90 <siscanf>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <rate_controller_pitch_pid_set_fn+0xe6>
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24

				if(error_detected == 0){
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d114      	bne.n	800236e <rate_controller_pitch_pid_set_fn+0x116>
					fcl.rate_controller.pid_pitch.Kp = kp;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002348:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
					fcl.rate_controller.pid_pitch.Ki = ki;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002350:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
					fcl.rate_controller.pid_pitch.Kd = kd;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	4a0f      	ldr	r2, [pc, #60]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002358:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
					fcl.rate_controller.pid_pitch.integral_max_error = max_integral_error;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002360:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
					fcl.rate_controller.pid_pitch_k_ff = kff;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a0b      	ldr	r2, [pc, #44]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 8002368:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
 800236c:	e005      	b.n	800237a <rate_controller_pitch_pid_set_fn+0x122>
				}
				else{
					OUT_PRINTF("\r\n");
 800236e:	480b      	ldr	r0, [pc, #44]	@ (800239c <rate_controller_pitch_pid_set_fn+0x144>)
 8002370:	f016 fb16 	bl	80189a0 <usb_printf>
					OUT_PRINTF("ERROR: Parsing error\r\n");
 8002374:	480a      	ldr	r0, [pc, #40]	@ (80023a0 <rate_controller_pitch_pid_set_fn+0x148>)
 8002376:	f016 fb13 	bl	80189a0 <usb_printf>
				}
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreGive(fcl.rate_controller_mutex);
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <rate_controller_pitch_pid_set_fn+0x13c>)
 800237c:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002380:	2300      	movs	r3, #0
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	f013 fac3 	bl	8015910 <xQueueGenericSend>
			#endif
	return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000131c 	.word	0x2000131c
 8002398:	0801fd60 	.word	0x0801fd60
 800239c:	0801fd64 	.word	0x0801fd64
 80023a0:	0801fd68 	.word	0x0801fd68

080023a4 <rate_controller_pitch_pid_set_info_fn>:

int32_t rate_controller_pitch_pid_set_info_fn(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 80023a8:	4804      	ldr	r0, [pc, #16]	@ (80023bc <rate_controller_pitch_pid_set_info_fn+0x18>)
 80023aa:	f016 faf9 	bl	80189a0 <usb_printf>
	OUT_PRINTF("set %s (float)kp (float)ki (float)kd (float)max_integral_error (float)Kff\r\n", rate_controller_pitch_pid);
 80023ae:	4904      	ldr	r1, [pc, #16]	@ (80023c0 <rate_controller_pitch_pid_set_info_fn+0x1c>)
 80023b0:	4804      	ldr	r0, [pc, #16]	@ (80023c4 <rate_controller_pitch_pid_set_info_fn+0x20>)
 80023b2:	f016 faf5 	bl	80189a0 <usb_printf>
	return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	0801fd64 	.word	0x0801fd64
 80023c0:	08022070 	.word	0x08022070
 80023c4:	0801fd80 	.word	0x0801fd80

080023c8 <rate_controller_pitch_pid_get_fn>:

int32_t rate_controller_pitch_pid_get_fn(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", rate_controller_pitch_pid);
 80023cc:	492c      	ldr	r1, [pc, #176]	@ (8002480 <rate_controller_pitch_pid_get_fn+0xb8>)
 80023ce:	482d      	ldr	r0, [pc, #180]	@ (8002484 <rate_controller_pitch_pid_get_fn+0xbc>)
 80023d0:	f016 fae6 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 80023d6:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 80023da:	f04f 31ff 	mov.w	r1, #4294967295
 80023de:	4618      	mov	r0, r3
 80023e0:	f013 fd18 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("Kp: %f\r\n", fcl.rate_controller.pid_pitch.Kp);
 80023e4:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 80023e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8bc 	bl	8000568 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4825      	ldr	r0, [pc, #148]	@ (800248c <rate_controller_pitch_pid_get_fn+0xc4>)
 80023f6:	f016 fad3 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Ki: %f\r\n", fcl.rate_controller.pid_pitch.Ki);
 80023fa:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 80023fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f8b1 	bl	8000568 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4821      	ldr	r0, [pc, #132]	@ (8002490 <rate_controller_pitch_pid_get_fn+0xc8>)
 800240c:	f016 fac8 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Kd: %f\r\n", fcl.rate_controller.pid_pitch.Kd);
 8002410:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 8002412:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f8a6 	bl	8000568 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	481c      	ldr	r0, [pc, #112]	@ (8002494 <rate_controller_pitch_pid_get_fn+0xcc>)
 8002422:	f016 fabd 	bl	80189a0 <usb_printf>
	OUT_PRINTF("integral_max_error: %f\r\n", fcl.rate_controller.pid_pitch.integral_max_error);
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 8002428:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f89b 	bl	8000568 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4818      	ldr	r0, [pc, #96]	@ (8002498 <rate_controller_pitch_pid_get_fn+0xd0>)
 8002438:	f016 fab2 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Kff: %f\r\n", fcl.rate_controller.pid_pitch_k_ff);
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 800243e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f890 	bl	8000568 <__aeabi_f2d>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4813      	ldr	r0, [pc, #76]	@ (800249c <rate_controller_pitch_pid_get_fn+0xd4>)
 800244e:	f016 faa7 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Max Output: +/- %f\r\n", fcl.rate_controller.pid_pitch.max_output);
 8002452:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 8002454:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f885 	bl	8000568 <__aeabi_f2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	480f      	ldr	r0, [pc, #60]	@ (80024a0 <rate_controller_pitch_pid_get_fn+0xd8>)
 8002464:	f016 fa9c 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8002468:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <rate_controller_pitch_pid_get_fn+0xc0>)
 800246a:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800246e:	2300      	movs	r3, #0
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	f013 fa4c 	bl	8015910 <xQueueGenericSend>
#endif
	return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	08022070 	.word	0x08022070
 8002484:	0801fdcc 	.word	0x0801fdcc
 8002488:	2000131c 	.word	0x2000131c
 800248c:	0801fde0 	.word	0x0801fde0
 8002490:	0801fdec 	.word	0x0801fdec
 8002494:	0801fdf8 	.word	0x0801fdf8
 8002498:	0801fe04 	.word	0x0801fe04
 800249c:	0801fe20 	.word	0x0801fe20
 80024a0:	0801fe2c 	.word	0x0801fe2c

080024a4 <rate_controller_yaw_pid_set_fn>:
/*=================================================================================*/

/*=================================================================================*/
int32_t rate_controller_yaw_pid_set_fn(int32_t argc, char** argv){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	if(argc < 5){return -1;}
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	dc02      	bgt.n	80024ba <rate_controller_yaw_pid_set_fn+0x16>
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
 80024b8:	e08e      	b.n	80025d8 <rate_controller_yaw_pid_set_fn+0x134>
	int32_t argc_index = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 80024be:	4b48      	ldr	r3, [pc, #288]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80024c0:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	4618      	mov	r0, r3
 80024ca:	f013 fca3 	bl	8015e14 <xQueueSemaphoreTake>
			#endif
				int error_detected = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
				float kp, ki, kd, max_integral_error, kff;
				if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f107 021c 	add.w	r2, r7, #28
 80024e0:	4940      	ldr	r1, [pc, #256]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f019 fcd4 	bl	801be90 <siscanf>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <rate_controller_yaw_pid_set_fn+0x4e>
 80024ee:	2301      	movs	r3, #1
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	3301      	adds	r3, #1
 80024f6:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f107 0218 	add.w	r2, r7, #24
 8002506:	4937      	ldr	r1, [pc, #220]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 8002508:	4618      	mov	r0, r3
 800250a:	f019 fcc1 	bl	801be90 <siscanf>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <rate_controller_yaw_pid_set_fn+0x74>
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	3301      	adds	r3, #1
 800251c:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f107 0214 	add.w	r2, r7, #20
 800252c:	492d      	ldr	r1, [pc, #180]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 800252e:	4618      	mov	r0, r3
 8002530:	f019 fcae 	bl	801be90 <siscanf>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <rate_controller_yaw_pid_set_fn+0x9a>
 800253a:	2301      	movs	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	3301      	adds	r3, #1
 8002542:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f107 0210 	add.w	r2, r7, #16
 8002552:	4924      	ldr	r1, [pc, #144]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 8002554:	4618      	mov	r0, r3
 8002556:	f019 fc9b 	bl	801be90 <siscanf>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <rate_controller_yaw_pid_set_fn+0xc0>
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
				argc_index++;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	3301      	adds	r3, #1
 8002568:	623b      	str	r3, [r7, #32]
				if(sscanf(argv[argc_index], "%f", &kff) != 1) {error_detected = 1;}
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4413      	add	r3, r2
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	491a      	ldr	r1, [pc, #104]	@ (80025e4 <rate_controller_yaw_pid_set_fn+0x140>)
 800257a:	4618      	mov	r0, r3
 800257c:	f019 fc88 	bl	801be90 <siscanf>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <rate_controller_yaw_pid_set_fn+0xe6>
 8002586:	2301      	movs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24

				if(error_detected == 0){
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d114      	bne.n	80025ba <rate_controller_yaw_pid_set_fn+0x116>
					fcl.rate_controller.pid_yaw.Kp = kp;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 8002594:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
					fcl.rate_controller.pid_yaw.Ki = ki;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 800259c:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
					fcl.rate_controller.pid_yaw.Kd = kd;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025a4:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
					fcl.rate_controller.pid_yaw.integral_max_error = max_integral_error;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025ac:	f8c2 31e8 	str.w	r3, [r2, #488]	@ 0x1e8
					fcl.rate_controller.pid_yaw_k_ff = kff;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025b4:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 80025b8:	e005      	b.n	80025c6 <rate_controller_yaw_pid_set_fn+0x122>
				}
				else{
					OUT_PRINTF("\r\n");
 80025ba:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <rate_controller_yaw_pid_set_fn+0x144>)
 80025bc:	f016 f9f0 	bl	80189a0 <usb_printf>
					OUT_PRINTF("ERROR: Parsing error\r\n");
 80025c0:	480a      	ldr	r0, [pc, #40]	@ (80025ec <rate_controller_yaw_pid_set_fn+0x148>)
 80025c2:	f016 f9ed 	bl	80189a0 <usb_printf>
				}
			#if MUTEX_ESP_ENABLE != 0
				xSemaphoreGive(fcl.rate_controller_mutex);
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <rate_controller_yaw_pid_set_fn+0x13c>)
 80025c8:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 80025cc:	2300      	movs	r3, #0
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	f013 f99d 	bl	8015910 <xQueueGenericSend>
			#endif
	return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000131c 	.word	0x2000131c
 80025e4:	0801fd60 	.word	0x0801fd60
 80025e8:	0801fd64 	.word	0x0801fd64
 80025ec:	0801fd68 	.word	0x0801fd68

080025f0 <rate_controller_yaw_pid_set_info_fn>:

int32_t rate_controller_yaw_pid_set_info_fn(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 80025f4:	4804      	ldr	r0, [pc, #16]	@ (8002608 <rate_controller_yaw_pid_set_info_fn+0x18>)
 80025f6:	f016 f9d3 	bl	80189a0 <usb_printf>
	OUT_PRINTF("set %s (float)kp (float)ki (float)kd (float)max_integral_error (float)Kff\r\n", rate_controller_yaw_pid);
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <rate_controller_yaw_pid_set_info_fn+0x1c>)
 80025fc:	4804      	ldr	r0, [pc, #16]	@ (8002610 <rate_controller_yaw_pid_set_info_fn+0x20>)
 80025fe:	f016 f9cf 	bl	80189a0 <usb_printf>
	return 0;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	0801fd64 	.word	0x0801fd64
 800260c:	0802208c 	.word	0x0802208c
 8002610:	0801fd80 	.word	0x0801fd80

08002614 <rate_controller_yaw_pid_get_fn>:

int32_t rate_controller_yaw_pid_get_fn(){
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", rate_controller_yaw_pid);
 8002618:	492c      	ldr	r1, [pc, #176]	@ (80026cc <rate_controller_yaw_pid_get_fn+0xb8>)
 800261a:	482d      	ldr	r0, [pc, #180]	@ (80026d0 <rate_controller_yaw_pid_get_fn+0xbc>)
 800261c:	f016 f9c0 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002622:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8002626:	f04f 31ff 	mov.w	r1, #4294967295
 800262a:	4618      	mov	r0, r3
 800262c:	f013 fbf2 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("Kp: %f\r\n", fcl.rate_controller.pid_yaw.Kp);
 8002630:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002632:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff96 	bl	8000568 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4825      	ldr	r0, [pc, #148]	@ (80026d8 <rate_controller_yaw_pid_get_fn+0xc4>)
 8002642:	f016 f9ad 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Ki: %f\r\n", fcl.rate_controller.pid_yaw.Ki);
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002648:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff8b 	bl	8000568 <__aeabi_f2d>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4821      	ldr	r0, [pc, #132]	@ (80026dc <rate_controller_yaw_pid_get_fn+0xc8>)
 8002658:	f016 f9a2 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Kd: %f\r\n", fcl.rate_controller.pid_yaw.Kd);
 800265c:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 800265e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff80 	bl	8000568 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	481c      	ldr	r0, [pc, #112]	@ (80026e0 <rate_controller_yaw_pid_get_fn+0xcc>)
 800266e:	f016 f997 	bl	80189a0 <usb_printf>
	OUT_PRINTF("integral_max_error: %f\r\n", fcl.rate_controller.pid_yaw.integral_max_error);
 8002672:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 8002674:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff75 	bl	8000568 <__aeabi_f2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4818      	ldr	r0, [pc, #96]	@ (80026e4 <rate_controller_yaw_pid_get_fn+0xd0>)
 8002684:	f016 f98c 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Kff: %f\r\n", fcl.rate_controller.pid_yaw_k_ff);
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 800268a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff6a 	bl	8000568 <__aeabi_f2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4813      	ldr	r0, [pc, #76]	@ (80026e8 <rate_controller_yaw_pid_get_fn+0xd4>)
 800269a:	f016 f981 	bl	80189a0 <usb_printf>
	OUT_PRINTF("Max Output: +/- %f\r\n", fcl.rate_controller.pid_yaw.max_output);
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 80026a0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff5f 	bl	8000568 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	480f      	ldr	r0, [pc, #60]	@ (80026ec <rate_controller_yaw_pid_get_fn+0xd8>)
 80026b0:	f016 f976 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <rate_controller_yaw_pid_get_fn+0xc0>)
 80026b6:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	f013 f926 	bl	8015910 <xQueueGenericSend>
#endif
	return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	0802208c 	.word	0x0802208c
 80026d0:	0801fdcc 	.word	0x0801fdcc
 80026d4:	2000131c 	.word	0x2000131c
 80026d8:	0801fde0 	.word	0x0801fde0
 80026dc:	0801fdec 	.word	0x0801fdec
 80026e0:	0801fdf8 	.word	0x0801fdf8
 80026e4:	0801fe04 	.word	0x0801fe04
 80026e8:	0801fe20 	.word	0x0801fe20
 80026ec:	0801fe2c 	.word	0x0801fe2c

080026f0 <attitude_controller_level_p_set_info_fn>:
				xSemaphoreGive(fcl.attitude_controller_mutex);
			#endif
	return 0;
}

int32_t attitude_controller_level_p_set_info_fn(){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 80026f4:	4804      	ldr	r0, [pc, #16]	@ (8002708 <attitude_controller_level_p_set_info_fn+0x18>)
 80026f6:	f016 f953 	bl	80189a0 <usb_printf>
	OUT_PRINTF("set %s (float)level_p\r\n", level_p);
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <attitude_controller_level_p_set_info_fn+0x1c>)
 80026fc:	4804      	ldr	r0, [pc, #16]	@ (8002710 <attitude_controller_level_p_set_info_fn+0x20>)
 80026fe:	f016 f94f 	bl	80189a0 <usb_printf>
	return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	0801fd64 	.word	0x0801fd64
 800270c:	080220a4 	.word	0x080220a4
 8002710:	0801fe44 	.word	0x0801fe44

08002714 <attitude_controller_level_p_get_fn>:

int32_t attitude_controller_level_p_get_fn(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", level_p);
 8002718:	4910      	ldr	r1, [pc, #64]	@ (800275c <attitude_controller_level_p_get_fn+0x48>)
 800271a:	4811      	ldr	r0, [pc, #68]	@ (8002760 <attitude_controller_level_p_get_fn+0x4c>)
 800271c:	f016 f940 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <attitude_controller_level_p_get_fn+0x50>)
 8002722:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8002726:	f04f 31ff 	mov.w	r1, #4294967295
 800272a:	4618      	mov	r0, r3
 800272c:	f013 fb72 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("level_p: %f\r\n", fcl.attitude_controller.rate_gain);
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <attitude_controller_level_p_get_fn+0x50>)
 8002732:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff16 	bl	8000568 <__aeabi_f2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4809      	ldr	r0, [pc, #36]	@ (8002768 <attitude_controller_level_p_get_fn+0x54>)
 8002742:	f016 f92d 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <attitude_controller_level_p_get_fn+0x50>)
 8002748:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	f013 f8dd 	bl	8015910 <xQueueGenericSend>
#endif
	return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	080220a4 	.word	0x080220a4
 8002760:	0801fdcc 	.word	0x0801fdcc
 8002764:	2000131c 	.word	0x2000131c
 8002768:	0801fe5c 	.word	0x0801fe5c

0800276c <attitude_controller_max_angle_set_info_fn>:
				xSemaphoreGive(fcl.attitude_controller_mutex);
			#endif
	return 0;
}

int32_t attitude_controller_max_angle_set_info_fn(){
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\n");
 8002770:	4804      	ldr	r0, [pc, #16]	@ (8002784 <attitude_controller_max_angle_set_info_fn+0x18>)
 8002772:	f016 f915 	bl	80189a0 <usb_printf>
	OUT_PRINTF("set %s (float radians)max_angle\r\n", max_angle);
 8002776:	4904      	ldr	r1, [pc, #16]	@ (8002788 <attitude_controller_max_angle_set_info_fn+0x1c>)
 8002778:	4804      	ldr	r0, [pc, #16]	@ (800278c <attitude_controller_max_angle_set_info_fn+0x20>)
 800277a:	f016 f911 	bl	80189a0 <usb_printf>
	return 0;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0801fd64 	.word	0x0801fd64
 8002788:	080220ac 	.word	0x080220ac
 800278c:	0801fe6c 	.word	0x0801fe6c

08002790 <attitude_controller_max_angle_get_fn>:

int32_t attitude_controller_max_angle_get_fn(){
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	OUT_PRINTF("\r\nParameter: %s\r\n", level_p);
 8002794:	4910      	ldr	r1, [pc, #64]	@ (80027d8 <attitude_controller_max_angle_get_fn+0x48>)
 8002796:	4811      	ldr	r0, [pc, #68]	@ (80027dc <attitude_controller_max_angle_get_fn+0x4c>)
 8002798:	f016 f902 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <attitude_controller_max_angle_get_fn+0x50>)
 800279e:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 80027a2:	f04f 31ff 	mov.w	r1, #4294967295
 80027a6:	4618      	mov	r0, r3
 80027a8:	f013 fb34 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	OUT_PRINTF("max_angle [radians]: %f\r\n", fcl.attitude_controller.max_angle);
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <attitude_controller_max_angle_get_fn+0x50>)
 80027ae:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fed8 	bl	8000568 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <attitude_controller_max_angle_get_fn+0x54>)
 80027be:	f016 f8ef 	bl	80189a0 <usb_printf>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <attitude_controller_max_angle_get_fn+0x50>)
 80027c4:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 80027c8:	2300      	movs	r3, #0
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	f013 f89f 	bl	8015910 <xQueueGenericSend>
#endif
	return 0;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	080220a4 	.word	0x080220a4
 80027dc:	0801fdcc 	.word	0x0801fdcc
 80027e0:	2000131c 	.word	0x2000131c
 80027e4:	0801fe90 	.word	0x0801fe90

080027e8 <init_parameters_arr>:
/*=================================================================================*/

void init_parameters_arr(){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	memset(parameters_arr, 0, sizeof(parameters_arr));
 80027ee:	22c8      	movs	r2, #200	@ 0xc8
 80027f0:	2100      	movs	r1, #0
 80027f2:	4886      	ldr	r0, [pc, #536]	@ (8002a0c <init_parameters_arr+0x224>)
 80027f4:	f019 fca8 	bl	801c148 <memset>
	int param_index = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = rate_controller_roll_pid;
 80027fc:	4983      	ldr	r1, [pc, #524]	@ (8002a0c <init_parameters_arr+0x224>)
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	4a81      	ldr	r2, [pc, #516]	@ (8002a10 <init_parameters_arr+0x228>)
 800280c:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 5;
 800280e:	497f      	ldr	r1, [pc, #508]	@ (8002a0c <init_parameters_arr+0x224>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3304      	adds	r3, #4
 800281e:	2205      	movs	r2, #5
 8002820:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = rate_controller_roll_pid_set_fn;
 8002822:	497a      	ldr	r1, [pc, #488]	@ (8002a0c <init_parameters_arr+0x224>)
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3308      	adds	r3, #8
 8002832:	4a78      	ldr	r2, [pc, #480]	@ (8002a14 <init_parameters_arr+0x22c>)
 8002834:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = rate_controller_roll_pid_set_info_fn;
 8002836:	4975      	ldr	r1, [pc, #468]	@ (8002a0c <init_parameters_arr+0x224>)
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	330c      	adds	r3, #12
 8002846:	4a74      	ldr	r2, [pc, #464]	@ (8002a18 <init_parameters_arr+0x230>)
 8002848:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = rate_controller_roll_pid_get_fn;
 800284a:	4970      	ldr	r1, [pc, #448]	@ (8002a0c <init_parameters_arr+0x224>)
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3310      	adds	r3, #16
 800285a:	4a70      	ldr	r2, [pc, #448]	@ (8002a1c <init_parameters_arr+0x234>)
 800285c:	601a      	str	r2, [r3, #0]

	param_index++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3301      	adds	r3, #1
 8002862:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = rate_controller_pitch_pid;
 8002864:	4969      	ldr	r1, [pc, #420]	@ (8002a0c <init_parameters_arr+0x224>)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	4a6b      	ldr	r2, [pc, #428]	@ (8002a20 <init_parameters_arr+0x238>)
 8002874:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 5;
 8002876:	4965      	ldr	r1, [pc, #404]	@ (8002a0c <init_parameters_arr+0x224>)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3304      	adds	r3, #4
 8002886:	2205      	movs	r2, #5
 8002888:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = rate_controller_pitch_pid_set_fn;
 800288a:	4960      	ldr	r1, [pc, #384]	@ (8002a0c <init_parameters_arr+0x224>)
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3308      	adds	r3, #8
 800289a:	4a62      	ldr	r2, [pc, #392]	@ (8002a24 <init_parameters_arr+0x23c>)
 800289c:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = rate_controller_pitch_pid_set_info_fn;
 800289e:	495b      	ldr	r1, [pc, #364]	@ (8002a0c <init_parameters_arr+0x224>)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	330c      	adds	r3, #12
 80028ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002a28 <init_parameters_arr+0x240>)
 80028b0:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = rate_controller_pitch_pid_get_fn;
 80028b2:	4956      	ldr	r1, [pc, #344]	@ (8002a0c <init_parameters_arr+0x224>)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3310      	adds	r3, #16
 80028c2:	4a5a      	ldr	r2, [pc, #360]	@ (8002a2c <init_parameters_arr+0x244>)
 80028c4:	601a      	str	r2, [r3, #0]

	param_index++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3301      	adds	r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = rate_controller_yaw_pid;
 80028cc:	494f      	ldr	r1, [pc, #316]	@ (8002a0c <init_parameters_arr+0x224>)
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	4a55      	ldr	r2, [pc, #340]	@ (8002a30 <init_parameters_arr+0x248>)
 80028dc:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 5;
 80028de:	494b      	ldr	r1, [pc, #300]	@ (8002a0c <init_parameters_arr+0x224>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3304      	adds	r3, #4
 80028ee:	2205      	movs	r2, #5
 80028f0:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = rate_controller_yaw_pid_set_fn;
 80028f2:	4946      	ldr	r1, [pc, #280]	@ (8002a0c <init_parameters_arr+0x224>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3308      	adds	r3, #8
 8002902:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <init_parameters_arr+0x24c>)
 8002904:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = rate_controller_yaw_pid_set_info_fn;
 8002906:	4941      	ldr	r1, [pc, #260]	@ (8002a0c <init_parameters_arr+0x224>)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	330c      	adds	r3, #12
 8002916:	4a48      	ldr	r2, [pc, #288]	@ (8002a38 <init_parameters_arr+0x250>)
 8002918:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = rate_controller_yaw_pid_get_fn;
 800291a:	493c      	ldr	r1, [pc, #240]	@ (8002a0c <init_parameters_arr+0x224>)
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3310      	adds	r3, #16
 800292a:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <init_parameters_arr+0x254>)
 800292c:	601a      	str	r2, [r3, #0]

	param_index++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3301      	adds	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = level_p;
 8002934:	4935      	ldr	r1, [pc, #212]	@ (8002a0c <init_parameters_arr+0x224>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	4a3f      	ldr	r2, [pc, #252]	@ (8002a40 <init_parameters_arr+0x258>)
 8002944:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 1;
 8002946:	4931      	ldr	r1, [pc, #196]	@ (8002a0c <init_parameters_arr+0x224>)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3304      	adds	r3, #4
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = attitude_controller_level_p_set_info_fn;
 800295a:	492c      	ldr	r1, [pc, #176]	@ (8002a0c <init_parameters_arr+0x224>)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3308      	adds	r3, #8
 800296a:	4a36      	ldr	r2, [pc, #216]	@ (8002a44 <init_parameters_arr+0x25c>)
 800296c:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = attitude_controller_level_p_set_info_fn;
 800296e:	4927      	ldr	r1, [pc, #156]	@ (8002a0c <init_parameters_arr+0x224>)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	330c      	adds	r3, #12
 800297e:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <init_parameters_arr+0x25c>)
 8002980:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = attitude_controller_level_p_get_fn;
 8002982:	4922      	ldr	r1, [pc, #136]	@ (8002a0c <init_parameters_arr+0x224>)
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3310      	adds	r3, #16
 8002992:	4a2d      	ldr	r2, [pc, #180]	@ (8002a48 <init_parameters_arr+0x260>)
 8002994:	601a      	str	r2, [r3, #0]

	param_index++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3301      	adds	r3, #1
 800299a:	607b      	str	r3, [r7, #4]
	parameters_arr[param_index].name = max_angle;
 800299c:	491b      	ldr	r1, [pc, #108]	@ (8002a0c <init_parameters_arr+0x224>)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	4a28      	ldr	r2, [pc, #160]	@ (8002a4c <init_parameters_arr+0x264>)
 80029ac:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].total_input_parameters = 1;
 80029ae:	4917      	ldr	r1, [pc, #92]	@ (8002a0c <init_parameters_arr+0x224>)
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3304      	adds	r3, #4
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
	parameters_arr[param_index].set_fn = attitude_controller_max_angle_set_info_fn;
 80029c2:	4912      	ldr	r1, [pc, #72]	@ (8002a0c <init_parameters_arr+0x224>)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3308      	adds	r3, #8
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <init_parameters_arr+0x268>)
 80029d4:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].set_info_fn = attitude_controller_max_angle_set_info_fn;
 80029d6:	490d      	ldr	r1, [pc, #52]	@ (8002a0c <init_parameters_arr+0x224>)
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	330c      	adds	r3, #12
 80029e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a50 <init_parameters_arr+0x268>)
 80029e8:	601a      	str	r2, [r3, #0]
	parameters_arr[param_index].get_fn = attitude_controller_max_angle_get_fn;
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <init_parameters_arr+0x224>)
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3310      	adds	r3, #16
 80029fa:	4a16      	ldr	r2, [pc, #88]	@ (8002a54 <init_parameters_arr+0x26c>)
 80029fc:	601a      	str	r2, [r3, #0]

	param_index++;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3301      	adds	r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000454 	.word	0x20000454
 8002a10:	08022054 	.word	0x08022054
 8002a14:	0800200d 	.word	0x0800200d
 8002a18:	08002159 	.word	0x08002159
 8002a1c:	0800217d 	.word	0x0800217d
 8002a20:	08022070 	.word	0x08022070
 8002a24:	08002259 	.word	0x08002259
 8002a28:	080023a5 	.word	0x080023a5
 8002a2c:	080023c9 	.word	0x080023c9
 8002a30:	0802208c 	.word	0x0802208c
 8002a34:	080024a5 	.word	0x080024a5
 8002a38:	080025f1 	.word	0x080025f1
 8002a3c:	08002615 	.word	0x08002615
 8002a40:	080220a4 	.word	0x080220a4
 8002a44:	080026f1 	.word	0x080026f1
 8002a48:	08002715 	.word	0x08002715
 8002a4c:	080220ac 	.word	0x080220ac
 8002a50:	0800276d 	.word	0x0800276d
 8002a54:	08002791 	.word	0x08002791

08002a58 <command_set_list>:

void command_set_list(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	e022      	b.n	8002aaa <command_set_list+0x52>
		if(parameters_arr[i].set_info_fn != NULL && parameters_arr[i].set_fn != NULL){
 8002a64:	4915      	ldr	r1, [pc, #84]	@ (8002abc <command_set_list+0x64>)
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	330c      	adds	r3, #12
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d014      	beq.n	8002aa4 <command_set_list+0x4c>
 8002a7a:	4910      	ldr	r1, [pc, #64]	@ (8002abc <command_set_list+0x64>)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3308      	adds	r3, #8
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <command_set_list+0x4c>
			parameters_arr[i].set_info_fn();
 8002a90:	490a      	ldr	r1, [pc, #40]	@ (8002abc <command_set_list+0x64>)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4798      	blx	r3
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	ddd9      	ble.n	8002a64 <command_set_list+0xc>
		}
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000454 	.word	0x20000454

08002ac0 <command_get_list>:

void command_get_list(){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	e026      	b.n	8002b1a <command_get_list+0x5a>
		if(parameters_arr[i].get_fn != NULL && parameters_arr[i].name != NULL){
 8002acc:	4917      	ldr	r1, [pc, #92]	@ (8002b2c <command_get_list+0x6c>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3310      	adds	r3, #16
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d018      	beq.n	8002b14 <command_get_list+0x54>
 8002ae2:	4912      	ldr	r1, [pc, #72]	@ (8002b2c <command_get_list+0x6c>)
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <command_get_list+0x54>
			OUT_PRINTF("\r\n");
 8002af6:	480e      	ldr	r0, [pc, #56]	@ (8002b30 <command_get_list+0x70>)
 8002af8:	f015 ff52 	bl	80189a0 <usb_printf>
			OUT_PRINTF("%s\r\n", parameters_arr[i].name);
 8002afc:	490b      	ldr	r1, [pc, #44]	@ (8002b2c <command_get_list+0x6c>)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <command_get_list+0x74>)
 8002b10:	f015 ff46 	bl	80189a0 <usb_printf>
	for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3301      	adds	r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	ddd5      	ble.n	8002acc <command_get_list+0xc>
		}
	}
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000454 	.word	0x20000454
 8002b30:	0801fd64 	.word	0x0801fd64
 8002b34:	0801feac 	.word	0x0801feac

08002b38 <set_cmd_fn>:




/* Command to get called */
int32_t set_cmd_fn(int32_t argc, char** argv) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
	if(argc < 2) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	dc07      	bgt.n	8002b58 <set_cmd_fn+0x20>
		OUT_PRINTF("\r\n");
 8002b48:	484b      	ldr	r0, [pc, #300]	@ (8002c78 <set_cmd_fn+0x140>)
 8002b4a:	f015 ff29 	bl	80189a0 <usb_printf>
		OUT_PRINTF("Type \"set list\" to list all parameters that can be set.\r\n");
 8002b4e:	484b      	ldr	r0, [pc, #300]	@ (8002c7c <set_cmd_fn+0x144>)
 8002b50:	f015 ff26 	bl	80189a0 <usb_printf>
		return 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e08b      	b.n	8002c70 <set_cmd_fn+0x138>
	}

	int argc_index = 1;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
	int parameter_found = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

	if(strcmp(argv[argc_index], "list") == 0){
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4945      	ldr	r1, [pc, #276]	@ (8002c80 <set_cmd_fn+0x148>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fb2f 	bl	80001d0 <strcmp>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <set_cmd_fn+0x4a>
		command_set_list();
 8002b78:	f7ff ff6e 	bl	8002a58 <command_set_list>
		parameter_found = 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e06c      	b.n	8002c5c <set_cmd_fn+0x124>
	}
	else{
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e066      	b.n	8002c56 <set_cmd_fn+0x11e>
			if(parameters_arr[i].name == NULL) continue;
 8002b88:	493e      	ldr	r1, [pc, #248]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d058      	beq.n	8002c4e <set_cmd_fn+0x116>

			if(strcmp(argv[argc_index], parameters_arr[i].name) == 0){
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	4937      	ldr	r1, [pc, #220]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd fb0a 	bl	80001d0 <strcmp>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d146      	bne.n	8002c50 <set_cmd_fn+0x118>
				parameter_found = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
				if(argc < (1+1+parameters_arr[i].total_input_parameters)) {
 8002bc6:	492f      	ldr	r1, [pc, #188]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dc10      	bgt.n	8002c02 <set_cmd_fn+0xca>
					OUT_PRINTF("\r\n");
 8002be0:	4825      	ldr	r0, [pc, #148]	@ (8002c78 <set_cmd_fn+0x140>)
 8002be2:	f015 fedd 	bl	80189a0 <usb_printf>
					OUT_PRINTF("ERROR: Missing parameter\r\n");
 8002be6:	4828      	ldr	r0, [pc, #160]	@ (8002c88 <set_cmd_fn+0x150>)
 8002be8:	f015 feda 	bl	80189a0 <usb_printf>
					parameters_arr[i].set_info_fn();
 8002bec:	4925      	ldr	r1, [pc, #148]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4798      	blx	r3
 8002c00:	e026      	b.n	8002c50 <set_cmd_fn+0x118>
				}
				else{
					if(parameters_arr[i].set_fn == NULL){
 8002c02:	4920      	ldr	r1, [pc, #128]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3308      	adds	r3, #8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <set_cmd_fn+0xec>
						OUT_PRINTF("\r\n");
 8002c18:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <set_cmd_fn+0x140>)
 8002c1a:	f015 fec1 	bl	80189a0 <usb_printf>
						OUT_PRINTF("ERROR: Parameter Cannot be set\r\n");
 8002c1e:	481b      	ldr	r0, [pc, #108]	@ (8002c8c <set_cmd_fn+0x154>)
 8002c20:	f015 febe 	bl	80189a0 <usb_printf>
					}
					parameters_arr[i].set_fn(argc - argc_index - 1, &(argv[argc_index + 1]));
 8002c24:	4917      	ldr	r1, [pc, #92]	@ (8002c84 <set_cmd_fn+0x14c>)
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3308      	adds	r3, #8
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	1a8a      	subs	r2, r1, r2
 8002c3c:	1e50      	subs	r0, r2, #1
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	3201      	adds	r2, #1
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	440a      	add	r2, r1
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4798      	blx	r3
					break;
 8002c4c:	e006      	b.n	8002c5c <set_cmd_fn+0x124>
			if(parameters_arr[i].name == NULL) continue;
 8002c4e:	bf00      	nop
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3301      	adds	r3, #1
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b09      	cmp	r3, #9
 8002c5a:	dd95      	ble.n	8002b88 <set_cmd_fn+0x50>
				}
			}
		}
	}

	if(parameter_found == 0){
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <set_cmd_fn+0x136>
		OUT_PRINTF("\r\n");
 8002c62:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <set_cmd_fn+0x140>)
 8002c64:	f015 fe9c 	bl	80189a0 <usb_printf>
		OUT_PRINTF("ERROR: Not found\r\n");
 8002c68:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <set_cmd_fn+0x158>)
 8002c6a:	f015 fe99 	bl	80189a0 <usb_printf>
	}

    /* Successful execution */
    return 0;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	0801fd64 	.word	0x0801fd64
 8002c7c:	0801feb4 	.word	0x0801feb4
 8002c80:	0801fef0 	.word	0x0801fef0
 8002c84:	20000454 	.word	0x20000454
 8002c88:	0801fef8 	.word	0x0801fef8
 8002c8c:	0801ff14 	.word	0x0801ff14
 8002c90:	0801ff38 	.word	0x0801ff38

08002c94 <get_cmd_fn>:

int32_t get_cmd_fn(int32_t argc, char** argv) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
	if(argc < 2) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	dc07      	bgt.n	8002cb4 <get_cmd_fn+0x20>
		OUT_PRINTF("\r\n");
 8002ca4:	4838      	ldr	r0, [pc, #224]	@ (8002d88 <get_cmd_fn+0xf4>)
 8002ca6:	f015 fe7b 	bl	80189a0 <usb_printf>
		OUT_PRINTF("Type \"get list\" to list all parameters that can be set.\r\n");
 8002caa:	4838      	ldr	r0, [pc, #224]	@ (8002d8c <get_cmd_fn+0xf8>)
 8002cac:	f015 fe78 	bl	80189a0 <usb_printf>
		return 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e064      	b.n	8002d7e <get_cmd_fn+0xea>
	}

	int argc_index = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
	int parameter_found = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

	if(strcmp(argv[argc_index], "list") == 0){
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4932      	ldr	r1, [pc, #200]	@ (8002d90 <get_cmd_fn+0xfc>)
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fa81 	bl	80001d0 <strcmp>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <get_cmd_fn+0x4a>
		command_get_list();
 8002cd4:	f7ff fef4 	bl	8002ac0 <command_get_list>
		parameter_found = 1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e045      	b.n	8002d6a <get_cmd_fn+0xd6>
	}
	else{
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e03f      	b.n	8002d64 <get_cmd_fn+0xd0>
			if(parameters_arr[i].name == NULL) continue;
 8002ce4:	492b      	ldr	r1, [pc, #172]	@ (8002d94 <get_cmd_fn+0x100>)
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d031      	beq.n	8002d5c <get_cmd_fn+0xc8>

			if(strcmp(argv[argc_index], parameters_arr[i].name) == 0){
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	4924      	ldr	r1, [pc, #144]	@ (8002d94 <get_cmd_fn+0x100>)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7fd fa5c 	bl	80001d0 <strcmp>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11f      	bne.n	8002d5e <get_cmd_fn+0xca>
				parameter_found = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
				if(parameters_arr[i].get_fn == NULL){
 8002d22:	491c      	ldr	r1, [pc, #112]	@ (8002d94 <get_cmd_fn+0x100>)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3310      	adds	r3, #16
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <get_cmd_fn+0xb2>
					OUT_PRINTF("\r\n");
 8002d38:	4813      	ldr	r0, [pc, #76]	@ (8002d88 <get_cmd_fn+0xf4>)
 8002d3a:	f015 fe31 	bl	80189a0 <usb_printf>
					OUT_PRINTF("ERROR: Parameter Cannot be get\r\n");
 8002d3e:	4816      	ldr	r0, [pc, #88]	@ (8002d98 <get_cmd_fn+0x104>)
 8002d40:	f015 fe2e 	bl	80189a0 <usb_printf>
 8002d44:	e00b      	b.n	8002d5e <get_cmd_fn+0xca>
				}
				else{
					parameters_arr[i].get_fn();
 8002d46:	4913      	ldr	r1, [pc, #76]	@ (8002d94 <get_cmd_fn+0x100>)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3310      	adds	r3, #16
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4798      	blx	r3
					break;
 8002d5a:	e006      	b.n	8002d6a <get_cmd_fn+0xd6>
			if(parameters_arr[i].name == NULL) continue;
 8002d5c:	bf00      	nop
		for(int i=0; i < TOTAL_PARAMETERS; i++){
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3301      	adds	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	ddbc      	ble.n	8002ce4 <get_cmd_fn+0x50>
				}
			}
		}
	}

	if(parameter_found == 0){
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <get_cmd_fn+0xe8>
		OUT_PRINTF("\r\n");
 8002d70:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <get_cmd_fn+0xf4>)
 8002d72:	f015 fe15 	bl	80189a0 <usb_printf>
		OUT_PRINTF("ERROR: Not found\r\n");
 8002d76:	4809      	ldr	r0, [pc, #36]	@ (8002d9c <get_cmd_fn+0x108>)
 8002d78:	f015 fe12 	bl	80189a0 <usb_printf>
	}

    /* Successful execution */
    return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	0801fd64 	.word	0x0801fd64
 8002d8c:	0801ff4c 	.word	0x0801ff4c
 8002d90:	0801fef0 	.word	0x0801fef0
 8002d94:	20000454 	.word	0x20000454
 8002d98:	0801ff88 	.word	0x0801ff88
 8002d9c:	0801ff38 	.word	0x0801ff38

08002da0 <get_telemetry_cmd_fn>:



// get_telemetry frequency_hz separator_char data1 data2 data3 data...
int32_t get_telemetry_cmd_fn(int32_t argc, char** argv){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	memset(&get_telemetry_active, 0, sizeof(get_telemetry_active));
 8002daa:	2204      	movs	r2, #4
 8002dac:	2100      	movs	r1, #0
 8002dae:	4808      	ldr	r0, [pc, #32]	@ (8002dd0 <get_telemetry_cmd_fn+0x30>)
 8002db0:	f019 f9ca 	bl	801c148 <memset>
	get_telemetry_active.get_telemetry_active = 0;
 8002db4:	4a06      	ldr	r2, [pc, #24]	@ (8002dd0 <get_telemetry_cmd_fn+0x30>)
 8002db6:	7813      	ldrb	r3, [r2, #0]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	7013      	strb	r3, [r2, #0]
	start_telemetry = 1;
 8002dbe:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <get_telemetry_cmd_fn+0x34>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
	if(argc >= 2){
//		if(strcmp(argv[1], "start") == 0){
//			start_telemetry = 1;
//		}
	}
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000450 	.word	0x20000450
 8002dd4:	2000004c 	.word	0x2000004c

08002dd8 <get_telemetry_stop_cmd_fn>:

int32_t get_telemetry_stop_cmd_fn(int32_t argc, char** argv){
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
	start_telemetry = 0;
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <get_telemetry_stop_cmd_fn+0x20>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
	return 0;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	2000004c 	.word	0x2000004c

08002dfc <output_fn>:

void output_fn(const char* str, struct lwshell* lwobj){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	OUT_PRINTF("%s", str);
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4803      	ldr	r0, [pc, #12]	@ (8002e18 <output_fn+0x1c>)
 8002e0a:	f015 fdc9 	bl	80189a0 <usb_printf>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	0801ffac 	.word	0x0801ffac

08002e1c <fp_cli_example_minimal_init>:

/* Example code */
void fp_cli_example_minimal_init(void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
    /* Init library */
	init_parameters_arr();
 8002e20:	f7ff fce2 	bl	80027e8 <init_parameters_arr>
    lwshell_init_ex(&lwshell_cli);
 8002e24:	4810      	ldr	r0, [pc, #64]	@ (8002e68 <fp_cli_example_minimal_init+0x4c>)
 8002e26:	f002 fdf1 	bl	8005a0c <lwshell_init_ex>

    lwshellr_t lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn);
    lwshell_set_output_fn_ex(&lwshell_cli, output_fn);
 8002e2a:	4910      	ldr	r1, [pc, #64]	@ (8002e6c <fp_cli_example_minimal_init+0x50>)
 8002e2c:	480e      	ldr	r0, [pc, #56]	@ (8002e68 <fp_cli_example_minimal_init+0x4c>)
 8002e2e:	f002 fe05 	bl	8005a3c <lwshell_set_output_fn_ex>

    /* Define shell commands */
    lwshell_register_cmd_ex(&lwshell_cli, "set", set_cmd_fn, "set a parameter");
 8002e32:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <fp_cli_example_minimal_init+0x54>)
 8002e34:	4a0f      	ldr	r2, [pc, #60]	@ (8002e74 <fp_cli_example_minimal_init+0x58>)
 8002e36:	4910      	ldr	r1, [pc, #64]	@ (8002e78 <fp_cli_example_minimal_init+0x5c>)
 8002e38:	480b      	ldr	r0, [pc, #44]	@ (8002e68 <fp_cli_example_minimal_init+0x4c>)
 8002e3a:	f002 fe17 	bl	8005a6c <lwshell_register_cmd_ex>
    lwshell_register_cmd_ex(&lwshell_cli, "get", get_cmd_fn, "get a parameter");
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <fp_cli_example_minimal_init+0x60>)
 8002e40:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <fp_cli_example_minimal_init+0x64>)
 8002e42:	4910      	ldr	r1, [pc, #64]	@ (8002e84 <fp_cli_example_minimal_init+0x68>)
 8002e44:	4808      	ldr	r0, [pc, #32]	@ (8002e68 <fp_cli_example_minimal_init+0x4c>)
 8002e46:	f002 fe11 	bl	8005a6c <lwshell_register_cmd_ex>
    lwshell_register_cmd_ex(&lwshell_cli, "get_telemetry", get_telemetry_cmd_fn, "get telemetry");
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <fp_cli_example_minimal_init+0x6c>)
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e8c <fp_cli_example_minimal_init+0x70>)
 8002e4e:	4910      	ldr	r1, [pc, #64]	@ (8002e90 <fp_cli_example_minimal_init+0x74>)
 8002e50:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <fp_cli_example_minimal_init+0x4c>)
 8002e52:	f002 fe0b 	bl	8005a6c <lwshell_register_cmd_ex>
    lwshell_register_cmd_ex(&lwshell_cli, "stop", get_telemetry_stop_cmd_fn, "stop telemetry");
 8002e56:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <fp_cli_example_minimal_init+0x78>)
 8002e58:	4a0f      	ldr	r2, [pc, #60]	@ (8002e98 <fp_cli_example_minimal_init+0x7c>)
 8002e5a:	4910      	ldr	r1, [pc, #64]	@ (8002e9c <fp_cli_example_minimal_init+0x80>)
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <fp_cli_example_minimal_init+0x4c>)
 8002e5e:	f002 fe05 	bl	8005a6c <lwshell_register_cmd_ex>

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000033c 	.word	0x2000033c
 8002e6c:	08002dfd 	.word	0x08002dfd
 8002e70:	0801ffb0 	.word	0x0801ffb0
 8002e74:	08002b39 	.word	0x08002b39
 8002e78:	0801ffc0 	.word	0x0801ffc0
 8002e7c:	0801ffc4 	.word	0x0801ffc4
 8002e80:	08002c95 	.word	0x08002c95
 8002e84:	0801ffd4 	.word	0x0801ffd4
 8002e88:	0801ffd8 	.word	0x0801ffd8
 8002e8c:	08002da1 	.word	0x08002da1
 8002e90:	0801ffe8 	.word	0x0801ffe8
 8002e94:	0801fff8 	.word	0x0801fff8
 8002e98:	08002dd9 	.word	0x08002dd9
 8002e9c:	08020008 	.word	0x08020008

08002ea0 <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ece:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee2:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef6:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	ed93 7a00 	vldr	s14, [r3]
 8002f00:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	edd3 6a00 	vldr	s13, [r3]
 8002f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	3318      	adds	r3, #24
 8002f20:	edd3 6a00 	vldr	s13, [r3]
 8002f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f44:	330c      	adds	r3, #12
 8002f46:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	3318      	adds	r3, #24
 8002f5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	330c      	adds	r3, #12
 8002f80:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f92:	3318      	adds	r3, #24
 8002f94:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	ed93 7a00 	vldr	s14, [r3]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edd3 6a03 	vldr	s13, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	f016 f9bb 	bl	8019398 <sqrtf>
 8003022:	eef0 7a40 	vmov.f32	s15, s0
}
 8003026:	eeb0 0a67 	vmov.f32	s0, s15
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <quatconj>:

quaternion quatconj(quaternion* q) {
 8003030:	b490      	push	{r4, r7}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	edd3 7a01 	vldr	s15, [r3, #4]
 8003044:	eef1 7a67 	vneg.f32	s15, s15
 8003048:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003052:	eef1 7a67 	vneg.f32	s15, s15
 8003056:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003060:	eef1 7a67 	vneg.f32	s15, s15
 8003064:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 8003068:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800306c:	f107 0318 	add.w	r3, r7, #24
 8003070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800307a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800307c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307e:	ee06 0a10 	vmov	s12, r0
 8003082:	ee06 1a90 	vmov	s13, r1
 8003086:	ee07 2a10 	vmov	s14, r2
 800308a:	ee07 3a90 	vmov	s15, r3
}
 800308e:	eeb0 0a46 	vmov.f32	s0, s12
 8003092:	eef0 0a66 	vmov.f32	s1, s13
 8003096:	eeb0 1a47 	vmov.f32	s2, s14
 800309a:	eef0 1a67 	vmov.f32	s3, s15
 800309e:	3738      	adds	r7, #56	@ 0x38
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc90      	pop	{r4, r7}
 80030a4:	4770      	bx	lr
	...

080030a8 <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b091      	sub	sp, #68	@ 0x44
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 80030b0:	6978      	ldr	r0, [r7, #20]
 80030b2:	f7ff ff88 	bl	8002fc6 <quatnorm>
 80030b6:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 80030ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80030be:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003188 <quatnormalize+0xe0>
 80030c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d813      	bhi.n	80030f4 <quatnormalize+0x4c>
	    result.w = 1.0f;
 80030cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80030d0:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 80030e4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80030e8:	f107 0318 	add.w	r3, r7, #24
 80030ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030f2:	e032      	b.n	800315a <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 80030f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80030fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003100:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	ed93 7a00 	vldr	s14, [r3]
 800310a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	ed93 7a01 	vldr	s14, [r3, #4]
 800311c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003124:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	ed93 7a02 	vldr	s14, [r3, #8]
 800312e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003140:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003148:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 800314c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003150:	f107 0318 	add.w	r3, r7, #24
 8003154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800315a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800315c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800315e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003162:	ee06 0a10 	vmov	s12, r0
 8003166:	ee06 1a90 	vmov	s13, r1
 800316a:	ee07 2a10 	vmov	s14, r2
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eeb0 0a46 	vmov.f32	s0, s12
 8003176:	eef0 0a66 	vmov.f32	s1, s13
 800317a:	eeb0 1a47 	vmov.f32	s2, s14
 800317e:	eef0 1a67 	vmov.f32	s3, s15
 8003182:	3744      	adds	r7, #68	@ 0x44
 8003184:	46bd      	mov	sp, r7
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	34000000 	.word	0x34000000

0800318c <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 800318c:	b490      	push	{r4, r7}
 800318e:	b08e      	sub	sp, #56	@ 0x38
 8003190:	af00      	add	r7, sp, #0
 8003192:	6178      	str	r0, [r7, #20]
 8003194:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	ed93 7a00 	vldr	s14, [r3]
 800319e:	edd7 7a04 	vldr	s15, [r7, #16]
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80031b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80031b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b8:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	ed93 7a02 	vldr	s14, [r3, #8]
 80031c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80031d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 80031e0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80031e4:	f107 0318 	add.w	r3, r7, #24
 80031e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f6:	ee06 0a10 	vmov	s12, r0
 80031fa:	ee06 1a90 	vmov	s13, r1
 80031fe:	ee07 2a10 	vmov	s14, r2
 8003202:	ee07 3a90 	vmov	s15, r3
}
 8003206:	eeb0 0a46 	vmov.f32	s0, s12
 800320a:	eef0 0a66 	vmov.f32	s1, s13
 800320e:	eeb0 1a47 	vmov.f32	s2, s14
 8003212:	eef0 1a67 	vmov.f32	s3, s15
 8003216:	3738      	adds	r7, #56	@ 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	bc90      	pop	{r4, r7}
 800321c:	4770      	bx	lr

0800321e <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 800321e:	b490      	push	{r4, r7}
 8003220:	b096      	sub	sp, #88	@ 0x58
 8003222:	af00      	add	r7, sp, #0
 8003224:	6178      	str	r0, [r7, #20]
 8003226:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 8003258:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800325c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003264:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003268:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800326c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003274:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003278:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800327c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003280:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003284:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003288:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800328c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003294:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 8003298:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800329c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80032a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a4:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80032a8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80032ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80032b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80032bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80032c8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d4:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 80032d8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80032dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e4:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80032e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80032ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032f4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80032f8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80032fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003304:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003308:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800330c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003314:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 8003318:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800331c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003324:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003328:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800332c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003334:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003338:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800333c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003340:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003344:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003348:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800334c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 8003358:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800335c:	f107 0318 	add.w	r3, r7, #24
 8003360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800336a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	ee06 0a10 	vmov	s12, r0
 8003372:	ee06 1a90 	vmov	s13, r1
 8003376:	ee07 2a10 	vmov	s14, r2
 800337a:	ee07 3a90 	vmov	s15, r3
}
 800337e:	eeb0 0a46 	vmov.f32	s0, s12
 8003382:	eef0 0a66 	vmov.f32	s1, s13
 8003386:	eeb0 1a47 	vmov.f32	s2, s14
 800338a:	eef0 1a67 	vmov.f32	s3, s15
 800338e:	3758      	adds	r7, #88	@ 0x58
 8003390:	46bd      	mov	sp, r7
 8003392:	bc90      	pop	{r4, r7}
 8003394:	4770      	bx	lr

08003396 <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 8003396:	b580      	push	{r7, lr}
 8003398:	b094      	sub	sp, #80	@ 0x50
 800339a:	af00      	add	r7, sp, #0
 800339c:	6178      	str	r0, [r7, #20]
 800339e:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 80033b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033bc:	4619      	mov	r1, r3
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff ff2d 	bl	800321e <quatmultiply>
 80033c4:	eeb0 6a40 	vmov.f32	s12, s0
 80033c8:	eef0 6a60 	vmov.f32	s13, s1
 80033cc:	eeb0 7a41 	vmov.f32	s14, s2
 80033d0:	eef0 7a61 	vmov.f32	s15, s3
 80033d4:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80033d8:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80033dc:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80033e0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 80033e4:	6978      	ldr	r0, [r7, #20]
 80033e6:	f7ff fe23 	bl	8003030 <quatconj>
 80033ea:	eeb0 6a40 	vmov.f32	s12, s0
 80033ee:	eef0 6a60 	vmov.f32	s13, s1
 80033f2:	eeb0 7a41 	vmov.f32	s14, s2
 80033f6:	eef0 7a61 	vmov.f32	s15, s3
 80033fa:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80033fe:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8003402:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003406:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 800340a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800340e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff02 	bl	800321e <quatmultiply>
 800341a:	eeb0 6a40 	vmov.f32	s12, s0
 800341e:	eef0 6a60 	vmov.f32	s13, s1
 8003422:	eeb0 7a41 	vmov.f32	s14, s2
 8003426:	eef0 7a61 	vmov.f32	s15, s3
 800342a:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800342e:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8003432:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8003436:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 800343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343c:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 800343e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003440:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 8003442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003444:	623b      	str	r3, [r7, #32]
	return result;
 8003446:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800344a:	f107 0218 	add.w	r2, r7, #24
 800344e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003450:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003454:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800345a:	ee06 1a90 	vmov	s13, r1
 800345e:	ee07 2a10 	vmov	s14, r2
 8003462:	ee07 3a90 	vmov	s15, r3
}
 8003466:	eeb0 0a66 	vmov.f32	s0, s13
 800346a:	eef0 0a47 	vmov.f32	s1, s14
 800346e:	eeb0 1a67 	vmov.f32	s2, s15
 8003472:	3750      	adds	r7, #80	@ 0x50
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b090      	sub	sp, #64	@ 0x40
 800347c:	af00      	add	r7, sp, #0
 800347e:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 8003498:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800349c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80034a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80034a8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80034ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80034b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80034bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80034c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80034c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d8:	eef0 0a67 	vmov.f32	s1, s15
 80034dc:	eeb0 0a66 	vmov.f32	s0, s13
 80034e0:	f015 ff00 	bl	80192e4 <atan2f>
 80034e4:	eef0 7a40 	vmov.f32	s15, s0
 80034e8:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 80034ec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80034f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80034f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f8:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80034fc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800350c:	eeb0 0a67 	vmov.f32	s0, s15
 8003510:	f015 febc 	bl	801928c <asinf>
 8003514:	eef0 7a40 	vmov.f32	s15, s0
 8003518:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 800351c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003520:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003528:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800352c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003538:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800353c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003540:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003544:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003548:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800354c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003550:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355c:	eef0 0a67 	vmov.f32	s1, s15
 8003560:	eeb0 0a66 	vmov.f32	s0, s13
 8003564:	f015 febe 	bl	80192e4 <atan2f>
 8003568:	eef0 7a40 	vmov.f32	s15, s0
 800356c:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 8003570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003574:	f107 0218 	add.w	r2, r7, #24
 8003578:	ca07      	ldmia	r2, {r0, r1, r2}
 800357a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800357e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	ee06 1a90 	vmov	s13, r1
 8003588:	ee07 2a10 	vmov	s14, r2
 800358c:	ee07 3a90 	vmov	s15, r3
}
 8003590:	eeb0 0a66 	vmov.f32	s0, s13
 8003594:	eef0 0a47 	vmov.f32	s1, s14
 8003598:	eeb0 1a67 	vmov.f32	s2, s15
 800359c:	3740      	adds	r7, #64	@ 0x40
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b090      	sub	sp, #64	@ 0x40
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	eeb0 6a40 	vmov.f32	s12, s0
 80035ae:	eef0 6a60 	vmov.f32	s13, s1
 80035b2:	eeb0 7a41 	vmov.f32	s14, s2
 80035b6:	eef0 7a61 	vmov.f32	s15, s3
 80035ba:	ed87 6a04 	vstr	s12, [r7, #16]
 80035be:	edc7 6a05 	vstr	s13, [r7, #20]
 80035c2:	ed87 7a06 	vstr	s14, [r7, #24]
 80035c6:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fd6a 	bl	80030a8 <quatnormalize>
 80035d4:	eeb0 6a40 	vmov.f32	s12, s0
 80035d8:	eef0 6a60 	vmov.f32	s13, s1
 80035dc:	eeb0 7a41 	vmov.f32	s14, s2
 80035e0:	eef0 7a61 	vmov.f32	s15, s3
 80035e4:	ed87 6a04 	vstr	s12, [r7, #16]
 80035e8:	edc7 6a05 	vstr	s13, [r7, #20]
 80035ec:	ed87 7a06 	vstr	s14, [r7, #24]
 80035f0:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 80035f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80035f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003600:	d517      	bpl.n	8003632 <quat2rotvec+0x8e>
        q.w = -q.w;
 8003602:	edd7 7a04 	vldr	s15, [r7, #16]
 8003606:	eef1 7a67 	vneg.f32	s15, s15
 800360a:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eef1 7a67 	vneg.f32	s15, s15
 8003616:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 800361a:	edd7 7a06 	vldr	s15, [r7, #24]
 800361e:	eef1 7a67 	vneg.f32	s15, s15
 8003622:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 8003626:	edd7 7a07 	vldr	s15, [r7, #28]
 800362a:	eef1 7a67 	vneg.f32	s15, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 8003632:	edd7 7a04 	vldr	s15, [r7, #16]
 8003636:	eeb0 0a67 	vmov.f32	s0, s15
 800363a:	f015 fdfb 	bl	8019234 <acosf>
 800363e:	eef0 7a40 	vmov.f32	s15, s0
 8003642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003646:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 800364a:	ed97 7a04 	vldr	s14, [r7, #16]
 800364e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003656:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800365a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365e:	eeb0 0a67 	vmov.f32	s0, s15
 8003662:	f015 fe99 	bl	8019398 <sqrtf>
 8003666:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 800366a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800366e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800370c <quat2rotvec+0x168>
 8003672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	d809      	bhi.n	8003690 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368e:	e023      	b.n	80036d8 <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 8003690:	edd7 6a05 	vldr	s13, [r7, #20]
 8003694:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 80036a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80036ac:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80036b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 80036c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80036c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036cc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 80036d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036dc:	f107 0220 	add.w	r2, r7, #32
 80036e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ec:	ee06 1a90 	vmov	s13, r1
 80036f0:	ee07 2a10 	vmov	s14, r2
 80036f4:	ee07 3a90 	vmov	s15, r3
}
 80036f8:	eeb0 0a66 	vmov.f32	s0, s13
 80036fc:	eef0 0a47 	vmov.f32	s1, s14
 8003700:	eeb0 1a67 	vmov.f32	s2, s15
 8003704:	3740      	adds	r7, #64	@ 0x40
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	34000000 	.word	0x34000000

08003710 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b095      	sub	sp, #84	@ 0x54
 8003714:	af00      	add	r7, sp, #0
 8003716:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	edd3 7a02 	vldr	s15, [r3, #8]
 800371e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003726:	eeb0 0a67 	vmov.f32	s0, s15
 800372a:	f015 ff27 	bl	801957c <cosf>
 800372e:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	edd3 7a02 	vldr	s15, [r3, #8]
 8003738:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800373c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003740:	eeb0 0a67 	vmov.f32	s0, s15
 8003744:	f015 ff66 	bl	8019614 <sinf>
 8003748:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003752:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800375a:	eeb0 0a67 	vmov.f32	s0, s15
 800375e:	f015 ff0d 	bl	801957c <cosf>
 8003762:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	edd3 7a01 	vldr	s15, [r3, #4]
 800376c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003774:	eeb0 0a67 	vmov.f32	s0, s15
 8003778:	f015 ff4c 	bl	8019614 <sinf>
 800377c:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800378a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378e:	eeb0 0a67 	vmov.f32	s0, s15
 8003792:	f015 fef3 	bl	801957c <cosf>
 8003796:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037a8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ac:	f015 ff32 	bl	8019614 <sinf>
 80037b0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 80037b4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80037b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80037bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80037c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c8:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80037cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80037d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037d4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e0:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 80037e4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80037e8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80037ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80037f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80037fc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003800:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003804:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800380c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003810:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 8003814:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003818:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800381c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003820:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003828:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800382c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003830:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003834:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003840:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 8003844:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003848:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800384c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003850:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003858:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800385c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003860:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003864:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003870:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 8003874:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003878:	f107 0318 	add.w	r3, r7, #24
 800387c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800387e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388a:	ee06 0a10 	vmov	s12, r0
 800388e:	ee06 1a90 	vmov	s13, r1
 8003892:	ee07 2a10 	vmov	s14, r2
 8003896:	ee07 3a90 	vmov	s15, r3
}
 800389a:	eeb0 0a46 	vmov.f32	s0, s12
 800389e:	eef0 0a66 	vmov.f32	s1, s13
 80038a2:	eeb0 1a47 	vmov.f32	s2, s14
 80038a6:	eef0 1a67 	vmov.f32	s3, s15
 80038aa:	3754      	adds	r7, #84	@ 0x54
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 80038b0:	b490      	push	{r4, r7}
 80038b2:	b08e      	sub	sp, #56	@ 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6178      	str	r0, [r7, #20]
 80038b8:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	ed93 7a00 	vldr	s14, [r3]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	edd3 7a00 	vldr	s15, [r3]
 80038c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ca:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80038ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f2:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003906:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 800390a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800390e:	f107 0318 	add.w	r3, r7, #24
 8003912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800391a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800391c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003920:	ee06 0a10 	vmov	s12, r0
 8003924:	ee06 1a90 	vmov	s13, r1
 8003928:	ee07 2a10 	vmov	s14, r2
 800392c:	ee07 3a90 	vmov	s15, r3
}
 8003930:	eeb0 0a46 	vmov.f32	s0, s12
 8003934:	eef0 0a66 	vmov.f32	s1, s13
 8003938:	eeb0 1a47 	vmov.f32	s2, s14
 800393c:	eef0 1a67 	vmov.f32	s3, s15
 8003940:	3738      	adds	r7, #56	@ 0x38
 8003942:	46bd      	mov	sp, r7
 8003944:	bc90      	pop	{r4, r7}
 8003946:	4770      	bx	lr

08003948 <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 8003948:	b490      	push	{r4, r7}
 800394a:	b08e      	sub	sp, #56	@ 0x38
 800394c:	af00      	add	r7, sp, #0
 800394e:	6178      	str	r0, [r7, #20]
 8003950:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	ed93 7a00 	vldr	s14, [r3]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003962:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	ed93 7a01 	vldr	s14, [r3, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	edd3 7a02 	vldr	s15, [r3, #8]
 8003986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398a:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	ed93 7a03 	vldr	s14, [r3, #12]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	edd3 7a03 	vldr	s15, [r3, #12]
 800399a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800399e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 80039a2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80039a6:	f107 0318 	add.w	r3, r7, #24
 80039aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80039b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b8:	ee06 0a10 	vmov	s12, r0
 80039bc:	ee06 1a90 	vmov	s13, r1
 80039c0:	ee07 2a10 	vmov	s14, r2
 80039c4:	ee07 3a90 	vmov	s15, r3
}
 80039c8:	eeb0 0a46 	vmov.f32	s0, s12
 80039cc:	eef0 0a66 	vmov.f32	s1, s13
 80039d0:	eeb0 1a47 	vmov.f32	s2, s14
 80039d4:	eef0 1a67 	vmov.f32	s3, s15
 80039d8:	3738      	adds	r7, #56	@ 0x38
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc90      	pop	{r4, r7}
 80039de:	4770      	bx	lr

080039e0 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	@ 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6178      	str	r0, [r7, #20]
 80039e8:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff fb20 	bl	8003030 <quatconj>
 80039f0:	eeb0 6a40 	vmov.f32	s12, s0
 80039f4:	eef0 6a60 	vmov.f32	s13, s1
 80039f8:	eeb0 7a41 	vmov.f32	s14, s2
 80039fc:	eef0 7a61 	vmov.f32	s15, s3
 8003a00:	ed87 6a06 	vstr	s12, [r7, #24]
 8003a04:	edc7 6a07 	vstr	s13, [r7, #28]
 8003a08:	ed87 7a08 	vstr	s14, [r7, #32]
 8003a0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8003a10:	f107 0318 	add.w	r3, r7, #24
 8003a14:	4619      	mov	r1, r3
 8003a16:	6938      	ldr	r0, [r7, #16]
 8003a18:	f7ff fc01 	bl	800321e <quatmultiply>
 8003a1c:	eeb0 6a40 	vmov.f32	s12, s0
 8003a20:	eef0 6a60 	vmov.f32	s13, s1
 8003a24:	eeb0 7a41 	vmov.f32	s14, s2
 8003a28:	eef0 7a61 	vmov.f32	s15, s3
 8003a2c:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8003a30:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8003a34:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8003a38:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8003a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a44:	ee06 0a10 	vmov	s12, r0
 8003a48:	ee06 1a90 	vmov	s13, r1
 8003a4c:	ee07 2a10 	vmov	s14, r2
 8003a50:	ee07 3a90 	vmov	s15, r3
}
 8003a54:	eeb0 0a46 	vmov.f32	s0, s12
 8003a58:	eef0 0a66 	vmov.f32	s1, s13
 8003a5c:	eeb0 1a47 	vmov.f32	s2, s14
 8003a60:	eef0 1a67 	vmov.f32	s3, s15
 8003a64:	3738      	adds	r7, #56	@ 0x38
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b08b      	sub	sp, #44	@ 0x2c
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6178      	str	r0, [r7, #20]
 8003a74:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a78:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a80:	edc7 1a01 	vstr	s3, [r7, #4]
 8003a84:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 8003a88:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f018 fb5a 	bl	801c148 <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8003a94:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aac:	ed97 6a06 	vldr	s12, [r7, #24]
 8003ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ab4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ab8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003abc:	eeb0 0a46 	vmov.f32	s0, s12
 8003ac0:	eef0 0a66 	vmov.f32	s1, s13
 8003ac4:	eeb0 1a47 	vmov.f32	s2, s14
 8003ac8:	eef0 1a67 	vmov.f32	s3, s15
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f000 f85d 	bl	8003b8c <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8003ada:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003aea:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003af4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003afe:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3388      	adds	r3, #136	@ 0x88
 8003b06:	edd7 0a02 	vldr	s1, [r7, #8]
 8003b0a:	ed97 0a04 	vldr	s0, [r7, #16]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fdae 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3398      	adds	r3, #152	@ 0x98
 8003b18:	edd7 0a02 	vldr	s1, [r7, #8]
 8003b1c:	ed97 0a04 	vldr	s0, [r7, #16]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd fda5 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	33a8      	adds	r3, #168	@ 0xa8
 8003b2a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003b2e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd fd9c 	bl	8001670 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	33b8      	adds	r3, #184	@ 0xb8
 8003b3c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003b40:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd fd93 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	33c8      	adds	r3, #200	@ 0xc8
 8003b4e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003b52:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fd8a 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	33d8      	adds	r3, #216	@ 0xd8
 8003b60:	edd7 0a01 	vldr	s1, [r7, #4]
 8003b64:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fd81 	bl	8001670 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3370      	adds	r3, #112	@ 0x70
 8003b72:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003b88 <imu_init+0x11c>
 8003b76:	ed97 0a00 	vldr	s0, [r7]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fa70 	bl	8004060 <madgwick_filter_init>
}
 8003b80:	bf00      	nop
 8003b82:	372c      	adds	r7, #44	@ 0x2c
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}
 8003b88:	3db2b8c2 	.word	0x3db2b8c2

08003b8c <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b08f      	sub	sp, #60	@ 0x3c
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6178      	str	r0, [r7, #20]
 8003b94:	eeb0 6a40 	vmov.f32	s12, s0
 8003b98:	eef0 6a60 	vmov.f32	s13, s1
 8003b9c:	eeb0 7a41 	vmov.f32	s14, s2
 8003ba0:	eef0 7a61 	vmov.f32	s15, s3
 8003ba4:	ed87 6a01 	vstr	s12, [r7, #4]
 8003ba8:	edc7 6a02 	vstr	s13, [r7, #8]
 8003bac:	ed87 7a03 	vstr	s14, [r7, #12]
 8003bb0:	edc7 7a04 	vstr	s15, [r7, #16]
	quaternion q_ref = IMU_DEFAULT_LEVELD_ATTITUDE_Q;      // "leveled = identity"
 8003bb4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	637b      	str	r3, [r7, #52]	@ 0x34
	im->q_offset = quat_error(&q_ref, &leveld_attitude_q);
 8003bcc:	697c      	ldr	r4, [r7, #20]
 8003bce:	1d3a      	adds	r2, r7, #4
 8003bd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ff02 	bl	80039e0 <quat_error>
 8003bdc:	eeb0 6a40 	vmov.f32	s12, s0
 8003be0:	eef0 6a60 	vmov.f32	s13, s1
 8003be4:	eeb0 7a41 	vmov.f32	s14, s2
 8003be8:	eef0 7a61 	vmov.f32	s15, s3
 8003bec:	ed84 6a4d 	vstr	s12, [r4, #308]	@ 0x134
 8003bf0:	edc4 6a4e 	vstr	s13, [r4, #312]	@ 0x138
 8003bf4:	ed84 7a4f 	vstr	s14, [r4, #316]	@ 0x13c
 8003bf8:	edc4 7a50 	vstr	s15, [r4, #320]	@ 0x140
}
 8003bfc:	bf00      	nop
 8003bfe:	373c      	adds	r7, #60	@ 0x3c
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd90      	pop	{r4, r7, pc}

08003c04 <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	eef0 6a40 	vmov.f32	s13, s0
 8003c10:	eeb0 7a60 	vmov.f32	s14, s1
 8003c14:	eef0 7a41 	vmov.f32	s15, s2
 8003c18:	edc7 6a00 	vstr	s13, [r7]
 8003c1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8003c20:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	330c      	adds	r3, #12
 8003c28:	463a      	mov	r2, r7
 8003c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 8003c30:	ed97 7a00 	vldr	s14, [r7]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8003c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 8003c44:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8003c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 8003c58:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8003c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003c78:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f7fd fd5b 	bl	8001738 <pt1_filter_apply_lowpass>
 8003c82:	eef0 7a40 	vmov.f32	s15, s0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003c98:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7fd fd4b 	bl	8001738 <pt1_filter_apply_lowpass>
 8003ca2:	eef0 7a40 	vmov.f32	s15, s0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fd fd3b 	bl	8001738 <pt1_filter_apply_lowpass>
 8003cc2:	eef0 7a40 	vmov.f32	s15, s0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	333c      	adds	r3, #60	@ 0x3c
 8003cd6:	68fc      	ldr	r4, [r7, #12]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f7ff fb5b 	bl	8003396 <quatrotate>
 8003ce0:	eef0 6a40 	vmov.f32	s13, s0
 8003ce4:	eeb0 7a60 	vmov.f32	s14, s1
 8003ce8:	eef0 7a41 	vmov.f32	s15, s2
 8003cec:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8003cf0:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8003cf4:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd90      	pop	{r4, r7, pc}

08003d00 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	eef0 6a40 	vmov.f32	s13, s0
 8003d0c:	eeb0 7a60 	vmov.f32	s14, s1
 8003d10:	eef0 7a41 	vmov.f32	s15, s2
 8003d14:	edc7 6a00 	vstr	s13, [r7]
 8003d18:	ed87 7a01 	vstr	s14, [r7, #4]
 8003d1c:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	461c      	mov	r4, r3
 8003d24:	463b      	mov	r3, r7
 8003d26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	33f4      	adds	r3, #244	@ 0xf4
 8003d38:	463a      	mov	r2, r7
 8003d3a:	f102 0408 	add.w	r4, r2, #8
 8003d3e:	463a      	mov	r2, r7
 8003d40:	1d11      	adds	r1, r2, #4
 8003d42:	4638      	mov	r0, r7
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	462b      	mov	r3, r5
 8003d48:	4622      	mov	r2, r4
 8003d4a:	f7ff f8a9 	bl	8002ea0 <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3318      	adds	r3, #24
 8003d52:	463a      	mov	r2, r7
 8003d54:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d56:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3388      	adds	r3, #136	@ 0x88
 8003d5e:	edd7 7a00 	vldr	s15, [r7]
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd fce6 	bl	8001738 <pt1_filter_apply_lowpass>
 8003d6c:	eef0 7a40 	vmov.f32	s15, s0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3398      	adds	r3, #152	@ 0x98
 8003d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fcd8 	bl	8001738 <pt1_filter_apply_lowpass>
 8003d88:	eef0 7a40 	vmov.f32	s15, s0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	33a8      	adds	r3, #168	@ 0xa8
 8003d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fcca 	bl	8001738 <pt1_filter_apply_lowpass>
 8003da4:	eef0 7a40 	vmov.f32	s15, s0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3330      	adds	r3, #48	@ 0x30
 8003db8:	68fc      	ldr	r4, [r7, #12]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7ff faea 	bl	8003396 <quatrotate>
 8003dc2:	eef0 6a40 	vmov.f32	s13, s0
 8003dc6:	eeb0 7a60 	vmov.f32	s14, s1
 8003dca:	eef0 7a41 	vmov.f32	s15, s2
 8003dce:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8003dd2:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8003dd6:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bdb0      	pop	{r4, r5, r7, pc}

08003de2 <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8003de2:	b590      	push	{r4, r7, lr}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 8003df6:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 8003e00:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 8003e0a:	eef1 7a67 	vneg.f32	s15, s15
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 8003e20:	eef0 2a45 	vmov.f32	s5, s10
 8003e24:	eeb0 2a65 	vmov.f32	s4, s11
 8003e28:	eef0 1a46 	vmov.f32	s3, s12
 8003e2c:	eeb0 1a67 	vmov.f32	s2, s15
 8003e30:	eef0 0a66 	vmov.f32	s1, s13
 8003e34:	eeb0 0a47 	vmov.f32	s0, s14
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 f935 	bl	80040a8 <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8003e46:	3370      	adds	r3, #112	@ 0x70
 8003e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd90      	pop	{r4, r7, pc}

08003e56 <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	61f8      	str	r0, [r7, #28]
 8003e5e:	eeb0 5a40 	vmov.f32	s10, s0
 8003e62:	eef0 5a60 	vmov.f32	s11, s1
 8003e66:	eeb0 6a41 	vmov.f32	s12, s2
 8003e6a:	eef0 6a61 	vmov.f32	s13, s3
 8003e6e:	eeb0 7a42 	vmov.f32	s14, s4
 8003e72:	eef0 7a62 	vmov.f32	s15, s5
 8003e76:	ed87 5a04 	vstr	s10, [r7, #16]
 8003e7a:	edc7 5a05 	vstr	s11, [r7, #20]
 8003e7e:	ed87 6a06 	vstr	s12, [r7, #24]
 8003e82:	edc7 6a01 	vstr	s13, [r7, #4]
 8003e86:	ed87 7a02 	vstr	s14, [r7, #8]
 8003e8a:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 8003e8e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003e92:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e96:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e9a:	eeb0 0a66 	vmov.f32	s0, s13
 8003e9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ea2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ea6:	69f8      	ldr	r0, [r7, #28]
 8003ea8:	f7ff ff2a 	bl	8003d00 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 8003eac:	edd7 6a01 	vldr	s13, [r7, #4]
 8003eb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb8:	eeb0 0a66 	vmov.f32	s0, s13
 8003ebc:	eef0 0a47 	vmov.f32	s1, s14
 8003ec0:	eeb0 1a67 	vmov.f32	s2, s15
 8003ec4:	69f8      	ldr	r0, [r7, #28]
 8003ec6:	f7ff fe9d 	bl	8003c04 <imu_update_gyro>
	imu_update_madgwick(im);
 8003eca:	69f8      	ldr	r0, [r7, #28]
 8003ecc:	f7ff ff89 	bl	8003de2 <imu_update_madgwick>
}
 8003ed0:	bf00      	nop
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	eef0 6a40 	vmov.f32	s13, s0
 8003ee4:	eeb0 7a60 	vmov.f32	s14, s1
 8003ee8:	eef0 7a41 	vmov.f32	s15, s2
 8003eec:	edc7 6a00 	vstr	s13, [r7]
 8003ef0:	ed87 7a01 	vstr	s14, [r7, #4]
 8003ef4:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	@ 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6178      	str	r0, [r7, #20]
 8003f24:	eef0 6a40 	vmov.f32	s13, s0
 8003f28:	eeb0 7a60 	vmov.f32	s14, s1
 8003f2c:	eef0 7a41 	vmov.f32	s15, s2
 8003f30:	6079      	str	r1, [r7, #4]
 8003f32:	edc7 6a02 	vstr	s13, [r7, #8]
 8003f36:	ed87 7a03 	vstr	s14, [r7, #12]
 8003f3a:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e023      	b.n	8003fa4 <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e01a      	b.n	8003f98 <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	441a      	add	r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4413      	add	r3, r2
 8003f88:	333c      	adds	r3, #60	@ 0x3c
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4403      	add	r3, r0
 8003f8e:	3304      	adds	r3, #4
 8003f90:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	3301      	adds	r3, #1
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d9e1      	bls.n	8003f62 <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d9d8      	bls.n	8003f5c <imu_set_accel_bias+0x40>
		}
	}
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	3724      	adds	r7, #36	@ 0x24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 8003fb8:	b490      	push	{r4, r7}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	3360      	adds	r3, #96	@ 0x60
 8003fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	3348      	adds	r3, #72	@ 0x48
 8003fe8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	3354      	adds	r3, #84	@ 0x54
 8003ffe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bc90      	pop	{r4, r7}
 800400e:	4770      	bx	lr

08004010 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	ca07      	ldmia	r2, {r0, r1, r2}
 8004026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 8004036:	b490      	push	{r4, r7}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4614      	mov	r4, r2
 800404c:	330c      	adds	r3, #12
 800404e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bc90      	pop	{r4, r7}
 800405e:	4770      	bx	lr

08004060 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	ed87 0a02 	vstr	s0, [r7, #8]
 800406c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004076:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	615a      	str	r2, [r3, #20]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b0b1      	sub	sp, #196	@ 0xc4
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	61f8      	str	r0, [r7, #28]
 80040b0:	ed87 0a06 	vstr	s0, [r7, #24]
 80040b4:	edc7 0a05 	vstr	s1, [r7, #20]
 80040b8:	ed87 1a04 	vstr	s2, [r7, #16]
 80040bc:	edc7 1a03 	vstr	s3, [r7, #12]
 80040c0:	ed87 2a02 	vstr	s4, [r7, #8]
 80040c4:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 80040ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 80040d4:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 80040d8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80040dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 80040e2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 800410a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 8004116:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800411a:	2230      	movs	r2, #48	@ 0x30
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f018 f812 	bl	801c148 <memset>

    struct quaternion gradient = {0.0f};
 8004124:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 8004144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004148:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff f81d 	bl	800318c <quatmultiply_scalar>
 8004152:	eeb0 6a40 	vmov.f32	s12, s0
 8004156:	eef0 6a60 	vmov.f32	s13, s1
 800415a:	eeb0 7a41 	vmov.f32	s14, s2
 800415e:	eef0 7a61 	vmov.f32	s15, s3
 8004162:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8004166:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800416a:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800416e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 8004172:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004176:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f84e 	bl	800321e <quatmultiply>
 8004182:	eeb0 6a40 	vmov.f32	s12, s0
 8004186:	eef0 6a60 	vmov.f32	s13, s1
 800418a:	eeb0 7a41 	vmov.f32	s14, s2
 800418e:	eef0 7a61 	vmov.f32	s15, s3
 8004192:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8004196:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800419a:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800419e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 80041a2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe ff7e 	bl	80030a8 <quatnormalize>
 80041ac:	eeb0 6a40 	vmov.f32	s12, s0
 80041b0:	eef0 6a60 	vmov.f32	s13, s1
 80041b4:	eeb0 7a41 	vmov.f32	s14, s2
 80041b8:	eef0 7a61 	vmov.f32	s15, s3
 80041bc:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 80041c0:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 80041c4:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 80041c8:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 80041cc:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80041d0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80041d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041d8:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 80041dc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80041e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80041f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 80041f8:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80041fc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004204:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8004208:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800420c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004214:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004218:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800421c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004220:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 8004224:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004228:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004230:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004238:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 800423c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004248:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800424c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 8004258:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800425c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8004260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004264:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 8004268:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800426c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004270:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 8004274:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004278:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800427c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004280:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 8004284:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004288:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800428c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 8004290:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004294:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004298:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 800429c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80042a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042a4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 80042a8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80042ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042b0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 80042b4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80042b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042bc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 80042c6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80042ca:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80042ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 80042d6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80042da:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80042de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80042ec:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80042f0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80042f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80042fc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004308:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800430c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8004310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004318:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 800431c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004320:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004328:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800432c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004338:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 800433c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8004340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004348:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 800434c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004350:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004358:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800435c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004368:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800436c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8004370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004378:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 800437c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004380:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004388:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800438c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004398:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800439c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80043a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 80043ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fe79 	bl	80030a8 <quatnormalize>
 80043b6:	eeb0 6a40 	vmov.f32	s12, s0
 80043ba:	eef0 6a60 	vmov.f32	s13, s1
 80043be:	eeb0 7a41 	vmov.f32	s14, s2
 80043c2:	eef0 7a61 	vmov.f32	s15, s3
 80043c6:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80043ca:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80043ce:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80043d2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80043dc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80044f0 <madgwick_filter_apply+0x448>
 80043e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe fecd 	bl	800318c <quatmultiply_scalar>
 80043f2:	eeb0 6a40 	vmov.f32	s12, s0
 80043f6:	eef0 6a60 	vmov.f32	s13, s1
 80043fa:	eeb0 7a41 	vmov.f32	s14, s2
 80043fe:	eef0 7a61 	vmov.f32	s15, s3
 8004402:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8004406:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 800440a:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 800440e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 8004412:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa93 	bl	8003948 <quatsub>
 8004422:	eeb0 6a40 	vmov.f32	s12, s0
 8004426:	eef0 6a60 	vmov.f32	s13, s1
 800442a:	eeb0 7a41 	vmov.f32	s14, s2
 800442e:	eef0 7a61 	vmov.f32	s15, s3
 8004432:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 8004436:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 800443a:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 800443e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	edd3 7a04 	vldr	s15, [r3, #16]
 8004448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800444c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004450:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004454:	eeb0 0a47 	vmov.f32	s0, s14
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe fe97 	bl	800318c <quatmultiply_scalar>
 800445e:	eeb0 6a40 	vmov.f32	s12, s0
 8004462:	eef0 6a60 	vmov.f32	s13, s1
 8004466:	eeb0 7a41 	vmov.f32	s14, s2
 800446a:	eef0 7a61 	vmov.f32	s15, s3
 800446e:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 8004472:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 8004476:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 800447a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 800447e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8004482:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fa11 	bl	80038b0 <quatadd>
 800448e:	eeb0 6a40 	vmov.f32	s12, s0
 8004492:	eef0 6a60 	vmov.f32	s13, s1
 8004496:	eeb0 7a41 	vmov.f32	s14, s2
 800449a:	eef0 7a61 	vmov.f32	s15, s3
 800449e:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 80044a2:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 80044a6:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 80044aa:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 80044ae:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fdf8 	bl	80030a8 <quatnormalize>
 80044b8:	eeb0 6a40 	vmov.f32	s12, s0
 80044bc:	eef0 6a60 	vmov.f32	s13, s1
 80044c0:	eeb0 7a41 	vmov.f32	s14, s2
 80044c4:	eef0 7a61 	vmov.f32	s15, s3
 80044c8:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 80044cc:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 80044d0:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 80044d4:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	461c      	mov	r4, r3
 80044dc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80044e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80044e6:	bf00      	nop
 80044e8:	37c4      	adds	r7, #196	@ 0xc4
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd90      	pop	{r4, r7, pc}
 80044ee:	bf00      	nop
 80044f0:	3f5db3d7 	.word	0x3f5db3d7

080044f4 <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 80044f4:	b480      	push	{r7}
 80044f6:	b097      	sub	sp, #92	@ 0x5c
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80044fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8004502:	ed87 1a03 	vstr	s2, [r7, #12]
 8004506:	edc7 1a02 	vstr	s3, [r7, #8]
 800450a:	ed87 2a01 	vstr	s4, [r7, #4]
 800450e:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 8004510:	edd7 7a05 	vldr	s15, [r7, #20]
 8004514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451c:	d502      	bpl.n	8004524 <motor_mixer_quad_x+0x30>
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e00c      	b.n	800453e <motor_mixer_quad_x+0x4a>
 8004524:	edd7 7a05 	vldr	s15, [r7, #20]
 8004528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800452c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	dd02      	ble.n	800453c <motor_mixer_quad_x+0x48>
 8004536:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800453a:	e000      	b.n	800453e <motor_mixer_quad_x+0x4a>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 8004540:	edd7 7a01 	vldr	s15, [r7, #4]
 8004544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d502      	bpl.n	8004554 <motor_mixer_quad_x+0x60>
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e00c      	b.n	800456e <motor_mixer_quad_x+0x7a>
 8004554:	edd7 7a01 	vldr	s15, [r7, #4]
 8004558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800455c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	dd02      	ble.n	800456c <motor_mixer_quad_x+0x78>
 8004566:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800456a:	e000      	b.n	800456e <motor_mixer_quad_x+0x7a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 8004570:	edd7 7a04 	vldr	s15, [r7, #16]
 8004574:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80047cc <motor_mixer_quad_x+0x2d8>
 8004578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 8004580:	edd7 7a03 	vldr	s15, [r7, #12]
 8004584:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80047cc <motor_mixer_quad_x+0x2d8>
 8004588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800458c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 8004590:	edd7 7a02 	vldr	s15, [r7, #8]
 8004594:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80047cc <motor_mixer_quad_x+0x2d8>
 8004598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800459c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 80045a0:	2300      	movs	r3, #0
 80045a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a4:	e03a      	b.n	800461c <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 80045a6:	498a      	ldr	r1, [pc, #552]	@ (80047d0 <motor_mixer_quad_x+0x2dc>)
 80045a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	ed93 7a00 	vldr	s14, [r3]
 80045b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80045bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045c8:	4981      	ldr	r1, [pc, #516]	@ (80047d0 <motor_mixer_quad_x+0x2dc>)
 80045ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3304      	adds	r3, #4
 80045d8:	edd3 6a00 	vldr	s13, [r3]
 80045dc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80045e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045e8:	4979      	ldr	r1, [pc, #484]	@ (80047d0 <motor_mixer_quad_x+0x2dc>)
 80045ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3308      	adds	r3, #8
 80045f8:	edd3 6a00 	vldr	s13, [r3]
 80045fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	3358      	adds	r3, #88	@ 0x58
 800460e:	443b      	add	r3, r7
 8004610:	3b40      	subs	r3, #64	@ 0x40
 8004612:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 8004616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004618:	3301      	adds	r3, #1
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
 800461c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800461e:	2b03      	cmp	r3, #3
 8004620:	ddc1      	ble.n	80045a6 <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	653b      	str	r3, [r7, #80]	@ 0x50
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 800462a:	2301      	movs	r3, #1
 800462c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800462e:	e02c      	b.n	800468a <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 8004630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	3358      	adds	r3, #88	@ 0x58
 8004636:	443b      	add	r3, r7
 8004638:	3b40      	subs	r3, #64	@ 0x40
 800463a:	edd3 7a00 	vldr	s15, [r3]
 800463e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	dd06      	ble.n	800465a <motor_mixer_quad_x+0x166>
 800464c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	3358      	adds	r3, #88	@ 0x58
 8004652:	443b      	add	r3, r7
 8004654:	3b40      	subs	r3, #64	@ 0x40
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 800465a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	3358      	adds	r3, #88	@ 0x58
 8004660:	443b      	add	r3, r7
 8004662:	3b40      	subs	r3, #64	@ 0x40
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800466c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	d506      	bpl.n	8004684 <motor_mixer_quad_x+0x190>
 8004676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	3358      	adds	r3, #88	@ 0x58
 800467c:	443b      	add	r3, r7
 800467e:	3b40      	subs	r3, #64	@ 0x40
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 8004684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004686:	3301      	adds	r3, #1
 8004688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800468a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800468c:	2b03      	cmp	r3, #3
 800468e:	ddcf      	ble.n	8004630 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 8004690:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004694:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a0:	dd22      	ble.n	80046e8 <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 80046a2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80046a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 80046b2:	2300      	movs	r3, #0
 80046b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b6:	e014      	b.n	80046e2 <motor_mixer_quad_x+0x1ee>
 80046b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	3358      	adds	r3, #88	@ 0x58
 80046be:	443b      	add	r3, r7
 80046c0:	3b40      	subs	r3, #64	@ 0x40
 80046c2:	ed93 7a00 	vldr	s14, [r3]
 80046c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80046ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	3358      	adds	r3, #88	@ 0x58
 80046d4:	443b      	add	r3, r7
 80046d6:	3b40      	subs	r3, #64	@ 0x40
 80046d8:	edc3 7a00 	vstr	s15, [r3]
 80046dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046de:	3301      	adds	r3, #1
 80046e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	dde7      	ble.n	80046b8 <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 80046e8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80046ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d522      	bpl.n	800473c <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 80046f6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80047d4 <motor_mixer_quad_x+0x2e0>
 80046fa:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80046fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004702:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 8004706:	2300      	movs	r3, #0
 8004708:	643b      	str	r3, [r7, #64]	@ 0x40
 800470a:	e014      	b.n	8004736 <motor_mixer_quad_x+0x242>
 800470c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	3358      	adds	r3, #88	@ 0x58
 8004712:	443b      	add	r3, r7
 8004714:	3b40      	subs	r3, #64	@ 0x40
 8004716:	ed93 7a00 	vldr	s14, [r3]
 800471a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800471e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3358      	adds	r3, #88	@ 0x58
 8004728:	443b      	add	r3, r7
 800472a:	3b40      	subs	r3, #64	@ 0x40
 800472c:	edc3 7a00 	vstr	s15, [r3]
 8004730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004732:	3301      	adds	r3, #1
 8004734:	643b      	str	r3, [r7, #64]	@ 0x40
 8004736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004738:	2b03      	cmp	r3, #3
 800473a:	dde7      	ble.n	800470c <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 800473c:	2300      	movs	r3, #0
 800473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004740:	e03a      	b.n	80047b8 <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 8004742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	3358      	adds	r3, #88	@ 0x58
 8004748:	443b      	add	r3, r7
 800474a:	3b40      	subs	r3, #64	@ 0x40
 800474c:	edd3 7a00 	vldr	s15, [r3]
 8004750:	ed97 7a01 	vldr	s14, [r7, #4]
 8004754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	dd01      	ble.n	8004762 <motor_mixer_quad_x+0x26e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	e016      	b.n	8004790 <motor_mixer_quad_x+0x29c>
 8004762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	3358      	adds	r3, #88	@ 0x58
 8004768:	443b      	add	r3, r7
 800476a:	3b40      	subs	r3, #64	@ 0x40
 800476c:	edd3 7a00 	vldr	s15, [r3]
 8004770:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477c:	dd02      	ble.n	8004784 <motor_mixer_quad_x+0x290>
 800477e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004782:	e005      	b.n	8004790 <motor_mixer_quad_x+0x29c>
 8004784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	3358      	adds	r3, #88	@ 0x58
 800478a:	443b      	add	r3, r7
 800478c:	3b40      	subs	r3, #64	@ 0x40
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	3258      	adds	r2, #88	@ 0x58
 8004796:	443a      	add	r2, r7
 8004798:	3a40      	subs	r2, #64	@ 0x40
 800479a:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 800479c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	4413      	add	r3, r2
 80047a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047a6:	0092      	lsls	r2, r2, #2
 80047a8:	3258      	adds	r2, #88	@ 0x58
 80047aa:	443a      	add	r2, r7
 80047ac:	3a40      	subs	r2, #64	@ 0x40
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80047b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b4:	3301      	adds	r3, #1
 80047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	ddc1      	ble.n	8004742 <motor_mixer_quad_x+0x24e>
    }
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	375c      	adds	r7, #92	@ 0x5c
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	3ceaaefa 	.word	0x3ceaaefa
 80047d0:	080220b8 	.word	0x080220b8
 80047d4:	00000000 	.word	0x00000000

080047d8 <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6178      	str	r0, [r7, #20]
 80047e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80047e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80047e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80047ec:	edc7 1a01 	vstr	s3, [r7, #4]
 80047f0:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4a07      	ldr	r2, [pc, #28]	@ (800484c <pid_init+0x74>)
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	61da      	str	r2, [r3, #28]
}
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	bf800000 	.word	0xbf800000

08004850 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	61f8      	str	r0, [r7, #28]
 8004858:	ed87 0a06 	vstr	s0, [r7, #24]
 800485c:	edc7 0a05 	vstr	s1, [r7, #20]
 8004860:	ed87 1a04 	vstr	s2, [r7, #16]
 8004864:	edc7 1a03 	vstr	s3, [r7, #12]
 8004868:	ed87 2a02 	vstr	s4, [r7, #8]
 800486c:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 8004870:	ed97 2a02 	vldr	s4, [r7, #8]
 8004874:	edd7 1a03 	vldr	s3, [r7, #12]
 8004878:	ed97 1a04 	vldr	s2, [r7, #16]
 800487c:	edd7 0a05 	vldr	s1, [r7, #20]
 8004880:	ed97 0a06 	vldr	s0, [r7, #24]
 8004884:	69f8      	ldr	r0, [r7, #28]
 8004886:	f7ff ffa7 	bl	80047d8 <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 800488a:	ed97 0a01 	vldr	s0, [r7, #4]
 800488e:	69f8      	ldr	r0, [r7, #28]
 8004890:	f000 f8d4 	bl	8004a3c <pid_set_integral_limit>
}
 8004894:	bf00      	nop
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <pid_calculate>:

float pid_calculate(pid_t *pid, float setpoint, float process_value, float dt) {
 800489c:	b480      	push	{r7}
 800489e:	b08b      	sub	sp, #44	@ 0x2c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80048a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80048ac:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 80048b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80048b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80048b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048bc:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80048c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 80048e4:	edd7 7a00 	vldr	s15, [r7]
 80048e8:	eef0 7ae7 	vabs.f32	s15, s15
 80048ec:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 80048fc:	edd7 7a00 	vldr	s15, [r7]
 8004900:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004a38 <pid_calculate+0x19c>
 8004904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490c:	dd5c      	ble.n	80049c8 <pid_calculate+0x12c>
        pid->integral += error * dt;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	ed93 7a08 	vldr	s14, [r3, #32]
 8004914:	edd7 6a05 	vldr	s13, [r7, #20]
 8004918:	edd7 7a00 	vldr	s15, [r7]
 800491c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004930:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8004a38 <pid_calculate+0x19c>
 8004934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	dd24      	ble.n	8004988 <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	ed93 7a08 	vldr	s14, [r3, #32]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800494a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	dd04      	ble.n	800495e <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]
 800495c:	e014      	b.n	8004988 <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	ed93 7a08 	vldr	s14, [r3, #32]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800496a:	eef1 7a67 	vneg.f32	s15, s15
 800496e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	d507      	bpl.n	8004988 <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800497e:	eef1 7a67 	vneg.f32	s15, s15
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	ed93 7a03 	vldr	s14, [r3, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	edd3 7a08 	vldr	s15, [r3, #32]
 8004994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004998:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	edd3 7a06 	vldr	s15, [r3, #24]
 80049a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80049a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80049aa:	ed97 7a00 	vldr	s14, [r7]
 80049ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80049bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80049c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 80049c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80049cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80049d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80049d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049dc:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	edd3 7a00 	vldr	s15, [r3]
 80049e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80049ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f2:	dd03      	ble.n	80049fc <pid_calculate+0x160>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e00c      	b.n	8004a16 <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a02:	ed97 7a06 	vldr	s14, [r7, #24]
 8004a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	d502      	bpl.n	8004a16 <pid_calculate+0x17a>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	619a      	str	r2, [r3, #24]
    return output;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	ee07 3a90 	vmov	s15, r3
}
 8004a28:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2c:	372c      	adds	r7, #44	@ 0x2c
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	34000000 	.word	0x34000000

08004a3c <pid_set_integral_limit>:
void pid_set_min_output(pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(pid_t *pid, float val) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 8004a48:	edd7 7a00 	vldr	s15, [r7]
 8004a4c:	eef0 7ae7 	vabs.f32	s15, s15
 8004a50:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a60:	ed97 7a00 	vldr	s14, [r7]
 8004a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	d503      	bpl.n	8004a76 <pid_set_integral_limit+0x3a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 8004a74:	e013      	b.n	8004a9e <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a7c:	edd7 7a00 	vldr	s15, [r7]
 8004a80:	eef1 7a67 	vneg.f32	s15, s15
 8004a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	d400      	bmi.n	8004a90 <pid_set_integral_limit+0x54>
}
 8004a8e:	e006      	b.n	8004a9e <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8004a90:	edd7 7a00 	vldr	s15, [r7]
 8004a94:	eef1 7a67 	vneg.f32	s15, s15
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <pid_reset>:
float pid_get_Kp(pid_t *pid) { return pid->Kp; }
float pid_get_Ki(pid_t *pid) { return pid->Ki; }
float pid_get_Kd(pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(pid_t *pid) { return pid->integral; }

void pid_reset(pid_t *pid) {
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004af4:	edc7 0a01 	vstr	s1, [r7, #4]
 8004af8:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d076      	beq.n	8004bf0 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8004b02:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8004b06:	2100      	movs	r1, #0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f017 fb1d 	bl	801c148 <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	33c4      	adds	r3, #196	@ 0xc4
 8004b18:	edd7 0a02 	vldr	s1, [r7, #8]
 8004b1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fc fe3c 	bl	800179e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	33ec      	adds	r3, #236	@ 0xec
 8004b2a:	edd7 0a02 	vldr	s1, [r7, #8]
 8004b2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fc fe33 	bl	800179e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8004b3e:	edd7 0a02 	vldr	s1, [r7, #8]
 8004b42:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc fe29 	bl	800179e <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004b52:	edd7 0a02 	vldr	s1, [r7, #8]
 8004b56:	ed97 0a00 	vldr	s0, [r7]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc fd88 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004b66:	edd7 0a02 	vldr	s1, [r7, #8]
 8004b6a:	ed97 0a00 	vldr	s0, [r7]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc fd7e 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004b7a:	edd7 0a02 	vldr	s1, [r7, #8]
 8004b7e:	ed97 0a00 	vldr	s0, [r7]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc fd74 	bl	8001670 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3328      	adds	r3, #40	@ 0x28
 8004b8c:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 8004bf8 <rate_controller_init+0x110>
 8004b90:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8004bfc <rate_controller_init+0x114>
 8004b94:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8004c00 <rate_controller_init+0x118>
 8004b98:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8004bf8 <rate_controller_init+0x110>
 8004b9c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8004bf8 <rate_controller_init+0x110>
 8004ba0:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8004bf8 <rate_controller_init+0x110>
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fe53 	bl	8004850 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3354      	adds	r3, #84	@ 0x54
 8004bae:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8004bf8 <rate_controller_init+0x110>
 8004bb2:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8004bfc <rate_controller_init+0x114>
 8004bb6:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8004c00 <rate_controller_init+0x118>
 8004bba:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8004bf8 <rate_controller_init+0x110>
 8004bbe:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8004bf8 <rate_controller_init+0x110>
 8004bc2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8004bf8 <rate_controller_init+0x110>
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fe42 	bl	8004850 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3380      	adds	r3, #128	@ 0x80
 8004bd0:	eddf 2a09 	vldr	s5, [pc, #36]	@ 8004bf8 <rate_controller_init+0x110>
 8004bd4:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8004bfc <rate_controller_init+0x114>
 8004bd8:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8004c00 <rate_controller_init+0x118>
 8004bdc:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8004bf8 <rate_controller_init+0x110>
 8004be0:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8004bf8 <rate_controller_init+0x110>
 8004be4:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8004bf8 <rate_controller_init+0x110>
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fe31 	bl	8004850 <pid_init_with_integral_limit>
 8004bee:	e000      	b.n	8004bf2 <rate_controller_init+0x10a>
        return;
 8004bf0:	bf00      	nop
}
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	410ba058 	.word	0x410ba058
 8004c00:	c10ba058 	.word	0xc10ba058

08004c04 <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6178      	str	r0, [r7, #20]
 8004c0c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004c10:	edc7 0a03 	vstr	s1, [r7, #12]
 8004c14:	ed87 1a02 	vstr	s2, [r7, #8]
 8004c18:	edc7 1a01 	vstr	s3, [r7, #4]
 8004c1c:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	3328      	adds	r3, #40	@ 0x28
 8004c24:	edd7 2a01 	vldr	s5, [r7, #4]
 8004c28:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004c5c <rate_controller_init_roll_pid+0x58>
 8004c2c:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004c60 <rate_controller_init_roll_pid+0x5c>
 8004c30:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004c64 <rate_controller_init_roll_pid+0x60>
 8004c34:	edd7 0a03 	vldr	s1, [r7, #12]
 8004c38:	ed97 0a04 	vldr	s0, [r7, #16]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fe07 	bl	8004850 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8004c52:	bf00      	nop
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	410ba058 	.word	0x410ba058
 8004c60:	c10ba058 	.word	0xc10ba058
 8004c64:	00000000 	.word	0x00000000

08004c68 <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6178      	str	r0, [r7, #20]
 8004c70:	ed87 0a04 	vstr	s0, [r7, #16]
 8004c74:	edc7 0a03 	vstr	s1, [r7, #12]
 8004c78:	ed87 1a02 	vstr	s2, [r7, #8]
 8004c7c:	edc7 1a01 	vstr	s3, [r7, #4]
 8004c80:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3354      	adds	r3, #84	@ 0x54
 8004c88:	edd7 2a01 	vldr	s5, [r7, #4]
 8004c8c:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004cc0 <rate_controller_init_pitch_pid+0x58>
 8004c90:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004cc4 <rate_controller_init_pitch_pid+0x5c>
 8004c94:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004cc8 <rate_controller_init_pitch_pid+0x60>
 8004c98:	edd7 0a03 	vldr	s1, [r7, #12]
 8004c9c:	ed97 0a04 	vldr	s0, [r7, #16]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fdd5 	bl	8004850 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	410ba058 	.word	0x410ba058
 8004cc4:	c10ba058 	.word	0xc10ba058
 8004cc8:	00000000 	.word	0x00000000

08004ccc <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6178      	str	r0, [r7, #20]
 8004cd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8004cd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8004cdc:	ed87 1a02 	vstr	s2, [r7, #8]
 8004ce0:	edc7 1a01 	vstr	s3, [r7, #4]
 8004ce4:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3380      	adds	r3, #128	@ 0x80
 8004cec:	edd7 2a01 	vldr	s5, [r7, #4]
 8004cf0:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004d24 <rate_controller_init_yaw_pid+0x58>
 8004cf4:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004d28 <rate_controller_init_yaw_pid+0x5c>
 8004cf8:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004d2c <rate_controller_init_yaw_pid+0x60>
 8004cfc:	edd7 0a03 	vldr	s1, [r7, #12]
 8004d00:	ed97 0a04 	vldr	s0, [r7, #16]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fda3 	bl	8004850 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	410ba058 	.word	0x410ba058
 8004d28:	c10ba058 	.word	0xc10ba058
 8004d2c:	00000000 	.word	0x00000000

08004d30 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b092      	sub	sp, #72	@ 0x48
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	61f8      	str	r0, [r7, #28]
 8004d38:	ed87 0a06 	vstr	s0, [r7, #24]
 8004d3c:	edc7 0a05 	vstr	s1, [r7, #20]
 8004d40:	ed87 1a04 	vstr	s2, [r7, #16]
 8004d44:	edc7 1a03 	vstr	s3, [r7, #12]
 8004d48:	ed87 2a02 	vstr	s4, [r7, #8]
 8004d4c:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 816c 	beq.w	8005030 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 8004da6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004daa:	eef0 7ae7 	vabs.f32	s15, s15
 8004dae:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8005038 <rate_controller_update+0x308>
 8004db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	f340 80e4 	ble.w	8004f86 <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3328      	adds	r3, #40	@ 0x28
 8004dc2:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004dc6:	edd7 0a06 	vldr	s1, [r7, #24]
 8004dca:	ed97 0a03 	vldr	s0, [r7, #12]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fd64 	bl	800489c <pid_calculate>
 8004dd4:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	3354      	adds	r3, #84	@ 0x54
 8004ddc:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004de0:	edd7 0a05 	vldr	s1, [r7, #20]
 8004de4:	ed97 0a02 	vldr	s0, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fd57 	bl	800489c <pid_calculate>
 8004dee:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3380      	adds	r3, #128	@ 0x80
 8004df6:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004dfa:	edd7 0a04 	vldr	s1, [r7, #16]
 8004dfe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fd4a 	bl	800489c <pid_calculate>
 8004e08:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e1e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004e22:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004e26:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	edd3 6a04 	vldr	s13, [r3, #16]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e44:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004e48:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004e4c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e54:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	edd3 6a05 	vldr	s13, [r3, #20]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e6a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004e6e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004e72:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004e84:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fc fc55 	bl	8001738 <pt1_filter_apply_lowpass>
 8004e8e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004e98:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fc fc4b 	bl	8001738 <pt1_filter_apply_lowpass>
 8004ea2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004eac:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc fc41 	bl	8001738 <pt1_filter_apply_lowpass>
 8004eb6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f7fc fc85 	bl	80017e4 <pt2_filter_apply_lowpass>
 8004eda:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8004ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f7fc fc73 	bl	80017e4 <pt2_filter_apply_lowpass>
 8004efe:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8004f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f18:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f7fc fc61 	bl	80017e4 <pt2_filter_apply_lowpass>
 8004f22:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 8004f26:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004f2a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f32:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 8004f36:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004f3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f42:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 8004f46:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f52:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 8004f56:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004f5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f62:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 8004f66:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004f6a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f72:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 8004f76:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004f7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f82:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004f86:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f8a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800503c <rate_controller_update+0x30c>
 8004f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f96:	d501      	bpl.n	8004f9c <rate_controller_update+0x26c>
 8004f98:	4b29      	ldr	r3, [pc, #164]	@ (8005040 <rate_controller_update+0x310>)
 8004f9a:	e00b      	b.n	8004fb4 <rate_controller_update+0x284>
 8004f9c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004fa0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005044 <rate_controller_update+0x314>
 8004fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	dd01      	ble.n	8004fb2 <rate_controller_update+0x282>
 8004fae:	4b26      	ldr	r3, [pc, #152]	@ (8005048 <rate_controller_update+0x318>)
 8004fb0:	e000      	b.n	8004fb4 <rate_controller_update+0x284>
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004fb6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004fba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800503c <rate_controller_update+0x30c>
 8004fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc6:	d501      	bpl.n	8004fcc <rate_controller_update+0x29c>
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005040 <rate_controller_update+0x310>)
 8004fca:	e00b      	b.n	8004fe4 <rate_controller_update+0x2b4>
 8004fcc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004fd0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005044 <rate_controller_update+0x314>
 8004fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fdc:	dd01      	ble.n	8004fe2 <rate_controller_update+0x2b2>
 8004fde:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <rate_controller_update+0x318>)
 8004fe0:	e000      	b.n	8004fe4 <rate_controller_update+0x2b4>
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe4:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004fe6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004fea:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800503c <rate_controller_update+0x30c>
 8004fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff6:	d501      	bpl.n	8004ffc <rate_controller_update+0x2cc>
 8004ff8:	4b11      	ldr	r3, [pc, #68]	@ (8005040 <rate_controller_update+0x310>)
 8004ffa:	e00b      	b.n	8005014 <rate_controller_update+0x2e4>
 8004ffc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005000:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005044 <rate_controller_update+0x314>
 8005004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500c:	dd01      	ble.n	8005012 <rate_controller_update+0x2e2>
 800500e:	4b0e      	ldr	r3, [pc, #56]	@ (8005048 <rate_controller_update+0x318>)
 8005010:	e000      	b.n	8005014 <rate_controller_update+0x2e4>
 8005012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800501a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005022:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800502a:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 800502e:	e000      	b.n	8005032 <rate_controller_update+0x302>
        return;
 8005030:	bf00      	nop
}
 8005032:	3748      	adds	r7, #72	@ 0x48
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	34000000 	.word	0x34000000
 800503c:	c10ba058 	.word	0xc10ba058
 8005040:	c10ba058 	.word	0xc10ba058
 8005044:	410ba058 	.word	0x410ba058
 8005048:	410ba058 	.word	0x410ba058

0800504c <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	33c4      	adds	r3, #196	@ 0xc4
 8005058:	4618      	mov	r0, r3
 800505a:	f7fc fbe0 	bl	800181e <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	33ec      	adds	r3, #236	@ 0xec
 8005062:	4618      	mov	r0, r3
 8005064:	f7fc fbdb 	bl	800181e <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800506e:	4618      	mov	r0, r3
 8005070:	f7fc fbd5 	bl	800181e <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc fb81 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8005086:	4618      	mov	r0, r3
 8005088:	f7fc fb7b 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005092:	4618      	mov	r0, r3
 8005094:	f7fc fb75 	bl	8001782 <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3328      	adds	r3, #40	@ 0x28
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fd04 	bl	8004aaa <pid_reset>
    pid_reset(&(fc->pid_pitch));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3354      	adds	r3, #84	@ 0x54
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fcff 	bl	8004aaa <pid_reset>
    pid_reset(&(fc->pid_yaw));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3380      	adds	r3, #128	@ 0x80
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fcfa 	bl	8004aaa <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d018      	beq.n	800513a <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e000      	b.n	800513c <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 800513a:	bf00      	nop
    }
}
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 8005146:	b580      	push	{r7, lr}
 8005148:	b088      	sub	sp, #32
 800514a:	af00      	add	r7, sp, #0
 800514c:	61f8      	str	r0, [r7, #28]
 800514e:	61b9      	str	r1, [r7, #24]
 8005150:	ed87 0a05 	vstr	s0, [r7, #20]
 8005154:	edc7 0a04 	vstr	s1, [r7, #16]
 8005158:	ed87 1a03 	vstr	s2, [r7, #12]
 800515c:	edc7 1a02 	vstr	s3, [r7, #8]
 8005160:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 8005164:	2230      	movs	r2, #48	@ 0x30
 8005166:	2100      	movs	r1, #0
 8005168:	69f8      	ldr	r0, [r7, #28]
 800516a:	f016 ffed 	bl	801c148 <memset>

	channel->enable_lpf = enable_lpf;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3304      	adds	r3, #4
 800517e:	edd7 0a01 	vldr	s1, [r7, #4]
 8005182:	ed97 0a05 	vldr	s0, [r7, #20]
 8005186:	4618      	mov	r0, r3
 8005188:	f7fc fa72 	bl	8001670 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80051bc:	bf00      	nop
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 80051e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80051e6:	eeb0 7ae7 	vabs.f32	s14, s15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80051f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	d503      	bpl.n	8005202 <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e02b      	b.n	800525a <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 8005202:	edd7 7a03 	vldr	s15, [r7, #12]
 8005206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800520a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520e:	dd12      	ble.n	8005236 <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	edd3 7a08 	vldr	s15, [r3, #32]
 8005216:	ed97 7a03 	vldr	s14, [r7, #12]
 800521a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	edd3 7a08 	vldr	s15, [r3, #32]
 8005224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800522c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005230:	edc7 7a03 	vstr	s15, [r7, #12]
 8005234:	e011      	b.n	800525a <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	ed93 7a08 	vldr	s14, [r3, #32]
 800523c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005240:	ee77 6a27 	vadd.f32	s13, s14, s15
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	edd3 7a08 	vldr	s15, [r3, #32]
 800524a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800524e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005256:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005260:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005268:	d01a      	beq.n	80052a0 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 800526a:	edd7 7a03 	vldr	s15, [r7, #12]
 800526e:	eeb0 7ae7 	vabs.f32	s14, s15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005280:	eef0 0a67 	vmov.f32	s1, s15
 8005284:	eeb0 0a47 	vmov.f32	s0, s14
 8005288:	f014 f82e 	bl	80192e8 <powf>
 800528c:	eef0 7a40 	vmov.f32	s15, s0
 8005290:	edd7 0a03 	vldr	s1, [r7, #12]
 8005294:	eeb0 0a67 	vmov.f32	s0, s15
 8005298:	f014 fa0c 	bl	80196b4 <copysignf>
 800529c:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80052a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	ed97 0a03 	vldr	s0, [r7, #12]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc fa38 	bl	8001738 <pt1_filter_apply_lowpass>
 80052c8:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	615a      	str	r2, [r3, #20]
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	ee07 3a90 	vmov	s15, r3
}
 80052ea:	eeb0 0a67 	vmov.f32	s0, s15
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	61f8      	str	r0, [r7, #28]
 8005300:	61b9      	str	r1, [r7, #24]
 8005302:	ed87 0a05 	vstr	s0, [r7, #20]
 8005306:	edc7 0a04 	vstr	s1, [r7, #16]
 800530a:	ed87 1a03 	vstr	s2, [r7, #12]
 800530e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005312:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	ed97 2a01 	vldr	s4, [r7, #4]
 800531c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005320:	ed97 1a03 	vldr	s2, [r7, #12]
 8005324:	edd7 0a04 	vldr	s1, [r7, #16]
 8005328:	ed97 0a05 	vldr	s0, [r7, #20]
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff09 	bl	8005146 <rc_channel_filter_init>
}
 8005334:	bf00      	nop
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8005348:	edd7 7a00 	vldr	s15, [r7]
 800534c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	d501      	bpl.n	800535e <rc_attitude_control_update_roll+0x22>
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <rc_attitude_control_update_roll+0x54>)
 800535c:	e00c      	b.n	8005378 <rc_attitude_control_update_roll+0x3c>
 800535e:	edd7 7a00 	vldr	s15, [r7]
 8005362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	dd02      	ble.n	8005376 <rc_attitude_control_update_roll+0x3a>
 8005370:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005374:	e000      	b.n	8005378 <rc_attitude_control_update_roll+0x3c>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	ed97 0a00 	vldr	s0, [r7]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff1f 	bl	80051c4 <rc_channel_filter_update>
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	bf800000 	.word	0xbf800000

08005394 <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff9b 	bl	80052da <rc_channel_filter_get_processed>
 80053a4:	eef0 7a40 	vmov.f32	s15, s0
}
 80053a8:	eeb0 0a67 	vmov.f32	s0, s15
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b088      	sub	sp, #32
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	61f8      	str	r0, [r7, #28]
 80053ba:	61b9      	str	r1, [r7, #24]
 80053bc:	ed87 0a05 	vstr	s0, [r7, #20]
 80053c0:	edc7 0a04 	vstr	s1, [r7, #16]
 80053c4:	ed87 1a03 	vstr	s2, [r7, #12]
 80053c8:	edc7 1a02 	vstr	s3, [r7, #8]
 80053cc:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3330      	adds	r3, #48	@ 0x30
 80053d4:	ed97 2a01 	vldr	s4, [r7, #4]
 80053d8:	edd7 1a02 	vldr	s3, [r7, #8]
 80053dc:	ed97 1a03 	vldr	s2, [r7, #12]
 80053e0:	edd7 0a04 	vldr	s1, [r7, #16]
 80053e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80053e8:	69b9      	ldr	r1, [r7, #24]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff feab 	bl	8005146 <rc_channel_filter_init>
}
 80053f0:	bf00      	nop
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8005404:	edd7 7a00 	vldr	s15, [r7]
 8005408:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800540c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005414:	d501      	bpl.n	800541a <rc_attitude_control_update_pitch+0x22>
 8005416:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <rc_attitude_control_update_pitch+0x54>)
 8005418:	e00c      	b.n	8005434 <rc_attitude_control_update_pitch+0x3c>
 800541a:	edd7 7a00 	vldr	s15, [r7]
 800541e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542a:	dd02      	ble.n	8005432 <rc_attitude_control_update_pitch+0x3a>
 800542c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005430:	e000      	b.n	8005434 <rc_attitude_control_update_pitch+0x3c>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3330      	adds	r3, #48	@ 0x30
 800543a:	ed97 0a00 	vldr	s0, [r7]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fec0 	bl	80051c4 <rc_channel_filter_update>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	bf800000 	.word	0xbf800000

08005450 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3330      	adds	r3, #48	@ 0x30
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff3c 	bl	80052da <rc_channel_filter_get_processed>
 8005462:	eef0 7a40 	vmov.f32	s15, s0
}
 8005466:	eeb0 0a67 	vmov.f32	s0, s15
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	61f8      	str	r0, [r7, #28]
 8005478:	61b9      	str	r1, [r7, #24]
 800547a:	ed87 0a05 	vstr	s0, [r7, #20]
 800547e:	edc7 0a04 	vstr	s1, [r7, #16]
 8005482:	ed87 1a03 	vstr	s2, [r7, #12]
 8005486:	edc7 1a02 	vstr	s3, [r7, #8]
 800548a:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3360      	adds	r3, #96	@ 0x60
 8005492:	ed97 2a01 	vldr	s4, [r7, #4]
 8005496:	edd7 1a02 	vldr	s3, [r7, #8]
 800549a:	ed97 1a03 	vldr	s2, [r7, #12]
 800549e:	edd7 0a04 	vldr	s1, [r7, #16]
 80054a2:	ed97 0a05 	vldr	s0, [r7, #20]
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fe4c 	bl	8005146 <rc_channel_filter_init>
}
 80054ae:	bf00      	nop
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80054c4:	edd7 7a00 	vldr	s15, [r7]
 80054c8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80054cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d4:	d501      	bpl.n	80054da <rc_attitude_control_update_yaw+0x22>
 80054d6:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <rc_attitude_control_update_yaw+0x54>)
 80054d8:	e00c      	b.n	80054f4 <rc_attitude_control_update_yaw+0x3c>
 80054da:	edd7 7a00 	vldr	s15, [r7]
 80054de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ea:	dd02      	ble.n	80054f2 <rc_attitude_control_update_yaw+0x3a>
 80054ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80054f0:	e000      	b.n	80054f4 <rc_attitude_control_update_yaw+0x3c>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3360      	adds	r3, #96	@ 0x60
 80054fa:	ed97 0a00 	vldr	s0, [r7]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fe60 	bl	80051c4 <rc_channel_filter_update>
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	bf800000 	.word	0xbf800000

08005510 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3360      	adds	r3, #96	@ 0x60
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fedc 	bl	80052da <rc_channel_filter_get_processed>
 8005522:	eef0 7a40 	vmov.f32	s15, s0
}
 8005526:	eeb0 0a67 	vmov.f32	s0, s15
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	61f8      	str	r0, [r7, #28]
 8005538:	61b9      	str	r1, [r7, #24]
 800553a:	ed87 0a05 	vstr	s0, [r7, #20]
 800553e:	edc7 0a04 	vstr	s1, [r7, #16]
 8005542:	ed87 1a03 	vstr	s2, [r7, #12]
 8005546:	edc7 1a02 	vstr	s3, [r7, #8]
 800554a:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	3390      	adds	r3, #144	@ 0x90
 8005552:	ed97 2a01 	vldr	s4, [r7, #4]
 8005556:	edd7 1a02 	vldr	s3, [r7, #8]
 800555a:	ed97 1a03 	vldr	s2, [r7, #12]
 800555e:	edd7 0a04 	vldr	s1, [r7, #16]
 8005562:	ed97 0a05 	vldr	s0, [r7, #20]
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fdec 	bl	8005146 <rc_channel_filter_init>
}
 800556e:	bf00      	nop
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 8005582:	edd7 7a00 	vldr	s15, [r7]
 8005586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d502      	bpl.n	8005596 <rc_attitude_control_update_throttle+0x20>
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e00c      	b.n	80055b0 <rc_attitude_control_update_throttle+0x3a>
 8005596:	edd7 7a00 	vldr	s15, [r7]
 800559a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800559e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	dd02      	ble.n	80055ae <rc_attitude_control_update_throttle+0x38>
 80055a8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80055ac:	e000      	b.n	80055b0 <rc_attitude_control_update_throttle+0x3a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3390      	adds	r3, #144	@ 0x90
 80055b6:	ed97 0a00 	vldr	s0, [r7]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fe02 	bl	80051c4 <rc_channel_filter_update>
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3390      	adds	r3, #144	@ 0x90
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fe80 	bl	80052da <rc_channel_filter_get_processed>
 80055da:	eef0 7a40 	vmov.f32	s15, s0
}
 80055de:	eeb0 0a67 	vmov.f32	s0, s15
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6178      	str	r0, [r7, #20]
 80055f0:	ed87 0a04 	vstr	s0, [r7, #16]
 80055f4:	edc7 0a03 	vstr	s1, [r7, #12]
 80055f8:	ed87 1a02 	vstr	s2, [r7, #8]
 80055fc:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 8005600:	ed97 0a04 	vldr	s0, [r7, #16]
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f7ff fe99 	bl	800533c <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 800560a:	ed97 0a03 	vldr	s0, [r7, #12]
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7ff fef2 	bl	80053f8 <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 8005614:	ed97 0a02 	vldr	s0, [r7, #8]
 8005618:	6978      	ldr	r0, [r7, #20]
 800561a:	f7ff ff4d 	bl	80054b8 <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 800561e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005622:	6978      	ldr	r0, [r7, #20]
 8005624:	f7ff ffa7 	bl	8005576 <rc_attitude_control_update_throttle>

}
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
	if (roll) {
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fea5 	bl	8005394 <rc_attitude_control_get_processed_roll>
 800564a:	eef0 7a40 	vmov.f32	s15, s0
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fef8 	bl	8005450 <rc_attitude_control_get_processed_pitch>
 8005660:	eef0 7a40 	vmov.f32	s15, s0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff4d 	bl	8005510 <rc_attitude_control_get_processed_yaw>
 8005676:	eef0 7a40 	vmov.f32	s15, s0
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ff9e 	bl	80055c8 <rc_attitude_control_get_processed_throttle>
 800568c:	eef0 7a40 	vmov.f32	s15, s0
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	edc3 7a00 	vstr	s15, [r3]
	}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <prv_parse_input>:
/**
 * \brief           Parse input string
 * \param[in]       lwobj: LwSHELL instance
 */
static void
prv_parse_input(lwshell_t* lwobj) {
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b089      	sub	sp, #36	@ 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

    /*
     * Check string length and compare with buffer pointer
     * Must be more than `1` character since we have to include end of line
     */
    s_len = strlen(lwobj->buff);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fa fdef 	bl	8000290 <strlen>
 80056b2:	60f8      	str	r0, [r7, #12]
    if (s_len != lwobj->buff_ptr || lwobj->buff_ptr == 0) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	f040 8197 	bne.w	80059f0 <prv_parse_input+0x350>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8191 	beq.w	80059f0 <prv_parse_input+0x350>
        return;
    }

    /* Set default values */
    lwobj->argc = 0;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    lwobj->argv[0] = lwobj->buff;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	1d1a      	adds	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Process complete input */
    str = lwobj->buff;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	61fb      	str	r3, [r7, #28]

    /* Process complete string */
    while (*str != '\0') {
 80056e6:	e072      	b.n	80057ce <prv_parse_input+0x12e>
        while (*str == ' ' && ++str) {} /* Remove leading spaces */
 80056e8:	bf00      	nop
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d105      	bne.n	80056fe <prv_parse_input+0x5e>
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f5      	bne.n	80056ea <prv_parse_input+0x4a>
        if (*str == '\0') {
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d068      	beq.n	80057d8 <prv_parse_input+0x138>
            break;
        }

        /* Check if it starts with quote to handle escapes */
        if (*str == '"') {
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b22      	cmp	r3, #34	@ 0x22
 800570c:	d131      	bne.n	8005772 <prv_parse_input+0xd2>
            ++str;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument after quotes */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	3324      	adds	r3, #36	@ 0x24
 8005726:	69f9      	ldr	r1, [r7, #28]
 8005728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            /* Process until end of quote */
            while (*str != '\0') {
 800572c:	e01c      	b.n	8005768 <prv_parse_input+0xc8>
                if (*str == '\\') {
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b5c      	cmp	r3, #92	@ 0x5c
 8005734:	d10a      	bne.n	800574c <prv_parse_input+0xac>
                    ++str;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
                    if (*str == '"') {
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b22      	cmp	r3, #34	@ 0x22
 8005742:	d111      	bne.n	8005768 <prv_parse_input+0xc8>
                        ++str;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3301      	adds	r3, #1
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	e00d      	b.n	8005768 <prv_parse_input+0xc8>
                    }
                } else if (*str == '"') {
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b22      	cmp	r3, #34	@ 0x22
 8005752:	d106      	bne.n	8005762 <prv_parse_input+0xc2>
                    *str = '\0';
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
                    ++str;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3301      	adds	r3, #1
 800575e:	61fb      	str	r3, [r7, #28]
                    break;
 8005760:	e030      	b.n	80057c4 <prv_parse_input+0x124>
                } else {
                    ++str;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
            while (*str != '\0') {
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1de      	bne.n	800572e <prv_parse_input+0x8e>
 8005770:	e028      	b.n	80057c4 <prv_parse_input+0x124>
                }
            }
        } else {
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument directly on character */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	3324      	adds	r3, #36	@ 0x24
 8005784:	69f9      	ldr	r1, [r7, #28]
 8005786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            while (*str != ' ' && *str != '\0') {
 800578a:	e009      	b.n	80057a0 <prv_parse_input+0x100>
                if (*str == '"') { /* Quote should not be here... */
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b22      	cmp	r3, #34	@ 0x22
 8005792:	d102      	bne.n	800579a <prv_parse_input+0xfa>
                    *str = '\0';   /* ...add NULL termination to end token */
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
                }
                ++str;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
            while (*str != ' ' && *str != '\0') {
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d003      	beq.n	80057b0 <prv_parse_input+0x110>
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ed      	bne.n	800578c <prv_parse_input+0xec>
            }
            if (*str == '\0') {
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <prv_parse_input+0x13c>
                break;
            }
            *str = '\0';
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
            ++str;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
        }

        /* Check for number of arguments */
        if (lwobj->argc == LWSHELL_ARRAYSIZE(lwobj->argv)) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d008      	beq.n	80057e0 <prv_parse_input+0x140>
    while (*str != '\0') {
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d188      	bne.n	80056e8 <prv_parse_input+0x48>
 80057d6:	e004      	b.n	80057e2 <prv_parse_input+0x142>
            break;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <prv_parse_input+0x142>
                break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <prv_parse_input+0x142>
            break;
 80057e0:	bf00      	nop
        }
    }

    /* Check for command */
    if (lwobj->argc > 0) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f340 8102 	ble.w	80059f2 <prv_parse_input+0x352>
        const lwshell_cmd_t* ccmd = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
        size_t arg_len = strlen(lwobj->argv[0]);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fa fd49 	bl	8000290 <strlen>
 80057fe:	60b8      	str	r0, [r7, #8]

#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
        /* Process all dynamic commands */
        if (ccmd == NULL && lwobj->dynamic_cmds_cnt > 0) {
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d13d      	bne.n	8005882 <prv_parse_input+0x1e2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800580c:	2b00      	cmp	r3, #0
 800580e:	d038      	beq.n	8005882 <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e02f      	b.n	8005876 <prv_parse_input+0x1d6>
                if (arg_len == strlen(lwobj->dynamic_cmds[idx].name)
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	33b4      	adds	r3, #180	@ 0xb4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f7fa fd31 	bl	8000290 <strlen>
 800582e:	4602      	mov	r2, r0
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4293      	cmp	r3, r2
 8005834:	d11c      	bne.n	8005870 <prv_parse_input+0x1d0>
                    && strncmp(lwobj->dynamic_cmds[idx].name, lwobj->argv[0], arg_len) == 0) {
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	33b4      	adds	r3, #180	@ 0xb4
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4619      	mov	r1, r3
 8005852:	f016 fc81 	bl	801c158 <strncmp>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <prv_parse_input+0x1d0>
                    ccmd = &lwobj->dynamic_cmds[idx];
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	33b0      	adds	r3, #176	@ 0xb0
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
                    break;
 800586e:	e008      	b.n	8005882 <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	3301      	adds	r3, #1
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	429a      	cmp	r2, r3
 8005880:	d3c9      	bcc.n	8005816 <prv_parse_input+0x176>
            }
        }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */

        /* Valid command ready? */
        if (ccmd != NULL) {
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d03c      	beq.n	8005902 <prv_parse_input+0x262>
            if (lwobj->argc == 2U && lwobj->argv[1][0] == '-' && lwobj->argv[1][1] == 'h'
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800588e:	2b02      	cmp	r3, #2
 8005890:	d12d      	bne.n	80058ee <prv_parse_input+0x24e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b2d      	cmp	r3, #45	@ 0x2d
 800589c:	d127      	bne.n	80058ee <prv_parse_input+0x24e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058a4:	3301      	adds	r3, #1
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b68      	cmp	r3, #104	@ 0x68
 80058aa:	d120      	bne.n	80058ee <prv_parse_input+0x24e>
                && lwobj->argv[1][2] == '\0') {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b2:	3302      	adds	r3, #2
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <prv_parse_input+0x24e>
                /* Here we can print version */
                LWSHELL_OUTPUT(lwobj, ccmd->desc);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <prv_parse_input+0x238>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d006      	beq.n	80058d8 <prv_parse_input+0x238>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	6892      	ldr	r2, [r2, #8]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, "\r\n");
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8088 	beq.w	80059f2 <prv_parse_input+0x352>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4843      	ldr	r0, [pc, #268]	@ (80059f8 <prv_parse_input+0x358>)
 80058ea:	4798      	blx	r3
 80058ec:	e081      	b.n	80059f2 <prv_parse_input+0x352>
            } else {
                ccmd->fn(lwobj->argc, lwobj->argv);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	3290      	adds	r2, #144	@ 0x90
 80058fc:	4611      	mov	r1, r2
 80058fe:	4798      	blx	r3
 8005900:	e077      	b.n	80059f2 <prv_parse_input+0x352>
            }
#if LWSHELL_CFG_USE_LIST_CMD
        } else if (strncmp(lwobj->argv[0], "listcmd", 7U) == 0) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	2207      	movs	r2, #7
 800590a:	493c      	ldr	r1, [pc, #240]	@ (80059fc <prv_parse_input+0x35c>)
 800590c:	4618      	mov	r0, r3
 800590e:	f016 fc23 	bl	801c158 <strncmp>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d161      	bne.n	80059dc <prv_parse_input+0x33c>
            LWSHELL_OUTPUT(lwobj, "List of registered commands\r\n");
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <prv_parse_input+0x28a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4836      	ldr	r0, [pc, #216]	@ (8005a00 <prv_parse_input+0x360>)
 8005928:	4798      	blx	r3
#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e04e      	b.n	80059ce <prv_parse_input+0x32e>
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].name);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d018      	beq.n	800596a <prv_parse_input+0x2ca>
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4613      	mov	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	33b4      	adds	r3, #180	@ 0xb4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00d      	beq.n	800596a <prv_parse_input+0x2ca>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681c      	ldr	r4, [r3, #0]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	33b4      	adds	r3, #180	@ 0xb4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4618      	mov	r0, r3
 8005968:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\t\t\t");
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <prv_parse_input+0x2dc>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4822      	ldr	r0, [pc, #136]	@ (8005a04 <prv_parse_input+0x364>)
 800597a:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].desc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d018      	beq.n	80059b6 <prv_parse_input+0x316>
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4613      	mov	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	33b8      	adds	r3, #184	@ 0xb8
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <prv_parse_input+0x316>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681c      	ldr	r4, [r3, #0]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4613      	mov	r3, r2
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	33b8      	adds	r3, #184	@ 0xb8
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4618      	mov	r0, r3
 80059b4:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\r\n");
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <prv_parse_input+0x328>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	480c      	ldr	r0, [pc, #48]	@ (80059f8 <prv_parse_input+0x358>)
 80059c6:	4798      	blx	r3
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3301      	adds	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3aa      	bcc.n	8005930 <prv_parse_input+0x290>
 80059da:	e00a      	b.n	80059f2 <prv_parse_input+0x352>
                LWSHELL_OUTPUT(lwobj, "\r\n");
            }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */
#endif /* LWSHELL_CFG_USE_LIST_CMD */
        } else {
            LWSHELL_OUTPUT(lwobj, LWSHELL_CFG_USE_LIST_CMD
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <prv_parse_input+0x352>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4807      	ldr	r0, [pc, #28]	@ (8005a08 <prv_parse_input+0x368>)
 80059ec:	4798      	blx	r3
 80059ee:	e000      	b.n	80059f2 <prv_parse_input+0x352>
        return;
 80059f0:	bf00      	nop
                                      ? "Unknown command, use listcmd to list available commands\r\n"
                                      : "Unknown command\r\n");
        }
    }
}
 80059f2:	3724      	adds	r7, #36	@ 0x24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd90      	pop	{r4, r7, pc}
 80059f8:	08020010 	.word	0x08020010
 80059fc:	08020014 	.word	0x08020014
 8005a00:	0802001c 	.word	0x0802001c
 8005a04:	0802003c 	.word	0x0802003c
 8005a08:	08020040 	.word	0x08020040

08005a0c <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <lwshell_init_ex+0x12>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	e000      	b.n	8005a20 <lwshell_init_ex+0x14>
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <lwshell_init_ex+0x2c>)
 8005a20:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 8005a22:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8005a26:	2100      	movs	r1, #0
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f016 fb8d 	bl	801c148 <memset>
    return lwshellOK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	2000051c 	.word	0x2000051c

08005a3c <lwshell_set_output_fn_ex>:
 * \param[in]       out_fn: Output function to print library data.
 *                      Set to `NULL` to disable the feature
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <lwshell_set_output_fn_ex+0x14>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	e000      	b.n	8005a52 <lwshell_set_output_fn_ex+0x16>
 8005a50:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <lwshell_set_output_fn_ex+0x2c>)
 8005a52:	607b      	str	r3, [r7, #4]
    lwobj->out_fn = out_fn;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	601a      	str	r2, [r3, #0]
    return lwshellOK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	2000051c 	.word	0x2000051c

08005a6c <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <lwshell_register_cmd_ex+0x18>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	e000      	b.n	8005a86 <lwshell_register_cmd_ex+0x1a>
 8005a84:	4b23      	ldr	r3, [pc, #140]	@ (8005b14 <lwshell_register_cmd_ex+0xa8>)
 8005a86:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <lwshell_register_cmd_ex+0x30>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <lwshell_register_cmd_ex+0x30>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e032      	b.n	8005b06 <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005aa6:	2b07      	cmp	r3, #7
 8005aa8:	d82c      	bhi.n	8005b04 <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005ab0:	68f9      	ldr	r1, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	33b4      	adds	r3, #180	@ 0xb4
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	33b0      	adds	r3, #176	@ 0xb0
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005ae0:	68f9      	ldr	r1, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	33b8      	adds	r3, #184	@ 0xb8
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        return lwshellOK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 8005b04:	2302      	movs	r3, #2
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2000051c 	.word	0x2000051c

08005b18 <lwshell_input_ex>:
 * \param[in]       in_data: Input data to process
 * \param[in]       len: Length of data for input
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
    const char* p_data = in_data;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	61bb      	str	r3, [r7, #24]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <lwshell_input_ex+0x1a>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	e000      	b.n	8005b34 <lwshell_input_ex+0x1c>
 8005b32:	4b54      	ldr	r3, [pc, #336]	@ (8005c84 <lwshell_input_ex+0x16c>)
 8005b34:	60fb      	str	r3, [r7, #12]

    if (in_data == NULL || len == 0) {
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <lwshell_input_ex+0x2a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <lwshell_input_ex+0x2e>
        return lwshellERRPAR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e09a      	b.n	8005c7c <lwshell_input_ex+0x164>
    }

    /* Process all bytes */
    for (size_t idx = 0; idx < len; ++idx) {
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e091      	b.n	8005c70 <lwshell_input_ex+0x158>
        switch (p_data[idx]) {
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b0d      	cmp	r3, #13
 8005b56:	d005      	beq.n	8005b64 <lwshell_input_ex+0x4c>
 8005b58:	2b0d      	cmp	r3, #13
 8005b5a:	dc48      	bgt.n	8005bee <lwshell_input_ex+0xd6>
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d029      	beq.n	8005bb4 <lwshell_input_ex+0x9c>
 8005b60:	2b0a      	cmp	r3, #10
 8005b62:	d144      	bne.n	8005bee <lwshell_input_ex+0xd6>
            case LWSHELL_ASCII_CR:
            case LWSHELL_ASCII_LF: {
                LWSHELL_OUTPUT(lwobj, p_data[idx] == LWSHELL_ASCII_CR ? "\r" : "\n");
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <lwshell_input_ex+0x70>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	440a      	add	r2, r1
 8005b76:	7812      	ldrb	r2, [r2, #0]
 8005b78:	2a0d      	cmp	r2, #13
 8005b7a:	d101      	bne.n	8005b80 <lwshell_input_ex+0x68>
 8005b7c:	4a42      	ldr	r2, [pc, #264]	@ (8005c88 <lwshell_input_ex+0x170>)
 8005b7e:	e000      	b.n	8005b82 <lwshell_input_ex+0x6a>
 8005b80:	4a42      	ldr	r2, [pc, #264]	@ (8005c8c <lwshell_input_ex+0x174>)
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
                prv_parse_input(lwobj);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff fd89 	bl	80056a0 <prv_parse_input>
                LWSHELL_RESET_BUFF(lwobj);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3304      	adds	r3, #4
 8005b92:	2281      	movs	r2, #129	@ 0x81
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f016 fad6 	bl	801c148 <memset>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3390      	adds	r3, #144	@ 0x90
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f016 facf 	bl	801c148 <memset>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                break;
 8005bb2:	e05a      	b.n	8005c6a <lwshell_input_ex+0x152>
            }
            case LWSHELL_ASCII_BACKSPACE: {
                /* Try to delete character from buffer */
                if (lwobj->buff_ptr > 0) {
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d054      	beq.n	8005c68 <lwshell_input_ex+0x150>
                    --lwobj->buff_ptr;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                    lwobj->buff[lwobj->buff_ptr] = '\0';
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	711a      	strb	r2, [r3, #4]
                    LWSHELL_OUTPUT(lwobj, "\b \b");
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d042      	beq.n	8005c68 <lwshell_input_ex+0x150>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	4829      	ldr	r0, [pc, #164]	@ (8005c90 <lwshell_input_ex+0x178>)
 8005bea:	4798      	blx	r3
                }
                break;
 8005bec:	e03c      	b.n	8005c68 <lwshell_input_ex+0x150>
            }
            default: {
#if LWSHELL_CFG_USE_OUTPUT
                char str[2] = {p_data[idx], 0};
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	753b      	strb	r3, [r7, #20]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	757b      	strb	r3, [r7, #21]
                LWSHELL_OUTPUT(lwobj, str);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <lwshell_input_ex+0xfa>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f107 0214 	add.w	r2, r7, #20
 8005c0c:	68f9      	ldr	r1, [r7, #12]
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4798      	blx	r3
#endif /* LWSHELL_CFG_USE_OUTPUT */
                if (p_data[idx] >= 0x20 && p_data[idx] < 0x7F) {
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b1f      	cmp	r3, #31
 8005c1c:	d925      	bls.n	8005c6a <lwshell_input_ex+0x152>
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b7e      	cmp	r3, #126	@ 0x7e
 8005c28:	d81f      	bhi.n	8005c6a <lwshell_input_ex+0x152>
                    LWSHELL_ADD_CH(lwobj, p_data[idx]);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c32:	d81a      	bhi.n	8005c6a <lwshell_input_ex+0x152>
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	441a      	add	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	7811      	ldrb	r1, [r2, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	460a      	mov	r2, r1
 8005c48:	711a      	strb	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	711a      	strb	r2, [r3, #4]
 8005c66:	e000      	b.n	8005c6a <lwshell_input_ex+0x152>
                break;
 8005c68:	bf00      	nop
    for (size_t idx = 0; idx < len; ++idx) {
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	f4ff af69 	bcc.w	8005b4c <lwshell_input_ex+0x34>
                }
            }
        }
    }
    return lwshellOK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	2000051c 	.word	0x2000051c
 8005c88:	0802007c 	.word	0x0802007c
 8005c8c:	08020080 	.word	0x08020080
 8005c90:	08020084 	.word	0x08020084

08005c94 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460a      	mov	r2, r1
 8005c9e:	71fb      	strb	r3, [r7, #7]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 8005ca4:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8005ca8:	2100      	movs	r1, #0
 8005caa:	48a4      	ldr	r0, [pc, #656]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cac:	f016 fa4c 	bl	801c148 <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 8005cb0:	4ba2      	ldr	r3, [pc, #648]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cb2:	4aa3      	ldr	r2, [pc, #652]	@ (8005f40 <mpu6500_basic_init+0x2ac>)
 8005cb4:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 8005cb6:	4ba1      	ldr	r3, [pc, #644]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cb8:	4aa2      	ldr	r2, [pc, #648]	@ (8005f44 <mpu6500_basic_init+0x2b0>)
 8005cba:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 8005cbc:	4b9f      	ldr	r3, [pc, #636]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cbe:	4aa2      	ldr	r2, [pc, #648]	@ (8005f48 <mpu6500_basic_init+0x2b4>)
 8005cc0:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 8005cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cc4:	4aa1      	ldr	r2, [pc, #644]	@ (8005f4c <mpu6500_basic_init+0x2b8>)
 8005cc6:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 8005cc8:	4b9c      	ldr	r3, [pc, #624]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cca:	4aa1      	ldr	r2, [pc, #644]	@ (8005f50 <mpu6500_basic_init+0x2bc>)
 8005ccc:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 8005cce:	4b9b      	ldr	r3, [pc, #620]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cd0:	4aa0      	ldr	r2, [pc, #640]	@ (8005f54 <mpu6500_basic_init+0x2c0>)
 8005cd2:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 8005cd4:	4b99      	ldr	r3, [pc, #612]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cd6:	4aa0      	ldr	r2, [pc, #640]	@ (8005f58 <mpu6500_basic_init+0x2c4>)
 8005cd8:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 8005cda:	4b98      	ldr	r3, [pc, #608]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cdc:	4a9f      	ldr	r2, [pc, #636]	@ (8005f5c <mpu6500_basic_init+0x2c8>)
 8005cde:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 8005ce0:	4b96      	ldr	r3, [pc, #600]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005ce2:	4a9f      	ldr	r2, [pc, #636]	@ (8005f60 <mpu6500_basic_init+0x2cc>)
 8005ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 8005ce6:	4b95      	ldr	r3, [pc, #596]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005ce8:	4a9e      	ldr	r2, [pc, #632]	@ (8005f64 <mpu6500_basic_init+0x2d0>)
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 8005cec:	4b93      	ldr	r3, [pc, #588]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cee:	4a9e      	ldr	r2, [pc, #632]	@ (8005f68 <mpu6500_basic_init+0x2d4>)
 8005cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4891      	ldr	r0, [pc, #580]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005cf8:	f000 fd86 	bl	8006808 <mpu6500_set_interface>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 8005d06:	4899      	ldr	r0, [pc, #612]	@ (8005f6c <mpu6500_basic_init+0x2d8>)
 8005d08:	f000 fca2 	bl	8006650 <mpu6500_interface_debug_print>
       
        return 1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e3ce      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 8005d10:	79bb      	ldrb	r3, [r7, #6]
 8005d12:	4619      	mov	r1, r3
 8005d14:	4889      	ldr	r0, [pc, #548]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d16:	f000 fd8d 	bl	8006834 <mpu6500_set_addr_pin>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 8005d24:	4892      	ldr	r0, [pc, #584]	@ (8005f70 <mpu6500_basic_init+0x2dc>)
 8005d26:	f000 fc93 	bl	8006650 <mpu6500_interface_debug_print>
       
        return 1;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e3bf      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 8005d2e:	4883      	ldr	r0, [pc, #524]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d30:	f000 fd96 	bl	8006860 <mpu6500_init>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 8005d3e:	488d      	ldr	r0, [pc, #564]	@ (8005f74 <mpu6500_basic_init+0x2e0>)
 8005d40:	f000 fc86 	bl	8006650 <mpu6500_interface_debug_print>
       
        return 1;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e3b2      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 8005d48:	2064      	movs	r0, #100	@ 0x64
 8005d4a:	f000 fc6b 	bl	8006624 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	487a      	ldr	r0, [pc, #488]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d52:	f001 ff61 	bl	8007c18 <mpu6500_set_sleep>
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 8005d60:	4885      	ldr	r0, [pc, #532]	@ (8005f78 <mpu6500_basic_init+0x2e4>)
 8005d62:	f000 fc75 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d66:	4875      	ldr	r0, [pc, #468]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d68:	f000 fea6 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e39e      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d110      	bne.n	8005d98 <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8005d76:	2101      	movs	r1, #1
 8005d78:	4870      	ldr	r0, [pc, #448]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d7a:	f001 fe17 	bl	80079ac <mpu6500_set_disable_iic_slave>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 8005d88:	487c      	ldr	r0, [pc, #496]	@ (8005f7c <mpu6500_basic_init+0x2e8>)
 8005d8a:	f000 fc61 	bl	8006650 <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005d8e:	486b      	ldr	r0, [pc, #428]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d90:	f000 fe92 	bl	8006ab8 <mpu6500_deinit>
           
            return 1;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e38a      	b.n	80064ae <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 8005d98:	4868      	ldr	r0, [pc, #416]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005d9a:	f002 fae7 	bl	800836c <mpu6500_set_fifo_1024kb>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 8005da8:	4875      	ldr	r0, [pc, #468]	@ (8005f80 <mpu6500_basic_init+0x2ec>)
 8005daa:	f000 fc51 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005dae:	4863      	ldr	r0, [pc, #396]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005db0:	f000 fe82 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e37a      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 8005db8:	2101      	movs	r1, #1
 8005dba:	4860      	ldr	r0, [pc, #384]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005dbc:	f001 fe44 	bl	8007a48 <mpu6500_set_clock_source>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 8005dca:	486e      	ldr	r0, [pc, #440]	@ (8005f84 <mpu6500_basic_init+0x2f0>)
 8005dcc:	f000 fc40 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005dd0:	485a      	ldr	r0, [pc, #360]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005dd2:	f000 fe71 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e369      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4857      	ldr	r0, [pc, #348]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005dde:	f002 f811 	bl	8007e04 <mpu6500_set_sample_rate_divider>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 8005dec:	4866      	ldr	r0, [pc, #408]	@ (8005f88 <mpu6500_basic_init+0x2f4>)
 8005dee:	f000 fc2f 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005df2:	4852      	ldr	r0, [pc, #328]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005df4:	f000 fe60 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e358      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	484f      	ldr	r0, [pc, #316]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e00:	f001 fe6c 	bl	8007adc <mpu6500_set_ptat>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 8005e0e:	485f      	ldr	r0, [pc, #380]	@ (8005f8c <mpu6500_basic_init+0x2f8>)
 8005e10:	f000 fc1e 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e14:	4849      	ldr	r0, [pc, #292]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e16:	f000 fe4f 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e347      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4846      	ldr	r0, [pc, #280]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e22:	f001 feab 	bl	8007b7c <mpu6500_set_cycle_wake_up>
 8005e26:	4603      	mov	r3, r0
 8005e28:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 8005e30:	4857      	ldr	r0, [pc, #348]	@ (8005f90 <mpu6500_basic_init+0x2fc>)
 8005e32:	f000 fc0d 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e36:	4841      	ldr	r0, [pc, #260]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e38:	f000 fe3e 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e336      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 8005e40:	2200      	movs	r2, #0
 8005e42:	2105      	movs	r1, #5
 8005e44:	483d      	ldr	r0, [pc, #244]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e46:	f001 ff83 	bl	8007d50 <mpu6500_set_standby_mode>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e54:	484f      	ldr	r0, [pc, #316]	@ (8005f94 <mpu6500_basic_init+0x300>)
 8005e56:	f000 fbfb 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e5a:	4838      	ldr	r0, [pc, #224]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e5c:	f000 fe2c 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e324      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2104      	movs	r1, #4
 8005e68:	4834      	ldr	r0, [pc, #208]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e6a:	f001 ff71 	bl	8007d50 <mpu6500_set_standby_mode>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e78:	4846      	ldr	r0, [pc, #280]	@ (8005f94 <mpu6500_basic_init+0x300>)
 8005e7a:	f000 fbe9 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005e7e:	482f      	ldr	r0, [pc, #188]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e80:	f000 fe1a 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e312      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	482b      	ldr	r0, [pc, #172]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005e8e:	f001 ff5f 	bl	8007d50 <mpu6500_set_standby_mode>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005e9c:	483d      	ldr	r0, [pc, #244]	@ (8005f94 <mpu6500_basic_init+0x300>)
 8005e9e:	f000 fbd7 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005ea2:	4826      	ldr	r0, [pc, #152]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005ea4:	f000 fe08 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e300      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8005eac:	2200      	movs	r2, #0
 8005eae:	2102      	movs	r1, #2
 8005eb0:	4822      	ldr	r0, [pc, #136]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005eb2:	f001 ff4d 	bl	8007d50 <mpu6500_set_standby_mode>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005ec0:	4834      	ldr	r0, [pc, #208]	@ (8005f94 <mpu6500_basic_init+0x300>)
 8005ec2:	f000 fbc5 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005ec6:	481d      	ldr	r0, [pc, #116]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005ec8:	f000 fdf6 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e2ee      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4819      	ldr	r0, [pc, #100]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005ed6:	f001 ff3b 	bl	8007d50 <mpu6500_set_standby_mode>
 8005eda:	4603      	mov	r3, r0
 8005edc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005ee4:	482b      	ldr	r0, [pc, #172]	@ (8005f94 <mpu6500_basic_init+0x300>)
 8005ee6:	f000 fbb3 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005eea:	4814      	ldr	r0, [pc, #80]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005eec:	f000 fde4 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e2dc      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4810      	ldr	r0, [pc, #64]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005efa:	f001 ff29 	bl	8007d50 <mpu6500_set_standby_mode>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005f08:	4822      	ldr	r0, [pc, #136]	@ (8005f94 <mpu6500_basic_init+0x300>)
 8005f0a:	f000 fba1 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005f0e:	480b      	ldr	r0, [pc, #44]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005f10:	f000 fdd2 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e2ca      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2107      	movs	r1, #7
 8005f1c:	4807      	ldr	r0, [pc, #28]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005f1e:	f002 f881 	bl	8008024 <mpu6500_set_gyroscope_test>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d037      	beq.n	8005f9c <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005f2c:	481a      	ldr	r0, [pc, #104]	@ (8005f98 <mpu6500_basic_init+0x304>)
 8005f2e:	f000 fb8f 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005f32:	4802      	ldr	r0, [pc, #8]	@ (8005f3c <mpu6500_basic_init+0x2a8>)
 8005f34:	f000 fdc0 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e2b8      	b.n	80064ae <mpu6500_basic_init+0x81a>
 8005f3c:	20000630 	.word	0x20000630
 8005f40:	080064fd 	.word	0x080064fd
 8005f44:	0800650d 	.word	0x0800650d
 8005f48:	0800651d 	.word	0x0800651d
 8005f4c:	08006541 	.word	0x08006541
 8005f50:	08006565 	.word	0x08006565
 8005f54:	08006575 	.word	0x08006575
 8005f58:	08006585 	.word	0x08006585
 8005f5c:	080065d5 	.word	0x080065d5
 8005f60:	08006625 	.word	0x08006625
 8005f64:	08006651 	.word	0x08006651
 8005f68:	08006681 	.word	0x08006681
 8005f6c:	08020088 	.word	0x08020088
 8005f70:	080200a8 	.word	0x080200a8
 8005f74:	080200c8 	.word	0x080200c8
 8005f78:	080200e0 	.word	0x080200e0
 8005f7c:	080200fc 	.word	0x080200fc
 8005f80:	08020124 	.word	0x08020124
 8005f84:	08020148 	.word	0x08020148
 8005f88:	0802016c 	.word	0x0802016c
 8005f8c:	08020198 	.word	0x08020198
 8005f90:	080201b4 	.word	0x080201b4
 8005f94:	080201d8 	.word	0x080201d8
 8005f98:	080201fc 	.word	0x080201fc
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2106      	movs	r1, #6
 8005fa0:	48b0      	ldr	r0, [pc, #704]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8005fa2:	f002 f83f 	bl	8008024 <mpu6500_set_gyroscope_test>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005fb0:	48ad      	ldr	r0, [pc, #692]	@ (8006268 <mpu6500_basic_init+0x5d4>)
 8005fb2:	f000 fb4d 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005fb6:	48ab      	ldr	r0, [pc, #684]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8005fb8:	f000 fd7e 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e276      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2105      	movs	r1, #5
 8005fc4:	48a7      	ldr	r0, [pc, #668]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8005fc6:	f002 f82d 	bl	8008024 <mpu6500_set_gyroscope_test>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005fd4:	48a4      	ldr	r0, [pc, #656]	@ (8006268 <mpu6500_basic_init+0x5d4>)
 8005fd6:	f000 fb3b 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005fda:	48a2      	ldr	r0, [pc, #648]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8005fdc:	f000 fd6c 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e264      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2107      	movs	r1, #7
 8005fe8:	489e      	ldr	r0, [pc, #632]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8005fea:	f002 f917 	bl	800821c <mpu6500_set_accelerometer_test>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8005ff8:	489c      	ldr	r0, [pc, #624]	@ (800626c <mpu6500_basic_init+0x5d8>)
 8005ffa:	f000 fb29 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005ffe:	4899      	ldr	r0, [pc, #612]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006000:	f000 fd5a 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006004:	2301      	movs	r3, #1
 8006006:	e252      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8006008:	2200      	movs	r2, #0
 800600a:	2106      	movs	r1, #6
 800600c:	4895      	ldr	r0, [pc, #596]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800600e:	f002 f905 	bl	800821c <mpu6500_set_accelerometer_test>
 8006012:	4603      	mov	r3, r0
 8006014:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 800601c:	4893      	ldr	r0, [pc, #588]	@ (800626c <mpu6500_basic_init+0x5d8>)
 800601e:	f000 fb17 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006022:	4890      	ldr	r0, [pc, #576]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006024:	f000 fd48 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006028:	2301      	movs	r3, #1
 800602a:	e240      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 800602c:	2200      	movs	r2, #0
 800602e:	2105      	movs	r1, #5
 8006030:	488c      	ldr	r0, [pc, #560]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006032:	f002 f8f3 	bl	800821c <mpu6500_set_accelerometer_test>
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8006040:	488a      	ldr	r0, [pc, #552]	@ (800626c <mpu6500_basic_init+0x5d8>)
 8006042:	f000 fb05 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006046:	4887      	ldr	r0, [pc, #540]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006048:	f000 fd36 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 800604c:	2301      	movs	r3, #1
 800604e:	e22e      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8006050:	2100      	movs	r1, #0
 8006052:	4884      	ldr	r0, [pc, #528]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006054:	f001 fc0e 	bl	8007874 <mpu6500_set_fifo>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8006062:	4883      	ldr	r0, [pc, #524]	@ (8006270 <mpu6500_basic_init+0x5dc>)
 8006064:	f000 faf4 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006068:	487e      	ldr	r0, [pc, #504]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800606a:	f000 fd25 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 800606e:	2301      	movs	r3, #1
 8006070:	e21d      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8006072:	2200      	movs	r2, #0
 8006074:	2107      	movs	r1, #7
 8006076:	487b      	ldr	r0, [pc, #492]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006078:	f002 fb4a 	bl	8008710 <mpu6500_set_fifo_enable>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8006086:	487b      	ldr	r0, [pc, #492]	@ (8006274 <mpu6500_basic_init+0x5e0>)
 8006088:	f000 fae2 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800608c:	4875      	ldr	r0, [pc, #468]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800608e:	f000 fd13 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006092:	2301      	movs	r3, #1
 8006094:	e20b      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 8006096:	2200      	movs	r2, #0
 8006098:	2106      	movs	r1, #6
 800609a:	4872      	ldr	r0, [pc, #456]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800609c:	f002 fb38 	bl	8008710 <mpu6500_set_fifo_enable>
 80060a0:	4603      	mov	r3, r0
 80060a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 80060aa:	4872      	ldr	r0, [pc, #456]	@ (8006274 <mpu6500_basic_init+0x5e0>)
 80060ac:	f000 fad0 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80060b0:	486c      	ldr	r0, [pc, #432]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80060b2:	f000 fd01 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e1f9      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 80060ba:	2200      	movs	r2, #0
 80060bc:	2105      	movs	r1, #5
 80060be:	4869      	ldr	r0, [pc, #420]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80060c0:	f002 fb26 	bl	8008710 <mpu6500_set_fifo_enable>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 80060ce:	4869      	ldr	r0, [pc, #420]	@ (8006274 <mpu6500_basic_init+0x5e0>)
 80060d0:	f000 fabe 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80060d4:	4863      	ldr	r0, [pc, #396]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80060d6:	f000 fcef 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80060da:	2301      	movs	r3, #1
 80060dc:	e1e7      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 80060de:	2200      	movs	r2, #0
 80060e0:	2104      	movs	r1, #4
 80060e2:	4860      	ldr	r0, [pc, #384]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80060e4:	f002 fb14 	bl	8008710 <mpu6500_set_fifo_enable>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 80060f2:	4860      	ldr	r0, [pc, #384]	@ (8006274 <mpu6500_basic_init+0x5e0>)
 80060f4:	f000 faac 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80060f8:	485a      	ldr	r0, [pc, #360]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80060fa:	f000 fcdd 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	e1d5      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 8006102:	2200      	movs	r2, #0
 8006104:	2103      	movs	r1, #3
 8006106:	4857      	ldr	r0, [pc, #348]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006108:	f002 fb02 	bl	8008710 <mpu6500_set_fifo_enable>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8006116:	4857      	ldr	r0, [pc, #348]	@ (8006274 <mpu6500_basic_init+0x5e0>)
 8006118:	f000 fa9a 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800611c:	4851      	ldr	r0, [pc, #324]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800611e:	f000 fccb 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006122:	2301      	movs	r3, #1
 8006124:	e1c3      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 8006126:	2101      	movs	r1, #1
 8006128:	484e      	ldr	r0, [pc, #312]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800612a:	f002 fb4b 	bl	80087c4 <mpu6500_set_interrupt_level>
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 8006138:	484f      	ldr	r0, [pc, #316]	@ (8006278 <mpu6500_basic_init+0x5e4>)
 800613a:	f000 fa89 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800613e:	4849      	ldr	r0, [pc, #292]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006140:	f000 fcba 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006144:	2301      	movs	r3, #1
 8006146:	e1b2      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8006148:	2100      	movs	r1, #0
 800614a:	4846      	ldr	r0, [pc, #280]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800614c:	f002 fb88 	bl	8008860 <mpu6500_set_interrupt_pin_type>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 800615a:	4848      	ldr	r0, [pc, #288]	@ (800627c <mpu6500_basic_init+0x5e8>)
 800615c:	f000 fa78 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006160:	4840      	ldr	r0, [pc, #256]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006162:	f000 fca9 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006166:	2301      	movs	r3, #1
 8006168:	e1a1      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 800616a:	2200      	movs	r2, #0
 800616c:	2106      	movs	r1, #6
 800616e:	483d      	ldr	r0, [pc, #244]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006170:	f002 fd4c 	bl	8008c0c <mpu6500_set_interrupt>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 800617e:	4840      	ldr	r0, [pc, #256]	@ (8006280 <mpu6500_basic_init+0x5ec>)
 8006180:	f000 fa66 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006184:	4837      	ldr	r0, [pc, #220]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006186:	f000 fc97 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 800618a:	2301      	movs	r3, #1
 800618c:	e18f      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 800618e:	2200      	movs	r2, #0
 8006190:	2104      	movs	r1, #4
 8006192:	4834      	ldr	r0, [pc, #208]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006194:	f002 fd3a 	bl	8008c0c <mpu6500_set_interrupt>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 80061a2:	4837      	ldr	r0, [pc, #220]	@ (8006280 <mpu6500_basic_init+0x5ec>)
 80061a4:	f000 fa54 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80061a8:	482e      	ldr	r0, [pc, #184]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80061aa:	f000 fc85 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e17d      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 80061b2:	2200      	movs	r2, #0
 80061b4:	2101      	movs	r1, #1
 80061b6:	482b      	ldr	r0, [pc, #172]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80061b8:	f002 fd28 	bl	8008c0c <mpu6500_set_interrupt>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 80061c6:	482e      	ldr	r0, [pc, #184]	@ (8006280 <mpu6500_basic_init+0x5ec>)
 80061c8:	f000 fa42 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80061cc:	4825      	ldr	r0, [pc, #148]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80061ce:	f000 fc73 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e16b      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 80061d6:	2200      	movs	r2, #0
 80061d8:	2103      	movs	r1, #3
 80061da:	4822      	ldr	r0, [pc, #136]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80061dc:	f002 fd16 	bl	8008c0c <mpu6500_set_interrupt>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 80061ea:	4825      	ldr	r0, [pc, #148]	@ (8006280 <mpu6500_basic_init+0x5ec>)
 80061ec:	f000 fa30 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80061f0:	481c      	ldr	r0, [pc, #112]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 80061f2:	f000 fc61 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e159      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 80061fa:	2200      	movs	r2, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	4819      	ldr	r0, [pc, #100]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006200:	f002 fd04 	bl	8008c0c <mpu6500_set_interrupt>
 8006204:	4603      	mov	r3, r0
 8006206:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 800620e:	481c      	ldr	r0, [pc, #112]	@ (8006280 <mpu6500_basic_init+0x5ec>)
 8006210:	f000 fa1e 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006214:	4813      	ldr	r0, [pc, #76]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006216:	f000 fc4f 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 800621a:	2301      	movs	r3, #1
 800621c:	e147      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 800621e:	2101      	movs	r1, #1
 8006220:	4810      	ldr	r0, [pc, #64]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006222:	f002 fb6b 	bl	80088fc <mpu6500_set_interrupt_latch>
 8006226:	4603      	mov	r3, r0
 8006228:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 8006230:	4814      	ldr	r0, [pc, #80]	@ (8006284 <mpu6500_basic_init+0x5f0>)
 8006232:	f000 fa0d 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006236:	480b      	ldr	r0, [pc, #44]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006238:	f000 fc3e 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 800623c:	2301      	movs	r3, #1
 800623e:	e136      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8006240:	2101      	movs	r1, #1
 8006242:	4808      	ldr	r0, [pc, #32]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 8006244:	f002 fbaa 	bl	800899c <mpu6500_set_interrupt_read_clear>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01c      	beq.n	800628c <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 8006252:	480d      	ldr	r0, [pc, #52]	@ (8006288 <mpu6500_basic_init+0x5f4>)
 8006254:	f000 f9fc 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006258:	4802      	ldr	r0, [pc, #8]	@ (8006264 <mpu6500_basic_init+0x5d0>)
 800625a:	f000 fc2d 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 800625e:	2301      	movs	r3, #1
 8006260:	e125      	b.n	80064ae <mpu6500_basic_init+0x81a>
 8006262:	bf00      	nop
 8006264:	20000630 	.word	0x20000630
 8006268:	080201fc 	.word	0x080201fc
 800626c:	08020224 	.word	0x08020224
 8006270:	08020250 	.word	0x08020250
 8006274:	0802026c 	.word	0x0802026c
 8006278:	08020290 	.word	0x08020290
 800627c:	080202b8 	.word	0x080202b8
 8006280:	080202e4 	.word	0x080202e4
 8006284:	08020304 	.word	0x08020304
 8006288:	0802032c 	.word	0x0802032c
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 800628c:	2100      	movs	r1, #0
 800628e:	488a      	ldr	r0, [pc, #552]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006290:	f001 fde2 	bl	8007e58 <mpu6500_set_extern_sync>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 800629e:	4887      	ldr	r0, [pc, #540]	@ (80064bc <mpu6500_basic_init+0x828>)
 80062a0:	f000 f9d6 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80062a4:	4884      	ldr	r0, [pc, #528]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80062a6:	f000 fc07 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0ff      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 80062ae:	2100      	movs	r1, #0
 80062b0:	4881      	ldr	r0, [pc, #516]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80062b2:	f002 fc0f 	bl	8008ad4 <mpu6500_set_fsync_interrupt>
 80062b6:	4603      	mov	r3, r0
 80062b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 80062c0:	487f      	ldr	r0, [pc, #508]	@ (80064c0 <mpu6500_basic_init+0x82c>)
 80062c2:	f000 f9c5 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80062c6:	487c      	ldr	r0, [pc, #496]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80062c8:	f000 fbf6 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0ee      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 80062d0:	2101      	movs	r1, #1
 80062d2:	4879      	ldr	r0, [pc, #484]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80062d4:	f002 fbb0 	bl	8008a38 <mpu6500_set_fsync_interrupt_level>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 80062e2:	4878      	ldr	r0, [pc, #480]	@ (80064c4 <mpu6500_basic_init+0x830>)
 80062e4:	f000 f9b4 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80062e8:	4873      	ldr	r0, [pc, #460]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80062ea:	f000 fbe5 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0dd      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 80062f2:	2100      	movs	r1, #0
 80062f4:	4870      	ldr	r0, [pc, #448]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80062f6:	f001 fb0b 	bl	8007910 <mpu6500_set_iic_master>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 8006304:	4870      	ldr	r0, [pc, #448]	@ (80064c8 <mpu6500_basic_init+0x834>)
 8006306:	f000 f9a3 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800630a:	486b      	ldr	r0, [pc, #428]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800630c:	f000 fbd4 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006310:	2301      	movs	r3, #1
 8006312:	e0cc      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 8006314:	2100      	movs	r1, #0
 8006316:	4868      	ldr	r0, [pc, #416]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006318:	f002 fc2a 	bl	8008b70 <mpu6500_set_iic_bypass>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 8006326:	4869      	ldr	r0, [pc, #420]	@ (80064cc <mpu6500_basic_init+0x838>)
 8006328:	f000 f992 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800632c:	4862      	ldr	r0, [pc, #392]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800632e:	f000 fbc3 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006332:	2301      	movs	r3, #1
 8006334:	e0bb      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8006336:	2103      	movs	r1, #3
 8006338:	485f      	ldr	r0, [pc, #380]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800633a:	f001 ffc9 	bl	80082d0 <mpu6500_set_accelerometer_range>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 8006348:	4861      	ldr	r0, [pc, #388]	@ (80064d0 <mpu6500_basic_init+0x83c>)
 800634a:	f000 f981 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800634e:	485a      	ldr	r0, [pc, #360]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006350:	f000 fbb2 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006354:	2301      	movs	r3, #1
 8006356:	e0aa      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8006358:	2103      	movs	r1, #3
 800635a:	4857      	ldr	r0, [pc, #348]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800635c:	f001 febc 	bl	80080d8 <mpu6500_set_gyroscope_range>
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 800636a:	485a      	ldr	r0, [pc, #360]	@ (80064d4 <mpu6500_basic_init+0x840>)
 800636c:	f000 f970 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006370:	4851      	ldr	r0, [pc, #324]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006372:	f000 fba1 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006376:	2301      	movs	r3, #1
 8006378:	e099      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 800637a:	2100      	movs	r1, #0
 800637c:	484e      	ldr	r0, [pc, #312]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800637e:	f001 fc99 	bl	8007cb4 <mpu6500_set_gyro_standby>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 800638c:	4852      	ldr	r0, [pc, #328]	@ (80064d8 <mpu6500_basic_init+0x844>)
 800638e:	f000 f95f 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006392:	4849      	ldr	r0, [pc, #292]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006394:	f000 fb90 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006398:	2301      	movs	r3, #1
 800639a:	e088      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 800639c:	2101      	movs	r1, #1
 800639e:	4846      	ldr	r0, [pc, #280]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80063a0:	f001 fdf2 	bl	8007f88 <mpu6500_set_fifo_mode>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 80063ae:	484b      	ldr	r0, [pc, #300]	@ (80064dc <mpu6500_basic_init+0x848>)
 80063b0:	f000 f94e 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80063b4:	4840      	ldr	r0, [pc, #256]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80063b6:	f000 fb7f 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e077      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 80063be:	2100      	movs	r1, #0
 80063c0:	483d      	ldr	r0, [pc, #244]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80063c2:	f001 fed7 	bl	8008174 <mpu6500_set_gyroscope_choice>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 80063d0:	4843      	ldr	r0, [pc, #268]	@ (80064e0 <mpu6500_basic_init+0x84c>)
 80063d2:	f000 f93d 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80063d6:	4838      	ldr	r0, [pc, #224]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80063d8:	f000 fb6e 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80063dc:	2301      	movs	r3, #1
 80063de:	e066      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 80063e0:	2102      	movs	r1, #2
 80063e2:	4835      	ldr	r0, [pc, #212]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80063e4:	f001 fd86 	bl	8007ef4 <mpu6500_set_low_pass_filter>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 80063f2:	483c      	ldr	r0, [pc, #240]	@ (80064e4 <mpu6500_basic_init+0x850>)
 80063f4:	f000 f92c 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80063f8:	482f      	ldr	r0, [pc, #188]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80063fa:	f000 fb5d 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80063fe:	2301      	movs	r3, #1
 8006400:	e055      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8006402:	2100      	movs	r1, #0
 8006404:	482c      	ldr	r0, [pc, #176]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006406:	f001 fff9 	bl	80083fc <mpu6500_set_accelerometer_choice>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 8006414:	4834      	ldr	r0, [pc, #208]	@ (80064e8 <mpu6500_basic_init+0x854>)
 8006416:	f000 f91b 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800641a:	4827      	ldr	r0, [pc, #156]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800641c:	f000 fb4c 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006420:	2301      	movs	r3, #1
 8006422:	e044      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 8006424:	2104      	movs	r1, #4
 8006426:	4824      	ldr	r0, [pc, #144]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006428:	f002 f842 	bl	80084b0 <mpu6500_set_accelerometer_low_pass_filter>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 8006436:	482d      	ldr	r0, [pc, #180]	@ (80064ec <mpu6500_basic_init+0x858>)
 8006438:	f000 f90a 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800643c:	481e      	ldr	r0, [pc, #120]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800643e:	f000 fb3b 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006442:	2301      	movs	r3, #1
 8006444:	e033      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 8006446:	2108      	movs	r1, #8
 8006448:	481b      	ldr	r0, [pc, #108]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800644a:	f002 f87b 	bl	8008544 <mpu6500_set_low_power_accel_output_rate>
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 8006458:	4825      	ldr	r0, [pc, #148]	@ (80064f0 <mpu6500_basic_init+0x85c>)
 800645a:	f000 f8f9 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800645e:	4816      	ldr	r0, [pc, #88]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006460:	f000 fb2a 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006464:	2301      	movs	r3, #1
 8006466:	e022      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 8006468:	2100      	movs	r1, #0
 800646a:	4813      	ldr	r0, [pc, #76]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800646c:	f002 f8b4 	bl	80085d8 <mpu6500_set_wake_on_motion>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 800647a:	481e      	ldr	r0, [pc, #120]	@ (80064f4 <mpu6500_basic_init+0x860>)
 800647c:	f000 f8e8 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8006480:	480d      	ldr	r0, [pc, #52]	@ (80064b8 <mpu6500_basic_init+0x824>)
 8006482:	f000 fb19 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 8006486:	2301      	movs	r3, #1
 8006488:	e011      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 800648a:	2101      	movs	r1, #1
 800648c:	480a      	ldr	r0, [pc, #40]	@ (80064b8 <mpu6500_basic_init+0x824>)
 800648e:	f002 f8f1 	bl	8008674 <mpu6500_set_accel_compare_with_previous_sample>
 8006492:	4603      	mov	r3, r0
 8006494:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 800649c:	4816      	ldr	r0, [pc, #88]	@ (80064f8 <mpu6500_basic_init+0x864>)
 800649e:	f000 f8d7 	bl	8006650 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80064a2:	4805      	ldr	r0, [pc, #20]	@ (80064b8 <mpu6500_basic_init+0x824>)
 80064a4:	f000 fb08 	bl	8006ab8 <mpu6500_deinit>
       
        return 1;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000630 	.word	0x20000630
 80064bc:	08020358 	.word	0x08020358
 80064c0:	0802037c 	.word	0x0802037c
 80064c4:	080203a4 	.word	0x080203a4
 80064c8:	080203d0 	.word	0x080203d0
 80064cc:	080203f4 	.word	0x080203f4
 80064d0:	08020418 	.word	0x08020418
 80064d4:	08020444 	.word	0x08020444
 80064d8:	0802046c 	.word	0x0802046c
 80064dc:	08020490 	.word	0x08020490
 80064e0:	080204b0 	.word	0x080204b0
 80064e4:	080204d8 	.word	0x080204d8
 80064e8:	08020500 	.word	0x08020500
 80064ec:	0802052c 	.word	0x0802052c
 80064f0:	08020560 	.word	0x08020560
 80064f4:	08020594 	.word	0x08020594
 80064f8:	080205bc 	.word	0x080205bc

080064fc <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
    return 0;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
    return 0;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	603a      	str	r2, [r7, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
 800652a:	460b      	mov	r3, r1
 800652c:	71bb      	strb	r3, [r7, #6]
 800652e:	4613      	mov	r3, r2
 8006530:	80bb      	strh	r3, [r7, #4]
    return 0;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	603a      	str	r2, [r7, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
 800654e:	460b      	mov	r3, r1
 8006550:	71bb      	strb	r3, [r7, #6]
 8006552:	4613      	mov	r3, r2
 8006554:	80bb      	strh	r3, [r7, #4]
    return 0;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
    return 0;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
    return 0;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	6039      	str	r1, [r7, #0]
 800658e:	71fb      	strb	r3, [r7, #7]
 8006590:	4613      	mov	r3, r2
 8006592:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8006594:	2200      	movs	r2, #0
 8006596:	2110      	movs	r1, #16
 8006598:	480c      	ldr	r0, [pc, #48]	@ (80065cc <mpu6500_interface_spi_read+0x48>)
 800659a:	f006 fb0d 	bl	800cbb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 800659e:	1df9      	adds	r1, r7, #7
 80065a0:	2364      	movs	r3, #100	@ 0x64
 80065a2:	2201      	movs	r2, #1
 80065a4:	480a      	ldr	r0, [pc, #40]	@ (80065d0 <mpu6500_interface_spi_read+0x4c>)
 80065a6:	f008 fac6 	bl	800eb36 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 80065aa:	88ba      	ldrh	r2, [r7, #4]
 80065ac:	2364      	movs	r3, #100	@ 0x64
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	4807      	ldr	r0, [pc, #28]	@ (80065d0 <mpu6500_interface_spi_read+0x4c>)
 80065b2:	f008 fc04 	bl	800edbe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80065b6:	2201      	movs	r2, #1
 80065b8:	2110      	movs	r1, #16
 80065ba:	4804      	ldr	r0, [pc, #16]	@ (80065cc <mpu6500_interface_spi_read+0x48>)
 80065bc:	f006 fafc 	bl	800cbb8 <HAL_GPIO_WritePin>
    return 0;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40020000 	.word	0x40020000
 80065d0:	20004424 	.word	0x20004424

080065d4 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4603      	mov	r3, r0
 80065dc:	6039      	str	r1, [r7, #0]
 80065de:	71fb      	strb	r3, [r7, #7]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80065e4:	2200      	movs	r2, #0
 80065e6:	2110      	movs	r1, #16
 80065e8:	480c      	ldr	r0, [pc, #48]	@ (800661c <mpu6500_interface_spi_write+0x48>)
 80065ea:	f006 fae5 	bl	800cbb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80065ee:	1df9      	adds	r1, r7, #7
 80065f0:	2364      	movs	r3, #100	@ 0x64
 80065f2:	2201      	movs	r2, #1
 80065f4:	480a      	ldr	r0, [pc, #40]	@ (8006620 <mpu6500_interface_spi_write+0x4c>)
 80065f6:	f008 fa9e 	bl	800eb36 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 80065fa:	2364      	movs	r3, #100	@ 0x64
 80065fc:	2201      	movs	r2, #1
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	4807      	ldr	r0, [pc, #28]	@ (8006620 <mpu6500_interface_spi_write+0x4c>)
 8006602:	f008 fa98 	bl	800eb36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8006606:	2201      	movs	r2, #1
 8006608:	2110      	movs	r1, #16
 800660a:	4804      	ldr	r0, [pc, #16]	@ (800661c <mpu6500_interface_spi_write+0x48>)
 800660c:	f006 fad4 	bl	800cbb8 <HAL_GPIO_WritePin>
    return 0;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40020000 	.word	0x40020000
 8006620:	20004424 	.word	0x20004424

08006624 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(ms));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	4a05      	ldr	r2, [pc, #20]	@ (800664c <mpu6500_interface_delay_ms+0x28>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	4618      	mov	r0, r3
 8006640:	f010 f83c 	bl	80166bc <vTaskDelay>
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	10624dd3 	.word	0x10624dd3

08006650 <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 8006650:	b40f      	push	{r0, r1, r2, r3}
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 800665e:	4b07      	ldr	r3, [pc, #28]	@ (800667c <mpu6500_interface_debug_print+0x2c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6939      	ldr	r1, [r7, #16]
 8006668:	4618      	mov	r0, r3
 800666a:	f014 ff11 	bl	801b490 <vfiprintf>
    va_end(args);
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006678:	b004      	add	sp, #16
 800667a:	4770      	bx	lr
 800667c:	20000164 	.word	0x20000164

08006680 <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
    switch (type)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	2b06      	cmp	r3, #6
 800668e:	d825      	bhi.n	80066dc <mpu6500_interface_receive_callback+0x5c>
 8006690:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <mpu6500_interface_receive_callback+0x18>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066cd 	.word	0x080066cd
 80066a0:	080066dd 	.word	0x080066dd
 80066a4:	080066c5 	.word	0x080066c5
 80066a8:	080066bd 	.word	0x080066bd
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	080066b5 	.word	0x080066b5
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 80066b4:	480d      	ldr	r0, [pc, #52]	@ (80066ec <mpu6500_interface_receive_callback+0x6c>)
 80066b6:	f7ff ffcb 	bl	8006650 <mpu6500_interface_debug_print>
            
            break;
 80066ba:	e013      	b.n	80066e4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 80066bc:	480c      	ldr	r0, [pc, #48]	@ (80066f0 <mpu6500_interface_receive_callback+0x70>)
 80066be:	f7ff ffc7 	bl	8006650 <mpu6500_interface_debug_print>
            
            break;
 80066c2:	e00f      	b.n	80066e4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 80066c4:	480b      	ldr	r0, [pc, #44]	@ (80066f4 <mpu6500_interface_receive_callback+0x74>)
 80066c6:	f7ff ffc3 	bl	8006650 <mpu6500_interface_debug_print>
            
            break;
 80066ca:	e00b      	b.n	80066e4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 80066cc:	480a      	ldr	r0, [pc, #40]	@ (80066f8 <mpu6500_interface_receive_callback+0x78>)
 80066ce:	f7ff ffbf 	bl	8006650 <mpu6500_interface_debug_print>
            
            break;
 80066d2:	e007      	b.n	80066e4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 80066d4:	4809      	ldr	r0, [pc, #36]	@ (80066fc <mpu6500_interface_receive_callback+0x7c>)
 80066d6:	f7ff ffbb 	bl	8006650 <mpu6500_interface_debug_print>
            
            break;
 80066da:	e003      	b.n	80066e4 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 80066dc:	4808      	ldr	r0, [pc, #32]	@ (8006700 <mpu6500_interface_receive_callback+0x80>)
 80066de:	f7ff ffb7 	bl	8006650 <mpu6500_interface_debug_print>
            
            break;
 80066e2:	bf00      	nop
        }
    }
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	080205f8 	.word	0x080205f8
 80066f0:	08020610 	.word	0x08020610
 80066f4:	08020630 	.word	0x08020630
 80066f8:	0802064c 	.word	0x0802064c
 80066fc:	08020660 	.word	0x08020660
 8006700:	0802067c 	.word	0x0802067c

08006704 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	461a      	mov	r2, r3
 8006710:	460b      	mov	r3, r1
 8006712:	72fb      	strb	r3, [r7, #11]
 8006714:	4613      	mov	r3, r2
 8006716:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10e      	bne.n	8006740 <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68dc      	ldr	r4, [r3, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	7818      	ldrb	r0, [r3, #0]
 800672a:	893b      	ldrh	r3, [r7, #8]
 800672c:	7af9      	ldrb	r1, [r7, #11]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	47a0      	blx	r4
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 8006738:	2301      	movs	r3, #1
 800673a:	e010      	b.n	800675e <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800673c:	2300      	movs	r3, #0
 800673e:	e00e      	b.n	800675e <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	7afa      	ldrb	r2, [r7, #11]
 8006746:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674a:	b2d0      	uxtb	r0, r2
 800674c:	893a      	ldrh	r2, [r7, #8]
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800675c:	2300      	movs	r3, #0
        }
    }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	bd90      	pop	{r4, r7, pc}

08006766 <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006766:	b590      	push	{r4, r7, lr}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	461a      	mov	r2, r3
 8006772:	460b      	mov	r3, r1
 8006774:	72fb      	strb	r3, [r7, #11]
 8006776:	4613      	mov	r3, r2
 8006778:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10e      	bne.n	80067a2 <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	691c      	ldr	r4, [r3, #16]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	7818      	ldrb	r0, [r3, #0]
 800678c:	893b      	ldrh	r3, [r7, #8]
 800678e:	7af9      	ldrb	r1, [r7, #11]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	47a0      	blx	r4
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 800679a:	2301      	movs	r3, #1
 800679c:	e010      	b.n	80067c0 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 800679e:	2300      	movs	r3, #0
 80067a0:	e00e      	b.n	80067c0 <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	7afa      	ldrb	r2, [r7, #11]
 80067a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067ac:	b2d0      	uxtb	r0, r2
 80067ae:	893a      	ldrh	r2, [r7, #8]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4798      	blx	r3
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 80067be:	2300      	movs	r3, #0
        }
    }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd90      	pop	{r4, r7, pc}

080067c8 <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4798      	blx	r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 80067e6:	2301      	movs	r3, #1
 80067e8:	e00a      	b.n	8006800 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80067ea:	2300      	movs	r3, #0
 80067ec:	e008      	b.n	8006800 <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	4798      	blx	r3
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80067fe:	2300      	movs	r3, #0
        }
    }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 800681a:	2302      	movs	r3, #2
 800681c:	e004      	b.n	8006828 <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	78fa      	ldrb	r2, [r7, #3]
 8006822:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8006846:	2302      	movs	r3, #2
 8006848:	e003      	b.n	8006852 <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 800686e:	2302      	movs	r3, #2
 8006870:	e0fb      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 800687a:	2303      	movs	r3, #3
 800687c:	e0f5      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	487a      	ldr	r0, [pc, #488]	@ (8006a74 <mpu6500_init+0x214>)
 800688c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800688e:	2303      	movs	r3, #3
 8006890:	e0eb      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	4876      	ldr	r0, [pc, #472]	@ (8006a78 <mpu6500_init+0x218>)
 80068a0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068a2:	2303      	movs	r3, #3
 80068a4:	e0e1      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	4872      	ldr	r0, [pc, #456]	@ (8006a7c <mpu6500_init+0x21c>)
 80068b4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068b6:	2303      	movs	r3, #3
 80068b8:	e0d7      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c6:	486e      	ldr	r0, [pc, #440]	@ (8006a80 <mpu6500_init+0x220>)
 80068c8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068ca:	2303      	movs	r3, #3
 80068cc:	e0cd      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	486a      	ldr	r0, [pc, #424]	@ (8006a84 <mpu6500_init+0x224>)
 80068dc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068de:	2303      	movs	r3, #3
 80068e0:	e0c3      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ee:	4866      	ldr	r0, [pc, #408]	@ (8006a88 <mpu6500_init+0x228>)
 80068f0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80068f2:	2303      	movs	r3, #3
 80068f4:	e0b9      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d105      	bne.n	800690a <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	4862      	ldr	r0, [pc, #392]	@ (8006a8c <mpu6500_init+0x22c>)
 8006904:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8006906:	2303      	movs	r3, #3
 8006908:	e0af      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d105      	bne.n	800691e <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	485e      	ldr	r0, [pc, #376]	@ (8006a90 <mpu6500_init+0x230>)
 8006918:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800691a:	2303      	movs	r3, #3
 800691c:	e0a5      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d105      	bne.n	8006932 <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692a:	485a      	ldr	r0, [pc, #360]	@ (8006a94 <mpu6500_init+0x234>)
 800692c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800692e:	2303      	movs	r3, #3
 8006930:	e09b      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	4856      	ldr	r0, [pc, #344]	@ (8006a98 <mpu6500_init+0x238>)
 8006940:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8006942:	2303      	movs	r3, #3
 8006944:	e091      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10d      	bne.n	800696c <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4798      	blx	r3
 8006956:	4603      	mov	r3, r0
 8006958:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	484d      	ldr	r0, [pc, #308]	@ (8006a9c <mpu6500_init+0x23c>)
 8006966:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8006968:	2301      	movs	r3, #1
 800696a:	e07e      	b.n	8006a6a <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	4798      	blx	r3
 8006972:	4603      	mov	r3, r0
 8006974:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8006976:	7afb      	ldrb	r3, [r7, #11]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006980:	4847      	ldr	r0, [pc, #284]	@ (8006aa0 <mpu6500_init+0x240>)
 8006982:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8006984:	2301      	movs	r3, #1
 8006986:	e070      	b.n	8006a6a <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 8006988:	f107 020a 	add.w	r2, r7, #10
 800698c:	2301      	movs	r3, #1
 800698e:	2175      	movs	r1, #117	@ 0x75
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff feb7 	bl	8006704 <a_mpu6500_read>
 8006996:	4603      	mov	r3, r0
 8006998:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	483f      	ldr	r0, [pc, #252]	@ (8006aa4 <mpu6500_init+0x244>)
 80069a6:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ff0d 	bl	80067c8 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 80069ae:	2305      	movs	r3, #5
 80069b0:	e05b      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 80069b2:	7abb      	ldrb	r3, [r7, #10]
 80069b4:	2b70      	cmp	r3, #112	@ 0x70
 80069b6:	d008      	beq.n	80069ca <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	483a      	ldr	r0, [pc, #232]	@ (8006aa8 <mpu6500_init+0x248>)
 80069be:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff01 	bl	80067c8 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 80069c6:	2305      	movs	r3, #5
 80069c8:	e04f      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 80069ca:	2380      	movs	r3, #128	@ 0x80
 80069cc:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 80069ce:	f107 020a 	add.w	r2, r7, #10
 80069d2:	2301      	movs	r3, #1
 80069d4:	216b      	movs	r1, #107	@ 0x6b
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fec5 	bl	8006766 <a_mpu6500_write>
 80069dc:	4603      	mov	r3, r0
 80069de:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	4830      	ldr	r0, [pc, #192]	@ (8006aac <mpu6500_init+0x24c>)
 80069ec:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff feea 	bl	80067c8 <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 80069f4:	2304      	movs	r3, #4
 80069f6:	e038      	b.n	8006a6a <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	200a      	movs	r0, #10
 80069fe:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8006a00:	2364      	movs	r3, #100	@ 0x64
 8006a02:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8006a04:	e029      	b.n	8006a5a <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 8006a06:	f107 020a 	add.w	r2, r7, #10
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	216b      	movs	r1, #107	@ 0x6b
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fe78 	bl	8006704 <a_mpu6500_read>
 8006a14:	4603      	mov	r3, r0
 8006a16:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	4823      	ldr	r0, [pc, #140]	@ (8006ab0 <mpu6500_init+0x250>)
 8006a24:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fece 	bl	80067c8 <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	e01c      	b.n	8006a6a <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8006a30:	7abb      	ldrb	r3, [r7, #10]
 8006a32:	b25b      	sxtb	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	db09      	blt.n	8006a4c <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e00e      	b.n	8006a6a <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	200a      	movs	r0, #10
 8006a52:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1d2      	bne.n	8006a06 <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	4813      	ldr	r0, [pc, #76]	@ (8006ab4 <mpu6500_init+0x254>)
 8006a66:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 8006a68:	2304      	movs	r3, #4
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	08020c54 	.word	0x08020c54
 8006a78:	08020c70 	.word	0x08020c70
 8006a7c:	08020c90 	.word	0x08020c90
 8006a80:	08020cac 	.word	0x08020cac
 8006a84:	08020ccc 	.word	0x08020ccc
 8006a88:	08020ce8 	.word	0x08020ce8
 8006a8c:	08020d08 	.word	0x08020d08
 8006a90:	08020d24 	.word	0x08020d24
 8006a94:	08020d44 	.word	0x08020d44
 8006a98:	08020d60 	.word	0x08020d60
 8006a9c:	08020d84 	.word	0x08020d84
 8006aa0:	08020da0 	.word	0x08020da0
 8006aa4:	08020dbc 	.word	0x08020dbc
 8006aa8:	08020ddc 	.word	0x08020ddc
 8006aac:	08020df8 	.word	0x08020df8
 8006ab0:	08020e1c 	.word	0x08020e1c
 8006ab4:	08020e40 	.word	0x08020e40

08006ab8 <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e031      	b.n	8006b2e <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d001      	beq.n	8006ad8 <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e02a      	b.n	8006b2e <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 8006ad8:	234f      	movs	r3, #79	@ 0x4f
 8006ada:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8006adc:	f107 020e 	add.w	r2, r7, #14
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	216b      	movs	r1, #107	@ 0x6b
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fe3e 	bl	8006766 <a_mpu6500_write>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af8:	480f      	ldr	r0, [pc, #60]	@ (8006b38 <mpu6500_deinit+0x80>)
 8006afa:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 8006afc:	2304      	movs	r3, #4
 8006afe:	e016      	b.n	8006b2e <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fe61 	bl	80067c8 <a_mpu6500_deinit>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	4809      	ldr	r0, [pc, #36]	@ (8006b3c <mpu6500_deinit+0x84>)
 8006b16:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e008      	b.n	8006b2e <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	08020df8 	.word	0x08020df8
 8006b3c:	08020e58 	.word	0x08020e58

08006b40 <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8006b54:	2302      	movs	r3, #2
 8006b56:	f000 be88 	b.w	800786a <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d002      	beq.n	8006b6a <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8006b64:	2303      	movs	r3, #3
 8006b66:	f000 be80 	b.w	800786a <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	486a      	ldr	r0, [pc, #424]	@ (8006d20 <mpu6500_read+0x1e0>)
 8006b78:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	f000 be75 	b.w	800786a <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8e:	4865      	ldr	r0, [pc, #404]	@ (8006d24 <mpu6500_read+0x1e4>)
 8006b90:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8006b92:	2305      	movs	r3, #5
 8006b94:	f000 be69 	b.w	800786a <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8006b98:	f107 0219 	add.w	r2, r7, #25
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	216a      	movs	r1, #106	@ 0x6a
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fdaf 	bl	8006704 <a_mpu6500_read>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006baa:	7f7b      	ldrb	r3, [r7, #29]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	485c      	ldr	r0, [pc, #368]	@ (8006d28 <mpu6500_read+0x1e8>)
 8006bb6:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f000 be56 	b.w	800786a <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 8006bbe:	f107 0218 	add.w	r2, r7, #24
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	211c      	movs	r1, #28
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fd9c 	bl	8006704 <a_mpu6500_read>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006bd0:	7f7b      	ldrb	r3, [r7, #29]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d006      	beq.n	8006be4 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	4854      	ldr	r0, [pc, #336]	@ (8006d2c <mpu6500_read+0x1ec>)
 8006bdc:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006bde:	2301      	movs	r3, #1
 8006be0:	f000 be43 	b.w	800786a <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8006be4:	f107 0217 	add.w	r2, r7, #23
 8006be8:	2301      	movs	r3, #1
 8006bea:	211b      	movs	r1, #27
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fd89 	bl	8006704 <a_mpu6500_read>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006bf6:	7f7b      	ldrb	r3, [r7, #29]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	484b      	ldr	r0, [pc, #300]	@ (8006d30 <mpu6500_read+0x1f0>)
 8006c02:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006c04:	2301      	movs	r3, #1
 8006c06:	f000 be30 	b.w	800786a <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8006c0a:	7e3b      	ldrb	r3, [r7, #24]
 8006c0c:	08db      	lsrs	r3, r3, #3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8006c26:	7e7b      	ldrb	r3, [r7, #25]
 8006c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8436 	beq.w	800749e <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8006c32:	f107 0216 	add.w	r2, r7, #22
 8006c36:	2301      	movs	r3, #1
 8006c38:	2123      	movs	r1, #35	@ 0x23
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fd62 	bl	8006704 <a_mpu6500_read>
 8006c40:	4603      	mov	r3, r0
 8006c42:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006c44:	7f7b      	ldrb	r3, [r7, #29]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	4839      	ldr	r0, [pc, #228]	@ (8006d34 <mpu6500_read+0x1f4>)
 8006c50:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006c52:	2301      	movs	r3, #1
 8006c54:	f000 be09 	b.w	800786a <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 8006c58:	7dbb      	ldrb	r3, [r7, #22]
 8006c5a:	2b78      	cmp	r3, #120	@ 0x78
 8006c5c:	d006      	beq.n	8006c6c <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	4835      	ldr	r0, [pc, #212]	@ (8006d38 <mpu6500_read+0x1f8>)
 8006c64:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8006c66:	2306      	movs	r3, #6
 8006c68:	f000 bdff 	b.w	800786a <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8006c6c:	f107 0214 	add.w	r2, r7, #20
 8006c70:	2302      	movs	r3, #2
 8006c72:	2172      	movs	r1, #114	@ 0x72
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fd45 	bl	8006704 <a_mpu6500_read>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006c7e:	7f7b      	ldrb	r3, [r7, #29]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d006      	beq.n	8006c92 <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c88:	482c      	ldr	r0, [pc, #176]	@ (8006d3c <mpu6500_read+0x1fc>)
 8006c8a:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f000 bdec 	b.w	800786a <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8006c92:	7d3b      	ldrb	r3, [r7, #20]
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	b21a      	sxth	r2, r3
 8006c9a:	7d7b      	ldrb	r3, [r7, #21]
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b21b      	sxth	r3, r3
 8006ca2:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8006ca4:	8b7b      	ldrh	r3, [r7, #26]
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006caa:	bf28      	it	cs
 8006cac:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006cb0:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8006cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4613      	mov	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	8b7b      	ldrh	r3, [r7, #26]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfa8      	it	ge
 8006cc8:	4613      	movge	r3, r2
 8006cca:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 8006ccc:	8b7b      	ldrh	r3, [r7, #26]
 8006cce:	4a1c      	ldr	r2, [pc, #112]	@ (8006d40 <mpu6500_read+0x200>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	08db      	lsrs	r3, r3, #3
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	0052      	lsls	r2, r2, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8006ce2:	8b7b      	ldrh	r3, [r7, #26]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	@ (8006d40 <mpu6500_read+0x200>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	08db      	lsrs	r3, r3, #3
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf0:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006cf8:	8b7b      	ldrh	r3, [r7, #26]
 8006cfa:	2174      	movs	r1, #116	@ 0x74
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fd01 	bl	8006704 <a_mpu6500_read>
 8006d02:	4603      	mov	r3, r0
 8006d04:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006d06:	7f7b      	ldrb	r3, [r7, #29]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	480c      	ldr	r0, [pc, #48]	@ (8006d44 <mpu6500_read+0x204>)
 8006d12:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006d14:	2301      	movs	r3, #1
 8006d16:	f000 bda8 	b.w	800786a <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	83fb      	strh	r3, [r7, #30]
 8006d1e:	e3b6      	b.n	800748e <mpu6500_read+0x94e>
 8006d20:	08020e74 	.word	0x08020e74
 8006d24:	08020944 	.word	0x08020944
 8006d28:	08020c0c 	.word	0x08020c0c
 8006d2c:	08020bc4 	.word	0x08020bc4
 8006d30:	08020be8 	.word	0x08020be8
 8006d34:	08020e90 	.word	0x08020e90
 8006d38:	08020eb4 	.word	0x08020eb4
 8006d3c:	08020b48 	.word	0x08020b48
 8006d40:	aaaaaaab 	.word	0xaaaaaaab
 8006d44:	08020b6c 	.word	0x08020b6c
 8006d48:	46800000 	.word	0x46800000
 8006d4c:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8006d50:	8bfa      	ldrh	r2, [r7, #30]
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d64:	b21b      	sxth	r3, r3
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 8006d6a:	8bfa      	ldrh	r2, [r7, #30]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	3301      	adds	r3, #1
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d7e:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8006d80:	8bfa      	ldrh	r2, [r7, #30]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4413      	add	r3, r2
 8006d90:	ea40 0201 	orr.w	r2, r0, r1
 8006d94:	b212      	sxth	r2, r2
 8006d96:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8006d98:	8bfa      	ldrh	r2, [r7, #30]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	3302      	adds	r3, #2
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8006db2:	8bfa      	ldrh	r2, [r7, #30]
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	3303      	adds	r3, #3
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dc6:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8006dc8:	8bfa      	ldrh	r2, [r7, #30]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	ea40 0201 	orr.w	r2, r0, r1
 8006ddc:	b212      	sxth	r2, r2
 8006dde:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8006de0:	8bfa      	ldrh	r2, [r7, #30]
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	3304      	adds	r3, #4
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006df4:	b21b      	sxth	r3, r3
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8006dfa:	8bfa      	ldrh	r2, [r7, #30]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3305      	adds	r3, #5
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e0e:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8006e10:	8bfa      	ldrh	r2, [r7, #30]
 8006e12:	4613      	mov	r3, r2
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4413      	add	r3, r2
 8006e20:	ea40 0201 	orr.w	r2, r0, r1
 8006e24:	b212      	sxth	r2, r2
 8006e26:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8006e28:	8bfa      	ldrh	r2, [r7, #30]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3306      	adds	r3, #6
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8006e42:	8bfa      	ldrh	r2, [r7, #30]
 8006e44:	4613      	mov	r3, r2
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	3307      	adds	r3, #7
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e56:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8006e58:	8bfa      	ldrh	r2, [r7, #30]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	461a      	mov	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	4413      	add	r3, r2
 8006e68:	ea40 0201 	orr.w	r2, r0, r1
 8006e6c:	b212      	sxth	r2, r2
 8006e6e:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8006e70:	8bfa      	ldrh	r2, [r7, #30]
 8006e72:	4613      	mov	r3, r2
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e84:	b21b      	sxth	r3, r3
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 8006e8a:	8bfa      	ldrh	r2, [r7, #30]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3309      	adds	r3, #9
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e9e:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8006ea0:	8bfa      	ldrh	r2, [r7, #30]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	461a      	mov	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4413      	add	r3, r2
 8006eb0:	ea40 0201 	orr.w	r2, r0, r1
 8006eb4:	b212      	sxth	r2, r2
 8006eb6:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8006eb8:	8bfa      	ldrh	r2, [r7, #30]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	330a      	adds	r3, #10
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ecc:	b21b      	sxth	r3, r3
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8006ed2:	8bfa      	ldrh	r2, [r7, #30]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	330b      	adds	r3, #11
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ee6:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8006ee8:	8bfa      	ldrh	r2, [r7, #30]
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	ea40 0201 	orr.w	r2, r0, r1
 8006efc:	b212      	sxth	r2, r2
 8006efe:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 8006f00:	7e3b      	ldrb	r3, [r7, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d154      	bne.n	8006fb0 <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8006f06:	8bfa      	ldrh	r2, [r7, #30]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	461a      	mov	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f22:	8bfa      	ldrh	r2, [r7, #30]
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 8006d48 <mpu6500_read+0x208>
 8006f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f3a:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8006f3e:	8bfa      	ldrh	r2, [r7, #30]
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f5a:	8bfa      	ldrh	r2, [r7, #30]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4413      	add	r3, r2
 8006f6a:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 8006d48 <mpu6500_read+0x208>
 8006f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f72:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8006f76:	8bfa      	ldrh	r2, [r7, #30]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	461a      	mov	r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f92:	8bfa      	ldrh	r2, [r7, #30]
 8006f94:	4613      	mov	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 8006d48 <mpu6500_read+0x208>
 8006fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006faa:	edc3 7a02 	vstr	s15, [r3, #8]
 8006fae:	e103      	b.n	80071b8 <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8006fb0:	7e3b      	ldrb	r3, [r7, #24]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d154      	bne.n	8007060 <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8006fb6:	8bfa      	ldrh	r2, [r7, #30]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	4413      	add	r3, r2
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fd2:	8bfa      	ldrh	r2, [r7, #30]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 8006d4c <mpu6500_read+0x20c>
 8006fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fea:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8006fee:	8bfa      	ldrh	r2, [r7, #30]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800700a:	8bfa      	ldrh	r2, [r7, #30]
 800700c:	4613      	mov	r3, r2
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	461a      	mov	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 8006d4c <mpu6500_read+0x20c>
 800701e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007022:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8007026:	8bfa      	ldrh	r2, [r7, #30]
 8007028:	4613      	mov	r3, r2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	4413      	add	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	461a      	mov	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4413      	add	r3, r2
 8007036:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007042:	8bfa      	ldrh	r2, [r7, #30]
 8007044:	4613      	mov	r3, r2
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	461a      	mov	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 8006d4c <mpu6500_read+0x20c>
 8007056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800705a:	edc3 7a02 	vstr	s15, [r3, #8]
 800705e:	e0ab      	b.n	80071b8 <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8007060:	7e3b      	ldrb	r3, [r7, #24]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d154      	bne.n	8007110 <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8007066:	8bfa      	ldrh	r2, [r7, #30]
 8007068:	4613      	mov	r3, r2
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	461a      	mov	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007082:	8bfa      	ldrh	r2, [r7, #30]
 8007084:	4613      	mov	r3, r2
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	461a      	mov	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	eddf 6acd 	vldr	s13, [pc, #820]	@ 80073c8 <mpu6500_read+0x888>
 8007096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800709a:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 800709e:	8bfa      	ldrh	r2, [r7, #30]
 80070a0:	4613      	mov	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4413      	add	r3, r2
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	461a      	mov	r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070ba:	8bfa      	ldrh	r2, [r7, #30]
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	461a      	mov	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	eddf 6abf 	vldr	s13, [pc, #764]	@ 80073c8 <mpu6500_read+0x888>
 80070ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070d2:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 80070d6:	8bfa      	ldrh	r2, [r7, #30]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070f2:	8bfa      	ldrh	r2, [r7, #30]
 80070f4:	4613      	mov	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	461a      	mov	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 80073c8 <mpu6500_read+0x888>
 8007106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800710a:	edc3 7a02 	vstr	s15, [r3, #8]
 800710e:	e053      	b.n	80071b8 <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8007110:	8bfa      	ldrh	r2, [r7, #30]
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	461a      	mov	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4413      	add	r3, r2
 8007120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800712c:	8bfa      	ldrh	r2, [r7, #30]
 800712e:	4613      	mov	r3, r2
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4413      	add	r3, r2
 800713c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80073cc <mpu6500_read+0x88c>
 8007140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007144:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8007148:	8bfa      	ldrh	r2, [r7, #30]
 800714a:	4613      	mov	r3, r2
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	4413      	add	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	461a      	mov	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4413      	add	r3, r2
 8007158:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007164:	8bfa      	ldrh	r2, [r7, #30]
 8007166:	4613      	mov	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80073cc <mpu6500_read+0x88c>
 8007178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800717c:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8007180:	8bfa      	ldrh	r2, [r7, #30]
 8007182:	4613      	mov	r3, r2
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	4413      	add	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	461a      	mov	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4413      	add	r3, r2
 8007190:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800719c:	8bfa      	ldrh	r2, [r7, #30]
 800719e:	4613      	mov	r3, r2
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4413      	add	r3, r2
 80071ac:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80073cc <mpu6500_read+0x88c>
 80071b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071b4:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d154      	bne.n	8007268 <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 80071be:	8bfa      	ldrh	r2, [r7, #30]
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	461a      	mov	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	4413      	add	r3, r2
 80071ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071da:	8bfa      	ldrh	r2, [r7, #30]
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	461a      	mov	r2, r3
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	4413      	add	r3, r2
 80071ea:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80073d0 <mpu6500_read+0x890>
 80071ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071f2:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 80071f6:	8bfa      	ldrh	r2, [r7, #30]
 80071f8:	4613      	mov	r3, r2
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4413      	add	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	461a      	mov	r2, r3
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	4413      	add	r3, r2
 8007206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007212:	8bfa      	ldrh	r2, [r7, #30]
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	461a      	mov	r2, r3
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	4413      	add	r3, r2
 8007222:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80073d0 <mpu6500_read+0x890>
 8007226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800722a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 800722e:	8bfa      	ldrh	r2, [r7, #30]
 8007230:	4613      	mov	r3, r2
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	4413      	add	r3, r2
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	461a      	mov	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	4413      	add	r3, r2
 800723e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800724a:	8bfa      	ldrh	r2, [r7, #30]
 800724c:	4613      	mov	r3, r2
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	461a      	mov	r2, r3
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	4413      	add	r3, r2
 800725a:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80073d0 <mpu6500_read+0x890>
 800725e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007262:	edc3 7a02 	vstr	s15, [r3, #8]
 8007266:	e10f      	b.n	8007488 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d154      	bne.n	8007318 <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 800726e:	8bfa      	ldrh	r2, [r7, #30]
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	461a      	mov	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	4413      	add	r3, r2
 800727e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800728a:	8bfa      	ldrh	r2, [r7, #30]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	461a      	mov	r2, r3
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	4413      	add	r3, r2
 800729a:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80073d4 <mpu6500_read+0x894>
 800729e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072a2:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 80072a6:	8bfa      	ldrh	r2, [r7, #30]
 80072a8:	4613      	mov	r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4413      	add	r3, r2
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	461a      	mov	r2, r3
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4413      	add	r3, r2
 80072b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072c2:	8bfa      	ldrh	r2, [r7, #30]
 80072c4:	4613      	mov	r3, r2
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	461a      	mov	r2, r3
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	4413      	add	r3, r2
 80072d2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80073d4 <mpu6500_read+0x894>
 80072d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072da:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 80072de:	8bfa      	ldrh	r2, [r7, #30]
 80072e0:	4613      	mov	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	461a      	mov	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	4413      	add	r3, r2
 80072ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072fa:	8bfa      	ldrh	r2, [r7, #30]
 80072fc:	4613      	mov	r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	461a      	mov	r2, r3
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	4413      	add	r3, r2
 800730a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80073d4 <mpu6500_read+0x894>
 800730e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007312:	edc3 7a02 	vstr	s15, [r3, #8]
 8007316:	e0b7      	b.n	8007488 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d160      	bne.n	80073e0 <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 800731e:	8bfa      	ldrh	r2, [r7, #30]
 8007320:	4613      	mov	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	461a      	mov	r2, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	4413      	add	r3, r2
 800732e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800733a:	8bfa      	ldrh	r2, [r7, #30]
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	461a      	mov	r2, r3
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	4413      	add	r3, r2
 800734a:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80073d8 <mpu6500_read+0x898>
 800734e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007352:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8007356:	8bfa      	ldrh	r2, [r7, #30]
 8007358:	4613      	mov	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	461a      	mov	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	4413      	add	r3, r2
 8007366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007372:	8bfa      	ldrh	r2, [r7, #30]
 8007374:	4613      	mov	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	461a      	mov	r2, r3
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	4413      	add	r3, r2
 8007382:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80073d8 <mpu6500_read+0x898>
 8007386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800738a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 800738e:	8bfa      	ldrh	r2, [r7, #30]
 8007390:	4613      	mov	r3, r2
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	4413      	add	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	461a      	mov	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	4413      	add	r3, r2
 800739e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073aa:	8bfa      	ldrh	r2, [r7, #30]
 80073ac:	4613      	mov	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	461a      	mov	r2, r3
 80073b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b8:	4413      	add	r3, r2
 80073ba:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80073d8 <mpu6500_read+0x898>
 80073be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073c2:	edc3 7a02 	vstr	s15, [r3, #8]
 80073c6:	e05f      	b.n	8007488 <mpu6500_read+0x948>
 80073c8:	45800000 	.word	0x45800000
 80073cc:	45000000 	.word	0x45000000
 80073d0:	43030000 	.word	0x43030000
 80073d4:	42830000 	.word	0x42830000
 80073d8:	42033333 	.word	0x42033333
 80073dc:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 80073e0:	8bfa      	ldrh	r2, [r7, #30]
 80073e2:	4613      	mov	r3, r2
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4413      	add	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	461a      	mov	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	4413      	add	r3, r2
 80073f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073f4:	ee07 3a90 	vmov	s15, r3
 80073f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073fc:	8bfa      	ldrh	r2, [r7, #30]
 80073fe:	4613      	mov	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	461a      	mov	r2, r3
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	4413      	add	r3, r2
 800740c:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 80073dc <mpu6500_read+0x89c>
 8007410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007414:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8007418:	8bfa      	ldrh	r2, [r7, #30]
 800741a:	4613      	mov	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4413      	add	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	461a      	mov	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	4413      	add	r3, r2
 8007428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007434:	8bfa      	ldrh	r2, [r7, #30]
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	461a      	mov	r2, r3
 8007440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007442:	4413      	add	r3, r2
 8007444:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 80073dc <mpu6500_read+0x89c>
 8007448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800744c:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 8007450:	8bfa      	ldrh	r2, [r7, #30]
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	461a      	mov	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	4413      	add	r3, r2
 8007460:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800746c:	8bfa      	ldrh	r2, [r7, #30]
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	461a      	mov	r2, r3
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	4413      	add	r3, r2
 800747c:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 80073dc <mpu6500_read+0x89c>
 8007480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007484:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8007488:	8bfb      	ldrh	r3, [r7, #30]
 800748a:	3301      	adds	r3, #1
 800748c:	83fb      	strh	r3, [r7, #30]
 800748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	8bfa      	ldrh	r2, [r7, #30]
 8007494:	429a      	cmp	r2, r3
 8007496:	f4ff ac5b 	bcc.w	8006d50 <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 800749a:	2300      	movs	r3, #0
 800749c:	e1e5      	b.n	800786a <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	2201      	movs	r2, #1
 80074a2:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80074aa:	230e      	movs	r3, #14
 80074ac:	213b      	movs	r1, #59	@ 0x3b
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff f928 	bl	8006704 <a_mpu6500_read>
 80074b4:	4603      	mov	r3, r0
 80074b6:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80074b8:	7f7b      	ldrb	r3, [r7, #29]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	48b4      	ldr	r0, [pc, #720]	@ (8007794 <mpu6500_read+0xc54>)
 80074c4:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80074c6:	2301      	movs	r3, #1
 80074c8:	e1cf      	b.n	800786a <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074d0:	b21b      	sxth	r3, r3
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	b21a      	sxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21a      	sxth	r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	b21a      	sxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b21a      	sxth	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007508:	b21b      	sxth	r3, r3
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	b21a      	sxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007514:	b21b      	sxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b21a      	sxth	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007524:	b21b      	sxth	r3, r3
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	b21a      	sxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007530:	b21b      	sxth	r3, r3
 8007532:	4313      	orrs	r3, r2
 8007534:	b21a      	sxth	r2, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8007540:	b21b      	sxth	r3, r3
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b21a      	sxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800754c:	b21b      	sxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b21a      	sxth	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800755c:	b21b      	sxth	r3, r3
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	b21a      	sxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007568:	b21b      	sxth	r3, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	b21a      	sxth	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8007572:	7e3b      	ldrb	r3, [r7, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d12a      	bne.n	80075ce <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007586:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8007798 <mpu6500_read+0xc58>
 800758a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075a2:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8007798 <mpu6500_read+0xc58>
 80075a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075be:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8007798 <mpu6500_read+0xc58>
 80075c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	edc3 7a02 	vstr	s15, [r3, #8]
 80075cc:	e085      	b.n	80076da <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 80075ce:	7e3b      	ldrb	r3, [r7, #24]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d12a      	bne.n	800762a <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075e2:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800779c <mpu6500_read+0xc5c>
 80075e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075fe:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800779c <mpu6500_read+0xc5c>
 8007602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800761a:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800779c <mpu6500_read+0xc5c>
 800761e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	edc3 7a02 	vstr	s15, [r3, #8]
 8007628:	e057      	b.n	80076da <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 800762a:	7e3b      	ldrb	r3, [r7, #24]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d12a      	bne.n	8007686 <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800763e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077a0 <mpu6500_read+0xc60>
 8007642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800765a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80077a0 <mpu6500_read+0xc60>
 800765e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007676:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80077a0 <mpu6500_read+0xc60>
 800767a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	edc3 7a02 	vstr	s15, [r3, #8]
 8007684:	e029      	b.n	80076da <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007694:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80077a4 <mpu6500_read+0xc64>
 8007698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076b0:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80077a4 <mpu6500_read+0xc64>
 80076b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076cc:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80077a4 <mpu6500_read+0xc64>
 80076d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d12a      	bne.n	8007736 <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076ee:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80077a8 <mpu6500_read+0xc68>
 80076f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800770a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80077a8 <mpu6500_read+0xc68>
 800770e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007726:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80077a8 <mpu6500_read+0xc68>
 800772a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800772e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007730:	edc3 7a02 	vstr	s15, [r3, #8]
 8007734:	e098      	b.n	8007868 <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d13d      	bne.n	80077b8 <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800774a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80077ac <mpu6500_read+0xc6c>
 800774e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007766:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80077ac <mpu6500_read+0xc6c>
 800776a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007782:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80077ac <mpu6500_read+0xc6c>
 8007786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	edc3 7a02 	vstr	s15, [r3, #8]
 8007790:	e06a      	b.n	8007868 <mpu6500_read+0xd28>
 8007792:	bf00      	nop
 8007794:	08020b6c 	.word	0x08020b6c
 8007798:	46800000 	.word	0x46800000
 800779c:	46000000 	.word	0x46000000
 80077a0:	45800000 	.word	0x45800000
 80077a4:	45000000 	.word	0x45000000
 80077a8:	43030000 	.word	0x43030000
 80077ac:	42830000 	.word	0x42830000
 80077b0:	42033333 	.word	0x42033333
 80077b4:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d12a      	bne.n	8007814 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077c4:	ee07 3a90 	vmov	s15, r3
 80077c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077cc:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 80077b0 <mpu6500_read+0xc70>
 80077d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d6:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077e8:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 80077b0 <mpu6500_read+0xc70>
 80077ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f2:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80077fc:	ee07 3a90 	vmov	s15, r3
 8007800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007804:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 80077b0 <mpu6500_read+0xc70>
 8007808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	edc3 7a02 	vstr	s15, [r3, #8]
 8007812:	e029      	b.n	8007868 <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007822:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 80077b4 <mpu6500_read+0xc74>
 8007826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800783e:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 80077b4 <mpu6500_read+0xc74>
 8007842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800785a:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 80077b4 <mpu6500_read+0xc74>
 800785e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8007868:	2300      	movs	r3, #0
    }
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop

08007874 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8007886:	2302      	movs	r3, #2
 8007888:	e03a      	b.n	8007900 <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007890:	2b01      	cmp	r3, #1
 8007892:	d001      	beq.n	8007898 <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8007894:	2303      	movs	r3, #3
 8007896:	e033      	b.n	8007900 <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007898:	f107 020e 	add.w	r2, r7, #14
 800789c:	2301      	movs	r3, #1
 800789e:	216a      	movs	r1, #106	@ 0x6a
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fe ff2f 	bl	8006704 <a_mpu6500_read>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	4814      	ldr	r0, [pc, #80]	@ (8007908 <mpu6500_set_fifo+0x94>)
 80078b6:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 80078b8:	2301      	movs	r3, #1
 80078ba:	e021      	b.n	8007900 <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 80078c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078ca:	019b      	lsls	r3, r3, #6
 80078cc:	b25a      	sxtb	r2, r3
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	b25b      	sxtb	r3, r3
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b25b      	sxtb	r3, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80078da:	f107 020e 	add.w	r2, r7, #14
 80078de:	2301      	movs	r3, #1
 80078e0:	216a      	movs	r1, #106	@ 0x6a
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fe ff3f 	bl	8006766 <a_mpu6500_write>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f6:	4805      	ldr	r0, [pc, #20]	@ (800790c <mpu6500_set_fifo+0x98>)
 80078f8:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	08020c0c 	.word	0x08020c0c
 800790c:	08020c30 	.word	0x08020c30

08007910 <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8007922:	2302      	movs	r3, #2
 8007924:	e03a      	b.n	800799c <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800792c:	2b01      	cmp	r3, #1
 800792e:	d001      	beq.n	8007934 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8007930:	2303      	movs	r3, #3
 8007932:	e033      	b.n	800799c <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8007934:	f107 020e 	add.w	r2, r7, #14
 8007938:	2301      	movs	r3, #1
 800793a:	216a      	movs	r1, #106	@ 0x6a
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fe fee1 	bl	8006704 <a_mpu6500_read>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	4814      	ldr	r0, [pc, #80]	@ (80079a4 <mpu6500_set_iic_master+0x94>)
 8007952:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007954:	2301      	movs	r3, #1
 8007956:	e021      	b.n	800799c <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f023 0320 	bic.w	r3, r3, #32
 800795e:	b2db      	uxtb	r3, r3
 8007960:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8007962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007966:	015b      	lsls	r3, r3, #5
 8007968:	b25a      	sxtb	r2, r3
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	b25b      	sxtb	r3, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	b25b      	sxtb	r3, r3
 8007972:	b2db      	uxtb	r3, r3
 8007974:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8007976:	f107 020e 	add.w	r2, r7, #14
 800797a:	2301      	movs	r3, #1
 800797c:	216a      	movs	r1, #106	@ 0x6a
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fe fef1 	bl	8006766 <a_mpu6500_write>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	4805      	ldr	r0, [pc, #20]	@ (80079a8 <mpu6500_set_iic_master+0x98>)
 8007994:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	08020c0c 	.word	0x08020c0c
 80079a8:	08020c30 	.word	0x08020c30

080079ac <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 80079be:	2302      	movs	r3, #2
 80079c0:	e03a      	b.n	8007a38 <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d001      	beq.n	80079d0 <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 80079cc:	2303      	movs	r3, #3
 80079ce:	e033      	b.n	8007a38 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80079d0:	f107 020e 	add.w	r2, r7, #14
 80079d4:	2301      	movs	r3, #1
 80079d6:	216a      	movs	r1, #106	@ 0x6a
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7fe fe93 	bl	8006704 <a_mpu6500_read>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	4814      	ldr	r0, [pc, #80]	@ (8007a40 <mpu6500_set_disable_iic_slave+0x94>)
 80079ee:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80079f0:	2301      	movs	r3, #1
 80079f2:	e021      	b.n	8007a38 <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80079fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	b25a      	sxtb	r2, r3
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	b25b      	sxtb	r3, r3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	b25b      	sxtb	r3, r3
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8007a12:	f107 020e 	add.w	r2, r7, #14
 8007a16:	2301      	movs	r3, #1
 8007a18:	216a      	movs	r1, #106	@ 0x6a
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fe fea3 	bl	8006766 <a_mpu6500_write>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	4805      	ldr	r0, [pc, #20]	@ (8007a44 <mpu6500_set_disable_iic_slave+0x98>)
 8007a30:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	08020c0c 	.word	0x08020c0c
 8007a44:	08020c30 	.word	0x08020c30

08007a48 <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e035      	b.n	8007aca <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e02e      	b.n	8007aca <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007a6c:	f107 020e 	add.w	r2, r7, #14
 8007a70:	2301      	movs	r3, #1
 8007a72:	216b      	movs	r1, #107	@ 0x6b
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fe fe45 	bl	8006704 <a_mpu6500_read>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a88:	4812      	ldr	r0, [pc, #72]	@ (8007ad4 <mpu6500_set_clock_source+0x8c>)
 8007a8a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e01c      	b.n	8007aca <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	f023 0307 	bic.w	r3, r3, #7
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8007a9a:	7bba      	ldrb	r2, [r7, #14]
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007aa4:	f107 020e 	add.w	r2, r7, #14
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	216b      	movs	r1, #107	@ 0x6b
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7fe fe5a 	bl	8006766 <a_mpu6500_write>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac0:	4805      	ldr	r0, [pc, #20]	@ (8007ad8 <mpu6500_set_clock_source+0x90>)
 8007ac2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e000      	b.n	8007aca <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08020ef8 	.word	0x08020ef8
 8007ad8:	08020f24 	.word	0x08020f24

08007adc <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8007aee:	2302      	movs	r3, #2
 8007af0:	e03c      	b.n	8007b6c <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d001      	beq.n	8007b00 <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8007afc:	2303      	movs	r3, #3
 8007afe:	e035      	b.n	8007b6c <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007b00:	f107 020e 	add.w	r2, r7, #14
 8007b04:	2301      	movs	r3, #1
 8007b06:	216b      	movs	r1, #107	@ 0x6b
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fe fdfb 	bl	8006704 <a_mpu6500_read>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	4815      	ldr	r0, [pc, #84]	@ (8007b74 <mpu6500_set_ptat+0x98>)
 8007b1e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007b20:	2301      	movs	r3, #1
 8007b22:	e023      	b.n	8007b6c <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	f023 0308 	bic.w	r3, r3, #8
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <mpu6500_set_ptat+0x5c>
 8007b34:	2208      	movs	r2, #8
 8007b36:	e000      	b.n	8007b3a <mpu6500_set_ptat+0x5e>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b25b      	sxtb	r3, r3
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007b46:	f107 020e 	add.w	r2, r7, #14
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	216b      	movs	r1, #107	@ 0x6b
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fe fe09 	bl	8006766 <a_mpu6500_write>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	4805      	ldr	r0, [pc, #20]	@ (8007b78 <mpu6500_set_ptat+0x9c>)
 8007b64:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	08020ef8 	.word	0x08020ef8
 8007b78:	08020f24 	.word	0x08020f24

08007b7c <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e03a      	b.n	8007c08 <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d001      	beq.n	8007ba0 <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e033      	b.n	8007c08 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007ba0:	f107 020e 	add.w	r2, r7, #14
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	216b      	movs	r1, #107	@ 0x6b
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7fe fdab 	bl	8006704 <a_mpu6500_read>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	4814      	ldr	r0, [pc, #80]	@ (8007c10 <mpu6500_set_cycle_wake_up+0x94>)
 8007bbe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e021      	b.n	8007c08 <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	f023 0320 	bic.w	r3, r3, #32
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8007bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bd2:	015b      	lsls	r3, r3, #5
 8007bd4:	b25a      	sxtb	r2, r3
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b25b      	sxtb	r3, r3
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007be2:	f107 020e 	add.w	r2, r7, #14
 8007be6:	2301      	movs	r3, #1
 8007be8:	216b      	movs	r1, #107	@ 0x6b
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fe fdbb 	bl	8006766 <a_mpu6500_write>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfe:	4805      	ldr	r0, [pc, #20]	@ (8007c14 <mpu6500_set_cycle_wake_up+0x98>)
 8007c00:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	08020ef8 	.word	0x08020ef8
 8007c14:	08020f24 	.word	0x08020f24

08007c18 <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e03a      	b.n	8007ca4 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d001      	beq.n	8007c3c <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e033      	b.n	8007ca4 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007c3c:	f107 020e 	add.w	r2, r7, #14
 8007c40:	2301      	movs	r3, #1
 8007c42:	216b      	movs	r1, #107	@ 0x6b
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7fe fd5d 	bl	8006704 <a_mpu6500_read>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	4814      	ldr	r0, [pc, #80]	@ (8007cac <mpu6500_set_sleep+0x94>)
 8007c5a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e021      	b.n	8007ca4 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 8007c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c6e:	019b      	lsls	r3, r3, #6
 8007c70:	b25a      	sxtb	r2, r3
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007c7e:	f107 020e 	add.w	r2, r7, #14
 8007c82:	2301      	movs	r3, #1
 8007c84:	216b      	movs	r1, #107	@ 0x6b
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fe fd6d 	bl	8006766 <a_mpu6500_write>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d005      	beq.n	8007ca2 <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	4805      	ldr	r0, [pc, #20]	@ (8007cb0 <mpu6500_set_sleep+0x98>)
 8007c9c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e000      	b.n	8007ca4 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	08020ef8 	.word	0x08020ef8
 8007cb0:	08020f24 	.word	0x08020f24

08007cb4 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e03a      	b.n	8007d40 <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e033      	b.n	8007d40 <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007cd8:	f107 020e 	add.w	r2, r7, #14
 8007cdc:	2301      	movs	r3, #1
 8007cde:	216b      	movs	r1, #107	@ 0x6b
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fe fd0f 	bl	8006704 <a_mpu6500_read>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf4:	4814      	ldr	r0, [pc, #80]	@ (8007d48 <mpu6500_set_gyro_standby+0x94>)
 8007cf6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e021      	b.n	8007d40 <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	f023 0310 	bic.w	r3, r3, #16
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8007d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	b25a      	sxtb	r2, r3
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	4313      	orrs	r3, r2
 8007d14:	b25b      	sxtb	r3, r3
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007d1a:	f107 020e 	add.w	r2, r7, #14
 8007d1e:	2301      	movs	r3, #1
 8007d20:	216b      	movs	r1, #107	@ 0x6b
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fe fd1f 	bl	8006766 <a_mpu6500_write>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d36:	4805      	ldr	r0, [pc, #20]	@ (8007d4c <mpu6500_set_gyro_standby+0x98>)
 8007d38:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	08020ef8 	.word	0x08020ef8
 8007d4c:	08020f24 	.word	0x08020f24

08007d50 <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8007d66:	2302      	movs	r3, #2
 8007d68:	e043      	b.n	8007df2 <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d001      	beq.n	8007d78 <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8007d74:	2303      	movs	r3, #3
 8007d76:	e03c      	b.n	8007df2 <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8007d78:	f107 020e 	add.w	r2, r7, #14
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	216c      	movs	r1, #108	@ 0x6c
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fe fcbf 	bl	8006704 <a_mpu6500_read>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	4819      	ldr	r0, [pc, #100]	@ (8007dfc <mpu6500_set_standby_mode+0xac>)
 8007d96:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e02a      	b.n	8007df2 <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	b25a      	sxtb	r2, r3
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	b25b      	sxtb	r3, r3
 8007dae:	4013      	ands	r3, r2
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 8007db6:	78ba      	ldrb	r2, [r7, #2]
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	b25a      	sxtb	r2, r3
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	b25b      	sxtb	r3, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	b25b      	sxtb	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8007dcc:	f107 020e 	add.w	r2, r7, #14
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	216c      	movs	r1, #108	@ 0x6c
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fe fcc6 	bl	8006766 <a_mpu6500_write>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de8:	4805      	ldr	r0, [pc, #20]	@ (8007e00 <mpu6500_set_standby_mode+0xb0>)
 8007dea:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08020f50 	.word	0x08020f50
 8007e00:	08020f7c 	.word	0x08020f7c

08007e04 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 8007e16:	2302      	movs	r3, #2
 8007e18:	e018      	b.n	8007e4c <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d001      	beq.n	8007e28 <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8007e24:	2303      	movs	r3, #3
 8007e26:	e011      	b.n	8007e4c <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8007e28:	1cfa      	adds	r2, r7, #3
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	2119      	movs	r1, #25
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fe fc99 	bl	8006766 <a_mpu6500_write>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	4804      	ldr	r0, [pc, #16]	@ (8007e54 <mpu6500_set_sample_rate_divider+0x50>)
 8007e44:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	0802103c 	.word	0x0802103c

08007e58 <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e03a      	b.n	8007ee4 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d001      	beq.n	8007e7c <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e033      	b.n	8007ee4 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007e7c:	f107 020e 	add.w	r2, r7, #14
 8007e80:	2301      	movs	r3, #1
 8007e82:	211a      	movs	r1, #26
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7fe fc3d 	bl	8006704 <a_mpu6500_read>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e98:	4814      	ldr	r0, [pc, #80]	@ (8007eec <mpu6500_set_extern_sync+0x94>)
 8007e9a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e021      	b.n	8007ee4 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 8007eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	b25a      	sxtb	r2, r3
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007ebe:	f107 020e 	add.w	r2, r7, #14
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	211a      	movs	r1, #26
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fe fc4d 	bl	8006766 <a_mpu6500_write>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eda:	4805      	ldr	r0, [pc, #20]	@ (8007ef0 <mpu6500_set_extern_sync+0x98>)
 8007edc:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	08021084 	.word	0x08021084
 8007ef0:	080210a4 	.word	0x080210a4

08007ef4 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 8007f06:	2302      	movs	r3, #2
 8007f08:	e035      	b.n	8007f76 <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d001      	beq.n	8007f18 <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8007f14:	2303      	movs	r3, #3
 8007f16:	e02e      	b.n	8007f76 <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007f18:	f107 020e 	add.w	r2, r7, #14
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	211a      	movs	r1, #26
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fe fbef 	bl	8006704 <a_mpu6500_read>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f34:	4812      	ldr	r0, [pc, #72]	@ (8007f80 <mpu6500_set_low_pass_filter+0x8c>)
 8007f36:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e01c      	b.n	8007f76 <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	f023 0307 	bic.w	r3, r3, #7
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 8007f46:	7bba      	ldrb	r2, [r7, #14]
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007f50:	f107 020e 	add.w	r2, r7, #14
 8007f54:	2301      	movs	r3, #1
 8007f56:	211a      	movs	r1, #26
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fe fc04 	bl	8006766 <a_mpu6500_write>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6c:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <mpu6500_set_low_pass_filter+0x90>)
 8007f6e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	08021084 	.word	0x08021084
 8007f84:	080210a4 	.word	0x080210a4

08007f88 <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e03a      	b.n	8008014 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d001      	beq.n	8007fac <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e033      	b.n	8008014 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007fac:	f107 020e 	add.w	r2, r7, #14
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	211a      	movs	r1, #26
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe fba5 	bl	8006704 <a_mpu6500_read>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc8:	4814      	ldr	r0, [pc, #80]	@ (800801c <mpu6500_set_fifo_mode+0x94>)
 8007fca:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e021      	b.n	8008014 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8007fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fde:	019b      	lsls	r3, r3, #6
 8007fe0:	b25a      	sxtb	r2, r3
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007fee:	f107 020e 	add.w	r2, r7, #14
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	211a      	movs	r1, #26
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fe fbb5 	bl	8006766 <a_mpu6500_write>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	4805      	ldr	r0, [pc, #20]	@ (8008020 <mpu6500_set_fifo_mode+0x98>)
 800800c:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	08021084 	.word	0x08021084
 8008020:	080210a4 	.word	0x080210a4

08008024 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
 8008030:	4613      	mov	r3, r2
 8008032:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 800803a:	2302      	movs	r3, #2
 800803c:	e043      	b.n	80080c6 <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008044:	2b01      	cmp	r3, #1
 8008046:	d001      	beq.n	800804c <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8008048:	2303      	movs	r3, #3
 800804a:	e03c      	b.n	80080c6 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 800804c:	f107 020e 	add.w	r2, r7, #14
 8008050:	2301      	movs	r3, #1
 8008052:	211b      	movs	r1, #27
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe fb55 	bl	8006704 <a_mpu6500_read>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	4819      	ldr	r0, [pc, #100]	@ (80080d0 <mpu6500_set_gyroscope_test+0xac>)
 800806a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800806c:	2301      	movs	r3, #1
 800806e:	e02a      	b.n	80080c6 <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	2201      	movs	r2, #1
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	b25b      	sxtb	r3, r3
 800807a:	43db      	mvns	r3, r3
 800807c:	b25a      	sxtb	r2, r3
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	b25b      	sxtb	r3, r3
 8008082:	4013      	ands	r3, r2
 8008084:	b25b      	sxtb	r3, r3
 8008086:	b2db      	uxtb	r3, r3
 8008088:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 800808a:	78ba      	ldrb	r2, [r7, #2]
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	fa02 f303 	lsl.w	r3, r2, r3
 8008092:	b25a      	sxtb	r2, r3
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	b25b      	sxtb	r3, r3
 8008098:	4313      	orrs	r3, r2
 800809a:	b25b      	sxtb	r3, r3
 800809c:	b2db      	uxtb	r3, r3
 800809e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80080a0:	f107 020e 	add.w	r2, r7, #14
 80080a4:	2301      	movs	r3, #1
 80080a6:	211b      	movs	r1, #27
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fe fb5c 	bl	8006766 <a_mpu6500_write>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080bc:	4805      	ldr	r0, [pc, #20]	@ (80080d4 <mpu6500_set_gyroscope_test+0xb0>)
 80080be:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80080c0:	2301      	movs	r3, #1
 80080c2:	e000      	b.n	80080c6 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	080210c4 	.word	0x080210c4
 80080d4:	080210ec 	.word	0x080210ec

080080d8 <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 80080ea:	2302      	movs	r3, #2
 80080ec:	e03a      	b.n	8008164 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d001      	beq.n	80080fc <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 80080f8:	2303      	movs	r3, #3
 80080fa:	e033      	b.n	8008164 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80080fc:	f107 020e 	add.w	r2, r7, #14
 8008100:	2301      	movs	r3, #1
 8008102:	211b      	movs	r1, #27
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe fafd 	bl	8006704 <a_mpu6500_read>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	4814      	ldr	r0, [pc, #80]	@ (800816c <mpu6500_set_gyroscope_range+0x94>)
 800811a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800811c:	2301      	movs	r3, #1
 800811e:	e021      	b.n	8008164 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	f023 0318 	bic.w	r3, r3, #24
 8008126:	b2db      	uxtb	r3, r3
 8008128:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 800812a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	b25a      	sxtb	r2, r3
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	b25b      	sxtb	r3, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	b25b      	sxtb	r3, r3
 800813a:	b2db      	uxtb	r3, r3
 800813c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 800813e:	f107 020e 	add.w	r2, r7, #14
 8008142:	2301      	movs	r3, #1
 8008144:	211b      	movs	r1, #27
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fe fb0d 	bl	8006766 <a_mpu6500_write>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815a:	4805      	ldr	r0, [pc, #20]	@ (8008170 <mpu6500_set_gyroscope_range+0x98>)
 800815c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	080210c4 	.word	0x080210c4
 8008170:	080210ec 	.word	0x080210ec

08008174 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8008186:	2302      	movs	r3, #2
 8008188:	e03e      	b.n	8008208 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008190:	2b01      	cmp	r3, #1
 8008192:	d001      	beq.n	8008198 <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8008194:	2303      	movs	r3, #3
 8008196:	e037      	b.n	8008208 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	2b03      	cmp	r3, #3
 800819c:	d905      	bls.n	80081aa <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	481b      	ldr	r0, [pc, #108]	@ (8008210 <mpu6500_set_gyroscope_choice+0x9c>)
 80081a4:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 80081a6:	2304      	movs	r3, #4
 80081a8:	e02e      	b.n	8008208 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80081aa:	f107 020e 	add.w	r2, r7, #14
 80081ae:	2301      	movs	r3, #1
 80081b0:	211b      	movs	r1, #27
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fe faa6 	bl	8006704 <a_mpu6500_read>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	4813      	ldr	r0, [pc, #76]	@ (8008214 <mpu6500_set_gyroscope_choice+0xa0>)
 80081c8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80081ca:	2301      	movs	r3, #1
 80081cc:	e01c      	b.n	8008208 <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	f023 0303 	bic.w	r3, r3, #3
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 80081d8:	7bba      	ldrb	r2, [r7, #14]
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	4313      	orrs	r3, r2
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80081e2:	f107 020e 	add.w	r2, r7, #14
 80081e6:	2301      	movs	r3, #1
 80081e8:	211b      	movs	r1, #27
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fe fabb 	bl	8006766 <a_mpu6500_write>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	4806      	ldr	r0, [pc, #24]	@ (8008218 <mpu6500_set_gyroscope_choice+0xa4>)
 8008200:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	08021118 	.word	0x08021118
 8008214:	080210c4 	.word	0x080210c4
 8008218:	080210ec 	.word	0x080210ec

0800821c <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
 8008228:	4613      	mov	r3, r2
 800822a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8008232:	2302      	movs	r3, #2
 8008234:	e043      	b.n	80082be <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800823c:	2b01      	cmp	r3, #1
 800823e:	d001      	beq.n	8008244 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 8008240:	2303      	movs	r3, #3
 8008242:	e03c      	b.n	80082be <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8008244:	f107 020e 	add.w	r2, r7, #14
 8008248:	2301      	movs	r3, #1
 800824a:	211c      	movs	r1, #28
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7fe fa59 	bl	8006704 <a_mpu6500_read>
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	4819      	ldr	r0, [pc, #100]	@ (80082c8 <mpu6500_set_accelerometer_test+0xac>)
 8008262:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008264:	2301      	movs	r3, #1
 8008266:	e02a      	b.n	80082be <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	2201      	movs	r2, #1
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	b25b      	sxtb	r3, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	b25a      	sxtb	r2, r3
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	b25b      	sxtb	r3, r3
 800827a:	4013      	ands	r3, r2
 800827c:	b25b      	sxtb	r3, r3
 800827e:	b2db      	uxtb	r3, r3
 8008280:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8008282:	78ba      	ldrb	r2, [r7, #2]
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	b25a      	sxtb	r2, r3
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	b25b      	sxtb	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b25b      	sxtb	r3, r3
 8008294:	b2db      	uxtb	r3, r3
 8008296:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8008298:	f107 020e 	add.w	r2, r7, #14
 800829c:	2301      	movs	r3, #1
 800829e:	211c      	movs	r1, #28
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fe fa60 	bl	8006766 <a_mpu6500_write>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b4:	4805      	ldr	r0, [pc, #20]	@ (80082cc <mpu6500_set_accelerometer_test+0xb0>)
 80082b6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	08020a74 	.word	0x08020a74
 80082cc:	08021130 	.word	0x08021130

080082d0 <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 80082e2:	2302      	movs	r3, #2
 80082e4:	e03a      	b.n	800835c <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d001      	beq.n	80082f4 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 80082f0:	2303      	movs	r3, #3
 80082f2:	e033      	b.n	800835c <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80082f4:	f107 020e 	add.w	r2, r7, #14
 80082f8:	2301      	movs	r3, #1
 80082fa:	211c      	movs	r1, #28
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7fe fa01 	bl	8006704 <a_mpu6500_read>
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	4814      	ldr	r0, [pc, #80]	@ (8008364 <mpu6500_set_accelerometer_range+0x94>)
 8008312:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008314:	2301      	movs	r3, #1
 8008316:	e021      	b.n	800835c <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	f023 0318 	bic.w	r3, r3, #24
 800831e:	b2db      	uxtb	r3, r3
 8008320:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8008322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	b25a      	sxtb	r2, r3
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	b25b      	sxtb	r3, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	b25b      	sxtb	r3, r3
 8008332:	b2db      	uxtb	r3, r3
 8008334:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8008336:	f107 020e 	add.w	r2, r7, #14
 800833a:	2301      	movs	r3, #1
 800833c:	211c      	movs	r1, #28
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fe fa11 	bl	8006766 <a_mpu6500_write>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	4805      	ldr	r0, [pc, #20]	@ (8008368 <mpu6500_set_accelerometer_range+0x98>)
 8008354:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008356:	2301      	movs	r3, #1
 8008358:	e000      	b.n	800835c <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	08020a74 	.word	0x08020a74
 8008368:	08021130 	.word	0x08021130

0800836c <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 800837a:	2302      	movs	r3, #2
 800837c:	e035      	b.n	80083ea <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008384:	2b01      	cmp	r3, #1
 8008386:	d001      	beq.n	800838c <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 8008388:	2303      	movs	r3, #3
 800838a:	e02e      	b.n	80083ea <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 800838c:	f107 020e 	add.w	r2, r7, #14
 8008390:	2301      	movs	r3, #1
 8008392:	211d      	movs	r1, #29
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7fe f9b5 	bl	8006704 <a_mpu6500_read>
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a8:	4812      	ldr	r0, [pc, #72]	@ (80083f4 <mpu6500_set_fifo_1024kb+0x88>)
 80083aa:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80083ac:	2301      	movs	r3, #1
 80083ae:	e01c      	b.n	80083ea <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 80083c4:	f107 020e 	add.w	r2, r7, #14
 80083c8:	2301      	movs	r3, #1
 80083ca:	211d      	movs	r1, #29
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7fe f9ca 	bl	8006766 <a_mpu6500_write>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	4805      	ldr	r0, [pc, #20]	@ (80083f8 <mpu6500_set_fifo_1024kb+0x8c>)
 80083e2:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80083e4:	2301      	movs	r3, #1
 80083e6:	e000      	b.n	80083ea <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	08021160 	.word	0x08021160
 80083f8:	08021190 	.word	0x08021190

080083fc <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 800840e:	2302      	movs	r3, #2
 8008410:	e043      	b.n	800849a <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008418:	2b01      	cmp	r3, #1
 800841a:	d001      	beq.n	8008420 <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 800841c:	2303      	movs	r3, #3
 800841e:	e03c      	b.n	800849a <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d905      	bls.n	8008432 <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842a:	481e      	ldr	r0, [pc, #120]	@ (80084a4 <mpu6500_set_accelerometer_choice+0xa8>)
 800842c:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800842e:	2304      	movs	r3, #4
 8008430:	e033      	b.n	800849a <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 8008432:	f107 020e 	add.w	r2, r7, #14
 8008436:	2301      	movs	r3, #1
 8008438:	211d      	movs	r1, #29
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe f962 	bl	8006704 <a_mpu6500_read>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844e:	4816      	ldr	r0, [pc, #88]	@ (80084a8 <mpu6500_set_accelerometer_choice+0xac>)
 8008450:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008452:	2301      	movs	r3, #1
 8008454:	e021      	b.n	800849a <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f023 0308 	bic.w	r3, r3, #8
 800845c:	b2db      	uxtb	r3, r3
 800845e:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 8008460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	b25a      	sxtb	r2, r3
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	b25b      	sxtb	r3, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	b25b      	sxtb	r3, r3
 8008470:	b2db      	uxtb	r3, r3
 8008472:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 8008474:	f107 020e 	add.w	r2, r7, #14
 8008478:	2301      	movs	r3, #1
 800847a:	211d      	movs	r1, #29
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7fe f972 	bl	8006766 <a_mpu6500_write>
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008490:	4806      	ldr	r0, [pc, #24]	@ (80084ac <mpu6500_set_accelerometer_choice+0xb0>)
 8008492:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	080211c0 	.word	0x080211c0
 80084a8:	08021160 	.word	0x08021160
 80084ac:	08021190 	.word	0x08021190

080084b0 <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 80084c2:	2302      	movs	r3, #2
 80084c4:	e035      	b.n	8008532 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d001      	beq.n	80084d4 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 80084d0:	2303      	movs	r3, #3
 80084d2:	e02e      	b.n	8008532 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 80084d4:	f107 020e 	add.w	r2, r7, #14
 80084d8:	2301      	movs	r3, #1
 80084da:	211d      	movs	r1, #29
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7fe f911 	bl	8006704 <a_mpu6500_read>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	4812      	ldr	r0, [pc, #72]	@ (800853c <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 80084f2:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80084f4:	2301      	movs	r3, #1
 80084f6:	e01c      	b.n	8008532 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	f023 0307 	bic.w	r3, r3, #7
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 8008502:	7bba      	ldrb	r2, [r7, #14]
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	4313      	orrs	r3, r2
 8008508:	b2db      	uxtb	r3, r3
 800850a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 800850c:	f107 020e 	add.w	r2, r7, #14
 8008510:	2301      	movs	r3, #1
 8008512:	211d      	movs	r1, #29
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fe f926 	bl	8006766 <a_mpu6500_write>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	4805      	ldr	r0, [pc, #20]	@ (8008540 <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 800852a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	08021160 	.word	0x08021160
 8008540:	08021190 	.word	0x08021190

08008544 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 8008556:	2302      	movs	r3, #2
 8008558:	e035      	b.n	80085c6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008560:	2b01      	cmp	r3, #1
 8008562:	d001      	beq.n	8008568 <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 8008564:	2303      	movs	r3, #3
 8008566:	e02e      	b.n	80085c6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 8008568:	f107 020e 	add.w	r2, r7, #14
 800856c:	2301      	movs	r3, #1
 800856e:	211e      	movs	r1, #30
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fe f8c7 	bl	8006704 <a_mpu6500_read>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	4812      	ldr	r0, [pc, #72]	@ (80085d0 <mpu6500_set_low_power_accel_output_rate+0x8c>)
 8008586:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8008588:	2301      	movs	r3, #1
 800858a:	e01c      	b.n	80085c6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	f023 030f 	bic.w	r3, r3, #15
 8008592:	b2db      	uxtb	r3, r3
 8008594:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 8008596:	7bba      	ldrb	r2, [r7, #14]
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	4313      	orrs	r3, r2
 800859c:	b2db      	uxtb	r3, r3
 800859e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 80085a0:	f107 020e 	add.w	r2, r7, #14
 80085a4:	2301      	movs	r3, #1
 80085a6:	211e      	movs	r1, #30
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7fe f8dc 	bl	8006766 <a_mpu6500_write>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085bc:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <mpu6500_set_low_power_accel_output_rate+0x90>)
 80085be:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80085c0:	2301      	movs	r3, #1
 80085c2:	e000      	b.n	80085c6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	080211d8 	.word	0x080211d8
 80085d4:	08021204 	.word	0x08021204

080085d8 <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 80085ea:	2302      	movs	r3, #2
 80085ec:	e03a      	b.n	8008664 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d001      	beq.n	80085fc <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 80085f8:	2303      	movs	r3, #3
 80085fa:	e033      	b.n	8008664 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80085fc:	f107 020e 	add.w	r2, r7, #14
 8008600:	2301      	movs	r3, #1
 8008602:	2169      	movs	r1, #105	@ 0x69
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fe f87d 	bl	8006704 <a_mpu6500_read>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008618:	4814      	ldr	r0, [pc, #80]	@ (800866c <mpu6500_set_wake_on_motion+0x94>)
 800861a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800861c:	2301      	movs	r3, #1
 800861e:	e021      	b.n	8008664 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008626:	b2db      	uxtb	r3, r3
 8008628:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 800862a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800862e:	01db      	lsls	r3, r3, #7
 8008630:	b25a      	sxtb	r2, r3
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	b25b      	sxtb	r3, r3
 8008636:	4313      	orrs	r3, r2
 8008638:	b25b      	sxtb	r3, r3
 800863a:	b2db      	uxtb	r3, r3
 800863c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800863e:	f107 020e 	add.w	r2, r7, #14
 8008642:	2301      	movs	r3, #1
 8008644:	2169      	movs	r1, #105	@ 0x69
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe f88d 	bl	8006766 <a_mpu6500_write>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865a:	4805      	ldr	r0, [pc, #20]	@ (8008670 <mpu6500_set_wake_on_motion+0x98>)
 800865c:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	08021234 	.word	0x08021234
 8008670:	08021260 	.word	0x08021260

08008674 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 8008686:	2302      	movs	r3, #2
 8008688:	e03a      	b.n	8008700 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008690:	2b01      	cmp	r3, #1
 8008692:	d001      	beq.n	8008698 <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8008694:	2303      	movs	r3, #3
 8008696:	e033      	b.n	8008700 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8008698:	f107 020e 	add.w	r2, r7, #14
 800869c:	2301      	movs	r3, #1
 800869e:	2169      	movs	r1, #105	@ 0x69
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fe f82f 	bl	8006704 <a_mpu6500_read>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b4:	4814      	ldr	r0, [pc, #80]	@ (8008708 <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 80086b6:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80086b8:	2301      	movs	r3, #1
 80086ba:	e021      	b.n	8008700 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 80086c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ca:	019b      	lsls	r3, r3, #6
 80086cc:	b25a      	sxtb	r2, r3
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	4313      	orrs	r3, r2
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80086da:	f107 020e 	add.w	r2, r7, #14
 80086de:	2301      	movs	r3, #1
 80086e0:	2169      	movs	r1, #105	@ 0x69
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fe f83f 	bl	8006766 <a_mpu6500_write>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f6:	4805      	ldr	r0, [pc, #20]	@ (800870c <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 80086f8:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	08021234 	.word	0x08021234
 800870c:	08021260 	.word	0x08021260

08008710 <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
 800871c:	4613      	mov	r3, r2
 800871e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 8008726:	2302      	movs	r3, #2
 8008728:	e043      	b.n	80087b2 <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008730:	2b01      	cmp	r3, #1
 8008732:	d001      	beq.n	8008738 <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8008734:	2303      	movs	r3, #3
 8008736:	e03c      	b.n	80087b2 <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8008738:	f107 020e 	add.w	r2, r7, #14
 800873c:	2301      	movs	r3, #1
 800873e:	2123      	movs	r1, #35	@ 0x23
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7fd ffdf 	bl	8006704 <a_mpu6500_read>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008754:	4819      	ldr	r0, [pc, #100]	@ (80087bc <mpu6500_set_fifo_enable+0xac>)
 8008756:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8008758:	2301      	movs	r3, #1
 800875a:	e02a      	b.n	80087b2 <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	2201      	movs	r2, #1
 8008760:	fa02 f303 	lsl.w	r3, r2, r3
 8008764:	b25b      	sxtb	r3, r3
 8008766:	43db      	mvns	r3, r3
 8008768:	b25a      	sxtb	r2, r3
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	b25b      	sxtb	r3, r3
 800876e:	4013      	ands	r3, r2
 8008770:	b25b      	sxtb	r3, r3
 8008772:	b2db      	uxtb	r3, r3
 8008774:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 8008776:	78ba      	ldrb	r2, [r7, #2]
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	b25a      	sxtb	r2, r3
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	b25b      	sxtb	r3, r3
 8008784:	4313      	orrs	r3, r2
 8008786:	b25b      	sxtb	r3, r3
 8008788:	b2db      	uxtb	r3, r3
 800878a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 800878c:	f107 020e 	add.w	r2, r7, #14
 8008790:	2301      	movs	r3, #1
 8008792:	2123      	movs	r1, #35	@ 0x23
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7fd ffe6 	bl	8006766 <a_mpu6500_write>
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d005      	beq.n	80087b0 <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	4805      	ldr	r0, [pc, #20]	@ (80087c0 <mpu6500_set_fifo_enable+0xb0>)
 80087aa:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	0802128c 	.word	0x0802128c
 80087c0:	080212b8 	.word	0x080212b8

080087c4 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 80087d6:	2302      	movs	r3, #2
 80087d8:	e03a      	b.n	8008850 <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d001      	beq.n	80087e8 <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 80087e4:	2303      	movs	r3, #3
 80087e6:	e033      	b.n	8008850 <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80087e8:	f107 020e 	add.w	r2, r7, #14
 80087ec:	2301      	movs	r3, #1
 80087ee:	2137      	movs	r1, #55	@ 0x37
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7fd ff87 	bl	8006704 <a_mpu6500_read>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008804:	4814      	ldr	r0, [pc, #80]	@ (8008858 <mpu6500_set_interrupt_level+0x94>)
 8008806:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008808:	2301      	movs	r3, #1
 800880a:	e021      	b.n	8008850 <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008812:	b2db      	uxtb	r3, r3
 8008814:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 8008816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800881a:	01db      	lsls	r3, r3, #7
 800881c:	b25a      	sxtb	r2, r3
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	b25b      	sxtb	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	b25b      	sxtb	r3, r3
 8008826:	b2db      	uxtb	r3, r3
 8008828:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800882a:	f107 020e 	add.w	r2, r7, #14
 800882e:	2301      	movs	r3, #1
 8008830:	2137      	movs	r1, #55	@ 0x37
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fd ff97 	bl	8006766 <a_mpu6500_write>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008846:	4805      	ldr	r0, [pc, #20]	@ (800885c <mpu6500_set_interrupt_level+0x98>)
 8008848:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	080212e4 	.word	0x080212e4
 800885c:	0802130c 	.word	0x0802130c

08008860 <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 8008872:	2302      	movs	r3, #2
 8008874:	e03a      	b.n	80088ec <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800887c:	2b01      	cmp	r3, #1
 800887e:	d001      	beq.n	8008884 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8008880:	2303      	movs	r3, #3
 8008882:	e033      	b.n	80088ec <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008884:	f107 020e 	add.w	r2, r7, #14
 8008888:	2301      	movs	r3, #1
 800888a:	2137      	movs	r1, #55	@ 0x37
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7fd ff39 	bl	8006704 <a_mpu6500_read>
 8008892:	4603      	mov	r3, r0
 8008894:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d005      	beq.n	80088a8 <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a0:	4814      	ldr	r0, [pc, #80]	@ (80088f4 <mpu6500_set_interrupt_pin_type+0x94>)
 80088a2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80088a4:	2301      	movs	r3, #1
 80088a6:	e021      	b.n	80088ec <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 80088b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088b6:	019b      	lsls	r3, r3, #6
 80088b8:	b25a      	sxtb	r2, r3
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	b25b      	sxtb	r3, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	b25b      	sxtb	r3, r3
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80088c6:	f107 020e 	add.w	r2, r7, #14
 80088ca:	2301      	movs	r3, #1
 80088cc:	2137      	movs	r1, #55	@ 0x37
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fd ff49 	bl	8006766 <a_mpu6500_write>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e2:	4805      	ldr	r0, [pc, #20]	@ (80088f8 <mpu6500_set_interrupt_pin_type+0x98>)
 80088e4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	080212e4 	.word	0x080212e4
 80088f8:	0802130c 	.word	0x0802130c

080088fc <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 800890e:	2302      	movs	r3, #2
 8008910:	e03c      	b.n	800898c <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 800891c:	2303      	movs	r3, #3
 800891e:	e035      	b.n	800898c <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008920:	f107 020e 	add.w	r2, r7, #14
 8008924:	2301      	movs	r3, #1
 8008926:	2137      	movs	r1, #55	@ 0x37
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fd feeb 	bl	8006704 <a_mpu6500_read>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893c:	4815      	ldr	r0, [pc, #84]	@ (8008994 <mpu6500_set_interrupt_latch+0x98>)
 800893e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008940:	2301      	movs	r3, #1
 8008942:	e023      	b.n	800898c <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	f023 0320 	bic.w	r3, r3, #32
 800894a:	b2db      	uxtb	r3, r3
 800894c:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <mpu6500_set_interrupt_latch+0x5c>
 8008954:	2220      	movs	r2, #32
 8008956:	e000      	b.n	800895a <mpu6500_set_interrupt_latch+0x5e>
 8008958:	2200      	movs	r2, #0
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	b25b      	sxtb	r3, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	b25b      	sxtb	r3, r3
 8008962:	b2db      	uxtb	r3, r3
 8008964:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008966:	f107 020e 	add.w	r2, r7, #14
 800896a:	2301      	movs	r3, #1
 800896c:	2137      	movs	r1, #55	@ 0x37
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fd fef9 	bl	8006766 <a_mpu6500_write>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008982:	4805      	ldr	r0, [pc, #20]	@ (8008998 <mpu6500_set_interrupt_latch+0x9c>)
 8008984:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	080212e4 	.word	0x080212e4
 8008998:	0802130c 	.word	0x0802130c

0800899c <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 80089ae:	2302      	movs	r3, #2
 80089b0:	e03a      	b.n	8008a28 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d001      	beq.n	80089c0 <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 80089bc:	2303      	movs	r3, #3
 80089be:	e033      	b.n	8008a28 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80089c0:	f107 020e 	add.w	r2, r7, #14
 80089c4:	2301      	movs	r3, #1
 80089c6:	2137      	movs	r1, #55	@ 0x37
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fd fe9b 	bl	8006704 <a_mpu6500_read>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089dc:	4814      	ldr	r0, [pc, #80]	@ (8008a30 <mpu6500_set_interrupt_read_clear+0x94>)
 80089de:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80089e0:	2301      	movs	r3, #1
 80089e2:	e021      	b.n	8008a28 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	f023 0310 	bic.w	r3, r3, #16
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 80089ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	b25a      	sxtb	r2, r3
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	b25b      	sxtb	r3, r3
 80089fa:	4313      	orrs	r3, r2
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008a02:	f107 020e 	add.w	r2, r7, #14
 8008a06:	2301      	movs	r3, #1
 8008a08:	2137      	movs	r1, #55	@ 0x37
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7fd feab 	bl	8006766 <a_mpu6500_write>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1e:	4805      	ldr	r0, [pc, #20]	@ (8008a34 <mpu6500_set_interrupt_read_clear+0x98>)
 8008a20:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	080212e4 	.word	0x080212e4
 8008a34:	0802130c 	.word	0x0802130c

08008a38 <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e03a      	b.n	8008ac4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d001      	beq.n	8008a5c <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e033      	b.n	8008ac4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008a5c:	f107 020e 	add.w	r2, r7, #14
 8008a60:	2301      	movs	r3, #1
 8008a62:	2137      	movs	r1, #55	@ 0x37
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fd fe4d 	bl	8006704 <a_mpu6500_read>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a78:	4814      	ldr	r0, [pc, #80]	@ (8008acc <mpu6500_set_fsync_interrupt_level+0x94>)
 8008a7a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e021      	b.n	8008ac4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	f023 0308 	bic.w	r3, r3, #8
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 8008a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	b25a      	sxtb	r2, r3
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	b25b      	sxtb	r3, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b25b      	sxtb	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008a9e:	f107 020e 	add.w	r2, r7, #14
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	2137      	movs	r1, #55	@ 0x37
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fd fe5d 	bl	8006766 <a_mpu6500_write>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aba:	4805      	ldr	r0, [pc, #20]	@ (8008ad0 <mpu6500_set_fsync_interrupt_level+0x98>)
 8008abc:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	080212e4 	.word	0x080212e4
 8008ad0:	0802130c 	.word	0x0802130c

08008ad4 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e03a      	b.n	8008b60 <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d001      	beq.n	8008af8 <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8008af4:	2303      	movs	r3, #3
 8008af6:	e033      	b.n	8008b60 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008af8:	f107 020e 	add.w	r2, r7, #14
 8008afc:	2301      	movs	r3, #1
 8008afe:	2137      	movs	r1, #55	@ 0x37
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fd fdff 	bl	8006704 <a_mpu6500_read>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	4814      	ldr	r0, [pc, #80]	@ (8008b68 <mpu6500_set_fsync_interrupt+0x94>)
 8008b16:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e021      	b.n	8008b60 <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	f023 0304 	bic.w	r3, r3, #4
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8008b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	b25a      	sxtb	r2, r3
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	b25b      	sxtb	r3, r3
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008b3a:	f107 020e 	add.w	r2, r7, #14
 8008b3e:	2301      	movs	r3, #1
 8008b40:	2137      	movs	r1, #55	@ 0x37
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fd fe0f 	bl	8006766 <a_mpu6500_write>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b56:	4805      	ldr	r0, [pc, #20]	@ (8008b6c <mpu6500_set_fsync_interrupt+0x98>)
 8008b58:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e000      	b.n	8008b60 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	080212e4 	.word	0x080212e4
 8008b6c:	0802130c 	.word	0x0802130c

08008b70 <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8008b82:	2302      	movs	r3, #2
 8008b84:	e03a      	b.n	8008bfc <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d001      	beq.n	8008b94 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8008b90:	2303      	movs	r3, #3
 8008b92:	e033      	b.n	8008bfc <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8008b94:	f107 020e 	add.w	r2, r7, #14
 8008b98:	2301      	movs	r3, #1
 8008b9a:	2137      	movs	r1, #55	@ 0x37
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7fd fdb1 	bl	8006704 <a_mpu6500_read>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	4814      	ldr	r0, [pc, #80]	@ (8008c04 <mpu6500_set_iic_bypass+0x94>)
 8008bb2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e021      	b.n	8008bfc <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	f023 0302 	bic.w	r3, r3, #2
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8008bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	b25a      	sxtb	r2, r3
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b25b      	sxtb	r3, r3
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008bd6:	f107 020e 	add.w	r2, r7, #14
 8008bda:	2301      	movs	r3, #1
 8008bdc:	2137      	movs	r1, #55	@ 0x37
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7fd fdc1 	bl	8006766 <a_mpu6500_write>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf2:	4805      	ldr	r0, [pc, #20]	@ (8008c08 <mpu6500_set_iic_bypass+0x98>)
 8008bf4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	080212e4 	.word	0x080212e4
 8008c08:	0802130c 	.word	0x0802130c

08008c0c <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8008c22:	2302      	movs	r3, #2
 8008c24:	e043      	b.n	8008cae <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d001      	beq.n	8008c34 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8008c30:	2303      	movs	r3, #3
 8008c32:	e03c      	b.n	8008cae <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8008c34:	f107 020e 	add.w	r2, r7, #14
 8008c38:	2301      	movs	r3, #1
 8008c3a:	2138      	movs	r1, #56	@ 0x38
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7fd fd61 	bl	8006704 <a_mpu6500_read>
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c50:	4819      	ldr	r0, [pc, #100]	@ (8008cb8 <mpu6500_set_interrupt+0xac>)
 8008c52:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008c54:	2301      	movs	r3, #1
 8008c56:	e02a      	b.n	8008cae <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	b25b      	sxtb	r3, r3
 8008c62:	43db      	mvns	r3, r3
 8008c64:	b25a      	sxtb	r2, r3
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8008c72:	78ba      	ldrb	r2, [r7, #2]
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	b25a      	sxtb	r2, r3
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	b25b      	sxtb	r3, r3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8008c88:	f107 020e 	add.w	r2, r7, #14
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	2138      	movs	r1, #56	@ 0x38
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fd fd68 	bl	8006766 <a_mpu6500_write>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	4805      	ldr	r0, [pc, #20]	@ (8008cbc <mpu6500_set_interrupt+0xb0>)
 8008ca6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	08021334 	.word	0x08021334
 8008cbc:	0802135c 	.word	0x0802135c

08008cc0 <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e022      	b.n	8008d1c <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d001      	beq.n	8008ce4 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e01b      	b.n	8008d1c <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008ce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ce8:	121b      	asrs	r3, r3, #8
 8008cea:	b21b      	sxth	r3, r3
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008cf0:	887b      	ldrh	r3, [r7, #2]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 8008cf6:	f107 020c 	add.w	r2, r7, #12
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	2177      	movs	r1, #119	@ 0x77
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7fd fd31 	bl	8006766 <a_mpu6500_write>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d12:	4804      	ldr	r0, [pc, #16]	@ (8008d24 <mpu6500_set_accelerometer_x_offset+0x64>)
 8008d14:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	08021488 	.word	0x08021488

08008d28 <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e022      	b.n	8008d84 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d001      	beq.n	8008d4c <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e01b      	b.n	8008d84 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008d4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d50:	121b      	asrs	r3, r3, #8
 8008d52:	b21b      	sxth	r3, r3
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008d58:	887b      	ldrh	r3, [r7, #2]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 8008d5e:	f107 020c 	add.w	r2, r7, #12
 8008d62:	2302      	movs	r3, #2
 8008d64:	217a      	movs	r1, #122	@ 0x7a
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fd fcfd 	bl	8006766 <a_mpu6500_write>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d005      	beq.n	8008d82 <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7a:	4804      	ldr	r0, [pc, #16]	@ (8008d8c <mpu6500_set_accelerometer_y_offset+0x64>)
 8008d7c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	080214d0 	.word	0x080214d0

08008d90 <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008da2:	2302      	movs	r3, #2
 8008da4:	e022      	b.n	8008dec <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d001      	beq.n	8008db4 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008db0:	2303      	movs	r3, #3
 8008db2:	e01b      	b.n	8008dec <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008db8:	121b      	asrs	r3, r3, #8
 8008dba:	b21b      	sxth	r3, r3
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008dc0:	887b      	ldrh	r3, [r7, #2]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 8008dc6:	f107 020c 	add.w	r2, r7, #12
 8008dca:	2302      	movs	r3, #2
 8008dcc:	217d      	movs	r1, #125	@ 0x7d
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fd fcc9 	bl	8006766 <a_mpu6500_write>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de2:	4804      	ldr	r0, [pc, #16]	@ (8008df4 <mpu6500_set_accelerometer_z_offset+0x64>)
 8008de4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	08021518 	.word	0x08021518

08008df8 <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	ed87 0a02 	vstr	s0, [r7, #8]
 8008e04:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e014      	b.n	8008e3a <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d001      	beq.n	8008e1e <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e00d      	b.n	8008e3a <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 8008e1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e22:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008e48 <mpu6500_accelerometer_offset_convert_to_register+0x50>
 8008e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e2e:	ee17 3a90 	vmov	r3, s15
 8008e32:	b21a      	sxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	3f7ae148 	.word	0x3f7ae148

08008e4c <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e022      	b.n	8008ea8 <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d001      	beq.n	8008e70 <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e01b      	b.n	8008ea8 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008e70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e74:	121b      	asrs	r3, r3, #8
 8008e76:	b21b      	sxth	r3, r3
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008e7c:	887b      	ldrh	r3, [r7, #2]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 8008e82:	f107 020c 	add.w	r2, r7, #12
 8008e86:	2302      	movs	r3, #2
 8008e88:	2113      	movs	r1, #19
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fd fc6b 	bl	8006766 <a_mpu6500_write>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	4804      	ldr	r0, [pc, #16]	@ (8008eb0 <mpu6500_set_gyro_x_offset+0x64>)
 8008ea0:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	08021560 	.word	0x08021560

08008eb4 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e022      	b.n	8008f10 <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d001      	beq.n	8008ed8 <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e01b      	b.n	8008f10 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008ed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008edc:	121b      	asrs	r3, r3, #8
 8008ede:	b21b      	sxth	r3, r3
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008ee4:	887b      	ldrh	r3, [r7, #2]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 8008eea:	f107 020c 	add.w	r2, r7, #12
 8008eee:	2302      	movs	r3, #2
 8008ef0:	2115      	movs	r1, #21
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fd fc37 	bl	8006766 <a_mpu6500_write>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f06:	4804      	ldr	r0, [pc, #16]	@ (8008f18 <mpu6500_set_gyro_y_offset+0x64>)
 8008f08:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	080215a8 	.word	0x080215a8

08008f1c <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e022      	b.n	8008f78 <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d001      	beq.n	8008f40 <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e01b      	b.n	8008f78 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f44:	121b      	asrs	r3, r3, #8
 8008f46:	b21b      	sxth	r3, r3
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008f4c:	887b      	ldrh	r3, [r7, #2]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 8008f52:	f107 020c 	add.w	r2, r7, #12
 8008f56:	2302      	movs	r3, #2
 8008f58:	2117      	movs	r1, #23
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fd fc03 	bl	8006766 <a_mpu6500_write>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6e:	4804      	ldr	r0, [pc, #16]	@ (8008f80 <mpu6500_set_gyro_z_offset+0x64>)
 8008f70:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	080215f0 	.word	0x080215f0

08008f84 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8008f90:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e014      	b.n	8008fc6 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d001      	beq.n	8008faa <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e00d      	b.n	8008fc6 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 8008faa:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fae:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008fd4 <mpu6500_gyro_offset_convert_to_register+0x50>
 8008fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fba:	ee17 3a90 	vmov	r3, s15
 8008fbe:	b21a      	sxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	3cf9db23 	.word	0x3cf9db23

08008fd8 <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <ring_buffer_init+0x1e>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <ring_buffer_init+0x1e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d801      	bhi.n	8008ffa <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e00c      	b.n	8009014 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	601a      	str	r2, [r3, #0]
	rb->size = size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	441a      	add	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6852      	ldr	r2, [r2, #4]
 800903e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009042:	fb01 f202 	mul.w	r2, r1, r2
 8009046:	1a9b      	subs	r3, r3, r2
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6852      	ldr	r2, [r2, #4]
 8009070:	fbb3 f1f2 	udiv	r1, r3, r2
 8009074:	fb01 f202 	mul.w	r2, r1, r2
 8009078:	1a9b      	subs	r3, r3, r2
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d310      	bcc.n	80090bc <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d106      	bne.n	80090b0 <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	e00b      	b.n	80090c8 <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	e005      	b.n	80090c8 <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	3b01      	subs	r3, #1
	}
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d305      	bcc.n	80090f4 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	e004      	b.n	80090fe <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	1ad3      	subs	r3, r2, r3
	}
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	4413      	add	r3, r2
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4413      	add	r3, r2
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 8009146:	b580      	push	{r7, lr}
 8009148:	b088      	sub	sp, #32
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff ff64 	bl	8009020 <ring_buffer_free_space>
 8009158:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4293      	cmp	r3, r2
 8009160:	bf28      	it	cs
 8009162:	4613      	movcs	r3, r2
 8009164:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7ff ff8d 	bl	8009086 <ring_buffer_linear_free_space>
 800916c:	4602      	mov	r2, r0
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	4293      	cmp	r3, r2
 8009172:	d904      	bls.n	800917e <ring_buffer_enqueue_arr+0x38>
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7ff ff86 	bl	8009086 <ring_buffer_linear_free_space>
 800917a:	4603      	mov	r3, r0
 800917c:	e000      	b.n	8009180 <ring_buffer_enqueue_arr+0x3a>
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	4413      	add	r3, r2
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	4618      	mov	r0, r3
 8009192:	f013 f8c8 	bl	801c326 <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	4413      	add	r3, r2
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	6852      	ldr	r2, [r2, #4]
 80091a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80091a6:	fb01 f202 	mul.w	r2, r1, r2
 80091aa:	1a9a      	subs	r2, r3, r2
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d018      	beq.n	80091f0 <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	18d0      	adds	r0, r2, r3
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	4413      	add	r3, r2
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4619      	mov	r1, r3
 80091d2:	f013 f8a8 	bl	801c326 <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	4413      	add	r3, r2
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	6852      	ldr	r2, [r2, #4]
 80091e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80091e6:	fb01 f202 	mul.w	r2, r1, r2
 80091ea:	1a9a      	subs	r2, r3, r2
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 80091f0:	69bb      	ldr	r3, [r7, #24]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3720      	adds	r7, #32
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b08a      	sub	sp, #40	@ 0x28
 80091fe:	af00      	add	r7, sp, #0
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	60b9      	str	r1, [r7, #8]
 8009204:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff ff24 	bl	8009054 <ring_buffer_used_space>
 800920c:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 8009214:	2300      	movs	r3, #0
 8009216:	e048      	b.n	80092aa <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 8009218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4293      	cmp	r3, r2
 800921e:	bf28      	it	cs
 8009220:	4613      	movcs	r3, r2
 8009222:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7ff ff55 	bl	80090d4 <ring_buffer_linear_used_space>
 800922a:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	4293      	cmp	r3, r2
 8009232:	bf28      	it	cs
 8009234:	4613      	movcs	r3, r2
 8009236:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	4413      	add	r3, r2
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	4619      	mov	r1, r3
 8009246:	68b8      	ldr	r0, [r7, #8]
 8009248:	f013 f86d 	bl	801c326 <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	4413      	add	r3, r2
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	6852      	ldr	r2, [r2, #4]
 8009258:	fbb3 f1f2 	udiv	r1, r3, r2
 800925c:	fb01 f202 	mul.w	r2, r1, r2
 8009260:	1a9a      	subs	r2, r3, r2
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 8009266:	6a3a      	ldr	r2, [r7, #32]
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	429a      	cmp	r2, r3
 800926c:	d91c      	bls.n	80092a8 <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	18d0      	adds	r0, r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	4413      	add	r3, r2
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4619      	mov	r1, r3
 800928a:	f013 f84c 	bl	801c326 <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	4413      	add	r3, r2
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	6852      	ldr	r2, [r2, #4]
 800929a:	fbb3 f1f2 	udiv	r1, r3, r2
 800929e:	fb01 f202 	mul.w	r2, r1, r2
 80092a2:	1a9a      	subs	r2, r3, r2
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 80092a8:	6a3b      	ldr	r3, [r7, #32]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3728      	adds	r7, #40	@ 0x28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff fec9 	bl	8009054 <ring_buffer_used_space>
 80092c2:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	bf28      	it	cs
 80092cc:	4613      	movcs	r3, r2
 80092ce:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4413      	add	r3, r2
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6852      	ldr	r2, [r2, #4]
 80092dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e0:	fb01 f202 	mul.w	r2, r1, r2
 80092e4:	1a9a      	subs	r2, r3, r2
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	60da      	str	r2, [r3, #12]
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	60da      	str	r2, [r3, #12]
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <read_rx_dma_buffer>:
#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))


static void read_rx_dma_buffer(uart_driver_t *uart_driver_handle)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b08e      	sub	sp, #56	@ 0x38
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	2300      	movs	r3, #0
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800931e:	f3ef 8310 	mrs	r3, PRIMASK
 8009322:	623b      	str	r3, [r7, #32]
  return(result);
 8009324:	6a3b      	ldr	r3, [r7, #32]
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009326:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009328:	b672      	cpsid	i
}
 800932a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800932c:	f3bf 8f4f 	dsb	sy
}
 8009330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009332:	f3bf 8f6f 	isb	sy
}
 8009336:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 8009338:	69fb      	ldr	r3, [r7, #28]
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800933a:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800933c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933e:	2b01      	cmp	r3, #1
 8009340:	d001      	beq.n	8009346 <read_rx_dma_buffer+0x34>
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	e000      	b.n	8009348 <read_rx_dma_buffer+0x36>
 8009346:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009348:	60bb      	str	r3, [r7, #8]
 800934a:	2301      	movs	r3, #1
 800934c:	637b      	str	r3, [r7, #52]	@ 0x34
 800934e:	e055      	b.n	80093fc <read_rx_dma_buffer+0xea>
	{
		// Position DMA has written up to (bytes received so far)
		int dma_pos = (int)(uart_driver_handle->dma_rx_buffer_size - __HAL_DMA_GET_COUNTER(uart_driver_handle->uart_handle->hdmarx));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	633b      	str	r3, [r7, #48]	@ 0x30

		if (dma_pos == uart_driver_handle->dma_last_pos) return; // nothing new
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009368:	b29b      	uxth	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	4293      	cmp	r3, r2
 8009370:	d101      	bne.n	8009376 <read_rx_dma_buffer+0x64>
 8009372:	2300      	movs	r3, #0
 8009374:	e046      	b.n	8009404 <read_rx_dma_buffer+0xf2>

		if (dma_pos > uart_driver_handle->dma_last_pos) {
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800937a:	b29b      	uxth	r3, r3
 800937c:	461a      	mov	r2, r3
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	4293      	cmp	r3, r2
 8009382:	dd14      	ble.n	80093ae <read_rx_dma_buffer+0x9c>
			// linear chunk
			size_t len = dma_pos - uart_driver_handle->dma_last_pos;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009388:	b29b      	uxth	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
			ring_buffer_enqueue_arr(&(uart_driver_handle->rx_ring_buffer), &(uart_driver_handle->dma_rx_buffer[uart_driver_handle->dma_last_pos]), len);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f103 0014 	add.w	r0, r3, #20
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80093a0:	b292      	uxth	r2, r2
 80093a2:	4413      	add	r3, r2
 80093a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093a6:	4619      	mov	r1, r3
 80093a8:	f7ff fecd 	bl	8009146 <ring_buffer_enqueue_arr>
 80093ac:	e020      	b.n	80093f0 <read_rx_dma_buffer+0xde>
		} else {
			// wrapped: tail then head
			size_t tail_len = uart_driver_handle->dma_rx_buffer_size - uart_driver_handle->dma_last_pos;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			ring_buffer_enqueue_arr(&(uart_driver_handle->rx_ring_buffer), &(uart_driver_handle->dma_rx_buffer[uart_driver_handle->dma_last_pos]), tail_len);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f103 0014 	add.w	r0, r3, #20
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80093cc:	b292      	uxth	r2, r2
 80093ce:	4413      	add	r3, r2
 80093d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d2:	4619      	mov	r1, r3
 80093d4:	f7ff feb7 	bl	8009146 <ring_buffer_enqueue_arr>
			if (dma_pos) {
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d008      	beq.n	80093f0 <read_rx_dma_buffer+0xde>
				ring_buffer_enqueue_arr(&(uart_driver_handle->rx_ring_buffer), &(uart_driver_handle->dma_rx_buffer[0]), dma_pos);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f103 0014 	add.w	r0, r3, #20
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ea:	4619      	mov	r1, r3
 80093ec:	f7ff feab 	bl	8009146 <ring_buffer_enqueue_arr>
			}
		}

		uart_driver_handle->dma_last_pos = dma_pos;
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	861a      	strh	r2, [r3, #48]	@ 0x30
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80093f8:	2300      	movs	r3, #0
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80093fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1a6      	bne.n	8009350 <read_rx_dma_buffer+0x3e>
 8009402:	2301      	movs	r3, #1
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	617a      	str	r2, [r7, #20]
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	6812      	ldr	r2, [r2, #0]
 800940e:	613a      	str	r2, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 8009410:	f3bf 8f5f 	dmb	sy
}
 8009414:	bf00      	nop
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	60fa      	str	r2, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	f382 8810 	msr	PRIMASK, r2
}
 8009420:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009422:	f3bf 8f4f 	dsb	sy
}
 8009426:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009428:	f3bf 8f6f 	isb	sy
}
 800942c:	bf00      	nop
}
 800942e:	bf00      	nop
}
 8009430:	bf00      	nop
 8009432:	2b01      	cmp	r3, #1
	}
}
 8009434:	3738      	adds	r7, #56	@ 0x38
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <start_tx_if_idle>:



static void start_tx_if_idle(uart_driver_t *uart_driver_handle, int force_state)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b08e      	sub	sp, #56	@ 0x38
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009448:	f3ef 8310 	mrs	r3, PRIMASK
 800944c:	623b      	str	r3, [r7, #32]
  return(result);
 800944e:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009452:	b672      	cpsid	i
}
 8009454:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009456:	f3bf 8f4f 	dsb	sy
}
 800945a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800945c:	f3bf 8f6f 	isb	sy
}
 8009460:	bf00      	nop
    return old;
 8009462:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009464:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	2b01      	cmp	r3, #1
 800946a:	d001      	beq.n	8009470 <start_tx_if_idle+0x36>
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	e000      	b.n	8009472 <start_tx_if_idle+0x38>
 8009470:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009472:	60bb      	str	r3, [r7, #8]
 8009474:	2301      	movs	r3, #1
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
 8009478:	e037      	b.n	80094ea <start_tx_if_idle+0xb0>
	{
		if (((uart_driver_handle->uart_handle->gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&(uart_driver_handle->tx_ring_buffer)) > 0)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b20      	cmp	r3, #32
 8009486:	d002      	beq.n	800948e <start_tx_if_idle+0x54>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d02b      	beq.n	80094e6 <start_tx_if_idle+0xac>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3304      	adds	r3, #4
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fdde 	bl	8009054 <ring_buffer_used_space>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d023      	beq.n	80094e6 <start_tx_if_idle+0xac>
		{

			size_t linear_used = ring_buffer_linear_used_space(&(uart_driver_handle->tx_ring_buffer));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fe16 	bl	80090d4 <ring_buffer_linear_used_space>
 80094a8:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, uart_driver_handle->tx_chunk_size);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ae:	461a      	mov	r2, r3
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bf28      	it	cs
 80094b6:	4613      	movcs	r3, r2
 80094b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&(uart_driver_handle->tx_ring_buffer));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3304      	adds	r3, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fe32 	bl	8009128 <ring_buffer_read_ptr>
 80094c4:	62b8      	str	r0, [r7, #40]	@ 0x28

			uart_driver_handle->last_tx_size = frame_size;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80094ca:	849a      	strh	r2, [r3, #36]	@ 0x24

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(uart_driver_handle->uart_handle, data, frame_size) != HAL_OK) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80094d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094d4:	4618      	mov	r0, r3
 80094d6:	f007 f9ef 	bl	80108b8 <HAL_UART_Transmit_DMA>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <start_tx_if_idle+0xac>
				//ENTER_CRITICAL();
				uart_driver_handle->last_tx_size = 0;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	849a      	strh	r2, [r3, #36]	@ 0x24
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80094e6:	2300      	movs	r3, #0
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1c4      	bne.n	800947a <start_tx_if_idle+0x40>
 80094f0:	f107 0308 	add.w	r3, r7, #8
 80094f4:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 80094fc:	f3bf 8f5f 	dmb	sy
}
 8009500:	bf00      	nop
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f383 8810 	msr	PRIMASK, r3
}
 800950c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800950e:	f3bf 8f4f 	dsb	sy
}
 8009512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009514:	f3bf 8f6f 	isb	sy
}
 8009518:	bf00      	nop
}
 800951a:	bf00      	nop
}
 800951c:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800951e:	bf00      	nop
 8009520:	3738      	adds	r7, #56	@ 0x38
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <TxCpltCallback_routine>:


void TxCpltCallback_routine(uart_driver_t *uart_driver_handle, UART_HandleTypeDef *huart)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b086      	sub	sp, #24
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
	if(uart_driver_handle->uart_handle->Instance == huart->Instance){
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d136      	bne.n	80095ac <TxCpltCallback_routine+0x86>

    	if(uart_driver_handle->uart_handle->gState == HAL_UART_STATE_READY)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b20      	cmp	r3, #32
 800954a:	d12f      	bne.n	80095ac <TxCpltCallback_routine+0x86>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&(uart_driver_handle->tx_ring_buffer), uart_driver_handle->last_tx_size);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	1d1a      	adds	r2, r3, #4
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009554:	b29b      	uxth	r3, r3
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f7ff feaa 	bl	80092b2 <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&(uart_driver_handle->tx_ring_buffer));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3304      	adds	r3, #4
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff fdb6 	bl	80090d4 <ring_buffer_linear_used_space>
 8009568:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, uart_driver_handle->tx_chunk_size);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800956e:	461a      	mov	r2, r3
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	4293      	cmp	r3, r2
 8009574:	bf28      	it	cs
 8009576:	4613      	movcs	r3, r2
 8009578:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&(uart_driver_handle->tx_ring_buffer));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3304      	adds	r3, #4
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fdd2 	bl	8009128 <ring_buffer_read_ptr>
 8009584:	60f8      	str	r0, [r7, #12]
			uart_driver_handle->last_tx_size = frame_size;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8a7a      	ldrh	r2, [r7, #18]
 800958a:	849a      	strh	r2, [r3, #36]	@ 0x24

			if (frame_size > 0)
 800958c:	8a7b      	ldrh	r3, [r7, #18]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00c      	beq.n	80095ac <TxCpltCallback_routine+0x86>
			{
		        if (HAL_UART_Transmit_DMA(uart_driver_handle->uart_handle, next_chunk, frame_size) != HAL_OK) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	8a7a      	ldrh	r2, [r7, #18]
 8009598:	68f9      	ldr	r1, [r7, #12]
 800959a:	4618      	mov	r0, r3
 800959c:	f007 f98c 	bl	80108b8 <HAL_UART_Transmit_DMA>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <TxCpltCallback_routine+0x86>
		        	uart_driver_handle->last_tx_size = 0;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	849a      	strh	r2, [r3, #36]	@ 0x24
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
	}
}
 80095ac:	bf00      	nop
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <IDLECallback_routine>:


void IDLECallback_routine(uart_driver_t *uart_driver_handle, UART_HandleTypeDef *huart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
	if(uart_driver_handle->uart_handle->Instance == huart->Instance){
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d102      	bne.n	80095d2 <IDLECallback_routine+0x1e>
		read_rx_dma_buffer(uart_driver_handle);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff fea0 	bl	8009312 <read_rx_dma_buffer>
	}
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <uart_send_data>:
//	  start_tx_if_idle(uart_driver_handle, 1);
//}


size_t uart_send_data(uart_driver_t *uart_driver_handle, char* data, size_t len)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b08e      	sub	sp, #56	@ 0x38
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
    if (data == NULL || len == 0) {
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <uart_send_data+0x18>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <uart_send_data+0x1c>
        return 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e043      	b.n	800967e <uart_send_data+0xa4>
 80095f6:	2300      	movs	r3, #0
 80095f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80095fa:	f3ef 8310 	mrs	r3, PRIMASK
 80095fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009602:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009604:	b672      	cpsid	i
}
 8009606:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009608:	f3bf 8f4f 	dsb	sy
}
 800960c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800960e:	f3bf 8f6f 	isb	sy
}
 8009612:	bf00      	nop
    return old;
 8009614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009616:	623b      	str	r3, [r7, #32]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d001      	beq.n	8009622 <uart_send_data+0x48>
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	e000      	b.n	8009624 <uart_send_data+0x4a>
 8009622:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	2301      	movs	r3, #1
 8009628:	633b      	str	r3, [r7, #48]	@ 0x30
 800962a:	e009      	b.n	8009640 <uart_send_data+0x66>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&(uart_driver_handle->tx_ring_buffer), (uint8_t*)data, len);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3304      	adds	r3, #4
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fd86 	bl	8009146 <ring_buffer_enqueue_arr>
 800963a:	6378      	str	r0, [r7, #52]	@ 0x34
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800963c:	2300      	movs	r3, #0
 800963e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1f2      	bne.n	800962c <uart_send_data+0x52>
 8009646:	f107 0310 	add.w	r3, r7, #16
 800964a:	61fb      	str	r3, [r7, #28]
	exit_critical(*sreg);		// restore saved I-bit
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8009652:	f3bf 8f5f 	dmb	sy
}
 8009656:	bf00      	nop
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f383 8810 	msr	PRIMASK, r3
}
 8009662:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009664:	f3bf 8f4f 	dsb	sy
}
 8009668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800966a:	f3bf 8f6f 	isb	sy
}
 800966e:	bf00      	nop
}
 8009670:	bf00      	nop
}
 8009672:	bf00      	nop
    }

    start_tx_if_idle(uart_driver_handle, 0);
 8009674:	2100      	movs	r1, #0
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff fedf 	bl	800943a <start_tx_if_idle>

    return bytes_written;
 800967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800967e:	4618      	mov	r0, r3
 8009680:	3738      	adds	r7, #56	@ 0x38
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <uart_recv_data>:

size_t uart_recv_data(uart_driver_t *uart_driver_handle, char* out_buf, size_t max_len)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b08e      	sub	sp, #56	@ 0x38
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]
    if (out_buf == NULL || max_len == 0) {
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <uart_recv_data+0x18>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <uart_recv_data+0x1c>
        return 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	e042      	b.n	8009728 <uart_recv_data+0xa2>
 80096a2:	2300      	movs	r3, #0
 80096a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80096a6:	f3ef 8310 	mrs	r3, PRIMASK
 80096aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80096ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 80096ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80096b0:	b672      	cpsid	i
}
 80096b2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80096b4:	f3bf 8f4f 	dsb	sy
}
 80096b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80096ba:	f3bf 8f6f 	isb	sy
}
 80096be:	bf00      	nop
    return old;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 80096c2:	623b      	str	r3, [r7, #32]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 80096c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d001      	beq.n	80096ce <uart_recv_data+0x48>
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	e000      	b.n	80096d0 <uart_recv_data+0x4a>
 80096ce:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	2301      	movs	r3, #1
 80096d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80096d6:	e00c      	b.n	80096f2 <uart_recv_data+0x6c>
    {
    	read_rx_dma_buffer(uart_driver_handle);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff fe1a 	bl	8009312 <read_rx_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&(uart_driver_handle->rx_ring_buffer), (uint8_t*)out_buf, max_len);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3314      	adds	r3, #20
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff fd87 	bl	80091fa <ring_buffer_dequeue_arr>
 80096ec:	6378      	str	r0, [r7, #52]	@ 0x34
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80096ee:	2300      	movs	r3, #0
 80096f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1ef      	bne.n	80096d8 <uart_recv_data+0x52>
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	61fb      	str	r3, [r7, #28]
	exit_critical(*sreg);		// restore saved I-bit
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8009704:	f3bf 8f5f 	dmb	sy
}
 8009708:	bf00      	nop
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f383 8810 	msr	PRIMASK, r3
}
 8009714:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009716:	f3bf 8f4f 	dsb	sy
}
 800971a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800971c:	f3bf 8f6f 	isb	sy
}
 8009720:	bf00      	nop
}
 8009722:	bf00      	nop
}
 8009724:	bf00      	nop
    }

    return bytes_read;
 8009726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009728:	4618      	mov	r0, r3
 800972a:	3738      	adds	r7, #56	@ 0x38
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <uart_data_available_for_read>:

size_t uart_data_available_for_read(uart_driver_t *uart_driver_handle)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08c      	sub	sp, #48	@ 0x30
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	2300      	movs	r3, #0
 800973a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800973c:	f3ef 8310 	mrs	r3, PRIMASK
 8009740:	623b      	str	r3, [r7, #32]
  return(result);
 8009742:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009746:	b672      	cpsid	i
}
 8009748:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800974a:	f3bf 8f4f 	dsb	sy
}
 800974e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009750:	f3bf 8f6f 	isb	sy
}
 8009754:	bf00      	nop
    return old;
 8009756:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009758:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	2b01      	cmp	r3, #1
 800975e:	d001      	beq.n	8009764 <uart_data_available_for_read+0x34>
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	e000      	b.n	8009766 <uart_data_available_for_read+0x36>
 8009764:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009766:	60bb      	str	r3, [r7, #8]
 8009768:	2301      	movs	r3, #1
 800976a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800976c:	e00a      	b.n	8009784 <uart_data_available_for_read+0x54>
    {
    	read_rx_dma_buffer(uart_driver_handle);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fdcf 	bl	8009312 <read_rx_dma_buffer>
    	used = ring_buffer_used_space(&(uart_driver_handle->rx_ring_buffer));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3314      	adds	r3, #20
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fc6b 	bl	8009054 <ring_buffer_used_space>
 800977e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009780:	2300      	movs	r3, #0
 8009782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f1      	bne.n	800976e <uart_data_available_for_read+0x3e>
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 8009796:	f3bf 8f5f 	dmb	sy
}
 800979a:	bf00      	nop
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f383 8810 	msr	PRIMASK, r3
}
 80097a6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80097a8:	f3bf 8f4f 	dsb	sy
}
 80097ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80097ae:	f3bf 8f6f 	isb	sy
}
 80097b2:	bf00      	nop
}
 80097b4:	bf00      	nop
}
 80097b6:	bf00      	nop
    }

    return used;
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3730      	adds	r7, #48	@ 0x30
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <uart_driver_init>:
		size_t rx_ring_buffer_size,
		size_t tx_ring_buffer_size,
		size_t dma_rx_ring_buffer_size,
		uint16_t tx_chunk_size

		){
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b086      	sub	sp, #24
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	607a      	str	r2, [r7, #4]
 80097ce:	603b      	str	r3, [r7, #0]
	memset(uart_driver_handle, 0, sizeof(uart_driver_t));
 80097d0:	2234      	movs	r2, #52	@ 0x34
 80097d2:	2100      	movs	r1, #0
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f012 fcb7 	bl	801c148 <memset>
	uart_driver_handle->uart_handle = huart;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	601a      	str	r2, [r3, #0]
	ring_buffer_init(&(uart_driver_handle->tx_ring_buffer), tx_ring_buffer, tx_ring_buffer_size);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3304      	adds	r3, #4
 80097e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fbf5 	bl	8008fd8 <ring_buffer_init>
	ring_buffer_init(&(uart_driver_handle->rx_ring_buffer), rx_ring_buffer, rx_ring_buffer_size);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3314      	adds	r3, #20
 80097f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff fbee 	bl	8008fd8 <ring_buffer_init>
	uart_driver_handle->tx_chunk_size = tx_chunk_size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009800:	851a      	strh	r2, [r3, #40]	@ 0x28

	uart_driver_handle->last_rx_len = 0;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	84da      	strh	r2, [r3, #38]	@ 0x26
	uart_driver_handle->last_tx_size = 0;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	849a      	strh	r2, [r3, #36]	@ 0x24

	uart_driver_handle->dma_rx_buffer = dma_rx_ring_buffer;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a3a      	ldr	r2, [r7, #32]
 8009812:	62da      	str	r2, [r3, #44]	@ 0x2c
	uart_driver_handle->dma_rx_buffer_size = dma_rx_ring_buffer_size;
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	uart_driver_handle->dma_last_pos = 0;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	861a      	strh	r2, [r3, #48]	@ 0x30

	  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&(uart_driver_handle->rx_ring_buffer));
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3314      	adds	r3, #20
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff fc2d 	bl	8009086 <ring_buffer_linear_free_space>
 800982c:	4603      	mov	r3, r0
 800982e:	82fb      	strh	r3, [r7, #22]
	  uint8_t *write_ptr = ring_buffer_write_ptr(&(uart_driver_handle->rx_ring_buffer));
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3314      	adds	r3, #20
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff fc68 	bl	800910a <ring_buffer_write_ptr>
 800983a:	6138      	str	r0, [r7, #16]
	//   usart1_last_rx_len = rx_buffer_remaining_free;
	//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

	  HAL_UART_Receive_DMA(uart_driver_handle->uart_handle, uart_driver_handle->dma_rx_buffer, uart_driver_handle->dma_rx_buffer_size);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009848:	461a      	mov	r2, r3
 800984a:	f007 f8a5 	bl	8010998 <HAL_UART_Receive_DMA>
	  uart_driver_handle->last_rx_len = uart_driver_handle->dma_rx_buffer_size;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	84da      	strh	r2, [r3, #38]	@ 0x26
	  uart_driver_handle->dma_last_pos = 0;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	861a      	strh	r2, [r3, #48]	@ 0x30

	  __HAL_UART_ENABLE_IT(uart_driver_handle->uart_handle, UART_IT_IDLE);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0210 	orr.w	r2, r2, #16
 800986e:	60da      	str	r2, [r3, #12]
}
 8009870:	bf00      	nop
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <uart_driver_deinit>:

void uart_driver_deinit(uart_driver_t *uart_driver_handle){
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	ring_buffer_clear(&(uart_driver_handle->tx_ring_buffer));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fd34 	bl	80092f2 <ring_buffer_clear>
	ring_buffer_clear(&(uart_driver_handle->rx_ring_buffer));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3314      	adds	r3, #20
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fd2f 	bl	80092f2 <ring_buffer_clear>
	uart_driver_handle->last_rx_len = 0;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	84da      	strh	r2, [r3, #38]	@ 0x26
	uart_driver_handle->last_tx_size = 0;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	849a      	strh	r2, [r3, #36]	@ 0x24
	uart_driver_handle->dma_last_pos = 0;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80098b6:	2300      	movs	r3, #0
 80098b8:	607b      	str	r3, [r7, #4]
 80098ba:	4b10      	ldr	r3, [pc, #64]	@ (80098fc <MX_DMA_Init+0x4c>)
 80098bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098be:	4a0f      	ldr	r2, [pc, #60]	@ (80098fc <MX_DMA_Init+0x4c>)
 80098c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80098c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80098c6:	4b0d      	ldr	r3, [pc, #52]	@ (80098fc <MX_DMA_Init+0x4c>)
 80098c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098ce:	607b      	str	r3, [r7, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80098d2:	2200      	movs	r2, #0
 80098d4:	2105      	movs	r1, #5
 80098d6:	203a      	movs	r0, #58	@ 0x3a
 80098d8:	f002 fa3e 	bl	800bd58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80098dc:	203a      	movs	r0, #58	@ 0x3a
 80098de:	f002 fa57 	bl	800bd90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80098e2:	2200      	movs	r2, #0
 80098e4:	2105      	movs	r1, #5
 80098e6:	2046      	movs	r0, #70	@ 0x46
 80098e8:	f002 fa36 	bl	800bd58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80098ec:	2046      	movs	r0, #70	@ 0x46
 80098ee:	f002 fa4f 	bl	800bd90 <HAL_NVIC_EnableIRQ>

}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40023800 	.word	0x40023800

08009900 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 800990c:	edd7 7a00 	vldr	s15, [r7]
 8009910:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009978 <arr_from_freqf+0x78>
 8009914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991c:	d501      	bpl.n	8009922 <arr_from_freqf+0x22>
 800991e:	4b17      	ldr	r3, [pc, #92]	@ (800997c <arr_from_freqf+0x7c>)
 8009920:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800992c:	edd7 7a00 	vldr	s15, [r7]
 8009930:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009934:	ee16 0a90 	vmov	r0, s13
 8009938:	f7f6 fe16 	bl	8000568 <__aeabi_f2d>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	4b0d      	ldr	r3, [pc, #52]	@ (8009980 <arr_from_freqf+0x80>)
 800994a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800994e:	f7f6 fcad 	bl	80002ac <__adddf3>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f7 f935 	bl	8000bc8 <__aeabi_d2uiz>
 800995e:	4603      	mov	r3, r0
 8009960:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <arr_from_freqf+0x6c>
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	3b01      	subs	r3, #1
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	3a83126f 	.word	0x3a83126f
 800997c:	3a83126f 	.word	0x3a83126f
 8009980:	3fe00000 	.word	0x3fe00000

08009984 <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 8009990:	edd7 7a00 	vldr	s15, [r7]
 8009994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999c:	d502      	bpl.n	80099a4 <ccr_from_duty+0x20>
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 80099a4:	edd7 7a00 	vldr	s15, [r7]
 80099a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	dd02      	ble.n	80099bc <ccr_from_duty+0x38>
 80099b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80099ba:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3301      	adds	r3, #1
 80099c0:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099cc:	edd7 7a00 	vldr	s15, [r7]
 80099d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80099d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e0:	ee17 3a90 	vmov	r3, s15
 80099e4:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d901      	bls.n	80099f2 <ccr_from_duty+0x6e>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
    return ccr;
 80099f2:	68fb      	ldr	r3, [r7, #12]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b09c      	sub	sp, #112	@ 0x70
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6178      	str	r0, [r7, #20]
 8009a08:	6139      	str	r1, [r7, #16]
 8009a0a:	60fa      	str	r2, [r7, #12]
 8009a0c:	60bb      	str	r3, [r7, #8]
 8009a0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009a12:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <pwm_init+0x22>
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <pwm_init+0x26>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e0de      	b.n	8009be4 <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4a70      	ldr	r2, [pc, #448]	@ (8009bec <pwm_init+0x1ec>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d801      	bhi.n	8009a32 <pwm_init+0x32>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e0d8      	b.n	8009be4 <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a32:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009a3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	609a      	str	r2, [r3, #8]
 8009a48:	60da      	str	r2, [r3, #12]
 8009a4a:	611a      	str	r2, [r3, #16]
 8009a4c:	615a      	str	r2, [r3, #20]
 8009a4e:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	605a      	str	r2, [r3, #4]
 8009a5a:	609a      	str	r2, [r3, #8]
 8009a5c:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	ee07 3a90 	vmov	s15, r3
 8009a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 8009a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	d801      	bhi.n	8009a8c <pwm_init+0x8c>
 8009a88:	4b59      	ldr	r3, [pc, #356]	@ (8009bf0 <pwm_init+0x1f0>)
 8009a8a:	e000      	b.n	8009a8e <pwm_init+0x8e>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 8009a92:	edd7 7a00 	vldr	s15, [r7]
 8009a96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9e:	d502      	bpl.n	8009aa6 <pwm_init+0xa6>
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	e00c      	b.n	8009ac0 <pwm_init+0xc0>
 8009aa6:	edd7 7a00 	vldr	s15, [r7]
 8009aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab6:	dd02      	ble.n	8009abe <pwm_init+0xbe>
 8009ab8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009abc:	e000      	b.n	8009ac0 <pwm_init+0xc0>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8009bf4 <pwm_init+0x1f4>)
 8009ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8009acc:	0c9b      	lsrs	r3, r3, #18
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 8009ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ad8:	d301      	bcc.n	8009ade <pwm_init+0xde>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e082      	b.n	8009be4 <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 8009ade:	6938      	ldr	r0, [r7, #16]
 8009ae0:	f005 fee9 	bl	800f8b6 <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ae8:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2200      	movs	r2, #0
 8009aee:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	edd3 7a03 	vldr	s15, [r3, #12]
 8009af6:	eeb0 0a67 	vmov.f32	s0, s15
 8009afa:	483f      	ldr	r0, [pc, #252]	@ (8009bf8 <pwm_init+0x1f8>)
 8009afc:	f7ff ff00 	bl	8009900 <arr_from_freqf>
 8009b00:	4602      	mov	r2, r0
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2280      	movs	r2, #128	@ 0x80
 8009b10:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 8009b12:	6938      	ldr	r0, [r7, #16]
 8009b14:	f005 fd58 	bl	800f5c8 <HAL_TIM_Base_Init>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8009b1e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <pwm_init+0x12c>
 8009b26:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b2a:	e05b      	b.n	8009be4 <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8009b32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009b36:	4619      	mov	r1, r3
 8009b38:	6938      	ldr	r0, [r7, #16]
 8009b3a:	f006 f99f 	bl	800fe7c <HAL_TIM_ConfigClockSource>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f005 fe67 	bl	800f818 <HAL_TIM_PWM_Init>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8009b50:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <pwm_init+0x15e>
 8009b58:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b5c:	e042      	b.n	8009be4 <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8009b66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6938      	ldr	r0, [r7, #16]
 8009b6e:	f006 fd91 	bl	8010694 <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 8009b72:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <pwm_init+0x180>
 8009b7a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b7e:	e031      	b.n	8009be4 <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 8009b80:	f107 0318 	add.w	r3, r7, #24
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	605a      	str	r2, [r3, #4]
 8009b8a:	609a      	str	r2, [r3, #8]
 8009b8c:	60da      	str	r2, [r3, #12]
 8009b8e:	611a      	str	r2, [r3, #16]
 8009b90:	615a      	str	r2, [r3, #20]
 8009b92:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 8009b94:	2360      	movs	r3, #96	@ 0x60
 8009b96:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	edd3 7a04 	vldr	s15, [r3, #16]
 8009baa:	eeb0 0a67 	vmov.f32	s0, s15
 8009bae:	4610      	mov	r0, r2
 8009bb0:	f7ff fee8 	bl	8009984 <ccr_from_duty>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 8009bb8:	f107 0318 	add.w	r3, r7, #24
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6938      	ldr	r0, [r7, #16]
 8009bc2:	f006 f899 	bl	800fcf8 <HAL_TIM_PWM_ConfigChannel>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8009bcc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <pwm_init+0x1da>
 8009bd4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009bd8:	e004      	b.n	8009be4 <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	6938      	ldr	r0, [r7, #16]
 8009bde:	f005 fed3 	bl	800f988 <HAL_TIM_PWM_Start>
 8009be2:	4603      	mov	r3, r0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3770      	adds	r7, #112	@ 0x70
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	000f423f 	.word	0x000f423f
 8009bf0:	42480000 	.word	0x42480000
 8009bf4:	431bde83 	.word	0x431bde83
 8009bf8:	000f4240 	.word	0x000f4240

08009bfc <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d04a      	beq.n	8009ca4 <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 8009c0e:	edd7 7a00 	vldr	s15, [r7]
 8009c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1a:	d502      	bpl.n	8009c22 <pwm_set_duty+0x26>
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	e00c      	b.n	8009c3c <pwm_set_duty+0x40>
 8009c22:	edd7 7a00 	vldr	s15, [r7]
 8009c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c32:	dd02      	ble.n	8009c3a <pwm_set_duty+0x3e>
 8009c34:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009c38:	e000      	b.n	8009c3c <pwm_set_duty+0x40>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c48:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009c50:	eeb0 0a67 	vmov.f32	s0, s15
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f7ff fe95 	bl	8009984 <ccr_from_duty>
 8009c5a:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d105      	bne.n	8009c70 <pwm_set_duty+0x74>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8009c6e:	e01a      	b.n	8009ca6 <pwm_set_duty+0xaa>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d105      	bne.n	8009c84 <pwm_set_duty+0x88>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6393      	str	r3, [r2, #56]	@ 0x38
 8009c82:	e010      	b.n	8009ca6 <pwm_set_duty+0xaa>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d105      	bne.n	8009c98 <pwm_set_duty+0x9c>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009c96:	e006      	b.n	8009ca6 <pwm_set_duty+0xaa>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8009ca2:	e000      	b.n	8009ca6 <pwm_set_duty+0xaa>
    if (!esc) return;
 8009ca4:	bf00      	nop
}
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b089      	sub	sp, #36	@ 0x24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	ed87 0a03 	vstr	s0, [r7, #12]
 8009cb6:	edc7 0a02 	vstr	s1, [r7, #8]
 8009cba:	ed87 1a01 	vstr	s2, [r7, #4]
 8009cbe:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 8009cc2:	edd7 7a00 	vldr	s15, [r7]
 8009cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cce:	d502      	bpl.n	8009cd6 <esc_pwm_throttle_to_duty_cycle+0x2a>
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 8009cd6:	edd7 7a00 	vldr	s15, [r7]
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce6:	dd02      	ble.n	8009cee <esc_pwm_throttle_to_duty_cycle+0x42>
 8009ce8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009cec:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 8009cee:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009d70 <esc_pwm_throttle_to_duty_cycle+0xc4>
 8009cf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8009cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfa:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 8009cfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d0a:	edd7 7a00 	vldr	s15, [r7]
 8009d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d12:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d1a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 8009d1e:	edd7 6a05 	vldr	s13, [r7, #20]
 8009d22:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 8009d2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	d502      	bpl.n	8009d42 <esc_pwm_throttle_to_duty_cycle+0x96>
 8009d3c:	f04f 0300 	mov.w	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 8009d42:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d52:	dd02      	ble.n	8009d5a <esc_pwm_throttle_to_duty_cycle+0xae>
 8009d54:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009d58:	61fb      	str	r3, [r7, #28]

    return duty;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	ee07 3a90 	vmov	s15, r3
}
 8009d60:	eeb0 0a67 	vmov.f32	s0, s15
 8009d64:	3724      	adds	r7, #36	@ 0x24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	49742400 	.word	0x49742400

08009d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	app_main_start(NULL);
 8009d78:	2000      	movs	r0, #0
 8009d7a:	f000 fffd 	bl	800ad78 <app_main_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009d7e:	4a05      	ldr	r2, [pc, #20]	@ (8009d94 <MX_FREERTOS_Init+0x20>)
 8009d80:	2100      	movs	r1, #0
 8009d82:	4805      	ldr	r0, [pc, #20]	@ (8009d98 <MX_FREERTOS_Init+0x24>)
 8009d84:	f00b fab6 	bl	80152f4 <osThreadNew>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4a04      	ldr	r2, [pc, #16]	@ (8009d9c <MX_FREERTOS_Init+0x28>)
 8009d8c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8009d8e:	bf00      	nop
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	080220e8 	.word	0x080220e8
 8009d98:	08009da1 	.word	0x08009da1
 8009d9c:	20000a70 	.word	0x20000a70

08009da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8009da8:	f00e fbee 	bl	8018588 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000));
 8009dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009db0:	f00b fb32 	bl	8015418 <osDelay>
 8009db4:	e7fa      	b.n	8009dac <StartDefaultTask+0xc>
	...

08009db8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08a      	sub	sp, #40	@ 0x28
 8009dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dbe:	f107 0314 	add.w	r3, r7, #20
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	605a      	str	r2, [r3, #4]
 8009dc8:	609a      	str	r2, [r3, #8]
 8009dca:	60da      	str	r2, [r3, #12]
 8009dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	4b26      	ldr	r3, [pc, #152]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd6:	4a25      	ldr	r2, [pc, #148]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009dd8:	f043 0304 	orr.w	r3, r3, #4
 8009ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009dde:	4b23      	ldr	r3, [pc, #140]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	613b      	str	r3, [r7, #16]
 8009de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	4b1f      	ldr	r3, [pc, #124]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
 8009e0a:	4b18      	ldr	r3, [pc, #96]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0e:	4a17      	ldr	r2, [pc, #92]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e16:	4b15      	ldr	r3, [pc, #84]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	60bb      	str	r3, [r7, #8]
 8009e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
 8009e26:	4b11      	ldr	r3, [pc, #68]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e2a:	4a10      	ldr	r2, [pc, #64]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009e2c:	f043 0302 	orr.w	r3, r3, #2
 8009e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e32:	4b0e      	ldr	r3, [pc, #56]	@ (8009e6c <MX_GPIO_Init+0xb4>)
 8009e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2110      	movs	r1, #16
 8009e42:	480b      	ldr	r0, [pc, #44]	@ (8009e70 <MX_GPIO_Init+0xb8>)
 8009e44:	f002 feb8 	bl	800cbb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8009e48:	2310      	movs	r3, #16
 8009e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e54:	2300      	movs	r3, #0
 8009e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4804      	ldr	r0, [pc, #16]	@ (8009e70 <MX_GPIO_Init+0xb8>)
 8009e60:	f002 fc12 	bl	800c688 <HAL_GPIO_Init>

}
 8009e64:	bf00      	nop
 8009e66:	3728      	adds	r7, #40	@ 0x28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	40023800 	.word	0x40023800
 8009e70:	40020000 	.word	0x40020000

08009e74 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d104      	bne.n	8009e94 <_write+0x20>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);

    	uart_send_data(&usart1_driver, err_header, sizeof(err_header) - 1);
 8009e8a:	2207      	movs	r2, #7
 8009e8c:	4908      	ldr	r1, [pc, #32]	@ (8009eb0 <_write+0x3c>)
 8009e8e:	4809      	ldr	r0, [pc, #36]	@ (8009eb4 <_write+0x40>)
 8009e90:	f7ff fba3 	bl	80095da <uart_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = uart_send_data(&usart1_driver, data, len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	461a      	mov	r2, r3
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	4806      	ldr	r0, [pc, #24]	@ (8009eb4 <_write+0x40>)
 8009e9c:	f7ff fb9d 	bl	80095da <uart_send_data>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	617b      	str	r3, [r7, #20]
    return sent_size;
 8009ea4:	697b      	ldr	r3, [r7, #20]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000050 	.word	0x20000050
 8009eb4:	200055d8 	.word	0x200055d8

08009eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ebc:	f001 fe0a 	bl	800bad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009ec0:	f000 f818 	bl	8009ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009ec4:	f7ff ff78 	bl	8009db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8009ec8:	f7ff fcf2 	bl	80098b0 <MX_DMA_Init>
  MX_SPI1_Init();
 8009ecc:	f001 f89a 	bl	800b004 <MX_SPI1_Init>
  MX_TIM4_Init();
 8009ed0:	f001 fb78 	bl	800b5c4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8009ed4:	f001 fae0 	bl	800b498 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8009ed8:	f001 fc5c 	bl	800b794 <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8009edc:	f00b f9c0 	bl	8015260 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8009ee0:	f7ff ff48 	bl	8009d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8009ee4:	f00b f9e0 	bl	80152a8 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 8009ee8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009eec:	f001 fe34 	bl	800bb58 <HAL_Delay>
 8009ef0:	e7fa      	b.n	8009ee8 <main+0x30>
	...

08009ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b094      	sub	sp, #80	@ 0x50
 8009ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009efa:	f107 0320 	add.w	r3, r7, #32
 8009efe:	2230      	movs	r2, #48	@ 0x30
 8009f00:	2100      	movs	r1, #0
 8009f02:	4618      	mov	r0, r3
 8009f04:	f012 f920 	bl	801c148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	605a      	str	r2, [r3, #4]
 8009f12:	609a      	str	r2, [r3, #8]
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60bb      	str	r3, [r7, #8]
 8009f1c:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <SystemClock_Config+0xcc>)
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f20:	4a27      	ldr	r2, [pc, #156]	@ (8009fc0 <SystemClock_Config+0xcc>)
 8009f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8009f28:	4b25      	ldr	r3, [pc, #148]	@ (8009fc0 <SystemClock_Config+0xcc>)
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f30:	60bb      	str	r3, [r7, #8]
 8009f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f34:	2300      	movs	r3, #0
 8009f36:	607b      	str	r3, [r7, #4]
 8009f38:	4b22      	ldr	r3, [pc, #136]	@ (8009fc4 <SystemClock_Config+0xd0>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a21      	ldr	r2, [pc, #132]	@ (8009fc4 <SystemClock_Config+0xd0>)
 8009f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc4 <SystemClock_Config+0xd0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009f50:	2301      	movs	r3, #1
 8009f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009f5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009f64:	2304      	movs	r3, #4
 8009f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009f68:	23a8      	movs	r3, #168	@ 0xa8
 8009f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009f70:	2307      	movs	r3, #7
 8009f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f74:	f107 0320 	add.w	r3, r7, #32
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f004 f889 	bl	800e090 <HAL_RCC_OscConfig>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009f84:	f000 f832 	bl	8009fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f88:	230f      	movs	r3, #15
 8009f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009f94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	2105      	movs	r1, #5
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f004 faea 	bl	800e580 <HAL_RCC_ClockConfig>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009fb2:	f000 f81b 	bl	8009fec <Error_Handler>
  }
}
 8009fb6:	bf00      	nop
 8009fb8:	3750      	adds	r7, #80	@ 0x50
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	40023800 	.word	0x40023800
 8009fc4:	40007000 	.word	0x40007000

08009fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a04      	ldr	r2, [pc, #16]	@ (8009fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8009fda:	f001 fd9d 	bl	800bb18 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000

08009fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009fec:	b480      	push	{r7}
 8009fee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009ff0:	b672      	cpsid	i
}
 8009ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <Error_Handler+0x8>

08009ff8 <ctrl_timer_cb>:


#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

static void ctrl_timer_cb(TimerHandle_t arg)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 800a004:	4b0c      	ldr	r3, [pc, #48]	@ (800a038 <ctrl_timer_cb+0x40>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f107 020c 	add.w	r2, r7, #12
 800a00c:	4611      	mov	r1, r2
 800a00e:	4618      	mov	r0, r3
 800a010:	f00d f9d8 	bl	80173c4 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <ctrl_timer_cb+0x38>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d007      	beq.n	800a030 <ctrl_timer_cb+0x38>
 800a020:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <ctrl_timer_cb+0x44>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20001784 	.word	0x20001784
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 800a04c:	4b0c      	ldr	r3, [pc, #48]	@ (800a080 <write_motor_timer_cb+0x40>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f107 020c 	add.w	r2, r7, #12
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f00d f9b4 	bl	80173c4 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <write_motor_timer_cb+0x38>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <write_motor_timer_cb+0x38>
 800a068:	4b06      	ldr	r3, [pc, #24]	@ (800a084 <write_motor_timer_cb+0x44>)
 800a06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20001788 	.word	0x20001788
 800a084:	e000ed04 	.word	0xe000ed04

0800a088 <init_imu>:

static void init_imu(){
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 800a08e:	2168      	movs	r1, #104	@ 0x68
 800a090:	2001      	movs	r0, #1
 800a092:	f7fb fdff 	bl	8005c94 <mpu6500_basic_init>
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d14e      	bne.n	800a13e <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800a0a0:	1d3b      	adds	r3, r7, #4
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800a14c <init_imu+0xc4>
 800a0a8:	4829      	ldr	r0, [pc, #164]	@ (800a150 <init_imu+0xc8>)
 800a0aa:	f7fe ff6b 	bl	8008f84 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 800a0ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4826      	ldr	r0, [pc, #152]	@ (800a150 <init_imu+0xc8>)
 800a0b6:	f7fe fec9 	bl	8008e4c <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	4619      	mov	r1, r3
 800a0be:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800a14c <init_imu+0xc4>
 800a0c2:	4823      	ldr	r0, [pc, #140]	@ (800a150 <init_imu+0xc8>)
 800a0c4:	f7fe ff5e 	bl	8008f84 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 800a0c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4820      	ldr	r0, [pc, #128]	@ (800a150 <init_imu+0xc8>)
 800a0d0:	f7fe fef0 	bl	8008eb4 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800a0d4:	1d3b      	adds	r3, r7, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800a14c <init_imu+0xc4>
 800a0dc:	481c      	ldr	r0, [pc, #112]	@ (800a150 <init_imu+0xc8>)
 800a0de:	f7fe ff51 	bl	8008f84 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 800a0e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4819      	ldr	r0, [pc, #100]	@ (800a150 <init_imu+0xc8>)
 800a0ea:	f7fe ff17 	bl	8008f1c <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800a0ee:	1d3b      	adds	r3, r7, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800a14c <init_imu+0xc4>
 800a0f6:	4816      	ldr	r0, [pc, #88]	@ (800a150 <init_imu+0xc8>)
 800a0f8:	f7fe fe7e 	bl	8008df8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 800a0fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a100:	4619      	mov	r1, r3
 800a102:	4813      	ldr	r0, [pc, #76]	@ (800a150 <init_imu+0xc8>)
 800a104:	f7fe fddc 	bl	8008cc0 <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800a108:	1d3b      	adds	r3, r7, #4
 800a10a:	4619      	mov	r1, r3
 800a10c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800a14c <init_imu+0xc4>
 800a110:	480f      	ldr	r0, [pc, #60]	@ (800a150 <init_imu+0xc8>)
 800a112:	f7fe fe71 	bl	8008df8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 800a116:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a11a:	4619      	mov	r1, r3
 800a11c:	480c      	ldr	r0, [pc, #48]	@ (800a150 <init_imu+0xc8>)
 800a11e:	f7fe fe03 	bl	8008d28 <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800a122:	1d3b      	adds	r3, r7, #4
 800a124:	4619      	mov	r1, r3
 800a126:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800a14c <init_imu+0xc4>
 800a12a:	4809      	ldr	r0, [pc, #36]	@ (800a150 <init_imu+0xc8>)
 800a12c:	f7fe fe64 	bl	8008df8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 800a130:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a134:	4619      	mov	r1, r3
 800a136:	4806      	ldr	r0, [pc, #24]	@ (800a150 <init_imu+0xc8>)
 800a138:	f7fe fe2a 	bl	8008d90 <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 800a13c:	e002      	b.n	800a144 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 800a13e:	4805      	ldr	r0, [pc, #20]	@ (800a154 <init_imu+0xcc>)
 800a140:	f011 fe0c 	bl	801bd5c <iprintf>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	00000000 	.word	0x00000000
 800a150:	20000630 	.word	0x20000630
 800a154:	08021edc 	.word	0x08021edc

0800a158 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 800a158:	b590      	push	{r4, r7, lr}
 800a15a:	b095      	sub	sp, #84	@ 0x54
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 800a160:	f00c ff46 	bl	8016ff0 <xTaskGetCurrentTaskHandle>
 800a164:	4603      	mov	r3, r0
 800a166:	4a4d      	ldr	r2, [pc, #308]	@ (800a29c <flight_controller_main+0x144>)
 800a168:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 800a16a:	4b4d      	ldr	r3, [pc, #308]	@ (800a2a0 <flight_controller_main+0x148>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <flight_controller_main+0x30>
        	tmr = xTimerCreate(
 800a172:	4b4c      	ldr	r3, [pc, #304]	@ (800a2a4 <flight_controller_main+0x14c>)
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	2201      	movs	r2, #1
 800a17a:	2101      	movs	r1, #1
 800a17c:	484a      	ldr	r0, [pc, #296]	@ (800a2a8 <flight_controller_main+0x150>)
 800a17e:	f00d fa55 	bl	801762c <xTimerCreate>
 800a182:	4603      	mov	r3, r0
 800a184:	4a46      	ldr	r2, [pc, #280]	@ (800a2a0 <flight_controller_main+0x148>)
 800a186:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 800a188:	4b45      	ldr	r3, [pc, #276]	@ (800a2a0 <flight_controller_main+0x148>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <flight_controller_main+0x50>
            xTimerStart(tmr, 0);
 800a190:	4b43      	ldr	r3, [pc, #268]	@ (800a2a0 <flight_controller_main+0x148>)
 800a192:	681c      	ldr	r4, [r3, #0]
 800a194:	f00c fbe4 	bl	8016960 <xTaskGetTickCount>
 800a198:	4602      	mov	r2, r0
 800a19a:	2300      	movs	r3, #0
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f00d faa0 	bl	80176e8 <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a1a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	f00d f8bd 	bl	801732c <ulTaskNotifyTake>

        len = 1;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 800a1b8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800a1bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800a1c0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800a1c4:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	f107 0320 	add.w	r3, r7, #32
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	4836      	ldr	r0, [pc, #216]	@ (800a2ac <flight_controller_main+0x154>)
 800a1d4:	f7fc fcb4 	bl	8006b40 <mpu6500_read>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d006      	beq.n	800a1ec <flight_controller_main+0x94>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 800a1de:	4834      	ldr	r0, [pc, #208]	@ (800a2b0 <flight_controller_main+0x158>)
 800a1e0:	f011 fe2c 	bl	801be3c <puts>
            flight_control_loop_disarm_esc(&fcl);
 800a1e4:	4833      	ldr	r0, [pc, #204]	@ (800a2b4 <flight_controller_main+0x15c>)
 800a1e6:	f7f7 fb4a 	bl	800187e <flight_control_loop_disarm_esc>
 800a1ea:	e052      	b.n	800a292 <flight_controller_main+0x13a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 800a1ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a1f0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a2b8 <flight_controller_main+0x160>
 800a1f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1f8:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 800a1fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a200:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800a2b8 <flight_controller_main+0x160>
 800a204:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a208:	eef1 7a67 	vneg.f32	s15, s15
 800a20c:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 800a210:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a214:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800a2b8 <flight_controller_main+0x160>
 800a218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a21c:	eef1 7a67 	vneg.f32	s15, s15
 800a220:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 800a224:	edd7 7a08 	vldr	s15, [r7, #32]
 800a228:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800a2bc <flight_controller_main+0x164>
 800a22c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a230:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 800a234:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a238:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800a2bc <flight_controller_main+0x164>
 800a23c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a240:	eef1 7a67 	vneg.f32	s15, s15
 800a244:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 800a248:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a24c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a2bc <flight_controller_main+0x164>
 800a250:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a254:	eef1 7a67 	vneg.f32	s15, s15
 800a258:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 800a25c:	ed97 5a02 	vldr	s10, [r7, #8]
 800a260:	edd7 5a03 	vldr	s11, [r7, #12]
 800a264:	ed97 6a04 	vldr	s12, [r7, #16]
 800a268:	edd7 6a05 	vldr	s13, [r7, #20]
 800a26c:	ed97 7a06 	vldr	s14, [r7, #24]
 800a270:	edd7 7a07 	vldr	s15, [r7, #28]
 800a274:	eef0 1a45 	vmov.f32	s3, s10
 800a278:	eeb0 2a65 	vmov.f32	s4, s11
 800a27c:	eef0 2a46 	vmov.f32	s5, s12
 800a280:	eeb0 0a66 	vmov.f32	s0, s13
 800a284:	eef0 0a47 	vmov.f32	s1, s14
 800a288:	eeb0 1a67 	vmov.f32	s2, s15
 800a28c:	4809      	ldr	r0, [pc, #36]	@ (800a2b4 <flight_controller_main+0x15c>)
 800a28e:	f7f7 fe43 	bl	8001f18 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 800a292:	4808      	ldr	r0, [pc, #32]	@ (800a2b4 <flight_controller_main+0x15c>)
 800a294:	f7f7 fc6a 	bl	8001b6c <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a298:	e786      	b.n	800a1a8 <flight_controller_main+0x50>
 800a29a:	bf00      	nop
 800a29c:	20001784 	.word	0x20001784
 800a2a0:	2000441c 	.word	0x2000441c
 800a2a4:	08009ff9 	.word	0x08009ff9
 800a2a8:	08021efc 	.word	0x08021efc
 800a2ac:	20000630 	.word	0x20000630
 800a2b0:	08021f10 	.word	0x08021f10
 800a2b4:	2000131c 	.word	0x2000131c
 800a2b8:	411ce80a 	.word	0x411ce80a
 800a2bc:	3c8efa35 	.word	0x3c8efa35

0800a2c0 <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b091      	sub	sp, #68	@ 0x44
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 800a2c8:	f00c fe92 	bl	8016ff0 <xTaskGetCurrentTaskHandle>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4a54      	ldr	r2, [pc, #336]	@ (800a420 <write_motor_main+0x160>)
 800a2d0:	6013      	str	r3, [r2, #0]

    float duty_cycle;
    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 800a2d2:	4b54      	ldr	r3, [pc, #336]	@ (800a424 <write_motor_main+0x164>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <write_motor_main+0x30>
        s_writeMotorTimer = xTimerCreate(
 800a2da:	4b53      	ldr	r3, [pc, #332]	@ (800a428 <write_motor_main+0x168>)
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	2102      	movs	r1, #2
 800a2e4:	4851      	ldr	r0, [pc, #324]	@ (800a42c <write_motor_main+0x16c>)
 800a2e6:	f00d f9a1 	bl	801762c <xTimerCreate>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4a4d      	ldr	r2, [pc, #308]	@ (800a424 <write_motor_main+0x164>)
 800a2ee:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 800a2f0:	4b4c      	ldr	r3, [pc, #304]	@ (800a424 <write_motor_main+0x164>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <write_motor_main+0x50>
        xTimerStart(s_writeMotorTimer, 0);
 800a2f8:	4b4a      	ldr	r3, [pc, #296]	@ (800a424 <write_motor_main+0x164>)
 800a2fa:	681c      	ldr	r4, [r3, #0]
 800a2fc:	f00c fb30 	bl	8016960 <xTaskGetTickCount>
 800a300:	4602      	mov	r2, r0
 800a302:	2300      	movs	r3, #0
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	2300      	movs	r3, #0
 800a308:	2101      	movs	r1, #1
 800a30a:	4620      	mov	r0, r4
 800a30c:	f00d f9ec 	bl	80176e8 <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 800a310:	2001      	movs	r0, #1
 800a312:	f00b fae4 	bl	80158de <xQueueCreateMutex>
 800a316:	4603      	mov	r3, r0
 800a318:	4a45      	ldr	r2, [pc, #276]	@ (800a430 <write_motor_main+0x170>)
 800a31a:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 800a31c:	2210      	movs	r2, #16
 800a31e:	2100      	movs	r1, #0
 800a320:	4844      	ldr	r0, [pc, #272]	@ (800a434 <write_motor_main+0x174>)
 800a322:	f011 ff11 	bl	801c148 <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 800a326:	4b42      	ldr	r3, [pc, #264]	@ (800a430 <write_motor_main+0x170>)
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	2300      	movs	r3, #0
 800a32c:	2200      	movs	r2, #0
 800a32e:	2100      	movs	r1, #0
 800a330:	f00b faee 	bl	8015910 <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a334:	f04f 31ff 	mov.w	r1, #4294967295
 800a338:	2001      	movs	r0, #1
 800a33a:	f00c fff7 	bl	801732c <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 800a33e:	4b3c      	ldr	r3, [pc, #240]	@ (800a430 <write_motor_main+0x170>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f04f 31ff 	mov.w	r1, #4294967295
 800a346:	4618      	mov	r0, r3
 800a348:	f00b fd64 	bl	8015e14 <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 800a34c:	4939      	ldr	r1, [pc, #228]	@ (800a434 <write_motor_main+0x174>)
 800a34e:	483a      	ldr	r0, [pc, #232]	@ (800a438 <write_motor_main+0x178>)
 800a350:	f7f7 fe2e 	bl	8001fb0 <flight_control_loop_get_motors_throttle>
				for(int i=0; i<4; i++){
					g_motors_throttle[i] = target_throttle;
				}
		#endif

        for (size_t i = 0; i < 4; i++) {
 800a354:	2300      	movs	r3, #0
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34
 800a358:	e057      	b.n	800a40a <write_motor_main+0x14a>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 800a35a:	4a36      	ldr	r2, [pc, #216]	@ (800a434 <write_motor_main+0x174>)
 800a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	edd3 7a00 	vldr	s15, [r3]
 800a366:	eef0 1a67 	vmov.f32	s3, s15
 800a36a:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 800a43c <write_motor_main+0x17c>
 800a36e:	eddf 0a34 	vldr	s1, [pc, #208]	@ 800a440 <write_motor_main+0x180>
 800a372:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800a444 <write_motor_main+0x184>
 800a376:	f7ff fc99 	bl	8009cac <esc_pwm_throttle_to_duty_cycle>
 800a37a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800a37e:	2300      	movs	r3, #0
 800a380:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a382:	f3ef 8310 	mrs	r3, PRIMASK
 800a386:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a38a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a38c:	b672      	cpsid	i
}
 800a38e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a390:	f3bf 8f4f 	dsb	sy
}
 800a394:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a396:	f3bf 8f6f 	isb	sy
}
 800a39a:	bf00      	nop
    return old;
 800a39c:	6a3b      	ldr	r3, [r7, #32]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a39e:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d001      	beq.n	800a3aa <write_motor_main+0xea>
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	e000      	b.n	800a3ac <write_motor_main+0xec>
 800a3aa:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b2:	e00d      	b.n	800a3d0 <write_motor_main+0x110>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 800a3b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4a22      	ldr	r2, [pc, #136]	@ (800a448 <write_motor_main+0x188>)
 800a3c0:	4413      	add	r3, r2
 800a3c2:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff fc18 	bl	8009bfc <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1ee      	bne.n	800a3b4 <write_motor_main+0xf4>
 800a3d6:	f107 030c 	add.w	r3, r7, #12
 800a3da:	61bb      	str	r3, [r7, #24]
	exit_critical(*sreg);		// restore saved I-bit
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 800a3e2:	f3bf 8f5f 	dmb	sy
}
 800a3e6:	bf00      	nop
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f383 8810 	msr	PRIMASK, r3
}
 800a3f2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a3f4:	f3bf 8f4f 	dsb	sy
}
 800a3f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a3fa:	f3bf 8f6f 	isb	sy
}
 800a3fe:	bf00      	nop
}
 800a400:	bf00      	nop
}
 800a402:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 800a404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a406:	3301      	adds	r3, #1
 800a408:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d9a4      	bls.n	800a35a <write_motor_main+0x9a>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 800a410:	4b07      	ldr	r3, [pc, #28]	@ (800a430 <write_motor_main+0x170>)
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	2100      	movs	r1, #0
 800a41a:	f00b fa79 	bl	8015910 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a41e:	e789      	b.n	800a334 <write_motor_main+0x74>
 800a420:	20001788 	.word	0x20001788
 800a424:	20004420 	.word	0x20004420
 800a428:	0800a041 	.word	0x0800a041
 800a42c:	08021f24 	.word	0x08021f24
 800a430:	20001720 	.word	0x20001720
 800a434:	20001724 	.word	0x20001724
 800a438:	2000131c 	.word	0x2000131c
 800a43c:	44fa0000 	.word	0x44fa0000
 800a440:	447a0000 	.word	0x447a0000
 800a444:	43c80000 	.word	0x43c80000
 800a448:	20001734 	.word	0x20001734

0800a44c <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3301      	adds	r3, #1
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d804      	bhi.n	800a472 <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
        return 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	e029      	b.n	800a4c6 <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	1c59      	adds	r1, r3, #1
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	6011      	str	r1, [r2, #0]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	4413      	add	r3, r2
 800a480:	7bfa      	ldrb	r2, [r7, #15]
 800a482:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d91b      	bls.n	800a4c4 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3b02      	subs	r3, #2
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	4413      	add	r3, r2
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b0d      	cmp	r3, #13
 800a49a:	d113      	bne.n	800a4c4 <line_buffer_add_char+0x78>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b0a      	cmp	r3, #10
 800a4aa:	d10b      	bne.n	800a4c4 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3b02      	subs	r3, #2
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <rc_control_main>:

static void rc_control_main(void *arg)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b0f6      	sub	sp, #472	@ 0x1d8
 800a4d8:	af0a      	add	r7, sp, #40	@ 0x28
 800a4da:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a4de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800a4e2:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 800a4e4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a4e8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 800a4f0:	f04f 0300 	mov.w	r3, #0
 800a4f4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    float temp_target_throttle = 0;
 800a4f8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a4fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800a500:	f04f 0200 	mov.w	r2, #0
 800a504:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 800a506:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a50a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a50e:	461a      	mov	r2, r3
 800a510:	2300      	movs	r3, #0
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	6053      	str	r3, [r2, #4]
 800a516:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 800a518:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a51c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800a520:	461a      	mov	r2, r3
 800a522:	2300      	movs	r3, #0
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	6053      	str	r3, [r2, #4]
 800a528:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 800a52a:	f04f 0300 	mov.w	r3, #0
 800a52e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    float temp_arm_flag = 0;
 800a532:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a536:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 800a540:	f04f 0300 	mov.w	r3, #0
 800a544:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    float temp_disarm_flag = 0;
 800a548:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a54c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	601a      	str	r2, [r3, #0]

    int errors = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    int current_message_corrupted = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 800a562:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a566:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
    float pid_p = 0.0f;
 800a56e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a572:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
    float pid_i = 0.0f;
 800a57c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a580:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a584:	f04f 0200 	mov.w	r2, #0
 800a588:	601a      	str	r2, [r3, #0]
    float pid_d = 0.0f;
 800a58a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a58e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
    float level_p = 0.0f;
 800a598:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a59c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800a5a0:	f04f 0200 	mov.w	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
    float pid_apply = 0.0f;
 800a5a6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a5aa:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
      while (uart_data_available_for_read(&usart1_driver) > 0)
 800a5ba:	e088      	b.n	800a6ce <rc_control_main+0x1fa>
      {
          recv_data = uart_recv_data(&usart1_driver, (char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 800a5bc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800a5c0:	2240      	movs	r2, #64	@ 0x40
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	48cb      	ldr	r0, [pc, #812]	@ (800a8f4 <rc_control_main+0x420>)
 800a5c6:	f7ff f85e 	bl	8009686 <uart_recv_data>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
          for(int i=0; i<recv_data; i++){
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800a5d6:	e074      	b.n	800a6c2 <rc_control_main+0x1ee>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 800a5d8:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 800a5dc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800a5e0:	4413      	add	r3, r2
 800a5e2:	7818      	ldrb	r0, [r3, #0]
 800a5e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a5e8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800a5ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5f0:	f7ff ff2c 	bl	800a44c <line_buffer_add_char>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d05e      	beq.n	800a6b8 <rc_control_main+0x1e4>

				  int temp_str_len = strlen(linebuf);
 800a5fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f5 fe46 	bl	8000290 <strlen>
 800a604:	4603      	mov	r3, r0
 800a606:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  temp_str_len -= 6;
 800a60a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a60e:	3b06      	subs	r3, #6
 800a610:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  crc_calculated = crc16_ccitt_init();
 800a614:	f7f6 ffcc 	bl	80015b0 <crc16_ccitt_init>
 800a618:	4603      	mov	r3, r0
 800a61a:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 800a61e:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800a622:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800a626:	f8b7 318e 	ldrh.w	r3, [r7, #398]	@ 0x18e
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7f6 fffc 	bl	8001628 <crc16_ccitt_add_arr>
 800a630:	4603      	mov	r3, r0
 800a632:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%x",
 800a636:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800a63a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a63e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800a642:	f107 0320 	add.w	r3, r7, #32
 800a646:	9309      	str	r3, [sp, #36]	@ 0x24
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	9308      	str	r3, [sp, #32]
 800a64e:	f107 0310 	add.w	r3, r7, #16
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	9306      	str	r3, [sp, #24]
 800a65a:	f107 0318 	add.w	r3, r7, #24
 800a65e:	9305      	str	r3, [sp, #20]
 800a660:	f107 031c 	add.w	r3, r7, #28
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a676:	3308      	adds	r3, #8
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a67e:	3304      	adds	r3, #4
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	460b      	mov	r3, r1
 800a684:	499c      	ldr	r1, [pc, #624]	@ (800a8f8 <rc_control_main+0x424>)
 800a686:	f011 fc03 	bl	801be90 <siscanf>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b0c      	cmp	r3, #12
 800a68e:	d103      	bne.n	800a698 <rc_control_main+0x1c4>
						  &level_p,
						  &pid_apply,
						  &crc_received

						  ) == 12) {
					  current_message_corrupted = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800a696:	e002      	b.n	800a69e <rc_control_main+0x1ca>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 800a698:	2301      	movs	r3, #1
 800a69a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 800a69e:	f8b7 218e 	ldrh.w	r2, [r7, #398]	@ 0x18e
 800a6a2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a6a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d003      	beq.n	800a6b8 <rc_control_main+0x1e4>
					  current_message_corrupted = 1;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					  continue;
 800a6b6:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 800a6b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800a6bc:	3301      	adds	r3, #1
 800a6be:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800a6c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800a6c6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	db84      	blt.n	800a5d8 <rc_control_main+0x104>
      while (uart_data_available_for_read(&usart1_driver) > 0)
 800a6ce:	4889      	ldr	r0, [pc, #548]	@ (800a8f4 <rc_control_main+0x420>)
 800a6d0:	f7ff f82e 	bl	8009730 <uart_data_available_for_read>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f47f af70 	bne.w	800a5bc <rc_control_main+0xe8>
			  }
          }
      }


      if(current_message_corrupted == 0){
 800a6dc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f040 80a1 	bne.w	800a828 <rc_control_main+0x354>
    	  errors = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

          target_attitude = temp_target_attitude;
 800a6ec:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a6f0:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 800a6f4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a6f8:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800a700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 800a704:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a708:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
          disarm_flag = (temp_disarm_flag);
 800a712:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a716:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
          target_throttle = temp_target_throttle;
 800a720:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a724:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
          if(pid_apply > 0.5f){
 800a72e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a732:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800a736:	edd3 7a00 	vldr	s15, [r3]
 800a73a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a73e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a746:	dd6f      	ble.n	800a828 <rc_control_main+0x354>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 800a748:	4b6c      	ldr	r3, [pc, #432]	@ (800a8fc <rc_control_main+0x428>)
 800a74a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800a74e:	f04f 31ff 	mov.w	r1, #4294967295
 800a752:	4618      	mov	r0, r3
 800a754:	f00b fb5e 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	fcl.rate_controller.pid_pitch.Kp = pid_p;
 800a758:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a75c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a66      	ldr	r2, [pc, #408]	@ (800a8fc <rc_control_main+0x428>)
 800a764:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	fcl.rate_controller.pid_pitch.Ki = pid_i;
 800a768:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a76c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a62      	ldr	r2, [pc, #392]	@ (800a8fc <rc_control_main+0x428>)
 800a774:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	fcl.rate_controller.pid_pitch.Kd = pid_d;
 800a778:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a77c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a5e      	ldr	r2, [pc, #376]	@ (800a8fc <rc_control_main+0x428>)
 800a784:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8

	fcl.rate_controller.pid_roll.Kp = pid_p;
 800a788:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a78c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a5a      	ldr	r2, [pc, #360]	@ (800a8fc <rc_control_main+0x428>)
 800a794:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
	fcl.rate_controller.pid_roll.Ki = pid_i;
 800a798:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a79c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a56      	ldr	r2, [pc, #344]	@ (800a8fc <rc_control_main+0x428>)
 800a7a4:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	fcl.rate_controller.pid_roll.Kd = pid_d;
 800a7a8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a7ac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a52      	ldr	r2, [pc, #328]	@ (800a8fc <rc_control_main+0x428>)
 800a7b4:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c

	fcl.rate_controller.pid_yaw.Kp = pid_p;
 800a7b8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a7bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a4e      	ldr	r2, [pc, #312]	@ (800a8fc <rc_control_main+0x428>)
 800a7c4:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
	fcl.rate_controller.pid_yaw.Ki = pid_i;
 800a7c8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a7cc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a4a      	ldr	r2, [pc, #296]	@ (800a8fc <rc_control_main+0x428>)
 800a7d4:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	fcl.rate_controller.pid_yaw.Kd = pid_d;
 800a7d8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a7dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a46      	ldr	r2, [pc, #280]	@ (800a8fc <rc_control_main+0x428>)
 800a7e4:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800a7e8:	4b44      	ldr	r3, [pc, #272]	@ (800a8fc <rc_control_main+0x428>)
 800a7ea:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f00b f88c 	bl	8015910 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 800a7f8:	4b40      	ldr	r3, [pc, #256]	@ (800a8fc <rc_control_main+0x428>)
 800a7fa:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 800a7fe:	f04f 31ff 	mov.w	r1, #4294967295
 800a802:	4618      	mov	r0, r3
 800a804:	f00b fb06 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	fcl.attitude_controller.rate_gain = level_p;
 800a808:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a80c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a3a      	ldr	r2, [pc, #232]	@ (800a8fc <rc_control_main+0x428>)
 800a814:	f8c2 32cc 	str.w	r3, [r2, #716]	@ 0x2cc
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 800a818:	4b38      	ldr	r3, [pc, #224]	@ (800a8fc <rc_control_main+0x428>)
 800a81a:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800a81e:	2300      	movs	r3, #0
 800a820:	2200      	movs	r2, #0
 800a822:	2100      	movs	r1, #0
 800a824:	f00b f874 	bl	8015910 <xQueueGenericSend>
#endif
          }
      }

      errors += current_message_corrupted;
 800a828:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800a82c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800a830:	4413      	add	r3, r2
 800a832:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 800a836:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a842:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a900 <rc_control_main+0x42c>
 800a846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84e:	db20      	blt.n	800a892 <rc_control_main+0x3be>
    	  target_attitude.x = 0.0f;
 800a850:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a854:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a858:	f04f 0200 	mov.w	r2, #0
 800a85c:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 800a85e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a862:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a866:	f04f 0200 	mov.w	r2, #0
 800a86a:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 800a86c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a870:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 800a87a:	f04f 0300 	mov.w	r3, #0
 800a87e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    	  disarm_flag = 1.0f;
 800a882:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800a886:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	  arm_flag = 0.0f;
 800a88a:	f04f 0300 	mov.w	r3, #0
 800a88e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      }


      if (arm_flag > 0.5f){
 800a892:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800a896:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a89a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a2:	dd02      	ble.n	800a8aa <rc_control_main+0x3d6>
    	  flight_control_loop_arm_esc(&fcl);
 800a8a4:	4815      	ldr	r0, [pc, #84]	@ (800a8fc <rc_control_main+0x428>)
 800a8a6:	f7f6 ffcb 	bl	8001840 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 800a8aa:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800a8ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ba:	dd02      	ble.n	800a8c2 <rc_control_main+0x3ee>
    	  flight_control_loop_disarm_esc(&fcl);
 800a8bc:	480f      	ldr	r0, [pc, #60]	@ (800a8fc <rc_control_main+0x428>)
 800a8be:	f7f6 ffde 	bl	800187e <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 800a8c2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a8c6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800a8ca:	edd3 6a00 	vldr	s13, [r3]
 800a8ce:	ed93 7a01 	vldr	s14, [r3, #4]
 800a8d2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a8d6:	edd7 1a6b 	vldr	s3, [r7, #428]	@ 0x1ac
 800a8da:	eeb0 0a66 	vmov.f32	s0, s13
 800a8de:	eef0 0a47 	vmov.f32	s1, s14
 800a8e2:	eeb0 1a67 	vmov.f32	s2, s15
 800a8e6:	4805      	ldr	r0, [pc, #20]	@ (800a8fc <rc_control_main+0x428>)
 800a8e8:	f7f7 fa76 	bl	8001dd8 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 800a8ec:	200a      	movs	r0, #10
 800a8ee:	f00b fee5 	bl	80166bc <vTaskDelay>
	  current_message_corrupted = 1;
 800a8f2:	e65f      	b.n	800a5b4 <rc_control_main+0xe0>
 800a8f4:	200055d8 	.word	0x200055d8
 800a8f8:	08021f34 	.word	0x08021f34
 800a8fc:	2000131c 	.word	0x2000131c
 800a900:	42480000 	.word	0x42480000

0800a904 <print_telemetry_data>:
  }
}


static void print_telemetry_data(void *arg){
 800a904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a908:	b0aa      	sub	sp, #168	@ 0xa8
 800a90a:	af06      	add	r7, sp, #24
 800a90c:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 800a90e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	605a      	str	r2, [r3, #4]
 800a918:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	633b      	str	r3, [r7, #48]	@ 0x30

    for (;;)
    {
    	vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 800a920:	2032      	movs	r0, #50	@ 0x32
 800a922:	f00b fecb 	bl	80166bc <vTaskDelay>
    	if(start_telemetry == 0){
 800a926:	4bb5      	ldr	r3, [pc, #724]	@ (800abfc <print_telemetry_data+0x2f8>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 8164 	beq.w	800abf8 <print_telemetry_data+0x2f4>
    		continue;
    	}
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 800a930:	4bb3      	ldr	r3, [pc, #716]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800a932:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 800a936:	f04f 31ff 	mov.w	r1, #4294967295
 800a93a:	4618      	mov	r0, r3
 800a93c:	f00b fa6a 	bl	8015e14 <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 800a940:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a944:	4619      	mov	r1, r3
 800a946:	48ae      	ldr	r0, [pc, #696]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800a948:	f7f9 fb62 	bl	8004010 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 800a94c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a950:	4619      	mov	r1, r3
 800a952:	48ab      	ldr	r0, [pc, #684]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800a954:	f7f9 fb6f 	bl	8004036 <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 800a958:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a95c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a960:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800a964:	48a6      	ldr	r0, [pc, #664]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800a966:	f7f9 fb27 	bl	8003fb8 <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 800a96a:	4ba5      	ldr	r3, [pc, #660]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800a96c:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 800a970:	2300      	movs	r3, #0
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	f00a ffcb 	bl	8015910 <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 800a97a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a97e:	4619      	mov	r1, r3
 800a980:	489f      	ldr	r0, [pc, #636]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800a982:	f7f7 fb15 	bl	8001fb0 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 800a986:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7f8 fd74 	bl	8003478 <quat2angle>
 800a990:	eef0 6a40 	vmov.f32	s13, s0
 800a994:	eeb0 7a60 	vmov.f32	s14, s1
 800a998:	eef0 7a41 	vmov.f32	s15, s2
 800a99c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 800a9a0:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800a9a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 800a9a8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a9ac:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 800ac04 <print_telemetry_data+0x300>
 800a9b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9b4:	ee17 0a90 	vmov	r0, s15
 800a9b8:	f7f5 fdd6 	bl	8000568 <__aeabi_f2d>
 800a9bc:	4680      	mov	r8, r0
 800a9be:	4689      	mov	r9, r1
 800a9c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a9c4:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800ac04 <print_telemetry_data+0x300>
 800a9c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9cc:	ee17 0a90 	vmov	r0, s15
 800a9d0:	f7f5 fdca 	bl	8000568 <__aeabi_f2d>
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a9dc:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800ac04 <print_telemetry_data+0x300>
 800a9e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9e4:	ee17 0a90 	vmov	r0, s15
 800a9e8:	f7f5 fdbe 	bl	8000568 <__aeabi_f2d>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9f4:	e9cd 4500 	strd	r4, r5, [sp]
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	4882      	ldr	r0, [pc, #520]	@ (800ac08 <print_telemetry_data+0x304>)
 800a9fe:	f011 f9ad 	bl	801bd5c <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
 800aa02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7f5 fdae 	bl	8000568 <__aeabi_f2d>
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4689      	mov	r9, r1
 800aa10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7f5 fda7 	bl	8000568 <__aeabi_f2d>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7f5 fda0 	bl	8000568 <__aeabi_f2d>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa30:	e9cd 4500 	strd	r4, r5, [sp]
 800aa34:	4642      	mov	r2, r8
 800aa36:	464b      	mov	r3, r9
 800aa38:	4873      	ldr	r0, [pc, #460]	@ (800ac08 <print_telemetry_data+0x304>)
 800aa3a:	f011 f98f 	bl	801bd5c <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
 800aa3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7f5 fd91 	bl	8000568 <__aeabi_f2d>
 800aa46:	4680      	mov	r8, r0
 800aa48:	4689      	mov	r9, r1
 800aa4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7f5 fd8b 	bl	8000568 <__aeabi_f2d>
 800aa52:	4604      	mov	r4, r0
 800aa54:	460d      	mov	r5, r1
 800aa56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f5 fd84 	bl	8000568 <__aeabi_f2d>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa68:	e9cd 4500 	strd	r4, r5, [sp]
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	4865      	ldr	r0, [pc, #404]	@ (800ac08 <print_telemetry_data+0x304>)
 800aa72:	f011 f973 	bl	801bd5c <iprintf>
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);
 800aa76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7f5 fd75 	bl	8000568 <__aeabi_f2d>
 800aa7e:	4682      	mov	sl, r0
 800aa80:	468b      	mov	fp, r1
 800aa82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7f5 fd6f 	bl	8000568 <__aeabi_f2d>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f5 fd69 	bl	8000568 <__aeabi_f2d>
 800aa96:	4680      	mov	r8, r0
 800aa98:	4689      	mov	r9, r1
 800aa9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7f5 fd63 	bl	8000568 <__aeabi_f2d>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aaaa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800aaae:	e9cd 4500 	strd	r4, r5, [sp]
 800aab2:	4652      	mov	r2, sl
 800aab4:	465b      	mov	r3, fp
 800aab6:	4855      	ldr	r0, [pc, #340]	@ (800ac0c <print_telemetry_data+0x308>)
 800aab8:	f011 f950 	bl	801bd5c <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 800aabc:	4b50      	ldr	r3, [pc, #320]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800aabe:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800aac2:	f04f 31ff 	mov.w	r1, #4294967295
 800aac6:	4618      	mov	r0, r3
 800aac8:	f00b f9a4 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 800aacc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800aad0:	f103 0008 	add.w	r0, r3, #8
 800aad4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800aad8:	1d1a      	adds	r2, r3, #4
 800aada:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800aade:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	4603      	mov	r3, r0
 800aae6:	484a      	ldr	r0, [pc, #296]	@ (800ac10 <print_telemetry_data+0x30c>)
 800aae8:	f7fa fda2 	bl	8005630 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 800aaec:	4b44      	ldr	r3, [pc, #272]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800aaee:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	f00a ff0a 	bl	8015910 <xQueueGenericSend>
#endif
	//	printf("%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z);
	printf("%.3f;", target_throttle);
 800aafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f5 fd32 	bl	8000568 <__aeabi_f2d>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4842      	ldr	r0, [pc, #264]	@ (800ac14 <print_telemetry_data+0x310>)
 800ab0a:	f011 f927 	bl	801bd5c <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 800ab0e:	4b3c      	ldr	r3, [pc, #240]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800ab10:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 800ab14:	f04f 31ff 	mov.w	r1, #4294967295
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f00b f97b 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 800ab1e:	f04f 0300 	mov.w	r3, #0
 800ab22:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 800ab2a:	f04f 0300 	mov.w	r3, #0
 800ab2e:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 800ab30:	f107 0318 	add.w	r3, r7, #24
 800ab34:	f107 021c 	add.w	r2, r7, #28
 800ab38:	f107 0120 	add.w	r1, r7, #32
 800ab3c:	4836      	ldr	r0, [pc, #216]	@ (800ac18 <print_telemetry_data+0x314>)
 800ab3e:	f7f6 fd11 	bl	8001564 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 800ab42:	4b2f      	ldr	r3, [pc, #188]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800ab44:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	f00a fedf 	bl	8015910 <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 800ab52:	4b2b      	ldr	r3, [pc, #172]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800ab54:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800ab58:	f04f 31ff 	mov.w	r1, #4294967295
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f00b f959 	bl	8015e14 <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 800ab68:	f04f 0300 	mov.w	r3, #0
 800ab6c:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 800ab6e:	f04f 0300 	mov.w	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 800ab74:	f107 030c 	add.w	r3, r7, #12
 800ab78:	f107 0210 	add.w	r2, r7, #16
 800ab7c:	f107 0114 	add.w	r1, r7, #20
 800ab80:	4826      	ldr	r0, [pc, #152]	@ (800ac1c <print_telemetry_data+0x318>)
 800ab82:	f7fa fab7 	bl	80050f4 <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800ab86:	4b1e      	ldr	r3, [pc, #120]	@ (800ac00 <print_telemetry_data+0x2fc>)
 800ab88:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2100      	movs	r1, #0
 800ab92:	f00a febd 	bl	8015910 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", degrees(pid_roll_output), degrees(pid_pitch_output), degrees(pid_yaw_output));
 800ab96:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab9a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800ac04 <print_telemetry_data+0x300>
 800ab9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aba2:	ee17 0a90 	vmov	r0, s15
 800aba6:	f7f5 fcdf 	bl	8000568 <__aeabi_f2d>
 800abaa:	4680      	mov	r8, r0
 800abac:	4689      	mov	r9, r1
 800abae:	edd7 7a04 	vldr	s15, [r7, #16]
 800abb2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800ac04 <print_telemetry_data+0x300>
 800abb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abba:	ee17 0a90 	vmov	r0, s15
 800abbe:	f7f5 fcd3 	bl	8000568 <__aeabi_f2d>
 800abc2:	4604      	mov	r4, r0
 800abc4:	460d      	mov	r5, r1
 800abc6:	edd7 7a03 	vldr	s15, [r7, #12]
 800abca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ac04 <print_telemetry_data+0x300>
 800abce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abd2:	ee17 0a90 	vmov	r0, s15
 800abd6:	f7f5 fcc7 	bl	8000568 <__aeabi_f2d>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abe2:	e9cd 4500 	strd	r4, r5, [sp]
 800abe6:	4642      	mov	r2, r8
 800abe8:	464b      	mov	r3, r9
 800abea:	4807      	ldr	r0, [pc, #28]	@ (800ac08 <print_telemetry_data+0x304>)
 800abec:	f011 f8b6 	bl	801bd5c <iprintf>
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)write_h) * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)rc_h)     * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)telem_h)  * sizeof(StackType_t)));


    printf("\n");
 800abf0:	200a      	movs	r0, #10
 800abf2:	f011 f8c5 	bl	801bd80 <putchar>
 800abf6:	e693      	b.n	800a920 <print_telemetry_data+0x1c>
    		continue;
 800abf8:	bf00      	nop
    {
 800abfa:	e691      	b.n	800a920 <print_telemetry_data+0x1c>
 800abfc:	2000004c 	.word	0x2000004c
 800ac00:	2000131c 	.word	0x2000131c
 800ac04:	42652ee1 	.word	0x42652ee1
 800ac08:	08021f58 	.word	0x08021f58
 800ac0c:	08021f68 	.word	0x08021f68
 800ac10:	2000160c 	.word	0x2000160c
 800ac14:	08021f80 	.word	0x08021f80
 800ac18:	200015d8 	.word	0x200015d8
 800ac1c:	20001460 	.word	0x20001460

0800ac20 <fp_cli_func>:

#include "fp_cli.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
char fp_cli_read_buffer[128];
static void fp_cli_func(void *arg){
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	size_t read_bytes = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]
	//CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
	fp_cli_example_minimal_init();
 800ac2c:	f7f8 f8f6 	bl	8002e1c <fp_cli_example_minimal_init>
	//lwshellr_t lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len);
	for(;;){
		read_bytes = CDC_recv_data(fp_cli_read_buffer, sizeof(fp_cli_read_buffer)-1);
 800ac30:	217f      	movs	r1, #127	@ 0x7f
 800ac32:	4807      	ldr	r0, [pc, #28]	@ (800ac50 <fp_cli_func+0x30>)
 800ac34:	f00d fe62 	bl	80188fc <CDC_recv_data>
 800ac38:	60f8      	str	r0, [r7, #12]
		lwshell_input_ex(&lwshell_cli, fp_cli_read_buffer, read_bytes);
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4904      	ldr	r1, [pc, #16]	@ (800ac50 <fp_cli_func+0x30>)
 800ac3e:	4805      	ldr	r0, [pc, #20]	@ (800ac54 <fp_cli_func+0x34>)
 800ac40:	f7fa ff6a 	bl	8005b18 <lwshell_input_ex>
		vTaskDelay(pdMS_TO_TICKS(100));
 800ac44:	2064      	movs	r0, #100	@ 0x64
 800ac46:	f00b fd39 	bl	80166bc <vTaskDelay>
		read_bytes = CDC_recv_data(fp_cli_read_buffer, sizeof(fp_cli_read_buffer)-1);
 800ac4a:	bf00      	nop
 800ac4c:	e7f0      	b.n	800ac30 <fp_cli_func+0x10>
 800ac4e:	bf00      	nop
 800ac50:	2000439c 	.word	0x2000439c
 800ac54:	2000033c 	.word	0x2000033c

0800ac58 <app_init>:
	}

}


void app_init(){
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08a      	sub	sp, #40	@ 0x28
 800ac5c:	af00      	add	r7, sp, #0
    init_imu();
 800ac5e:	f7ff fa13 	bl	800a088 <init_imu>
    flight_control_loop_init(&fcl);
 800ac62:	483a      	ldr	r0, [pc, #232]	@ (800ad4c <app_init+0xf4>)
 800ac64:	f7f6 fe4a 	bl	80018fc <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 800ac68:	4838      	ldr	r0, [pc, #224]	@ (800ad4c <app_init+0xf4>)
 800ac6a:	f7f6 fe08 	bl	800187e <flight_control_loop_disarm_esc>

    float duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 800ac6e:	eddf 1a38 	vldr	s3, [pc, #224]	@ 800ad50 <app_init+0xf8>
 800ac72:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 800ad54 <app_init+0xfc>
 800ac76:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800ad58 <app_init+0x100>
 800ac7a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800ad5c <app_init+0x104>
 800ac7e:	f7ff f815 	bl	8009cac <esc_pwm_throttle_to_duty_cycle>
 800ac82:	ed87 0a08 	vstr	s0, [r7, #32]
 800ac86:	2300      	movs	r3, #0
 800ac88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ac8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ac8e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac90:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800ac92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac94:	b672      	cpsid	i
}
 800ac96:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ac98:	f3bf 8f4f 	dsb	sy
}
 800ac9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac9e:	f3bf 8f6f 	isb	sy
}
 800aca2:	bf00      	nop
    return old;
 800aca4:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800aca6:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d001      	beq.n	800acb2 <app_init+0x5a>
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	e000      	b.n	800acb4 <app_init+0x5c>
 800acb2:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800acb4:	603b      	str	r3, [r7, #0]
 800acb6:	2301      	movs	r3, #1
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800acba:	e029      	b.n	800ad10 <app_init+0xb8>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800acbc:	edd7 0a08 	vldr	s1, [r7, #32]
 800acc0:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800ad5c <app_init+0x104>
 800acc4:	4b26      	ldr	r3, [pc, #152]	@ (800ad60 <app_init+0x108>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	4926      	ldr	r1, [pc, #152]	@ (800ad64 <app_init+0x10c>)
 800acca:	4827      	ldr	r0, [pc, #156]	@ (800ad68 <app_init+0x110>)
 800accc:	f7fe fe98 	bl	8009a00 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800acd0:	edd7 0a08 	vldr	s1, [r7, #32]
 800acd4:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800ad5c <app_init+0x104>
 800acd8:	4b21      	ldr	r3, [pc, #132]	@ (800ad60 <app_init+0x108>)
 800acda:	2204      	movs	r2, #4
 800acdc:	4921      	ldr	r1, [pc, #132]	@ (800ad64 <app_init+0x10c>)
 800acde:	4823      	ldr	r0, [pc, #140]	@ (800ad6c <app_init+0x114>)
 800ace0:	f7fe fe8e 	bl	8009a00 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800ace4:	edd7 0a08 	vldr	s1, [r7, #32]
 800ace8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800ad5c <app_init+0x104>
 800acec:	4b1c      	ldr	r3, [pc, #112]	@ (800ad60 <app_init+0x108>)
 800acee:	2208      	movs	r2, #8
 800acf0:	491c      	ldr	r1, [pc, #112]	@ (800ad64 <app_init+0x10c>)
 800acf2:	481f      	ldr	r0, [pc, #124]	@ (800ad70 <app_init+0x118>)
 800acf4:	f7fe fe84 	bl	8009a00 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800acf8:	edd7 0a08 	vldr	s1, [r7, #32]
 800acfc:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800ad5c <app_init+0x104>
 800ad00:	4b17      	ldr	r3, [pc, #92]	@ (800ad60 <app_init+0x108>)
 800ad02:	220c      	movs	r2, #12
 800ad04:	4917      	ldr	r1, [pc, #92]	@ (800ad64 <app_init+0x10c>)
 800ad06:	481b      	ldr	r0, [pc, #108]	@ (800ad74 <app_init+0x11c>)
 800ad08:	f7fe fe7a 	bl	8009a00 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1d2      	bne.n	800acbc <app_init+0x64>
 800ad16:	463b      	mov	r3, r7
 800ad18:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800ad20:	f3bf 8f5f 	dmb	sy
}
 800ad24:	bf00      	nop
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f383 8810 	msr	PRIMASK, r3
}
 800ad30:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ad32:	f3bf 8f4f 	dsb	sy
}
 800ad36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ad38:	f3bf 8f6f 	isb	sy
}
 800ad3c:	bf00      	nop
}
 800ad3e:	bf00      	nop
}
 800ad40:	bf00      	nop
	}
}
 800ad42:	bf00      	nop
 800ad44:	3728      	adds	r7, #40	@ 0x28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	2000131c 	.word	0x2000131c
 800ad50:	00000000 	.word	0x00000000
 800ad54:	44fa0000 	.word	0x44fa0000
 800ad58:	447a0000 	.word	0x447a0000
 800ad5c:	43c80000 	.word	0x43c80000
 800ad60:	0501bd00 	.word	0x0501bd00
 800ad64:	200044c8 	.word	0x200044c8
 800ad68:	20001734 	.word	0x20001734
 800ad6c:	20001748 	.word	0x20001748
 800ad70:	2000175c 	.word	0x2000175c
 800ad74:	20001770 	.word	0x20001770

0800ad78 <app_main_start>:


void app_main_start(void *argument)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b0b4      	sub	sp, #208	@ 0xd0
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	app_init();
 800ad80:	f7ff ff6a 	bl	800ac58 <app_init>
    //   original 13  -> normal
    //   original 5   -> below normal
    //
    // If you need finer spacing, use osPriorityHigh1..7, osPriorityAboveNormal1..7 (if available).

    flight_attr = (osThreadAttr_t){
 800ad84:	4b81      	ldr	r3, [pc, #516]	@ (800af8c <app_main_start+0x214>)
 800ad86:	4618      	mov	r0, r3
 800ad88:	2324      	movs	r3, #36	@ 0x24
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	f011 f9db 	bl	801c148 <memset>
 800ad92:	4b7e      	ldr	r3, [pc, #504]	@ (800af8c <app_main_start+0x214>)
 800ad94:	4a7e      	ldr	r2, [pc, #504]	@ (800af90 <app_main_start+0x218>)
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	4b7c      	ldr	r3, [pc, #496]	@ (800af8c <app_main_start+0x214>)
 800ad9a:	4a7e      	ldr	r2, [pc, #504]	@ (800af94 <app_main_start+0x21c>)
 800ad9c:	609a      	str	r2, [r3, #8]
 800ad9e:	4b7b      	ldr	r3, [pc, #492]	@ (800af8c <app_main_start+0x214>)
 800ada0:	22a8      	movs	r2, #168	@ 0xa8
 800ada2:	60da      	str	r2, [r3, #12]
 800ada4:	4b79      	ldr	r3, [pc, #484]	@ (800af8c <app_main_start+0x214>)
 800ada6:	4a7c      	ldr	r2, [pc, #496]	@ (800af98 <app_main_start+0x220>)
 800ada8:	611a      	str	r2, [r3, #16]
 800adaa:	4b78      	ldr	r3, [pc, #480]	@ (800af8c <app_main_start+0x214>)
 800adac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adb0:	615a      	str	r2, [r3, #20]
 800adb2:	4b76      	ldr	r3, [pc, #472]	@ (800af8c <app_main_start+0x214>)
 800adb4:	2230      	movs	r2, #48	@ 0x30
 800adb6:	619a      	str	r2, [r3, #24]
        .stack_mem  = flight_stack,
        .stack_size = sizeof(flight_stack),
		.cb_mem = &flight_h_taskControlBlock,
		.cb_size = sizeof(flight_h_taskControlBlock)
    };
    flight_h = osThreadNew(flight_controller_main, NULL, &flight_attr);
 800adb8:	4a74      	ldr	r2, [pc, #464]	@ (800af8c <app_main_start+0x214>)
 800adba:	2100      	movs	r1, #0
 800adbc:	4877      	ldr	r0, [pc, #476]	@ (800af9c <app_main_start+0x224>)
 800adbe:	f00a fa99 	bl	80152f4 <osThreadNew>
 800adc2:	4603      	mov	r3, r0
 800adc4:	4a76      	ldr	r2, [pc, #472]	@ (800afa0 <app_main_start+0x228>)
 800adc6:	6013      	str	r3, [r2, #0]
    configASSERT(flight_h != NULL);
 800adc8:	4b75      	ldr	r3, [pc, #468]	@ (800afa0 <app_main_start+0x228>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10c      	bne.n	800adea <app_main_start+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	e7fd      	b.n	800ade6 <app_main_start+0x6e>

    write_attr = (osThreadAttr_t){
 800adea:	4b6e      	ldr	r3, [pc, #440]	@ (800afa4 <app_main_start+0x22c>)
 800adec:	4618      	mov	r0, r3
 800adee:	2324      	movs	r3, #36	@ 0x24
 800adf0:	461a      	mov	r2, r3
 800adf2:	2100      	movs	r1, #0
 800adf4:	f011 f9a8 	bl	801c148 <memset>
 800adf8:	4b6a      	ldr	r3, [pc, #424]	@ (800afa4 <app_main_start+0x22c>)
 800adfa:	4a6b      	ldr	r2, [pc, #428]	@ (800afa8 <app_main_start+0x230>)
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	4b69      	ldr	r3, [pc, #420]	@ (800afa4 <app_main_start+0x22c>)
 800ae00:	4a6a      	ldr	r2, [pc, #424]	@ (800afac <app_main_start+0x234>)
 800ae02:	609a      	str	r2, [r3, #8]
 800ae04:	4b67      	ldr	r3, [pc, #412]	@ (800afa4 <app_main_start+0x22c>)
 800ae06:	22a8      	movs	r2, #168	@ 0xa8
 800ae08:	60da      	str	r2, [r3, #12]
 800ae0a:	4b66      	ldr	r3, [pc, #408]	@ (800afa4 <app_main_start+0x22c>)
 800ae0c:	4a68      	ldr	r2, [pc, #416]	@ (800afb0 <app_main_start+0x238>)
 800ae0e:	611a      	str	r2, [r3, #16]
 800ae10:	4b64      	ldr	r3, [pc, #400]	@ (800afa4 <app_main_start+0x22c>)
 800ae12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae16:	615a      	str	r2, [r3, #20]
 800ae18:	4b62      	ldr	r3, [pc, #392]	@ (800afa4 <app_main_start+0x22c>)
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	619a      	str	r2, [r3, #24]
        .stack_mem  = write_stack,
        .stack_size = sizeof(write_stack),
		.cb_mem = &write_h_taskControlBlock,
		.cb_size = sizeof(write_h_taskControlBlock)
    };
    write_h = osThreadNew(write_motor_main, NULL, &write_attr);
 800ae1e:	4a61      	ldr	r2, [pc, #388]	@ (800afa4 <app_main_start+0x22c>)
 800ae20:	2100      	movs	r1, #0
 800ae22:	4864      	ldr	r0, [pc, #400]	@ (800afb4 <app_main_start+0x23c>)
 800ae24:	f00a fa66 	bl	80152f4 <osThreadNew>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	4a63      	ldr	r2, [pc, #396]	@ (800afb8 <app_main_start+0x240>)
 800ae2c:	6013      	str	r3, [r2, #0]
    configASSERT(write_h != NULL);
 800ae2e:	4b62      	ldr	r3, [pc, #392]	@ (800afb8 <app_main_start+0x240>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10c      	bne.n	800ae50 <app_main_start+0xd8>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
}
 800ae4a:	bf00      	nop
 800ae4c:	bf00      	nop
 800ae4e:	e7fd      	b.n	800ae4c <app_main_start+0xd4>

    rc_attr = (osThreadAttr_t){
 800ae50:	4b5a      	ldr	r3, [pc, #360]	@ (800afbc <app_main_start+0x244>)
 800ae52:	4618      	mov	r0, r3
 800ae54:	2324      	movs	r3, #36	@ 0x24
 800ae56:	461a      	mov	r2, r3
 800ae58:	2100      	movs	r1, #0
 800ae5a:	f011 f975 	bl	801c148 <memset>
 800ae5e:	4b57      	ldr	r3, [pc, #348]	@ (800afbc <app_main_start+0x244>)
 800ae60:	4a57      	ldr	r2, [pc, #348]	@ (800afc0 <app_main_start+0x248>)
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	4b55      	ldr	r3, [pc, #340]	@ (800afbc <app_main_start+0x244>)
 800ae66:	4a57      	ldr	r2, [pc, #348]	@ (800afc4 <app_main_start+0x24c>)
 800ae68:	609a      	str	r2, [r3, #8]
 800ae6a:	4b54      	ldr	r3, [pc, #336]	@ (800afbc <app_main_start+0x244>)
 800ae6c:	22a8      	movs	r2, #168	@ 0xa8
 800ae6e:	60da      	str	r2, [r3, #12]
 800ae70:	4b52      	ldr	r3, [pc, #328]	@ (800afbc <app_main_start+0x244>)
 800ae72:	4a55      	ldr	r2, [pc, #340]	@ (800afc8 <app_main_start+0x250>)
 800ae74:	611a      	str	r2, [r3, #16]
 800ae76:	4b51      	ldr	r3, [pc, #324]	@ (800afbc <app_main_start+0x244>)
 800ae78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae7c:	615a      	str	r2, [r3, #20]
 800ae7e:	4b4f      	ldr	r3, [pc, #316]	@ (800afbc <app_main_start+0x244>)
 800ae80:	2218      	movs	r2, #24
 800ae82:	619a      	str	r2, [r3, #24]
        .stack_mem  = rc_stack,
        .stack_size = sizeof(rc_stack),
		.cb_mem = &rc_h_taskControlBlock,
		.cb_size = sizeof(rc_h_taskControlBlock)
    };
    rc_h = osThreadNew(rc_control_main, NULL, &rc_attr);
 800ae84:	4a4d      	ldr	r2, [pc, #308]	@ (800afbc <app_main_start+0x244>)
 800ae86:	2100      	movs	r1, #0
 800ae88:	4850      	ldr	r0, [pc, #320]	@ (800afcc <app_main_start+0x254>)
 800ae8a:	f00a fa33 	bl	80152f4 <osThreadNew>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	4a4f      	ldr	r2, [pc, #316]	@ (800afd0 <app_main_start+0x258>)
 800ae92:	6013      	str	r3, [r2, #0]
    configASSERT(rc_h != NULL);
 800ae94:	4b4e      	ldr	r3, [pc, #312]	@ (800afd0 <app_main_start+0x258>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10c      	bne.n	800aeb6 <app_main_start+0x13e>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	e7fd      	b.n	800aeb2 <app_main_start+0x13a>

    telem_attr = (osThreadAttr_t){
 800aeb6:	4b47      	ldr	r3, [pc, #284]	@ (800afd4 <app_main_start+0x25c>)
 800aeb8:	4618      	mov	r0, r3
 800aeba:	2324      	movs	r3, #36	@ 0x24
 800aebc:	461a      	mov	r2, r3
 800aebe:	2100      	movs	r1, #0
 800aec0:	f011 f942 	bl	801c148 <memset>
 800aec4:	4b43      	ldr	r3, [pc, #268]	@ (800afd4 <app_main_start+0x25c>)
 800aec6:	4a44      	ldr	r2, [pc, #272]	@ (800afd8 <app_main_start+0x260>)
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	4b42      	ldr	r3, [pc, #264]	@ (800afd4 <app_main_start+0x25c>)
 800aecc:	4a43      	ldr	r2, [pc, #268]	@ (800afdc <app_main_start+0x264>)
 800aece:	609a      	str	r2, [r3, #8]
 800aed0:	4b40      	ldr	r3, [pc, #256]	@ (800afd4 <app_main_start+0x25c>)
 800aed2:	22a8      	movs	r2, #168	@ 0xa8
 800aed4:	60da      	str	r2, [r3, #12]
 800aed6:	4b3f      	ldr	r3, [pc, #252]	@ (800afd4 <app_main_start+0x25c>)
 800aed8:	4a41      	ldr	r2, [pc, #260]	@ (800afe0 <app_main_start+0x268>)
 800aeda:	611a      	str	r2, [r3, #16]
 800aedc:	4b3d      	ldr	r3, [pc, #244]	@ (800afd4 <app_main_start+0x25c>)
 800aede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aee2:	615a      	str	r2, [r3, #20]
 800aee4:	4b3b      	ldr	r3, [pc, #236]	@ (800afd4 <app_main_start+0x25c>)
 800aee6:	2210      	movs	r2, #16
 800aee8:	619a      	str	r2, [r3, #24]
        .stack_mem  = telem_stack,
        .stack_size = sizeof(telem_stack),
		.cb_mem = &telem_h_taskControlBlock,
		.cb_size = sizeof(telem_h_taskControlBlock)
    };
    telem_h = osThreadNew(print_telemetry_data, NULL, &telem_attr);
 800aeea:	4a3a      	ldr	r2, [pc, #232]	@ (800afd4 <app_main_start+0x25c>)
 800aeec:	2100      	movs	r1, #0
 800aeee:	483d      	ldr	r0, [pc, #244]	@ (800afe4 <app_main_start+0x26c>)
 800aef0:	f00a fa00 	bl	80152f4 <osThreadNew>
 800aef4:	4603      	mov	r3, r0
 800aef6:	4a3c      	ldr	r2, [pc, #240]	@ (800afe8 <app_main_start+0x270>)
 800aef8:	6013      	str	r3, [r2, #0]
    configASSERT(telem_h != NULL);
 800aefa:	4b3b      	ldr	r3, [pc, #236]	@ (800afe8 <app_main_start+0x270>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10c      	bne.n	800af1c <app_main_start+0x1a4>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
}
 800af16:	bf00      	nop
 800af18:	bf00      	nop
 800af1a:	e7fd      	b.n	800af18 <app_main_start+0x1a0>


    fp_cli_attr = (osThreadAttr_t){
 800af1c:	4b33      	ldr	r3, [pc, #204]	@ (800afec <app_main_start+0x274>)
 800af1e:	4618      	mov	r0, r3
 800af20:	2324      	movs	r3, #36	@ 0x24
 800af22:	461a      	mov	r2, r3
 800af24:	2100      	movs	r1, #0
 800af26:	f011 f90f 	bl	801c148 <memset>
 800af2a:	4b30      	ldr	r3, [pc, #192]	@ (800afec <app_main_start+0x274>)
 800af2c:	4a30      	ldr	r2, [pc, #192]	@ (800aff0 <app_main_start+0x278>)
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	4b2e      	ldr	r3, [pc, #184]	@ (800afec <app_main_start+0x274>)
 800af32:	4a30      	ldr	r2, [pc, #192]	@ (800aff4 <app_main_start+0x27c>)
 800af34:	609a      	str	r2, [r3, #8]
 800af36:	4b2d      	ldr	r3, [pc, #180]	@ (800afec <app_main_start+0x274>)
 800af38:	22a8      	movs	r2, #168	@ 0xa8
 800af3a:	60da      	str	r2, [r3, #12]
 800af3c:	4b2b      	ldr	r3, [pc, #172]	@ (800afec <app_main_start+0x274>)
 800af3e:	4a2e      	ldr	r2, [pc, #184]	@ (800aff8 <app_main_start+0x280>)
 800af40:	611a      	str	r2, [r3, #16]
 800af42:	4b2a      	ldr	r3, [pc, #168]	@ (800afec <app_main_start+0x274>)
 800af44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af48:	615a      	str	r2, [r3, #20]
 800af4a:	4b28      	ldr	r3, [pc, #160]	@ (800afec <app_main_start+0x274>)
 800af4c:	2210      	movs	r2, #16
 800af4e:	619a      	str	r2, [r3, #24]
        .stack_mem  = fp_cli_stack,
        .stack_size = sizeof(fp_cli_stack),
		.cb_mem = &fp_cli_h_taskControlBlock,
		.cb_size = sizeof(fp_cli_h_taskControlBlock)
    };
    fp_cli_h = osThreadNew(fp_cli_func, NULL, &fp_cli_attr);
 800af50:	4a26      	ldr	r2, [pc, #152]	@ (800afec <app_main_start+0x274>)
 800af52:	2100      	movs	r1, #0
 800af54:	4829      	ldr	r0, [pc, #164]	@ (800affc <app_main_start+0x284>)
 800af56:	f00a f9cd 	bl	80152f4 <osThreadNew>
 800af5a:	4603      	mov	r3, r0
 800af5c:	4a28      	ldr	r2, [pc, #160]	@ (800b000 <app_main_start+0x288>)
 800af5e:	6013      	str	r3, [r2, #0]
    configASSERT(fp_cli_h != NULL);
 800af60:	4b27      	ldr	r3, [pc, #156]	@ (800b000 <app_main_start+0x288>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10c      	bne.n	800af82 <app_main_start+0x20a>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <app_main_start+0x206>

}
 800af82:	bf00      	nop
 800af84:	37d0      	adds	r7, #208	@ 0xd0
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20003f8c 	.word	0x20003f8c
 800af90:	08021f88 	.word	0x08021f88
 800af94:	20004040 	.word	0x20004040
 800af98:	2000178c 	.word	0x2000178c
 800af9c:	0800a159 	.word	0x0800a159
 800afa0:	20004388 	.word	0x20004388
 800afa4:	20003fb0 	.word	0x20003fb0
 800afa8:	08021fa0 	.word	0x08021fa0
 800afac:	200040e8 	.word	0x200040e8
 800afb0:	20001f8c 	.word	0x20001f8c
 800afb4:	0800a2c1 	.word	0x0800a2c1
 800afb8:	2000438c 	.word	0x2000438c
 800afbc:	20003fd4 	.word	0x20003fd4
 800afc0:	08021fb4 	.word	0x08021fb4
 800afc4:	20004190 	.word	0x20004190
 800afc8:	2000278c 	.word	0x2000278c
 800afcc:	0800a4d5 	.word	0x0800a4d5
 800afd0:	20004390 	.word	0x20004390
 800afd4:	20003ff8 	.word	0x20003ff8
 800afd8:	08021fc4 	.word	0x08021fc4
 800afdc:	20004238 	.word	0x20004238
 800afe0:	20002f8c 	.word	0x20002f8c
 800afe4:	0800a905 	.word	0x0800a905
 800afe8:	20004394 	.word	0x20004394
 800afec:	2000401c 	.word	0x2000401c
 800aff0:	08021fdc 	.word	0x08021fdc
 800aff4:	200042e0 	.word	0x200042e0
 800aff8:	2000378c 	.word	0x2000378c
 800affc:	0800ac21 	.word	0x0800ac21
 800b000:	20004398 	.word	0x20004398

0800b004 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800b008:	4b17      	ldr	r3, [pc, #92]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b00a:	4a18      	ldr	r2, [pc, #96]	@ (800b06c <MX_SPI1_Init+0x68>)
 800b00c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b00e:	4b16      	ldr	r3, [pc, #88]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b016:	4b14      	ldr	r3, [pc, #80]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b018:	2200      	movs	r2, #0
 800b01a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b01c:	4b12      	ldr	r3, [pc, #72]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b01e:	2200      	movs	r2, #0
 800b020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b022:	4b11      	ldr	r3, [pc, #68]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b024:	2202      	movs	r2, #2
 800b026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b028:	4b0f      	ldr	r3, [pc, #60]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b02e:	4b0e      	ldr	r3, [pc, #56]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800b036:	4b0c      	ldr	r3, [pc, #48]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b038:	2220      	movs	r2, #32
 800b03a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b03c:	4b0a      	ldr	r3, [pc, #40]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b03e:	2200      	movs	r2, #0
 800b040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b042:	4b09      	ldr	r3, [pc, #36]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b044:	2200      	movs	r2, #0
 800b046:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b048:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800b04e:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b050:	220a      	movs	r2, #10
 800b052:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b054:	4804      	ldr	r0, [pc, #16]	@ (800b068 <MX_SPI1_Init+0x64>)
 800b056:	f003 fce5 	bl	800ea24 <HAL_SPI_Init>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800b060:	f7fe ffc4 	bl	8009fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800b064:	bf00      	nop
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20004424 	.word	0x20004424
 800b06c:	40013000 	.word	0x40013000

0800b070 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08a      	sub	sp, #40	@ 0x28
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b078:	f107 0314 	add.w	r3, r7, #20
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	605a      	str	r2, [r3, #4]
 800b082:	609a      	str	r2, [r3, #8]
 800b084:	60da      	str	r2, [r3, #12]
 800b086:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a19      	ldr	r2, [pc, #100]	@ (800b0f4 <HAL_SPI_MspInit+0x84>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d12b      	bne.n	800b0ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b092:	2300      	movs	r3, #0
 800b094:	613b      	str	r3, [r7, #16]
 800b096:	4b18      	ldr	r3, [pc, #96]	@ (800b0f8 <HAL_SPI_MspInit+0x88>)
 800b098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b09a:	4a17      	ldr	r2, [pc, #92]	@ (800b0f8 <HAL_SPI_MspInit+0x88>)
 800b09c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b0a0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b0a2:	4b15      	ldr	r3, [pc, #84]	@ (800b0f8 <HAL_SPI_MspInit+0x88>)
 800b0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0aa:	613b      	str	r3, [r7, #16]
 800b0ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	4b11      	ldr	r3, [pc, #68]	@ (800b0f8 <HAL_SPI_MspInit+0x88>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b6:	4a10      	ldr	r2, [pc, #64]	@ (800b0f8 <HAL_SPI_MspInit+0x88>)
 800b0b8:	f043 0301 	orr.w	r3, r3, #1
 800b0bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0be:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f8 <HAL_SPI_MspInit+0x88>)
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b0ca:	23e0      	movs	r3, #224	@ 0xe0
 800b0cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b0da:	2305      	movs	r3, #5
 800b0dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0de:	f107 0314 	add.w	r3, r7, #20
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4805      	ldr	r0, [pc, #20]	@ (800b0fc <HAL_SPI_MspInit+0x8c>)
 800b0e6:	f001 facf 	bl	800c688 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800b0ea:	bf00      	nop
 800b0ec:	3728      	adds	r7, #40	@ 0x28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40013000 	.word	0x40013000
 800b0f8:	40023800 	.word	0x40023800
 800b0fc:	40020000 	.word	0x40020000

0800b100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b106:	2300      	movs	r3, #0
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	4b12      	ldr	r3, [pc, #72]	@ (800b154 <HAL_MspInit+0x54>)
 800b10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b10e:	4a11      	ldr	r2, [pc, #68]	@ (800b154 <HAL_MspInit+0x54>)
 800b110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b114:	6453      	str	r3, [r2, #68]	@ 0x44
 800b116:	4b0f      	ldr	r3, [pc, #60]	@ (800b154 <HAL_MspInit+0x54>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b11a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b11e:	607b      	str	r3, [r7, #4]
 800b120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b122:	2300      	movs	r3, #0
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	4b0b      	ldr	r3, [pc, #44]	@ (800b154 <HAL_MspInit+0x54>)
 800b128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b12a:	4a0a      	ldr	r2, [pc, #40]	@ (800b154 <HAL_MspInit+0x54>)
 800b12c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b130:	6413      	str	r3, [r2, #64]	@ 0x40
 800b132:	4b08      	ldr	r3, [pc, #32]	@ (800b154 <HAL_MspInit+0x54>)
 800b134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b13e:	2200      	movs	r2, #0
 800b140:	210f      	movs	r1, #15
 800b142:	f06f 0001 	mvn.w	r0, #1
 800b146:	f000 fe07 	bl	800bd58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	40023800 	.word	0x40023800

0800b158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	@ 0x30
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800b164:	2300      	movs	r3, #0
 800b166:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b168:	2300      	movs	r3, #0
 800b16a:	60bb      	str	r3, [r7, #8]
 800b16c:	4b2f      	ldr	r3, [pc, #188]	@ (800b22c <HAL_InitTick+0xd4>)
 800b16e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b170:	4a2e      	ldr	r2, [pc, #184]	@ (800b22c <HAL_InitTick+0xd4>)
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	6453      	str	r3, [r2, #68]	@ 0x44
 800b178:	4b2c      	ldr	r3, [pc, #176]	@ (800b22c <HAL_InitTick+0xd4>)
 800b17a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	60bb      	str	r3, [r7, #8]
 800b182:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b184:	f107 020c 	add.w	r2, r7, #12
 800b188:	f107 0310 	add.w	r3, r7, #16
 800b18c:	4611      	mov	r1, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f003 fc16 	bl	800e9c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b194:	f003 fc00 	bl	800e998 <HAL_RCC_GetPCLK2Freq>
 800b198:	4603      	mov	r3, r0
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a0:	4a23      	ldr	r2, [pc, #140]	@ (800b230 <HAL_InitTick+0xd8>)
 800b1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a6:	0c9b      	lsrs	r3, r3, #18
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b1ac:	4b21      	ldr	r3, [pc, #132]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1ae:	4a22      	ldr	r2, [pc, #136]	@ (800b238 <HAL_InitTick+0xe0>)
 800b1b0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800b1b2:	4b20      	ldr	r3, [pc, #128]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800b1b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800b1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1cc:	4b19      	ldr	r3, [pc, #100]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800b1d2:	4818      	ldr	r0, [pc, #96]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1d4:	f004 f9f8 	bl	800f5c8 <HAL_TIM_Base_Init>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800b1de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d11b      	bne.n	800b21e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800b1e6:	4813      	ldr	r0, [pc, #76]	@ (800b234 <HAL_InitTick+0xdc>)
 800b1e8:	f004 faa6 	bl	800f738 <HAL_TIM_Base_Start_IT>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800b1f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d111      	bne.n	800b21e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b1fa:	2019      	movs	r0, #25
 800b1fc:	f000 fdc8 	bl	800bd90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b0f      	cmp	r3, #15
 800b204:	d808      	bhi.n	800b218 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800b206:	2200      	movs	r2, #0
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	2019      	movs	r0, #25
 800b20c:	f000 fda4 	bl	800bd58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b210:	4a0a      	ldr	r2, [pc, #40]	@ (800b23c <HAL_InitTick+0xe4>)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	e002      	b.n	800b21e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800b21e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b222:	4618      	mov	r0, r3
 800b224:	3730      	adds	r7, #48	@ 0x30
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	40023800 	.word	0x40023800
 800b230:	431bde83 	.word	0x431bde83
 800b234:	2000447c 	.word	0x2000447c
 800b238:	40010000 	.word	0x40010000
 800b23c:	2000005c 	.word	0x2000005c

0800b240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <NMI_Handler+0x4>

0800b248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b248:	b480      	push	{r7}
 800b24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b24c:	bf00      	nop
 800b24e:	e7fd      	b.n	800b24c <HardFault_Handler+0x4>

0800b250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <MemManage_Handler+0x4>

0800b258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b25c:	bf00      	nop
 800b25e:	e7fd      	b.n	800b25c <BusFault_Handler+0x4>

0800b260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b264:	bf00      	nop
 800b266:	e7fd      	b.n	800b264 <UsageFault_Handler+0x4>

0800b268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b268:	b480      	push	{r7}
 800b26a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b26c:	bf00      	nop
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
	...

0800b278 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b27c:	4802      	ldr	r0, [pc, #8]	@ (800b288 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800b27e:	f004 fc4b 	bl	800fb18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b282:	bf00      	nop
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	2000447c 	.word	0x2000447c

0800b28c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b290:	4802      	ldr	r0, [pc, #8]	@ (800b29c <TIM4_IRQHandler+0x10>)
 800b292:	f004 fc41 	bl	800fb18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b296:	bf00      	nop
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20004510 	.word	0x20004510

0800b2a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b2a6:	480e      	ldr	r0, [pc, #56]	@ (800b2e0 <USART1_IRQHandler+0x40>)
 800b2a8:	f005 fb9c 	bl	80109e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800b2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e0 <USART1_IRQHandler+0x40>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0310 	and.w	r3, r3, #16
 800b2b6:	2b10      	cmp	r3, #16
 800b2b8:	d10d      	bne.n	800b2d6 <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	607b      	str	r3, [r7, #4]
 800b2be:	4b08      	ldr	r3, [pc, #32]	@ (800b2e0 <USART1_IRQHandler+0x40>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	607b      	str	r3, [r7, #4]
 800b2c6:	4b06      	ldr	r3, [pc, #24]	@ (800b2e0 <USART1_IRQHandler+0x40>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	607b      	str	r3, [r7, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 800b2d0:	4803      	ldr	r0, [pc, #12]	@ (800b2e0 <USART1_IRQHandler+0x40>)
 800b2d2:	f000 fbab 	bl	800ba2c <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2000560c 	.word	0x2000560c

0800b2e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800b2e8:	4802      	ldr	r0, [pc, #8]	@ (800b2f4 <DMA2_Stream2_IRQHandler+0x10>)
 800b2ea:	f000 ff63 	bl	800c1b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800b2ee:	bf00      	nop
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20005654 	.word	0x20005654

0800b2f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b2fc:	4802      	ldr	r0, [pc, #8]	@ (800b308 <OTG_FS_IRQHandler+0x10>)
 800b2fe:	f001 fdb8 	bl	800ce72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b302:	bf00      	nop
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	2000bbf0 	.word	0x2000bbf0

0800b30c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800b310:	4802      	ldr	r0, [pc, #8]	@ (800b31c <DMA2_Stream7_IRQHandler+0x10>)
 800b312:	f000 ff4f 	bl	800c1b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800b316:	bf00      	nop
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	200056b4 	.word	0x200056b4

0800b320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0
  return 1;
 800b324:	2301      	movs	r3, #1
}
 800b326:	4618      	mov	r0, r3
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <_kill>:

int _kill(int pid, int sig)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b33a:	f010 ffc7 	bl	801c2cc <__errno>
 800b33e:	4603      	mov	r3, r0
 800b340:	2216      	movs	r2, #22
 800b342:	601a      	str	r2, [r3, #0]
  return -1;
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <_exit>:

void _exit (int status)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b358:	f04f 31ff 	mov.w	r1, #4294967295
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff ffe7 	bl	800b330 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <_exit+0x12>

0800b366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
 800b376:	e00a      	b.n	800b38e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b378:	f3af 8000 	nop.w
 800b37c:	4601      	mov	r1, r0
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	60ba      	str	r2, [r7, #8]
 800b384:	b2ca      	uxtb	r2, r1
 800b386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	3301      	adds	r3, #1
 800b38c:	617b      	str	r3, [r7, #20]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	dbf0      	blt.n	800b378 <_read+0x12>
  }

  return len;
 800b396:	687b      	ldr	r3, [r7, #4]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b3a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b3c8:	605a      	str	r2, [r3, #4]
  return 0;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <_isatty>:

int _isatty(int file)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b3e0:	2301      	movs	r3, #1
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	60f8      	str	r0, [r7, #12]
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b410:	4a14      	ldr	r2, [pc, #80]	@ (800b464 <_sbrk+0x5c>)
 800b412:	4b15      	ldr	r3, [pc, #84]	@ (800b468 <_sbrk+0x60>)
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b41c:	4b13      	ldr	r3, [pc, #76]	@ (800b46c <_sbrk+0x64>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b424:	4b11      	ldr	r3, [pc, #68]	@ (800b46c <_sbrk+0x64>)
 800b426:	4a12      	ldr	r2, [pc, #72]	@ (800b470 <_sbrk+0x68>)
 800b428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b42a:	4b10      	ldr	r3, [pc, #64]	@ (800b46c <_sbrk+0x64>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4413      	add	r3, r2
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	429a      	cmp	r2, r3
 800b436:	d207      	bcs.n	800b448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b438:	f010 ff48 	bl	801c2cc <__errno>
 800b43c:	4603      	mov	r3, r0
 800b43e:	220c      	movs	r2, #12
 800b440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b442:	f04f 33ff 	mov.w	r3, #4294967295
 800b446:	e009      	b.n	800b45c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b448:	4b08      	ldr	r3, [pc, #32]	@ (800b46c <_sbrk+0x64>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b44e:	4b07      	ldr	r3, [pc, #28]	@ (800b46c <_sbrk+0x64>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	4a05      	ldr	r2, [pc, #20]	@ (800b46c <_sbrk+0x64>)
 800b458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b45a:	68fb      	ldr	r3, [r7, #12]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20020000 	.word	0x20020000
 800b468:	00000400 	.word	0x00000400
 800b46c:	200044c4 	.word	0x200044c4
 800b470:	2000c440 	.word	0x2000c440

0800b474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b478:	4b06      	ldr	r3, [pc, #24]	@ (800b494 <SystemInit+0x20>)
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b47e:	4a05      	ldr	r2, [pc, #20]	@ (800b494 <SystemInit+0x20>)
 800b480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b488:	bf00      	nop
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	e000ed00 	.word	0xe000ed00

0800b498 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08e      	sub	sp, #56	@ 0x38
 800b49c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b49e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	605a      	str	r2, [r3, #4]
 800b4a8:	609a      	str	r2, [r3, #8]
 800b4aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4ac:	f107 0320 	add.w	r3, r7, #32
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b4b6:	1d3b      	adds	r3, r7, #4
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	605a      	str	r2, [r3, #4]
 800b4be:	609a      	str	r2, [r3, #8]
 800b4c0:	60da      	str	r2, [r3, #12]
 800b4c2:	611a      	str	r2, [r3, #16]
 800b4c4:	615a      	str	r2, [r3, #20]
 800b4c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b4c8:	4b3d      	ldr	r3, [pc, #244]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b4ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b4d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4d6:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800b4dc:	4b38      	ldr	r3, [pc, #224]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4e2:	4b37      	ldr	r3, [pc, #220]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b4e8:	4b35      	ldr	r3, [pc, #212]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4ea:	2280      	movs	r2, #128	@ 0x80
 800b4ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b4ee:	4834      	ldr	r0, [pc, #208]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b4f0:	f004 f86a 	bl	800f5c8 <HAL_TIM_Base_Init>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800b4fa:	f7fe fd77 	bl	8009fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b502:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b504:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b508:	4619      	mov	r1, r3
 800b50a:	482d      	ldr	r0, [pc, #180]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b50c:	f004 fcb6 	bl	800fe7c <HAL_TIM_ConfigClockSource>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800b516:	f7fe fd69 	bl	8009fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b51a:	4829      	ldr	r0, [pc, #164]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b51c:	f004 f97c 	bl	800f818 <HAL_TIM_PWM_Init>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800b526:	f7fe fd61 	bl	8009fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b52a:	2300      	movs	r3, #0
 800b52c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b52e:	2300      	movs	r3, #0
 800b530:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b532:	f107 0320 	add.w	r3, r7, #32
 800b536:	4619      	mov	r1, r3
 800b538:	4821      	ldr	r0, [pc, #132]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b53a:	f005 f8ab 	bl	8010694 <HAL_TIMEx_MasterConfigSynchronization>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800b544:	f7fe fd52 	bl	8009fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b548:	2360      	movs	r3, #96	@ 0x60
 800b54a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b550:	2300      	movs	r3, #0
 800b552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b554:	2300      	movs	r3, #0
 800b556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b558:	1d3b      	adds	r3, r7, #4
 800b55a:	2200      	movs	r2, #0
 800b55c:	4619      	mov	r1, r3
 800b55e:	4818      	ldr	r0, [pc, #96]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b560:	f004 fbca 	bl	800fcf8 <HAL_TIM_PWM_ConfigChannel>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800b56a:	f7fe fd3f 	bl	8009fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b56e:	1d3b      	adds	r3, r7, #4
 800b570:	2204      	movs	r2, #4
 800b572:	4619      	mov	r1, r3
 800b574:	4812      	ldr	r0, [pc, #72]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b576:	f004 fbbf 	bl	800fcf8 <HAL_TIM_PWM_ConfigChannel>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800b580:	f7fe fd34 	bl	8009fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b584:	1d3b      	adds	r3, r7, #4
 800b586:	2208      	movs	r2, #8
 800b588:	4619      	mov	r1, r3
 800b58a:	480d      	ldr	r0, [pc, #52]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b58c:	f004 fbb4 	bl	800fcf8 <HAL_TIM_PWM_ConfigChannel>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800b596:	f7fe fd29 	bl	8009fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b59a:	1d3b      	adds	r3, r7, #4
 800b59c:	220c      	movs	r2, #12
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4807      	ldr	r0, [pc, #28]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b5a2:	f004 fba9 	bl	800fcf8 <HAL_TIM_PWM_ConfigChannel>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800b5ac:	f7fe fd1e 	bl	8009fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b5b0:	4803      	ldr	r0, [pc, #12]	@ (800b5c0 <MX_TIM2_Init+0x128>)
 800b5b2:	f000 f897 	bl	800b6e4 <HAL_TIM_MspPostInit>

}
 800b5b6:	bf00      	nop
 800b5b8:	3738      	adds	r7, #56	@ 0x38
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	200044c8 	.word	0x200044c8

0800b5c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	605a      	str	r2, [r3, #4]
 800b5d4:	609a      	str	r2, [r3, #8]
 800b5d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5d8:	463b      	mov	r3, r7
 800b5da:	2200      	movs	r2, #0
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b5e0:	4b20      	ldr	r3, [pc, #128]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b5e2:	4a21      	ldr	r2, [pc, #132]	@ (800b668 <MX_TIM4_Init+0xa4>)
 800b5e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800b5e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b5e8:	2253      	movs	r2, #83	@ 0x53
 800b5ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800b5f2:	4b1c      	ldr	r3, [pc, #112]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b5f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800b5f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b5fa:	4b1a      	ldr	r3, [pc, #104]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b600:	4b18      	ldr	r3, [pc, #96]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b602:	2200      	movs	r2, #0
 800b604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b606:	4817      	ldr	r0, [pc, #92]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b608:	f003 ffde 	bl	800f5c8 <HAL_TIM_Base_Init>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800b612:	f7fe fceb 	bl	8009fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b61a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	4810      	ldr	r0, [pc, #64]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b624:	f004 fc2a 	bl	800fe7c <HAL_TIM_ConfigClockSource>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800b62e:	f7fe fcdd 	bl	8009fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b632:	2300      	movs	r3, #0
 800b634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b636:	2300      	movs	r3, #0
 800b638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b63a:	463b      	mov	r3, r7
 800b63c:	4619      	mov	r1, r3
 800b63e:	4809      	ldr	r0, [pc, #36]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b640:	f005 f828 	bl	8010694 <HAL_TIMEx_MasterConfigSynchronization>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800b64a:	f7fe fccf 	bl	8009fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800b64e:	4805      	ldr	r0, [pc, #20]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b650:	f004 f872 	bl	800f738 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 800b654:	4803      	ldr	r0, [pc, #12]	@ (800b664 <MX_TIM4_Init+0xa0>)
 800b656:	f004 f807 	bl	800f668 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800b65a:	bf00      	nop
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20004510 	.word	0x20004510
 800b668:	40000800 	.word	0x40000800

0800b66c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b67c:	d10e      	bne.n	800b69c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b67e:	2300      	movs	r3, #0
 800b680:	60fb      	str	r3, [r7, #12]
 800b682:	4b16      	ldr	r3, [pc, #88]	@ (800b6dc <HAL_TIM_Base_MspInit+0x70>)
 800b684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b686:	4a15      	ldr	r2, [pc, #84]	@ (800b6dc <HAL_TIM_Base_MspInit+0x70>)
 800b688:	f043 0301 	orr.w	r3, r3, #1
 800b68c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b68e:	4b13      	ldr	r3, [pc, #76]	@ (800b6dc <HAL_TIM_Base_MspInit+0x70>)
 800b690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b69a:	e01a      	b.n	800b6d2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0f      	ldr	r2, [pc, #60]	@ (800b6e0 <HAL_TIM_Base_MspInit+0x74>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d115      	bne.n	800b6d2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60bb      	str	r3, [r7, #8]
 800b6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b6dc <HAL_TIM_Base_MspInit+0x70>)
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ae:	4a0b      	ldr	r2, [pc, #44]	@ (800b6dc <HAL_TIM_Base_MspInit+0x70>)
 800b6b0:	f043 0304 	orr.w	r3, r3, #4
 800b6b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800b6b6:	4b09      	ldr	r3, [pc, #36]	@ (800b6dc <HAL_TIM_Base_MspInit+0x70>)
 800b6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ba:	f003 0304 	and.w	r3, r3, #4
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2105      	movs	r1, #5
 800b6c6:	201e      	movs	r0, #30
 800b6c8:	f000 fb46 	bl	800bd58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b6cc:	201e      	movs	r0, #30
 800b6ce:	f000 fb5f 	bl	800bd90 <HAL_NVIC_EnableIRQ>
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	40023800 	.word	0x40023800
 800b6e0:	40000800 	.word	0x40000800

0800b6e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08a      	sub	sp, #40	@ 0x28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6ec:	f107 0314 	add.w	r3, r7, #20
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	605a      	str	r2, [r3, #4]
 800b6f6:	609a      	str	r2, [r3, #8]
 800b6f8:	60da      	str	r2, [r3, #12]
 800b6fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b704:	d13c      	bne.n	800b780 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b706:	2300      	movs	r3, #0
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	4b1f      	ldr	r3, [pc, #124]	@ (800b788 <HAL_TIM_MspPostInit+0xa4>)
 800b70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70e:	4a1e      	ldr	r2, [pc, #120]	@ (800b788 <HAL_TIM_MspPostInit+0xa4>)
 800b710:	f043 0301 	orr.w	r3, r3, #1
 800b714:	6313      	str	r3, [r2, #48]	@ 0x30
 800b716:	4b1c      	ldr	r3, [pc, #112]	@ (800b788 <HAL_TIM_MspPostInit+0xa4>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	613b      	str	r3, [r7, #16]
 800b720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	4b18      	ldr	r3, [pc, #96]	@ (800b788 <HAL_TIM_MspPostInit+0xa4>)
 800b728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b72a:	4a17      	ldr	r2, [pc, #92]	@ (800b788 <HAL_TIM_MspPostInit+0xa4>)
 800b72c:	f043 0302 	orr.w	r3, r3, #2
 800b730:	6313      	str	r3, [r2, #48]	@ 0x30
 800b732:	4b15      	ldr	r3, [pc, #84]	@ (800b788 <HAL_TIM_MspPostInit+0xa4>)
 800b734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800b73e:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b744:	2302      	movs	r3, #2
 800b746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b748:	2300      	movs	r3, #0
 800b74a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b74c:	2301      	movs	r3, #1
 800b74e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b750:	2301      	movs	r3, #1
 800b752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b754:	f107 0314 	add.w	r3, r7, #20
 800b758:	4619      	mov	r1, r3
 800b75a:	480c      	ldr	r0, [pc, #48]	@ (800b78c <HAL_TIM_MspPostInit+0xa8>)
 800b75c:	f000 ff94 	bl	800c688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b760:	2308      	movs	r3, #8
 800b762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b764:	2302      	movs	r3, #2
 800b766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b76c:	2301      	movs	r3, #1
 800b76e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b770:	2301      	movs	r3, #1
 800b772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	4619      	mov	r1, r3
 800b77a:	4805      	ldr	r0, [pc, #20]	@ (800b790 <HAL_TIM_MspPostInit+0xac>)
 800b77c:	f000 ff84 	bl	800c688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b780:	bf00      	nop
 800b782:	3728      	adds	r7, #40	@ 0x28
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	40023800 	.word	0x40023800
 800b78c:	40020000 	.word	0x40020000
 800b790:	40020400 	.word	0x40020400

0800b794 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af06      	add	r7, sp, #24
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b79a:	4b1b      	ldr	r3, [pc, #108]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b79c:	4a1b      	ldr	r2, [pc, #108]	@ (800b80c <MX_USART1_UART_Init+0x78>)
 800b79e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b7a0:	4b19      	ldr	r3, [pc, #100]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7a2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800b7a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b7a8:	4b17      	ldr	r3, [pc, #92]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b7ae:	4b16      	ldr	r3, [pc, #88]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b7b4:	4b14      	ldr	r3, [pc, #80]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b7ba:	4b13      	ldr	r3, [pc, #76]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7bc:	220c      	movs	r2, #12
 800b7be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b7c0:	4b11      	ldr	r3, [pc, #68]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800b7c6:	4b10      	ldr	r3, [pc, #64]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b7cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b7ce:	480e      	ldr	r0, [pc, #56]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7d0:	f004 fff0 	bl	80107b4 <HAL_UART_Init>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800b7da:	f7fe fc07 	bl	8009fec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  uart_driver_init(
 800b7de:	2380      	movs	r3, #128	@ 0x80
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	2380      	movs	r3, #128	@ 0x80
 800b7e4:	9303      	str	r3, [sp, #12]
 800b7e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b7ea:	9302      	str	r3, [sp, #8]
 800b7ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b7f0:	9301      	str	r3, [sp, #4]
 800b7f2:	4b07      	ldr	r3, [pc, #28]	@ (800b810 <MX_USART1_UART_Init+0x7c>)
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	4b07      	ldr	r3, [pc, #28]	@ (800b814 <MX_USART1_UART_Init+0x80>)
 800b7f8:	4a07      	ldr	r2, [pc, #28]	@ (800b818 <MX_USART1_UART_Init+0x84>)
 800b7fa:	4903      	ldr	r1, [pc, #12]	@ (800b808 <MX_USART1_UART_Init+0x74>)
 800b7fc:	4807      	ldr	r0, [pc, #28]	@ (800b81c <MX_USART1_UART_Init+0x88>)
 800b7fe:	f7fd ffe0 	bl	80097c2 <uart_driver_init>
		  RX_DMA_BUF_SIZE,
		  USART1_TX_CHUNK_SIZE
  );
  /* USER CODE END USART1_Init 2 */

}
 800b802:	bf00      	nop
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	2000560c 	.word	0x2000560c
 800b80c:	40011000 	.word	0x40011000
 800b810:	20005558 	.word	0x20005558
 800b814:	20004d58 	.word	0x20004d58
 800b818:	20004558 	.word	0x20004558
 800b81c:	200055d8 	.word	0x200055d8

0800b820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08a      	sub	sp, #40	@ 0x28
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b828:	f107 0314 	add.w	r3, r7, #20
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	605a      	str	r2, [r3, #4]
 800b832:	609a      	str	r2, [r3, #8]
 800b834:	60da      	str	r2, [r3, #12]
 800b836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a4c      	ldr	r2, [pc, #304]	@ (800b970 <HAL_UART_MspInit+0x150>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	f040 8092 	bne.w	800b968 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b844:	2300      	movs	r3, #0
 800b846:	613b      	str	r3, [r7, #16]
 800b848:	4b4a      	ldr	r3, [pc, #296]	@ (800b974 <HAL_UART_MspInit+0x154>)
 800b84a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b84c:	4a49      	ldr	r2, [pc, #292]	@ (800b974 <HAL_UART_MspInit+0x154>)
 800b84e:	f043 0310 	orr.w	r3, r3, #16
 800b852:	6453      	str	r3, [r2, #68]	@ 0x44
 800b854:	4b47      	ldr	r3, [pc, #284]	@ (800b974 <HAL_UART_MspInit+0x154>)
 800b856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b858:	f003 0310 	and.w	r3, r3, #16
 800b85c:	613b      	str	r3, [r7, #16]
 800b85e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b860:	2300      	movs	r3, #0
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	4b43      	ldr	r3, [pc, #268]	@ (800b974 <HAL_UART_MspInit+0x154>)
 800b866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b868:	4a42      	ldr	r2, [pc, #264]	@ (800b974 <HAL_UART_MspInit+0x154>)
 800b86a:	f043 0301 	orr.w	r3, r3, #1
 800b86e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b870:	4b40      	ldr	r3, [pc, #256]	@ (800b974 <HAL_UART_MspInit+0x154>)
 800b872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b87c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b882:	2302      	movs	r3, #2
 800b884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b886:	2300      	movs	r3, #0
 800b888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b88a:	2303      	movs	r3, #3
 800b88c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b88e:	2307      	movs	r3, #7
 800b890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b892:	f107 0314 	add.w	r3, r7, #20
 800b896:	4619      	mov	r1, r3
 800b898:	4837      	ldr	r0, [pc, #220]	@ (800b978 <HAL_UART_MspInit+0x158>)
 800b89a:	f000 fef5 	bl	800c688 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b89e:	4b37      	ldr	r3, [pc, #220]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8a0:	4a37      	ldr	r2, [pc, #220]	@ (800b980 <HAL_UART_MspInit+0x160>)
 800b8a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b8a4:	4b35      	ldr	r3, [pc, #212]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b8aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8ac:	4b33      	ldr	r3, [pc, #204]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b8b2:	4b32      	ldr	r3, [pc, #200]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b8b8:	4b30      	ldr	r3, [pc, #192]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b8be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8c0:	4b2e      	ldr	r3, [pc, #184]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800b8cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b8d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b8d4:	4b29      	ldr	r3, [pc, #164]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b8da:	4b28      	ldr	r3, [pc, #160]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b8e0:	4826      	ldr	r0, [pc, #152]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8e2:	f000 fa71 	bl	800bdc8 <HAL_DMA_Init>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800b8ec:	f7fe fb7e 	bl	8009fec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a22      	ldr	r2, [pc, #136]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b8f6:	4a21      	ldr	r2, [pc, #132]	@ (800b97c <HAL_UART_MspInit+0x15c>)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800b8fc:	4b21      	ldr	r3, [pc, #132]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b8fe:	4a22      	ldr	r2, [pc, #136]	@ (800b988 <HAL_UART_MspInit+0x168>)
 800b900:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800b902:	4b20      	ldr	r3, [pc, #128]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b904:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b908:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b90a:	4b1e      	ldr	r3, [pc, #120]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b90c:	2240      	movs	r2, #64	@ 0x40
 800b90e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b910:	4b1c      	ldr	r3, [pc, #112]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b912:	2200      	movs	r2, #0
 800b914:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b916:	4b1b      	ldr	r3, [pc, #108]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b91c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b91e:	4b19      	ldr	r3, [pc, #100]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b920:	2200      	movs	r2, #0
 800b922:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b924:	4b17      	ldr	r3, [pc, #92]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b926:	2200      	movs	r2, #0
 800b928:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b92a:	4b16      	ldr	r3, [pc, #88]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b930:	4b14      	ldr	r3, [pc, #80]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b932:	2200      	movs	r2, #0
 800b934:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b936:	4b13      	ldr	r3, [pc, #76]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b938:	2200      	movs	r2, #0
 800b93a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b93c:	4811      	ldr	r0, [pc, #68]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b93e:	f000 fa43 	bl	800bdc8 <HAL_DMA_Init>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800b948:	f7fe fb50 	bl	8009fec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a0d      	ldr	r2, [pc, #52]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b950:	639a      	str	r2, [r3, #56]	@ 0x38
 800b952:	4a0c      	ldr	r2, [pc, #48]	@ (800b984 <HAL_UART_MspInit+0x164>)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b958:	2200      	movs	r2, #0
 800b95a:	2105      	movs	r1, #5
 800b95c:	2025      	movs	r0, #37	@ 0x25
 800b95e:	f000 f9fb 	bl	800bd58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b962:	2025      	movs	r0, #37	@ 0x25
 800b964:	f000 fa14 	bl	800bd90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b968:	bf00      	nop
 800b96a:	3728      	adds	r7, #40	@ 0x28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	40011000 	.word	0x40011000
 800b974:	40023800 	.word	0x40023800
 800b978:	40020000 	.word	0x40020000
 800b97c:	20005654 	.word	0x20005654
 800b980:	40026440 	.word	0x40026440
 800b984:	200056b4 	.word	0x200056b4
 800b988:	400264b8 	.word	0x400264b8

0800b98c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a10      	ldr	r2, [pc, #64]	@ (800b9dc <HAL_UART_MspDeInit+0x50>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d11a      	bne.n	800b9d4 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800b99e:	4b10      	ldr	r3, [pc, #64]	@ (800b9e0 <HAL_UART_MspDeInit+0x54>)
 800b9a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9a2:	4a0f      	ldr	r2, [pc, #60]	@ (800b9e0 <HAL_UART_MspDeInit+0x54>)
 800b9a4:	f023 0310 	bic.w	r3, r3, #16
 800b9a8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800b9aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b9ae:	480d      	ldr	r0, [pc, #52]	@ (800b9e4 <HAL_UART_MspDeInit+0x58>)
 800b9b0:	f001 f806 	bl	800c9c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fab3 	bl	800bf24 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 faae 	bl	800bf24 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800b9c8:	2025      	movs	r0, #37	@ 0x25
 800b9ca:	f000 f9ef 	bl	800bdac <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
    uart_driver_deinit(&usart1_driver);
 800b9ce:	4806      	ldr	r0, [pc, #24]	@ (800b9e8 <HAL_UART_MspDeInit+0x5c>)
 800b9d0:	f7fd ff52 	bl	8009878 <uart_driver_deinit>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	40011000 	.word	0x40011000
 800b9e0:	40023800 	.word	0x40023800
 800b9e4:	40020000 	.word	0x40020000
 800b9e8:	200055d8 	.word	0x200055d8

0800b9ec <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == usart1_driver.uart_handle->Instance)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <HAL_UART_TxCpltCallback+0x28>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d103      	bne.n	800ba0a <HAL_UART_TxCpltCallback+0x1e>
    {
    	TxCpltCallback_routine(&usart1_driver, huart);
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	4803      	ldr	r0, [pc, #12]	@ (800ba14 <HAL_UART_TxCpltCallback+0x28>)
 800ba06:	f7fd fd8e 	bl	8009526 <TxCpltCallback_routine>
    }
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	200055d8 	.word	0x200055d8

0800ba18 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == usart1_driver.uart_handle->Instance)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	4b06      	ldr	r3, [pc, #24]	@ (800ba54 <HAL_UART_IDLECallback+0x28>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d103      	bne.n	800ba4a <HAL_UART_IDLECallback+0x1e>
    {
		IDLECallback_routine(&usart1_driver, huart);
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	4803      	ldr	r0, [pc, #12]	@ (800ba54 <HAL_UART_IDLECallback+0x28>)
 800ba46:	f7fd fdb5 	bl	80095b4 <IDLECallback_routine>
    }
}
 800ba4a:	bf00      	nop
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200055d8 	.word	0x200055d8

0800ba58 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
    HAL_UART_DeInit(huart);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f004 fef7 	bl	8010854 <HAL_UART_DeInit>
    if (huart->Instance == USART1)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a04      	ldr	r2, [pc, #16]	@ (800ba7c <HAL_UART_ErrorCallback+0x24>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d101      	bne.n	800ba74 <HAL_UART_ErrorCallback+0x1c>
    {
    	MX_USART1_UART_Init();
 800ba70:	f7ff fe90 	bl	800b794 <MX_USART1_UART_Init>
    }
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	40011000 	.word	0x40011000

0800ba80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ba80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800bab8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ba84:	f7ff fcf6 	bl	800b474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ba88:	480c      	ldr	r0, [pc, #48]	@ (800babc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ba8a:	490d      	ldr	r1, [pc, #52]	@ (800bac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	@ (800bac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ba8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ba90:	e002      	b.n	800ba98 <LoopCopyDataInit>

0800ba92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ba92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ba94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ba96:	3304      	adds	r3, #4

0800ba98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ba98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ba9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ba9c:	d3f9      	bcc.n	800ba92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ba9e:	4a0a      	ldr	r2, [pc, #40]	@ (800bac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800baa0:	4c0a      	ldr	r4, [pc, #40]	@ (800bacc <LoopFillZerobss+0x22>)
  movs r3, #0
 800baa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800baa4:	e001      	b.n	800baaa <LoopFillZerobss>

0800baa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800baa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800baa8:	3204      	adds	r2, #4

0800baaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800baaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800baac:	d3fb      	bcc.n	800baa6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800baae:	f010 fc13 	bl	801c2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bab2:	f7fe fa01 	bl	8009eb8 <main>
  bx  lr    
 800bab6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800babc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bac0:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 800bac4:	080229a0 	.word	0x080229a0
  ldr r2, =_sbss
 800bac8:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 800bacc:	2000c440 	.word	0x2000c440

0800bad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bad0:	e7fe      	b.n	800bad0 <ADC_IRQHandler>
	...

0800bad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bad8:	4b0e      	ldr	r3, [pc, #56]	@ (800bb14 <HAL_Init+0x40>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a0d      	ldr	r2, [pc, #52]	@ (800bb14 <HAL_Init+0x40>)
 800bade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bae4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb14 <HAL_Init+0x40>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a0a      	ldr	r2, [pc, #40]	@ (800bb14 <HAL_Init+0x40>)
 800baea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800baee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800baf0:	4b08      	ldr	r3, [pc, #32]	@ (800bb14 <HAL_Init+0x40>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a07      	ldr	r2, [pc, #28]	@ (800bb14 <HAL_Init+0x40>)
 800baf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bafa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bafc:	2003      	movs	r0, #3
 800bafe:	f000 f920 	bl	800bd42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bb02:	200f      	movs	r0, #15
 800bb04:	f7ff fb28 	bl	800b158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bb08:	f7ff fafa 	bl	800b100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	40023c00 	.word	0x40023c00

0800bb18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bb1c:	4b06      	ldr	r3, [pc, #24]	@ (800bb38 <HAL_IncTick+0x20>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	461a      	mov	r2, r3
 800bb22:	4b06      	ldr	r3, [pc, #24]	@ (800bb3c <HAL_IncTick+0x24>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4413      	add	r3, r2
 800bb28:	4a04      	ldr	r2, [pc, #16]	@ (800bb3c <HAL_IncTick+0x24>)
 800bb2a:	6013      	str	r3, [r2, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000060 	.word	0x20000060
 800bb3c:	20005714 	.word	0x20005714

0800bb40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  return uwTick;
 800bb44:	4b03      	ldr	r3, [pc, #12]	@ (800bb54 <HAL_GetTick+0x14>)
 800bb46:	681b      	ldr	r3, [r3, #0]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	20005714 	.word	0x20005714

0800bb58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bb60:	f7ff ffee 	bl	800bb40 <HAL_GetTick>
 800bb64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb70:	d005      	beq.n	800bb7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bb72:	4b0a      	ldr	r3, [pc, #40]	@ (800bb9c <HAL_Delay+0x44>)
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bb7e:	bf00      	nop
 800bb80:	f7ff ffde 	bl	800bb40 <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d8f7      	bhi.n	800bb80 <HAL_Delay+0x28>
  {
  }
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000060 	.word	0x20000060

0800bba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f003 0307 	and.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe4 <__NVIC_SetPriorityGrouping+0x44>)
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bbc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bbcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bbd2:	4a04      	ldr	r2, [pc, #16]	@ (800bbe4 <__NVIC_SetPriorityGrouping+0x44>)
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	60d3      	str	r3, [r2, #12]
}
 800bbd8:	bf00      	nop
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	e000ed00 	.word	0xe000ed00

0800bbe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bbec:	4b04      	ldr	r3, [pc, #16]	@ (800bc00 <__NVIC_GetPriorityGrouping+0x18>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	0a1b      	lsrs	r3, r3, #8
 800bbf2:	f003 0307 	and.w	r3, r3, #7
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	e000ed00 	.word	0xe000ed00

0800bc04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	db0b      	blt.n	800bc2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	f003 021f 	and.w	r2, r3, #31
 800bc1c:	4907      	ldr	r1, [pc, #28]	@ (800bc3c <__NVIC_EnableIRQ+0x38>)
 800bc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc22:	095b      	lsrs	r3, r3, #5
 800bc24:	2001      	movs	r0, #1
 800bc26:	fa00 f202 	lsl.w	r2, r0, r2
 800bc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	e000e100 	.word	0xe000e100

0800bc40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	db12      	blt.n	800bc78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	f003 021f 	and.w	r2, r3, #31
 800bc58:	490a      	ldr	r1, [pc, #40]	@ (800bc84 <__NVIC_DisableIRQ+0x44>)
 800bc5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc5e:	095b      	lsrs	r3, r3, #5
 800bc60:	2001      	movs	r0, #1
 800bc62:	fa00 f202 	lsl.w	r2, r0, r2
 800bc66:	3320      	adds	r3, #32
 800bc68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc6c:	f3bf 8f4f 	dsb	sy
}
 800bc70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bc72:	f3bf 8f6f 	isb	sy
}
 800bc76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	e000e100 	.word	0xe000e100

0800bc88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	db0a      	blt.n	800bcb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	490c      	ldr	r1, [pc, #48]	@ (800bcd4 <__NVIC_SetPriority+0x4c>)
 800bca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bca6:	0112      	lsls	r2, r2, #4
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	440b      	add	r3, r1
 800bcac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bcb0:	e00a      	b.n	800bcc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	4908      	ldr	r1, [pc, #32]	@ (800bcd8 <__NVIC_SetPriority+0x50>)
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	3b04      	subs	r3, #4
 800bcc0:	0112      	lsls	r2, r2, #4
 800bcc2:	b2d2      	uxtb	r2, r2
 800bcc4:	440b      	add	r3, r1
 800bcc6:	761a      	strb	r2, [r3, #24]
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	e000e100 	.word	0xe000e100
 800bcd8:	e000ed00 	.word	0xe000ed00

0800bcdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b089      	sub	sp, #36	@ 0x24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f003 0307 	and.w	r3, r3, #7
 800bcee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	f1c3 0307 	rsb	r3, r3, #7
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	bf28      	it	cs
 800bcfa:	2304      	movcs	r3, #4
 800bcfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	3304      	adds	r3, #4
 800bd02:	2b06      	cmp	r3, #6
 800bd04:	d902      	bls.n	800bd0c <NVIC_EncodePriority+0x30>
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	3b03      	subs	r3, #3
 800bd0a:	e000      	b.n	800bd0e <NVIC_EncodePriority+0x32>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1a:	43da      	mvns	r2, r3
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	401a      	ands	r2, r3
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd24:	f04f 31ff 	mov.w	r1, #4294967295
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd2e:	43d9      	mvns	r1, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd34:	4313      	orrs	r3, r2
         );
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3724      	adds	r7, #36	@ 0x24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff ff28 	bl	800bba0 <__NVIC_SetPriorityGrouping>
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bd6a:	f7ff ff3d 	bl	800bbe8 <__NVIC_GetPriorityGrouping>
 800bd6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	6978      	ldr	r0, [r7, #20]
 800bd76:	f7ff ffb1 	bl	800bcdc <NVIC_EncodePriority>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff ff80 	bl	800bc88 <__NVIC_SetPriority>
}
 800bd88:	bf00      	nop
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff ff30 	bl	800bc04 <__NVIC_EnableIRQ>
}
 800bda4:	bf00      	nop
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bdb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff ff40 	bl	800bc40 <__NVIC_DisableIRQ>
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bdd4:	f7ff feb4 	bl	800bb40 <HAL_GetTick>
 800bdd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e099      	b.n	800bf18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2202      	movs	r2, #2
 800bde8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0201 	bic.w	r2, r2, #1
 800be02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800be04:	e00f      	b.n	800be26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800be06:	f7ff fe9b 	bl	800bb40 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b05      	cmp	r3, #5
 800be12:	d908      	bls.n	800be26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2220      	movs	r2, #32
 800be18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2203      	movs	r2, #3
 800be1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e078      	b.n	800bf18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0301 	and.w	r3, r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e8      	bne.n	800be06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	4b38      	ldr	r3, [pc, #224]	@ (800bf20 <HAL_DMA_Init+0x158>)
 800be40:	4013      	ands	r3, r2
 800be42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800be52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	4313      	orrs	r3, r2
 800be76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d107      	bne.n	800be90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be88:	4313      	orrs	r3, r2
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f023 0307 	bic.w	r3, r3, #7
 800bea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	4313      	orrs	r3, r2
 800beb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	d117      	bne.n	800beea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00e      	beq.n	800beea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fb5f 	bl	800c590 <DMA_CheckFifoParam>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d008      	beq.n	800beea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2240      	movs	r2, #64	@ 0x40
 800bedc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800bee6:	2301      	movs	r3, #1
 800bee8:	e016      	b.n	800bf18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fb16 	bl	800c524 <DMA_CalcBaseAndBitshift>
 800bef8:	4603      	mov	r3, r0
 800befa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf00:	223f      	movs	r2, #63	@ 0x3f
 800bf02:	409a      	lsls	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	f010803f 	.word	0xf010803f

0800bf24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e050      	b.n	800bfd8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d101      	bne.n	800bf46 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800bf42:	2302      	movs	r3, #2
 800bf44:	e048      	b.n	800bfd8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f022 0201 	bic.w	r2, r2, #1
 800bf54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2200      	movs	r2, #0
 800bf64:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2200      	movs	r2, #0
 800bf74:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2221      	movs	r2, #33	@ 0x21
 800bf84:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 facc 	bl	800c524 <DMA_CalcBaseAndBitshift>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfb8:	223f      	movs	r2, #63	@ 0x3f
 800bfba:	409a      	lsls	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d101      	bne.n	800c006 <HAL_DMA_Start_IT+0x26>
 800c002:	2302      	movs	r3, #2
 800c004:	e040      	b.n	800c088 <HAL_DMA_Start_IT+0xa8>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b01      	cmp	r3, #1
 800c018:	d12f      	bne.n	800c07a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2202      	movs	r2, #2
 800c01e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	68b9      	ldr	r1, [r7, #8]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f000 fa4a 	bl	800c4c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c038:	223f      	movs	r2, #63	@ 0x3f
 800c03a:	409a      	lsls	r2, r3
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f042 0216 	orr.w	r2, r2, #22
 800c04e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d007      	beq.n	800c068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f042 0208 	orr.w	r2, r2, #8
 800c066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f042 0201 	orr.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e005      	b.n	800c086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c082:	2302      	movs	r3, #2
 800c084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c086:	7dfb      	ldrb	r3, [r7, #23]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c09c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c09e:	f7ff fd4f 	bl	800bb40 <HAL_GetTick>
 800c0a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d008      	beq.n	800c0c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2280      	movs	r2, #128	@ 0x80
 800c0b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e052      	b.n	800c168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f022 0216 	bic.w	r2, r2, #22
 800c0d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	695a      	ldr	r2, [r3, #20]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <HAL_DMA_Abort+0x62>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d007      	beq.n	800c102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 0208 	bic.w	r2, r2, #8
 800c100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f022 0201 	bic.w	r2, r2, #1
 800c110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c112:	e013      	b.n	800c13c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c114:	f7ff fd14 	bl	800bb40 <HAL_GetTick>
 800c118:	4602      	mov	r2, r0
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	2b05      	cmp	r3, #5
 800c120:	d90c      	bls.n	800c13c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2203      	movs	r2, #3
 800c12c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e015      	b.n	800c168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e4      	bne.n	800c114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c14e:	223f      	movs	r2, #63	@ 0x3f
 800c150:	409a      	lsls	r2, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d004      	beq.n	800c18e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2280      	movs	r2, #128	@ 0x80
 800c188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e00c      	b.n	800c1a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2205      	movs	r2, #5
 800c192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f022 0201 	bic.w	r2, r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c1c0:	4b8e      	ldr	r3, [pc, #568]	@ (800c3fc <HAL_DMA_IRQHandler+0x248>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a8e      	ldr	r2, [pc, #568]	@ (800c400 <HAL_DMA_IRQHandler+0x24c>)
 800c1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ca:	0a9b      	lsrs	r3, r3, #10
 800c1cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1de:	2208      	movs	r2, #8
 800c1e0:	409a      	lsls	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01a      	beq.n	800c220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d013      	beq.n	800c220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f022 0204 	bic.w	r2, r2, #4
 800c206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c20c:	2208      	movs	r2, #8
 800c20e:	409a      	lsls	r2, r3
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c218:	f043 0201 	orr.w	r2, r3, #1
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c224:	2201      	movs	r2, #1
 800c226:	409a      	lsls	r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4013      	ands	r3, r2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d012      	beq.n	800c256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00b      	beq.n	800c256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c242:	2201      	movs	r2, #1
 800c244:	409a      	lsls	r2, r3
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c24e:	f043 0202 	orr.w	r2, r3, #2
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c25a:	2204      	movs	r2, #4
 800c25c:	409a      	lsls	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	4013      	ands	r3, r2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d012      	beq.n	800c28c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 0302 	and.w	r3, r3, #2
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c278:	2204      	movs	r2, #4
 800c27a:	409a      	lsls	r2, r3
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c284:	f043 0204 	orr.w	r2, r3, #4
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c290:	2210      	movs	r2, #16
 800c292:	409a      	lsls	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4013      	ands	r3, r2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d043      	beq.n	800c324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 0308 	and.w	r3, r3, #8
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d03c      	beq.n	800c324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	409a      	lsls	r2, r3
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d018      	beq.n	800c2f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d108      	bne.n	800c2e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d024      	beq.n	800c324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	4798      	blx	r3
 800c2e2:	e01f      	b.n	800c324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01b      	beq.n	800c324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	4798      	blx	r3
 800c2f4:	e016      	b.n	800c324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c300:	2b00      	cmp	r3, #0
 800c302:	d107      	bne.n	800c314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f022 0208 	bic.w	r2, r2, #8
 800c312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c328:	2220      	movs	r2, #32
 800c32a:	409a      	lsls	r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4013      	ands	r3, r2
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 808f 	beq.w	800c454 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 0310 	and.w	r3, r3, #16
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 8087 	beq.w	800c454 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c34a:	2220      	movs	r2, #32
 800c34c:	409a      	lsls	r2, r3
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	d136      	bne.n	800c3cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 0216 	bic.w	r2, r2, #22
 800c36c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	695a      	ldr	r2, [r3, #20]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c37c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d103      	bne.n	800c38e <HAL_DMA_IRQHandler+0x1da>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d007      	beq.n	800c39e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f022 0208 	bic.w	r2, r2, #8
 800c39c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3a2:	223f      	movs	r2, #63	@ 0x3f
 800c3a4:	409a      	lsls	r2, r3
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d07e      	beq.n	800c4c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
        }
        return;
 800c3ca:	e079      	b.n	800c4c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01d      	beq.n	800c416 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10d      	bne.n	800c404 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d031      	beq.n	800c454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	4798      	blx	r3
 800c3f8:	e02c      	b.n	800c454 <HAL_DMA_IRQHandler+0x2a0>
 800c3fa:	bf00      	nop
 800c3fc:	20000058 	.word	0x20000058
 800c400:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d023      	beq.n	800c454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	4798      	blx	r3
 800c414:	e01e      	b.n	800c454 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10f      	bne.n	800c444 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0210 	bic.w	r2, r2, #16
 800c432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d032      	beq.n	800c4c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c460:	f003 0301 	and.w	r3, r3, #1
 800c464:	2b00      	cmp	r3, #0
 800c466:	d022      	beq.n	800c4ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2205      	movs	r2, #5
 800c46c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 0201 	bic.w	r2, r2, #1
 800c47e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	3301      	adds	r3, #1
 800c484:	60bb      	str	r3, [r7, #8]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d307      	bcc.n	800c49c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1f2      	bne.n	800c480 <HAL_DMA_IRQHandler+0x2cc>
 800c49a:	e000      	b.n	800c49e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c49c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d005      	beq.n	800c4c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	4798      	blx	r3
 800c4be:	e000      	b.n	800c4c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800c4c0:	bf00      	nop
    }
  }
}
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c4e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	2b40      	cmp	r3, #64	@ 0x40
 800c4f4:	d108      	bne.n	800c508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c506:	e007      	b.n	800c518 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	60da      	str	r2, [r3, #12]
}
 800c518:	bf00      	nop
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	3b10      	subs	r3, #16
 800c534:	4a14      	ldr	r2, [pc, #80]	@ (800c588 <DMA_CalcBaseAndBitshift+0x64>)
 800c536:	fba2 2303 	umull	r2, r3, r2, r3
 800c53a:	091b      	lsrs	r3, r3, #4
 800c53c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c53e:	4a13      	ldr	r2, [pc, #76]	@ (800c58c <DMA_CalcBaseAndBitshift+0x68>)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d909      	bls.n	800c566 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800c55a:	f023 0303 	bic.w	r3, r3, #3
 800c55e:	1d1a      	adds	r2, r3, #4
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	659a      	str	r2, [r3, #88]	@ 0x58
 800c564:	e007      	b.n	800c576 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800c56e:	f023 0303 	bic.w	r3, r3, #3
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	aaaaaaab 	.word	0xaaaaaaab
 800c58c:	08022124 	.word	0x08022124

0800c590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d11f      	bne.n	800c5ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d856      	bhi.n	800c65e <DMA_CheckFifoParam+0xce>
 800c5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b8 <DMA_CheckFifoParam+0x28>)
 800c5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b6:	bf00      	nop
 800c5b8:	0800c5c9 	.word	0x0800c5c9
 800c5bc:	0800c5db 	.word	0x0800c5db
 800c5c0:	0800c5c9 	.word	0x0800c5c9
 800c5c4:	0800c65f 	.word	0x0800c65f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d046      	beq.n	800c662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5d8:	e043      	b.n	800c662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c5e2:	d140      	bne.n	800c666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5e8:	e03d      	b.n	800c666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f2:	d121      	bne.n	800c638 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	d837      	bhi.n	800c66a <DMA_CheckFifoParam+0xda>
 800c5fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c600 <DMA_CheckFifoParam+0x70>)
 800c5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c600:	0800c611 	.word	0x0800c611
 800c604:	0800c617 	.word	0x0800c617
 800c608:	0800c611 	.word	0x0800c611
 800c60c:	0800c629 	.word	0x0800c629
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	73fb      	strb	r3, [r7, #15]
      break;
 800c614:	e030      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d025      	beq.n	800c66e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c626:	e022      	b.n	800c66e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c630:	d11f      	bne.n	800c672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c636:	e01c      	b.n	800c672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d903      	bls.n	800c646 <DMA_CheckFifoParam+0xb6>
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b03      	cmp	r3, #3
 800c642:	d003      	beq.n	800c64c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c644:	e018      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	73fb      	strb	r3, [r7, #15]
      break;
 800c64a:	e015      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00e      	beq.n	800c676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	73fb      	strb	r3, [r7, #15]
      break;
 800c65c:	e00b      	b.n	800c676 <DMA_CheckFifoParam+0xe6>
      break;
 800c65e:	bf00      	nop
 800c660:	e00a      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      break;
 800c662:	bf00      	nop
 800c664:	e008      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      break;
 800c666:	bf00      	nop
 800c668:	e006      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      break;
 800c66a:	bf00      	nop
 800c66c:	e004      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      break;
 800c66e:	bf00      	nop
 800c670:	e002      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      break;   
 800c672:	bf00      	nop
 800c674:	e000      	b.n	800c678 <DMA_CheckFifoParam+0xe8>
      break;
 800c676:	bf00      	nop
    }
  } 
  
  return status; 
 800c678:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3714      	adds	r7, #20
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop

0800c688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c688:	b480      	push	{r7}
 800c68a:	b089      	sub	sp, #36	@ 0x24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c696:	2300      	movs	r3, #0
 800c698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e16b      	b.n	800c97c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	697a      	ldr	r2, [r7, #20]
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	f040 815a 	bne.w	800c976 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f003 0303 	and.w	r3, r3, #3
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d005      	beq.n	800c6da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d130      	bne.n	800c73c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	2203      	movs	r2, #3
 800c6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ea:	43db      	mvns	r3, r3
 800c6ec:	69ba      	ldr	r2, [r7, #24]
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	4313      	orrs	r3, r2
 800c702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c710:	2201      	movs	r2, #1
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	43db      	mvns	r3, r3
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	4013      	ands	r3, r2
 800c71e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	091b      	lsrs	r3, r3, #4
 800c726:	f003 0201 	and.w	r2, r3, #1
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	fa02 f303 	lsl.w	r3, r2, r3
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	4313      	orrs	r3, r2
 800c734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	69ba      	ldr	r2, [r7, #24]
 800c73a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	2b03      	cmp	r3, #3
 800c746:	d017      	beq.n	800c778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	2203      	movs	r2, #3
 800c754:	fa02 f303 	lsl.w	r3, r2, r3
 800c758:	43db      	mvns	r3, r3
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	4013      	ands	r3, r2
 800c75e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	689a      	ldr	r2, [r3, #8]
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	fa02 f303 	lsl.w	r3, r2, r3
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	4313      	orrs	r3, r2
 800c770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	69ba      	ldr	r2, [r7, #24]
 800c776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	f003 0303 	and.w	r3, r3, #3
 800c780:	2b02      	cmp	r3, #2
 800c782:	d123      	bne.n	800c7cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	08da      	lsrs	r2, r3, #3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3208      	adds	r2, #8
 800c78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	f003 0307 	and.w	r3, r3, #7
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	220f      	movs	r2, #15
 800c79c:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a0:	43db      	mvns	r3, r3
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	691a      	ldr	r2, [r3, #16]
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	08da      	lsrs	r2, r3, #3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3208      	adds	r2, #8
 800c7c6:	69b9      	ldr	r1, [r7, #24]
 800c7c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7dc:	43db      	mvns	r3, r3
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f003 0203 	and.w	r2, r3, #3
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	69ba      	ldr	r2, [r7, #24]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	69ba      	ldr	r2, [r7, #24]
 800c7fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 80b4 	beq.w	800c976 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c80e:	2300      	movs	r3, #0
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	4b60      	ldr	r3, [pc, #384]	@ (800c994 <HAL_GPIO_Init+0x30c>)
 800c814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c816:	4a5f      	ldr	r2, [pc, #380]	@ (800c994 <HAL_GPIO_Init+0x30c>)
 800c818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c81c:	6453      	str	r3, [r2, #68]	@ 0x44
 800c81e:	4b5d      	ldr	r3, [pc, #372]	@ (800c994 <HAL_GPIO_Init+0x30c>)
 800c820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c82a:	4a5b      	ldr	r2, [pc, #364]	@ (800c998 <HAL_GPIO_Init+0x310>)
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	089b      	lsrs	r3, r3, #2
 800c830:	3302      	adds	r3, #2
 800c832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	f003 0303 	and.w	r3, r3, #3
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	220f      	movs	r2, #15
 800c842:	fa02 f303 	lsl.w	r3, r2, r3
 800c846:	43db      	mvns	r3, r3
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	4013      	ands	r3, r2
 800c84c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a52      	ldr	r2, [pc, #328]	@ (800c99c <HAL_GPIO_Init+0x314>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d02b      	beq.n	800c8ae <HAL_GPIO_Init+0x226>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a51      	ldr	r2, [pc, #324]	@ (800c9a0 <HAL_GPIO_Init+0x318>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d025      	beq.n	800c8aa <HAL_GPIO_Init+0x222>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a50      	ldr	r2, [pc, #320]	@ (800c9a4 <HAL_GPIO_Init+0x31c>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d01f      	beq.n	800c8a6 <HAL_GPIO_Init+0x21e>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a4f      	ldr	r2, [pc, #316]	@ (800c9a8 <HAL_GPIO_Init+0x320>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d019      	beq.n	800c8a2 <HAL_GPIO_Init+0x21a>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a4e      	ldr	r2, [pc, #312]	@ (800c9ac <HAL_GPIO_Init+0x324>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d013      	beq.n	800c89e <HAL_GPIO_Init+0x216>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a4d      	ldr	r2, [pc, #308]	@ (800c9b0 <HAL_GPIO_Init+0x328>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00d      	beq.n	800c89a <HAL_GPIO_Init+0x212>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a4c      	ldr	r2, [pc, #304]	@ (800c9b4 <HAL_GPIO_Init+0x32c>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d007      	beq.n	800c896 <HAL_GPIO_Init+0x20e>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a4b      	ldr	r2, [pc, #300]	@ (800c9b8 <HAL_GPIO_Init+0x330>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d101      	bne.n	800c892 <HAL_GPIO_Init+0x20a>
 800c88e:	2307      	movs	r3, #7
 800c890:	e00e      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c892:	2308      	movs	r3, #8
 800c894:	e00c      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c896:	2306      	movs	r3, #6
 800c898:	e00a      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c89a:	2305      	movs	r3, #5
 800c89c:	e008      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c89e:	2304      	movs	r3, #4
 800c8a0:	e006      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e004      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	e002      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <HAL_GPIO_Init+0x228>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	69fa      	ldr	r2, [r7, #28]
 800c8b2:	f002 0203 	and.w	r2, r2, #3
 800c8b6:	0092      	lsls	r2, r2, #2
 800c8b8:	4093      	lsls	r3, r2
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c8c0:	4935      	ldr	r1, [pc, #212]	@ (800c998 <HAL_GPIO_Init+0x310>)
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	089b      	lsrs	r3, r3, #2
 800c8c6:	3302      	adds	r3, #2
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	43db      	mvns	r3, r3
 800c8d8:	69ba      	ldr	r2, [r7, #24]
 800c8da:	4013      	ands	r3, r2
 800c8dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c8f2:	4a32      	ldr	r2, [pc, #200]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c8f8:	4b30      	ldr	r3, [pc, #192]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	43db      	mvns	r3, r3
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	4013      	ands	r3, r2
 800c906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c914:	69ba      	ldr	r2, [r7, #24]
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	4313      	orrs	r3, r2
 800c91a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c91c:	4a27      	ldr	r2, [pc, #156]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c922:	4b26      	ldr	r3, [pc, #152]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	43db      	mvns	r3, r3
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	4013      	ands	r3, r2
 800c930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c93e:	69ba      	ldr	r2, [r7, #24]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	4313      	orrs	r3, r2
 800c944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c946:	4a1d      	ldr	r2, [pc, #116]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c94c:	4b1b      	ldr	r3, [pc, #108]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	43db      	mvns	r3, r3
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	4013      	ands	r3, r2
 800c95a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c968:	69ba      	ldr	r2, [r7, #24]
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c970:	4a12      	ldr	r2, [pc, #72]	@ (800c9bc <HAL_GPIO_Init+0x334>)
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	3301      	adds	r3, #1
 800c97a:	61fb      	str	r3, [r7, #28]
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b0f      	cmp	r3, #15
 800c980:	f67f ae90 	bls.w	800c6a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop
 800c988:	3724      	adds	r7, #36	@ 0x24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	40023800 	.word	0x40023800
 800c998:	40013800 	.word	0x40013800
 800c99c:	40020000 	.word	0x40020000
 800c9a0:	40020400 	.word	0x40020400
 800c9a4:	40020800 	.word	0x40020800
 800c9a8:	40020c00 	.word	0x40020c00
 800c9ac:	40021000 	.word	0x40021000
 800c9b0:	40021400 	.word	0x40021400
 800c9b4:	40021800 	.word	0x40021800
 800c9b8:	40021c00 	.word	0x40021c00
 800c9bc:	40013c00 	.word	0x40013c00

0800c9c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	617b      	str	r3, [r7, #20]
 800c9da:	e0cd      	b.n	800cb78 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c9dc:	2201      	movs	r2, #1
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	f040 80bd 	bne.w	800cb72 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c9f8:	4a65      	ldr	r2, [pc, #404]	@ (800cb90 <HAL_GPIO_DeInit+0x1d0>)
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	089b      	lsrs	r3, r3, #2
 800c9fe:	3302      	adds	r3, #2
 800ca00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca04:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f003 0303 	and.w	r3, r3, #3
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	220f      	movs	r2, #15
 800ca10:	fa02 f303 	lsl.w	r3, r2, r3
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	4013      	ands	r3, r2
 800ca18:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a5d      	ldr	r2, [pc, #372]	@ (800cb94 <HAL_GPIO_DeInit+0x1d4>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d02b      	beq.n	800ca7a <HAL_GPIO_DeInit+0xba>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a5c      	ldr	r2, [pc, #368]	@ (800cb98 <HAL_GPIO_DeInit+0x1d8>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d025      	beq.n	800ca76 <HAL_GPIO_DeInit+0xb6>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a5b      	ldr	r2, [pc, #364]	@ (800cb9c <HAL_GPIO_DeInit+0x1dc>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d01f      	beq.n	800ca72 <HAL_GPIO_DeInit+0xb2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a5a      	ldr	r2, [pc, #360]	@ (800cba0 <HAL_GPIO_DeInit+0x1e0>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d019      	beq.n	800ca6e <HAL_GPIO_DeInit+0xae>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a59      	ldr	r2, [pc, #356]	@ (800cba4 <HAL_GPIO_DeInit+0x1e4>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d013      	beq.n	800ca6a <HAL_GPIO_DeInit+0xaa>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a58      	ldr	r2, [pc, #352]	@ (800cba8 <HAL_GPIO_DeInit+0x1e8>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d00d      	beq.n	800ca66 <HAL_GPIO_DeInit+0xa6>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a57      	ldr	r2, [pc, #348]	@ (800cbac <HAL_GPIO_DeInit+0x1ec>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d007      	beq.n	800ca62 <HAL_GPIO_DeInit+0xa2>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a56      	ldr	r2, [pc, #344]	@ (800cbb0 <HAL_GPIO_DeInit+0x1f0>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d101      	bne.n	800ca5e <HAL_GPIO_DeInit+0x9e>
 800ca5a:	2307      	movs	r3, #7
 800ca5c:	e00e      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca5e:	2308      	movs	r3, #8
 800ca60:	e00c      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca62:	2306      	movs	r3, #6
 800ca64:	e00a      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca66:	2305      	movs	r3, #5
 800ca68:	e008      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca6a:	2304      	movs	r3, #4
 800ca6c:	e006      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca6e:	2303      	movs	r3, #3
 800ca70:	e004      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca72:	2302      	movs	r3, #2
 800ca74:	e002      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e000      	b.n	800ca7c <HAL_GPIO_DeInit+0xbc>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	f002 0203 	and.w	r2, r2, #3
 800ca82:	0092      	lsls	r2, r2, #2
 800ca84:	4093      	lsls	r3, r2
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d132      	bne.n	800caf2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ca8c:	4b49      	ldr	r3, [pc, #292]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	43db      	mvns	r3, r3
 800ca94:	4947      	ldr	r1, [pc, #284]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800ca96:	4013      	ands	r3, r2
 800ca98:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ca9a:	4b46      	ldr	r3, [pc, #280]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	43db      	mvns	r3, r3
 800caa2:	4944      	ldr	r1, [pc, #272]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800caa4:	4013      	ands	r3, r2
 800caa6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800caa8:	4b42      	ldr	r3, [pc, #264]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	43db      	mvns	r3, r3
 800cab0:	4940      	ldr	r1, [pc, #256]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800cab2:	4013      	ands	r3, r2
 800cab4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cab6:	4b3f      	ldr	r3, [pc, #252]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	43db      	mvns	r3, r3
 800cabe:	493d      	ldr	r1, [pc, #244]	@ (800cbb4 <HAL_GPIO_DeInit+0x1f4>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f003 0303 	and.w	r3, r3, #3
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	220f      	movs	r2, #15
 800cace:	fa02 f303 	lsl.w	r3, r2, r3
 800cad2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cad4:	4a2e      	ldr	r2, [pc, #184]	@ (800cb90 <HAL_GPIO_DeInit+0x1d0>)
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	089b      	lsrs	r3, r3, #2
 800cada:	3302      	adds	r3, #2
 800cadc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	43da      	mvns	r2, r3
 800cae4:	482a      	ldr	r0, [pc, #168]	@ (800cb90 <HAL_GPIO_DeInit+0x1d0>)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	089b      	lsrs	r3, r3, #2
 800caea:	400a      	ands	r2, r1
 800caec:	3302      	adds	r3, #2
 800caee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	2103      	movs	r1, #3
 800cafc:	fa01 f303 	lsl.w	r3, r1, r3
 800cb00:	43db      	mvns	r3, r3
 800cb02:	401a      	ands	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	08da      	lsrs	r2, r3, #3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3208      	adds	r2, #8
 800cb10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f003 0307 	and.w	r3, r3, #7
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	220f      	movs	r2, #15
 800cb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb22:	43db      	mvns	r3, r3
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	08d2      	lsrs	r2, r2, #3
 800cb28:	4019      	ands	r1, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	3208      	adds	r2, #8
 800cb2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68da      	ldr	r2, [r3, #12]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	2103      	movs	r1, #3
 800cb3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb40:	43db      	mvns	r3, r3
 800cb42:	401a      	ands	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	fa01 f303 	lsl.w	r3, r1, r3
 800cb54:	43db      	mvns	r3, r3
 800cb56:	401a      	ands	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689a      	ldr	r2, [r3, #8]
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	2103      	movs	r1, #3
 800cb66:	fa01 f303 	lsl.w	r3, r1, r3
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	401a      	ands	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	3301      	adds	r3, #1
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b0f      	cmp	r3, #15
 800cb7c:	f67f af2e 	bls.w	800c9dc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	40013800 	.word	0x40013800
 800cb94:	40020000 	.word	0x40020000
 800cb98:	40020400 	.word	0x40020400
 800cb9c:	40020800 	.word	0x40020800
 800cba0:	40020c00 	.word	0x40020c00
 800cba4:	40021000 	.word	0x40021000
 800cba8:	40021400 	.word	0x40021400
 800cbac:	40021800 	.word	0x40021800
 800cbb0:	40021c00 	.word	0x40021c00
 800cbb4:	40013c00 	.word	0x40013c00

0800cbb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	807b      	strh	r3, [r7, #2]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cbc8:	787b      	ldrb	r3, [r7, #1]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cbce:	887a      	ldrh	r2, [r7, #2]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cbd4:	e003      	b.n	800cbde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cbd6:	887b      	ldrh	r3, [r7, #2]
 800cbd8:	041a      	lsls	r2, r3, #16
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	619a      	str	r2, [r3, #24]
}
 800cbde:	bf00      	nop
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b086      	sub	sp, #24
 800cbee:	af02      	add	r7, sp, #8
 800cbf0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e101      	b.n	800ce00 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f00b fff8 	bl	8018c0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2203      	movs	r2, #3
 800cc20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc2a:	d102      	bne.n	800cc32 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f005 f8cb 	bl	8011dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6818      	ldr	r0, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7c1a      	ldrb	r2, [r3, #16]
 800cc44:	f88d 2000 	strb.w	r2, [sp]
 800cc48:	3304      	adds	r3, #4
 800cc4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc4c:	f004 ffaa 	bl	8011ba4 <USB_CoreInit>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d005      	beq.n	800cc62 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2202      	movs	r2, #2
 800cc5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e0ce      	b.n	800ce00 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2100      	movs	r1, #0
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f005 f8c3 	bl	8011df4 <USB_SetCurrentMode>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d005      	beq.n	800cc80 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2202      	movs	r2, #2
 800cc78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e0bf      	b.n	800ce00 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
 800cc84:	e04a      	b.n	800cd1c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cc86:	7bfa      	ldrb	r2, [r7, #15]
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	440b      	add	r3, r1
 800cc94:	3315      	adds	r3, #21
 800cc96:	2201      	movs	r2, #1
 800cc98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cc9a:	7bfa      	ldrb	r2, [r7, #15]
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	4413      	add	r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	440b      	add	r3, r1
 800cca8:	3314      	adds	r3, #20
 800ccaa:	7bfa      	ldrb	r2, [r7, #15]
 800ccac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ccae:	7bfa      	ldrb	r2, [r7, #15]
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	b298      	uxth	r0, r3
 800ccb4:	6879      	ldr	r1, [r7, #4]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	4413      	add	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	440b      	add	r3, r1
 800ccc0:	332e      	adds	r3, #46	@ 0x2e
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ccc6:	7bfa      	ldrb	r2, [r7, #15]
 800ccc8:	6879      	ldr	r1, [r7, #4]
 800ccca:	4613      	mov	r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	440b      	add	r3, r1
 800ccd4:	3318      	adds	r3, #24
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ccda:	7bfa      	ldrb	r2, [r7, #15]
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	331c      	adds	r3, #28
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ccee:	7bfa      	ldrb	r2, [r7, #15]
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	00db      	lsls	r3, r3, #3
 800ccf6:	4413      	add	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	440b      	add	r3, r1
 800ccfc:	3320      	adds	r3, #32
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cd02:	7bfa      	ldrb	r2, [r7, #15]
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	4613      	mov	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	440b      	add	r3, r1
 800cd10:	3324      	adds	r3, #36	@ 0x24
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	791b      	ldrb	r3, [r3, #4]
 800cd20:	7bfa      	ldrb	r2, [r7, #15]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d3af      	bcc.n	800cc86 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd26:	2300      	movs	r3, #0
 800cd28:	73fb      	strb	r3, [r7, #15]
 800cd2a:	e044      	b.n	800cdb6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cd2c:	7bfa      	ldrb	r2, [r7, #15]
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4613      	mov	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	4413      	add	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	440b      	add	r3, r1
 800cd3a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800cd3e:	2200      	movs	r2, #0
 800cd40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cd42:	7bfa      	ldrb	r2, [r7, #15]
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	4613      	mov	r3, r2
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	440b      	add	r3, r1
 800cd50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800cd54:	7bfa      	ldrb	r2, [r7, #15]
 800cd56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cd58:	7bfa      	ldrb	r2, [r7, #15]
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	4413      	add	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	440b      	add	r3, r1
 800cd66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cd6e:	7bfa      	ldrb	r2, [r7, #15]
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	4613      	mov	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	440b      	add	r3, r1
 800cd7c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cd84:	7bfa      	ldrb	r2, [r7, #15]
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	4413      	add	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	440b      	add	r3, r1
 800cd92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cd96:	2200      	movs	r2, #0
 800cd98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cd9a:	7bfa      	ldrb	r2, [r7, #15]
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cdac:	2200      	movs	r2, #0
 800cdae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	73fb      	strb	r3, [r7, #15]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	791b      	ldrb	r3, [r3, #4]
 800cdba:	7bfa      	ldrb	r2, [r7, #15]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d3b5      	bcc.n	800cd2c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	7c1a      	ldrb	r2, [r3, #16]
 800cdc8:	f88d 2000 	strb.w	r2, [sp]
 800cdcc:	3304      	adds	r3, #4
 800cdce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdd0:	f005 f85c 	bl	8011e8c <USB_DevInit>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d005      	beq.n	800cde6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2202      	movs	r2, #2
 800cdde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e00c      	b.n	800ce00 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f006 f8a6 	bl	8012f4a <USB_DevDisconnect>

  return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3710      	adds	r7, #16
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d101      	bne.n	800ce24 <HAL_PCD_Start+0x1c>
 800ce20:	2302      	movs	r3, #2
 800ce22:	e022      	b.n	800ce6a <HAL_PCD_Start+0x62>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d009      	beq.n	800ce4c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d105      	bne.n	800ce4c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f004 ffad 	bl	8011db0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f006 f854 	bl	8012f08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ce72:	b590      	push	{r4, r7, lr}
 800ce74:	b08d      	sub	sp, #52	@ 0x34
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce80:	6a3b      	ldr	r3, [r7, #32]
 800ce82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f006 f912 	bl	80130b2 <USB_GetMode>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f040 848c 	bne.w	800d7ae <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f006 f876 	bl	8012f8c <USB_ReadInterrupts>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 8482 	beq.w	800d7ac <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	0a1b      	lsrs	r3, r3, #8
 800ceb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f006 f863 	bl	8012f8c <USB_ReadInterrupts>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f003 0302 	and.w	r3, r3, #2
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d107      	bne.n	800cee0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	695a      	ldr	r2, [r3, #20]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f002 0202 	and.w	r2, r2, #2
 800cede:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f006 f851 	bl	8012f8c <USB_ReadInterrupts>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f003 0310 	and.w	r3, r3, #16
 800cef0:	2b10      	cmp	r3, #16
 800cef2:	d161      	bne.n	800cfb8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0210 	bic.w	r2, r2, #16
 800cf02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	6a1b      	ldr	r3, [r3, #32]
 800cf08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	f003 020f 	and.w	r2, r3, #15
 800cf10:	4613      	mov	r3, r2
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	4413      	add	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	4413      	add	r3, r2
 800cf20:	3304      	adds	r3, #4
 800cf22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800cf2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf2e:	d124      	bne.n	800cf7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800cf30:	69ba      	ldr	r2, [r7, #24]
 800cf32:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800cf36:	4013      	ands	r3, r2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d035      	beq.n	800cfa8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	091b      	lsrs	r3, r3, #4
 800cf44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cf46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	6a38      	ldr	r0, [r7, #32]
 800cf50:	f005 fe88 	bl	8012c64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	68da      	ldr	r2, [r3, #12]
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	091b      	lsrs	r3, r3, #4
 800cf5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf60:	441a      	add	r2, r3
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	695a      	ldr	r2, [r3, #20]
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	091b      	lsrs	r3, r3, #4
 800cf6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf72:	441a      	add	r2, r3
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	615a      	str	r2, [r3, #20]
 800cf78:	e016      	b.n	800cfa8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800cf80:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cf84:	d110      	bne.n	800cfa8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6a38      	ldr	r0, [r7, #32]
 800cf92:	f005 fe67 	bl	8012c64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	695a      	ldr	r2, [r3, #20]
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	091b      	lsrs	r3, r3, #4
 800cf9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfa2:	441a      	add	r2, r3
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	699a      	ldr	r2, [r3, #24]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f042 0210 	orr.w	r2, r2, #16
 800cfb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f005 ffe5 	bl	8012f8c <USB_ReadInterrupts>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cfc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cfcc:	f040 80a7 	bne.w	800d11e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f005 ffea 	bl	8012fb2 <USB_ReadDevAllOutEpInterrupt>
 800cfde:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800cfe0:	e099      	b.n	800d116 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 808e 	beq.w	800d10a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff4:	b2d2      	uxtb	r2, r2
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f006 f80e 	bl	801301a <USB_ReadDevOutEPInterrupt>
 800cffe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00c      	beq.n	800d024 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	4413      	add	r3, r2
 800d012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d016:	461a      	mov	r2, r3
 800d018:	2301      	movs	r3, #1
 800d01a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d01c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fea4 	bl	800dd6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	f003 0308 	and.w	r3, r3, #8
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00c      	beq.n	800d048 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d030:	015a      	lsls	r2, r3, #5
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	4413      	add	r3, r2
 800d036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d03a:	461a      	mov	r2, r3
 800d03c:	2308      	movs	r3, #8
 800d03e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 ff7a 	bl	800df3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f003 0310 	and.w	r3, r3, #16
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d008      	beq.n	800d064 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d054:	015a      	lsls	r2, r3, #5
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	4413      	add	r3, r2
 800d05a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d05e:	461a      	mov	r2, r3
 800d060:	2310      	movs	r3, #16
 800d062:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d030      	beq.n	800d0d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d076:	2b80      	cmp	r3, #128	@ 0x80
 800d078:	d109      	bne.n	800d08e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	69fa      	ldr	r2, [r7, #28]
 800d084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d088:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d08c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d090:	4613      	mov	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4413      	add	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	4413      	add	r3, r2
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	78db      	ldrb	r3, [r3, #3]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d108      	bne.n	800d0be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f00b fead 	bl	8018e18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	2302      	movs	r3, #2
 800d0ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f003 0320 	and.w	r3, r3, #32
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d008      	beq.n	800d0ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	2320      	movs	r3, #32
 800d0ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d009      	beq.n	800d10a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d102:	461a      	mov	r2, r3
 800d104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d108:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	3301      	adds	r3, #1
 800d10e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d112:	085b      	lsrs	r3, r3, #1
 800d114:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f47f af62 	bne.w	800cfe2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4618      	mov	r0, r3
 800d124:	f005 ff32 	bl	8012f8c <USB_ReadInterrupts>
 800d128:	4603      	mov	r3, r0
 800d12a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d12e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d132:	f040 80db 	bne.w	800d2ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f005 ff53 	bl	8012fe6 <USB_ReadDevAllInEpInterrupt>
 800d140:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d146:	e0cd      	b.n	800d2e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 80c2 	beq.w	800d2d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d15a:	b2d2      	uxtb	r2, r2
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f005 ff79 	bl	8013056 <USB_ReadDevInEPInterrupt>
 800d164:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	f003 0301 	and.w	r3, r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d057      	beq.n	800d220 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	f003 030f 	and.w	r3, r3, #15
 800d176:	2201      	movs	r2, #1
 800d178:	fa02 f303 	lsl.w	r3, r2, r3
 800d17c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	43db      	mvns	r3, r3
 800d18a:	69f9      	ldr	r1, [r7, #28]
 800d18c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d190:	4013      	ands	r3, r2
 800d192:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d196:	015a      	lsls	r2, r3, #5
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	4413      	add	r3, r2
 800d19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	799b      	ldrb	r3, [r3, #6]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d132      	bne.n	800d214 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d1ae:	6879      	ldr	r1, [r7, #4]
 800d1b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3320      	adds	r3, #32
 800d1be:	6819      	ldr	r1, [r3, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4403      	add	r3, r0
 800d1ce:	331c      	adds	r3, #28
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4419      	add	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1d8:	4613      	mov	r3, r2
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	4413      	add	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4403      	add	r3, r0
 800d1e2:	3320      	adds	r3, #32
 800d1e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d113      	bne.n	800d214 <HAL_PCD_IRQHandler+0x3a2>
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3324      	adds	r3, #36	@ 0x24
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d108      	bne.n	800d214 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d20c:	461a      	mov	r2, r3
 800d20e:	2101      	movs	r1, #1
 800d210:	f005 ff80 	bl	8013114 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d216:	b2db      	uxtb	r3, r3
 800d218:	4619      	mov	r1, r3
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f00b fd77 	bl	8018d0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	f003 0308 	and.w	r3, r3, #8
 800d226:	2b00      	cmp	r3, #0
 800d228:	d008      	beq.n	800d23c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22c:	015a      	lsls	r2, r3, #5
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	4413      	add	r3, r2
 800d232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d236:	461a      	mov	r2, r3
 800d238:	2308      	movs	r3, #8
 800d23a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	f003 0310 	and.w	r3, r3, #16
 800d242:	2b00      	cmp	r3, #0
 800d244:	d008      	beq.n	800d258 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d252:	461a      	mov	r2, r3
 800d254:	2310      	movs	r3, #16
 800d256:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d264:	015a      	lsls	r2, r3, #5
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	4413      	add	r3, r2
 800d26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d26e:	461a      	mov	r2, r3
 800d270:	2340      	movs	r3, #64	@ 0x40
 800d272:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	f003 0302 	and.w	r3, r3, #2
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d023      	beq.n	800d2c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d27e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d280:	6a38      	ldr	r0, [r7, #32]
 800d282:	f004 ff67 	bl	8012154 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d288:	4613      	mov	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	3310      	adds	r3, #16
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	4413      	add	r3, r2
 800d296:	3304      	adds	r3, #4
 800d298:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	78db      	ldrb	r3, [r3, #3]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d108      	bne.n	800d2b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f00b fdc4 	bl	8018e3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d2d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fcbd 	bl	800dc52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	3301      	adds	r3, #1
 800d2dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e0:	085b      	lsrs	r3, r3, #1
 800d2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f47f af2e 	bne.w	800d148 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f005 fe4b 	bl	8012f8c <USB_ReadInterrupts>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d2fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d300:	d122      	bne.n	800d348 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	69fa      	ldr	r2, [r7, #28]
 800d30c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d310:	f023 0301 	bic.w	r3, r3, #1
 800d314:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d108      	bne.n	800d332 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d328:	2100      	movs	r1, #0
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fea4 	bl	800e078 <HAL_PCDEx_LPM_Callback>
 800d330:	e002      	b.n	800d338 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f00b fd62 	bl	8018dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	695a      	ldr	r2, [r3, #20]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800d346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f005 fe1d 	bl	8012f8c <USB_ReadInterrupts>
 800d352:	4603      	mov	r3, r0
 800d354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d35c:	d112      	bne.n	800d384 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d102      	bne.n	800d374 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f00b fd1e 	bl	8018db0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	695a      	ldr	r2, [r3, #20]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800d382:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4618      	mov	r0, r3
 800d38a:	f005 fdff 	bl	8012f8c <USB_ReadInterrupts>
 800d38e:	4603      	mov	r3, r0
 800d390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d398:	f040 80b7 	bne.w	800d50a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	69fa      	ldr	r2, [r7, #28]
 800d3a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d3aa:	f023 0301 	bic.w	r3, r3, #1
 800d3ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2110      	movs	r1, #16
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f004 fecc 	bl	8012154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3c0:	e046      	b.n	800d450 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c4:	015a      	lsls	r2, r3, #5
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d3d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3e6:	0151      	lsls	r1, r2, #5
 800d3e8:	69fa      	ldr	r2, [r7, #28]
 800d3ea:	440a      	add	r2, r1
 800d3ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d3f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f8:	015a      	lsls	r2, r3, #5
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d402:	461a      	mov	r2, r3
 800d404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d408:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	015a      	lsls	r2, r3, #5
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	4413      	add	r3, r2
 800d412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d41a:	0151      	lsls	r1, r2, #5
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	440a      	add	r2, r1
 800d420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	4413      	add	r3, r2
 800d432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d43a:	0151      	lsls	r1, r2, #5
 800d43c:	69fa      	ldr	r2, [r7, #28]
 800d43e:	440a      	add	r2, r1
 800d440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d448:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44c:	3301      	adds	r3, #1
 800d44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	791b      	ldrb	r3, [r3, #4]
 800d454:	461a      	mov	r2, r3
 800d456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d458:	4293      	cmp	r3, r2
 800d45a:	d3b2      	bcc.n	800d3c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d462:	69db      	ldr	r3, [r3, #28]
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d46a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800d46e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7bdb      	ldrb	r3, [r3, #15]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d016      	beq.n	800d4a6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d482:	69fa      	ldr	r2, [r7, #28]
 800d484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d488:	f043 030b 	orr.w	r3, r3, #11
 800d48c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d498:	69fa      	ldr	r2, [r7, #28]
 800d49a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d49e:	f043 030b 	orr.w	r3, r3, #11
 800d4a2:	6453      	str	r3, [r2, #68]	@ 0x44
 800d4a4:	e015      	b.n	800d4d2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	69fa      	ldr	r2, [r7, #28]
 800d4b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d4b8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800d4bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4cc:	f043 030b 	orr.w	r3, r3, #11
 800d4d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	69fa      	ldr	r2, [r7, #28]
 800d4dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4e0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d4e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6818      	ldr	r0, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	f005 fe0d 	bl	8013114 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	695a      	ldr	r2, [r3, #20]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800d508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	f005 fd3c 	bl	8012f8c <USB_ReadInterrupts>
 800d514:	4603      	mov	r3, r0
 800d516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d51a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d51e:	d123      	bne.n	800d568 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4618      	mov	r0, r3
 800d526:	f005 fdd2 	bl	80130ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4618      	mov	r0, r3
 800d530:	f004 fe89 	bl	8012246 <USB_GetDevSpeed>
 800d534:	4603      	mov	r3, r0
 800d536:	461a      	mov	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681c      	ldr	r4, [r3, #0]
 800d540:	f001 fa0a 	bl	800e958 <HAL_RCC_GetHCLKFreq>
 800d544:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d54a:	461a      	mov	r2, r3
 800d54c:	4620      	mov	r0, r4
 800d54e:	f004 fb8d 	bl	8011c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f00b fc03 	bl	8018d5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	695a      	ldr	r2, [r3, #20]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800d566:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f005 fd0d 	bl	8012f8c <USB_ReadInterrupts>
 800d572:	4603      	mov	r3, r0
 800d574:	f003 0308 	and.w	r3, r3, #8
 800d578:	2b08      	cmp	r3, #8
 800d57a:	d10a      	bne.n	800d592 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f00b fbe0 	bl	8018d42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	695a      	ldr	r2, [r3, #20]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f002 0208 	and.w	r2, r2, #8
 800d590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4618      	mov	r0, r3
 800d598:	f005 fcf8 	bl	8012f8c <USB_ReadInterrupts>
 800d59c:	4603      	mov	r3, r0
 800d59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5a2:	2b80      	cmp	r3, #128	@ 0x80
 800d5a4:	d123      	bne.n	800d5ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5b6:	e014      	b.n	800d5e2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5bc:	4613      	mov	r3, r2
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	4413      	add	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	440b      	add	r3, r1
 800d5c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d105      	bne.n	800d5dc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fb0a 	bl	800dbf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5de:	3301      	adds	r3, #1
 800d5e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	791b      	ldrb	r3, [r3, #4]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d3e4      	bcc.n	800d5b8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f005 fcca 	bl	8012f8c <USB_ReadInterrupts>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d602:	d13c      	bne.n	800d67e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d604:	2301      	movs	r3, #1
 800d606:	627b      	str	r3, [r7, #36]	@ 0x24
 800d608:	e02b      	b.n	800d662 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60c:	015a      	lsls	r2, r3, #5
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	4413      	add	r3, r2
 800d612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d61a:	6879      	ldr	r1, [r7, #4]
 800d61c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d61e:	4613      	mov	r3, r2
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	440b      	add	r3, r1
 800d628:	3318      	adds	r3, #24
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d115      	bne.n	800d65c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800d630:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d632:	2b00      	cmp	r3, #0
 800d634:	da12      	bge.n	800d65c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d63a:	4613      	mov	r3, r2
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	4413      	add	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	440b      	add	r3, r1
 800d644:	3317      	adds	r3, #23
 800d646:	2201      	movs	r2, #1
 800d648:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d652:	b2db      	uxtb	r3, r3
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 faca 	bl	800dbf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65e:	3301      	adds	r3, #1
 800d660:	627b      	str	r3, [r7, #36]	@ 0x24
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	791b      	ldrb	r3, [r3, #4]
 800d666:	461a      	mov	r2, r3
 800d668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d3cd      	bcc.n	800d60a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	695a      	ldr	r2, [r3, #20]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800d67c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f005 fc82 	bl	8012f8c <USB_ReadInterrupts>
 800d688:	4603      	mov	r3, r0
 800d68a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d68e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d692:	d156      	bne.n	800d742 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d694:	2301      	movs	r3, #1
 800d696:	627b      	str	r3, [r7, #36]	@ 0x24
 800d698:	e045      	b.n	800d726 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69c:	015a      	lsls	r2, r3, #5
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d6aa:	6879      	ldr	r1, [r7, #4]
 800d6ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	4413      	add	r3, r2
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	440b      	add	r3, r1
 800d6b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d12e      	bne.n	800d720 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d6c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	da2b      	bge.n	800d720 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d6d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d121      	bne.n	800d720 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	4413      	add	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	440b      	add	r3, r1
 800d6ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	695b      	ldr	r3, [r3, #20]
 800d702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10a      	bne.n	800d720 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	69fa      	ldr	r2, [r7, #28]
 800d714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d718:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d71c:	6053      	str	r3, [r2, #4]
            break;
 800d71e:	e008      	b.n	800d732 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	3301      	adds	r3, #1
 800d724:	627b      	str	r3, [r7, #36]	@ 0x24
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	791b      	ldrb	r3, [r3, #4]
 800d72a:	461a      	mov	r2, r3
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	4293      	cmp	r3, r2
 800d730:	d3b3      	bcc.n	800d69a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	695a      	ldr	r2, [r3, #20]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800d740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	f005 fc20 	bl	8012f8c <USB_ReadInterrupts>
 800d74c:	4603      	mov	r3, r0
 800d74e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d756:	d10a      	bne.n	800d76e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f00b fb81 	bl	8018e60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	695a      	ldr	r2, [r3, #20]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800d76c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4618      	mov	r0, r3
 800d774:	f005 fc0a 	bl	8012f8c <USB_ReadInterrupts>
 800d778:	4603      	mov	r3, r0
 800d77a:	f003 0304 	and.w	r3, r3, #4
 800d77e:	2b04      	cmp	r3, #4
 800d780:	d115      	bne.n	800d7ae <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f00b fb71 	bl	8018e7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6859      	ldr	r1, [r3, #4]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	69ba      	ldr	r2, [r7, #24]
 800d7a6:	430a      	orrs	r2, r1
 800d7a8:	605a      	str	r2, [r3, #4]
 800d7aa:	e000      	b.n	800d7ae <HAL_PCD_IRQHandler+0x93c>
      return;
 800d7ac:	bf00      	nop
    }
  }
}
 800d7ae:	3734      	adds	r7, #52	@ 0x34
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd90      	pop	{r4, r7, pc}

0800d7b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d101      	bne.n	800d7ce <HAL_PCD_SetAddress+0x1a>
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	e012      	b.n	800d7f4 <HAL_PCD_SetAddress+0x40>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	78fa      	ldrb	r2, [r7, #3]
 800d7da:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	78fa      	ldrb	r2, [r7, #3]
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f005 fb69 	bl	8012ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	4608      	mov	r0, r1
 800d806:	4611      	mov	r1, r2
 800d808:	461a      	mov	r2, r3
 800d80a:	4603      	mov	r3, r0
 800d80c:	70fb      	strb	r3, [r7, #3]
 800d80e:	460b      	mov	r3, r1
 800d810:	803b      	strh	r3, [r7, #0]
 800d812:	4613      	mov	r3, r2
 800d814:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d81a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	da0f      	bge.n	800d842 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d822:	78fb      	ldrb	r3, [r7, #3]
 800d824:	f003 020f 	and.w	r2, r3, #15
 800d828:	4613      	mov	r3, r2
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	4413      	add	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	3310      	adds	r3, #16
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	4413      	add	r3, r2
 800d836:	3304      	adds	r3, #4
 800d838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2201      	movs	r2, #1
 800d83e:	705a      	strb	r2, [r3, #1]
 800d840:	e00f      	b.n	800d862 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d842:	78fb      	ldrb	r3, [r7, #3]
 800d844:	f003 020f 	and.w	r2, r3, #15
 800d848:	4613      	mov	r3, r2
 800d84a:	00db      	lsls	r3, r3, #3
 800d84c:	4413      	add	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	4413      	add	r3, r2
 800d858:	3304      	adds	r3, #4
 800d85a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	f003 030f 	and.w	r3, r3, #15
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800d86e:	883b      	ldrh	r3, [r7, #0]
 800d870:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	78ba      	ldrb	r2, [r7, #2]
 800d87c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	785b      	ldrb	r3, [r3, #1]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d004      	beq.n	800d890 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	461a      	mov	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d890:	78bb      	ldrb	r3, [r7, #2]
 800d892:	2b02      	cmp	r3, #2
 800d894:	d102      	bne.n	800d89c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d101      	bne.n	800d8aa <HAL_PCD_EP_Open+0xae>
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	e00e      	b.n	800d8c8 <HAL_PCD_EP_Open+0xcc>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68f9      	ldr	r1, [r7, #12]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f004 fce9 	bl	8012290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d8c6:	7afb      	ldrb	r3, [r7, #11]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	da0f      	bge.n	800d904 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	f003 020f 	and.w	r2, r3, #15
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	4413      	add	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	3310      	adds	r3, #16
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	705a      	strb	r2, [r3, #1]
 800d902:	e00f      	b.n	800d924 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d904:	78fb      	ldrb	r3, [r7, #3]
 800d906:	f003 020f 	and.w	r2, r3, #15
 800d90a:	4613      	mov	r3, r2
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	4413      	add	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	4413      	add	r3, r2
 800d91a:	3304      	adds	r3, #4
 800d91c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	f003 030f 	and.w	r3, r3, #15
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d936:	2b01      	cmp	r3, #1
 800d938:	d101      	bne.n	800d93e <HAL_PCD_EP_Close+0x6e>
 800d93a:	2302      	movs	r3, #2
 800d93c:	e00e      	b.n	800d95c <HAL_PCD_EP_Close+0x8c>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2201      	movs	r2, #1
 800d942:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	68f9      	ldr	r1, [r7, #12]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f004 fd27 	bl	80123a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	607a      	str	r2, [r7, #4]
 800d96e:	603b      	str	r3, [r7, #0]
 800d970:	460b      	mov	r3, r1
 800d972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d974:	7afb      	ldrb	r3, [r7, #11]
 800d976:	f003 020f 	and.w	r2, r3, #15
 800d97a:	4613      	mov	r3, r2
 800d97c:	00db      	lsls	r3, r3, #3
 800d97e:	4413      	add	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	4413      	add	r3, r2
 800d98a:	3304      	adds	r3, #4
 800d98c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	2200      	movs	r2, #0
 800d99e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	f003 030f 	and.w	r3, r3, #15
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	799b      	ldrb	r3, [r3, #6]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d102      	bne.n	800d9c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	799b      	ldrb	r3, [r3, #6]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	6979      	ldr	r1, [r7, #20]
 800d9cc:	f004 fdc4 	bl	8012558 <USB_EPStartXfer>

  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b083      	sub	sp, #12
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d9e6:	78fb      	ldrb	r3, [r7, #3]
 800d9e8:	f003 020f 	and.w	r2, r3, #15
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	4413      	add	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	440b      	add	r3, r1
 800d9f8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d9fc:	681b      	ldr	r3, [r3, #0]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b086      	sub	sp, #24
 800da0e:	af00      	add	r7, sp, #0
 800da10:	60f8      	str	r0, [r7, #12]
 800da12:	607a      	str	r2, [r7, #4]
 800da14:	603b      	str	r3, [r7, #0]
 800da16:	460b      	mov	r3, r1
 800da18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800da1a:	7afb      	ldrb	r3, [r7, #11]
 800da1c:	f003 020f 	and.w	r2, r3, #15
 800da20:	4613      	mov	r3, r2
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	4413      	add	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	3310      	adds	r3, #16
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	4413      	add	r3, r2
 800da2e:	3304      	adds	r3, #4
 800da30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	2200      	movs	r2, #0
 800da42:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	2201      	movs	r2, #1
 800da48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800da4a:	7afb      	ldrb	r3, [r7, #11]
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	b2da      	uxtb	r2, r3
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	799b      	ldrb	r3, [r3, #6]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d102      	bne.n	800da64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6818      	ldr	r0, [r3, #0]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	799b      	ldrb	r3, [r3, #6]
 800da6c:	461a      	mov	r2, r3
 800da6e:	6979      	ldr	r1, [r7, #20]
 800da70:	f004 fd72 	bl	8012558 <USB_EPStartXfer>

  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800da8a:	78fb      	ldrb	r3, [r7, #3]
 800da8c:	f003 030f 	and.w	r3, r3, #15
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	7912      	ldrb	r2, [r2, #4]
 800da94:	4293      	cmp	r3, r2
 800da96:	d901      	bls.n	800da9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	e04f      	b.n	800db3c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800da9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	da0f      	bge.n	800dac4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800daa4:	78fb      	ldrb	r3, [r7, #3]
 800daa6:	f003 020f 	and.w	r2, r3, #15
 800daaa:	4613      	mov	r3, r2
 800daac:	00db      	lsls	r3, r3, #3
 800daae:	4413      	add	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	3310      	adds	r3, #16
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	4413      	add	r3, r2
 800dab8:	3304      	adds	r3, #4
 800daba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2201      	movs	r2, #1
 800dac0:	705a      	strb	r2, [r3, #1]
 800dac2:	e00d      	b.n	800dae0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800dac4:	78fa      	ldrb	r2, [r7, #3]
 800dac6:	4613      	mov	r3, r2
 800dac8:	00db      	lsls	r3, r3, #3
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	4413      	add	r3, r2
 800dad6:	3304      	adds	r3, #4
 800dad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2201      	movs	r2, #1
 800dae4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dae6:	78fb      	ldrb	r3, [r7, #3]
 800dae8:	f003 030f 	and.w	r3, r3, #15
 800daec:	b2da      	uxtb	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d101      	bne.n	800db00 <HAL_PCD_EP_SetStall+0x82>
 800dafc:	2302      	movs	r3, #2
 800dafe:	e01d      	b.n	800db3c <HAL_PCD_EP_SetStall+0xbe>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68f9      	ldr	r1, [r7, #12]
 800db0e:	4618      	mov	r0, r3
 800db10:	f005 f900 	bl	8012d14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800db14:	78fb      	ldrb	r3, [r7, #3]
 800db16:	f003 030f 	and.w	r3, r3, #15
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d109      	bne.n	800db32 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6818      	ldr	r0, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7999      	ldrb	r1, [r3, #6]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800db2c:	461a      	mov	r2, r3
 800db2e:	f005 faf1 	bl	8013114 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800db50:	78fb      	ldrb	r3, [r7, #3]
 800db52:	f003 030f 	and.w	r3, r3, #15
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	7912      	ldrb	r2, [r2, #4]
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d901      	bls.n	800db62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800db5e:	2301      	movs	r3, #1
 800db60:	e042      	b.n	800dbe8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800db62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db66:	2b00      	cmp	r3, #0
 800db68:	da0f      	bge.n	800db8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800db6a:	78fb      	ldrb	r3, [r7, #3]
 800db6c:	f003 020f 	and.w	r2, r3, #15
 800db70:	4613      	mov	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	3310      	adds	r3, #16
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	4413      	add	r3, r2
 800db7e:	3304      	adds	r3, #4
 800db80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2201      	movs	r2, #1
 800db86:	705a      	strb	r2, [r3, #1]
 800db88:	e00f      	b.n	800dbaa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800db8a:	78fb      	ldrb	r3, [r7, #3]
 800db8c:	f003 020f 	and.w	r2, r3, #15
 800db90:	4613      	mov	r3, r2
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4413      	add	r3, r2
 800dba0:	3304      	adds	r3, #4
 800dba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	f003 030f 	and.w	r3, r3, #15
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d101      	bne.n	800dbca <HAL_PCD_EP_ClrStall+0x86>
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	e00e      	b.n	800dbe8 <HAL_PCD_EP_ClrStall+0xa4>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68f9      	ldr	r1, [r7, #12]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f005 f909 	bl	8012df0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800dbfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	da0c      	bge.n	800dc1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dc04:	78fb      	ldrb	r3, [r7, #3]
 800dc06:	f003 020f 	and.w	r2, r3, #15
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	00db      	lsls	r3, r3, #3
 800dc0e:	4413      	add	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	3310      	adds	r3, #16
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	4413      	add	r3, r2
 800dc18:	3304      	adds	r3, #4
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	e00c      	b.n	800dc38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dc1e:	78fb      	ldrb	r3, [r7, #3]
 800dc20:	f003 020f 	and.w	r2, r3, #15
 800dc24:	4613      	mov	r3, r2
 800dc26:	00db      	lsls	r3, r3, #3
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	4413      	add	r3, r2
 800dc34:	3304      	adds	r3, #4
 800dc36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	68f9      	ldr	r1, [r7, #12]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f004 ff28 	bl	8012a94 <USB_EPStopXfer>
 800dc44:	4603      	mov	r3, r0
 800dc46:	72fb      	strb	r3, [r7, #11]

  return ret;
 800dc48:	7afb      	ldrb	r3, [r7, #11]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b08a      	sub	sp, #40	@ 0x28
 800dc56:	af02      	add	r7, sp, #8
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	00db      	lsls	r3, r3, #3
 800dc6c:	4413      	add	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	3310      	adds	r3, #16
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	4413      	add	r3, r2
 800dc76:	3304      	adds	r3, #4
 800dc78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	695a      	ldr	r2, [r3, #20]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d901      	bls.n	800dc8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e06b      	b.n	800dd62 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	691a      	ldr	r2, [r3, #16]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	69fa      	ldr	r2, [r7, #28]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d902      	bls.n	800dca6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	3303      	adds	r3, #3
 800dcaa:	089b      	lsrs	r3, r3, #2
 800dcac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dcae:	e02a      	b.n	800dd06 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	691a      	ldr	r2, [r3, #16]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	69fa      	ldr	r2, [r7, #28]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d902      	bls.n	800dccc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	3303      	adds	r3, #3
 800dcd0:	089b      	lsrs	r3, r3, #2
 800dcd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	68d9      	ldr	r1, [r3, #12]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	4603      	mov	r3, r0
 800dce8:	6978      	ldr	r0, [r7, #20]
 800dcea:	f004 ff7d 	bl	8012be8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	68da      	ldr	r2, [r3, #12]
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	695a      	ldr	r2, [r3, #20]
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	441a      	add	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	015a      	lsls	r2, r3, #5
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dd16:	69ba      	ldr	r2, [r7, #24]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d809      	bhi.n	800dd30 <PCD_WriteEmptyTxFifo+0xde>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	695a      	ldr	r2, [r3, #20]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d203      	bcs.n	800dd30 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1bf      	bne.n	800dcb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	691a      	ldr	r2, [r3, #16]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d811      	bhi.n	800dd60 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	f003 030f 	and.w	r3, r3, #15
 800dd42:	2201      	movs	r2, #1
 800dd44:	fa02 f303 	lsl.w	r3, r2, r3
 800dd48:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	43db      	mvns	r3, r3
 800dd56:	6939      	ldr	r1, [r7, #16]
 800dd58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b088      	sub	sp, #32
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	333c      	adds	r3, #60	@ 0x3c
 800dd84:	3304      	adds	r3, #4
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	015a      	lsls	r2, r3, #5
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	4413      	add	r3, r2
 800dd92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	799b      	ldrb	r3, [r3, #6]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d17b      	bne.n	800de9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	f003 0308 	and.w	r3, r3, #8
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d015      	beq.n	800ddd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	4a61      	ldr	r2, [pc, #388]	@ (800df34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	f240 80b9 	bls.w	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 80b3 	beq.w	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	015a      	lsls	r2, r3, #5
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	4413      	add	r3, r2
 800ddca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddce:	461a      	mov	r2, r3
 800ddd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddd4:	6093      	str	r3, [r2, #8]
 800ddd6:	e0a7      	b.n	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	f003 0320 	and.w	r3, r3, #32
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d009      	beq.n	800ddf6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	015a      	lsls	r2, r3, #5
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	4413      	add	r3, r2
 800ddea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddee:	461a      	mov	r2, r3
 800ddf0:	2320      	movs	r3, #32
 800ddf2:	6093      	str	r3, [r2, #8]
 800ddf4:	e098      	b.n	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f040 8093 	bne.w	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	4a4b      	ldr	r2, [pc, #300]	@ (800df34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d90f      	bls.n	800de2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00a      	beq.n	800de2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de20:	461a      	mov	r2, r3
 800de22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de26:	6093      	str	r3, [r2, #8]
 800de28:	e07e      	b.n	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	4613      	mov	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	4413      	add	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	4413      	add	r3, r2
 800de3c:	3304      	adds	r3, #4
 800de3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6a1a      	ldr	r2, [r3, #32]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	0159      	lsls	r1, r3, #5
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	440b      	add	r3, r1
 800de4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de56:	1ad2      	subs	r2, r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d114      	bne.n	800de8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d109      	bne.n	800de7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6818      	ldr	r0, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de74:	461a      	mov	r2, r3
 800de76:	2101      	movs	r1, #1
 800de78:	f005 f94c 	bl	8013114 <USB_EP0_OutStart>
 800de7c:	e006      	b.n	800de8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	68da      	ldr	r2, [r3, #12]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	695b      	ldr	r3, [r3, #20]
 800de86:	441a      	add	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f00a ff20 	bl	8018cd8 <HAL_PCD_DataOutStageCallback>
 800de98:	e046      	b.n	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	4a26      	ldr	r2, [pc, #152]	@ (800df38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d124      	bne.n	800deec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00a      	beq.n	800dec2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	015a      	lsls	r2, r3, #5
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	4413      	add	r3, r2
 800deb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb8:	461a      	mov	r2, r3
 800deba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800debe:	6093      	str	r3, [r2, #8]
 800dec0:	e032      	b.n	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	f003 0320 	and.w	r3, r3, #32
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d008      	beq.n	800dede <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	015a      	lsls	r2, r3, #5
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	4413      	add	r3, r2
 800ded4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ded8:	461a      	mov	r2, r3
 800deda:	2320      	movs	r3, #32
 800dedc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f00a fef7 	bl	8018cd8 <HAL_PCD_DataOutStageCallback>
 800deea:	e01d      	b.n	800df28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d114      	bne.n	800df1c <PCD_EP_OutXfrComplete_int+0x1b0>
 800def2:	6879      	ldr	r1, [r7, #4]
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	4613      	mov	r3, r2
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	4413      	add	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	440b      	add	r3, r1
 800df00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d108      	bne.n	800df1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800df14:	461a      	mov	r2, r3
 800df16:	2100      	movs	r1, #0
 800df18:	f005 f8fc 	bl	8013114 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	4619      	mov	r1, r3
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f00a fed8 	bl	8018cd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3720      	adds	r7, #32
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	4f54300a 	.word	0x4f54300a
 800df38:	4f54310a 	.word	0x4f54310a

0800df3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	333c      	adds	r3, #60	@ 0x3c
 800df54:	3304      	adds	r3, #4
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	015a      	lsls	r2, r3, #5
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	4413      	add	r3, r2
 800df62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	4a15      	ldr	r2, [pc, #84]	@ (800dfc4 <PCD_EP_OutSetupPacket_int+0x88>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d90e      	bls.n	800df90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d009      	beq.n	800df90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	015a      	lsls	r2, r3, #5
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	4413      	add	r3, r2
 800df84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df88:	461a      	mov	r2, r3
 800df8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f00a fe8f 	bl	8018cb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	4a0a      	ldr	r2, [pc, #40]	@ (800dfc4 <PCD_EP_OutSetupPacket_int+0x88>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d90c      	bls.n	800dfb8 <PCD_EP_OutSetupPacket_int+0x7c>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	799b      	ldrb	r3, [r3, #6]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d108      	bne.n	800dfb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	f005 f8ae 	bl	8013114 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3718      	adds	r7, #24
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	4f54300a 	.word	0x4f54300a

0800dfc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800dfe0:	78fb      	ldrb	r3, [r7, #3]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d107      	bne.n	800dff6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800dfe6:	883b      	ldrh	r3, [r7, #0]
 800dfe8:	0419      	lsls	r1, r3, #16
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	430a      	orrs	r2, r1
 800dff2:	629a      	str	r2, [r3, #40]	@ 0x28
 800dff4:	e028      	b.n	800e048 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dffc:	0c1b      	lsrs	r3, r3, #16
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	4413      	add	r3, r2
 800e002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
 800e008:	e00d      	b.n	800e026 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
 800e010:	3340      	adds	r3, #64	@ 0x40
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4413      	add	r3, r2
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	0c1b      	lsrs	r3, r3, #16
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	4413      	add	r3, r2
 800e01e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e020:	7bfb      	ldrb	r3, [r7, #15]
 800e022:	3301      	adds	r3, #1
 800e024:	73fb      	strb	r3, [r7, #15]
 800e026:	7bfa      	ldrb	r2, [r7, #15]
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d3ec      	bcc.n	800e00a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e030:	883b      	ldrh	r3, [r7, #0]
 800e032:	0418      	lsls	r0, r3, #16
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6819      	ldr	r1, [r3, #0]
 800e038:	78fb      	ldrb	r3, [r7, #3]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	4302      	orrs	r2, r0
 800e040:	3340      	adds	r3, #64	@ 0x40
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	440b      	add	r3, r1
 800e046:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr

0800e056 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e056:	b480      	push	{r7}
 800e058:	b083      	sub	sp, #12
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	460b      	mov	r3, r1
 800e060:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	887a      	ldrh	r2, [r7, #2]
 800e068:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	460b      	mov	r3, r1
 800e082:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e267      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f003 0301 	and.w	r3, r3, #1
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d075      	beq.n	800e19a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e0ae:	4b88      	ldr	r3, [pc, #544]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	f003 030c 	and.w	r3, r3, #12
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d00c      	beq.n	800e0d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e0ba:	4b85      	ldr	r3, [pc, #532]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e0c2:	2b08      	cmp	r3, #8
 800e0c4:	d112      	bne.n	800e0ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e0c6:	4b82      	ldr	r3, [pc, #520]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e0ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0d2:	d10b      	bne.n	800e0ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0d4:	4b7e      	ldr	r3, [pc, #504]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d05b      	beq.n	800e198 <HAL_RCC_OscConfig+0x108>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d157      	bne.n	800e198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e242      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0f4:	d106      	bne.n	800e104 <HAL_RCC_OscConfig+0x74>
 800e0f6:	4b76      	ldr	r3, [pc, #472]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a75      	ldr	r2, [pc, #468]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e0fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	e01d      	b.n	800e140 <HAL_RCC_OscConfig+0xb0>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e10c:	d10c      	bne.n	800e128 <HAL_RCC_OscConfig+0x98>
 800e10e:	4b70      	ldr	r3, [pc, #448]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a6f      	ldr	r2, [pc, #444]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e118:	6013      	str	r3, [r2, #0]
 800e11a:	4b6d      	ldr	r3, [pc, #436]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a6c      	ldr	r2, [pc, #432]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	e00b      	b.n	800e140 <HAL_RCC_OscConfig+0xb0>
 800e128:	4b69      	ldr	r3, [pc, #420]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a68      	ldr	r2, [pc, #416]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e12e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	4b66      	ldr	r3, [pc, #408]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a65      	ldr	r2, [pc, #404]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e13a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e13e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d013      	beq.n	800e170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e148:	f7fd fcfa 	bl	800bb40 <HAL_GetTick>
 800e14c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e14e:	e008      	b.n	800e162 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e150:	f7fd fcf6 	bl	800bb40 <HAL_GetTick>
 800e154:	4602      	mov	r2, r0
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	2b64      	cmp	r3, #100	@ 0x64
 800e15c:	d901      	bls.n	800e162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e207      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e162:	4b5b      	ldr	r3, [pc, #364]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0f0      	beq.n	800e150 <HAL_RCC_OscConfig+0xc0>
 800e16e:	e014      	b.n	800e19a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e170:	f7fd fce6 	bl	800bb40 <HAL_GetTick>
 800e174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e176:	e008      	b.n	800e18a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e178:	f7fd fce2 	bl	800bb40 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	2b64      	cmp	r3, #100	@ 0x64
 800e184:	d901      	bls.n	800e18a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e186:	2303      	movs	r3, #3
 800e188:	e1f3      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e18a:	4b51      	ldr	r3, [pc, #324]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1f0      	bne.n	800e178 <HAL_RCC_OscConfig+0xe8>
 800e196:	e000      	b.n	800e19a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d063      	beq.n	800e26e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e1a6:	4b4a      	ldr	r3, [pc, #296]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	f003 030c 	and.w	r3, r3, #12
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00b      	beq.n	800e1ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e1b2:	4b47      	ldr	r3, [pc, #284]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e1ba:	2b08      	cmp	r3, #8
 800e1bc:	d11c      	bne.n	800e1f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e1be:	4b44      	ldr	r3, [pc, #272]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d116      	bne.n	800e1f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e1ca:	4b41      	ldr	r3, [pc, #260]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d005      	beq.n	800e1e2 <HAL_RCC_OscConfig+0x152>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d001      	beq.n	800e1e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e1c7      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1e2:	4b3b      	ldr	r3, [pc, #236]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4937      	ldr	r1, [pc, #220]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e1f6:	e03a      	b.n	800e26e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d020      	beq.n	800e242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e200:	4b34      	ldr	r3, [pc, #208]	@ (800e2d4 <HAL_RCC_OscConfig+0x244>)
 800e202:	2201      	movs	r2, #1
 800e204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e206:	f7fd fc9b 	bl	800bb40 <HAL_GetTick>
 800e20a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e20c:	e008      	b.n	800e220 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e20e:	f7fd fc97 	bl	800bb40 <HAL_GetTick>
 800e212:	4602      	mov	r2, r0
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d901      	bls.n	800e220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e21c:	2303      	movs	r3, #3
 800e21e:	e1a8      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e220:	4b2b      	ldr	r3, [pc, #172]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 0302 	and.w	r3, r3, #2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0f0      	beq.n	800e20e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e22c:	4b28      	ldr	r3, [pc, #160]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	4925      	ldr	r1, [pc, #148]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e23c:	4313      	orrs	r3, r2
 800e23e:	600b      	str	r3, [r1, #0]
 800e240:	e015      	b.n	800e26e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e242:	4b24      	ldr	r3, [pc, #144]	@ (800e2d4 <HAL_RCC_OscConfig+0x244>)
 800e244:	2200      	movs	r2, #0
 800e246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e248:	f7fd fc7a 	bl	800bb40 <HAL_GetTick>
 800e24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e24e:	e008      	b.n	800e262 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e250:	f7fd fc76 	bl	800bb40 <HAL_GetTick>
 800e254:	4602      	mov	r2, r0
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d901      	bls.n	800e262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e25e:	2303      	movs	r3, #3
 800e260:	e187      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e262:	4b1b      	ldr	r3, [pc, #108]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0302 	and.w	r3, r3, #2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1f0      	bne.n	800e250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f003 0308 	and.w	r3, r3, #8
 800e276:	2b00      	cmp	r3, #0
 800e278:	d036      	beq.n	800e2e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d016      	beq.n	800e2b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e282:	4b15      	ldr	r3, [pc, #84]	@ (800e2d8 <HAL_RCC_OscConfig+0x248>)
 800e284:	2201      	movs	r2, #1
 800e286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e288:	f7fd fc5a 	bl	800bb40 <HAL_GetTick>
 800e28c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e28e:	e008      	b.n	800e2a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e290:	f7fd fc56 	bl	800bb40 <HAL_GetTick>
 800e294:	4602      	mov	r2, r0
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d901      	bls.n	800e2a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e29e:	2303      	movs	r3, #3
 800e2a0:	e167      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e2a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d0 <HAL_RCC_OscConfig+0x240>)
 800e2a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2a6:	f003 0302 	and.w	r3, r3, #2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d0f0      	beq.n	800e290 <HAL_RCC_OscConfig+0x200>
 800e2ae:	e01b      	b.n	800e2e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e2b0:	4b09      	ldr	r3, [pc, #36]	@ (800e2d8 <HAL_RCC_OscConfig+0x248>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e2b6:	f7fd fc43 	bl	800bb40 <HAL_GetTick>
 800e2ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e2bc:	e00e      	b.n	800e2dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e2be:	f7fd fc3f 	bl	800bb40 <HAL_GetTick>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d907      	bls.n	800e2dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e2cc:	2303      	movs	r3, #3
 800e2ce:	e150      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
 800e2d0:	40023800 	.word	0x40023800
 800e2d4:	42470000 	.word	0x42470000
 800e2d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e2dc:	4b88      	ldr	r3, [pc, #544]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2e0:	f003 0302 	and.w	r3, r3, #2
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1ea      	bne.n	800e2be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f003 0304 	and.w	r3, r3, #4
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8097 	beq.w	800e424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e2fa:	4b81      	ldr	r3, [pc, #516]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10f      	bne.n	800e326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e306:	2300      	movs	r3, #0
 800e308:	60bb      	str	r3, [r7, #8]
 800e30a:	4b7d      	ldr	r3, [pc, #500]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e30e:	4a7c      	ldr	r2, [pc, #496]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e314:	6413      	str	r3, [r2, #64]	@ 0x40
 800e316:	4b7a      	ldr	r3, [pc, #488]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e31a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e31e:	60bb      	str	r3, [r7, #8]
 800e320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e322:	2301      	movs	r3, #1
 800e324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e326:	4b77      	ldr	r3, [pc, #476]	@ (800e504 <HAL_RCC_OscConfig+0x474>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d118      	bne.n	800e364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e332:	4b74      	ldr	r3, [pc, #464]	@ (800e504 <HAL_RCC_OscConfig+0x474>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a73      	ldr	r2, [pc, #460]	@ (800e504 <HAL_RCC_OscConfig+0x474>)
 800e338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e33c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e33e:	f7fd fbff 	bl	800bb40 <HAL_GetTick>
 800e342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e344:	e008      	b.n	800e358 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e346:	f7fd fbfb 	bl	800bb40 <HAL_GetTick>
 800e34a:	4602      	mov	r2, r0
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	2b02      	cmp	r3, #2
 800e352:	d901      	bls.n	800e358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	e10c      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e358:	4b6a      	ldr	r3, [pc, #424]	@ (800e504 <HAL_RCC_OscConfig+0x474>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e360:	2b00      	cmp	r3, #0
 800e362:	d0f0      	beq.n	800e346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d106      	bne.n	800e37a <HAL_RCC_OscConfig+0x2ea>
 800e36c:	4b64      	ldr	r3, [pc, #400]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e370:	4a63      	ldr	r2, [pc, #396]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e372:	f043 0301 	orr.w	r3, r3, #1
 800e376:	6713      	str	r3, [r2, #112]	@ 0x70
 800e378:	e01c      	b.n	800e3b4 <HAL_RCC_OscConfig+0x324>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	2b05      	cmp	r3, #5
 800e380:	d10c      	bne.n	800e39c <HAL_RCC_OscConfig+0x30c>
 800e382:	4b5f      	ldr	r3, [pc, #380]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e386:	4a5e      	ldr	r2, [pc, #376]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e388:	f043 0304 	orr.w	r3, r3, #4
 800e38c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e38e:	4b5c      	ldr	r3, [pc, #368]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e392:	4a5b      	ldr	r2, [pc, #364]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e394:	f043 0301 	orr.w	r3, r3, #1
 800e398:	6713      	str	r3, [r2, #112]	@ 0x70
 800e39a:	e00b      	b.n	800e3b4 <HAL_RCC_OscConfig+0x324>
 800e39c:	4b58      	ldr	r3, [pc, #352]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e39e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3a0:	4a57      	ldr	r2, [pc, #348]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e3a2:	f023 0301 	bic.w	r3, r3, #1
 800e3a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800e3a8:	4b55      	ldr	r3, [pc, #340]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e3aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3ac:	4a54      	ldr	r2, [pc, #336]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e3ae:	f023 0304 	bic.w	r3, r3, #4
 800e3b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d015      	beq.n	800e3e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3bc:	f7fd fbc0 	bl	800bb40 <HAL_GetTick>
 800e3c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e3c2:	e00a      	b.n	800e3da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3c4:	f7fd fbbc 	bl	800bb40 <HAL_GetTick>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d901      	bls.n	800e3da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e0cb      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e3da:	4b49      	ldr	r3, [pc, #292]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3de:	f003 0302 	and.w	r3, r3, #2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0ee      	beq.n	800e3c4 <HAL_RCC_OscConfig+0x334>
 800e3e6:	e014      	b.n	800e412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e3e8:	f7fd fbaa 	bl	800bb40 <HAL_GetTick>
 800e3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e3ee:	e00a      	b.n	800e406 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3f0:	f7fd fba6 	bl	800bb40 <HAL_GetTick>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d901      	bls.n	800e406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e402:	2303      	movs	r3, #3
 800e404:	e0b5      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e406:	4b3e      	ldr	r3, [pc, #248]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e40a:	f003 0302 	and.w	r3, r3, #2
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1ee      	bne.n	800e3f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d105      	bne.n	800e424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e418:	4b39      	ldr	r3, [pc, #228]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e41c:	4a38      	ldr	r2, [pc, #224]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e41e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e422:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 80a1 	beq.w	800e570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e42e:	4b34      	ldr	r3, [pc, #208]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	f003 030c 	and.w	r3, r3, #12
 800e436:	2b08      	cmp	r3, #8
 800e438:	d05c      	beq.n	800e4f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	2b02      	cmp	r3, #2
 800e440:	d141      	bne.n	800e4c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e442:	4b31      	ldr	r3, [pc, #196]	@ (800e508 <HAL_RCC_OscConfig+0x478>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e448:	f7fd fb7a 	bl	800bb40 <HAL_GetTick>
 800e44c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e44e:	e008      	b.n	800e462 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e450:	f7fd fb76 	bl	800bb40 <HAL_GetTick>
 800e454:	4602      	mov	r2, r0
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d901      	bls.n	800e462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e45e:	2303      	movs	r3, #3
 800e460:	e087      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e462:	4b27      	ldr	r3, [pc, #156]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1f0      	bne.n	800e450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	69da      	ldr	r2, [r3, #28]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	431a      	orrs	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e47c:	019b      	lsls	r3, r3, #6
 800e47e:	431a      	orrs	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e484:	085b      	lsrs	r3, r3, #1
 800e486:	3b01      	subs	r3, #1
 800e488:	041b      	lsls	r3, r3, #16
 800e48a:	431a      	orrs	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e490:	061b      	lsls	r3, r3, #24
 800e492:	491b      	ldr	r1, [pc, #108]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e494:	4313      	orrs	r3, r2
 800e496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e498:	4b1b      	ldr	r3, [pc, #108]	@ (800e508 <HAL_RCC_OscConfig+0x478>)
 800e49a:	2201      	movs	r2, #1
 800e49c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e49e:	f7fd fb4f 	bl	800bb40 <HAL_GetTick>
 800e4a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e4a4:	e008      	b.n	800e4b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e4a6:	f7fd fb4b 	bl	800bb40 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d901      	bls.n	800e4b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e05c      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e4b8:	4b11      	ldr	r3, [pc, #68]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d0f0      	beq.n	800e4a6 <HAL_RCC_OscConfig+0x416>
 800e4c4:	e054      	b.n	800e570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e4c6:	4b10      	ldr	r3, [pc, #64]	@ (800e508 <HAL_RCC_OscConfig+0x478>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e4cc:	f7fd fb38 	bl	800bb40 <HAL_GetTick>
 800e4d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e4d2:	e008      	b.n	800e4e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e4d4:	f7fd fb34 	bl	800bb40 <HAL_GetTick>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d901      	bls.n	800e4e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	e045      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e4e6:	4b06      	ldr	r3, [pc, #24]	@ (800e500 <HAL_RCC_OscConfig+0x470>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1f0      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x444>
 800e4f2:	e03d      	b.n	800e570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	699b      	ldr	r3, [r3, #24]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d107      	bne.n	800e50c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e038      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
 800e500:	40023800 	.word	0x40023800
 800e504:	40007000 	.word	0x40007000
 800e508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e50c:	4b1b      	ldr	r3, [pc, #108]	@ (800e57c <HAL_RCC_OscConfig+0x4ec>)
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	2b01      	cmp	r3, #1
 800e518:	d028      	beq.n	800e56c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e524:	429a      	cmp	r2, r3
 800e526:	d121      	bne.n	800e56c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e532:	429a      	cmp	r2, r3
 800e534:	d11a      	bne.n	800e56c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e53c:	4013      	ands	r3, r2
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e544:	4293      	cmp	r3, r2
 800e546:	d111      	bne.n	800e56c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e552:	085b      	lsrs	r3, r3, #1
 800e554:	3b01      	subs	r3, #1
 800e556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e558:	429a      	cmp	r2, r3
 800e55a:	d107      	bne.n	800e56c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e568:	429a      	cmp	r2, r3
 800e56a:	d001      	beq.n	800e570 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e000      	b.n	800e572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	40023800 	.word	0x40023800

0800e580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	e0cc      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e594:	4b68      	ldr	r3, [pc, #416]	@ (800e738 <HAL_RCC_ClockConfig+0x1b8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f003 0307 	and.w	r3, r3, #7
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d90c      	bls.n	800e5bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5a2:	4b65      	ldr	r3, [pc, #404]	@ (800e738 <HAL_RCC_ClockConfig+0x1b8>)
 800e5a4:	683a      	ldr	r2, [r7, #0]
 800e5a6:	b2d2      	uxtb	r2, r2
 800e5a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5aa:	4b63      	ldr	r3, [pc, #396]	@ (800e738 <HAL_RCC_ClockConfig+0x1b8>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f003 0307 	and.w	r3, r3, #7
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d001      	beq.n	800e5bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e0b8      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d020      	beq.n	800e60a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f003 0304 	and.w	r3, r3, #4
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e5d4:	4b59      	ldr	r3, [pc, #356]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	4a58      	ldr	r2, [pc, #352]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e5da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e5de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 0308 	and.w	r3, r3, #8
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e5ec:	4b53      	ldr	r3, [pc, #332]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	4a52      	ldr	r2, [pc, #328]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e5f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e5f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e5f8:	4b50      	ldr	r3, [pc, #320]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	494d      	ldr	r1, [pc, #308]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e606:	4313      	orrs	r3, r2
 800e608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f003 0301 	and.w	r3, r3, #1
 800e612:	2b00      	cmp	r3, #0
 800e614:	d044      	beq.n	800e6a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d107      	bne.n	800e62e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e61e:	4b47      	ldr	r3, [pc, #284]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d119      	bne.n	800e65e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e07f      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	2b02      	cmp	r3, #2
 800e634:	d003      	beq.n	800e63e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d107      	bne.n	800e64e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e63e:	4b3f      	ldr	r3, [pc, #252]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d109      	bne.n	800e65e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e06f      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e64e:	4b3b      	ldr	r3, [pc, #236]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	e067      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e65e:	4b37      	ldr	r3, [pc, #220]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	f023 0203 	bic.w	r2, r3, #3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	4934      	ldr	r1, [pc, #208]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e66c:	4313      	orrs	r3, r2
 800e66e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e670:	f7fd fa66 	bl	800bb40 <HAL_GetTick>
 800e674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e676:	e00a      	b.n	800e68e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e678:	f7fd fa62 	bl	800bb40 <HAL_GetTick>
 800e67c:	4602      	mov	r2, r0
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e686:	4293      	cmp	r3, r2
 800e688:	d901      	bls.n	800e68e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e68a:	2303      	movs	r3, #3
 800e68c:	e04f      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e68e:	4b2b      	ldr	r3, [pc, #172]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	f003 020c 	and.w	r2, r3, #12
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d1eb      	bne.n	800e678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e6a0:	4b25      	ldr	r3, [pc, #148]	@ (800e738 <HAL_RCC_ClockConfig+0x1b8>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f003 0307 	and.w	r3, r3, #7
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d20c      	bcs.n	800e6c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6ae:	4b22      	ldr	r3, [pc, #136]	@ (800e738 <HAL_RCC_ClockConfig+0x1b8>)
 800e6b0:	683a      	ldr	r2, [r7, #0]
 800e6b2:	b2d2      	uxtb	r2, r2
 800e6b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6b6:	4b20      	ldr	r3, [pc, #128]	@ (800e738 <HAL_RCC_ClockConfig+0x1b8>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f003 0307 	and.w	r3, r3, #7
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d001      	beq.n	800e6c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e032      	b.n	800e72e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f003 0304 	and.w	r3, r3, #4
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d008      	beq.n	800e6e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e6d4:	4b19      	ldr	r3, [pc, #100]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	4916      	ldr	r1, [pc, #88]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f003 0308 	and.w	r3, r3, #8
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d009      	beq.n	800e706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e6f2:	4b12      	ldr	r3, [pc, #72]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	490e      	ldr	r1, [pc, #56]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e702:	4313      	orrs	r3, r2
 800e704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e706:	f000 f821 	bl	800e74c <HAL_RCC_GetSysClockFreq>
 800e70a:	4602      	mov	r2, r0
 800e70c:	4b0b      	ldr	r3, [pc, #44]	@ (800e73c <HAL_RCC_ClockConfig+0x1bc>)
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	091b      	lsrs	r3, r3, #4
 800e712:	f003 030f 	and.w	r3, r3, #15
 800e716:	490a      	ldr	r1, [pc, #40]	@ (800e740 <HAL_RCC_ClockConfig+0x1c0>)
 800e718:	5ccb      	ldrb	r3, [r1, r3]
 800e71a:	fa22 f303 	lsr.w	r3, r2, r3
 800e71e:	4a09      	ldr	r2, [pc, #36]	@ (800e744 <HAL_RCC_ClockConfig+0x1c4>)
 800e720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e722:	4b09      	ldr	r3, [pc, #36]	@ (800e748 <HAL_RCC_ClockConfig+0x1c8>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4618      	mov	r0, r3
 800e728:	f7fc fd16 	bl	800b158 <HAL_InitTick>

  return HAL_OK;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	40023c00 	.word	0x40023c00
 800e73c:	40023800 	.word	0x40023800
 800e740:	0802210c 	.word	0x0802210c
 800e744:	20000058 	.word	0x20000058
 800e748:	2000005c 	.word	0x2000005c

0800e74c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e74c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e750:	b094      	sub	sp, #80	@ 0x50
 800e752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800e758:	2300      	movs	r3, #0
 800e75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800e75c:	2300      	movs	r3, #0
 800e75e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e760:	2300      	movs	r3, #0
 800e762:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e764:	4b79      	ldr	r3, [pc, #484]	@ (800e94c <HAL_RCC_GetSysClockFreq+0x200>)
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	f003 030c 	and.w	r3, r3, #12
 800e76c:	2b08      	cmp	r3, #8
 800e76e:	d00d      	beq.n	800e78c <HAL_RCC_GetSysClockFreq+0x40>
 800e770:	2b08      	cmp	r3, #8
 800e772:	f200 80e1 	bhi.w	800e938 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e776:	2b00      	cmp	r3, #0
 800e778:	d002      	beq.n	800e780 <HAL_RCC_GetSysClockFreq+0x34>
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	d003      	beq.n	800e786 <HAL_RCC_GetSysClockFreq+0x3a>
 800e77e:	e0db      	b.n	800e938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e780:	4b73      	ldr	r3, [pc, #460]	@ (800e950 <HAL_RCC_GetSysClockFreq+0x204>)
 800e782:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e784:	e0db      	b.n	800e93e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e786:	4b73      	ldr	r3, [pc, #460]	@ (800e954 <HAL_RCC_GetSysClockFreq+0x208>)
 800e788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e78a:	e0d8      	b.n	800e93e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e78c:	4b6f      	ldr	r3, [pc, #444]	@ (800e94c <HAL_RCC_GetSysClockFreq+0x200>)
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e794:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e796:	4b6d      	ldr	r3, [pc, #436]	@ (800e94c <HAL_RCC_GetSysClockFreq+0x200>)
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d063      	beq.n	800e86a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e7a2:	4b6a      	ldr	r3, [pc, #424]	@ (800e94c <HAL_RCC_GetSysClockFreq+0x200>)
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	099b      	lsrs	r3, r3, #6
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e7be:	4622      	mov	r2, r4
 800e7c0:	462b      	mov	r3, r5
 800e7c2:	f04f 0000 	mov.w	r0, #0
 800e7c6:	f04f 0100 	mov.w	r1, #0
 800e7ca:	0159      	lsls	r1, r3, #5
 800e7cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7d0:	0150      	lsls	r0, r2, #5
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	1a51      	subs	r1, r2, r1
 800e7da:	6139      	str	r1, [r7, #16]
 800e7dc:	4629      	mov	r1, r5
 800e7de:	eb63 0301 	sbc.w	r3, r3, r1
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	f04f 0200 	mov.w	r2, #0
 800e7e8:	f04f 0300 	mov.w	r3, #0
 800e7ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e7f0:	4659      	mov	r1, fp
 800e7f2:	018b      	lsls	r3, r1, #6
 800e7f4:	4651      	mov	r1, sl
 800e7f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e7fa:	4651      	mov	r1, sl
 800e7fc:	018a      	lsls	r2, r1, #6
 800e7fe:	4651      	mov	r1, sl
 800e800:	ebb2 0801 	subs.w	r8, r2, r1
 800e804:	4659      	mov	r1, fp
 800e806:	eb63 0901 	sbc.w	r9, r3, r1
 800e80a:	f04f 0200 	mov.w	r2, #0
 800e80e:	f04f 0300 	mov.w	r3, #0
 800e812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e81a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e81e:	4690      	mov	r8, r2
 800e820:	4699      	mov	r9, r3
 800e822:	4623      	mov	r3, r4
 800e824:	eb18 0303 	adds.w	r3, r8, r3
 800e828:	60bb      	str	r3, [r7, #8]
 800e82a:	462b      	mov	r3, r5
 800e82c:	eb49 0303 	adc.w	r3, r9, r3
 800e830:	60fb      	str	r3, [r7, #12]
 800e832:	f04f 0200 	mov.w	r2, #0
 800e836:	f04f 0300 	mov.w	r3, #0
 800e83a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e83e:	4629      	mov	r1, r5
 800e840:	024b      	lsls	r3, r1, #9
 800e842:	4621      	mov	r1, r4
 800e844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e848:	4621      	mov	r1, r4
 800e84a:	024a      	lsls	r2, r1, #9
 800e84c:	4610      	mov	r0, r2
 800e84e:	4619      	mov	r1, r3
 800e850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e852:	2200      	movs	r2, #0
 800e854:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e85c:	f7f2 fa24 	bl	8000ca8 <__aeabi_uldivmod>
 800e860:	4602      	mov	r2, r0
 800e862:	460b      	mov	r3, r1
 800e864:	4613      	mov	r3, r2
 800e866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e868:	e058      	b.n	800e91c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e86a:	4b38      	ldr	r3, [pc, #224]	@ (800e94c <HAL_RCC_GetSysClockFreq+0x200>)
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	099b      	lsrs	r3, r3, #6
 800e870:	2200      	movs	r2, #0
 800e872:	4618      	mov	r0, r3
 800e874:	4611      	mov	r1, r2
 800e876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e87a:	623b      	str	r3, [r7, #32]
 800e87c:	2300      	movs	r3, #0
 800e87e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e884:	4642      	mov	r2, r8
 800e886:	464b      	mov	r3, r9
 800e888:	f04f 0000 	mov.w	r0, #0
 800e88c:	f04f 0100 	mov.w	r1, #0
 800e890:	0159      	lsls	r1, r3, #5
 800e892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e896:	0150      	lsls	r0, r2, #5
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4641      	mov	r1, r8
 800e89e:	ebb2 0a01 	subs.w	sl, r2, r1
 800e8a2:	4649      	mov	r1, r9
 800e8a4:	eb63 0b01 	sbc.w	fp, r3, r1
 800e8a8:	f04f 0200 	mov.w	r2, #0
 800e8ac:	f04f 0300 	mov.w	r3, #0
 800e8b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e8b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e8b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e8bc:	ebb2 040a 	subs.w	r4, r2, sl
 800e8c0:	eb63 050b 	sbc.w	r5, r3, fp
 800e8c4:	f04f 0200 	mov.w	r2, #0
 800e8c8:	f04f 0300 	mov.w	r3, #0
 800e8cc:	00eb      	lsls	r3, r5, #3
 800e8ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e8d2:	00e2      	lsls	r2, r4, #3
 800e8d4:	4614      	mov	r4, r2
 800e8d6:	461d      	mov	r5, r3
 800e8d8:	4643      	mov	r3, r8
 800e8da:	18e3      	adds	r3, r4, r3
 800e8dc:	603b      	str	r3, [r7, #0]
 800e8de:	464b      	mov	r3, r9
 800e8e0:	eb45 0303 	adc.w	r3, r5, r3
 800e8e4:	607b      	str	r3, [r7, #4]
 800e8e6:	f04f 0200 	mov.w	r2, #0
 800e8ea:	f04f 0300 	mov.w	r3, #0
 800e8ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	028b      	lsls	r3, r1, #10
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	028a      	lsls	r2, r1, #10
 800e900:	4610      	mov	r0, r2
 800e902:	4619      	mov	r1, r3
 800e904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e906:	2200      	movs	r2, #0
 800e908:	61bb      	str	r3, [r7, #24]
 800e90a:	61fa      	str	r2, [r7, #28]
 800e90c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e910:	f7f2 f9ca 	bl	8000ca8 <__aeabi_uldivmod>
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4613      	mov	r3, r2
 800e91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e91c:	4b0b      	ldr	r3, [pc, #44]	@ (800e94c <HAL_RCC_GetSysClockFreq+0x200>)
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	0c1b      	lsrs	r3, r3, #16
 800e922:	f003 0303 	and.w	r3, r3, #3
 800e926:	3301      	adds	r3, #1
 800e928:	005b      	lsls	r3, r3, #1
 800e92a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800e92c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e92e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e930:	fbb2 f3f3 	udiv	r3, r2, r3
 800e934:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e936:	e002      	b.n	800e93e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e938:	4b05      	ldr	r3, [pc, #20]	@ (800e950 <HAL_RCC_GetSysClockFreq+0x204>)
 800e93a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e93c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e93e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e940:	4618      	mov	r0, r3
 800e942:	3750      	adds	r7, #80	@ 0x50
 800e944:	46bd      	mov	sp, r7
 800e946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e94a:	bf00      	nop
 800e94c:	40023800 	.word	0x40023800
 800e950:	00f42400 	.word	0x00f42400
 800e954:	007a1200 	.word	0x007a1200

0800e958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e958:	b480      	push	{r7}
 800e95a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e95c:	4b03      	ldr	r3, [pc, #12]	@ (800e96c <HAL_RCC_GetHCLKFreq+0x14>)
 800e95e:	681b      	ldr	r3, [r3, #0]
}
 800e960:	4618      	mov	r0, r3
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop
 800e96c:	20000058 	.word	0x20000058

0800e970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e974:	f7ff fff0 	bl	800e958 <HAL_RCC_GetHCLKFreq>
 800e978:	4602      	mov	r2, r0
 800e97a:	4b05      	ldr	r3, [pc, #20]	@ (800e990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	0a9b      	lsrs	r3, r3, #10
 800e980:	f003 0307 	and.w	r3, r3, #7
 800e984:	4903      	ldr	r1, [pc, #12]	@ (800e994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e986:	5ccb      	ldrb	r3, [r1, r3]
 800e988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	40023800 	.word	0x40023800
 800e994:	0802211c 	.word	0x0802211c

0800e998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e99c:	f7ff ffdc 	bl	800e958 <HAL_RCC_GetHCLKFreq>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	4b05      	ldr	r3, [pc, #20]	@ (800e9b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	0b5b      	lsrs	r3, r3, #13
 800e9a8:	f003 0307 	and.w	r3, r3, #7
 800e9ac:	4903      	ldr	r1, [pc, #12]	@ (800e9bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e9ae:	5ccb      	ldrb	r3, [r1, r3]
 800e9b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	40023800 	.word	0x40023800
 800e9bc:	0802211c 	.word	0x0802211c

0800e9c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	220f      	movs	r2, #15
 800e9ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e9d0:	4b12      	ldr	r3, [pc, #72]	@ (800ea1c <HAL_RCC_GetClockConfig+0x5c>)
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	f003 0203 	and.w	r2, r3, #3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800ea1c <HAL_RCC_GetClockConfig+0x5c>)
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e9e8:	4b0c      	ldr	r3, [pc, #48]	@ (800ea1c <HAL_RCC_GetClockConfig+0x5c>)
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ea1c <HAL_RCC_GetClockConfig+0x5c>)
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	08db      	lsrs	r3, r3, #3
 800e9fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ea02:	4b07      	ldr	r3, [pc, #28]	@ (800ea20 <HAL_RCC_GetClockConfig+0x60>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 0207 	and.w	r2, r3, #7
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	601a      	str	r2, [r3, #0]
}
 800ea0e:	bf00      	nop
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	40023800 	.word	0x40023800
 800ea20:	40023c00 	.word	0x40023c00

0800ea24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea32:	2301      	movs	r3, #1
 800ea34:	e07b      	b.n	800eb2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d108      	bne.n	800ea50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea46:	d009      	beq.n	800ea5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	61da      	str	r2, [r3, #28]
 800ea4e:	e005      	b.n	800ea5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d106      	bne.n	800ea7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f7fc fafa 	bl	800b070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2202      	movs	r2, #2
 800ea80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800eaa4:	431a      	orrs	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eaae:	431a      	orrs	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	691b      	ldr	r3, [r3, #16]
 800eab4:	f003 0302 	and.w	r3, r3, #2
 800eab8:	431a      	orrs	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	695b      	ldr	r3, [r3, #20]
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	431a      	orrs	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	699b      	ldr	r3, [r3, #24]
 800eac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eacc:	431a      	orrs	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	69db      	ldr	r3, [r3, #28]
 800ead2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ead6:	431a      	orrs	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a1b      	ldr	r3, [r3, #32]
 800eadc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eae0:	ea42 0103 	orr.w	r1, r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eae8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	430a      	orrs	r2, r1
 800eaf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	699b      	ldr	r3, [r3, #24]
 800eaf8:	0c1b      	lsrs	r3, r3, #16
 800eafa:	f003 0104 	and.w	r1, r3, #4
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb02:	f003 0210 	and.w	r2, r3, #16
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	430a      	orrs	r2, r1
 800eb0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	69da      	ldr	r2, [r3, #28]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800eb1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b088      	sub	sp, #32
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	603b      	str	r3, [r7, #0]
 800eb42:	4613      	mov	r3, r2
 800eb44:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb46:	f7fc fffb 	bl	800bb40 <HAL_GetTick>
 800eb4a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800eb4c:	88fb      	ldrh	r3, [r7, #6]
 800eb4e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d001      	beq.n	800eb60 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800eb5c:	2302      	movs	r3, #2
 800eb5e:	e12a      	b.n	800edb6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <HAL_SPI_Transmit+0x36>
 800eb66:	88fb      	ldrh	r3, [r7, #6]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e122      	b.n	800edb6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d101      	bne.n	800eb7e <HAL_SPI_Transmit+0x48>
 800eb7a:	2302      	movs	r3, #2
 800eb7c:	e11b      	b.n	800edb6 <HAL_SPI_Transmit+0x280>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2203      	movs	r2, #3
 800eb8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	88fa      	ldrh	r2, [r7, #6]
 800eb9e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	88fa      	ldrh	r2, [r7, #6]
 800eba4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebcc:	d10f      	bne.n	800ebee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ebdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ebec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf8:	2b40      	cmp	r3, #64	@ 0x40
 800ebfa:	d007      	beq.n	800ec0c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ec0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec14:	d152      	bne.n	800ecbc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d002      	beq.n	800ec24 <HAL_SPI_Transmit+0xee>
 800ec1e:	8b7b      	ldrh	r3, [r7, #26]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d145      	bne.n	800ecb0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec28:	881a      	ldrh	r2, [r3, #0]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec34:	1c9a      	adds	r2, r3, #2
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	3b01      	subs	r3, #1
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ec48:	e032      	b.n	800ecb0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	f003 0302 	and.w	r3, r3, #2
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d112      	bne.n	800ec7e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec5c:	881a      	ldrh	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec68:	1c9a      	adds	r2, r3, #2
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	3b01      	subs	r3, #1
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ec7c:	e018      	b.n	800ecb0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec7e:	f7fc ff5f 	bl	800bb40 <HAL_GetTick>
 800ec82:	4602      	mov	r2, r0
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d803      	bhi.n	800ec96 <HAL_SPI_Transmit+0x160>
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec94:	d102      	bne.n	800ec9c <HAL_SPI_Transmit+0x166>
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d109      	bne.n	800ecb0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e082      	b.n	800edb6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d1c7      	bne.n	800ec4a <HAL_SPI_Transmit+0x114>
 800ecba:	e053      	b.n	800ed64 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <HAL_SPI_Transmit+0x194>
 800ecc4:	8b7b      	ldrh	r3, [r7, #26]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d147      	bne.n	800ed5a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	330c      	adds	r3, #12
 800ecd4:	7812      	ldrb	r2, [r2, #0]
 800ecd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	3b01      	subs	r3, #1
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ecf0:	e033      	b.n	800ed5a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	f003 0302 	and.w	r3, r3, #2
 800ecfc:	2b02      	cmp	r3, #2
 800ecfe:	d113      	bne.n	800ed28 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	330c      	adds	r3, #12
 800ed0a:	7812      	ldrb	r2, [r2, #0]
 800ed0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ed26:	e018      	b.n	800ed5a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed28:	f7fc ff0a 	bl	800bb40 <HAL_GetTick>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d803      	bhi.n	800ed40 <HAL_SPI_Transmit+0x20a>
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3e:	d102      	bne.n	800ed46 <HAL_SPI_Transmit+0x210>
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d109      	bne.n	800ed5a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ed56:	2303      	movs	r3, #3
 800ed58:	e02d      	b.n	800edb6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1c6      	bne.n	800ecf2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed64:	69fa      	ldr	r2, [r7, #28]
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f000 fbd9 	bl	800f520 <SPI_EndRxTxTransaction>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2220      	movs	r2, #32
 800ed78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10a      	bne.n	800ed98 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed82:	2300      	movs	r3, #0
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	617b      	str	r3, [r7, #20]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	617b      	str	r3, [r7, #20]
 800ed96:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e000      	b.n	800edb6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800edb4:	2300      	movs	r3, #0
  }
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3720      	adds	r7, #32
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b088      	sub	sp, #32
 800edc2:	af02      	add	r7, sp, #8
 800edc4:	60f8      	str	r0, [r7, #12]
 800edc6:	60b9      	str	r1, [r7, #8]
 800edc8:	603b      	str	r3, [r7, #0]
 800edca:	4613      	mov	r3, r2
 800edcc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d001      	beq.n	800edde <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800edda:	2302      	movs	r3, #2
 800eddc:	e104      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ede6:	d112      	bne.n	800ee0e <HAL_SPI_Receive+0x50>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10e      	bne.n	800ee0e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2204      	movs	r2, #4
 800edf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800edf8:	88fa      	ldrh	r2, [r7, #6]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	4613      	mov	r3, r2
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	68b9      	ldr	r1, [r7, #8]
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f000 f8f3 	bl	800eff0 <HAL_SPI_TransmitReceive>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	e0ec      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee0e:	f7fc fe97 	bl	800bb40 <HAL_GetTick>
 800ee12:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d002      	beq.n	800ee20 <HAL_SPI_Receive+0x62>
 800ee1a:	88fb      	ldrh	r3, [r7, #6]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	e0e1      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d101      	bne.n	800ee32 <HAL_SPI_Receive+0x74>
 800ee2e:	2302      	movs	r3, #2
 800ee30:	e0da      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2204      	movs	r2, #4
 800ee3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2200      	movs	r2, #0
 800ee46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	88fa      	ldrh	r2, [r7, #6]
 800ee52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	88fa      	ldrh	r2, [r7, #6]
 800ee58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee80:	d10f      	bne.n	800eea2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800eea0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeac:	2b40      	cmp	r3, #64	@ 0x40
 800eeae:	d007      	beq.n	800eec0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eebe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d170      	bne.n	800efaa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eec8:	e035      	b.n	800ef36 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d115      	bne.n	800ef04 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f103 020c 	add.w	r2, r3, #12
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eee4:	7812      	ldrb	r2, [r2, #0]
 800eee6:	b2d2      	uxtb	r2, r2
 800eee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ef02:	e018      	b.n	800ef36 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef04:	f7fc fe1c 	bl	800bb40 <HAL_GetTick>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	683a      	ldr	r2, [r7, #0]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d803      	bhi.n	800ef1c <HAL_SPI_Receive+0x15e>
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1a:	d102      	bne.n	800ef22 <HAL_SPI_Receive+0x164>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d109      	bne.n	800ef36 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ef32:	2303      	movs	r3, #3
 800ef34:	e058      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1c4      	bne.n	800eeca <HAL_SPI_Receive+0x10c>
 800ef40:	e038      	b.n	800efb4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	f003 0301 	and.w	r3, r3, #1
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d113      	bne.n	800ef78 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68da      	ldr	r2, [r3, #12]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef5a:	b292      	uxth	r2, r2
 800ef5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef62:	1c9a      	adds	r2, r3, #2
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ef76:	e018      	b.n	800efaa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef78:	f7fc fde2 	bl	800bb40 <HAL_GetTick>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d803      	bhi.n	800ef90 <HAL_SPI_Receive+0x1d2>
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8e:	d102      	bne.n	800ef96 <HAL_SPI_Receive+0x1d8>
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d109      	bne.n	800efaa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2200      	movs	r2, #0
 800efa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800efa6:	2303      	movs	r3, #3
 800efa8:	e01e      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efae:	b29b      	uxth	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1c6      	bne.n	800ef42 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f000 fa4b 	bl	800f454 <SPI_EndRxTransaction>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2220      	movs	r2, #32
 800efc8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d001      	beq.n	800efe6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800efe2:	2301      	movs	r3, #1
 800efe4:	e000      	b.n	800efe8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800efe6:	2300      	movs	r3, #0
  }
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b08a      	sub	sp, #40	@ 0x28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	607a      	str	r2, [r7, #4]
 800effc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800effe:	2301      	movs	r3, #1
 800f000:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f002:	f7fc fd9d 	bl	800bb40 <HAL_GetTick>
 800f006:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f00e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f016:	887b      	ldrh	r3, [r7, #2]
 800f018:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f01a:	7ffb      	ldrb	r3, [r7, #31]
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d00c      	beq.n	800f03a <HAL_SPI_TransmitReceive+0x4a>
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f026:	d106      	bne.n	800f036 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d102      	bne.n	800f036 <HAL_SPI_TransmitReceive+0x46>
 800f030:	7ffb      	ldrb	r3, [r7, #31]
 800f032:	2b04      	cmp	r3, #4
 800f034:	d001      	beq.n	800f03a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800f036:	2302      	movs	r3, #2
 800f038:	e17f      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <HAL_SPI_TransmitReceive+0x5c>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d002      	beq.n	800f04c <HAL_SPI_TransmitReceive+0x5c>
 800f046:	887b      	ldrh	r3, [r7, #2]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d101      	bne.n	800f050 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f04c:	2301      	movs	r3, #1
 800f04e:	e174      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f056:	2b01      	cmp	r3, #1
 800f058:	d101      	bne.n	800f05e <HAL_SPI_TransmitReceive+0x6e>
 800f05a:	2302      	movs	r3, #2
 800f05c:	e16d      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2201      	movs	r2, #1
 800f062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d003      	beq.n	800f07a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2205      	movs	r2, #5
 800f076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	887a      	ldrh	r2, [r7, #2]
 800f08a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	887a      	ldrh	r2, [r7, #2]
 800f090:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	887a      	ldrh	r2, [r7, #2]
 800f09c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	887a      	ldrh	r2, [r7, #2]
 800f0a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0ba:	2b40      	cmp	r3, #64	@ 0x40
 800f0bc:	d007      	beq.n	800f0ce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f0cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0d6:	d17e      	bne.n	800f1d6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <HAL_SPI_TransmitReceive+0xf6>
 800f0e0:	8afb      	ldrh	r3, [r7, #22]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d16c      	bne.n	800f1c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0ea:	881a      	ldrh	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0f6:	1c9a      	adds	r2, r3, #2
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f100:	b29b      	uxth	r3, r3
 800f102:	3b01      	subs	r3, #1
 800f104:	b29a      	uxth	r2, r3
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f10a:	e059      	b.n	800f1c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b02      	cmp	r3, #2
 800f118:	d11b      	bne.n	800f152 <HAL_SPI_TransmitReceive+0x162>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f11e:	b29b      	uxth	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d016      	beq.n	800f152 <HAL_SPI_TransmitReceive+0x162>
 800f124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f126:	2b01      	cmp	r3, #1
 800f128:	d113      	bne.n	800f152 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f12e:	881a      	ldrh	r2, [r3, #0]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f13a:	1c9a      	adds	r2, r3, #2
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f144:	b29b      	uxth	r3, r3
 800f146:	3b01      	subs	r3, #1
 800f148:	b29a      	uxth	r2, r3
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f14e:	2300      	movs	r3, #0
 800f150:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	f003 0301 	and.w	r3, r3, #1
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d119      	bne.n	800f194 <HAL_SPI_TransmitReceive+0x1a4>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f164:	b29b      	uxth	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d014      	beq.n	800f194 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68da      	ldr	r2, [r3, #12]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f174:	b292      	uxth	r2, r2
 800f176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f17c:	1c9a      	adds	r2, r3, #2
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f186:	b29b      	uxth	r3, r3
 800f188:	3b01      	subs	r3, #1
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f190:	2301      	movs	r3, #1
 800f192:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f194:	f7fc fcd4 	bl	800bb40 <HAL_GetTick>
 800f198:	4602      	mov	r2, r0
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d80d      	bhi.n	800f1c0 <HAL_SPI_TransmitReceive+0x1d0>
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1aa:	d009      	beq.n	800f1c0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e0bc      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1a0      	bne.n	800f10c <HAL_SPI_TransmitReceive+0x11c>
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d19b      	bne.n	800f10c <HAL_SPI_TransmitReceive+0x11c>
 800f1d4:	e082      	b.n	800f2dc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d002      	beq.n	800f1e4 <HAL_SPI_TransmitReceive+0x1f4>
 800f1de:	8afb      	ldrh	r3, [r7, #22]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d171      	bne.n	800f2c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	330c      	adds	r3, #12
 800f1ee:	7812      	ldrb	r2, [r2, #0]
 800f1f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f200:	b29b      	uxth	r3, r3
 800f202:	3b01      	subs	r3, #1
 800f204:	b29a      	uxth	r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f20a:	e05d      	b.n	800f2c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	f003 0302 	and.w	r3, r3, #2
 800f216:	2b02      	cmp	r3, #2
 800f218:	d11c      	bne.n	800f254 <HAL_SPI_TransmitReceive+0x264>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f21e:	b29b      	uxth	r3, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d017      	beq.n	800f254 <HAL_SPI_TransmitReceive+0x264>
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	2b01      	cmp	r3, #1
 800f228:	d114      	bne.n	800f254 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	330c      	adds	r3, #12
 800f234:	7812      	ldrb	r2, [r2, #0]
 800f236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f246:	b29b      	uxth	r3, r3
 800f248:	3b01      	subs	r3, #1
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f250:	2300      	movs	r3, #0
 800f252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d119      	bne.n	800f296 <HAL_SPI_TransmitReceive+0x2a6>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f266:	b29b      	uxth	r3, r3
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d014      	beq.n	800f296 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68da      	ldr	r2, [r3, #12]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f276:	b2d2      	uxtb	r2, r2
 800f278:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f27e:	1c5a      	adds	r2, r3, #1
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f288:	b29b      	uxth	r3, r3
 800f28a:	3b01      	subs	r3, #1
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f292:	2301      	movs	r3, #1
 800f294:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f296:	f7fc fc53 	bl	800bb40 <HAL_GetTick>
 800f29a:	4602      	mov	r2, r0
 800f29c:	6a3b      	ldr	r3, [r7, #32]
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d803      	bhi.n	800f2ae <HAL_SPI_TransmitReceive+0x2be>
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ac:	d102      	bne.n	800f2b4 <HAL_SPI_TransmitReceive+0x2c4>
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d109      	bne.n	800f2c8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e038      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d19c      	bne.n	800f20c <HAL_SPI_TransmitReceive+0x21c>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d197      	bne.n	800f20c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f2dc:	6a3a      	ldr	r2, [r7, #32]
 800f2de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f000 f91d 	bl	800f520 <SPI_EndRxTxTransaction>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d008      	beq.n	800f2fe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2220      	movs	r2, #32
 800f2f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e01d      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d10a      	bne.n	800f31c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f306:	2300      	movs	r3, #0
 800f308:	613b      	str	r3, [r7, #16]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	613b      	str	r3, [r7, #16]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	613b      	str	r3, [r7, #16]
 800f31a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2201      	movs	r2, #1
 800f320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	e000      	b.n	800f33a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f338:	2300      	movs	r3, #0
  }
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3728      	adds	r7, #40	@ 0x28
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	603b      	str	r3, [r7, #0]
 800f350:	4613      	mov	r3, r2
 800f352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f354:	f7fc fbf4 	bl	800bb40 <HAL_GetTick>
 800f358:	4602      	mov	r2, r0
 800f35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35c:	1a9b      	subs	r3, r3, r2
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	4413      	add	r3, r2
 800f362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f364:	f7fc fbec 	bl	800bb40 <HAL_GetTick>
 800f368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f36a:	4b39      	ldr	r3, [pc, #228]	@ (800f450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	015b      	lsls	r3, r3, #5
 800f370:	0d1b      	lsrs	r3, r3, #20
 800f372:	69fa      	ldr	r2, [r7, #28]
 800f374:	fb02 f303 	mul.w	r3, r2, r3
 800f378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f37a:	e054      	b.n	800f426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f382:	d050      	beq.n	800f426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f384:	f7fc fbdc 	bl	800bb40 <HAL_GetTick>
 800f388:	4602      	mov	r2, r0
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	69fa      	ldr	r2, [r7, #28]
 800f390:	429a      	cmp	r2, r3
 800f392:	d902      	bls.n	800f39a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d13d      	bne.n	800f416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	685a      	ldr	r2, [r3, #4]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f3a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f3b2:	d111      	bne.n	800f3d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3bc:	d004      	beq.n	800f3c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f3c6:	d107      	bne.n	800f3d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f3d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3e0:	d10f      	bne.n	800f402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2200      	movs	r2, #0
 800f40e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f412:	2303      	movs	r3, #3
 800f414:	e017      	b.n	800f446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d101      	bne.n	800f420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	3b01      	subs	r3, #1
 800f424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	689a      	ldr	r2, [r3, #8]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	4013      	ands	r3, r2
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	429a      	cmp	r2, r3
 800f434:	bf0c      	ite	eq
 800f436:	2301      	moveq	r3, #1
 800f438:	2300      	movne	r3, #0
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	461a      	mov	r2, r3
 800f43e:	79fb      	ldrb	r3, [r7, #7]
 800f440:	429a      	cmp	r2, r3
 800f442:	d19b      	bne.n	800f37c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f444:	2300      	movs	r3, #0
}
 800f446:	4618      	mov	r0, r3
 800f448:	3720      	adds	r7, #32
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	20000058 	.word	0x20000058

0800f454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af02      	add	r7, sp, #8
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f468:	d111      	bne.n	800f48e <SPI_EndRxTransaction+0x3a>
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	689b      	ldr	r3, [r3, #8]
 800f46e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f472:	d004      	beq.n	800f47e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f47c:	d107      	bne.n	800f48e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f48c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f496:	d12a      	bne.n	800f4ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4a0:	d012      	beq.n	800f4c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	2180      	movs	r1, #128	@ 0x80
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f7ff ff49 	bl	800f344 <SPI_WaitFlagStateUntilTimeout>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d02d      	beq.n	800f514 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4bc:	f043 0220 	orr.w	r2, r3, #32
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e026      	b.n	800f516 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f7ff ff36 	bl	800f344 <SPI_WaitFlagStateUntilTimeout>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d01a      	beq.n	800f514 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4e2:	f043 0220 	orr.w	r2, r3, #32
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e013      	b.n	800f516 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2101      	movs	r1, #1
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7ff ff23 	bl	800f344 <SPI_WaitFlagStateUntilTimeout>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d007      	beq.n	800f514 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f508:	f043 0220 	orr.w	r2, r3, #32
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f510:	2303      	movs	r3, #3
 800f512:	e000      	b.n	800f516 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
	...

0800f520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b088      	sub	sp, #32
 800f524:	af02      	add	r7, sp, #8
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2201      	movs	r2, #1
 800f534:	2102      	movs	r1, #2
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f7ff ff04 	bl	800f344 <SPI_WaitFlagStateUntilTimeout>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d007      	beq.n	800f552 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f546:	f043 0220 	orr.w	r2, r3, #32
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800f54e:	2303      	movs	r3, #3
 800f550:	e032      	b.n	800f5b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f552:	4b1b      	ldr	r3, [pc, #108]	@ (800f5c0 <SPI_EndRxTxTransaction+0xa0>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a1b      	ldr	r2, [pc, #108]	@ (800f5c4 <SPI_EndRxTxTransaction+0xa4>)
 800f558:	fba2 2303 	umull	r2, r3, r2, r3
 800f55c:	0d5b      	lsrs	r3, r3, #21
 800f55e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f562:	fb02 f303 	mul.w	r3, r2, r3
 800f566:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f570:	d112      	bne.n	800f598 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2200      	movs	r2, #0
 800f57a:	2180      	movs	r1, #128	@ 0x80
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f7ff fee1 	bl	800f344 <SPI_WaitFlagStateUntilTimeout>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d016      	beq.n	800f5b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f58c:	f043 0220 	orr.w	r2, r3, #32
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f594:	2303      	movs	r3, #3
 800f596:	e00f      	b.n	800f5b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00a      	beq.n	800f5b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5ae:	2b80      	cmp	r3, #128	@ 0x80
 800f5b0:	d0f2      	beq.n	800f598 <SPI_EndRxTxTransaction+0x78>
 800f5b2:	e000      	b.n	800f5b6 <SPI_EndRxTxTransaction+0x96>
        break;
 800f5b4:	bf00      	nop
  }

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20000058 	.word	0x20000058
 800f5c4:	165e9f81 	.word	0x165e9f81

0800f5c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d101      	bne.n	800f5da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e041      	b.n	800f65e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d106      	bne.n	800f5f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7fc f83c 	bl	800b66c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	3304      	adds	r3, #4
 800f604:	4619      	mov	r1, r3
 800f606:	4610      	mov	r0, r2
 800f608:	f000 fd28 	bl	801005c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2201      	movs	r2, #1
 800f620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2201      	movs	r2, #1
 800f648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2201      	movs	r2, #1
 800f650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2201      	movs	r2, #1
 800f658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
	...

0800f668 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f668:	b480      	push	{r7}
 800f66a:	b085      	sub	sp, #20
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f676:	b2db      	uxtb	r3, r3
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d001      	beq.n	800f680 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f67c:	2301      	movs	r3, #1
 800f67e:	e046      	b.n	800f70e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2202      	movs	r2, #2
 800f684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a23      	ldr	r2, [pc, #140]	@ (800f71c <HAL_TIM_Base_Start+0xb4>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d022      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f69a:	d01d      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a1f      	ldr	r2, [pc, #124]	@ (800f720 <HAL_TIM_Base_Start+0xb8>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d018      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a1e      	ldr	r2, [pc, #120]	@ (800f724 <HAL_TIM_Base_Start+0xbc>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d013      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a1c      	ldr	r2, [pc, #112]	@ (800f728 <HAL_TIM_Base_Start+0xc0>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d00e      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a1b      	ldr	r2, [pc, #108]	@ (800f72c <HAL_TIM_Base_Start+0xc4>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d009      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a19      	ldr	r2, [pc, #100]	@ (800f730 <HAL_TIM_Base_Start+0xc8>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d004      	beq.n	800f6d8 <HAL_TIM_Base_Start+0x70>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4a18      	ldr	r2, [pc, #96]	@ (800f734 <HAL_TIM_Base_Start+0xcc>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d111      	bne.n	800f6fc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	f003 0307 	and.w	r3, r3, #7
 800f6e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2b06      	cmp	r3, #6
 800f6e8:	d010      	beq.n	800f70c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f042 0201 	orr.w	r2, r2, #1
 800f6f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6fa:	e007      	b.n	800f70c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f042 0201 	orr.w	r2, r2, #1
 800f70a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	40010000 	.word	0x40010000
 800f720:	40000400 	.word	0x40000400
 800f724:	40000800 	.word	0x40000800
 800f728:	40000c00 	.word	0x40000c00
 800f72c:	40010400 	.word	0x40010400
 800f730:	40014000 	.word	0x40014000
 800f734:	40001800 	.word	0x40001800

0800f738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d001      	beq.n	800f750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f74c:	2301      	movs	r3, #1
 800f74e:	e04e      	b.n	800f7ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	68da      	ldr	r2, [r3, #12]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f042 0201 	orr.w	r2, r2, #1
 800f766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a23      	ldr	r2, [pc, #140]	@ (800f7fc <HAL_TIM_Base_Start_IT+0xc4>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d022      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f77a:	d01d      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a1f      	ldr	r2, [pc, #124]	@ (800f800 <HAL_TIM_Base_Start_IT+0xc8>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d018      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a1e      	ldr	r2, [pc, #120]	@ (800f804 <HAL_TIM_Base_Start_IT+0xcc>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d013      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a1c      	ldr	r2, [pc, #112]	@ (800f808 <HAL_TIM_Base_Start_IT+0xd0>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d00e      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a1b      	ldr	r2, [pc, #108]	@ (800f80c <HAL_TIM_Base_Start_IT+0xd4>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d009      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a19      	ldr	r2, [pc, #100]	@ (800f810 <HAL_TIM_Base_Start_IT+0xd8>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d004      	beq.n	800f7b8 <HAL_TIM_Base_Start_IT+0x80>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a18      	ldr	r2, [pc, #96]	@ (800f814 <HAL_TIM_Base_Start_IT+0xdc>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d111      	bne.n	800f7dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	f003 0307 	and.w	r3, r3, #7
 800f7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b06      	cmp	r3, #6
 800f7c8:	d010      	beq.n	800f7ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f042 0201 	orr.w	r2, r2, #1
 800f7d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7da:	e007      	b.n	800f7ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f042 0201 	orr.w	r2, r2, #1
 800f7ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3714      	adds	r7, #20
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	40010000 	.word	0x40010000
 800f800:	40000400 	.word	0x40000400
 800f804:	40000800 	.word	0x40000800
 800f808:	40000c00 	.word	0x40000c00
 800f80c:	40010400 	.word	0x40010400
 800f810:	40014000 	.word	0x40014000
 800f814:	40001800 	.word	0x40001800

0800f818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	e041      	b.n	800f8ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f830:	b2db      	uxtb	r3, r3
 800f832:	2b00      	cmp	r3, #0
 800f834:	d106      	bne.n	800f844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f88d 	bl	800f95e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2202      	movs	r2, #2
 800f848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	3304      	adds	r3, #4
 800f854:	4619      	mov	r1, r3
 800f856:	4610      	mov	r0, r2
 800f858:	f000 fc00 	bl	801005c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	6a1a      	ldr	r2, [r3, #32]
 800f8cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10f      	bne.n	800f8f6 <HAL_TIM_PWM_DeInit+0x40>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	6a1a      	ldr	r2, [r3, #32]
 800f8dc:	f240 4344 	movw	r3, #1092	@ 0x444
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d107      	bne.n	800f8f6 <HAL_TIM_PWM_DeInit+0x40>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f022 0201 	bic.w	r2, r2, #1
 800f8f4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f83b 	bl	800f972 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f95e:	b480      	push	{r7}
 800f960:	b083      	sub	sp, #12
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f966:	bf00      	nop
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800f972:	b480      	push	{r7}
 800f974:	b083      	sub	sp, #12
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800f97a:	bf00      	nop
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
	...

0800f988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d109      	bne.n	800f9ac <HAL_TIM_PWM_Start+0x24>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	bf14      	ite	ne
 800f9a4:	2301      	movne	r3, #1
 800f9a6:	2300      	moveq	r3, #0
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	e022      	b.n	800f9f2 <HAL_TIM_PWM_Start+0x6a>
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	2b04      	cmp	r3, #4
 800f9b0:	d109      	bne.n	800f9c6 <HAL_TIM_PWM_Start+0x3e>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	bf14      	ite	ne
 800f9be:	2301      	movne	r3, #1
 800f9c0:	2300      	moveq	r3, #0
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	e015      	b.n	800f9f2 <HAL_TIM_PWM_Start+0x6a>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	2b08      	cmp	r3, #8
 800f9ca:	d109      	bne.n	800f9e0 <HAL_TIM_PWM_Start+0x58>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	bf14      	ite	ne
 800f9d8:	2301      	movne	r3, #1
 800f9da:	2300      	moveq	r3, #0
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	e008      	b.n	800f9f2 <HAL_TIM_PWM_Start+0x6a>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	bf14      	ite	ne
 800f9ec:	2301      	movne	r3, #1
 800f9ee:	2300      	moveq	r3, #0
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e07c      	b.n	800faf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d104      	bne.n	800fa0a <HAL_TIM_PWM_Start+0x82>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2202      	movs	r2, #2
 800fa04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fa08:	e013      	b.n	800fa32 <HAL_TIM_PWM_Start+0xaa>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b04      	cmp	r3, #4
 800fa0e:	d104      	bne.n	800fa1a <HAL_TIM_PWM_Start+0x92>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2202      	movs	r2, #2
 800fa14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fa18:	e00b      	b.n	800fa32 <HAL_TIM_PWM_Start+0xaa>
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	2b08      	cmp	r3, #8
 800fa1e:	d104      	bne.n	800fa2a <HAL_TIM_PWM_Start+0xa2>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2202      	movs	r2, #2
 800fa24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fa28:	e003      	b.n	800fa32 <HAL_TIM_PWM_Start+0xaa>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2201      	movs	r2, #1
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f000 fe04 	bl	8010648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a2d      	ldr	r2, [pc, #180]	@ (800fafc <HAL_TIM_PWM_Start+0x174>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d004      	beq.n	800fa54 <HAL_TIM_PWM_Start+0xcc>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4a2c      	ldr	r2, [pc, #176]	@ (800fb00 <HAL_TIM_PWM_Start+0x178>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d101      	bne.n	800fa58 <HAL_TIM_PWM_Start+0xd0>
 800fa54:	2301      	movs	r3, #1
 800fa56:	e000      	b.n	800fa5a <HAL_TIM_PWM_Start+0xd2>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d007      	beq.n	800fa6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fa6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a22      	ldr	r2, [pc, #136]	@ (800fafc <HAL_TIM_PWM_Start+0x174>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d022      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa80:	d01d      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a1f      	ldr	r2, [pc, #124]	@ (800fb04 <HAL_TIM_PWM_Start+0x17c>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d018      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a1d      	ldr	r2, [pc, #116]	@ (800fb08 <HAL_TIM_PWM_Start+0x180>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d013      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4a1c      	ldr	r2, [pc, #112]	@ (800fb0c <HAL_TIM_PWM_Start+0x184>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d00e      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a16      	ldr	r2, [pc, #88]	@ (800fb00 <HAL_TIM_PWM_Start+0x178>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d009      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a18      	ldr	r2, [pc, #96]	@ (800fb10 <HAL_TIM_PWM_Start+0x188>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d004      	beq.n	800fabe <HAL_TIM_PWM_Start+0x136>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4a16      	ldr	r2, [pc, #88]	@ (800fb14 <HAL_TIM_PWM_Start+0x18c>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d111      	bne.n	800fae2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	f003 0307 	and.w	r3, r3, #7
 800fac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b06      	cmp	r3, #6
 800face:	d010      	beq.n	800faf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f042 0201 	orr.w	r2, r2, #1
 800fade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fae0:	e007      	b.n	800faf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f042 0201 	orr.w	r2, r2, #1
 800faf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	40010000 	.word	0x40010000
 800fb00:	40010400 	.word	0x40010400
 800fb04:	40000400 	.word	0x40000400
 800fb08:	40000800 	.word	0x40000800
 800fb0c:	40000c00 	.word	0x40000c00
 800fb10:	40014000 	.word	0x40014000
 800fb14:	40001800 	.word	0x40001800

0800fb18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	691b      	ldr	r3, [r3, #16]
 800fb2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	f003 0302 	and.w	r3, r3, #2
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d020      	beq.n	800fb7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f003 0302 	and.w	r3, r3, #2
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01b      	beq.n	800fb7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f06f 0202 	mvn.w	r2, #2
 800fb4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2201      	movs	r2, #1
 800fb52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	699b      	ldr	r3, [r3, #24]
 800fb5a:	f003 0303 	and.w	r3, r3, #3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fa5b 	bl	801001e <HAL_TIM_IC_CaptureCallback>
 800fb68:	e005      	b.n	800fb76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fa4d 	bl	801000a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fa5e 	bl	8010032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d020      	beq.n	800fbc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d01b      	beq.n	800fbc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f06f 0204 	mvn.w	r2, #4
 800fb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2202      	movs	r2, #2
 800fb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fa35 	bl	801001e <HAL_TIM_IC_CaptureCallback>
 800fbb4:	e005      	b.n	800fbc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 fa27 	bl	801000a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fa38 	bl	8010032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	f003 0308 	and.w	r3, r3, #8
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d020      	beq.n	800fc14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f003 0308 	and.w	r3, r3, #8
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d01b      	beq.n	800fc14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f06f 0208 	mvn.w	r2, #8
 800fbe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2204      	movs	r2, #4
 800fbea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	69db      	ldr	r3, [r3, #28]
 800fbf2:	f003 0303 	and.w	r3, r3, #3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d003      	beq.n	800fc02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fa0f 	bl	801001e <HAL_TIM_IC_CaptureCallback>
 800fc00:	e005      	b.n	800fc0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 fa01 	bl	801000a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fa12 	bl	8010032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	f003 0310 	and.w	r3, r3, #16
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d020      	beq.n	800fc60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f003 0310 	and.w	r3, r3, #16
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d01b      	beq.n	800fc60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f06f 0210 	mvn.w	r2, #16
 800fc30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2208      	movs	r2, #8
 800fc36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	69db      	ldr	r3, [r3, #28]
 800fc3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d003      	beq.n	800fc4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f9e9 	bl	801001e <HAL_TIM_IC_CaptureCallback>
 800fc4c:	e005      	b.n	800fc5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f9db 	bl	801000a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 f9ec 	bl	8010032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	f003 0301 	and.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00c      	beq.n	800fc84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f003 0301 	and.w	r3, r3, #1
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d007      	beq.n	800fc84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f06f 0201 	mvn.w	r2, #1
 800fc7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7fa f9a2 	bl	8009fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00c      	beq.n	800fca8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d007      	beq.n	800fca8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fd7c 	bl	80107a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00c      	beq.n	800fccc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d007      	beq.n	800fccc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fcc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f9bd 	bl	8010046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	f003 0320 	and.w	r3, r3, #32
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00c      	beq.n	800fcf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f003 0320 	and.w	r3, r3, #32
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d007      	beq.n	800fcf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f06f 0220 	mvn.w	r2, #32
 800fce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fd4e 	bl	801078c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcf0:	bf00      	nop
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd04:	2300      	movs	r3, #0
 800fd06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d101      	bne.n	800fd16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fd12:	2302      	movs	r3, #2
 800fd14:	e0ae      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2b0c      	cmp	r3, #12
 800fd22:	f200 809f 	bhi.w	800fe64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fd26:	a201      	add	r2, pc, #4	@ (adr r2, 800fd2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd2c:	0800fd61 	.word	0x0800fd61
 800fd30:	0800fe65 	.word	0x0800fe65
 800fd34:	0800fe65 	.word	0x0800fe65
 800fd38:	0800fe65 	.word	0x0800fe65
 800fd3c:	0800fda1 	.word	0x0800fda1
 800fd40:	0800fe65 	.word	0x0800fe65
 800fd44:	0800fe65 	.word	0x0800fe65
 800fd48:	0800fe65 	.word	0x0800fe65
 800fd4c:	0800fde3 	.word	0x0800fde3
 800fd50:	0800fe65 	.word	0x0800fe65
 800fd54:	0800fe65 	.word	0x0800fe65
 800fd58:	0800fe65 	.word	0x0800fe65
 800fd5c:	0800fe23 	.word	0x0800fe23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68b9      	ldr	r1, [r7, #8]
 800fd66:	4618      	mov	r0, r3
 800fd68:	f000 fa24 	bl	80101b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	699a      	ldr	r2, [r3, #24]
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f042 0208 	orr.w	r2, r2, #8
 800fd7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	699a      	ldr	r2, [r3, #24]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f022 0204 	bic.w	r2, r2, #4
 800fd8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6999      	ldr	r1, [r3, #24]
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	691a      	ldr	r2, [r3, #16]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	430a      	orrs	r2, r1
 800fd9c:	619a      	str	r2, [r3, #24]
      break;
 800fd9e:	e064      	b.n	800fe6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68b9      	ldr	r1, [r7, #8]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 fa74 	bl	8010294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	699a      	ldr	r2, [r3, #24]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fdba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	699a      	ldr	r2, [r3, #24]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fdca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	6999      	ldr	r1, [r3, #24]
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	691b      	ldr	r3, [r3, #16]
 800fdd6:	021a      	lsls	r2, r3, #8
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	430a      	orrs	r2, r1
 800fdde:	619a      	str	r2, [r3, #24]
      break;
 800fde0:	e043      	b.n	800fe6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 fac9 	bl	8010380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69da      	ldr	r2, [r3, #28]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f042 0208 	orr.w	r2, r2, #8
 800fdfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	69da      	ldr	r2, [r3, #28]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f022 0204 	bic.w	r2, r2, #4
 800fe0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	69d9      	ldr	r1, [r3, #28]
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	691a      	ldr	r2, [r3, #16]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	430a      	orrs	r2, r1
 800fe1e:	61da      	str	r2, [r3, #28]
      break;
 800fe20:	e023      	b.n	800fe6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	68b9      	ldr	r1, [r7, #8]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f000 fb1d 	bl	8010468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	69da      	ldr	r2, [r3, #28]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	69da      	ldr	r2, [r3, #28]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	69d9      	ldr	r1, [r3, #28]
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	021a      	lsls	r2, r3, #8
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	430a      	orrs	r2, r1
 800fe60:	61da      	str	r2, [r3, #28]
      break;
 800fe62:	e002      	b.n	800fe6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fe64:	2301      	movs	r3, #1
 800fe66:	75fb      	strb	r3, [r7, #23]
      break;
 800fe68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fe72:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3718      	adds	r7, #24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fe86:	2300      	movs	r3, #0
 800fe88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d101      	bne.n	800fe98 <HAL_TIM_ConfigClockSource+0x1c>
 800fe94:	2302      	movs	r3, #2
 800fe96:	e0b4      	b.n	8010002 <HAL_TIM_ConfigClockSource+0x186>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2202      	movs	r2, #2
 800fea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800feb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800febe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fed0:	d03e      	beq.n	800ff50 <HAL_TIM_ConfigClockSource+0xd4>
 800fed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fed6:	f200 8087 	bhi.w	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800feda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fede:	f000 8086 	beq.w	800ffee <HAL_TIM_ConfigClockSource+0x172>
 800fee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fee6:	d87f      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800fee8:	2b70      	cmp	r3, #112	@ 0x70
 800feea:	d01a      	beq.n	800ff22 <HAL_TIM_ConfigClockSource+0xa6>
 800feec:	2b70      	cmp	r3, #112	@ 0x70
 800feee:	d87b      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800fef0:	2b60      	cmp	r3, #96	@ 0x60
 800fef2:	d050      	beq.n	800ff96 <HAL_TIM_ConfigClockSource+0x11a>
 800fef4:	2b60      	cmp	r3, #96	@ 0x60
 800fef6:	d877      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800fef8:	2b50      	cmp	r3, #80	@ 0x50
 800fefa:	d03c      	beq.n	800ff76 <HAL_TIM_ConfigClockSource+0xfa>
 800fefc:	2b50      	cmp	r3, #80	@ 0x50
 800fefe:	d873      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800ff00:	2b40      	cmp	r3, #64	@ 0x40
 800ff02:	d058      	beq.n	800ffb6 <HAL_TIM_ConfigClockSource+0x13a>
 800ff04:	2b40      	cmp	r3, #64	@ 0x40
 800ff06:	d86f      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800ff08:	2b30      	cmp	r3, #48	@ 0x30
 800ff0a:	d064      	beq.n	800ffd6 <HAL_TIM_ConfigClockSource+0x15a>
 800ff0c:	2b30      	cmp	r3, #48	@ 0x30
 800ff0e:	d86b      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800ff10:	2b20      	cmp	r3, #32
 800ff12:	d060      	beq.n	800ffd6 <HAL_TIM_ConfigClockSource+0x15a>
 800ff14:	2b20      	cmp	r3, #32
 800ff16:	d867      	bhi.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d05c      	beq.n	800ffd6 <HAL_TIM_ConfigClockSource+0x15a>
 800ff1c:	2b10      	cmp	r3, #16
 800ff1e:	d05a      	beq.n	800ffd6 <HAL_TIM_ConfigClockSource+0x15a>
 800ff20:	e062      	b.n	800ffe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ff32:	f000 fb69 	bl	8010608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ff44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	609a      	str	r2, [r3, #8]
      break;
 800ff4e:	e04f      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ff60:	f000 fb52 	bl	8010608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	689a      	ldr	r2, [r3, #8]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff72:	609a      	str	r2, [r3, #8]
      break;
 800ff74:	e03c      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff82:	461a      	mov	r2, r3
 800ff84:	f000 fac6 	bl	8010514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2150      	movs	r1, #80	@ 0x50
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 fb1f 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800ff94:	e02c      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	f000 fae5 	bl	8010572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2160      	movs	r1, #96	@ 0x60
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f000 fb0f 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800ffb4:	e01c      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	f000 faa6 	bl	8010514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2140      	movs	r1, #64	@ 0x40
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 faff 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800ffd4:	e00c      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	4610      	mov	r0, r2
 800ffe2:	f000 faf6 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800ffe6:	e003      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	73fb      	strb	r3, [r7, #15]
      break;
 800ffec:	e000      	b.n	800fff0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ffee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010000:	7bfb      	ldrb	r3, [r7, #15]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801000a:	b480      	push	{r7}
 801000c:	b083      	sub	sp, #12
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010012:	bf00      	nop
 8010014:	370c      	adds	r7, #12
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801001e:	b480      	push	{r7}
 8010020:	b083      	sub	sp, #12
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010026:	bf00      	nop
 8010028:	370c      	adds	r7, #12
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr

08010032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010032:	b480      	push	{r7}
 8010034:	b083      	sub	sp, #12
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801003a:	bf00      	nop
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr

08010046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010046:	b480      	push	{r7}
 8010048:	b083      	sub	sp, #12
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801004e:	bf00      	nop
 8010050:	370c      	adds	r7, #12
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
	...

0801005c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4a46      	ldr	r2, [pc, #280]	@ (8010188 <TIM_Base_SetConfig+0x12c>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d013      	beq.n	801009c <TIM_Base_SetConfig+0x40>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801007a:	d00f      	beq.n	801009c <TIM_Base_SetConfig+0x40>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4a43      	ldr	r2, [pc, #268]	@ (801018c <TIM_Base_SetConfig+0x130>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d00b      	beq.n	801009c <TIM_Base_SetConfig+0x40>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4a42      	ldr	r2, [pc, #264]	@ (8010190 <TIM_Base_SetConfig+0x134>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d007      	beq.n	801009c <TIM_Base_SetConfig+0x40>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4a41      	ldr	r2, [pc, #260]	@ (8010194 <TIM_Base_SetConfig+0x138>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d003      	beq.n	801009c <TIM_Base_SetConfig+0x40>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a40      	ldr	r2, [pc, #256]	@ (8010198 <TIM_Base_SetConfig+0x13c>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d108      	bne.n	80100ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	68fa      	ldr	r2, [r7, #12]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4a35      	ldr	r2, [pc, #212]	@ (8010188 <TIM_Base_SetConfig+0x12c>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d02b      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100bc:	d027      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4a32      	ldr	r2, [pc, #200]	@ (801018c <TIM_Base_SetConfig+0x130>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d023      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a31      	ldr	r2, [pc, #196]	@ (8010190 <TIM_Base_SetConfig+0x134>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d01f      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4a30      	ldr	r2, [pc, #192]	@ (8010194 <TIM_Base_SetConfig+0x138>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d01b      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4a2f      	ldr	r2, [pc, #188]	@ (8010198 <TIM_Base_SetConfig+0x13c>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d017      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a2e      	ldr	r2, [pc, #184]	@ (801019c <TIM_Base_SetConfig+0x140>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d013      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a2d      	ldr	r2, [pc, #180]	@ (80101a0 <TIM_Base_SetConfig+0x144>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d00f      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4a2c      	ldr	r2, [pc, #176]	@ (80101a4 <TIM_Base_SetConfig+0x148>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d00b      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4a2b      	ldr	r2, [pc, #172]	@ (80101a8 <TIM_Base_SetConfig+0x14c>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d007      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4a2a      	ldr	r2, [pc, #168]	@ (80101ac <TIM_Base_SetConfig+0x150>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d003      	beq.n	801010e <TIM_Base_SetConfig+0xb2>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a29      	ldr	r2, [pc, #164]	@ (80101b0 <TIM_Base_SetConfig+0x154>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d108      	bne.n	8010120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	4313      	orrs	r3, r2
 801011e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	695b      	ldr	r3, [r3, #20]
 801012a:	4313      	orrs	r3, r2
 801012c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	689a      	ldr	r2, [r3, #8]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a10      	ldr	r2, [pc, #64]	@ (8010188 <TIM_Base_SetConfig+0x12c>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d003      	beq.n	8010154 <TIM_Base_SetConfig+0xf8>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a12      	ldr	r2, [pc, #72]	@ (8010198 <TIM_Base_SetConfig+0x13c>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d103      	bne.n	801015c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	691a      	ldr	r2, [r3, #16]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2201      	movs	r2, #1
 8010160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	691b      	ldr	r3, [r3, #16]
 8010166:	f003 0301 	and.w	r3, r3, #1
 801016a:	2b01      	cmp	r3, #1
 801016c:	d105      	bne.n	801017a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	691b      	ldr	r3, [r3, #16]
 8010172:	f023 0201 	bic.w	r2, r3, #1
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	611a      	str	r2, [r3, #16]
  }
}
 801017a:	bf00      	nop
 801017c:	3714      	adds	r7, #20
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	40010000 	.word	0x40010000
 801018c:	40000400 	.word	0x40000400
 8010190:	40000800 	.word	0x40000800
 8010194:	40000c00 	.word	0x40000c00
 8010198:	40010400 	.word	0x40010400
 801019c:	40014000 	.word	0x40014000
 80101a0:	40014400 	.word	0x40014400
 80101a4:	40014800 	.word	0x40014800
 80101a8:	40001800 	.word	0x40001800
 80101ac:	40001c00 	.word	0x40001c00
 80101b0:	40002000 	.word	0x40002000

080101b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b087      	sub	sp, #28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6a1b      	ldr	r3, [r3, #32]
 80101c8:	f023 0201 	bic.w	r2, r3, #1
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	699b      	ldr	r3, [r3, #24]
 80101da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f023 0303 	bic.w	r3, r3, #3
 80101ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	f023 0302 	bic.w	r3, r3, #2
 80101fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	697a      	ldr	r2, [r7, #20]
 8010204:	4313      	orrs	r3, r2
 8010206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a20      	ldr	r2, [pc, #128]	@ (801028c <TIM_OC1_SetConfig+0xd8>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d003      	beq.n	8010218 <TIM_OC1_SetConfig+0x64>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a1f      	ldr	r2, [pc, #124]	@ (8010290 <TIM_OC1_SetConfig+0xdc>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d10c      	bne.n	8010232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	f023 0308 	bic.w	r3, r3, #8
 801021e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	697a      	ldr	r2, [r7, #20]
 8010226:	4313      	orrs	r3, r2
 8010228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	f023 0304 	bic.w	r3, r3, #4
 8010230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a15      	ldr	r2, [pc, #84]	@ (801028c <TIM_OC1_SetConfig+0xd8>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d003      	beq.n	8010242 <TIM_OC1_SetConfig+0x8e>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a14      	ldr	r2, [pc, #80]	@ (8010290 <TIM_OC1_SetConfig+0xdc>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d111      	bne.n	8010266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	695b      	ldr	r3, [r3, #20]
 8010256:	693a      	ldr	r2, [r7, #16]
 8010258:	4313      	orrs	r3, r2
 801025a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	693a      	ldr	r2, [r7, #16]
 8010262:	4313      	orrs	r3, r2
 8010264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	693a      	ldr	r2, [r7, #16]
 801026a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	685a      	ldr	r2, [r3, #4]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	621a      	str	r2, [r3, #32]
}
 8010280:	bf00      	nop
 8010282:	371c      	adds	r7, #28
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	40010000 	.word	0x40010000
 8010290:	40010400 	.word	0x40010400

08010294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010294:	b480      	push	{r7}
 8010296:	b087      	sub	sp, #28
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6a1b      	ldr	r3, [r3, #32]
 80102a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6a1b      	ldr	r3, [r3, #32]
 80102a8:	f023 0210 	bic.w	r2, r3, #16
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80102c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80102ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f023 0320 	bic.w	r3, r3, #32
 80102de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	011b      	lsls	r3, r3, #4
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a22      	ldr	r2, [pc, #136]	@ (8010378 <TIM_OC2_SetConfig+0xe4>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d003      	beq.n	80102fc <TIM_OC2_SetConfig+0x68>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a21      	ldr	r2, [pc, #132]	@ (801037c <TIM_OC2_SetConfig+0xe8>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d10d      	bne.n	8010318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	011b      	lsls	r3, r3, #4
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	4313      	orrs	r3, r2
 801030e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a17      	ldr	r2, [pc, #92]	@ (8010378 <TIM_OC2_SetConfig+0xe4>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d003      	beq.n	8010328 <TIM_OC2_SetConfig+0x94>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4a16      	ldr	r2, [pc, #88]	@ (801037c <TIM_OC2_SetConfig+0xe8>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d113      	bne.n	8010350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801032e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	695b      	ldr	r3, [r3, #20]
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	4313      	orrs	r3, r2
 8010342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	4313      	orrs	r3, r2
 801034e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	693a      	ldr	r2, [r7, #16]
 8010354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	685a      	ldr	r2, [r3, #4]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	621a      	str	r2, [r3, #32]
}
 801036a:	bf00      	nop
 801036c:	371c      	adds	r7, #28
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	40010000 	.word	0x40010000
 801037c:	40010400 	.word	0x40010400

08010380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010380:	b480      	push	{r7}
 8010382:	b087      	sub	sp, #28
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6a1b      	ldr	r3, [r3, #32]
 8010394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f023 0303 	bic.w	r3, r3, #3
 80103b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	4313      	orrs	r3, r2
 80103c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80103c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	021b      	lsls	r3, r3, #8
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a21      	ldr	r2, [pc, #132]	@ (8010460 <TIM_OC3_SetConfig+0xe0>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d003      	beq.n	80103e6 <TIM_OC3_SetConfig+0x66>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4a20      	ldr	r2, [pc, #128]	@ (8010464 <TIM_OC3_SetConfig+0xe4>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d10d      	bne.n	8010402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80103ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	021b      	lsls	r3, r3, #8
 80103f4:	697a      	ldr	r2, [r7, #20]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a16      	ldr	r2, [pc, #88]	@ (8010460 <TIM_OC3_SetConfig+0xe0>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d003      	beq.n	8010412 <TIM_OC3_SetConfig+0x92>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4a15      	ldr	r2, [pc, #84]	@ (8010464 <TIM_OC3_SetConfig+0xe4>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d113      	bne.n	801043a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	695b      	ldr	r3, [r3, #20]
 8010426:	011b      	lsls	r3, r3, #4
 8010428:	693a      	ldr	r2, [r7, #16]
 801042a:	4313      	orrs	r3, r2
 801042c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	011b      	lsls	r3, r3, #4
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	4313      	orrs	r3, r2
 8010438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	685a      	ldr	r2, [r3, #4]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	697a      	ldr	r2, [r7, #20]
 8010452:	621a      	str	r2, [r3, #32]
}
 8010454:	bf00      	nop
 8010456:	371c      	adds	r7, #28
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr
 8010460:	40010000 	.word	0x40010000
 8010464:	40010400 	.word	0x40010400

08010468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010468:	b480      	push	{r7}
 801046a:	b087      	sub	sp, #28
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1b      	ldr	r3, [r3, #32]
 8010476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a1b      	ldr	r3, [r3, #32]
 801047c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	69db      	ldr	r3, [r3, #28]
 801048e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801049e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80104b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	031b      	lsls	r3, r3, #12
 80104ba:	693a      	ldr	r2, [r7, #16]
 80104bc:	4313      	orrs	r3, r2
 80104be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a12      	ldr	r2, [pc, #72]	@ (801050c <TIM_OC4_SetConfig+0xa4>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d003      	beq.n	80104d0 <TIM_OC4_SetConfig+0x68>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4a11      	ldr	r2, [pc, #68]	@ (8010510 <TIM_OC4_SetConfig+0xa8>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d109      	bne.n	80104e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80104d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	695b      	ldr	r3, [r3, #20]
 80104dc:	019b      	lsls	r3, r3, #6
 80104de:	697a      	ldr	r2, [r7, #20]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	697a      	ldr	r2, [r7, #20]
 80104e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	685a      	ldr	r2, [r3, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	621a      	str	r2, [r3, #32]
}
 80104fe:	bf00      	nop
 8010500:	371c      	adds	r7, #28
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	40010000 	.word	0x40010000
 8010510:	40010400 	.word	0x40010400

08010514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010514:	b480      	push	{r7}
 8010516:	b087      	sub	sp, #28
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6a1b      	ldr	r3, [r3, #32]
 8010524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	f023 0201 	bic.w	r2, r3, #1
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801053e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	011b      	lsls	r3, r3, #4
 8010544:	693a      	ldr	r2, [r7, #16]
 8010546:	4313      	orrs	r3, r2
 8010548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f023 030a 	bic.w	r3, r3, #10
 8010550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010552:	697a      	ldr	r2, [r7, #20]
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	4313      	orrs	r3, r2
 8010558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	697a      	ldr	r2, [r7, #20]
 8010564:	621a      	str	r2, [r3, #32]
}
 8010566:	bf00      	nop
 8010568:	371c      	adds	r7, #28
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010572:	b480      	push	{r7}
 8010574:	b087      	sub	sp, #28
 8010576:	af00      	add	r7, sp, #0
 8010578:	60f8      	str	r0, [r7, #12]
 801057a:	60b9      	str	r1, [r7, #8]
 801057c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6a1b      	ldr	r3, [r3, #32]
 8010588:	f023 0210 	bic.w	r2, r3, #16
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	699b      	ldr	r3, [r3, #24]
 8010594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801059c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	031b      	lsls	r3, r3, #12
 80105a2:	693a      	ldr	r2, [r7, #16]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80105ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	011b      	lsls	r3, r3, #4
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	621a      	str	r2, [r3, #32]
}
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80105d2:	b480      	push	{r7}
 80105d4:	b085      	sub	sp, #20
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4313      	orrs	r3, r2
 80105f0:	f043 0307 	orr.w	r3, r3, #7
 80105f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	609a      	str	r2, [r3, #8]
}
 80105fc:	bf00      	nop
 80105fe:	3714      	adds	r7, #20
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010608:	b480      	push	{r7}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	607a      	str	r2, [r7, #4]
 8010614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	021a      	lsls	r2, r3, #8
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	431a      	orrs	r2, r3
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	4313      	orrs	r3, r2
 8010630:	697a      	ldr	r2, [r7, #20]
 8010632:	4313      	orrs	r3, r2
 8010634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	697a      	ldr	r2, [r7, #20]
 801063a:	609a      	str	r2, [r3, #8]
}
 801063c:	bf00      	nop
 801063e:	371c      	adds	r7, #28
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010648:	b480      	push	{r7}
 801064a:	b087      	sub	sp, #28
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	f003 031f 	and.w	r3, r3, #31
 801065a:	2201      	movs	r2, #1
 801065c:	fa02 f303 	lsl.w	r3, r2, r3
 8010660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6a1a      	ldr	r2, [r3, #32]
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	43db      	mvns	r3, r3
 801066a:	401a      	ands	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6a1a      	ldr	r2, [r3, #32]
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	f003 031f 	and.w	r3, r3, #31
 801067a:	6879      	ldr	r1, [r7, #4]
 801067c:	fa01 f303 	lsl.w	r3, r1, r3
 8010680:	431a      	orrs	r2, r3
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	621a      	str	r2, [r3, #32]
}
 8010686:	bf00      	nop
 8010688:	371c      	adds	r7, #28
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
	...

08010694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d101      	bne.n	80106ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106a8:	2302      	movs	r3, #2
 80106aa:	e05a      	b.n	8010762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2201      	movs	r2, #1
 80106b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	4313      	orrs	r3, r2
 80106dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4a21      	ldr	r2, [pc, #132]	@ (8010770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d022      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106f8:	d01d      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4a1d      	ldr	r2, [pc, #116]	@ (8010774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010700:	4293      	cmp	r3, r2
 8010702:	d018      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4a1b      	ldr	r2, [pc, #108]	@ (8010778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d013      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a1a      	ldr	r2, [pc, #104]	@ (801077c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d00e      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4a18      	ldr	r2, [pc, #96]	@ (8010780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d009      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a17      	ldr	r2, [pc, #92]	@ (8010784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d004      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a15      	ldr	r2, [pc, #84]	@ (8010788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d10c      	bne.n	8010750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801073c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	4313      	orrs	r3, r2
 8010746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2201      	movs	r2, #1
 8010754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3714      	adds	r7, #20
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	40010000 	.word	0x40010000
 8010774:	40000400 	.word	0x40000400
 8010778:	40000800 	.word	0x40000800
 801077c:	40000c00 	.word	0x40000c00
 8010780:	40010400 	.word	0x40010400
 8010784:	40014000 	.word	0x40014000
 8010788:	40001800 	.word	0x40001800

0801078c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d101      	bne.n	80107c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
 80107c4:	e042      	b.n	801084c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d106      	bne.n	80107e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f7fb f820 	bl	800b820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2224      	movs	r2, #36	@ 0x24
 80107e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	68da      	ldr	r2, [r3, #12]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80107f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 ff5f 	bl	80116bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	691a      	ldr	r2, [r3, #16]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801080c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	695a      	ldr	r2, [r3, #20]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801081c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	68da      	ldr	r2, [r3, #12]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801082c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2220      	movs	r2, #32
 8010838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2220      	movs	r2, #32
 8010840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801084a:	2300      	movs	r3, #0
}
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d101      	bne.n	8010866 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010862:	2301      	movs	r3, #1
 8010864:	e024      	b.n	80108b0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2224      	movs	r2, #36	@ 0x24
 801086a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	68da      	ldr	r2, [r3, #12]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801087c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f7fb f884 	bl	800b98c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2200      	movs	r2, #0
 8010888:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08c      	sub	sp, #48	@ 0x30
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	4613      	mov	r3, r2
 80108c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b20      	cmp	r3, #32
 80108d0:	d156      	bne.n	8010980 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <HAL_UART_Transmit_DMA+0x26>
 80108d8:	88fb      	ldrh	r3, [r7, #6]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d101      	bne.n	80108e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80108de:	2301      	movs	r3, #1
 80108e0:	e04f      	b.n	8010982 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	88fa      	ldrh	r2, [r7, #6]
 80108ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	88fa      	ldrh	r2, [r7, #6]
 80108f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2221      	movs	r2, #33	@ 0x21
 80108fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010906:	4a21      	ldr	r2, [pc, #132]	@ (801098c <HAL_UART_Transmit_DMA+0xd4>)
 8010908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801090e:	4a20      	ldr	r2, [pc, #128]	@ (8010990 <HAL_UART_Transmit_DMA+0xd8>)
 8010910:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010916:	4a1f      	ldr	r2, [pc, #124]	@ (8010994 <HAL_UART_Transmit_DMA+0xdc>)
 8010918:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801091e:	2200      	movs	r2, #0
 8010920:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8010922:	f107 0308 	add.w	r3, r7, #8
 8010926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801092c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092e:	6819      	ldr	r1, [r3, #0]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	3304      	adds	r3, #4
 8010936:	461a      	mov	r2, r3
 8010938:	88fb      	ldrh	r3, [r7, #6]
 801093a:	f7fb fb51 	bl	800bfe0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010946:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	3314      	adds	r3, #20
 801094e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	e853 3f00 	ldrex	r3, [r3]
 8010956:	617b      	str	r3, [r7, #20]
   return(result);
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801095e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	3314      	adds	r3, #20
 8010966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010968:	627a      	str	r2, [r7, #36]	@ 0x24
 801096a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096c:	6a39      	ldr	r1, [r7, #32]
 801096e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010970:	e841 2300 	strex	r3, r2, [r1]
 8010974:	61fb      	str	r3, [r7, #28]
   return(result);
 8010976:	69fb      	ldr	r3, [r7, #28]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d1e5      	bne.n	8010948 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 801097c:	2300      	movs	r3, #0
 801097e:	e000      	b.n	8010982 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8010980:	2302      	movs	r3, #2
  }
}
 8010982:	4618      	mov	r0, r3
 8010984:	3730      	adds	r7, #48	@ 0x30
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	08010f49 	.word	0x08010f49
 8010990:	08010fe3 	.word	0x08010fe3
 8010994:	08011167 	.word	0x08011167

08010998 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	4613      	mov	r3, r2
 80109a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	2b20      	cmp	r3, #32
 80109b0:	d112      	bne.n	80109d8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <HAL_UART_Receive_DMA+0x26>
 80109b8:	88fb      	ldrh	r3, [r7, #6]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d101      	bne.n	80109c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80109be:	2301      	movs	r3, #1
 80109c0:	e00b      	b.n	80109da <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2200      	movs	r2, #0
 80109c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80109c8:	88fb      	ldrh	r3, [r7, #6]
 80109ca:	461a      	mov	r2, r3
 80109cc:	68b9      	ldr	r1, [r7, #8]
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f000 fc14 	bl	80111fc <UART_Start_Receive_DMA>
 80109d4:	4603      	mov	r3, r0
 80109d6:	e000      	b.n	80109da <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80109d8:	2302      	movs	r3, #2
  }
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
	...

080109e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b0ba      	sub	sp, #232	@ 0xe8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	695b      	ldr	r3, [r3, #20]
 8010a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010a10:	2300      	movs	r3, #0
 8010a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a1a:	f003 030f 	and.w	r3, r3, #15
 8010a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10f      	bne.n	8010a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a2e:	f003 0320 	and.w	r3, r3, #32
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d009      	beq.n	8010a4a <HAL_UART_IRQHandler+0x66>
 8010a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a3a:	f003 0320 	and.w	r3, r3, #32
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d003      	beq.n	8010a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 fd7b 	bl	801153e <UART_Receive_IT>
      return;
 8010a48:	e25b      	b.n	8010f02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f000 80de 	beq.w	8010c10 <HAL_UART_IRQHandler+0x22c>
 8010a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a58:	f003 0301 	and.w	r3, r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d106      	bne.n	8010a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f000 80d1 	beq.w	8010c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00b      	beq.n	8010a92 <HAL_UART_IRQHandler+0xae>
 8010a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d005      	beq.n	8010a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a8a:	f043 0201 	orr.w	r2, r3, #1
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a96:	f003 0304 	and.w	r3, r3, #4
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d00b      	beq.n	8010ab6 <HAL_UART_IRQHandler+0xd2>
 8010a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010aa2:	f003 0301 	and.w	r3, r3, #1
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d005      	beq.n	8010ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010aae:	f043 0202 	orr.w	r2, r3, #2
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010aba:	f003 0302 	and.w	r3, r3, #2
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00b      	beq.n	8010ada <HAL_UART_IRQHandler+0xf6>
 8010ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010ac6:	f003 0301 	and.w	r3, r3, #1
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d005      	beq.n	8010ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ad2:	f043 0204 	orr.w	r2, r3, #4
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ade:	f003 0308 	and.w	r3, r3, #8
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d011      	beq.n	8010b0a <HAL_UART_IRQHandler+0x126>
 8010ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010aea:	f003 0320 	and.w	r3, r3, #32
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d105      	bne.n	8010afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010af6:	f003 0301 	and.w	r3, r3, #1
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d005      	beq.n	8010b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b02:	f043 0208 	orr.w	r2, r3, #8
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 81f2 	beq.w	8010ef8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b18:	f003 0320 	and.w	r3, r3, #32
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d008      	beq.n	8010b32 <HAL_UART_IRQHandler+0x14e>
 8010b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b24:	f003 0320 	and.w	r3, r3, #32
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d002      	beq.n	8010b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 fd06 	bl	801153e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	695b      	ldr	r3, [r3, #20]
 8010b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b3c:	2b40      	cmp	r3, #64	@ 0x40
 8010b3e:	bf0c      	ite	eq
 8010b40:	2301      	moveq	r3, #1
 8010b42:	2300      	movne	r3, #0
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b4e:	f003 0308 	and.w	r3, r3, #8
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d103      	bne.n	8010b5e <HAL_UART_IRQHandler+0x17a>
 8010b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d04f      	beq.n	8010bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 fc0e 	bl	8011380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	695b      	ldr	r3, [r3, #20]
 8010b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b6e:	2b40      	cmp	r3, #64	@ 0x40
 8010b70:	d141      	bne.n	8010bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	3314      	adds	r3, #20
 8010b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010b80:	e853 3f00 	ldrex	r3, [r3]
 8010b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3314      	adds	r3, #20
 8010b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010bae:	e841 2300 	strex	r3, r2, [r1]
 8010bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1d9      	bne.n	8010b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d013      	beq.n	8010bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bca:	4a7e      	ldr	r2, [pc, #504]	@ (8010dc4 <HAL_UART_IRQHandler+0x3e0>)
 8010bcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fb facc 	bl	800c170 <HAL_DMA_Abort_IT>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d016      	beq.n	8010c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010be8:	4610      	mov	r0, r2
 8010bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bec:	e00e      	b.n	8010c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7fa ff32 	bl	800ba58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bf4:	e00a      	b.n	8010c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7fa ff2e 	bl	800ba58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bfc:	e006      	b.n	8010c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7fa ff2a 	bl	800ba58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8010c0a:	e175      	b.n	8010ef8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c0c:	bf00      	nop
    return;
 8010c0e:	e173      	b.n	8010ef8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	f040 814f 	bne.w	8010eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c1e:	f003 0310 	and.w	r3, r3, #16
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f000 8148 	beq.w	8010eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c2c:	f003 0310 	and.w	r3, r3, #16
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f000 8141 	beq.w	8010eb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010c36:	2300      	movs	r3, #0
 8010c38:	60bb      	str	r3, [r7, #8]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	60bb      	str	r3, [r7, #8]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	60bb      	str	r3, [r7, #8]
 8010c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	695b      	ldr	r3, [r3, #20]
 8010c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c56:	2b40      	cmp	r3, #64	@ 0x40
 8010c58:	f040 80b6 	bne.w	8010dc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	f000 8145 	beq.w	8010efc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	f080 813e 	bcs.w	8010efc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010c86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c8c:	69db      	ldr	r3, [r3, #28]
 8010c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c92:	f000 8088 	beq.w	8010da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	330c      	adds	r3, #12
 8010c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ca4:	e853 3f00 	ldrex	r3, [r3]
 8010ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	330c      	adds	r3, #12
 8010cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010cd2:	e841 2300 	strex	r3, r2, [r1]
 8010cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1d9      	bne.n	8010c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	3314      	adds	r3, #20
 8010ce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010cec:	e853 3f00 	ldrex	r3, [r3]
 8010cf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010cf4:	f023 0301 	bic.w	r3, r3, #1
 8010cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3314      	adds	r3, #20
 8010d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010d06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010d12:	e841 2300 	strex	r3, r2, [r1]
 8010d16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010d18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d1e1      	bne.n	8010ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3314      	adds	r3, #20
 8010d24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010d28:	e853 3f00 	ldrex	r3, [r3]
 8010d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	3314      	adds	r3, #20
 8010d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010d42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010d44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010d4a:	e841 2300 	strex	r3, r2, [r1]
 8010d4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d1e3      	bne.n	8010d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2220      	movs	r2, #32
 8010d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	330c      	adds	r3, #12
 8010d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d6e:	e853 3f00 	ldrex	r3, [r3]
 8010d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d76:	f023 0310 	bic.w	r3, r3, #16
 8010d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	330c      	adds	r3, #12
 8010d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010d88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010d8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d90:	e841 2300 	strex	r3, r2, [r1]
 8010d94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1e3      	bne.n	8010d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fb f975 	bl	800c090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2202      	movs	r2, #2
 8010daa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 f8b7 	bl	8010f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010dc2:	e09b      	b.n	8010efc <HAL_UART_IRQHandler+0x518>
 8010dc4:	08011447 	.word	0x08011447
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f000 808e 	beq.w	8010f00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f000 8089 	beq.w	8010f00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	330c      	adds	r3, #12
 8010df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	e853 3f00 	ldrex	r3, [r3]
 8010dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	330c      	adds	r3, #12
 8010e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8010e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e1a:	e841 2300 	strex	r3, r2, [r1]
 8010e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1e3      	bne.n	8010dee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3314      	adds	r3, #20
 8010e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e30:	e853 3f00 	ldrex	r3, [r3]
 8010e34:	623b      	str	r3, [r7, #32]
   return(result);
 8010e36:	6a3b      	ldr	r3, [r7, #32]
 8010e38:	f023 0301 	bic.w	r3, r3, #1
 8010e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	3314      	adds	r3, #20
 8010e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8010e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e52:	e841 2300 	strex	r3, r2, [r1]
 8010e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1e3      	bne.n	8010e26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2220      	movs	r2, #32
 8010e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	330c      	adds	r3, #12
 8010e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	e853 3f00 	ldrex	r3, [r3]
 8010e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f023 0310 	bic.w	r3, r3, #16
 8010e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	330c      	adds	r3, #12
 8010e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010e90:	61fa      	str	r2, [r7, #28]
 8010e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e94:	69b9      	ldr	r1, [r7, #24]
 8010e96:	69fa      	ldr	r2, [r7, #28]
 8010e98:	e841 2300 	strex	r3, r2, [r1]
 8010e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e3      	bne.n	8010e6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2202      	movs	r2, #2
 8010ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010eae:	4619      	mov	r1, r3
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 f83d 	bl	8010f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010eb6:	e023      	b.n	8010f00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d009      	beq.n	8010ed8 <HAL_UART_IRQHandler+0x4f4>
 8010ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d003      	beq.n	8010ed8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 facc 	bl	801146e <UART_Transmit_IT>
    return;
 8010ed6:	e014      	b.n	8010f02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00e      	beq.n	8010f02 <HAL_UART_IRQHandler+0x51e>
 8010ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d008      	beq.n	8010f02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f000 fb0c 	bl	801150e <UART_EndTransmit_IT>
    return;
 8010ef6:	e004      	b.n	8010f02 <HAL_UART_IRQHandler+0x51e>
    return;
 8010ef8:	bf00      	nop
 8010efa:	e002      	b.n	8010f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8010efc:	bf00      	nop
 8010efe:	e000      	b.n	8010f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8010f00:	bf00      	nop
  }
}
 8010f02:	37e8      	adds	r7, #232	@ 0xe8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010f10:	bf00      	nop
 8010f12:	370c      	adds	r7, #12
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010f24:	bf00      	nop
 8010f26:	370c      	adds	r7, #12
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f3c:	bf00      	nop
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr

08010f48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b090      	sub	sp, #64	@ 0x40
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d137      	bne.n	8010fd4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f66:	2200      	movs	r2, #0
 8010f68:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	3314      	adds	r3, #20
 8010f70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f74:	e853 3f00 	ldrex	r3, [r3]
 8010f78:	623b      	str	r3, [r7, #32]
   return(result);
 8010f7a:	6a3b      	ldr	r3, [r7, #32]
 8010f7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	3314      	adds	r3, #20
 8010f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8010f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f92:	e841 2300 	strex	r3, r2, [r1]
 8010f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d1e5      	bne.n	8010f6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	330c      	adds	r3, #12
 8010fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	e853 3f00 	ldrex	r3, [r3]
 8010fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	330c      	adds	r3, #12
 8010fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fbe:	61fa      	str	r2, [r7, #28]
 8010fc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc2:	69b9      	ldr	r1, [r7, #24]
 8010fc4:	69fa      	ldr	r2, [r7, #28]
 8010fc6:	e841 2300 	strex	r3, r2, [r1]
 8010fca:	617b      	str	r3, [r7, #20]
   return(result);
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d1e5      	bne.n	8010f9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010fd2:	e002      	b.n	8010fda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010fd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010fd6:	f7fa fd09 	bl	800b9ec <HAL_UART_TxCpltCallback>
}
 8010fda:	bf00      	nop
 8010fdc:	3740      	adds	r7, #64	@ 0x40
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}

08010fe2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b084      	sub	sp, #16
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010ff0:	68f8      	ldr	r0, [r7, #12]
 8010ff2:	f7ff ff89 	bl	8010f08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ff6:	bf00      	nop
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b09c      	sub	sp, #112	@ 0x70
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801100a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011016:	2b00      	cmp	r3, #0
 8011018:	d172      	bne.n	8011100 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801101a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801101c:	2200      	movs	r2, #0
 801101e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	330c      	adds	r3, #12
 8011026:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801102a:	e853 3f00 	ldrex	r3, [r3]
 801102e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011032:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011036:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	330c      	adds	r3, #12
 801103e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011040:	65ba      	str	r2, [r7, #88]	@ 0x58
 8011042:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011044:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011046:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011048:	e841 2300 	strex	r3, r2, [r1]
 801104c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801104e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011050:	2b00      	cmp	r3, #0
 8011052:	d1e5      	bne.n	8011020 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	3314      	adds	r3, #20
 801105a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801105e:	e853 3f00 	ldrex	r3, [r3]
 8011062:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011066:	f023 0301 	bic.w	r3, r3, #1
 801106a:	667b      	str	r3, [r7, #100]	@ 0x64
 801106c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	3314      	adds	r3, #20
 8011072:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011074:	647a      	str	r2, [r7, #68]	@ 0x44
 8011076:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011078:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801107a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801107c:	e841 2300 	strex	r3, r2, [r1]
 8011080:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1e5      	bne.n	8011054 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	3314      	adds	r3, #20
 801108e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011092:	e853 3f00 	ldrex	r3, [r3]
 8011096:	623b      	str	r3, [r7, #32]
   return(result);
 8011098:	6a3b      	ldr	r3, [r7, #32]
 801109a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801109e:	663b      	str	r3, [r7, #96]	@ 0x60
 80110a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3314      	adds	r3, #20
 80110a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80110a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80110aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110b0:	e841 2300 	strex	r3, r2, [r1]
 80110b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80110b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d1e5      	bne.n	8011088 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80110bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110be:	2220      	movs	r2, #32
 80110c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d119      	bne.n	8011100 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	330c      	adds	r3, #12
 80110d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	e853 3f00 	ldrex	r3, [r3]
 80110da:	60fb      	str	r3, [r7, #12]
   return(result);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f023 0310 	bic.w	r3, r3, #16
 80110e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	330c      	adds	r3, #12
 80110ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80110ec:	61fa      	str	r2, [r7, #28]
 80110ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f0:	69b9      	ldr	r1, [r7, #24]
 80110f2:	69fa      	ldr	r2, [r7, #28]
 80110f4:	e841 2300 	strex	r3, r2, [r1]
 80110f8:	617b      	str	r3, [r7, #20]
   return(result);
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1e5      	bne.n	80110cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011102:	2200      	movs	r2, #0
 8011104:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801110a:	2b01      	cmp	r3, #1
 801110c:	d106      	bne.n	801111c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801110e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011112:	4619      	mov	r1, r3
 8011114:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011116:	f7ff ff0b 	bl	8010f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801111a:	e002      	b.n	8011122 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801111c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801111e:	f7fa fc7b 	bl	800ba18 <HAL_UART_RxCpltCallback>
}
 8011122:	bf00      	nop
 8011124:	3770      	adds	r7, #112	@ 0x70
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b084      	sub	sp, #16
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011136:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2201      	movs	r2, #1
 801113c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011142:	2b01      	cmp	r3, #1
 8011144:	d108      	bne.n	8011158 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801114a:	085b      	lsrs	r3, r3, #1
 801114c:	b29b      	uxth	r3, r3
 801114e:	4619      	mov	r1, r3
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f7ff feed 	bl	8010f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011156:	e002      	b.n	801115e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f7ff fedf 	bl	8010f1c <HAL_UART_RxHalfCpltCallback>
}
 801115e:	bf00      	nop
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011166:	b580      	push	{r7, lr}
 8011168:	b084      	sub	sp, #16
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801116e:	2300      	movs	r3, #0
 8011170:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011176:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011182:	2b80      	cmp	r3, #128	@ 0x80
 8011184:	bf0c      	ite	eq
 8011186:	2301      	moveq	r3, #1
 8011188:	2300      	movne	r3, #0
 801118a:	b2db      	uxtb	r3, r3
 801118c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011194:	b2db      	uxtb	r3, r3
 8011196:	2b21      	cmp	r3, #33	@ 0x21
 8011198:	d108      	bne.n	80111ac <UART_DMAError+0x46>
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d005      	beq.n	80111ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	2200      	movs	r2, #0
 80111a4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80111a6:	68b8      	ldr	r0, [r7, #8]
 80111a8:	f000 f8c2 	bl	8011330 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111b6:	2b40      	cmp	r3, #64	@ 0x40
 80111b8:	bf0c      	ite	eq
 80111ba:	2301      	moveq	r3, #1
 80111bc:	2300      	movne	r3, #0
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b22      	cmp	r3, #34	@ 0x22
 80111cc:	d108      	bne.n	80111e0 <UART_DMAError+0x7a>
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d005      	beq.n	80111e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	2200      	movs	r2, #0
 80111d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80111da:	68b8      	ldr	r0, [r7, #8]
 80111dc:	f000 f8d0 	bl	8011380 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111e4:	f043 0210 	orr.w	r2, r3, #16
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80111ec:	68b8      	ldr	r0, [r7, #8]
 80111ee:	f7fa fc33 	bl	800ba58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111f2:	bf00      	nop
 80111f4:	3710      	adds	r7, #16
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
	...

080111fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b098      	sub	sp, #96	@ 0x60
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	4613      	mov	r3, r2
 8011208:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	88fa      	ldrh	r2, [r7, #6]
 8011214:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2200      	movs	r2, #0
 801121a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2222      	movs	r2, #34	@ 0x22
 8011220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011228:	4a3e      	ldr	r2, [pc, #248]	@ (8011324 <UART_Start_Receive_DMA+0x128>)
 801122a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011230:	4a3d      	ldr	r2, [pc, #244]	@ (8011328 <UART_Start_Receive_DMA+0x12c>)
 8011232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011238:	4a3c      	ldr	r2, [pc, #240]	@ (801132c <UART_Start_Receive_DMA+0x130>)
 801123a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011240:	2200      	movs	r2, #0
 8011242:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011244:	f107 0308 	add.w	r3, r7, #8
 8011248:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	3304      	adds	r3, #4
 8011254:	4619      	mov	r1, r3
 8011256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	88fb      	ldrh	r3, [r7, #6]
 801125c:	f7fa fec0 	bl	800bfe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011260:	2300      	movs	r3, #0
 8011262:	613b      	str	r3, [r7, #16]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	613b      	str	r3, [r7, #16]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	613b      	str	r3, [r7, #16]
 8011274:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	691b      	ldr	r3, [r3, #16]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d019      	beq.n	80112b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	330c      	adds	r3, #12
 8011284:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011288:	e853 3f00 	ldrex	r3, [r3]
 801128c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801128e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	330c      	adds	r3, #12
 801129c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801129e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80112a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80112a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80112a6:	e841 2300 	strex	r3, r2, [r1]
 80112aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80112ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d1e5      	bne.n	801127e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	3314      	adds	r3, #20
 80112b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112bc:	e853 3f00 	ldrex	r3, [r3]
 80112c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80112c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c4:	f043 0301 	orr.w	r3, r3, #1
 80112c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	3314      	adds	r3, #20
 80112d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80112d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80112d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80112d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112da:	e841 2300 	strex	r3, r2, [r1]
 80112de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80112e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1e5      	bne.n	80112b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	3314      	adds	r3, #20
 80112ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	e853 3f00 	ldrex	r3, [r3]
 80112f4:	617b      	str	r3, [r7, #20]
   return(result);
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	3314      	adds	r3, #20
 8011304:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011306:	627a      	str	r2, [r7, #36]	@ 0x24
 8011308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130a:	6a39      	ldr	r1, [r7, #32]
 801130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801130e:	e841 2300 	strex	r3, r2, [r1]
 8011312:	61fb      	str	r3, [r7, #28]
   return(result);
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1e5      	bne.n	80112e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3760      	adds	r7, #96	@ 0x60
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	08010fff 	.word	0x08010fff
 8011328:	0801112b 	.word	0x0801112b
 801132c:	08011167 	.word	0x08011167

08011330 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011330:	b480      	push	{r7}
 8011332:	b089      	sub	sp, #36	@ 0x24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	330c      	adds	r3, #12
 801133e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	e853 3f00 	ldrex	r3, [r3]
 8011346:	60bb      	str	r3, [r7, #8]
   return(result);
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801134e:	61fb      	str	r3, [r7, #28]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	330c      	adds	r3, #12
 8011356:	69fa      	ldr	r2, [r7, #28]
 8011358:	61ba      	str	r2, [r7, #24]
 801135a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801135c:	6979      	ldr	r1, [r7, #20]
 801135e:	69ba      	ldr	r2, [r7, #24]
 8011360:	e841 2300 	strex	r3, r2, [r1]
 8011364:	613b      	str	r3, [r7, #16]
   return(result);
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1e5      	bne.n	8011338 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2220      	movs	r2, #32
 8011370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8011374:	bf00      	nop
 8011376:	3724      	adds	r7, #36	@ 0x24
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011380:	b480      	push	{r7}
 8011382:	b095      	sub	sp, #84	@ 0x54
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	330c      	adds	r3, #12
 801138e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011392:	e853 3f00 	ldrex	r3, [r3]
 8011396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801139e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	330c      	adds	r3, #12
 80113a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80113aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80113ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113b0:	e841 2300 	strex	r3, r2, [r1]
 80113b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80113b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1e5      	bne.n	8011388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	3314      	adds	r3, #20
 80113c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c4:	6a3b      	ldr	r3, [r7, #32]
 80113c6:	e853 3f00 	ldrex	r3, [r3]
 80113ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	f023 0301 	bic.w	r3, r3, #1
 80113d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	3314      	adds	r3, #20
 80113da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113e4:	e841 2300 	strex	r3, r2, [r1]
 80113e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1e5      	bne.n	80113bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d119      	bne.n	801142c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	330c      	adds	r3, #12
 80113fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	e853 3f00 	ldrex	r3, [r3]
 8011406:	60bb      	str	r3, [r7, #8]
   return(result);
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	f023 0310 	bic.w	r3, r3, #16
 801140e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	330c      	adds	r3, #12
 8011416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011418:	61ba      	str	r2, [r7, #24]
 801141a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801141c:	6979      	ldr	r1, [r7, #20]
 801141e:	69ba      	ldr	r2, [r7, #24]
 8011420:	e841 2300 	strex	r3, r2, [r1]
 8011424:	613b      	str	r3, [r7, #16]
   return(result);
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1e5      	bne.n	80113f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2220      	movs	r2, #32
 8011430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801143a:	bf00      	nop
 801143c:	3754      	adds	r7, #84	@ 0x54
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr

08011446 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b084      	sub	sp, #16
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011452:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2200      	movs	r2, #0
 8011458:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2200      	movs	r2, #0
 801145e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f7fa faf9 	bl	800ba58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011466:	bf00      	nop
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801146e:	b480      	push	{r7}
 8011470:	b085      	sub	sp, #20
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801147c:	b2db      	uxtb	r3, r3
 801147e:	2b21      	cmp	r3, #33	@ 0x21
 8011480:	d13e      	bne.n	8011500 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801148a:	d114      	bne.n	80114b6 <UART_Transmit_IT+0x48>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d110      	bne.n	80114b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6a1b      	ldr	r3, [r3, #32]
 8011498:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80114a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6a1b      	ldr	r3, [r3, #32]
 80114ae:	1c9a      	adds	r2, r3, #2
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	621a      	str	r2, [r3, #32]
 80114b4:	e008      	b.n	80114c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a1b      	ldr	r3, [r3, #32]
 80114ba:	1c59      	adds	r1, r3, #1
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	6211      	str	r1, [r2, #32]
 80114c0:	781a      	ldrb	r2, [r3, #0]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	3b01      	subs	r3, #1
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	4619      	mov	r1, r3
 80114d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10f      	bne.n	80114fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	68da      	ldr	r2, [r3, #12]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80114ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	68da      	ldr	r2, [r3, #12]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80114fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80114fc:	2300      	movs	r3, #0
 80114fe:	e000      	b.n	8011502 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011500:	2302      	movs	r3, #2
  }
}
 8011502:	4618      	mov	r0, r3
 8011504:	3714      	adds	r7, #20
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr

0801150e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b082      	sub	sp, #8
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68da      	ldr	r2, [r3, #12]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011524:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2220      	movs	r2, #32
 801152a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7fa fa5c 	bl	800b9ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011534:	2300      	movs	r3, #0
}
 8011536:	4618      	mov	r0, r3
 8011538:	3708      	adds	r7, #8
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801153e:	b580      	push	{r7, lr}
 8011540:	b08c      	sub	sp, #48	@ 0x30
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801154c:	b2db      	uxtb	r3, r3
 801154e:	2b22      	cmp	r3, #34	@ 0x22
 8011550:	f040 80ae 	bne.w	80116b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801155c:	d117      	bne.n	801158e <UART_Receive_IT+0x50>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d113      	bne.n	801158e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011566:	2300      	movs	r3, #0
 8011568:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801156e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	b29b      	uxth	r3, r3
 8011578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801157c:	b29a      	uxth	r2, r3
 801157e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011586:	1c9a      	adds	r2, r3, #2
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	629a      	str	r2, [r3, #40]	@ 0x28
 801158c:	e026      	b.n	80115dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011592:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011594:	2300      	movs	r3, #0
 8011596:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80115a0:	d007      	beq.n	80115b2 <UART_Receive_IT+0x74>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10a      	bne.n	80115c0 <UART_Receive_IT+0x82>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d106      	bne.n	80115c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	b2da      	uxtb	r2, r3
 80115ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115bc:	701a      	strb	r2, [r3, #0]
 80115be:	e008      	b.n	80115d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115cc:	b2da      	uxtb	r2, r3
 80115ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115d6:	1c5a      	adds	r2, r3, #1
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3b01      	subs	r3, #1
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	4619      	mov	r1, r3
 80115ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d15d      	bne.n	80116ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	68da      	ldr	r2, [r3, #12]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f022 0220 	bic.w	r2, r2, #32
 80115fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68da      	ldr	r2, [r3, #12]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801160e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	695a      	ldr	r2, [r3, #20]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f022 0201 	bic.w	r2, r2, #1
 801161e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2220      	movs	r2, #32
 8011624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011632:	2b01      	cmp	r3, #1
 8011634:	d135      	bne.n	80116a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2200      	movs	r2, #0
 801163a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	330c      	adds	r3, #12
 8011642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	e853 3f00 	ldrex	r3, [r3]
 801164a:	613b      	str	r3, [r7, #16]
   return(result);
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	f023 0310 	bic.w	r3, r3, #16
 8011652:	627b      	str	r3, [r7, #36]	@ 0x24
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	330c      	adds	r3, #12
 801165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801165c:	623a      	str	r2, [r7, #32]
 801165e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011660:	69f9      	ldr	r1, [r7, #28]
 8011662:	6a3a      	ldr	r2, [r7, #32]
 8011664:	e841 2300 	strex	r3, r2, [r1]
 8011668:	61bb      	str	r3, [r7, #24]
   return(result);
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1e5      	bne.n	801163c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f003 0310 	and.w	r3, r3, #16
 801167a:	2b10      	cmp	r3, #16
 801167c:	d10a      	bne.n	8011694 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801167e:	2300      	movs	r3, #0
 8011680:	60fb      	str	r3, [r7, #12]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	60fb      	str	r3, [r7, #12]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	60fb      	str	r3, [r7, #12]
 8011692:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011698:	4619      	mov	r1, r3
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff fc48 	bl	8010f30 <HAL_UARTEx_RxEventCallback>
 80116a0:	e002      	b.n	80116a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f7fa f9b8 	bl	800ba18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80116a8:	2300      	movs	r3, #0
 80116aa:	e002      	b.n	80116b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80116ac:	2300      	movs	r3, #0
 80116ae:	e000      	b.n	80116b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80116b0:	2302      	movs	r3, #2
  }
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3730      	adds	r7, #48	@ 0x30
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
	...

080116bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116c0:	b0c0      	sub	sp, #256	@ 0x100
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80116d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116d8:	68d9      	ldr	r1, [r3, #12]
 80116da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	ea40 0301 	orr.w	r3, r0, r1
 80116e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80116e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116ea:	689a      	ldr	r2, [r3, #8]
 80116ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	431a      	orrs	r2, r3
 80116f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	431a      	orrs	r2, r3
 80116fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011700:	69db      	ldr	r3, [r3, #28]
 8011702:	4313      	orrs	r3, r2
 8011704:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011714:	f021 010c 	bic.w	r1, r1, #12
 8011718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011722:	430b      	orrs	r3, r1
 8011724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011736:	6999      	ldr	r1, [r3, #24]
 8011738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	ea40 0301 	orr.w	r3, r0, r1
 8011742:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	4b8f      	ldr	r3, [pc, #572]	@ (8011988 <UART_SetConfig+0x2cc>)
 801174c:	429a      	cmp	r2, r3
 801174e:	d005      	beq.n	801175c <UART_SetConfig+0xa0>
 8011750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	4b8d      	ldr	r3, [pc, #564]	@ (801198c <UART_SetConfig+0x2d0>)
 8011758:	429a      	cmp	r2, r3
 801175a:	d104      	bne.n	8011766 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801175c:	f7fd f91c 	bl	800e998 <HAL_RCC_GetPCLK2Freq>
 8011760:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011764:	e003      	b.n	801176e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011766:	f7fd f903 	bl	800e970 <HAL_RCC_GetPCLK1Freq>
 801176a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801176e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011772:	69db      	ldr	r3, [r3, #28]
 8011774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011778:	f040 810c 	bne.w	8011994 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801177c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011780:	2200      	movs	r2, #0
 8011782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011786:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801178a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801178e:	4622      	mov	r2, r4
 8011790:	462b      	mov	r3, r5
 8011792:	1891      	adds	r1, r2, r2
 8011794:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011796:	415b      	adcs	r3, r3
 8011798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801179a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801179e:	4621      	mov	r1, r4
 80117a0:	eb12 0801 	adds.w	r8, r2, r1
 80117a4:	4629      	mov	r1, r5
 80117a6:	eb43 0901 	adc.w	r9, r3, r1
 80117aa:	f04f 0200 	mov.w	r2, #0
 80117ae:	f04f 0300 	mov.w	r3, #0
 80117b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80117b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80117ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80117be:	4690      	mov	r8, r2
 80117c0:	4699      	mov	r9, r3
 80117c2:	4623      	mov	r3, r4
 80117c4:	eb18 0303 	adds.w	r3, r8, r3
 80117c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80117cc:	462b      	mov	r3, r5
 80117ce:	eb49 0303 	adc.w	r3, r9, r3
 80117d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80117d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80117e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80117e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80117ea:	460b      	mov	r3, r1
 80117ec:	18db      	adds	r3, r3, r3
 80117ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80117f0:	4613      	mov	r3, r2
 80117f2:	eb42 0303 	adc.w	r3, r2, r3
 80117f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80117f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80117fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011800:	f7ef fa52 	bl	8000ca8 <__aeabi_uldivmod>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	4b61      	ldr	r3, [pc, #388]	@ (8011990 <UART_SetConfig+0x2d4>)
 801180a:	fba3 2302 	umull	r2, r3, r3, r2
 801180e:	095b      	lsrs	r3, r3, #5
 8011810:	011c      	lsls	r4, r3, #4
 8011812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011816:	2200      	movs	r2, #0
 8011818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801181c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011820:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011824:	4642      	mov	r2, r8
 8011826:	464b      	mov	r3, r9
 8011828:	1891      	adds	r1, r2, r2
 801182a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801182c:	415b      	adcs	r3, r3
 801182e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011830:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011834:	4641      	mov	r1, r8
 8011836:	eb12 0a01 	adds.w	sl, r2, r1
 801183a:	4649      	mov	r1, r9
 801183c:	eb43 0b01 	adc.w	fp, r3, r1
 8011840:	f04f 0200 	mov.w	r2, #0
 8011844:	f04f 0300 	mov.w	r3, #0
 8011848:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801184c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011854:	4692      	mov	sl, r2
 8011856:	469b      	mov	fp, r3
 8011858:	4643      	mov	r3, r8
 801185a:	eb1a 0303 	adds.w	r3, sl, r3
 801185e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011862:	464b      	mov	r3, r9
 8011864:	eb4b 0303 	adc.w	r3, fp, r3
 8011868:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801186c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011878:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801187c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011880:	460b      	mov	r3, r1
 8011882:	18db      	adds	r3, r3, r3
 8011884:	643b      	str	r3, [r7, #64]	@ 0x40
 8011886:	4613      	mov	r3, r2
 8011888:	eb42 0303 	adc.w	r3, r2, r3
 801188c:	647b      	str	r3, [r7, #68]	@ 0x44
 801188e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011892:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011896:	f7ef fa07 	bl	8000ca8 <__aeabi_uldivmod>
 801189a:	4602      	mov	r2, r0
 801189c:	460b      	mov	r3, r1
 801189e:	4611      	mov	r1, r2
 80118a0:	4b3b      	ldr	r3, [pc, #236]	@ (8011990 <UART_SetConfig+0x2d4>)
 80118a2:	fba3 2301 	umull	r2, r3, r3, r1
 80118a6:	095b      	lsrs	r3, r3, #5
 80118a8:	2264      	movs	r2, #100	@ 0x64
 80118aa:	fb02 f303 	mul.w	r3, r2, r3
 80118ae:	1acb      	subs	r3, r1, r3
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80118b6:	4b36      	ldr	r3, [pc, #216]	@ (8011990 <UART_SetConfig+0x2d4>)
 80118b8:	fba3 2302 	umull	r2, r3, r3, r2
 80118bc:	095b      	lsrs	r3, r3, #5
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80118c4:	441c      	add	r4, r3
 80118c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80118ca:	2200      	movs	r2, #0
 80118cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80118d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80118d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80118d8:	4642      	mov	r2, r8
 80118da:	464b      	mov	r3, r9
 80118dc:	1891      	adds	r1, r2, r2
 80118de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80118e0:	415b      	adcs	r3, r3
 80118e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80118e8:	4641      	mov	r1, r8
 80118ea:	1851      	adds	r1, r2, r1
 80118ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80118ee:	4649      	mov	r1, r9
 80118f0:	414b      	adcs	r3, r1
 80118f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80118f4:	f04f 0200 	mov.w	r2, #0
 80118f8:	f04f 0300 	mov.w	r3, #0
 80118fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011900:	4659      	mov	r1, fp
 8011902:	00cb      	lsls	r3, r1, #3
 8011904:	4651      	mov	r1, sl
 8011906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801190a:	4651      	mov	r1, sl
 801190c:	00ca      	lsls	r2, r1, #3
 801190e:	4610      	mov	r0, r2
 8011910:	4619      	mov	r1, r3
 8011912:	4603      	mov	r3, r0
 8011914:	4642      	mov	r2, r8
 8011916:	189b      	adds	r3, r3, r2
 8011918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801191c:	464b      	mov	r3, r9
 801191e:	460a      	mov	r2, r1
 8011920:	eb42 0303 	adc.w	r3, r2, r3
 8011924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011934:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801193c:	460b      	mov	r3, r1
 801193e:	18db      	adds	r3, r3, r3
 8011940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011942:	4613      	mov	r3, r2
 8011944:	eb42 0303 	adc.w	r3, r2, r3
 8011948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801194a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801194e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011952:	f7ef f9a9 	bl	8000ca8 <__aeabi_uldivmod>
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	4b0d      	ldr	r3, [pc, #52]	@ (8011990 <UART_SetConfig+0x2d4>)
 801195c:	fba3 1302 	umull	r1, r3, r3, r2
 8011960:	095b      	lsrs	r3, r3, #5
 8011962:	2164      	movs	r1, #100	@ 0x64
 8011964:	fb01 f303 	mul.w	r3, r1, r3
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	3332      	adds	r3, #50	@ 0x32
 801196e:	4a08      	ldr	r2, [pc, #32]	@ (8011990 <UART_SetConfig+0x2d4>)
 8011970:	fba2 2303 	umull	r2, r3, r2, r3
 8011974:	095b      	lsrs	r3, r3, #5
 8011976:	f003 0207 	and.w	r2, r3, #7
 801197a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4422      	add	r2, r4
 8011982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011984:	e106      	b.n	8011b94 <UART_SetConfig+0x4d8>
 8011986:	bf00      	nop
 8011988:	40011000 	.word	0x40011000
 801198c:	40011400 	.word	0x40011400
 8011990:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011998:	2200      	movs	r2, #0
 801199a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801199e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80119a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80119a6:	4642      	mov	r2, r8
 80119a8:	464b      	mov	r3, r9
 80119aa:	1891      	adds	r1, r2, r2
 80119ac:	6239      	str	r1, [r7, #32]
 80119ae:	415b      	adcs	r3, r3
 80119b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80119b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80119b6:	4641      	mov	r1, r8
 80119b8:	1854      	adds	r4, r2, r1
 80119ba:	4649      	mov	r1, r9
 80119bc:	eb43 0501 	adc.w	r5, r3, r1
 80119c0:	f04f 0200 	mov.w	r2, #0
 80119c4:	f04f 0300 	mov.w	r3, #0
 80119c8:	00eb      	lsls	r3, r5, #3
 80119ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80119ce:	00e2      	lsls	r2, r4, #3
 80119d0:	4614      	mov	r4, r2
 80119d2:	461d      	mov	r5, r3
 80119d4:	4643      	mov	r3, r8
 80119d6:	18e3      	adds	r3, r4, r3
 80119d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80119dc:	464b      	mov	r3, r9
 80119de:	eb45 0303 	adc.w	r3, r5, r3
 80119e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80119f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80119f6:	f04f 0200 	mov.w	r2, #0
 80119fa:	f04f 0300 	mov.w	r3, #0
 80119fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011a02:	4629      	mov	r1, r5
 8011a04:	008b      	lsls	r3, r1, #2
 8011a06:	4621      	mov	r1, r4
 8011a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	008a      	lsls	r2, r1, #2
 8011a10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011a14:	f7ef f948 	bl	8000ca8 <__aeabi_uldivmod>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4b60      	ldr	r3, [pc, #384]	@ (8011ba0 <UART_SetConfig+0x4e4>)
 8011a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8011a22:	095b      	lsrs	r3, r3, #5
 8011a24:	011c      	lsls	r4, r3, #4
 8011a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011a34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011a38:	4642      	mov	r2, r8
 8011a3a:	464b      	mov	r3, r9
 8011a3c:	1891      	adds	r1, r2, r2
 8011a3e:	61b9      	str	r1, [r7, #24]
 8011a40:	415b      	adcs	r3, r3
 8011a42:	61fb      	str	r3, [r7, #28]
 8011a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011a48:	4641      	mov	r1, r8
 8011a4a:	1851      	adds	r1, r2, r1
 8011a4c:	6139      	str	r1, [r7, #16]
 8011a4e:	4649      	mov	r1, r9
 8011a50:	414b      	adcs	r3, r1
 8011a52:	617b      	str	r3, [r7, #20]
 8011a54:	f04f 0200 	mov.w	r2, #0
 8011a58:	f04f 0300 	mov.w	r3, #0
 8011a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011a60:	4659      	mov	r1, fp
 8011a62:	00cb      	lsls	r3, r1, #3
 8011a64:	4651      	mov	r1, sl
 8011a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a6a:	4651      	mov	r1, sl
 8011a6c:	00ca      	lsls	r2, r1, #3
 8011a6e:	4610      	mov	r0, r2
 8011a70:	4619      	mov	r1, r3
 8011a72:	4603      	mov	r3, r0
 8011a74:	4642      	mov	r2, r8
 8011a76:	189b      	adds	r3, r3, r2
 8011a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a7c:	464b      	mov	r3, r9
 8011a7e:	460a      	mov	r2, r1
 8011a80:	eb42 0303 	adc.w	r3, r2, r3
 8011a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011a94:	f04f 0200 	mov.w	r2, #0
 8011a98:	f04f 0300 	mov.w	r3, #0
 8011a9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011aa0:	4649      	mov	r1, r9
 8011aa2:	008b      	lsls	r3, r1, #2
 8011aa4:	4641      	mov	r1, r8
 8011aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011aaa:	4641      	mov	r1, r8
 8011aac:	008a      	lsls	r2, r1, #2
 8011aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011ab2:	f7ef f8f9 	bl	8000ca8 <__aeabi_uldivmod>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	4611      	mov	r1, r2
 8011abc:	4b38      	ldr	r3, [pc, #224]	@ (8011ba0 <UART_SetConfig+0x4e4>)
 8011abe:	fba3 2301 	umull	r2, r3, r3, r1
 8011ac2:	095b      	lsrs	r3, r3, #5
 8011ac4:	2264      	movs	r2, #100	@ 0x64
 8011ac6:	fb02 f303 	mul.w	r3, r2, r3
 8011aca:	1acb      	subs	r3, r1, r3
 8011acc:	011b      	lsls	r3, r3, #4
 8011ace:	3332      	adds	r3, #50	@ 0x32
 8011ad0:	4a33      	ldr	r2, [pc, #204]	@ (8011ba0 <UART_SetConfig+0x4e4>)
 8011ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8011ad6:	095b      	lsrs	r3, r3, #5
 8011ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011adc:	441c      	add	r4, r3
 8011ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ae6:	677a      	str	r2, [r7, #116]	@ 0x74
 8011ae8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011aec:	4642      	mov	r2, r8
 8011aee:	464b      	mov	r3, r9
 8011af0:	1891      	adds	r1, r2, r2
 8011af2:	60b9      	str	r1, [r7, #8]
 8011af4:	415b      	adcs	r3, r3
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011afc:	4641      	mov	r1, r8
 8011afe:	1851      	adds	r1, r2, r1
 8011b00:	6039      	str	r1, [r7, #0]
 8011b02:	4649      	mov	r1, r9
 8011b04:	414b      	adcs	r3, r1
 8011b06:	607b      	str	r3, [r7, #4]
 8011b08:	f04f 0200 	mov.w	r2, #0
 8011b0c:	f04f 0300 	mov.w	r3, #0
 8011b10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011b14:	4659      	mov	r1, fp
 8011b16:	00cb      	lsls	r3, r1, #3
 8011b18:	4651      	mov	r1, sl
 8011b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b1e:	4651      	mov	r1, sl
 8011b20:	00ca      	lsls	r2, r1, #3
 8011b22:	4610      	mov	r0, r2
 8011b24:	4619      	mov	r1, r3
 8011b26:	4603      	mov	r3, r0
 8011b28:	4642      	mov	r2, r8
 8011b2a:	189b      	adds	r3, r3, r2
 8011b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b2e:	464b      	mov	r3, r9
 8011b30:	460a      	mov	r2, r1
 8011b32:	eb42 0303 	adc.w	r3, r2, r3
 8011b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b42:	667a      	str	r2, [r7, #100]	@ 0x64
 8011b44:	f04f 0200 	mov.w	r2, #0
 8011b48:	f04f 0300 	mov.w	r3, #0
 8011b4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011b50:	4649      	mov	r1, r9
 8011b52:	008b      	lsls	r3, r1, #2
 8011b54:	4641      	mov	r1, r8
 8011b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011b5a:	4641      	mov	r1, r8
 8011b5c:	008a      	lsls	r2, r1, #2
 8011b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011b62:	f7ef f8a1 	bl	8000ca8 <__aeabi_uldivmod>
 8011b66:	4602      	mov	r2, r0
 8011b68:	460b      	mov	r3, r1
 8011b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ba0 <UART_SetConfig+0x4e4>)
 8011b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8011b70:	095b      	lsrs	r3, r3, #5
 8011b72:	2164      	movs	r1, #100	@ 0x64
 8011b74:	fb01 f303 	mul.w	r3, r1, r3
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	011b      	lsls	r3, r3, #4
 8011b7c:	3332      	adds	r3, #50	@ 0x32
 8011b7e:	4a08      	ldr	r2, [pc, #32]	@ (8011ba0 <UART_SetConfig+0x4e4>)
 8011b80:	fba2 2303 	umull	r2, r3, r2, r3
 8011b84:	095b      	lsrs	r3, r3, #5
 8011b86:	f003 020f 	and.w	r2, r3, #15
 8011b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4422      	add	r2, r4
 8011b92:	609a      	str	r2, [r3, #8]
}
 8011b94:	bf00      	nop
 8011b96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ba0:	51eb851f 	.word	0x51eb851f

08011ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ba4:	b084      	sub	sp, #16
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b084      	sub	sp, #16
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
 8011bae:	f107 001c 	add.w	r0, r7, #28
 8011bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011bb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d123      	bne.n	8011c06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8011bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011be6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d105      	bne.n	8011bfa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f001 fae8 	bl	80131d0 <USB_CoreReset>
 8011c00:	4603      	mov	r3, r0
 8011c02:	73fb      	strb	r3, [r7, #15]
 8011c04:	e01b      	b.n	8011c3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	68db      	ldr	r3, [r3, #12]
 8011c0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f001 fadc 	bl	80131d0 <USB_CoreReset>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d106      	bne.n	8011c32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011c30:	e005      	b.n	8011c3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011c3e:	7fbb      	ldrb	r3, [r7, #30]
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	d10b      	bne.n	8011c5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	f043 0206 	orr.w	r2, r3, #6
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	689b      	ldr	r3, [r3, #8]
 8011c54:	f043 0220 	orr.w	r2, r3, #32
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c68:	b004      	add	sp, #16
 8011c6a:	4770      	bx	lr

08011c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	4613      	mov	r3, r2
 8011c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011c7a:	79fb      	ldrb	r3, [r7, #7]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d165      	bne.n	8011d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	4a41      	ldr	r2, [pc, #260]	@ (8011d88 <USB_SetTurnaroundTime+0x11c>)
 8011c84:	4293      	cmp	r3, r2
 8011c86:	d906      	bls.n	8011c96 <USB_SetTurnaroundTime+0x2a>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	4a40      	ldr	r2, [pc, #256]	@ (8011d8c <USB_SetTurnaroundTime+0x120>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d202      	bcs.n	8011c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011c90:	230f      	movs	r3, #15
 8011c92:	617b      	str	r3, [r7, #20]
 8011c94:	e062      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	4a3c      	ldr	r2, [pc, #240]	@ (8011d8c <USB_SetTurnaroundTime+0x120>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d306      	bcc.n	8011cac <USB_SetTurnaroundTime+0x40>
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8011d90 <USB_SetTurnaroundTime+0x124>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d202      	bcs.n	8011cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ca6:	230e      	movs	r3, #14
 8011ca8:	617b      	str	r3, [r7, #20]
 8011caa:	e057      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	4a38      	ldr	r2, [pc, #224]	@ (8011d90 <USB_SetTurnaroundTime+0x124>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d306      	bcc.n	8011cc2 <USB_SetTurnaroundTime+0x56>
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	4a37      	ldr	r2, [pc, #220]	@ (8011d94 <USB_SetTurnaroundTime+0x128>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d202      	bcs.n	8011cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011cbc:	230d      	movs	r3, #13
 8011cbe:	617b      	str	r3, [r7, #20]
 8011cc0:	e04c      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	4a33      	ldr	r2, [pc, #204]	@ (8011d94 <USB_SetTurnaroundTime+0x128>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d306      	bcc.n	8011cd8 <USB_SetTurnaroundTime+0x6c>
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	4a32      	ldr	r2, [pc, #200]	@ (8011d98 <USB_SetTurnaroundTime+0x12c>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d802      	bhi.n	8011cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011cd2:	230c      	movs	r3, #12
 8011cd4:	617b      	str	r3, [r7, #20]
 8011cd6:	e041      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	4a2f      	ldr	r2, [pc, #188]	@ (8011d98 <USB_SetTurnaroundTime+0x12c>)
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d906      	bls.n	8011cee <USB_SetTurnaroundTime+0x82>
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8011d9c <USB_SetTurnaroundTime+0x130>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d802      	bhi.n	8011cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011ce8:	230b      	movs	r3, #11
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	e036      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8011d9c <USB_SetTurnaroundTime+0x130>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d906      	bls.n	8011d04 <USB_SetTurnaroundTime+0x98>
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	4a29      	ldr	r2, [pc, #164]	@ (8011da0 <USB_SetTurnaroundTime+0x134>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d802      	bhi.n	8011d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011cfe:	230a      	movs	r3, #10
 8011d00:	617b      	str	r3, [r7, #20]
 8011d02:	e02b      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	4a26      	ldr	r2, [pc, #152]	@ (8011da0 <USB_SetTurnaroundTime+0x134>)
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d906      	bls.n	8011d1a <USB_SetTurnaroundTime+0xae>
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	4a25      	ldr	r2, [pc, #148]	@ (8011da4 <USB_SetTurnaroundTime+0x138>)
 8011d10:	4293      	cmp	r3, r2
 8011d12:	d202      	bcs.n	8011d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d14:	2309      	movs	r3, #9
 8011d16:	617b      	str	r3, [r7, #20]
 8011d18:	e020      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	4a21      	ldr	r2, [pc, #132]	@ (8011da4 <USB_SetTurnaroundTime+0x138>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d306      	bcc.n	8011d30 <USB_SetTurnaroundTime+0xc4>
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	4a20      	ldr	r2, [pc, #128]	@ (8011da8 <USB_SetTurnaroundTime+0x13c>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d802      	bhi.n	8011d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011d2a:	2308      	movs	r3, #8
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	e015      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	4a1d      	ldr	r2, [pc, #116]	@ (8011da8 <USB_SetTurnaroundTime+0x13c>)
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d906      	bls.n	8011d46 <USB_SetTurnaroundTime+0xda>
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8011dac <USB_SetTurnaroundTime+0x140>)
 8011d3c:	4293      	cmp	r3, r2
 8011d3e:	d202      	bcs.n	8011d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011d40:	2307      	movs	r3, #7
 8011d42:	617b      	str	r3, [r7, #20]
 8011d44:	e00a      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011d46:	2306      	movs	r3, #6
 8011d48:	617b      	str	r3, [r7, #20]
 8011d4a:	e007      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d102      	bne.n	8011d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011d52:	2309      	movs	r3, #9
 8011d54:	617b      	str	r3, [r7, #20]
 8011d56:	e001      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011d58:	2309      	movs	r3, #9
 8011d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	68da      	ldr	r2, [r3, #12]
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	029b      	lsls	r3, r3, #10
 8011d70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011d74:	431a      	orrs	r2, r3
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	371c      	adds	r7, #28
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr
 8011d88:	00d8acbf 	.word	0x00d8acbf
 8011d8c:	00e4e1c0 	.word	0x00e4e1c0
 8011d90:	00f42400 	.word	0x00f42400
 8011d94:	01067380 	.word	0x01067380
 8011d98:	011a499f 	.word	0x011a499f
 8011d9c:	01312cff 	.word	0x01312cff
 8011da0:	014ca43f 	.word	0x014ca43f
 8011da4:	016e3600 	.word	0x016e3600
 8011da8:	01a6ab1f 	.word	0x01a6ab1f
 8011dac:	01e84800 	.word	0x01e84800

08011db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	689b      	ldr	r3, [r3, #8]
 8011dbc:	f043 0201 	orr.w	r2, r3, #1
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b083      	sub	sp, #12
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	f023 0201 	bic.w	r2, r3, #1
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011de6:	2300      	movs	r3, #0
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011e00:	2300      	movs	r3, #0
 8011e02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e10:	78fb      	ldrb	r3, [r7, #3]
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d115      	bne.n	8011e42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011e22:	200a      	movs	r0, #10
 8011e24:	f7f9 fe98 	bl	800bb58 <HAL_Delay>
      ms += 10U;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	330a      	adds	r3, #10
 8011e2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f001 f93f 	bl	80130b2 <USB_GetMode>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d01e      	beq.n	8011e78 <USB_SetCurrentMode+0x84>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8011e3e:	d9f0      	bls.n	8011e22 <USB_SetCurrentMode+0x2e>
 8011e40:	e01a      	b.n	8011e78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e42:	78fb      	ldrb	r3, [r7, #3]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d115      	bne.n	8011e74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011e54:	200a      	movs	r0, #10
 8011e56:	f7f9 fe7f 	bl	800bb58 <HAL_Delay>
      ms += 10U;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	330a      	adds	r3, #10
 8011e5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f001 f926 	bl	80130b2 <USB_GetMode>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d005      	beq.n	8011e78 <USB_SetCurrentMode+0x84>
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011e70:	d9f0      	bls.n	8011e54 <USB_SetCurrentMode+0x60>
 8011e72:	e001      	b.n	8011e78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011e74:	2301      	movs	r3, #1
 8011e76:	e005      	b.n	8011e84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2bc8      	cmp	r3, #200	@ 0xc8
 8011e7c:	d101      	bne.n	8011e82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e000      	b.n	8011e84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011e82:	2300      	movs	r3, #0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b086      	sub	sp, #24
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	613b      	str	r3, [r7, #16]
 8011eaa:	e009      	b.n	8011ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	3340      	adds	r3, #64	@ 0x40
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	4413      	add	r3, r2
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	613b      	str	r3, [r7, #16]
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	2b0e      	cmp	r3, #14
 8011ec4:	d9f2      	bls.n	8011eac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d11c      	bne.n	8011f08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	68fa      	ldr	r2, [r7, #12]
 8011ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011edc:	f043 0302 	orr.w	r3, r3, #2
 8011ee0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ee6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ef2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011efe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	639a      	str	r2, [r3, #56]	@ 0x38
 8011f06:	e00b      	b.n	8011f20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f26:	461a      	mov	r2, r3
 8011f28:	2300      	movs	r3, #0
 8011f2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011f2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d10d      	bne.n	8011f50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d104      	bne.n	8011f46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 f968 	bl	8012214 <USB_SetDevSpeed>
 8011f44:	e008      	b.n	8011f58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011f46:	2101      	movs	r1, #1
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 f963 	bl	8012214 <USB_SetDevSpeed>
 8011f4e:	e003      	b.n	8011f58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011f50:	2103      	movs	r1, #3
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 f95e 	bl	8012214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011f58:	2110      	movs	r1, #16
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 f8fa 	bl	8012154 <USB_FlushTxFifo>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d001      	beq.n	8011f6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8011f66:	2301      	movs	r3, #1
 8011f68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f924 	bl	80121b8 <USB_FlushRxFifo>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8011f76:	2301      	movs	r3, #1
 8011f78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f80:	461a      	mov	r2, r3
 8011f82:	2300      	movs	r3, #0
 8011f84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	2300      	movs	r3, #0
 8011f90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f98:	461a      	mov	r2, r3
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	613b      	str	r3, [r7, #16]
 8011fa2:	e043      	b.n	801202c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	015a      	lsls	r2, r3, #5
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	4413      	add	r3, r2
 8011fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011fba:	d118      	bne.n	8011fee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d10a      	bne.n	8011fd8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	015a      	lsls	r2, r3, #5
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	4413      	add	r3, r2
 8011fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fce:	461a      	mov	r2, r3
 8011fd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011fd4:	6013      	str	r3, [r2, #0]
 8011fd6:	e013      	b.n	8012000 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	015a      	lsls	r2, r3, #5
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	4413      	add	r3, r2
 8011fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011fea:	6013      	str	r3, [r2, #0]
 8011fec:	e008      	b.n	8012000 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	015a      	lsls	r2, r3, #5
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	015a      	lsls	r2, r3, #5
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	4413      	add	r3, r2
 8012008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801200c:	461a      	mov	r2, r3
 801200e:	2300      	movs	r3, #0
 8012010:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	015a      	lsls	r2, r3, #5
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	4413      	add	r3, r2
 801201a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801201e:	461a      	mov	r2, r3
 8012020:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	3301      	adds	r3, #1
 801202a:	613b      	str	r3, [r7, #16]
 801202c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012030:	461a      	mov	r2, r3
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	4293      	cmp	r3, r2
 8012036:	d3b5      	bcc.n	8011fa4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012038:	2300      	movs	r3, #0
 801203a:	613b      	str	r3, [r7, #16]
 801203c:	e043      	b.n	80120c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	015a      	lsls	r2, r3, #5
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	4413      	add	r3, r2
 8012046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012054:	d118      	bne.n	8012088 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10a      	bne.n	8012072 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	015a      	lsls	r2, r3, #5
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4413      	add	r3, r2
 8012064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012068:	461a      	mov	r2, r3
 801206a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801206e:	6013      	str	r3, [r2, #0]
 8012070:	e013      	b.n	801209a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	015a      	lsls	r2, r3, #5
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	4413      	add	r3, r2
 801207a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801207e:	461a      	mov	r2, r3
 8012080:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012084:	6013      	str	r3, [r2, #0]
 8012086:	e008      	b.n	801209a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012094:	461a      	mov	r2, r3
 8012096:	2300      	movs	r3, #0
 8012098:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	015a      	lsls	r2, r3, #5
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	4413      	add	r3, r2
 80120a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120a6:	461a      	mov	r2, r3
 80120a8:	2300      	movs	r3, #0
 80120aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	015a      	lsls	r2, r3, #5
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	4413      	add	r3, r2
 80120b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120b8:	461a      	mov	r2, r3
 80120ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80120be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	3301      	adds	r3, #1
 80120c4:	613b      	str	r3, [r7, #16]
 80120c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80120ca:	461a      	mov	r2, r3
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d3b5      	bcc.n	801203e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120d8:	691b      	ldr	r3, [r3, #16]
 80120da:	68fa      	ldr	r2, [r7, #12]
 80120dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80120e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80120e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80120f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80120f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d105      	bne.n	8012108 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	699b      	ldr	r3, [r3, #24]
 8012100:	f043 0210 	orr.w	r2, r3, #16
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	699a      	ldr	r2, [r3, #24]
 801210c:	4b10      	ldr	r3, [pc, #64]	@ (8012150 <USB_DevInit+0x2c4>)
 801210e:	4313      	orrs	r3, r2
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012114:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012118:	2b00      	cmp	r3, #0
 801211a:	d005      	beq.n	8012128 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	699b      	ldr	r3, [r3, #24]
 8012120:	f043 0208 	orr.w	r2, r3, #8
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012128:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801212c:	2b01      	cmp	r3, #1
 801212e:	d107      	bne.n	8012140 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	699b      	ldr	r3, [r3, #24]
 8012134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012138:	f043 0304 	orr.w	r3, r3, #4
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012140:	7dfb      	ldrb	r3, [r7, #23]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801214c:	b004      	add	sp, #16
 801214e:	4770      	bx	lr
 8012150:	803c3800 	.word	0x803c3800

08012154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012154:	b480      	push	{r7}
 8012156:	b085      	sub	sp, #20
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801215e:	2300      	movs	r3, #0
 8012160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	3301      	adds	r3, #1
 8012166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801216e:	d901      	bls.n	8012174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012170:	2303      	movs	r3, #3
 8012172:	e01b      	b.n	80121ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	691b      	ldr	r3, [r3, #16]
 8012178:	2b00      	cmp	r3, #0
 801217a:	daf2      	bge.n	8012162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801217c:	2300      	movs	r3, #0
 801217e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	019b      	lsls	r3, r3, #6
 8012184:	f043 0220 	orr.w	r2, r3, #32
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	3301      	adds	r3, #1
 8012190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012198:	d901      	bls.n	801219e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801219a:	2303      	movs	r3, #3
 801219c:	e006      	b.n	80121ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	691b      	ldr	r3, [r3, #16]
 80121a2:	f003 0320 	and.w	r3, r3, #32
 80121a6:	2b20      	cmp	r3, #32
 80121a8:	d0f0      	beq.n	801218c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80121aa:	2300      	movs	r3, #0
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80121c0:	2300      	movs	r3, #0
 80121c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	3301      	adds	r3, #1
 80121c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121d0:	d901      	bls.n	80121d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80121d2:	2303      	movs	r3, #3
 80121d4:	e018      	b.n	8012208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	691b      	ldr	r3, [r3, #16]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	daf2      	bge.n	80121c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80121de:	2300      	movs	r3, #0
 80121e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2210      	movs	r2, #16
 80121e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	3301      	adds	r3, #1
 80121ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121f4:	d901      	bls.n	80121fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80121f6:	2303      	movs	r3, #3
 80121f8:	e006      	b.n	8012208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	691b      	ldr	r3, [r3, #16]
 80121fe:	f003 0310 	and.w	r3, r3, #16
 8012202:	2b10      	cmp	r3, #16
 8012204:	d0f0      	beq.n	80121e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012206:	2300      	movs	r3, #0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3714      	adds	r7, #20
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012214:	b480      	push	{r7}
 8012216:	b085      	sub	sp, #20
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	78fb      	ldrb	r3, [r7, #3]
 801222e:	68f9      	ldr	r1, [r7, #12]
 8012230:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012234:	4313      	orrs	r3, r2
 8012236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012238:	2300      	movs	r3, #0
}
 801223a:	4618      	mov	r0, r3
 801223c:	3714      	adds	r7, #20
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr

08012246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8012246:	b480      	push	{r7}
 8012248:	b087      	sub	sp, #28
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	f003 0306 	and.w	r3, r3, #6
 801225e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d102      	bne.n	801226c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012266:	2300      	movs	r3, #0
 8012268:	75fb      	strb	r3, [r7, #23]
 801226a:	e00a      	b.n	8012282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2b02      	cmp	r3, #2
 8012270:	d002      	beq.n	8012278 <USB_GetDevSpeed+0x32>
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b06      	cmp	r3, #6
 8012276:	d102      	bne.n	801227e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012278:	2302      	movs	r3, #2
 801227a:	75fb      	strb	r3, [r7, #23]
 801227c:	e001      	b.n	8012282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801227e:	230f      	movs	r3, #15
 8012280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012282:	7dfb      	ldrb	r3, [r7, #23]
}
 8012284:	4618      	mov	r0, r3
 8012286:	371c      	adds	r7, #28
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012290:	b480      	push	{r7}
 8012292:	b085      	sub	sp, #20
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	785b      	ldrb	r3, [r3, #1]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d13a      	bne.n	8012322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122b2:	69da      	ldr	r2, [r3, #28]
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	f003 030f 	and.w	r3, r3, #15
 80122bc:	2101      	movs	r1, #1
 80122be:	fa01 f303 	lsl.w	r3, r1, r3
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	68f9      	ldr	r1, [r7, #12]
 80122c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80122ca:	4313      	orrs	r3, r2
 80122cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	015a      	lsls	r2, r3, #5
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	4413      	add	r3, r2
 80122d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d155      	bne.n	8012390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	015a      	lsls	r2, r3, #5
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	4413      	add	r3, r2
 80122ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	791b      	ldrb	r3, [r3, #4]
 80122fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	059b      	lsls	r3, r3, #22
 8012306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012308:	4313      	orrs	r3, r2
 801230a:	68ba      	ldr	r2, [r7, #8]
 801230c:	0151      	lsls	r1, r2, #5
 801230e:	68fa      	ldr	r2, [r7, #12]
 8012310:	440a      	add	r2, r1
 8012312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801231a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	e036      	b.n	8012390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012328:	69da      	ldr	r2, [r3, #28]
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	f003 030f 	and.w	r3, r3, #15
 8012332:	2101      	movs	r1, #1
 8012334:	fa01 f303 	lsl.w	r3, r1, r3
 8012338:	041b      	lsls	r3, r3, #16
 801233a:	68f9      	ldr	r1, [r7, #12]
 801233c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012340:	4313      	orrs	r3, r2
 8012342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	015a      	lsls	r2, r3, #5
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	4413      	add	r3, r2
 801234c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012356:	2b00      	cmp	r3, #0
 8012358:	d11a      	bne.n	8012390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	015a      	lsls	r2, r3, #5
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	4413      	add	r3, r2
 8012362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012366:	681a      	ldr	r2, [r3, #0]
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	791b      	ldrb	r3, [r3, #4]
 8012374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012376:	430b      	orrs	r3, r1
 8012378:	4313      	orrs	r3, r2
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	0151      	lsls	r1, r2, #5
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	440a      	add	r2, r1
 8012382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801238a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801238e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012390:	2300      	movs	r3, #0
}
 8012392:	4618      	mov	r0, r3
 8012394:	3714      	adds	r7, #20
 8012396:	46bd      	mov	sp, r7
 8012398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239c:	4770      	bx	lr
	...

080123a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	785b      	ldrb	r3, [r3, #1]
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d161      	bne.n	8012480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	015a      	lsls	r2, r3, #5
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	4413      	add	r3, r2
 80123c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80123ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80123d2:	d11f      	bne.n	8012414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	015a      	lsls	r2, r3, #5
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	4413      	add	r3, r2
 80123dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	0151      	lsls	r1, r2, #5
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	440a      	add	r2, r1
 80123ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80123ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80123f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	015a      	lsls	r2, r3, #5
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	4413      	add	r3, r2
 80123fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68ba      	ldr	r2, [r7, #8]
 8012404:	0151      	lsls	r1, r2, #5
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	440a      	add	r2, r1
 801240a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801240e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801241a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	f003 030f 	and.w	r3, r3, #15
 8012424:	2101      	movs	r1, #1
 8012426:	fa01 f303 	lsl.w	r3, r1, r3
 801242a:	b29b      	uxth	r3, r3
 801242c:	43db      	mvns	r3, r3
 801242e:	68f9      	ldr	r1, [r7, #12]
 8012430:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012434:	4013      	ands	r3, r2
 8012436:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801243e:	69da      	ldr	r2, [r3, #28]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	f003 030f 	and.w	r3, r3, #15
 8012448:	2101      	movs	r1, #1
 801244a:	fa01 f303 	lsl.w	r3, r1, r3
 801244e:	b29b      	uxth	r3, r3
 8012450:	43db      	mvns	r3, r3
 8012452:	68f9      	ldr	r1, [r7, #12]
 8012454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012458:	4013      	ands	r3, r2
 801245a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	015a      	lsls	r2, r3, #5
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	4413      	add	r3, r2
 8012464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	0159      	lsls	r1, r3, #5
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	440b      	add	r3, r1
 8012472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012476:	4619      	mov	r1, r3
 8012478:	4b35      	ldr	r3, [pc, #212]	@ (8012550 <USB_DeactivateEndpoint+0x1b0>)
 801247a:	4013      	ands	r3, r2
 801247c:	600b      	str	r3, [r1, #0]
 801247e:	e060      	b.n	8012542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	015a      	lsls	r2, r3, #5
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	4413      	add	r3, r2
 8012488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012496:	d11f      	bne.n	80124d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	015a      	lsls	r2, r3, #5
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	4413      	add	r3, r2
 80124a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	68ba      	ldr	r2, [r7, #8]
 80124a8:	0151      	lsls	r1, r2, #5
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	440a      	add	r2, r1
 80124ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80124b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	015a      	lsls	r2, r3, #5
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4413      	add	r3, r2
 80124c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	0151      	lsls	r1, r2, #5
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	440a      	add	r2, r1
 80124ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80124d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	f003 030f 	and.w	r3, r3, #15
 80124e8:	2101      	movs	r1, #1
 80124ea:	fa01 f303 	lsl.w	r3, r1, r3
 80124ee:	041b      	lsls	r3, r3, #16
 80124f0:	43db      	mvns	r3, r3
 80124f2:	68f9      	ldr	r1, [r7, #12]
 80124f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80124f8:	4013      	ands	r3, r2
 80124fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012502:	69da      	ldr	r2, [r3, #28]
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	f003 030f 	and.w	r3, r3, #15
 801250c:	2101      	movs	r1, #1
 801250e:	fa01 f303 	lsl.w	r3, r1, r3
 8012512:	041b      	lsls	r3, r3, #16
 8012514:	43db      	mvns	r3, r3
 8012516:	68f9      	ldr	r1, [r7, #12]
 8012518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801251c:	4013      	ands	r3, r2
 801251e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	015a      	lsls	r2, r3, #5
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	4413      	add	r3, r2
 8012528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	0159      	lsls	r1, r3, #5
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	440b      	add	r3, r1
 8012536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801253a:	4619      	mov	r1, r3
 801253c:	4b05      	ldr	r3, [pc, #20]	@ (8012554 <USB_DeactivateEndpoint+0x1b4>)
 801253e:	4013      	ands	r3, r2
 8012540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012542:	2300      	movs	r3, #0
}
 8012544:	4618      	mov	r0, r3
 8012546:	3714      	adds	r7, #20
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	ec337800 	.word	0xec337800
 8012554:	eff37800 	.word	0xeff37800

08012558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08a      	sub	sp, #40	@ 0x28
 801255c:	af02      	add	r7, sp, #8
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	4613      	mov	r3, r2
 8012564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	785b      	ldrb	r3, [r3, #1]
 8012574:	2b01      	cmp	r3, #1
 8012576:	f040 817f 	bne.w	8012878 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	691b      	ldr	r3, [r3, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d132      	bne.n	80125e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	015a      	lsls	r2, r3, #5
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	4413      	add	r3, r2
 801258a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	69ba      	ldr	r2, [r7, #24]
 8012592:	0151      	lsls	r1, r2, #5
 8012594:	69fa      	ldr	r2, [r7, #28]
 8012596:	440a      	add	r2, r1
 8012598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801259c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80125a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80125a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	015a      	lsls	r2, r3, #5
 80125aa:	69fb      	ldr	r3, [r7, #28]
 80125ac:	4413      	add	r3, r2
 80125ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125b2:	691b      	ldr	r3, [r3, #16]
 80125b4:	69ba      	ldr	r2, [r7, #24]
 80125b6:	0151      	lsls	r1, r2, #5
 80125b8:	69fa      	ldr	r2, [r7, #28]
 80125ba:	440a      	add	r2, r1
 80125bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80125c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	015a      	lsls	r2, r3, #5
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	4413      	add	r3, r2
 80125ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	69ba      	ldr	r2, [r7, #24]
 80125d6:	0151      	lsls	r1, r2, #5
 80125d8:	69fa      	ldr	r2, [r7, #28]
 80125da:	440a      	add	r2, r1
 80125dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125e0:	0cdb      	lsrs	r3, r3, #19
 80125e2:	04db      	lsls	r3, r3, #19
 80125e4:	6113      	str	r3, [r2, #16]
 80125e6:	e097      	b.n	8012718 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	015a      	lsls	r2, r3, #5
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	4413      	add	r3, r2
 80125f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	69ba      	ldr	r2, [r7, #24]
 80125f8:	0151      	lsls	r1, r2, #5
 80125fa:	69fa      	ldr	r2, [r7, #28]
 80125fc:	440a      	add	r2, r1
 80125fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012602:	0cdb      	lsrs	r3, r3, #19
 8012604:	04db      	lsls	r3, r3, #19
 8012606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	015a      	lsls	r2, r3, #5
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	4413      	add	r3, r2
 8012610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	69ba      	ldr	r2, [r7, #24]
 8012618:	0151      	lsls	r1, r2, #5
 801261a:	69fa      	ldr	r2, [r7, #28]
 801261c:	440a      	add	r2, r1
 801261e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012622:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8012626:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801262a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d11a      	bne.n	8012668 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	691a      	ldr	r2, [r3, #16]
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	429a      	cmp	r2, r3
 801263c:	d903      	bls.n	8012646 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	689a      	ldr	r2, [r3, #8]
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	015a      	lsls	r2, r3, #5
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	4413      	add	r3, r2
 801264e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012652:	691b      	ldr	r3, [r3, #16]
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	0151      	lsls	r1, r2, #5
 8012658:	69fa      	ldr	r2, [r7, #28]
 801265a:	440a      	add	r2, r1
 801265c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012664:	6113      	str	r3, [r2, #16]
 8012666:	e044      	b.n	80126f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	691a      	ldr	r2, [r3, #16]
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	4413      	add	r3, r2
 8012672:	1e5a      	subs	r2, r3, #1
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	fbb2 f3f3 	udiv	r3, r2, r3
 801267c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	015a      	lsls	r2, r3, #5
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	4413      	add	r3, r2
 8012686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801268a:	691a      	ldr	r2, [r3, #16]
 801268c:	8afb      	ldrh	r3, [r7, #22]
 801268e:	04d9      	lsls	r1, r3, #19
 8012690:	4ba4      	ldr	r3, [pc, #656]	@ (8012924 <USB_EPStartXfer+0x3cc>)
 8012692:	400b      	ands	r3, r1
 8012694:	69b9      	ldr	r1, [r7, #24]
 8012696:	0148      	lsls	r0, r1, #5
 8012698:	69f9      	ldr	r1, [r7, #28]
 801269a:	4401      	add	r1, r0
 801269c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80126a0:	4313      	orrs	r3, r2
 80126a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	791b      	ldrb	r3, [r3, #4]
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d122      	bne.n	80126f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	015a      	lsls	r2, r3, #5
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	4413      	add	r3, r2
 80126b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126b8:	691b      	ldr	r3, [r3, #16]
 80126ba:	69ba      	ldr	r2, [r7, #24]
 80126bc:	0151      	lsls	r1, r2, #5
 80126be:	69fa      	ldr	r2, [r7, #28]
 80126c0:	440a      	add	r2, r1
 80126c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80126ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	015a      	lsls	r2, r3, #5
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	4413      	add	r3, r2
 80126d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126d8:	691a      	ldr	r2, [r3, #16]
 80126da:	8afb      	ldrh	r3, [r7, #22]
 80126dc:	075b      	lsls	r3, r3, #29
 80126de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80126e2:	69b9      	ldr	r1, [r7, #24]
 80126e4:	0148      	lsls	r0, r1, #5
 80126e6:	69f9      	ldr	r1, [r7, #28]
 80126e8:	4401      	add	r1, r0
 80126ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80126ee:	4313      	orrs	r3, r2
 80126f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	015a      	lsls	r2, r3, #5
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	4413      	add	r3, r2
 80126fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126fe:	691a      	ldr	r2, [r3, #16]
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	691b      	ldr	r3, [r3, #16]
 8012704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012708:	69b9      	ldr	r1, [r7, #24]
 801270a:	0148      	lsls	r0, r1, #5
 801270c:	69f9      	ldr	r1, [r7, #28]
 801270e:	4401      	add	r1, r0
 8012710:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012714:	4313      	orrs	r3, r2
 8012716:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012718:	79fb      	ldrb	r3, [r7, #7]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d14b      	bne.n	80127b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	69db      	ldr	r3, [r3, #28]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d009      	beq.n	801273a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012726:	69bb      	ldr	r3, [r7, #24]
 8012728:	015a      	lsls	r2, r3, #5
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	4413      	add	r3, r2
 801272e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012732:	461a      	mov	r2, r3
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	69db      	ldr	r3, [r3, #28]
 8012738:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	791b      	ldrb	r3, [r3, #4]
 801273e:	2b01      	cmp	r3, #1
 8012740:	d128      	bne.n	8012794 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801274e:	2b00      	cmp	r3, #0
 8012750:	d110      	bne.n	8012774 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	015a      	lsls	r2, r3, #5
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	4413      	add	r3, r2
 801275a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	69ba      	ldr	r2, [r7, #24]
 8012762:	0151      	lsls	r1, r2, #5
 8012764:	69fa      	ldr	r2, [r7, #28]
 8012766:	440a      	add	r2, r1
 8012768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801276c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012770:	6013      	str	r3, [r2, #0]
 8012772:	e00f      	b.n	8012794 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012774:	69bb      	ldr	r3, [r7, #24]
 8012776:	015a      	lsls	r2, r3, #5
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	4413      	add	r3, r2
 801277c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	69ba      	ldr	r2, [r7, #24]
 8012784:	0151      	lsls	r1, r2, #5
 8012786:	69fa      	ldr	r2, [r7, #28]
 8012788:	440a      	add	r2, r1
 801278a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801278e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012792:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	015a      	lsls	r2, r3, #5
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	4413      	add	r3, r2
 801279c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	69ba      	ldr	r2, [r7, #24]
 80127a4:	0151      	lsls	r1, r2, #5
 80127a6:	69fa      	ldr	r2, [r7, #28]
 80127a8:	440a      	add	r2, r1
 80127aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80127b2:	6013      	str	r3, [r2, #0]
 80127b4:	e166      	b.n	8012a84 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	015a      	lsls	r2, r3, #5
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	4413      	add	r3, r2
 80127be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	69ba      	ldr	r2, [r7, #24]
 80127c6:	0151      	lsls	r1, r2, #5
 80127c8:	69fa      	ldr	r2, [r7, #28]
 80127ca:	440a      	add	r2, r1
 80127cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80127d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	791b      	ldrb	r3, [r3, #4]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d015      	beq.n	801280a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	691b      	ldr	r3, [r3, #16]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f000 814e 	beq.w	8012a84 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	f003 030f 	and.w	r3, r3, #15
 80127f8:	2101      	movs	r1, #1
 80127fa:	fa01 f303 	lsl.w	r3, r1, r3
 80127fe:	69f9      	ldr	r1, [r7, #28]
 8012800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012804:	4313      	orrs	r3, r2
 8012806:	634b      	str	r3, [r1, #52]	@ 0x34
 8012808:	e13c      	b.n	8012a84 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012816:	2b00      	cmp	r3, #0
 8012818:	d110      	bne.n	801283c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	015a      	lsls	r2, r3, #5
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	4413      	add	r3, r2
 8012822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	69ba      	ldr	r2, [r7, #24]
 801282a:	0151      	lsls	r1, r2, #5
 801282c:	69fa      	ldr	r2, [r7, #28]
 801282e:	440a      	add	r2, r1
 8012830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012838:	6013      	str	r3, [r2, #0]
 801283a:	e00f      	b.n	801285c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	015a      	lsls	r2, r3, #5
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	69ba      	ldr	r2, [r7, #24]
 801284c:	0151      	lsls	r1, r2, #5
 801284e:	69fa      	ldr	r2, [r7, #28]
 8012850:	440a      	add	r2, r1
 8012852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801285a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	68d9      	ldr	r1, [r3, #12]
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	781a      	ldrb	r2, [r3, #0]
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	691b      	ldr	r3, [r3, #16]
 8012868:	b298      	uxth	r0, r3
 801286a:	79fb      	ldrb	r3, [r7, #7]
 801286c:	9300      	str	r3, [sp, #0]
 801286e:	4603      	mov	r3, r0
 8012870:	68f8      	ldr	r0, [r7, #12]
 8012872:	f000 f9b9 	bl	8012be8 <USB_WritePacket>
 8012876:	e105      	b.n	8012a84 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	015a      	lsls	r2, r3, #5
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	4413      	add	r3, r2
 8012880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012884:	691b      	ldr	r3, [r3, #16]
 8012886:	69ba      	ldr	r2, [r7, #24]
 8012888:	0151      	lsls	r1, r2, #5
 801288a:	69fa      	ldr	r2, [r7, #28]
 801288c:	440a      	add	r2, r1
 801288e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012892:	0cdb      	lsrs	r3, r3, #19
 8012894:	04db      	lsls	r3, r3, #19
 8012896:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	015a      	lsls	r2, r3, #5
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	4413      	add	r3, r2
 80128a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128a4:	691b      	ldr	r3, [r3, #16]
 80128a6:	69ba      	ldr	r2, [r7, #24]
 80128a8:	0151      	lsls	r1, r2, #5
 80128aa:	69fa      	ldr	r2, [r7, #28]
 80128ac:	440a      	add	r2, r1
 80128ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80128b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80128b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80128ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d132      	bne.n	8012928 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d003      	beq.n	80128d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	689a      	ldr	r2, [r3, #8]
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	689a      	ldr	r2, [r3, #8]
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	015a      	lsls	r2, r3, #5
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	4413      	add	r3, r2
 80128e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128e6:	691a      	ldr	r2, [r3, #16]
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	6a1b      	ldr	r3, [r3, #32]
 80128ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128f0:	69b9      	ldr	r1, [r7, #24]
 80128f2:	0148      	lsls	r0, r1, #5
 80128f4:	69f9      	ldr	r1, [r7, #28]
 80128f6:	4401      	add	r1, r0
 80128f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80128fc:	4313      	orrs	r3, r2
 80128fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	015a      	lsls	r2, r3, #5
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	4413      	add	r3, r2
 8012908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801290c:	691b      	ldr	r3, [r3, #16]
 801290e:	69ba      	ldr	r2, [r7, #24]
 8012910:	0151      	lsls	r1, r2, #5
 8012912:	69fa      	ldr	r2, [r7, #28]
 8012914:	440a      	add	r2, r1
 8012916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801291a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801291e:	6113      	str	r3, [r2, #16]
 8012920:	e062      	b.n	80129e8 <USB_EPStartXfer+0x490>
 8012922:	bf00      	nop
 8012924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	691b      	ldr	r3, [r3, #16]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d123      	bne.n	8012978 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	015a      	lsls	r2, r3, #5
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	4413      	add	r3, r2
 8012938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801293c:	691a      	ldr	r2, [r3, #16]
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012946:	69b9      	ldr	r1, [r7, #24]
 8012948:	0148      	lsls	r0, r1, #5
 801294a:	69f9      	ldr	r1, [r7, #28]
 801294c:	4401      	add	r1, r0
 801294e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012952:	4313      	orrs	r3, r2
 8012954:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012956:	69bb      	ldr	r3, [r7, #24]
 8012958:	015a      	lsls	r2, r3, #5
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	4413      	add	r3, r2
 801295e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012962:	691b      	ldr	r3, [r3, #16]
 8012964:	69ba      	ldr	r2, [r7, #24]
 8012966:	0151      	lsls	r1, r2, #5
 8012968:	69fa      	ldr	r2, [r7, #28]
 801296a:	440a      	add	r2, r1
 801296c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012974:	6113      	str	r3, [r2, #16]
 8012976:	e037      	b.n	80129e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	691a      	ldr	r2, [r3, #16]
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	4413      	add	r3, r2
 8012982:	1e5a      	subs	r2, r3, #1
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	fbb2 f3f3 	udiv	r3, r2, r3
 801298c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	689b      	ldr	r3, [r3, #8]
 8012992:	8afa      	ldrh	r2, [r7, #22]
 8012994:	fb03 f202 	mul.w	r2, r3, r2
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801299c:	69bb      	ldr	r3, [r7, #24]
 801299e:	015a      	lsls	r2, r3, #5
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	4413      	add	r3, r2
 80129a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129a8:	691a      	ldr	r2, [r3, #16]
 80129aa:	8afb      	ldrh	r3, [r7, #22]
 80129ac:	04d9      	lsls	r1, r3, #19
 80129ae:	4b38      	ldr	r3, [pc, #224]	@ (8012a90 <USB_EPStartXfer+0x538>)
 80129b0:	400b      	ands	r3, r1
 80129b2:	69b9      	ldr	r1, [r7, #24]
 80129b4:	0148      	lsls	r0, r1, #5
 80129b6:	69f9      	ldr	r1, [r7, #28]
 80129b8:	4401      	add	r1, r0
 80129ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80129be:	4313      	orrs	r3, r2
 80129c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	015a      	lsls	r2, r3, #5
 80129c6:	69fb      	ldr	r3, [r7, #28]
 80129c8:	4413      	add	r3, r2
 80129ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129ce:	691a      	ldr	r2, [r3, #16]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	6a1b      	ldr	r3, [r3, #32]
 80129d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129d8:	69b9      	ldr	r1, [r7, #24]
 80129da:	0148      	lsls	r0, r1, #5
 80129dc:	69f9      	ldr	r1, [r7, #28]
 80129de:	4401      	add	r1, r0
 80129e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80129e4:	4313      	orrs	r3, r2
 80129e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80129e8:	79fb      	ldrb	r3, [r7, #7]
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d10d      	bne.n	8012a0a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d009      	beq.n	8012a0a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	68d9      	ldr	r1, [r3, #12]
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	015a      	lsls	r2, r3, #5
 80129fe:	69fb      	ldr	r3, [r7, #28]
 8012a00:	4413      	add	r3, r2
 8012a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a06:	460a      	mov	r2, r1
 8012a08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	791b      	ldrb	r3, [r3, #4]
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d128      	bne.n	8012a64 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012a18:	689b      	ldr	r3, [r3, #8]
 8012a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d110      	bne.n	8012a44 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	015a      	lsls	r2, r3, #5
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	69ba      	ldr	r2, [r7, #24]
 8012a32:	0151      	lsls	r1, r2, #5
 8012a34:	69fa      	ldr	r2, [r7, #28]
 8012a36:	440a      	add	r2, r1
 8012a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012a40:	6013      	str	r3, [r2, #0]
 8012a42:	e00f      	b.n	8012a64 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	015a      	lsls	r2, r3, #5
 8012a48:	69fb      	ldr	r3, [r7, #28]
 8012a4a:	4413      	add	r3, r2
 8012a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	69ba      	ldr	r2, [r7, #24]
 8012a54:	0151      	lsls	r1, r2, #5
 8012a56:	69fa      	ldr	r2, [r7, #28]
 8012a58:	440a      	add	r2, r1
 8012a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012a62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	015a      	lsls	r2, r3, #5
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	4413      	add	r3, r2
 8012a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	69ba      	ldr	r2, [r7, #24]
 8012a74:	0151      	lsls	r1, r2, #5
 8012a76:	69fa      	ldr	r2, [r7, #28]
 8012a78:	440a      	add	r2, r1
 8012a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3720      	adds	r7, #32
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	1ff80000 	.word	0x1ff80000

08012a94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b087      	sub	sp, #28
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	785b      	ldrb	r3, [r3, #1]
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d14a      	bne.n	8012b48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	015a      	lsls	r2, r3, #5
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	4413      	add	r3, r2
 8012abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012aca:	f040 8086 	bne.w	8012bda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	015a      	lsls	r2, r3, #5
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	683a      	ldr	r2, [r7, #0]
 8012ae0:	7812      	ldrb	r2, [r2, #0]
 8012ae2:	0151      	lsls	r1, r2, #5
 8012ae4:	693a      	ldr	r2, [r7, #16]
 8012ae6:	440a      	add	r2, r1
 8012ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012aec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012af0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	015a      	lsls	r2, r3, #5
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	4413      	add	r3, r2
 8012afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	683a      	ldr	r2, [r7, #0]
 8012b04:	7812      	ldrb	r2, [r2, #0]
 8012b06:	0151      	lsls	r1, r2, #5
 8012b08:	693a      	ldr	r2, [r7, #16]
 8012b0a:	440a      	add	r2, r1
 8012b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012b14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d902      	bls.n	8012b2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012b26:	2301      	movs	r3, #1
 8012b28:	75fb      	strb	r3, [r7, #23]
          break;
 8012b2a:	e056      	b.n	8012bda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	015a      	lsls	r2, r3, #5
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	4413      	add	r3, r2
 8012b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012b44:	d0e7      	beq.n	8012b16 <USB_EPStopXfer+0x82>
 8012b46:	e048      	b.n	8012bda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	015a      	lsls	r2, r3, #5
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	4413      	add	r3, r2
 8012b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012b60:	d13b      	bne.n	8012bda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	015a      	lsls	r2, r3, #5
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	7812      	ldrb	r2, [r2, #0]
 8012b76:	0151      	lsls	r1, r2, #5
 8012b78:	693a      	ldr	r2, [r7, #16]
 8012b7a:	440a      	add	r2, r1
 8012b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012b84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	015a      	lsls	r2, r3, #5
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	4413      	add	r3, r2
 8012b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	683a      	ldr	r2, [r7, #0]
 8012b98:	7812      	ldrb	r2, [r2, #0]
 8012b9a:	0151      	lsls	r1, r2, #5
 8012b9c:	693a      	ldr	r2, [r7, #16]
 8012b9e:	440a      	add	r2, r1
 8012ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012ba8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	3301      	adds	r3, #1
 8012bae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d902      	bls.n	8012bc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8012bbe:	e00c      	b.n	8012bda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	015a      	lsls	r2, r3, #5
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	4413      	add	r3, r2
 8012bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012bd8:	d0e7      	beq.n	8012baa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	371c      	adds	r7, #28
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr

08012be8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012be8:	b480      	push	{r7}
 8012bea:	b089      	sub	sp, #36	@ 0x24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	460b      	mov	r3, r1
 8012bf8:	71fb      	strb	r3, [r7, #7]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012c06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d123      	bne.n	8012c56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c0e:	88bb      	ldrh	r3, [r7, #4]
 8012c10:	3303      	adds	r3, #3
 8012c12:	089b      	lsrs	r3, r3, #2
 8012c14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c16:	2300      	movs	r3, #0
 8012c18:	61bb      	str	r3, [r7, #24]
 8012c1a:	e018      	b.n	8012c4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c1c:	79fb      	ldrb	r3, [r7, #7]
 8012c1e:	031a      	lsls	r2, r3, #12
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	4413      	add	r3, r2
 8012c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012c28:	461a      	mov	r2, r3
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	3301      	adds	r3, #1
 8012c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	3301      	adds	r3, #1
 8012c46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	61bb      	str	r3, [r7, #24]
 8012c4e:	69ba      	ldr	r2, [r7, #24]
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d3e2      	bcc.n	8012c1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012c56:	2300      	movs	r3, #0
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3724      	adds	r7, #36	@ 0x24
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b08b      	sub	sp, #44	@ 0x2c
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012c7a:	88fb      	ldrh	r3, [r7, #6]
 8012c7c:	089b      	lsrs	r3, r3, #2
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012c82:	88fb      	ldrh	r3, [r7, #6]
 8012c84:	f003 0303 	and.w	r3, r3, #3
 8012c88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	623b      	str	r3, [r7, #32]
 8012c8e:	e014      	b.n	8012cba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012c96:	681a      	ldr	r2, [r3, #0]
 8012c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012caa:	3301      	adds	r3, #1
 8012cac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012cb4:	6a3b      	ldr	r3, [r7, #32]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	623b      	str	r3, [r7, #32]
 8012cba:	6a3a      	ldr	r2, [r7, #32]
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d3e6      	bcc.n	8012c90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012cc2:	8bfb      	ldrh	r3, [r7, #30]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d01e      	beq.n	8012d06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012ccc:	69bb      	ldr	r3, [r7, #24]
 8012cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	f107 0310 	add.w	r3, r7, #16
 8012cd8:	6812      	ldr	r2, [r2, #0]
 8012cda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012cdc:	693a      	ldr	r2, [r7, #16]
 8012cde:	6a3b      	ldr	r3, [r7, #32]
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	00db      	lsls	r3, r3, #3
 8012ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cec:	701a      	strb	r2, [r3, #0]
      i++;
 8012cee:	6a3b      	ldr	r3, [r7, #32]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8012cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8012cfa:	8bfb      	ldrh	r3, [r7, #30]
 8012cfc:	3b01      	subs	r3, #1
 8012cfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012d00:	8bfb      	ldrh	r3, [r7, #30]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d1ea      	bne.n	8012cdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	372c      	adds	r7, #44	@ 0x2c
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b085      	sub	sp, #20
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	785b      	ldrb	r3, [r3, #1]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d12c      	bne.n	8012d8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	015a      	lsls	r2, r3, #5
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	db12      	blt.n	8012d68 <USB_EPSetStall+0x54>
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00f      	beq.n	8012d68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	015a      	lsls	r2, r3, #5
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	4413      	add	r3, r2
 8012d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	68ba      	ldr	r2, [r7, #8]
 8012d58:	0151      	lsls	r1, r2, #5
 8012d5a:	68fa      	ldr	r2, [r7, #12]
 8012d5c:	440a      	add	r2, r1
 8012d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012d66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	015a      	lsls	r2, r3, #5
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	4413      	add	r3, r2
 8012d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	0151      	lsls	r1, r2, #5
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	440a      	add	r2, r1
 8012d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012d86:	6013      	str	r3, [r2, #0]
 8012d88:	e02b      	b.n	8012de2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	015a      	lsls	r2, r3, #5
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	4413      	add	r3, r2
 8012d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	db12      	blt.n	8012dc2 <USB_EPSetStall+0xae>
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00f      	beq.n	8012dc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	015a      	lsls	r2, r3, #5
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	4413      	add	r3, r2
 8012daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	68ba      	ldr	r2, [r7, #8]
 8012db2:	0151      	lsls	r1, r2, #5
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	440a      	add	r2, r1
 8012db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012dbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012dc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	015a      	lsls	r2, r3, #5
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	4413      	add	r3, r2
 8012dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	68ba      	ldr	r2, [r7, #8]
 8012dd2:	0151      	lsls	r1, r2, #5
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	440a      	add	r2, r1
 8012dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012de0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012de2:	2300      	movs	r3, #0
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	3714      	adds	r7, #20
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr

08012df0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b085      	sub	sp, #20
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	785b      	ldrb	r3, [r3, #1]
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d128      	bne.n	8012e5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	015a      	lsls	r2, r3, #5
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	4413      	add	r3, r2
 8012e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	0151      	lsls	r1, r2, #5
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	440a      	add	r2, r1
 8012e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012e26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012e2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	791b      	ldrb	r3, [r3, #4]
 8012e30:	2b03      	cmp	r3, #3
 8012e32:	d003      	beq.n	8012e3c <USB_EPClearStall+0x4c>
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	791b      	ldrb	r3, [r3, #4]
 8012e38:	2b02      	cmp	r3, #2
 8012e3a:	d138      	bne.n	8012eae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	015a      	lsls	r2, r3, #5
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	4413      	add	r3, r2
 8012e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	68ba      	ldr	r2, [r7, #8]
 8012e4c:	0151      	lsls	r1, r2, #5
 8012e4e:	68fa      	ldr	r2, [r7, #12]
 8012e50:	440a      	add	r2, r1
 8012e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	e027      	b.n	8012eae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	015a      	lsls	r2, r3, #5
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	4413      	add	r3, r2
 8012e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	0151      	lsls	r1, r2, #5
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	440a      	add	r2, r1
 8012e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012e7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	791b      	ldrb	r3, [r3, #4]
 8012e82:	2b03      	cmp	r3, #3
 8012e84:	d003      	beq.n	8012e8e <USB_EPClearStall+0x9e>
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	791b      	ldrb	r3, [r3, #4]
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d10f      	bne.n	8012eae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	015a      	lsls	r2, r3, #5
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	4413      	add	r3, r2
 8012e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	0151      	lsls	r1, r2, #5
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	440a      	add	r2, r1
 8012ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012eac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012eae:	2300      	movs	r3, #0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3714      	adds	r7, #20
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012eda:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012ede:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	78fb      	ldrb	r3, [r7, #3]
 8012eea:	011b      	lsls	r3, r3, #4
 8012eec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012ef0:	68f9      	ldr	r1, [r7, #12]
 8012ef2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012efa:	2300      	movs	r3, #0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3714      	adds	r7, #20
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr

08012f08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b085      	sub	sp, #20
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	68fa      	ldr	r2, [r7, #12]
 8012f1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012f22:	f023 0303 	bic.w	r3, r3, #3
 8012f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	68fa      	ldr	r2, [r7, #12]
 8012f32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012f36:	f023 0302 	bic.w	r3, r3, #2
 8012f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012f3c:	2300      	movs	r3, #0
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3714      	adds	r7, #20
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012f4a:	b480      	push	{r7}
 8012f4c:	b085      	sub	sp, #20
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	68fa      	ldr	r2, [r7, #12]
 8012f60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012f64:	f023 0303 	bic.w	r3, r3, #3
 8012f68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012f78:	f043 0302 	orr.w	r3, r3, #2
 8012f7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3714      	adds	r7, #20
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b085      	sub	sp, #20
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	695b      	ldr	r3, [r3, #20]
 8012f98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	699b      	ldr	r3, [r3, #24]
 8012f9e:	68fa      	ldr	r2, [r7, #12]
 8012fa0:	4013      	ands	r3, r2
 8012fa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3714      	adds	r7, #20
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr

08012fb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012fb2:	b480      	push	{r7}
 8012fb4:	b085      	sub	sp, #20
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fc4:	699b      	ldr	r3, [r3, #24]
 8012fc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fce:	69db      	ldr	r3, [r3, #28]
 8012fd0:	68ba      	ldr	r2, [r7, #8]
 8012fd2:	4013      	ands	r3, r2
 8012fd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	0c1b      	lsrs	r3, r3, #16
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3714      	adds	r7, #20
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr

08012fe6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012fe6:	b480      	push	{r7}
 8012fe8:	b085      	sub	sp, #20
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ff8:	699b      	ldr	r3, [r3, #24]
 8012ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013002:	69db      	ldr	r3, [r3, #28]
 8013004:	68ba      	ldr	r2, [r7, #8]
 8013006:	4013      	ands	r3, r2
 8013008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	b29b      	uxth	r3, r3
}
 801300e:	4618      	mov	r0, r3
 8013010:	3714      	adds	r7, #20
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr

0801301a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801301a:	b480      	push	{r7}
 801301c:	b085      	sub	sp, #20
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
 8013022:	460b      	mov	r3, r1
 8013024:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801302a:	78fb      	ldrb	r3, [r7, #3]
 801302c:	015a      	lsls	r2, r3, #5
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	4413      	add	r3, r2
 8013032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013040:	695b      	ldr	r3, [r3, #20]
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	4013      	ands	r3, r2
 8013046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013048:	68bb      	ldr	r3, [r7, #8]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr

08013056 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013056:	b480      	push	{r7}
 8013058:	b087      	sub	sp, #28
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
 801305e:	460b      	mov	r3, r1
 8013060:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801306c:	691b      	ldr	r3, [r3, #16]
 801306e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013078:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801307a:	78fb      	ldrb	r3, [r7, #3]
 801307c:	f003 030f 	and.w	r3, r3, #15
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	fa22 f303 	lsr.w	r3, r2, r3
 8013086:	01db      	lsls	r3, r3, #7
 8013088:	b2db      	uxtb	r3, r3
 801308a:	693a      	ldr	r2, [r7, #16]
 801308c:	4313      	orrs	r3, r2
 801308e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013090:	78fb      	ldrb	r3, [r7, #3]
 8013092:	015a      	lsls	r2, r3, #5
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	4413      	add	r3, r2
 8013098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801309c:	689b      	ldr	r3, [r3, #8]
 801309e:	693a      	ldr	r2, [r7, #16]
 80130a0:	4013      	ands	r3, r2
 80130a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80130a4:	68bb      	ldr	r3, [r7, #8]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	371c      	adds	r7, #28
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr

080130b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80130b2:	b480      	push	{r7}
 80130b4:	b083      	sub	sp, #12
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	695b      	ldr	r3, [r3, #20]
 80130be:	f003 0301 	and.w	r3, r3, #1
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	370c      	adds	r7, #12
 80130c6:	46bd      	mov	sp, r7
 80130c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130cc:	4770      	bx	lr

080130ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80130ce:	b480      	push	{r7}
 80130d0:	b085      	sub	sp, #20
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80130e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80130ec:	f023 0307 	bic.w	r3, r3, #7
 80130f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	68fa      	ldr	r2, [r7, #12]
 80130fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013106:	2300      	movs	r3, #0
}
 8013108:	4618      	mov	r0, r3
 801310a:	3714      	adds	r7, #20
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr

08013114 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8013114:	b480      	push	{r7}
 8013116:	b087      	sub	sp, #28
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	460b      	mov	r3, r1
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	333c      	adds	r3, #60	@ 0x3c
 801312a:	3304      	adds	r3, #4
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	4a26      	ldr	r2, [pc, #152]	@ (80131cc <USB_EP0_OutStart+0xb8>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d90a      	bls.n	801314e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013148:	d101      	bne.n	801314e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801314a:	2300      	movs	r3, #0
 801314c:	e037      	b.n	80131be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013154:	461a      	mov	r2, r3
 8013156:	2300      	movs	r3, #0
 8013158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	697a      	ldr	r2, [r7, #20]
 8013164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013168:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801316c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013174:	691b      	ldr	r3, [r3, #16]
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801317c:	f043 0318 	orr.w	r3, r3, #24
 8013180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013188:	691b      	ldr	r3, [r3, #16]
 801318a:	697a      	ldr	r2, [r7, #20]
 801318c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013190:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013194:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013196:	7afb      	ldrb	r3, [r7, #11]
 8013198:	2b01      	cmp	r3, #1
 801319a:	d10f      	bne.n	80131bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131a2:	461a      	mov	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80131b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80131ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	371c      	adds	r7, #28
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	4f54300a 	.word	0x4f54300a

080131d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80131d8:	2300      	movs	r3, #0
 80131da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	3301      	adds	r3, #1
 80131e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80131e8:	d901      	bls.n	80131ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80131ea:	2303      	movs	r3, #3
 80131ec:	e01b      	b.n	8013226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	daf2      	bge.n	80131dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80131f6:	2300      	movs	r3, #0
 80131f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	691b      	ldr	r3, [r3, #16]
 80131fe:	f043 0201 	orr.w	r2, r3, #1
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	3301      	adds	r3, #1
 801320a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013212:	d901      	bls.n	8013218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013214:	2303      	movs	r3, #3
 8013216:	e006      	b.n	8013226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	691b      	ldr	r3, [r3, #16]
 801321c:	f003 0301 	and.w	r3, r3, #1
 8013220:	2b01      	cmp	r3, #1
 8013222:	d0f0      	beq.n	8013206 <USB_CoreReset+0x36>

  return HAL_OK;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3714      	adds	r7, #20
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr
	...

08013234 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	460b      	mov	r3, r1
 801323e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013240:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013244:	f005 ffb2 	bl	80191ac <USBD_static_malloc>
 8013248:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d109      	bne.n	8013264 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	32b0      	adds	r2, #176	@ 0xb0
 801325a:	2100      	movs	r1, #0
 801325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013260:	2302      	movs	r3, #2
 8013262:	e0d4      	b.n	801340e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013264:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8013268:	2100      	movs	r1, #0
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f008 ff6c 	bl	801c148 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	32b0      	adds	r2, #176	@ 0xb0
 801327a:	68f9      	ldr	r1, [r7, #12]
 801327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	32b0      	adds	r2, #176	@ 0xb0
 801328a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	7c1b      	ldrb	r3, [r3, #16]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d138      	bne.n	801330e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801329c:	4b5e      	ldr	r3, [pc, #376]	@ (8013418 <USBD_CDC_Init+0x1e4>)
 801329e:	7819      	ldrb	r1, [r3, #0]
 80132a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80132a4:	2202      	movs	r2, #2
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f005 fe5d 	bl	8018f66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80132ac:	4b5a      	ldr	r3, [pc, #360]	@ (8013418 <USBD_CDC_Init+0x1e4>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 020f 	and.w	r2, r3, #15
 80132b4:	6879      	ldr	r1, [r7, #4]
 80132b6:	4613      	mov	r3, r2
 80132b8:	009b      	lsls	r3, r3, #2
 80132ba:	4413      	add	r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	440b      	add	r3, r1
 80132c0:	3324      	adds	r3, #36	@ 0x24
 80132c2:	2201      	movs	r2, #1
 80132c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80132c6:	4b55      	ldr	r3, [pc, #340]	@ (801341c <USBD_CDC_Init+0x1e8>)
 80132c8:	7819      	ldrb	r1, [r3, #0]
 80132ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80132ce:	2202      	movs	r2, #2
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f005 fe48 	bl	8018f66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80132d6:	4b51      	ldr	r3, [pc, #324]	@ (801341c <USBD_CDC_Init+0x1e8>)
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	f003 020f 	and.w	r2, r3, #15
 80132de:	6879      	ldr	r1, [r7, #4]
 80132e0:	4613      	mov	r3, r2
 80132e2:	009b      	lsls	r3, r3, #2
 80132e4:	4413      	add	r3, r2
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	440b      	add	r3, r1
 80132ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80132ee:	2201      	movs	r2, #1
 80132f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80132f2:	4b4b      	ldr	r3, [pc, #300]	@ (8013420 <USBD_CDC_Init+0x1ec>)
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	f003 020f 	and.w	r2, r3, #15
 80132fa:	6879      	ldr	r1, [r7, #4]
 80132fc:	4613      	mov	r3, r2
 80132fe:	009b      	lsls	r3, r3, #2
 8013300:	4413      	add	r3, r2
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	440b      	add	r3, r1
 8013306:	3326      	adds	r3, #38	@ 0x26
 8013308:	2210      	movs	r2, #16
 801330a:	801a      	strh	r2, [r3, #0]
 801330c:	e035      	b.n	801337a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801330e:	4b42      	ldr	r3, [pc, #264]	@ (8013418 <USBD_CDC_Init+0x1e4>)
 8013310:	7819      	ldrb	r1, [r3, #0]
 8013312:	2340      	movs	r3, #64	@ 0x40
 8013314:	2202      	movs	r2, #2
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f005 fe25 	bl	8018f66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801331c:	4b3e      	ldr	r3, [pc, #248]	@ (8013418 <USBD_CDC_Init+0x1e4>)
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 020f 	and.w	r2, r3, #15
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	4613      	mov	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	4413      	add	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	440b      	add	r3, r1
 8013330:	3324      	adds	r3, #36	@ 0x24
 8013332:	2201      	movs	r2, #1
 8013334:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013336:	4b39      	ldr	r3, [pc, #228]	@ (801341c <USBD_CDC_Init+0x1e8>)
 8013338:	7819      	ldrb	r1, [r3, #0]
 801333a:	2340      	movs	r3, #64	@ 0x40
 801333c:	2202      	movs	r2, #2
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f005 fe11 	bl	8018f66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013344:	4b35      	ldr	r3, [pc, #212]	@ (801341c <USBD_CDC_Init+0x1e8>)
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	f003 020f 	and.w	r2, r3, #15
 801334c:	6879      	ldr	r1, [r7, #4]
 801334e:	4613      	mov	r3, r2
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	4413      	add	r3, r2
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	440b      	add	r3, r1
 8013358:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801335c:	2201      	movs	r2, #1
 801335e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013360:	4b2f      	ldr	r3, [pc, #188]	@ (8013420 <USBD_CDC_Init+0x1ec>)
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	f003 020f 	and.w	r2, r3, #15
 8013368:	6879      	ldr	r1, [r7, #4]
 801336a:	4613      	mov	r3, r2
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	4413      	add	r3, r2
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	440b      	add	r3, r1
 8013374:	3326      	adds	r3, #38	@ 0x26
 8013376:	2210      	movs	r2, #16
 8013378:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801337a:	4b29      	ldr	r3, [pc, #164]	@ (8013420 <USBD_CDC_Init+0x1ec>)
 801337c:	7819      	ldrb	r1, [r3, #0]
 801337e:	2308      	movs	r3, #8
 8013380:	2203      	movs	r2, #3
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f005 fdef 	bl	8018f66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013388:	4b25      	ldr	r3, [pc, #148]	@ (8013420 <USBD_CDC_Init+0x1ec>)
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	f003 020f 	and.w	r2, r3, #15
 8013390:	6879      	ldr	r1, [r7, #4]
 8013392:	4613      	mov	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	4413      	add	r3, r2
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	440b      	add	r3, r1
 801339c:	3324      	adds	r3, #36	@ 0x24
 801339e:	2201      	movs	r2, #1
 80133a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2200      	movs	r2, #0
 80133a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	33b0      	adds	r3, #176	@ 0xb0
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	4413      	add	r3, r2
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2200      	movs	r2, #0
 80133c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2200      	movs	r2, #0
 80133ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d101      	bne.n	80133dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80133d8:	2302      	movs	r3, #2
 80133da:	e018      	b.n	801340e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	7c1b      	ldrb	r3, [r3, #16]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d10a      	bne.n	80133fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80133e4:	4b0d      	ldr	r3, [pc, #52]	@ (801341c <USBD_CDC_Init+0x1e8>)
 80133e6:	7819      	ldrb	r1, [r3, #0]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80133ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f005 fea6 	bl	8019144 <USBD_LL_PrepareReceive>
 80133f8:	e008      	b.n	801340c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80133fa:	4b08      	ldr	r3, [pc, #32]	@ (801341c <USBD_CDC_Init+0x1e8>)
 80133fc:	7819      	ldrb	r1, [r3, #0]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013404:	2340      	movs	r3, #64	@ 0x40
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f005 fe9c 	bl	8019144 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	200000eb 	.word	0x200000eb
 801341c:	200000ec 	.word	0x200000ec
 8013420:	200000ed 	.word	0x200000ed

08013424 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	460b      	mov	r3, r1
 801342e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013430:	4b3a      	ldr	r3, [pc, #232]	@ (801351c <USBD_CDC_DeInit+0xf8>)
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	4619      	mov	r1, r3
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f005 fdbb 	bl	8018fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801343c:	4b37      	ldr	r3, [pc, #220]	@ (801351c <USBD_CDC_DeInit+0xf8>)
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	f003 020f 	and.w	r2, r3, #15
 8013444:	6879      	ldr	r1, [r7, #4]
 8013446:	4613      	mov	r3, r2
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4413      	add	r3, r2
 801344c:	009b      	lsls	r3, r3, #2
 801344e:	440b      	add	r3, r1
 8013450:	3324      	adds	r3, #36	@ 0x24
 8013452:	2200      	movs	r2, #0
 8013454:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013456:	4b32      	ldr	r3, [pc, #200]	@ (8013520 <USBD_CDC_DeInit+0xfc>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	4619      	mov	r1, r3
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f005 fda8 	bl	8018fb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013462:	4b2f      	ldr	r3, [pc, #188]	@ (8013520 <USBD_CDC_DeInit+0xfc>)
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	f003 020f 	and.w	r2, r3, #15
 801346a:	6879      	ldr	r1, [r7, #4]
 801346c:	4613      	mov	r3, r2
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4413      	add	r3, r2
 8013472:	009b      	lsls	r3, r3, #2
 8013474:	440b      	add	r3, r1
 8013476:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801347a:	2200      	movs	r2, #0
 801347c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801347e:	4b29      	ldr	r3, [pc, #164]	@ (8013524 <USBD_CDC_DeInit+0x100>)
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	4619      	mov	r1, r3
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f005 fd94 	bl	8018fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801348a:	4b26      	ldr	r3, [pc, #152]	@ (8013524 <USBD_CDC_DeInit+0x100>)
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	f003 020f 	and.w	r2, r3, #15
 8013492:	6879      	ldr	r1, [r7, #4]
 8013494:	4613      	mov	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	4413      	add	r3, r2
 801349a:	009b      	lsls	r3, r3, #2
 801349c:	440b      	add	r3, r1
 801349e:	3324      	adds	r3, #36	@ 0x24
 80134a0:	2200      	movs	r2, #0
 80134a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80134a4:	4b1f      	ldr	r3, [pc, #124]	@ (8013524 <USBD_CDC_DeInit+0x100>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 020f 	and.w	r2, r3, #15
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	4613      	mov	r3, r2
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	4413      	add	r3, r2
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	440b      	add	r3, r1
 80134b8:	3326      	adds	r3, #38	@ 0x26
 80134ba:	2200      	movs	r2, #0
 80134bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	32b0      	adds	r2, #176	@ 0xb0
 80134c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d01f      	beq.n	8013510 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	33b0      	adds	r3, #176	@ 0xb0
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4413      	add	r3, r2
 80134de:	685b      	ldr	r3, [r3, #4]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	32b0      	adds	r2, #176	@ 0xb0
 80134ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f005 fe68 	bl	80191c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	32b0      	adds	r2, #176	@ 0xb0
 8013502:	2100      	movs	r1, #0
 8013504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2200      	movs	r2, #0
 801350c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3708      	adds	r7, #8
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	200000eb 	.word	0x200000eb
 8013520:	200000ec 	.word	0x200000ec
 8013524:	200000ed 	.word	0x200000ed

08013528 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	32b0      	adds	r2, #176	@ 0xb0
 801353c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013540:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013542:	2300      	movs	r3, #0
 8013544:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013546:	2300      	movs	r3, #0
 8013548:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801354a:	2300      	movs	r3, #0
 801354c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d101      	bne.n	8013558 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013554:	2303      	movs	r3, #3
 8013556:	e0bf      	b.n	80136d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013560:	2b00      	cmp	r3, #0
 8013562:	d050      	beq.n	8013606 <USBD_CDC_Setup+0xde>
 8013564:	2b20      	cmp	r3, #32
 8013566:	f040 80af 	bne.w	80136c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	88db      	ldrh	r3, [r3, #6]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d03a      	beq.n	80135e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	b25b      	sxtb	r3, r3
 8013578:	2b00      	cmp	r3, #0
 801357a:	da1b      	bge.n	80135b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	33b0      	adds	r3, #176	@ 0xb0
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	4413      	add	r3, r2
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013592:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013594:	683a      	ldr	r2, [r7, #0]
 8013596:	88d2      	ldrh	r2, [r2, #6]
 8013598:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	88db      	ldrh	r3, [r3, #6]
 801359e:	2b07      	cmp	r3, #7
 80135a0:	bf28      	it	cs
 80135a2:	2307      	movcs	r3, #7
 80135a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	89fa      	ldrh	r2, [r7, #14]
 80135aa:	4619      	mov	r1, r3
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f001 fd93 	bl	80150d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80135b2:	e090      	b.n	80136d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	785a      	ldrb	r2, [r3, #1]
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	88db      	ldrh	r3, [r3, #6]
 80135c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80135c4:	d803      	bhi.n	80135ce <USBD_CDC_Setup+0xa6>
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	88db      	ldrh	r3, [r3, #6]
 80135ca:	b2da      	uxtb	r2, r3
 80135cc:	e000      	b.n	80135d0 <USBD_CDC_Setup+0xa8>
 80135ce:	2240      	movs	r2, #64	@ 0x40
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80135d6:	6939      	ldr	r1, [r7, #16]
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80135de:	461a      	mov	r2, r3
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f001 fda5 	bl	8015130 <USBD_CtlPrepareRx>
      break;
 80135e6:	e076      	b.n	80136d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	33b0      	adds	r3, #176	@ 0xb0
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	4413      	add	r3, r2
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	683a      	ldr	r2, [r7, #0]
 80135fc:	7850      	ldrb	r0, [r2, #1]
 80135fe:	2200      	movs	r2, #0
 8013600:	6839      	ldr	r1, [r7, #0]
 8013602:	4798      	blx	r3
      break;
 8013604:	e067      	b.n	80136d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	785b      	ldrb	r3, [r3, #1]
 801360a:	2b0b      	cmp	r3, #11
 801360c:	d851      	bhi.n	80136b2 <USBD_CDC_Setup+0x18a>
 801360e:	a201      	add	r2, pc, #4	@ (adr r2, 8013614 <USBD_CDC_Setup+0xec>)
 8013610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013614:	08013645 	.word	0x08013645
 8013618:	080136c1 	.word	0x080136c1
 801361c:	080136b3 	.word	0x080136b3
 8013620:	080136b3 	.word	0x080136b3
 8013624:	080136b3 	.word	0x080136b3
 8013628:	080136b3 	.word	0x080136b3
 801362c:	080136b3 	.word	0x080136b3
 8013630:	080136b3 	.word	0x080136b3
 8013634:	080136b3 	.word	0x080136b3
 8013638:	080136b3 	.word	0x080136b3
 801363c:	0801366f 	.word	0x0801366f
 8013640:	08013699 	.word	0x08013699
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801364a:	b2db      	uxtb	r3, r3
 801364c:	2b03      	cmp	r3, #3
 801364e:	d107      	bne.n	8013660 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013650:	f107 030a 	add.w	r3, r7, #10
 8013654:	2202      	movs	r2, #2
 8013656:	4619      	mov	r1, r3
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f001 fd3d 	bl	80150d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801365e:	e032      	b.n	80136c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013660:	6839      	ldr	r1, [r7, #0]
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	f001 fcbb 	bl	8014fde <USBD_CtlError>
            ret = USBD_FAIL;
 8013668:	2303      	movs	r3, #3
 801366a:	75fb      	strb	r3, [r7, #23]
          break;
 801366c:	e02b      	b.n	80136c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013674:	b2db      	uxtb	r3, r3
 8013676:	2b03      	cmp	r3, #3
 8013678:	d107      	bne.n	801368a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801367a:	f107 030d 	add.w	r3, r7, #13
 801367e:	2201      	movs	r2, #1
 8013680:	4619      	mov	r1, r3
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f001 fd28 	bl	80150d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013688:	e01d      	b.n	80136c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801368a:	6839      	ldr	r1, [r7, #0]
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f001 fca6 	bl	8014fde <USBD_CtlError>
            ret = USBD_FAIL;
 8013692:	2303      	movs	r3, #3
 8013694:	75fb      	strb	r3, [r7, #23]
          break;
 8013696:	e016      	b.n	80136c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	2b03      	cmp	r3, #3
 80136a2:	d00f      	beq.n	80136c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80136a4:	6839      	ldr	r1, [r7, #0]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f001 fc99 	bl	8014fde <USBD_CtlError>
            ret = USBD_FAIL;
 80136ac:	2303      	movs	r3, #3
 80136ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80136b0:	e008      	b.n	80136c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80136b2:	6839      	ldr	r1, [r7, #0]
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f001 fc92 	bl	8014fde <USBD_CtlError>
          ret = USBD_FAIL;
 80136ba:	2303      	movs	r3, #3
 80136bc:	75fb      	strb	r3, [r7, #23]
          break;
 80136be:	e002      	b.n	80136c6 <USBD_CDC_Setup+0x19e>
          break;
 80136c0:	bf00      	nop
 80136c2:	e008      	b.n	80136d6 <USBD_CDC_Setup+0x1ae>
          break;
 80136c4:	bf00      	nop
      }
      break;
 80136c6:	e006      	b.n	80136d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80136c8:	6839      	ldr	r1, [r7, #0]
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f001 fc87 	bl	8014fde <USBD_CtlError>
      ret = USBD_FAIL;
 80136d0:	2303      	movs	r3, #3
 80136d2:	75fb      	strb	r3, [r7, #23]
      break;
 80136d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80136d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3718      	adds	r7, #24
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	460b      	mov	r3, r1
 80136ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80136f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	32b0      	adds	r2, #176	@ 0xb0
 80136fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d101      	bne.n	801370a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013706:	2303      	movs	r3, #3
 8013708:	e065      	b.n	80137d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	32b0      	adds	r2, #176	@ 0xb0
 8013714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013718:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801371a:	78fb      	ldrb	r3, [r7, #3]
 801371c:	f003 020f 	and.w	r2, r3, #15
 8013720:	6879      	ldr	r1, [r7, #4]
 8013722:	4613      	mov	r3, r2
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4413      	add	r3, r2
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	440b      	add	r3, r1
 801372c:	3318      	adds	r3, #24
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d02f      	beq.n	8013794 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013734:	78fb      	ldrb	r3, [r7, #3]
 8013736:	f003 020f 	and.w	r2, r3, #15
 801373a:	6879      	ldr	r1, [r7, #4]
 801373c:	4613      	mov	r3, r2
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	4413      	add	r3, r2
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	440b      	add	r3, r1
 8013746:	3318      	adds	r3, #24
 8013748:	681a      	ldr	r2, [r3, #0]
 801374a:	78fb      	ldrb	r3, [r7, #3]
 801374c:	f003 010f 	and.w	r1, r3, #15
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	460b      	mov	r3, r1
 8013754:	00db      	lsls	r3, r3, #3
 8013756:	440b      	add	r3, r1
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	4403      	add	r3, r0
 801375c:	331c      	adds	r3, #28
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	fbb2 f1f3 	udiv	r1, r2, r3
 8013764:	fb01 f303 	mul.w	r3, r1, r3
 8013768:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801376a:	2b00      	cmp	r3, #0
 801376c:	d112      	bne.n	8013794 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801376e:	78fb      	ldrb	r3, [r7, #3]
 8013770:	f003 020f 	and.w	r2, r3, #15
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	4613      	mov	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4413      	add	r3, r2
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	440b      	add	r3, r1
 8013780:	3318      	adds	r3, #24
 8013782:	2200      	movs	r2, #0
 8013784:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013786:	78f9      	ldrb	r1, [r7, #3]
 8013788:	2300      	movs	r3, #0
 801378a:	2200      	movs	r2, #0
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f005 fcb8 	bl	8019102 <USBD_LL_Transmit>
 8013792:	e01f      	b.n	80137d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	2200      	movs	r2, #0
 8013798:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	33b0      	adds	r3, #176	@ 0xb0
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	4413      	add	r3, r2
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	691b      	ldr	r3, [r3, #16]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d010      	beq.n	80137d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	33b0      	adds	r3, #176	@ 0xb0
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	4413      	add	r3, r2
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	691b      	ldr	r3, [r3, #16]
 80137c4:	68ba      	ldr	r2, [r7, #8]
 80137c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80137ca:	68ba      	ldr	r2, [r7, #8]
 80137cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80137d0:	78fa      	ldrb	r2, [r7, #3]
 80137d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}

080137de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b084      	sub	sp, #16
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]
 80137e6:	460b      	mov	r3, r1
 80137e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	32b0      	adds	r2, #176	@ 0xb0
 80137f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	32b0      	adds	r2, #176	@ 0xb0
 8013804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d101      	bne.n	8013810 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801380c:	2303      	movs	r3, #3
 801380e:	e01a      	b.n	8013846 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013810:	78fb      	ldrb	r3, [r7, #3]
 8013812:	4619      	mov	r1, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f005 fcb6 	bl	8019186 <USBD_LL_GetRxDataSize>
 801381a:	4602      	mov	r2, r0
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	33b0      	adds	r3, #176	@ 0xb0
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	4413      	add	r3, r2
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013840:	4611      	mov	r1, r2
 8013842:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013844:	2300      	movs	r3, #0
}
 8013846:	4618      	mov	r0, r3
 8013848:	3710      	adds	r7, #16
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}

0801384e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801384e:	b580      	push	{r7, lr}
 8013850:	b084      	sub	sp, #16
 8013852:	af00      	add	r7, sp, #0
 8013854:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	32b0      	adds	r2, #176	@ 0xb0
 8013860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013864:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d101      	bne.n	8013870 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801386c:	2303      	movs	r3, #3
 801386e:	e024      	b.n	80138ba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	33b0      	adds	r3, #176	@ 0xb0
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d019      	beq.n	80138b8 <USBD_CDC_EP0_RxReady+0x6a>
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801388a:	2bff      	cmp	r3, #255	@ 0xff
 801388c:	d014      	beq.n	80138b8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013894:	687a      	ldr	r2, [r7, #4]
 8013896:	33b0      	adds	r3, #176	@ 0xb0
 8013898:	009b      	lsls	r3, r3, #2
 801389a:	4413      	add	r3, r2
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80138a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80138a8:	68fa      	ldr	r2, [r7, #12]
 80138aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80138ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	22ff      	movs	r2, #255	@ 0xff
 80138b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3710      	adds	r7, #16
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
	...

080138c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b086      	sub	sp, #24
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80138cc:	2182      	movs	r1, #130	@ 0x82
 80138ce:	4818      	ldr	r0, [pc, #96]	@ (8013930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80138d0:	f000 fd4f 	bl	8014372 <USBD_GetEpDesc>
 80138d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80138d6:	2101      	movs	r1, #1
 80138d8:	4815      	ldr	r0, [pc, #84]	@ (8013930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80138da:	f000 fd4a 	bl	8014372 <USBD_GetEpDesc>
 80138de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80138e0:	2181      	movs	r1, #129	@ 0x81
 80138e2:	4813      	ldr	r0, [pc, #76]	@ (8013930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80138e4:	f000 fd45 	bl	8014372 <USBD_GetEpDesc>
 80138e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d002      	beq.n	80138f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	2210      	movs	r2, #16
 80138f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d006      	beq.n	801390a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	2200      	movs	r2, #0
 8013900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013904:	711a      	strb	r2, [r3, #4]
 8013906:	2200      	movs	r2, #0
 8013908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d006      	beq.n	801391e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2200      	movs	r2, #0
 8013914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013918:	711a      	strb	r2, [r3, #4]
 801391a:	2200      	movs	r2, #0
 801391c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2243      	movs	r2, #67	@ 0x43
 8013922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013924:	4b02      	ldr	r3, [pc, #8]	@ (8013930 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013926:	4618      	mov	r0, r3
 8013928:	3718      	adds	r7, #24
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}
 801392e:	bf00      	nop
 8013930:	200000a8 	.word	0x200000a8

08013934 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b086      	sub	sp, #24
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801393c:	2182      	movs	r1, #130	@ 0x82
 801393e:	4818      	ldr	r0, [pc, #96]	@ (80139a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013940:	f000 fd17 	bl	8014372 <USBD_GetEpDesc>
 8013944:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013946:	2101      	movs	r1, #1
 8013948:	4815      	ldr	r0, [pc, #84]	@ (80139a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801394a:	f000 fd12 	bl	8014372 <USBD_GetEpDesc>
 801394e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013950:	2181      	movs	r1, #129	@ 0x81
 8013952:	4813      	ldr	r0, [pc, #76]	@ (80139a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013954:	f000 fd0d 	bl	8014372 <USBD_GetEpDesc>
 8013958:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d002      	beq.n	8013966 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	2210      	movs	r2, #16
 8013964:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d006      	beq.n	801397a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	2200      	movs	r2, #0
 8013970:	711a      	strb	r2, [r3, #4]
 8013972:	2200      	movs	r2, #0
 8013974:	f042 0202 	orr.w	r2, r2, #2
 8013978:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d006      	beq.n	801398e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	711a      	strb	r2, [r3, #4]
 8013986:	2200      	movs	r2, #0
 8013988:	f042 0202 	orr.w	r2, r2, #2
 801398c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2243      	movs	r2, #67	@ 0x43
 8013992:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013994:	4b02      	ldr	r3, [pc, #8]	@ (80139a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013996:	4618      	mov	r0, r3
 8013998:	3718      	adds	r7, #24
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	200000a8 	.word	0x200000a8

080139a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80139ac:	2182      	movs	r1, #130	@ 0x82
 80139ae:	4818      	ldr	r0, [pc, #96]	@ (8013a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80139b0:	f000 fcdf 	bl	8014372 <USBD_GetEpDesc>
 80139b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80139b6:	2101      	movs	r1, #1
 80139b8:	4815      	ldr	r0, [pc, #84]	@ (8013a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80139ba:	f000 fcda 	bl	8014372 <USBD_GetEpDesc>
 80139be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80139c0:	2181      	movs	r1, #129	@ 0x81
 80139c2:	4813      	ldr	r0, [pc, #76]	@ (8013a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80139c4:	f000 fcd5 	bl	8014372 <USBD_GetEpDesc>
 80139c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d002      	beq.n	80139d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	2210      	movs	r2, #16
 80139d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d006      	beq.n	80139ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	2200      	movs	r2, #0
 80139e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80139e4:	711a      	strb	r2, [r3, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d006      	beq.n	80139fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2200      	movs	r2, #0
 80139f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80139f8:	711a      	strb	r2, [r3, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2243      	movs	r2, #67	@ 0x43
 8013a02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013a04:	4b02      	ldr	r3, [pc, #8]	@ (8013a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3718      	adds	r7, #24
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	200000a8 	.word	0x200000a8

08013a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	220a      	movs	r2, #10
 8013a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013a22:	4b03      	ldr	r3, [pc, #12]	@ (8013a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	370c      	adds	r7, #12
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr
 8013a30:	20000064 	.word	0x20000064

08013a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b083      	sub	sp, #12
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d101      	bne.n	8013a48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a44:	2303      	movs	r3, #3
 8013a46:	e009      	b.n	8013a5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013a4e:	687a      	ldr	r2, [r7, #4]
 8013a50:	33b0      	adds	r3, #176	@ 0xb0
 8013a52:	009b      	lsls	r3, r3, #2
 8013a54:	4413      	add	r3, r2
 8013a56:	683a      	ldr	r2, [r7, #0]
 8013a58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013a5a:	2300      	movs	r3, #0
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b087      	sub	sp, #28
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	32b0      	adds	r2, #176	@ 0xb0
 8013a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d101      	bne.n	8013a8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013a8a:	2303      	movs	r3, #3
 8013a8c:	e008      	b.n	8013aa0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013a9e:	2300      	movs	r3, #0
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	371c      	adds	r7, #28
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr

08013aac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013aac:	b480      	push	{r7}
 8013aae:	b085      	sub	sp, #20
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	32b0      	adds	r2, #176	@ 0xb0
 8013ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013acc:	2303      	movs	r3, #3
 8013ace:	e004      	b.n	8013ada <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	683a      	ldr	r2, [r7, #0]
 8013ad4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013ad8:	2300      	movs	r3, #0
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3714      	adds	r7, #20
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr
	...

08013ae8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	32b0      	adds	r2, #176	@ 0xb0
 8013afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013b00:	2301      	movs	r3, #1
 8013b02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d101      	bne.n	8013b0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	e025      	b.n	8013b5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d11f      	bne.n	8013b58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013b20:	4b10      	ldr	r3, [pc, #64]	@ (8013b64 <USBD_CDC_TransmitPacket+0x7c>)
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	f003 020f 	and.w	r2, r3, #15
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	4613      	mov	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	4403      	add	r3, r0
 8013b3a:	3318      	adds	r3, #24
 8013b3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013b3e:	4b09      	ldr	r3, [pc, #36]	@ (8013b64 <USBD_CDC_TransmitPacket+0x7c>)
 8013b40:	7819      	ldrb	r1, [r3, #0]
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f005 fad7 	bl	8019102 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013b54:	2300      	movs	r3, #0
 8013b56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3710      	adds	r7, #16
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	200000eb 	.word	0x200000eb

08013b68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b084      	sub	sp, #16
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	32b0      	adds	r2, #176	@ 0xb0
 8013b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	32b0      	adds	r2, #176	@ 0xb0
 8013b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d101      	bne.n	8013b96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013b92:	2303      	movs	r3, #3
 8013b94:	e018      	b.n	8013bc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	7c1b      	ldrb	r3, [r3, #16]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d10a      	bne.n	8013bb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8013bd0 <USBD_CDC_ReceivePacket+0x68>)
 8013ba0:	7819      	ldrb	r1, [r3, #0]
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f005 fac9 	bl	8019144 <USBD_LL_PrepareReceive>
 8013bb2:	e008      	b.n	8013bc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013bb4:	4b06      	ldr	r3, [pc, #24]	@ (8013bd0 <USBD_CDC_ReceivePacket+0x68>)
 8013bb6:	7819      	ldrb	r1, [r3, #0]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013bbe:	2340      	movs	r3, #64	@ 0x40
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f005 fabf 	bl	8019144 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013bc6:	2300      	movs	r3, #0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3710      	adds	r7, #16
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	200000ec 	.word	0x200000ec

08013bd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	60b9      	str	r1, [r7, #8]
 8013bde:	4613      	mov	r3, r2
 8013be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d101      	bne.n	8013bec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013be8:	2303      	movs	r3, #3
 8013bea:	e01f      	b.n	8013c2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d003      	beq.n	8013c12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	68ba      	ldr	r2, [r7, #8]
 8013c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	2201      	movs	r2, #1
 8013c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	79fa      	ldrb	r2, [r7, #7]
 8013c1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013c20:	68f8      	ldr	r0, [r7, #12]
 8013c22:	f005 f939 	bl	8018e98 <USBD_LL_Init>
 8013c26:	4603      	mov	r3, r0
 8013c28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3718      	adds	r7, #24
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b084      	sub	sp, #16
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d101      	bne.n	8013c4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013c48:	2303      	movs	r3, #3
 8013c4a:	e025      	b.n	8013c98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	683a      	ldr	r2, [r7, #0]
 8013c50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	32ae      	adds	r2, #174	@ 0xae
 8013c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00f      	beq.n	8013c88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	32ae      	adds	r2, #174	@ 0xae
 8013c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c78:	f107 020e 	add.w	r2, r7, #14
 8013c7c:	4610      	mov	r0, r2
 8013c7e:	4798      	blx	r3
 8013c80:	4602      	mov	r2, r0
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013c8e:	1c5a      	adds	r2, r3, #1
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013c96:	2300      	movs	r3, #0
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f005 f941 	bl	8018f30 <USBD_LL_Start>
 8013cae:	4603      	mov	r3, r0
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013cc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	370c      	adds	r7, #12
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr

08013cce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b084      	sub	sp, #16
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
 8013cd6:	460b      	mov	r3, r1
 8013cd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d009      	beq.n	8013cfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	78fa      	ldrb	r2, [r7, #3]
 8013cf2:	4611      	mov	r1, r2
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	4798      	blx	r3
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3710      	adds	r7, #16
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d06:	b580      	push	{r7, lr}
 8013d08:	b084      	sub	sp, #16
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	460b      	mov	r3, r1
 8013d10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d12:	2300      	movs	r3, #0
 8013d14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	78fa      	ldrb	r2, [r7, #3]
 8013d20:	4611      	mov	r1, r2
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	4798      	blx	r3
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013d2c:	2303      	movs	r3, #3
 8013d2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3710      	adds	r7, #16
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}

08013d3a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013d3a:	b580      	push	{r7, lr}
 8013d3c:	b084      	sub	sp, #16
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
 8013d42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d4a:	6839      	ldr	r1, [r7, #0]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f001 f90c 	bl	8014f6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2201      	movs	r2, #1
 8013d56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013d60:	461a      	mov	r2, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013d6e:	f003 031f 	and.w	r3, r3, #31
 8013d72:	2b02      	cmp	r3, #2
 8013d74:	d01a      	beq.n	8013dac <USBD_LL_SetupStage+0x72>
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	d822      	bhi.n	8013dc0 <USBD_LL_SetupStage+0x86>
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d002      	beq.n	8013d84 <USBD_LL_SetupStage+0x4a>
 8013d7e:	2b01      	cmp	r3, #1
 8013d80:	d00a      	beq.n	8013d98 <USBD_LL_SetupStage+0x5e>
 8013d82:	e01d      	b.n	8013dc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f000 fb63 	bl	8014458 <USBD_StdDevReq>
 8013d92:	4603      	mov	r3, r0
 8013d94:	73fb      	strb	r3, [r7, #15]
      break;
 8013d96:	e020      	b.n	8013dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d9e:	4619      	mov	r1, r3
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 fbcb 	bl	801453c <USBD_StdItfReq>
 8013da6:	4603      	mov	r3, r0
 8013da8:	73fb      	strb	r3, [r7, #15]
      break;
 8013daa:	e016      	b.n	8013dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013db2:	4619      	mov	r1, r3
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 fc2d 	bl	8014614 <USBD_StdEPReq>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8013dbe:	e00c      	b.n	8013dda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013dc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013dca:	b2db      	uxtb	r3, r3
 8013dcc:	4619      	mov	r1, r3
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f005 f90e 	bl	8018ff0 <USBD_LL_StallEP>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8013dd8:	bf00      	nop
  }

  return ret;
 8013dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3710      	adds	r7, #16
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	460b      	mov	r3, r1
 8013dee:	607a      	str	r2, [r7, #4]
 8013df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013df2:	2300      	movs	r3, #0
 8013df4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013df6:	7afb      	ldrb	r3, [r7, #11]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d16e      	bne.n	8013eda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013e02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013e0a:	2b03      	cmp	r3, #3
 8013e0c:	f040 8098 	bne.w	8013f40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	689a      	ldr	r2, [r3, #8]
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	68db      	ldr	r3, [r3, #12]
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d913      	bls.n	8013e44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	689a      	ldr	r2, [r3, #8]
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	1ad2      	subs	r2, r2, r3
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	68da      	ldr	r2, [r3, #12]
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	4293      	cmp	r3, r2
 8013e34:	bf28      	it	cs
 8013e36:	4613      	movcs	r3, r2
 8013e38:	461a      	mov	r2, r3
 8013e3a:	6879      	ldr	r1, [r7, #4]
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f001 f994 	bl	801516a <USBD_CtlContinueRx>
 8013e42:	e07d      	b.n	8013f40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013e4a:	f003 031f 	and.w	r3, r3, #31
 8013e4e:	2b02      	cmp	r3, #2
 8013e50:	d014      	beq.n	8013e7c <USBD_LL_DataOutStage+0x98>
 8013e52:	2b02      	cmp	r3, #2
 8013e54:	d81d      	bhi.n	8013e92 <USBD_LL_DataOutStage+0xae>
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d002      	beq.n	8013e60 <USBD_LL_DataOutStage+0x7c>
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d003      	beq.n	8013e66 <USBD_LL_DataOutStage+0x82>
 8013e5e:	e018      	b.n	8013e92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013e60:	2300      	movs	r3, #0
 8013e62:	75bb      	strb	r3, [r7, #22]
            break;
 8013e64:	e018      	b.n	8013e98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	4619      	mov	r1, r3
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f000 fa64 	bl	801433e <USBD_CoreFindIF>
 8013e76:	4603      	mov	r3, r0
 8013e78:	75bb      	strb	r3, [r7, #22]
            break;
 8013e7a:	e00d      	b.n	8013e98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013e82:	b2db      	uxtb	r3, r3
 8013e84:	4619      	mov	r1, r3
 8013e86:	68f8      	ldr	r0, [r7, #12]
 8013e88:	f000 fa66 	bl	8014358 <USBD_CoreFindEP>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	75bb      	strb	r3, [r7, #22]
            break;
 8013e90:	e002      	b.n	8013e98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013e92:	2300      	movs	r3, #0
 8013e94:	75bb      	strb	r3, [r7, #22]
            break;
 8013e96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013e98:	7dbb      	ldrb	r3, [r7, #22]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d119      	bne.n	8013ed2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	2b03      	cmp	r3, #3
 8013ea8:	d113      	bne.n	8013ed2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013eaa:	7dba      	ldrb	r2, [r7, #22]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	32ae      	adds	r2, #174	@ 0xae
 8013eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eb4:	691b      	ldr	r3, [r3, #16]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00b      	beq.n	8013ed2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013eba:	7dba      	ldrb	r2, [r7, #22]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013ec2:	7dba      	ldrb	r2, [r7, #22]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	32ae      	adds	r2, #174	@ 0xae
 8013ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ecc:	691b      	ldr	r3, [r3, #16]
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f001 f95a 	bl	801518c <USBD_CtlSendStatus>
 8013ed8:	e032      	b.n	8013f40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013eda:	7afb      	ldrb	r3, [r7, #11]
 8013edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	68f8      	ldr	r0, [r7, #12]
 8013ee6:	f000 fa37 	bl	8014358 <USBD_CoreFindEP>
 8013eea:	4603      	mov	r3, r0
 8013eec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013eee:	7dbb      	ldrb	r3, [r7, #22]
 8013ef0:	2bff      	cmp	r3, #255	@ 0xff
 8013ef2:	d025      	beq.n	8013f40 <USBD_LL_DataOutStage+0x15c>
 8013ef4:	7dbb      	ldrb	r3, [r7, #22]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d122      	bne.n	8013f40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b03      	cmp	r3, #3
 8013f04:	d117      	bne.n	8013f36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013f06:	7dba      	ldrb	r2, [r7, #22]
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	32ae      	adds	r2, #174	@ 0xae
 8013f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f10:	699b      	ldr	r3, [r3, #24]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00f      	beq.n	8013f36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013f16:	7dba      	ldrb	r2, [r7, #22]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013f1e:	7dba      	ldrb	r2, [r7, #22]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	32ae      	adds	r2, #174	@ 0xae
 8013f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f28:	699b      	ldr	r3, [r3, #24]
 8013f2a:	7afa      	ldrb	r2, [r7, #11]
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	68f8      	ldr	r0, [r7, #12]
 8013f30:	4798      	blx	r3
 8013f32:	4603      	mov	r3, r0
 8013f34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013f36:	7dfb      	ldrb	r3, [r7, #23]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d001      	beq.n	8013f40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013f3c:	7dfb      	ldrb	r3, [r7, #23]
 8013f3e:	e000      	b.n	8013f42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3718      	adds	r7, #24
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013f4a:	b580      	push	{r7, lr}
 8013f4c:	b086      	sub	sp, #24
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	60f8      	str	r0, [r7, #12]
 8013f52:	460b      	mov	r3, r1
 8013f54:	607a      	str	r2, [r7, #4]
 8013f56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013f58:	7afb      	ldrb	r3, [r7, #11]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d16f      	bne.n	801403e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	3314      	adds	r3, #20
 8013f62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013f6a:	2b02      	cmp	r3, #2
 8013f6c:	d15a      	bne.n	8014024 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	689a      	ldr	r2, [r3, #8]
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d914      	bls.n	8013fa4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	689a      	ldr	r2, [r3, #8]
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	68db      	ldr	r3, [r3, #12]
 8013f82:	1ad2      	subs	r2, r2, r3
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	6879      	ldr	r1, [r7, #4]
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	f001 f8bc 	bl	801510e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f96:	2300      	movs	r3, #0
 8013f98:	2200      	movs	r2, #0
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	68f8      	ldr	r0, [r7, #12]
 8013f9e:	f005 f8d1 	bl	8019144 <USBD_LL_PrepareReceive>
 8013fa2:	e03f      	b.n	8014024 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	68da      	ldr	r2, [r3, #12]
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	689b      	ldr	r3, [r3, #8]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d11c      	bne.n	8013fea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	685a      	ldr	r2, [r3, #4]
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d316      	bcc.n	8013fea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	685a      	ldr	r2, [r3, #4]
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d20f      	bcs.n	8013fea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013fca:	2200      	movs	r2, #0
 8013fcc:	2100      	movs	r1, #0
 8013fce:	68f8      	ldr	r0, [r7, #12]
 8013fd0:	f001 f89d 	bl	801510e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013fdc:	2300      	movs	r3, #0
 8013fde:	2200      	movs	r2, #0
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	68f8      	ldr	r0, [r7, #12]
 8013fe4:	f005 f8ae 	bl	8019144 <USBD_LL_PrepareReceive>
 8013fe8:	e01c      	b.n	8014024 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	2b03      	cmp	r3, #3
 8013ff4:	d10f      	bne.n	8014016 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ffc:	68db      	ldr	r3, [r3, #12]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d009      	beq.n	8014016 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2200      	movs	r2, #0
 8014006:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	68f8      	ldr	r0, [r7, #12]
 8014014:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014016:	2180      	movs	r1, #128	@ 0x80
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f004 ffe9 	bl	8018ff0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801401e:	68f8      	ldr	r0, [r7, #12]
 8014020:	f001 f8c7 	bl	80151b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d03a      	beq.n	80140a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801402e:	68f8      	ldr	r0, [r7, #12]
 8014030:	f7ff fe42 	bl	8013cb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	2200      	movs	r2, #0
 8014038:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801403c:	e032      	b.n	80140a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801403e:	7afb      	ldrb	r3, [r7, #11]
 8014040:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014044:	b2db      	uxtb	r3, r3
 8014046:	4619      	mov	r1, r3
 8014048:	68f8      	ldr	r0, [r7, #12]
 801404a:	f000 f985 	bl	8014358 <USBD_CoreFindEP>
 801404e:	4603      	mov	r3, r0
 8014050:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014052:	7dfb      	ldrb	r3, [r7, #23]
 8014054:	2bff      	cmp	r3, #255	@ 0xff
 8014056:	d025      	beq.n	80140a4 <USBD_LL_DataInStage+0x15a>
 8014058:	7dfb      	ldrb	r3, [r7, #23]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d122      	bne.n	80140a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014064:	b2db      	uxtb	r3, r3
 8014066:	2b03      	cmp	r3, #3
 8014068:	d11c      	bne.n	80140a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801406a:	7dfa      	ldrb	r2, [r7, #23]
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	32ae      	adds	r2, #174	@ 0xae
 8014070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014074:	695b      	ldr	r3, [r3, #20]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d014      	beq.n	80140a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801407a:	7dfa      	ldrb	r2, [r7, #23]
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014082:	7dfa      	ldrb	r2, [r7, #23]
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	32ae      	adds	r2, #174	@ 0xae
 8014088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801408c:	695b      	ldr	r3, [r3, #20]
 801408e:	7afa      	ldrb	r2, [r7, #11]
 8014090:	4611      	mov	r1, r2
 8014092:	68f8      	ldr	r0, [r7, #12]
 8014094:	4798      	blx	r3
 8014096:	4603      	mov	r3, r0
 8014098:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801409a:	7dbb      	ldrb	r3, [r7, #22]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d001      	beq.n	80140a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80140a0:	7dbb      	ldrb	r3, [r7, #22]
 80140a2:	e000      	b.n	80140a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3718      	adds	r7, #24
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b084      	sub	sp, #16
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80140b6:	2300      	movs	r3, #0
 80140b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2201      	movs	r2, #1
 80140be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2200      	movs	r2, #0
 80140c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2200      	movs	r2, #0
 80140ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2200      	movs	r2, #0
 80140d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d014      	beq.n	8014114 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00e      	beq.n	8014114 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140fc:	685b      	ldr	r3, [r3, #4]
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	6852      	ldr	r2, [r2, #4]
 8014102:	b2d2      	uxtb	r2, r2
 8014104:	4611      	mov	r1, r2
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	4798      	blx	r3
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d001      	beq.n	8014114 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014110:	2303      	movs	r3, #3
 8014112:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014114:	2340      	movs	r3, #64	@ 0x40
 8014116:	2200      	movs	r2, #0
 8014118:	2100      	movs	r1, #0
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f004 ff23 	bl	8018f66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2201      	movs	r2, #1
 8014124:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2240      	movs	r2, #64	@ 0x40
 801412c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014130:	2340      	movs	r3, #64	@ 0x40
 8014132:	2200      	movs	r2, #0
 8014134:	2180      	movs	r1, #128	@ 0x80
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f004 ff15 	bl	8018f66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2201      	movs	r2, #1
 8014140:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2240      	movs	r2, #64	@ 0x40
 8014146:	621a      	str	r2, [r3, #32]

  return ret;
 8014148:	7bfb      	ldrb	r3, [r7, #15]
}
 801414a:	4618      	mov	r0, r3
 801414c:	3710      	adds	r7, #16
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014152:	b480      	push	{r7}
 8014154:	b083      	sub	sp, #12
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
 801415a:	460b      	mov	r3, r1
 801415c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	78fa      	ldrb	r2, [r7, #3]
 8014162:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014164:	2300      	movs	r3, #0
}
 8014166:	4618      	mov	r0, r3
 8014168:	370c      	adds	r7, #12
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr

08014172 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014172:	b480      	push	{r7}
 8014174:	b083      	sub	sp, #12
 8014176:	af00      	add	r7, sp, #0
 8014178:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014180:	b2db      	uxtb	r3, r3
 8014182:	2b04      	cmp	r3, #4
 8014184:	d006      	beq.n	8014194 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801418c:	b2da      	uxtb	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2204      	movs	r2, #4
 8014198:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801419c:	2300      	movs	r3, #0
}
 801419e:	4618      	mov	r0, r3
 80141a0:	370c      	adds	r7, #12
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr

080141aa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80141aa:	b480      	push	{r7}
 80141ac:	b083      	sub	sp, #12
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	d106      	bne.n	80141cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80141c4:	b2da      	uxtb	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	370c      	adds	r7, #12
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr

080141da <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b082      	sub	sp, #8
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	2b03      	cmp	r3, #3
 80141ec:	d110      	bne.n	8014210 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d00b      	beq.n	8014210 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141fe:	69db      	ldr	r3, [r3, #28]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d005      	beq.n	8014210 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801420a:	69db      	ldr	r3, [r3, #28]
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014210:	2300      	movs	r3, #0
}
 8014212:	4618      	mov	r0, r3
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801421a:	b580      	push	{r7, lr}
 801421c:	b082      	sub	sp, #8
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
 8014222:	460b      	mov	r3, r1
 8014224:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	32ae      	adds	r2, #174	@ 0xae
 8014230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d101      	bne.n	801423c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014238:	2303      	movs	r3, #3
 801423a:	e01c      	b.n	8014276 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014242:	b2db      	uxtb	r3, r3
 8014244:	2b03      	cmp	r3, #3
 8014246:	d115      	bne.n	8014274 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	32ae      	adds	r2, #174	@ 0xae
 8014252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014256:	6a1b      	ldr	r3, [r3, #32]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00b      	beq.n	8014274 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	32ae      	adds	r2, #174	@ 0xae
 8014266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801426a:	6a1b      	ldr	r3, [r3, #32]
 801426c:	78fa      	ldrb	r2, [r7, #3]
 801426e:	4611      	mov	r1, r2
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014274:	2300      	movs	r3, #0
}
 8014276:	4618      	mov	r0, r3
 8014278:	3708      	adds	r7, #8
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}

0801427e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801427e:	b580      	push	{r7, lr}
 8014280:	b082      	sub	sp, #8
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
 8014286:	460b      	mov	r3, r1
 8014288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	32ae      	adds	r2, #174	@ 0xae
 8014294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d101      	bne.n	80142a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801429c:	2303      	movs	r3, #3
 801429e:	e01c      	b.n	80142da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142a6:	b2db      	uxtb	r3, r3
 80142a8:	2b03      	cmp	r3, #3
 80142aa:	d115      	bne.n	80142d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	32ae      	adds	r2, #174	@ 0xae
 80142b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d00b      	beq.n	80142d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	32ae      	adds	r2, #174	@ 0xae
 80142ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142d0:	78fa      	ldrb	r2, [r7, #3]
 80142d2:	4611      	mov	r1, r2
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80142d8:	2300      	movs	r3, #0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3708      	adds	r7, #8
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80142e2:	b480      	push	{r7}
 80142e4:	b083      	sub	sp, #12
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80142ea:	2300      	movs	r3, #0
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	370c      	adds	r7, #12
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr

080142f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014300:	2300      	movs	r3, #0
 8014302:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2201      	movs	r2, #1
 8014308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014312:	2b00      	cmp	r3, #0
 8014314:	d00e      	beq.n	8014334 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	687a      	ldr	r2, [r7, #4]
 8014320:	6852      	ldr	r2, [r2, #4]
 8014322:	b2d2      	uxtb	r2, r2
 8014324:	4611      	mov	r1, r2
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	4798      	blx	r3
 801432a:	4603      	mov	r3, r0
 801432c:	2b00      	cmp	r3, #0
 801432e:	d001      	beq.n	8014334 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014330:	2303      	movs	r3, #3
 8014332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014334:	7bfb      	ldrb	r3, [r7, #15]
}
 8014336:	4618      	mov	r0, r3
 8014338:	3710      	adds	r7, #16
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801433e:	b480      	push	{r7}
 8014340:	b083      	sub	sp, #12
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
 8014346:	460b      	mov	r3, r1
 8014348:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801434a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801434c:	4618      	mov	r0, r3
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	460b      	mov	r3, r1
 8014362:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014364:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014366:	4618      	mov	r0, r3
 8014368:	370c      	adds	r7, #12
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b086      	sub	sp, #24
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	460b      	mov	r3, r1
 801437c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014386:	2300      	movs	r3, #0
 8014388:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	885b      	ldrh	r3, [r3, #2]
 801438e:	b29b      	uxth	r3, r3
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	7812      	ldrb	r2, [r2, #0]
 8014394:	4293      	cmp	r3, r2
 8014396:	d91f      	bls.n	80143d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	781b      	ldrb	r3, [r3, #0]
 801439c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801439e:	e013      	b.n	80143c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80143a0:	f107 030a 	add.w	r3, r7, #10
 80143a4:	4619      	mov	r1, r3
 80143a6:	6978      	ldr	r0, [r7, #20]
 80143a8:	f000 f81b 	bl	80143e2 <USBD_GetNextDesc>
 80143ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	785b      	ldrb	r3, [r3, #1]
 80143b2:	2b05      	cmp	r3, #5
 80143b4:	d108      	bne.n	80143c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	789b      	ldrb	r3, [r3, #2]
 80143be:	78fa      	ldrb	r2, [r7, #3]
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d008      	beq.n	80143d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80143c4:	2300      	movs	r3, #0
 80143c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	885b      	ldrh	r3, [r3, #2]
 80143cc:	b29a      	uxth	r2, r3
 80143ce:	897b      	ldrh	r3, [r7, #10]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d8e5      	bhi.n	80143a0 <USBD_GetEpDesc+0x2e>
 80143d4:	e000      	b.n	80143d8 <USBD_GetEpDesc+0x66>
          break;
 80143d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80143d8:	693b      	ldr	r3, [r7, #16]
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3718      	adds	r7, #24
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}

080143e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80143e2:	b480      	push	{r7}
 80143e4:	b085      	sub	sp, #20
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	6078      	str	r0, [r7, #4]
 80143ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	881b      	ldrh	r3, [r3, #0]
 80143f4:	68fa      	ldr	r2, [r7, #12]
 80143f6:	7812      	ldrb	r2, [r2, #0]
 80143f8:	4413      	add	r3, r2
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	461a      	mov	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	4413      	add	r3, r2
 801440a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801440c:	68fb      	ldr	r3, [r7, #12]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3714      	adds	r7, #20
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr

0801441a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801441a:	b480      	push	{r7}
 801441c:	b087      	sub	sp, #28
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	3301      	adds	r3, #1
 8014430:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014438:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801443c:	021b      	lsls	r3, r3, #8
 801443e:	b21a      	sxth	r2, r3
 8014440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014444:	4313      	orrs	r3, r2
 8014446:	b21b      	sxth	r3, r3
 8014448:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801444a:	89fb      	ldrh	r3, [r7, #14]
}
 801444c:	4618      	mov	r0, r3
 801444e:	371c      	adds	r7, #28
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr

08014458 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014462:	2300      	movs	r3, #0
 8014464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801446e:	2b40      	cmp	r3, #64	@ 0x40
 8014470:	d005      	beq.n	801447e <USBD_StdDevReq+0x26>
 8014472:	2b40      	cmp	r3, #64	@ 0x40
 8014474:	d857      	bhi.n	8014526 <USBD_StdDevReq+0xce>
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00f      	beq.n	801449a <USBD_StdDevReq+0x42>
 801447a:	2b20      	cmp	r3, #32
 801447c:	d153      	bne.n	8014526 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	32ae      	adds	r2, #174	@ 0xae
 8014488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801448c:	689b      	ldr	r3, [r3, #8]
 801448e:	6839      	ldr	r1, [r7, #0]
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	4798      	blx	r3
 8014494:	4603      	mov	r3, r0
 8014496:	73fb      	strb	r3, [r7, #15]
      break;
 8014498:	e04a      	b.n	8014530 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	785b      	ldrb	r3, [r3, #1]
 801449e:	2b09      	cmp	r3, #9
 80144a0:	d83b      	bhi.n	801451a <USBD_StdDevReq+0xc2>
 80144a2:	a201      	add	r2, pc, #4	@ (adr r2, 80144a8 <USBD_StdDevReq+0x50>)
 80144a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144a8:	080144fd 	.word	0x080144fd
 80144ac:	08014511 	.word	0x08014511
 80144b0:	0801451b 	.word	0x0801451b
 80144b4:	08014507 	.word	0x08014507
 80144b8:	0801451b 	.word	0x0801451b
 80144bc:	080144db 	.word	0x080144db
 80144c0:	080144d1 	.word	0x080144d1
 80144c4:	0801451b 	.word	0x0801451b
 80144c8:	080144f3 	.word	0x080144f3
 80144cc:	080144e5 	.word	0x080144e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 fa3c 	bl	8014950 <USBD_GetDescriptor>
          break;
 80144d8:	e024      	b.n	8014524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80144da:	6839      	ldr	r1, [r7, #0]
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f000 fba1 	bl	8014c24 <USBD_SetAddress>
          break;
 80144e2:	e01f      	b.n	8014524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80144e4:	6839      	ldr	r1, [r7, #0]
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f000 fbe0 	bl	8014cac <USBD_SetConfig>
 80144ec:	4603      	mov	r3, r0
 80144ee:	73fb      	strb	r3, [r7, #15]
          break;
 80144f0:	e018      	b.n	8014524 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80144f2:	6839      	ldr	r1, [r7, #0]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 fc83 	bl	8014e00 <USBD_GetConfig>
          break;
 80144fa:	e013      	b.n	8014524 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 fcb4 	bl	8014e6c <USBD_GetStatus>
          break;
 8014504:	e00e      	b.n	8014524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014506:	6839      	ldr	r1, [r7, #0]
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f000 fce3 	bl	8014ed4 <USBD_SetFeature>
          break;
 801450e:	e009      	b.n	8014524 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014510:	6839      	ldr	r1, [r7, #0]
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 fd07 	bl	8014f26 <USBD_ClrFeature>
          break;
 8014518:	e004      	b.n	8014524 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801451a:	6839      	ldr	r1, [r7, #0]
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 fd5e 	bl	8014fde <USBD_CtlError>
          break;
 8014522:	bf00      	nop
      }
      break;
 8014524:	e004      	b.n	8014530 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014526:	6839      	ldr	r1, [r7, #0]
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f000 fd58 	bl	8014fde <USBD_CtlError>
      break;
 801452e:	bf00      	nop
  }

  return ret;
 8014530:	7bfb      	ldrb	r3, [r7, #15]
}
 8014532:	4618      	mov	r0, r3
 8014534:	3710      	adds	r7, #16
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop

0801453c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014546:	2300      	movs	r3, #0
 8014548:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014552:	2b40      	cmp	r3, #64	@ 0x40
 8014554:	d005      	beq.n	8014562 <USBD_StdItfReq+0x26>
 8014556:	2b40      	cmp	r3, #64	@ 0x40
 8014558:	d852      	bhi.n	8014600 <USBD_StdItfReq+0xc4>
 801455a:	2b00      	cmp	r3, #0
 801455c:	d001      	beq.n	8014562 <USBD_StdItfReq+0x26>
 801455e:	2b20      	cmp	r3, #32
 8014560:	d14e      	bne.n	8014600 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014568:	b2db      	uxtb	r3, r3
 801456a:	3b01      	subs	r3, #1
 801456c:	2b02      	cmp	r3, #2
 801456e:	d840      	bhi.n	80145f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	889b      	ldrh	r3, [r3, #4]
 8014574:	b2db      	uxtb	r3, r3
 8014576:	2b01      	cmp	r3, #1
 8014578:	d836      	bhi.n	80145e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	889b      	ldrh	r3, [r3, #4]
 801457e:	b2db      	uxtb	r3, r3
 8014580:	4619      	mov	r1, r3
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f7ff fedb 	bl	801433e <USBD_CoreFindIF>
 8014588:	4603      	mov	r3, r0
 801458a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801458c:	7bbb      	ldrb	r3, [r7, #14]
 801458e:	2bff      	cmp	r3, #255	@ 0xff
 8014590:	d01d      	beq.n	80145ce <USBD_StdItfReq+0x92>
 8014592:	7bbb      	ldrb	r3, [r7, #14]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d11a      	bne.n	80145ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014598:	7bba      	ldrb	r2, [r7, #14]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	32ae      	adds	r2, #174	@ 0xae
 801459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145a2:	689b      	ldr	r3, [r3, #8]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d00f      	beq.n	80145c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80145a8:	7bba      	ldrb	r2, [r7, #14]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80145b0:	7bba      	ldrb	r2, [r7, #14]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	32ae      	adds	r2, #174	@ 0xae
 80145b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	6839      	ldr	r1, [r7, #0]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	4798      	blx	r3
 80145c2:	4603      	mov	r3, r0
 80145c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80145c6:	e004      	b.n	80145d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80145c8:	2303      	movs	r3, #3
 80145ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80145cc:	e001      	b.n	80145d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80145ce:	2303      	movs	r3, #3
 80145d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	88db      	ldrh	r3, [r3, #6]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d110      	bne.n	80145fc <USBD_StdItfReq+0xc0>
 80145da:	7bfb      	ldrb	r3, [r7, #15]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d10d      	bne.n	80145fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 fdd3 	bl	801518c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80145e6:	e009      	b.n	80145fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80145e8:	6839      	ldr	r1, [r7, #0]
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 fcf7 	bl	8014fde <USBD_CtlError>
          break;
 80145f0:	e004      	b.n	80145fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80145f2:	6839      	ldr	r1, [r7, #0]
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f000 fcf2 	bl	8014fde <USBD_CtlError>
          break;
 80145fa:	e000      	b.n	80145fe <USBD_StdItfReq+0xc2>
          break;
 80145fc:	bf00      	nop
      }
      break;
 80145fe:	e004      	b.n	801460a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014600:	6839      	ldr	r1, [r7, #0]
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f000 fceb 	bl	8014fde <USBD_CtlError>
      break;
 8014608:	bf00      	nop
  }

  return ret;
 801460a:	7bfb      	ldrb	r3, [r7, #15]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801461e:	2300      	movs	r3, #0
 8014620:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	889b      	ldrh	r3, [r3, #4]
 8014626:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014630:	2b40      	cmp	r3, #64	@ 0x40
 8014632:	d007      	beq.n	8014644 <USBD_StdEPReq+0x30>
 8014634:	2b40      	cmp	r3, #64	@ 0x40
 8014636:	f200 817f 	bhi.w	8014938 <USBD_StdEPReq+0x324>
 801463a:	2b00      	cmp	r3, #0
 801463c:	d02a      	beq.n	8014694 <USBD_StdEPReq+0x80>
 801463e:	2b20      	cmp	r3, #32
 8014640:	f040 817a 	bne.w	8014938 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014644:	7bbb      	ldrb	r3, [r7, #14]
 8014646:	4619      	mov	r1, r3
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7ff fe85 	bl	8014358 <USBD_CoreFindEP>
 801464e:	4603      	mov	r3, r0
 8014650:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014652:	7b7b      	ldrb	r3, [r7, #13]
 8014654:	2bff      	cmp	r3, #255	@ 0xff
 8014656:	f000 8174 	beq.w	8014942 <USBD_StdEPReq+0x32e>
 801465a:	7b7b      	ldrb	r3, [r7, #13]
 801465c:	2b00      	cmp	r3, #0
 801465e:	f040 8170 	bne.w	8014942 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014662:	7b7a      	ldrb	r2, [r7, #13]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801466a:	7b7a      	ldrb	r2, [r7, #13]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	32ae      	adds	r2, #174	@ 0xae
 8014670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014674:	689b      	ldr	r3, [r3, #8]
 8014676:	2b00      	cmp	r3, #0
 8014678:	f000 8163 	beq.w	8014942 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801467c:	7b7a      	ldrb	r2, [r7, #13]
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	32ae      	adds	r2, #174	@ 0xae
 8014682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014686:	689b      	ldr	r3, [r3, #8]
 8014688:	6839      	ldr	r1, [r7, #0]
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	4798      	blx	r3
 801468e:	4603      	mov	r3, r0
 8014690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014692:	e156      	b.n	8014942 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	785b      	ldrb	r3, [r3, #1]
 8014698:	2b03      	cmp	r3, #3
 801469a:	d008      	beq.n	80146ae <USBD_StdEPReq+0x9a>
 801469c:	2b03      	cmp	r3, #3
 801469e:	f300 8145 	bgt.w	801492c <USBD_StdEPReq+0x318>
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f000 809b 	beq.w	80147de <USBD_StdEPReq+0x1ca>
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d03c      	beq.n	8014726 <USBD_StdEPReq+0x112>
 80146ac:	e13e      	b.n	801492c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146b4:	b2db      	uxtb	r3, r3
 80146b6:	2b02      	cmp	r3, #2
 80146b8:	d002      	beq.n	80146c0 <USBD_StdEPReq+0xac>
 80146ba:	2b03      	cmp	r3, #3
 80146bc:	d016      	beq.n	80146ec <USBD_StdEPReq+0xd8>
 80146be:	e02c      	b.n	801471a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146c0:	7bbb      	ldrb	r3, [r7, #14]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00d      	beq.n	80146e2 <USBD_StdEPReq+0xce>
 80146c6:	7bbb      	ldrb	r3, [r7, #14]
 80146c8:	2b80      	cmp	r3, #128	@ 0x80
 80146ca:	d00a      	beq.n	80146e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80146cc:	7bbb      	ldrb	r3, [r7, #14]
 80146ce:	4619      	mov	r1, r3
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f004 fc8d 	bl	8018ff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80146d6:	2180      	movs	r1, #128	@ 0x80
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f004 fc89 	bl	8018ff0 <USBD_LL_StallEP>
 80146de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80146e0:	e020      	b.n	8014724 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80146e2:	6839      	ldr	r1, [r7, #0]
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 fc7a 	bl	8014fde <USBD_CtlError>
              break;
 80146ea:	e01b      	b.n	8014724 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	885b      	ldrh	r3, [r3, #2]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d10e      	bne.n	8014712 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80146f4:	7bbb      	ldrb	r3, [r7, #14]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00b      	beq.n	8014712 <USBD_StdEPReq+0xfe>
 80146fa:	7bbb      	ldrb	r3, [r7, #14]
 80146fc:	2b80      	cmp	r3, #128	@ 0x80
 80146fe:	d008      	beq.n	8014712 <USBD_StdEPReq+0xfe>
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	88db      	ldrh	r3, [r3, #6]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d104      	bne.n	8014712 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014708:	7bbb      	ldrb	r3, [r7, #14]
 801470a:	4619      	mov	r1, r3
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f004 fc6f 	bl	8018ff0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 fd3a 	bl	801518c <USBD_CtlSendStatus>

              break;
 8014718:	e004      	b.n	8014724 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801471a:	6839      	ldr	r1, [r7, #0]
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f000 fc5e 	bl	8014fde <USBD_CtlError>
              break;
 8014722:	bf00      	nop
          }
          break;
 8014724:	e107      	b.n	8014936 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801472c:	b2db      	uxtb	r3, r3
 801472e:	2b02      	cmp	r3, #2
 8014730:	d002      	beq.n	8014738 <USBD_StdEPReq+0x124>
 8014732:	2b03      	cmp	r3, #3
 8014734:	d016      	beq.n	8014764 <USBD_StdEPReq+0x150>
 8014736:	e04b      	b.n	80147d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014738:	7bbb      	ldrb	r3, [r7, #14]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00d      	beq.n	801475a <USBD_StdEPReq+0x146>
 801473e:	7bbb      	ldrb	r3, [r7, #14]
 8014740:	2b80      	cmp	r3, #128	@ 0x80
 8014742:	d00a      	beq.n	801475a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014744:	7bbb      	ldrb	r3, [r7, #14]
 8014746:	4619      	mov	r1, r3
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f004 fc51 	bl	8018ff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801474e:	2180      	movs	r1, #128	@ 0x80
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f004 fc4d 	bl	8018ff0 <USBD_LL_StallEP>
 8014756:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014758:	e040      	b.n	80147dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801475a:	6839      	ldr	r1, [r7, #0]
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 fc3e 	bl	8014fde <USBD_CtlError>
              break;
 8014762:	e03b      	b.n	80147dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	885b      	ldrh	r3, [r3, #2]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d136      	bne.n	80147da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801476c:	7bbb      	ldrb	r3, [r7, #14]
 801476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014772:	2b00      	cmp	r3, #0
 8014774:	d004      	beq.n	8014780 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014776:	7bbb      	ldrb	r3, [r7, #14]
 8014778:	4619      	mov	r1, r3
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f004 fc57 	bl	801902e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 fd03 	bl	801518c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014786:	7bbb      	ldrb	r3, [r7, #14]
 8014788:	4619      	mov	r1, r3
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7ff fde4 	bl	8014358 <USBD_CoreFindEP>
 8014790:	4603      	mov	r3, r0
 8014792:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014794:	7b7b      	ldrb	r3, [r7, #13]
 8014796:	2bff      	cmp	r3, #255	@ 0xff
 8014798:	d01f      	beq.n	80147da <USBD_StdEPReq+0x1c6>
 801479a:	7b7b      	ldrb	r3, [r7, #13]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d11c      	bne.n	80147da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80147a0:	7b7a      	ldrb	r2, [r7, #13]
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80147a8:	7b7a      	ldrb	r2, [r7, #13]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	32ae      	adds	r2, #174	@ 0xae
 80147ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147b2:	689b      	ldr	r3, [r3, #8]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d010      	beq.n	80147da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80147b8:	7b7a      	ldrb	r2, [r7, #13]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	32ae      	adds	r2, #174	@ 0xae
 80147be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147c2:	689b      	ldr	r3, [r3, #8]
 80147c4:	6839      	ldr	r1, [r7, #0]
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	4798      	blx	r3
 80147ca:	4603      	mov	r3, r0
 80147cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80147ce:	e004      	b.n	80147da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80147d0:	6839      	ldr	r1, [r7, #0]
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 fc03 	bl	8014fde <USBD_CtlError>
              break;
 80147d8:	e000      	b.n	80147dc <USBD_StdEPReq+0x1c8>
              break;
 80147da:	bf00      	nop
          }
          break;
 80147dc:	e0ab      	b.n	8014936 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d002      	beq.n	80147f0 <USBD_StdEPReq+0x1dc>
 80147ea:	2b03      	cmp	r3, #3
 80147ec:	d032      	beq.n	8014854 <USBD_StdEPReq+0x240>
 80147ee:	e097      	b.n	8014920 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147f0:	7bbb      	ldrb	r3, [r7, #14]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d007      	beq.n	8014806 <USBD_StdEPReq+0x1f2>
 80147f6:	7bbb      	ldrb	r3, [r7, #14]
 80147f8:	2b80      	cmp	r3, #128	@ 0x80
 80147fa:	d004      	beq.n	8014806 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80147fc:	6839      	ldr	r1, [r7, #0]
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 fbed 	bl	8014fde <USBD_CtlError>
                break;
 8014804:	e091      	b.n	801492a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801480a:	2b00      	cmp	r3, #0
 801480c:	da0b      	bge.n	8014826 <USBD_StdEPReq+0x212>
 801480e:	7bbb      	ldrb	r3, [r7, #14]
 8014810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014814:	4613      	mov	r3, r2
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	4413      	add	r3, r2
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	3310      	adds	r3, #16
 801481e:	687a      	ldr	r2, [r7, #4]
 8014820:	4413      	add	r3, r2
 8014822:	3304      	adds	r3, #4
 8014824:	e00b      	b.n	801483e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014826:	7bbb      	ldrb	r3, [r7, #14]
 8014828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801482c:	4613      	mov	r3, r2
 801482e:	009b      	lsls	r3, r3, #2
 8014830:	4413      	add	r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	4413      	add	r3, r2
 801483c:	3304      	adds	r3, #4
 801483e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	2200      	movs	r2, #0
 8014844:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	2202      	movs	r2, #2
 801484a:	4619      	mov	r1, r3
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f000 fc43 	bl	80150d8 <USBD_CtlSendData>
              break;
 8014852:	e06a      	b.n	801492a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014858:	2b00      	cmp	r3, #0
 801485a:	da11      	bge.n	8014880 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801485c:	7bbb      	ldrb	r3, [r7, #14]
 801485e:	f003 020f 	and.w	r2, r3, #15
 8014862:	6879      	ldr	r1, [r7, #4]
 8014864:	4613      	mov	r3, r2
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4413      	add	r3, r2
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	440b      	add	r3, r1
 801486e:	3324      	adds	r3, #36	@ 0x24
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d117      	bne.n	80148a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014876:	6839      	ldr	r1, [r7, #0]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 fbb0 	bl	8014fde <USBD_CtlError>
                  break;
 801487e:	e054      	b.n	801492a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014880:	7bbb      	ldrb	r3, [r7, #14]
 8014882:	f003 020f 	and.w	r2, r3, #15
 8014886:	6879      	ldr	r1, [r7, #4]
 8014888:	4613      	mov	r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	4413      	add	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	440b      	add	r3, r1
 8014892:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014896:	881b      	ldrh	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d104      	bne.n	80148a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801489c:	6839      	ldr	r1, [r7, #0]
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f000 fb9d 	bl	8014fde <USBD_CtlError>
                  break;
 80148a4:	e041      	b.n	801492a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	da0b      	bge.n	80148c6 <USBD_StdEPReq+0x2b2>
 80148ae:	7bbb      	ldrb	r3, [r7, #14]
 80148b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80148b4:	4613      	mov	r3, r2
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	4413      	add	r3, r2
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	3310      	adds	r3, #16
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	4413      	add	r3, r2
 80148c2:	3304      	adds	r3, #4
 80148c4:	e00b      	b.n	80148de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80148c6:	7bbb      	ldrb	r3, [r7, #14]
 80148c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148cc:	4613      	mov	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	4413      	add	r3, r2
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	4413      	add	r3, r2
 80148dc:	3304      	adds	r3, #4
 80148de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80148e0:	7bbb      	ldrb	r3, [r7, #14]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d002      	beq.n	80148ec <USBD_StdEPReq+0x2d8>
 80148e6:	7bbb      	ldrb	r3, [r7, #14]
 80148e8:	2b80      	cmp	r3, #128	@ 0x80
 80148ea:	d103      	bne.n	80148f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	2200      	movs	r2, #0
 80148f0:	601a      	str	r2, [r3, #0]
 80148f2:	e00e      	b.n	8014912 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80148f4:	7bbb      	ldrb	r3, [r7, #14]
 80148f6:	4619      	mov	r1, r3
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f004 fbb7 	bl	801906c <USBD_LL_IsStallEP>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d003      	beq.n	801490c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	2201      	movs	r2, #1
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	e002      	b.n	8014912 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	2200      	movs	r2, #0
 8014910:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	2202      	movs	r2, #2
 8014916:	4619      	mov	r1, r3
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 fbdd 	bl	80150d8 <USBD_CtlSendData>
              break;
 801491e:	e004      	b.n	801492a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014920:	6839      	ldr	r1, [r7, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 fb5b 	bl	8014fde <USBD_CtlError>
              break;
 8014928:	bf00      	nop
          }
          break;
 801492a:	e004      	b.n	8014936 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801492c:	6839      	ldr	r1, [r7, #0]
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 fb55 	bl	8014fde <USBD_CtlError>
          break;
 8014934:	bf00      	nop
      }
      break;
 8014936:	e005      	b.n	8014944 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014938:	6839      	ldr	r1, [r7, #0]
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 fb4f 	bl	8014fde <USBD_CtlError>
      break;
 8014940:	e000      	b.n	8014944 <USBD_StdEPReq+0x330>
      break;
 8014942:	bf00      	nop
  }

  return ret;
 8014944:	7bfb      	ldrb	r3, [r7, #15]
}
 8014946:	4618      	mov	r0, r3
 8014948:	3710      	adds	r7, #16
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
	...

08014950 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b084      	sub	sp, #16
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801495a:	2300      	movs	r3, #0
 801495c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801495e:	2300      	movs	r3, #0
 8014960:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014962:	2300      	movs	r3, #0
 8014964:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	885b      	ldrh	r3, [r3, #2]
 801496a:	0a1b      	lsrs	r3, r3, #8
 801496c:	b29b      	uxth	r3, r3
 801496e:	3b01      	subs	r3, #1
 8014970:	2b06      	cmp	r3, #6
 8014972:	f200 8128 	bhi.w	8014bc6 <USBD_GetDescriptor+0x276>
 8014976:	a201      	add	r2, pc, #4	@ (adr r2, 801497c <USBD_GetDescriptor+0x2c>)
 8014978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801497c:	08014999 	.word	0x08014999
 8014980:	080149b1 	.word	0x080149b1
 8014984:	080149f1 	.word	0x080149f1
 8014988:	08014bc7 	.word	0x08014bc7
 801498c:	08014bc7 	.word	0x08014bc7
 8014990:	08014b67 	.word	0x08014b67
 8014994:	08014b93 	.word	0x08014b93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	7c12      	ldrb	r2, [r2, #16]
 80149a4:	f107 0108 	add.w	r1, r7, #8
 80149a8:	4610      	mov	r0, r2
 80149aa:	4798      	blx	r3
 80149ac:	60f8      	str	r0, [r7, #12]
      break;
 80149ae:	e112      	b.n	8014bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	7c1b      	ldrb	r3, [r3, #16]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d10d      	bne.n	80149d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80149be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149c0:	f107 0208 	add.w	r2, r7, #8
 80149c4:	4610      	mov	r0, r2
 80149c6:	4798      	blx	r3
 80149c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	3301      	adds	r3, #1
 80149ce:	2202      	movs	r2, #2
 80149d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80149d2:	e100      	b.n	8014bd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80149da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149dc:	f107 0208 	add.w	r2, r7, #8
 80149e0:	4610      	mov	r0, r2
 80149e2:	4798      	blx	r3
 80149e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	3301      	adds	r3, #1
 80149ea:	2202      	movs	r2, #2
 80149ec:	701a      	strb	r2, [r3, #0]
      break;
 80149ee:	e0f2      	b.n	8014bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	885b      	ldrh	r3, [r3, #2]
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	2b05      	cmp	r3, #5
 80149f8:	f200 80ac 	bhi.w	8014b54 <USBD_GetDescriptor+0x204>
 80149fc:	a201      	add	r2, pc, #4	@ (adr r2, 8014a04 <USBD_GetDescriptor+0xb4>)
 80149fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a02:	bf00      	nop
 8014a04:	08014a1d 	.word	0x08014a1d
 8014a08:	08014a51 	.word	0x08014a51
 8014a0c:	08014a85 	.word	0x08014a85
 8014a10:	08014ab9 	.word	0x08014ab9
 8014a14:	08014aed 	.word	0x08014aed
 8014a18:	08014b21 	.word	0x08014b21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00b      	beq.n	8014a40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	7c12      	ldrb	r2, [r2, #16]
 8014a34:	f107 0108 	add.w	r1, r7, #8
 8014a38:	4610      	mov	r0, r2
 8014a3a:	4798      	blx	r3
 8014a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a3e:	e091      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 facb 	bl	8014fde <USBD_CtlError>
            err++;
 8014a48:	7afb      	ldrb	r3, [r7, #11]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a4e:	e089      	b.n	8014b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a56:	689b      	ldr	r3, [r3, #8]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d00b      	beq.n	8014a74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a62:	689b      	ldr	r3, [r3, #8]
 8014a64:	687a      	ldr	r2, [r7, #4]
 8014a66:	7c12      	ldrb	r2, [r2, #16]
 8014a68:	f107 0108 	add.w	r1, r7, #8
 8014a6c:	4610      	mov	r0, r2
 8014a6e:	4798      	blx	r3
 8014a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a72:	e077      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 fab1 	bl	8014fde <USBD_CtlError>
            err++;
 8014a7c:	7afb      	ldrb	r3, [r7, #11]
 8014a7e:	3301      	adds	r3, #1
 8014a80:	72fb      	strb	r3, [r7, #11]
          break;
 8014a82:	e06f      	b.n	8014b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d00b      	beq.n	8014aa8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	687a      	ldr	r2, [r7, #4]
 8014a9a:	7c12      	ldrb	r2, [r2, #16]
 8014a9c:	f107 0108 	add.w	r1, r7, #8
 8014aa0:	4610      	mov	r0, r2
 8014aa2:	4798      	blx	r3
 8014aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014aa6:	e05d      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014aa8:	6839      	ldr	r1, [r7, #0]
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f000 fa97 	bl	8014fde <USBD_CtlError>
            err++;
 8014ab0:	7afb      	ldrb	r3, [r7, #11]
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8014ab6:	e055      	b.n	8014b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00b      	beq.n	8014adc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014aca:	691b      	ldr	r3, [r3, #16]
 8014acc:	687a      	ldr	r2, [r7, #4]
 8014ace:	7c12      	ldrb	r2, [r2, #16]
 8014ad0:	f107 0108 	add.w	r1, r7, #8
 8014ad4:	4610      	mov	r0, r2
 8014ad6:	4798      	blx	r3
 8014ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ada:	e043      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014adc:	6839      	ldr	r1, [r7, #0]
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 fa7d 	bl	8014fde <USBD_CtlError>
            err++;
 8014ae4:	7afb      	ldrb	r3, [r7, #11]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8014aea:	e03b      	b.n	8014b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014af2:	695b      	ldr	r3, [r3, #20]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d00b      	beq.n	8014b10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014afe:	695b      	ldr	r3, [r3, #20]
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	7c12      	ldrb	r2, [r2, #16]
 8014b04:	f107 0108 	add.w	r1, r7, #8
 8014b08:	4610      	mov	r0, r2
 8014b0a:	4798      	blx	r3
 8014b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b0e:	e029      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 fa63 	bl	8014fde <USBD_CtlError>
            err++;
 8014b18:	7afb      	ldrb	r3, [r7, #11]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b1e:	e021      	b.n	8014b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b26:	699b      	ldr	r3, [r3, #24]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00b      	beq.n	8014b44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b32:	699b      	ldr	r3, [r3, #24]
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	7c12      	ldrb	r2, [r2, #16]
 8014b38:	f107 0108 	add.w	r1, r7, #8
 8014b3c:	4610      	mov	r0, r2
 8014b3e:	4798      	blx	r3
 8014b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b42:	e00f      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b44:	6839      	ldr	r1, [r7, #0]
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f000 fa49 	bl	8014fde <USBD_CtlError>
            err++;
 8014b4c:	7afb      	ldrb	r3, [r7, #11]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	72fb      	strb	r3, [r7, #11]
          break;
 8014b52:	e007      	b.n	8014b64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f000 fa41 	bl	8014fde <USBD_CtlError>
          err++;
 8014b5c:	7afb      	ldrb	r3, [r7, #11]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014b62:	bf00      	nop
      }
      break;
 8014b64:	e037      	b.n	8014bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	7c1b      	ldrb	r3, [r3, #16]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d109      	bne.n	8014b82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b76:	f107 0208 	add.w	r2, r7, #8
 8014b7a:	4610      	mov	r0, r2
 8014b7c:	4798      	blx	r3
 8014b7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b80:	e029      	b.n	8014bd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014b82:	6839      	ldr	r1, [r7, #0]
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f000 fa2a 	bl	8014fde <USBD_CtlError>
        err++;
 8014b8a:	7afb      	ldrb	r3, [r7, #11]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8014b90:	e021      	b.n	8014bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	7c1b      	ldrb	r3, [r3, #16]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d10d      	bne.n	8014bb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ba2:	f107 0208 	add.w	r2, r7, #8
 8014ba6:	4610      	mov	r0, r2
 8014ba8:	4798      	blx	r3
 8014baa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	3301      	adds	r3, #1
 8014bb0:	2207      	movs	r2, #7
 8014bb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014bb4:	e00f      	b.n	8014bd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 fa10 	bl	8014fde <USBD_CtlError>
        err++;
 8014bbe:	7afb      	ldrb	r3, [r7, #11]
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8014bc4:	e007      	b.n	8014bd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014bc6:	6839      	ldr	r1, [r7, #0]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 fa08 	bl	8014fde <USBD_CtlError>
      err++;
 8014bce:	7afb      	ldrb	r3, [r7, #11]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8014bd4:	bf00      	nop
  }

  if (err != 0U)
 8014bd6:	7afb      	ldrb	r3, [r7, #11]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d11e      	bne.n	8014c1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	88db      	ldrh	r3, [r3, #6]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d016      	beq.n	8014c12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014be4:	893b      	ldrh	r3, [r7, #8]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00e      	beq.n	8014c08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	88da      	ldrh	r2, [r3, #6]
 8014bee:	893b      	ldrh	r3, [r7, #8]
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	bf28      	it	cs
 8014bf4:	4613      	movcs	r3, r2
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014bfa:	893b      	ldrh	r3, [r7, #8]
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	68f9      	ldr	r1, [r7, #12]
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f000 fa69 	bl	80150d8 <USBD_CtlSendData>
 8014c06:	e009      	b.n	8014c1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014c08:	6839      	ldr	r1, [r7, #0]
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 f9e7 	bl	8014fde <USBD_CtlError>
 8014c10:	e004      	b.n	8014c1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f000 faba 	bl	801518c <USBD_CtlSendStatus>
 8014c18:	e000      	b.n	8014c1c <USBD_GetDescriptor+0x2cc>
    return;
 8014c1a:	bf00      	nop
  }
}
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop

08014c24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	889b      	ldrh	r3, [r3, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d131      	bne.n	8014c9a <USBD_SetAddress+0x76>
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	88db      	ldrh	r3, [r3, #6]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d12d      	bne.n	8014c9a <USBD_SetAddress+0x76>
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	885b      	ldrh	r3, [r3, #2]
 8014c42:	2b7f      	cmp	r3, #127	@ 0x7f
 8014c44:	d829      	bhi.n	8014c9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	885b      	ldrh	r3, [r3, #2]
 8014c4a:	b2db      	uxtb	r3, r3
 8014c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c58:	b2db      	uxtb	r3, r3
 8014c5a:	2b03      	cmp	r3, #3
 8014c5c:	d104      	bne.n	8014c68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014c5e:	6839      	ldr	r1, [r7, #0]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 f9bc 	bl	8014fde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c66:	e01d      	b.n	8014ca4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	7bfa      	ldrb	r2, [r7, #15]
 8014c6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
 8014c72:	4619      	mov	r1, r3
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f004 fa25 	bl	80190c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f000 fa86 	bl	801518c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014c80:	7bfb      	ldrb	r3, [r7, #15]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d004      	beq.n	8014c90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2202      	movs	r2, #2
 8014c8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c8e:	e009      	b.n	8014ca4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2201      	movs	r2, #1
 8014c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c98:	e004      	b.n	8014ca4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014c9a:	6839      	ldr	r1, [r7, #0]
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 f99e 	bl	8014fde <USBD_CtlError>
  }
}
 8014ca2:	bf00      	nop
 8014ca4:	bf00      	nop
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	885b      	ldrh	r3, [r3, #2]
 8014cbe:	b2da      	uxtb	r2, r3
 8014cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014cc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d905      	bls.n	8014cd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014ccc:	6839      	ldr	r1, [r7, #0]
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f000 f985 	bl	8014fde <USBD_CtlError>
    return USBD_FAIL;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	e08c      	b.n	8014df2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	2b02      	cmp	r3, #2
 8014ce2:	d002      	beq.n	8014cea <USBD_SetConfig+0x3e>
 8014ce4:	2b03      	cmp	r3, #3
 8014ce6:	d029      	beq.n	8014d3c <USBD_SetConfig+0x90>
 8014ce8:	e075      	b.n	8014dd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014cea:	4b44      	ldr	r3, [pc, #272]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014cec:	781b      	ldrb	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d020      	beq.n	8014d34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014cf2:	4b42      	ldr	r3, [pc, #264]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	4619      	mov	r1, r3
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f7fe ffe3 	bl	8013cce <USBD_SetClassConfig>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014d0c:	7bfb      	ldrb	r3, [r7, #15]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d008      	beq.n	8014d24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 f962 	bl	8014fde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2202      	movs	r2, #2
 8014d1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014d22:	e065      	b.n	8014df0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 fa31 	bl	801518c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2203      	movs	r2, #3
 8014d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014d32:	e05d      	b.n	8014df0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 fa29 	bl	801518c <USBD_CtlSendStatus>
      break;
 8014d3a:	e059      	b.n	8014df0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014d3e:	781b      	ldrb	r3, [r3, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d112      	bne.n	8014d6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2202      	movs	r2, #2
 8014d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	461a      	mov	r2, r3
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d56:	4b29      	ldr	r3, [pc, #164]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f7fe ffd2 	bl	8013d06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f000 fa12 	bl	801518c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014d68:	e042      	b.n	8014df0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014d6a:	4b24      	ldr	r3, [pc, #144]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	461a      	mov	r2, r3
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d02a      	beq.n	8014dce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	4619      	mov	r1, r3
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7fe ffc0 	bl	8013d06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014d86:	4b1d      	ldr	r3, [pc, #116]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014d90:	4b1a      	ldr	r3, [pc, #104]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	4619      	mov	r1, r3
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7fe ff99 	bl	8013cce <USBD_SetClassConfig>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014da0:	7bfb      	ldrb	r3, [r7, #15]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d00f      	beq.n	8014dc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014da6:	6839      	ldr	r1, [r7, #0]
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 f918 	bl	8014fde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	4619      	mov	r1, r3
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	f7fe ffa5 	bl	8013d06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2202      	movs	r2, #2
 8014dc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014dc4:	e014      	b.n	8014df0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014dc6:	6878      	ldr	r0, [r7, #4]
 8014dc8:	f000 f9e0 	bl	801518c <USBD_CtlSendStatus>
      break;
 8014dcc:	e010      	b.n	8014df0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f000 f9dc 	bl	801518c <USBD_CtlSendStatus>
      break;
 8014dd4:	e00c      	b.n	8014df0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014dd6:	6839      	ldr	r1, [r7, #0]
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f000 f900 	bl	8014fde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014dde:	4b07      	ldr	r3, [pc, #28]	@ (8014dfc <USBD_SetConfig+0x150>)
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	4619      	mov	r1, r3
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f7fe ff8e 	bl	8013d06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014dea:	2303      	movs	r3, #3
 8014dec:	73fb      	strb	r3, [r7, #15]
      break;
 8014dee:	bf00      	nop
  }

  return ret;
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	20005718 	.word	0x20005718

08014e00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	88db      	ldrh	r3, [r3, #6]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d004      	beq.n	8014e1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014e12:	6839      	ldr	r1, [r7, #0]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 f8e2 	bl	8014fde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014e1a:	e023      	b.n	8014e64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	2b02      	cmp	r3, #2
 8014e26:	dc02      	bgt.n	8014e2e <USBD_GetConfig+0x2e>
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	dc03      	bgt.n	8014e34 <USBD_GetConfig+0x34>
 8014e2c:	e015      	b.n	8014e5a <USBD_GetConfig+0x5a>
 8014e2e:	2b03      	cmp	r3, #3
 8014e30:	d00b      	beq.n	8014e4a <USBD_GetConfig+0x4a>
 8014e32:	e012      	b.n	8014e5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2200      	movs	r2, #0
 8014e38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	3308      	adds	r3, #8
 8014e3e:	2201      	movs	r2, #1
 8014e40:	4619      	mov	r1, r3
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 f948 	bl	80150d8 <USBD_CtlSendData>
        break;
 8014e48:	e00c      	b.n	8014e64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	3304      	adds	r3, #4
 8014e4e:	2201      	movs	r2, #1
 8014e50:	4619      	mov	r1, r3
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f000 f940 	bl	80150d8 <USBD_CtlSendData>
        break;
 8014e58:	e004      	b.n	8014e64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014e5a:	6839      	ldr	r1, [r7, #0]
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f000 f8be 	bl	8014fde <USBD_CtlError>
        break;
 8014e62:	bf00      	nop
}
 8014e64:	bf00      	nop
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d81e      	bhi.n	8014ec2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	88db      	ldrh	r3, [r3, #6]
 8014e88:	2b02      	cmp	r3, #2
 8014e8a:	d004      	beq.n	8014e96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014e8c:	6839      	ldr	r1, [r7, #0]
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f000 f8a5 	bl	8014fde <USBD_CtlError>
        break;
 8014e94:	e01a      	b.n	8014ecc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2201      	movs	r2, #1
 8014e9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d005      	beq.n	8014eb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	f043 0202 	orr.w	r2, r3, #2
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	330c      	adds	r3, #12
 8014eb6:	2202      	movs	r2, #2
 8014eb8:	4619      	mov	r1, r3
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 f90c 	bl	80150d8 <USBD_CtlSendData>
      break;
 8014ec0:	e004      	b.n	8014ecc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014ec2:	6839      	ldr	r1, [r7, #0]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f000 f88a 	bl	8014fde <USBD_CtlError>
      break;
 8014eca:	bf00      	nop
  }
}
 8014ecc:	bf00      	nop
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	885b      	ldrh	r3, [r3, #2]
 8014ee2:	2b01      	cmp	r3, #1
 8014ee4:	d107      	bne.n	8014ef6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2201      	movs	r2, #1
 8014eea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f000 f94c 	bl	801518c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014ef4:	e013      	b.n	8014f1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	885b      	ldrh	r3, [r3, #2]
 8014efa:	2b02      	cmp	r3, #2
 8014efc:	d10b      	bne.n	8014f16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	889b      	ldrh	r3, [r3, #4]
 8014f02:	0a1b      	lsrs	r3, r3, #8
 8014f04:	b29b      	uxth	r3, r3
 8014f06:	b2da      	uxtb	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 f93c 	bl	801518c <USBD_CtlSendStatus>
}
 8014f14:	e003      	b.n	8014f1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014f16:	6839      	ldr	r1, [r7, #0]
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f000 f860 	bl	8014fde <USBD_CtlError>
}
 8014f1e:	bf00      	nop
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b082      	sub	sp, #8
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
 8014f2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	2b02      	cmp	r3, #2
 8014f3c:	d80b      	bhi.n	8014f56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	885b      	ldrh	r3, [r3, #2]
 8014f42:	2b01      	cmp	r3, #1
 8014f44:	d10c      	bne.n	8014f60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f000 f91c 	bl	801518c <USBD_CtlSendStatus>
      }
      break;
 8014f54:	e004      	b.n	8014f60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014f56:	6839      	ldr	r1, [r7, #0]
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f000 f840 	bl	8014fde <USBD_CtlError>
      break;
 8014f5e:	e000      	b.n	8014f62 <USBD_ClrFeature+0x3c>
      break;
 8014f60:	bf00      	nop
  }
}
 8014f62:	bf00      	nop
 8014f64:	3708      	adds	r7, #8
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b084      	sub	sp, #16
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	781a      	ldrb	r2, [r3, #0]
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	3301      	adds	r3, #1
 8014f84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	781a      	ldrb	r2, [r3, #0]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	3301      	adds	r3, #1
 8014f92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f7ff fa40 	bl	801441a <SWAPBYTE>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	3301      	adds	r3, #1
 8014fac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	f7ff fa33 	bl	801441a <SWAPBYTE>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f7ff fa26 	bl	801441a <SWAPBYTE>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	80da      	strh	r2, [r3, #6]
}
 8014fd6:	bf00      	nop
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b082      	sub	sp, #8
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
 8014fe6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014fe8:	2180      	movs	r1, #128	@ 0x80
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f004 f800 	bl	8018ff0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f003 fffc 	bl	8018ff0 <USBD_LL_StallEP>
}
 8014ff8:	bf00      	nop
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b086      	sub	sp, #24
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801500c:	2300      	movs	r3, #0
 801500e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d042      	beq.n	801509c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801501a:	6938      	ldr	r0, [r7, #16]
 801501c:	f000 f842 	bl	80150a4 <USBD_GetLen>
 8015020:	4603      	mov	r3, r0
 8015022:	3301      	adds	r3, #1
 8015024:	005b      	lsls	r3, r3, #1
 8015026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801502a:	d808      	bhi.n	801503e <USBD_GetString+0x3e>
 801502c:	6938      	ldr	r0, [r7, #16]
 801502e:	f000 f839 	bl	80150a4 <USBD_GetLen>
 8015032:	4603      	mov	r3, r0
 8015034:	3301      	adds	r3, #1
 8015036:	b29b      	uxth	r3, r3
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	b29a      	uxth	r2, r3
 801503c:	e001      	b.n	8015042 <USBD_GetString+0x42>
 801503e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015046:	7dfb      	ldrb	r3, [r7, #23]
 8015048:	68ba      	ldr	r2, [r7, #8]
 801504a:	4413      	add	r3, r2
 801504c:	687a      	ldr	r2, [r7, #4]
 801504e:	7812      	ldrb	r2, [r2, #0]
 8015050:	701a      	strb	r2, [r3, #0]
  idx++;
 8015052:	7dfb      	ldrb	r3, [r7, #23]
 8015054:	3301      	adds	r3, #1
 8015056:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015058:	7dfb      	ldrb	r3, [r7, #23]
 801505a:	68ba      	ldr	r2, [r7, #8]
 801505c:	4413      	add	r3, r2
 801505e:	2203      	movs	r2, #3
 8015060:	701a      	strb	r2, [r3, #0]
  idx++;
 8015062:	7dfb      	ldrb	r3, [r7, #23]
 8015064:	3301      	adds	r3, #1
 8015066:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015068:	e013      	b.n	8015092 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801506a:	7dfb      	ldrb	r3, [r7, #23]
 801506c:	68ba      	ldr	r2, [r7, #8]
 801506e:	4413      	add	r3, r2
 8015070:	693a      	ldr	r2, [r7, #16]
 8015072:	7812      	ldrb	r2, [r2, #0]
 8015074:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	3301      	adds	r3, #1
 801507a:	613b      	str	r3, [r7, #16]
    idx++;
 801507c:	7dfb      	ldrb	r3, [r7, #23]
 801507e:	3301      	adds	r3, #1
 8015080:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015082:	7dfb      	ldrb	r3, [r7, #23]
 8015084:	68ba      	ldr	r2, [r7, #8]
 8015086:	4413      	add	r3, r2
 8015088:	2200      	movs	r2, #0
 801508a:	701a      	strb	r2, [r3, #0]
    idx++;
 801508c:	7dfb      	ldrb	r3, [r7, #23]
 801508e:	3301      	adds	r3, #1
 8015090:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d1e7      	bne.n	801506a <USBD_GetString+0x6a>
 801509a:	e000      	b.n	801509e <USBD_GetString+0x9e>
    return;
 801509c:	bf00      	nop
  }
}
 801509e:	3718      	adds	r7, #24
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80150ac:	2300      	movs	r3, #0
 80150ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80150b4:	e005      	b.n	80150c2 <USBD_GetLen+0x1e>
  {
    len++;
 80150b6:	7bfb      	ldrb	r3, [r7, #15]
 80150b8:	3301      	adds	r3, #1
 80150ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	3301      	adds	r3, #1
 80150c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1f5      	bne.n	80150b6 <USBD_GetLen+0x12>
  }

  return len;
 80150ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3714      	adds	r7, #20
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2202      	movs	r2, #2
 80150e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	687a      	ldr	r2, [r7, #4]
 80150f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	687a      	ldr	r2, [r7, #4]
 80150f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	68ba      	ldr	r2, [r7, #8]
 80150fc:	2100      	movs	r1, #0
 80150fe:	68f8      	ldr	r0, [r7, #12]
 8015100:	f003 ffff 	bl	8019102 <USBD_LL_Transmit>

  return USBD_OK;
 8015104:	2300      	movs	r3, #0
}
 8015106:	4618      	mov	r0, r3
 8015108:	3710      	adds	r7, #16
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}

0801510e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801510e:	b580      	push	{r7, lr}
 8015110:	b084      	sub	sp, #16
 8015112:	af00      	add	r7, sp, #0
 8015114:	60f8      	str	r0, [r7, #12]
 8015116:	60b9      	str	r1, [r7, #8]
 8015118:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	68ba      	ldr	r2, [r7, #8]
 801511e:	2100      	movs	r1, #0
 8015120:	68f8      	ldr	r0, [r7, #12]
 8015122:	f003 ffee 	bl	8019102 <USBD_LL_Transmit>

  return USBD_OK;
 8015126:	2300      	movs	r3, #0
}
 8015128:	4618      	mov	r0, r3
 801512a:	3710      	adds	r7, #16
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	60f8      	str	r0, [r7, #12]
 8015138:	60b9      	str	r1, [r7, #8]
 801513a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2203      	movs	r2, #3
 8015140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	687a      	ldr	r2, [r7, #4]
 8015150:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	68ba      	ldr	r2, [r7, #8]
 8015158:	2100      	movs	r1, #0
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f003 fff2 	bl	8019144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3710      	adds	r7, #16
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	b084      	sub	sp, #16
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	60b9      	str	r1, [r7, #8]
 8015174:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	68ba      	ldr	r2, [r7, #8]
 801517a:	2100      	movs	r1, #0
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f003 ffe1 	bl	8019144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015182:	2300      	movs	r3, #0
}
 8015184:	4618      	mov	r0, r3
 8015186:	3710      	adds	r7, #16
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2204      	movs	r2, #4
 8015198:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801519c:	2300      	movs	r3, #0
 801519e:	2200      	movs	r2, #0
 80151a0:	2100      	movs	r1, #0
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f003 ffad 	bl	8019102 <USBD_LL_Transmit>

  return USBD_OK;
 80151a8:	2300      	movs	r3, #0
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3708      	adds	r7, #8
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}

080151b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80151b2:	b580      	push	{r7, lr}
 80151b4:	b082      	sub	sp, #8
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2205      	movs	r2, #5
 80151be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151c2:	2300      	movs	r3, #0
 80151c4:	2200      	movs	r2, #0
 80151c6:	2100      	movs	r1, #0
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f003 ffbb 	bl	8019144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80151ce:	2300      	movs	r3, #0
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <__NVIC_SetPriority>:
{
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
 80151de:	4603      	mov	r3, r0
 80151e0:	6039      	str	r1, [r7, #0]
 80151e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80151e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	db0a      	blt.n	8015202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	b2da      	uxtb	r2, r3
 80151f0:	490c      	ldr	r1, [pc, #48]	@ (8015224 <__NVIC_SetPriority+0x4c>)
 80151f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151f6:	0112      	lsls	r2, r2, #4
 80151f8:	b2d2      	uxtb	r2, r2
 80151fa:	440b      	add	r3, r1
 80151fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015200:	e00a      	b.n	8015218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	b2da      	uxtb	r2, r3
 8015206:	4908      	ldr	r1, [pc, #32]	@ (8015228 <__NVIC_SetPriority+0x50>)
 8015208:	79fb      	ldrb	r3, [r7, #7]
 801520a:	f003 030f 	and.w	r3, r3, #15
 801520e:	3b04      	subs	r3, #4
 8015210:	0112      	lsls	r2, r2, #4
 8015212:	b2d2      	uxtb	r2, r2
 8015214:	440b      	add	r3, r1
 8015216:	761a      	strb	r2, [r3, #24]
}
 8015218:	bf00      	nop
 801521a:	370c      	adds	r7, #12
 801521c:	46bd      	mov	sp, r7
 801521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015222:	4770      	bx	lr
 8015224:	e000e100 	.word	0xe000e100
 8015228:	e000ed00 	.word	0xe000ed00

0801522c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801522c:	b580      	push	{r7, lr}
 801522e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015230:	4b05      	ldr	r3, [pc, #20]	@ (8015248 <SysTick_Handler+0x1c>)
 8015232:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015234:	f001 feec 	bl	8017010 <xTaskGetSchedulerState>
 8015238:	4603      	mov	r3, r0
 801523a:	2b01      	cmp	r3, #1
 801523c:	d001      	beq.n	8015242 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801523e:	f002 ff23 	bl	8018088 <xPortSysTickHandler>
  }
}
 8015242:	bf00      	nop
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	e000e010 	.word	0xe000e010

0801524c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801524c:	b580      	push	{r7, lr}
 801524e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015250:	2100      	movs	r1, #0
 8015252:	f06f 0004 	mvn.w	r0, #4
 8015256:	f7ff ffbf 	bl	80151d8 <__NVIC_SetPriority>
#endif
}
 801525a:	bf00      	nop
 801525c:	bd80      	pop	{r7, pc}
	...

08015260 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015260:	b480      	push	{r7}
 8015262:	b083      	sub	sp, #12
 8015264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015266:	f3ef 8305 	mrs	r3, IPSR
 801526a:	603b      	str	r3, [r7, #0]
  return(result);
 801526c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801526e:	2b00      	cmp	r3, #0
 8015270:	d003      	beq.n	801527a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015272:	f06f 0305 	mvn.w	r3, #5
 8015276:	607b      	str	r3, [r7, #4]
 8015278:	e00c      	b.n	8015294 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801527a:	4b0a      	ldr	r3, [pc, #40]	@ (80152a4 <osKernelInitialize+0x44>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d105      	bne.n	801528e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015282:	4b08      	ldr	r3, [pc, #32]	@ (80152a4 <osKernelInitialize+0x44>)
 8015284:	2201      	movs	r2, #1
 8015286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015288:	2300      	movs	r3, #0
 801528a:	607b      	str	r3, [r7, #4]
 801528c:	e002      	b.n	8015294 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801528e:	f04f 33ff 	mov.w	r3, #4294967295
 8015292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015294:	687b      	ldr	r3, [r7, #4]
}
 8015296:	4618      	mov	r0, r3
 8015298:	370c      	adds	r7, #12
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop
 80152a4:	2000571c 	.word	0x2000571c

080152a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80152ae:	f3ef 8305 	mrs	r3, IPSR
 80152b2:	603b      	str	r3, [r7, #0]
  return(result);
 80152b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d003      	beq.n	80152c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80152ba:	f06f 0305 	mvn.w	r3, #5
 80152be:	607b      	str	r3, [r7, #4]
 80152c0:	e010      	b.n	80152e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80152c2:	4b0b      	ldr	r3, [pc, #44]	@ (80152f0 <osKernelStart+0x48>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b01      	cmp	r3, #1
 80152c8:	d109      	bne.n	80152de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80152ca:	f7ff ffbf 	bl	801524c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80152ce:	4b08      	ldr	r3, [pc, #32]	@ (80152f0 <osKernelStart+0x48>)
 80152d0:	2202      	movs	r2, #2
 80152d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80152d4:	f001 fa28 	bl	8016728 <vTaskStartScheduler>
      stat = osOK;
 80152d8:	2300      	movs	r3, #0
 80152da:	607b      	str	r3, [r7, #4]
 80152dc:	e002      	b.n	80152e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80152de:	f04f 33ff 	mov.w	r3, #4294967295
 80152e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80152e4:	687b      	ldr	r3, [r7, #4]
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3708      	adds	r7, #8
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}
 80152ee:	bf00      	nop
 80152f0:	2000571c 	.word	0x2000571c

080152f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b08e      	sub	sp, #56	@ 0x38
 80152f8:	af04      	add	r7, sp, #16
 80152fa:	60f8      	str	r0, [r7, #12]
 80152fc:	60b9      	str	r1, [r7, #8]
 80152fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015300:	2300      	movs	r3, #0
 8015302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015304:	f3ef 8305 	mrs	r3, IPSR
 8015308:	617b      	str	r3, [r7, #20]
  return(result);
 801530a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801530c:	2b00      	cmp	r3, #0
 801530e:	d17e      	bne.n	801540e <osThreadNew+0x11a>
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d07b      	beq.n	801540e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015316:	2380      	movs	r3, #128	@ 0x80
 8015318:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801531a:	2318      	movs	r3, #24
 801531c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801531e:	2300      	movs	r3, #0
 8015320:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8015322:	f04f 33ff 	mov.w	r3, #4294967295
 8015326:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d045      	beq.n	80153ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d002      	beq.n	801533c <osThreadNew+0x48>
        name = attr->name;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	699b      	ldr	r3, [r3, #24]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d002      	beq.n	801534a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	699b      	ldr	r3, [r3, #24]
 8015348:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d008      	beq.n	8015362 <osThreadNew+0x6e>
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	2b38      	cmp	r3, #56	@ 0x38
 8015354:	d805      	bhi.n	8015362 <osThreadNew+0x6e>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	685b      	ldr	r3, [r3, #4]
 801535a:	f003 0301 	and.w	r3, r3, #1
 801535e:	2b00      	cmp	r3, #0
 8015360:	d001      	beq.n	8015366 <osThreadNew+0x72>
        return (NULL);
 8015362:	2300      	movs	r3, #0
 8015364:	e054      	b.n	8015410 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	695b      	ldr	r3, [r3, #20]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d003      	beq.n	8015376 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	695b      	ldr	r3, [r3, #20]
 8015372:	089b      	lsrs	r3, r3, #2
 8015374:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	689b      	ldr	r3, [r3, #8]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d00e      	beq.n	801539c <osThreadNew+0xa8>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	68db      	ldr	r3, [r3, #12]
 8015382:	2ba7      	cmp	r3, #167	@ 0xa7
 8015384:	d90a      	bls.n	801539c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801538a:	2b00      	cmp	r3, #0
 801538c:	d006      	beq.n	801539c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	695b      	ldr	r3, [r3, #20]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d002      	beq.n	801539c <osThreadNew+0xa8>
        mem = 1;
 8015396:	2301      	movs	r3, #1
 8015398:	61bb      	str	r3, [r7, #24]
 801539a:	e010      	b.n	80153be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	689b      	ldr	r3, [r3, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d10c      	bne.n	80153be <osThreadNew+0xca>
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	68db      	ldr	r3, [r3, #12]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d108      	bne.n	80153be <osThreadNew+0xca>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	691b      	ldr	r3, [r3, #16]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d104      	bne.n	80153be <osThreadNew+0xca>
          mem = 0;
 80153b4:	2300      	movs	r3, #0
 80153b6:	61bb      	str	r3, [r7, #24]
 80153b8:	e001      	b.n	80153be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80153ba:	2300      	movs	r3, #0
 80153bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80153be:	69bb      	ldr	r3, [r7, #24]
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	d110      	bne.n	80153e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80153cc:	9202      	str	r2, [sp, #8]
 80153ce:	9301      	str	r3, [sp, #4]
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	9300      	str	r3, [sp, #0]
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	6a3a      	ldr	r2, [r7, #32]
 80153d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	f000 ffb0 	bl	8016340 <xTaskCreateStatic>
 80153e0:	4603      	mov	r3, r0
 80153e2:	613b      	str	r3, [r7, #16]
 80153e4:	e013      	b.n	801540e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d110      	bne.n	801540e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80153ec:	6a3b      	ldr	r3, [r7, #32]
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	f107 0310 	add.w	r3, r7, #16
 80153f4:	9301      	str	r3, [sp, #4]
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f000 fffe 	bl	8016400 <xTaskCreate>
 8015404:	4603      	mov	r3, r0
 8015406:	2b01      	cmp	r3, #1
 8015408:	d001      	beq.n	801540e <osThreadNew+0x11a>
            hTask = NULL;
 801540a:	2300      	movs	r3, #0
 801540c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801540e:	693b      	ldr	r3, [r7, #16]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3728      	adds	r7, #40	@ 0x28
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015420:	f3ef 8305 	mrs	r3, IPSR
 8015424:	60bb      	str	r3, [r7, #8]
  return(result);
 8015426:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015428:	2b00      	cmp	r3, #0
 801542a:	d003      	beq.n	8015434 <osDelay+0x1c>
    stat = osErrorISR;
 801542c:	f06f 0305 	mvn.w	r3, #5
 8015430:	60fb      	str	r3, [r7, #12]
 8015432:	e007      	b.n	8015444 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015434:	2300      	movs	r3, #0
 8015436:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d002      	beq.n	8015444 <osDelay+0x2c>
      vTaskDelay(ticks);
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f001 f93c 	bl	80166bc <vTaskDelay>
    }
  }

  return (stat);
 8015444:	68fb      	ldr	r3, [r7, #12]
}
 8015446:	4618      	mov	r0, r3
 8015448:	3710      	adds	r7, #16
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
	...

08015450 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015450:	b480      	push	{r7}
 8015452:	b085      	sub	sp, #20
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	4a07      	ldr	r2, [pc, #28]	@ (801547c <vApplicationGetIdleTaskMemory+0x2c>)
 8015460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	4a06      	ldr	r2, [pc, #24]	@ (8015480 <vApplicationGetIdleTaskMemory+0x30>)
 8015466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2280      	movs	r2, #128	@ 0x80
 801546c:	601a      	str	r2, [r3, #0]
}
 801546e:	bf00      	nop
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	20005720 	.word	0x20005720
 8015480:	200057c8 	.word	0x200057c8

08015484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015484:	b480      	push	{r7}
 8015486:	b085      	sub	sp, #20
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	4a07      	ldr	r2, [pc, #28]	@ (80154b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8015494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	4a06      	ldr	r2, [pc, #24]	@ (80154b4 <vApplicationGetTimerTaskMemory+0x30>)
 801549a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80154a2:	601a      	str	r2, [r3, #0]
}
 80154a4:	bf00      	nop
 80154a6:	3714      	adds	r7, #20
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr
 80154b0:	200059c8 	.word	0x200059c8
 80154b4:	20005a70 	.word	0x20005a70

080154b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80154b8:	b480      	push	{r7}
 80154ba:	b083      	sub	sp, #12
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f103 0208 	add.w	r2, r3, #8
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f04f 32ff 	mov.w	r2, #4294967295
 80154d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f103 0208 	add.w	r2, r3, #8
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f103 0208 	add.w	r2, r3, #8
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2200      	movs	r2, #0
 80154ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80154ec:	bf00      	nop
 80154ee:	370c      	adds	r7, #12
 80154f0:	46bd      	mov	sp, r7
 80154f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f6:	4770      	bx	lr

080154f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2200      	movs	r2, #0
 8015504:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015506:	bf00      	nop
 8015508:	370c      	adds	r7, #12
 801550a:	46bd      	mov	sp, r7
 801550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015510:	4770      	bx	lr

08015512 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015512:	b480      	push	{r7}
 8015514:	b085      	sub	sp, #20
 8015516:	af00      	add	r7, sp, #0
 8015518:	6078      	str	r0, [r7, #4]
 801551a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	689a      	ldr	r2, [r3, #8]
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	689b      	ldr	r3, [r3, #8]
 8015534:	683a      	ldr	r2, [r7, #0]
 8015536:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	687a      	ldr	r2, [r7, #4]
 8015542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	1c5a      	adds	r2, r3, #1
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	601a      	str	r2, [r3, #0]
}
 801554e:	bf00      	nop
 8015550:	3714      	adds	r7, #20
 8015552:	46bd      	mov	sp, r7
 8015554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015558:	4770      	bx	lr

0801555a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801555a:	b480      	push	{r7}
 801555c:	b085      	sub	sp, #20
 801555e:	af00      	add	r7, sp, #0
 8015560:	6078      	str	r0, [r7, #4]
 8015562:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015570:	d103      	bne.n	801557a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	691b      	ldr	r3, [r3, #16]
 8015576:	60fb      	str	r3, [r7, #12]
 8015578:	e00c      	b.n	8015594 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	3308      	adds	r3, #8
 801557e:	60fb      	str	r3, [r7, #12]
 8015580:	e002      	b.n	8015588 <vListInsert+0x2e>
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	60fb      	str	r3, [r7, #12]
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	685b      	ldr	r3, [r3, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	68ba      	ldr	r2, [r7, #8]
 8015590:	429a      	cmp	r2, r3
 8015592:	d2f6      	bcs.n	8015582 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	685a      	ldr	r2, [r3, #4]
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	683a      	ldr	r2, [r7, #0]
 80155a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	68fa      	ldr	r2, [r7, #12]
 80155a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	683a      	ldr	r2, [r7, #0]
 80155ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	1c5a      	adds	r2, r3, #1
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	601a      	str	r2, [r3, #0]
}
 80155c0:	bf00      	nop
 80155c2:	3714      	adds	r7, #20
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr

080155cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80155cc:	b480      	push	{r7}
 80155ce:	b085      	sub	sp, #20
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	691b      	ldr	r3, [r3, #16]
 80155d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	6892      	ldr	r2, [r2, #8]
 80155e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	689b      	ldr	r3, [r3, #8]
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	6852      	ldr	r2, [r2, #4]
 80155ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d103      	bne.n	8015600 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	689a      	ldr	r2, [r3, #8]
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2200      	movs	r2, #0
 8015604:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	1e5a      	subs	r2, r3, #1
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	681b      	ldr	r3, [r3, #0]
}
 8015614:	4618      	mov	r0, r3
 8015616:	3714      	adds	r7, #20
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr

08015620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b084      	sub	sp, #16
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d10b      	bne.n	801564c <xQueueGenericReset+0x2c>
	__asm volatile
 8015634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015638:	f383 8811 	msr	BASEPRI, r3
 801563c:	f3bf 8f6f 	isb	sy
 8015640:	f3bf 8f4f 	dsb	sy
 8015644:	60bb      	str	r3, [r7, #8]
}
 8015646:	bf00      	nop
 8015648:	bf00      	nop
 801564a:	e7fd      	b.n	8015648 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801564c:	f002 fc8c 	bl	8017f68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015658:	68f9      	ldr	r1, [r7, #12]
 801565a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801565c:	fb01 f303 	mul.w	r3, r1, r3
 8015660:	441a      	add	r2, r3
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2200      	movs	r2, #0
 801566a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801567c:	3b01      	subs	r3, #1
 801567e:	68f9      	ldr	r1, [r7, #12]
 8015680:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015682:	fb01 f303 	mul.w	r3, r1, r3
 8015686:	441a      	add	r2, r3
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	22ff      	movs	r2, #255	@ 0xff
 8015690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	22ff      	movs	r2, #255	@ 0xff
 8015698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d114      	bne.n	80156cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d01a      	beq.n	80156e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	3310      	adds	r3, #16
 80156ae:	4618      	mov	r0, r3
 80156b0:	f001 fad8 	bl	8016c64 <xTaskRemoveFromEventList>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d012      	beq.n	80156e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80156ba:	4b0d      	ldr	r3, [pc, #52]	@ (80156f0 <xQueueGenericReset+0xd0>)
 80156bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	f3bf 8f4f 	dsb	sy
 80156c6:	f3bf 8f6f 	isb	sy
 80156ca:	e009      	b.n	80156e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	3310      	adds	r3, #16
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7ff fef1 	bl	80154b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	3324      	adds	r3, #36	@ 0x24
 80156da:	4618      	mov	r0, r3
 80156dc:	f7ff feec 	bl	80154b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80156e0:	f002 fc74 	bl	8017fcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80156e4:	2301      	movs	r3, #1
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3710      	adds	r7, #16
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	e000ed04 	.word	0xe000ed04

080156f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b08e      	sub	sp, #56	@ 0x38
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	60b9      	str	r1, [r7, #8]
 80156fe:	607a      	str	r2, [r7, #4]
 8015700:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d10b      	bne.n	8015720 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8015708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801570c:	f383 8811 	msr	BASEPRI, r3
 8015710:	f3bf 8f6f 	isb	sy
 8015714:	f3bf 8f4f 	dsb	sy
 8015718:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801571a:	bf00      	nop
 801571c:	bf00      	nop
 801571e:	e7fd      	b.n	801571c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d10b      	bne.n	801573e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8015726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801572a:	f383 8811 	msr	BASEPRI, r3
 801572e:	f3bf 8f6f 	isb	sy
 8015732:	f3bf 8f4f 	dsb	sy
 8015736:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015738:	bf00      	nop
 801573a:	bf00      	nop
 801573c:	e7fd      	b.n	801573a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d002      	beq.n	801574a <xQueueGenericCreateStatic+0x56>
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d001      	beq.n	801574e <xQueueGenericCreateStatic+0x5a>
 801574a:	2301      	movs	r3, #1
 801574c:	e000      	b.n	8015750 <xQueueGenericCreateStatic+0x5c>
 801574e:	2300      	movs	r3, #0
 8015750:	2b00      	cmp	r3, #0
 8015752:	d10b      	bne.n	801576c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8015754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015758:	f383 8811 	msr	BASEPRI, r3
 801575c:	f3bf 8f6f 	isb	sy
 8015760:	f3bf 8f4f 	dsb	sy
 8015764:	623b      	str	r3, [r7, #32]
}
 8015766:	bf00      	nop
 8015768:	bf00      	nop
 801576a:	e7fd      	b.n	8015768 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d102      	bne.n	8015778 <xQueueGenericCreateStatic+0x84>
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d101      	bne.n	801577c <xQueueGenericCreateStatic+0x88>
 8015778:	2301      	movs	r3, #1
 801577a:	e000      	b.n	801577e <xQueueGenericCreateStatic+0x8a>
 801577c:	2300      	movs	r3, #0
 801577e:	2b00      	cmp	r3, #0
 8015780:	d10b      	bne.n	801579a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8015782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015786:	f383 8811 	msr	BASEPRI, r3
 801578a:	f3bf 8f6f 	isb	sy
 801578e:	f3bf 8f4f 	dsb	sy
 8015792:	61fb      	str	r3, [r7, #28]
}
 8015794:	bf00      	nop
 8015796:	bf00      	nop
 8015798:	e7fd      	b.n	8015796 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801579a:	2350      	movs	r3, #80	@ 0x50
 801579c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	2b50      	cmp	r3, #80	@ 0x50
 80157a2:	d00b      	beq.n	80157bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80157a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157a8:	f383 8811 	msr	BASEPRI, r3
 80157ac:	f3bf 8f6f 	isb	sy
 80157b0:	f3bf 8f4f 	dsb	sy
 80157b4:	61bb      	str	r3, [r7, #24]
}
 80157b6:	bf00      	nop
 80157b8:	bf00      	nop
 80157ba:	e7fd      	b.n	80157b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80157bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80157c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00d      	beq.n	80157e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80157c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ca:	2201      	movs	r2, #1
 80157cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80157d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80157d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d6:	9300      	str	r3, [sp, #0]
 80157d8:	4613      	mov	r3, r2
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	68b9      	ldr	r1, [r7, #8]
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f000 f840 	bl	8015864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80157e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3730      	adds	r7, #48	@ 0x30
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}

080157ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80157ee:	b580      	push	{r7, lr}
 80157f0:	b08a      	sub	sp, #40	@ 0x28
 80157f2:	af02      	add	r7, sp, #8
 80157f4:	60f8      	str	r0, [r7, #12]
 80157f6:	60b9      	str	r1, [r7, #8]
 80157f8:	4613      	mov	r3, r2
 80157fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d10b      	bne.n	801581a <xQueueGenericCreate+0x2c>
	__asm volatile
 8015802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015806:	f383 8811 	msr	BASEPRI, r3
 801580a:	f3bf 8f6f 	isb	sy
 801580e:	f3bf 8f4f 	dsb	sy
 8015812:	613b      	str	r3, [r7, #16]
}
 8015814:	bf00      	nop
 8015816:	bf00      	nop
 8015818:	e7fd      	b.n	8015816 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	68ba      	ldr	r2, [r7, #8]
 801581e:	fb02 f303 	mul.w	r3, r2, r3
 8015822:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	3350      	adds	r3, #80	@ 0x50
 8015828:	4618      	mov	r0, r3
 801582a:	f002 fcbf 	bl	80181ac <pvPortMalloc>
 801582e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015830:	69bb      	ldr	r3, [r7, #24]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d011      	beq.n	801585a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	3350      	adds	r3, #80	@ 0x50
 801583e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	2200      	movs	r2, #0
 8015844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015848:	79fa      	ldrb	r2, [r7, #7]
 801584a:	69bb      	ldr	r3, [r7, #24]
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	4613      	mov	r3, r2
 8015850:	697a      	ldr	r2, [r7, #20]
 8015852:	68b9      	ldr	r1, [r7, #8]
 8015854:	68f8      	ldr	r0, [r7, #12]
 8015856:	f000 f805 	bl	8015864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801585a:	69bb      	ldr	r3, [r7, #24]
	}
 801585c:	4618      	mov	r0, r3
 801585e:	3720      	adds	r7, #32
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b084      	sub	sp, #16
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	607a      	str	r2, [r7, #4]
 8015870:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d103      	bne.n	8015880 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015878:	69bb      	ldr	r3, [r7, #24]
 801587a:	69ba      	ldr	r2, [r7, #24]
 801587c:	601a      	str	r2, [r3, #0]
 801587e:	e002      	b.n	8015886 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015880:	69bb      	ldr	r3, [r7, #24]
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015886:	69bb      	ldr	r3, [r7, #24]
 8015888:	68fa      	ldr	r2, [r7, #12]
 801588a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	68ba      	ldr	r2, [r7, #8]
 8015890:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015892:	2101      	movs	r1, #1
 8015894:	69b8      	ldr	r0, [r7, #24]
 8015896:	f7ff fec3 	bl	8015620 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	78fa      	ldrb	r2, [r7, #3]
 801589e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80158a2:	bf00      	nop
 80158a4:	3710      	adds	r7, #16
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}

080158aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80158aa:	b580      	push	{r7, lr}
 80158ac:	b082      	sub	sp, #8
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d00e      	beq.n	80158d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2200      	movs	r2, #0
 80158bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2200      	movs	r2, #0
 80158c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2200      	movs	r2, #0
 80158c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80158ca:	2300      	movs	r3, #0
 80158cc:	2200      	movs	r2, #0
 80158ce:	2100      	movs	r1, #0
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f000 f81d 	bl	8015910 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80158d6:	bf00      	nop
 80158d8:	3708      	adds	r7, #8
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}

080158de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b086      	sub	sp, #24
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	4603      	mov	r3, r0
 80158e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80158e8:	2301      	movs	r3, #1
 80158ea:	617b      	str	r3, [r7, #20]
 80158ec:	2300      	movs	r3, #0
 80158ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80158f0:	79fb      	ldrb	r3, [r7, #7]
 80158f2:	461a      	mov	r2, r3
 80158f4:	6939      	ldr	r1, [r7, #16]
 80158f6:	6978      	ldr	r0, [r7, #20]
 80158f8:	f7ff ff79 	bl	80157ee <xQueueGenericCreate>
 80158fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80158fe:	68f8      	ldr	r0, [r7, #12]
 8015900:	f7ff ffd3 	bl	80158aa <prvInitialiseMutex>

		return xNewQueue;
 8015904:	68fb      	ldr	r3, [r7, #12]
	}
 8015906:	4618      	mov	r0, r3
 8015908:	3718      	adds	r7, #24
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
	...

08015910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b08e      	sub	sp, #56	@ 0x38
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	60b9      	str	r1, [r7, #8]
 801591a:	607a      	str	r2, [r7, #4]
 801591c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801591e:	2300      	movs	r3, #0
 8015920:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10b      	bne.n	8015944 <xQueueGenericSend+0x34>
	__asm volatile
 801592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015930:	f383 8811 	msr	BASEPRI, r3
 8015934:	f3bf 8f6f 	isb	sy
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801593e:	bf00      	nop
 8015940:	bf00      	nop
 8015942:	e7fd      	b.n	8015940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d103      	bne.n	8015952 <xQueueGenericSend+0x42>
 801594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801594e:	2b00      	cmp	r3, #0
 8015950:	d101      	bne.n	8015956 <xQueueGenericSend+0x46>
 8015952:	2301      	movs	r3, #1
 8015954:	e000      	b.n	8015958 <xQueueGenericSend+0x48>
 8015956:	2300      	movs	r3, #0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10b      	bne.n	8015974 <xQueueGenericSend+0x64>
	__asm volatile
 801595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015960:	f383 8811 	msr	BASEPRI, r3
 8015964:	f3bf 8f6f 	isb	sy
 8015968:	f3bf 8f4f 	dsb	sy
 801596c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801596e:	bf00      	nop
 8015970:	bf00      	nop
 8015972:	e7fd      	b.n	8015970 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	2b02      	cmp	r3, #2
 8015978:	d103      	bne.n	8015982 <xQueueGenericSend+0x72>
 801597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801597e:	2b01      	cmp	r3, #1
 8015980:	d101      	bne.n	8015986 <xQueueGenericSend+0x76>
 8015982:	2301      	movs	r3, #1
 8015984:	e000      	b.n	8015988 <xQueueGenericSend+0x78>
 8015986:	2300      	movs	r3, #0
 8015988:	2b00      	cmp	r3, #0
 801598a:	d10b      	bne.n	80159a4 <xQueueGenericSend+0x94>
	__asm volatile
 801598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015990:	f383 8811 	msr	BASEPRI, r3
 8015994:	f3bf 8f6f 	isb	sy
 8015998:	f3bf 8f4f 	dsb	sy
 801599c:	623b      	str	r3, [r7, #32]
}
 801599e:	bf00      	nop
 80159a0:	bf00      	nop
 80159a2:	e7fd      	b.n	80159a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80159a4:	f001 fb34 	bl	8017010 <xTaskGetSchedulerState>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d102      	bne.n	80159b4 <xQueueGenericSend+0xa4>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d101      	bne.n	80159b8 <xQueueGenericSend+0xa8>
 80159b4:	2301      	movs	r3, #1
 80159b6:	e000      	b.n	80159ba <xQueueGenericSend+0xaa>
 80159b8:	2300      	movs	r3, #0
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d10b      	bne.n	80159d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80159be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159c2:	f383 8811 	msr	BASEPRI, r3
 80159c6:	f3bf 8f6f 	isb	sy
 80159ca:	f3bf 8f4f 	dsb	sy
 80159ce:	61fb      	str	r3, [r7, #28]
}
 80159d0:	bf00      	nop
 80159d2:	bf00      	nop
 80159d4:	e7fd      	b.n	80159d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80159d6:	f002 fac7 	bl	8017f68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80159da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80159de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d302      	bcc.n	80159ec <xQueueGenericSend+0xdc>
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	2b02      	cmp	r3, #2
 80159ea:	d129      	bne.n	8015a40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80159ec:	683a      	ldr	r2, [r7, #0]
 80159ee:	68b9      	ldr	r1, [r7, #8]
 80159f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80159f2:	f000 fb37 	bl	8016064 <prvCopyDataToQueue>
 80159f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d010      	beq.n	8015a22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a02:	3324      	adds	r3, #36	@ 0x24
 8015a04:	4618      	mov	r0, r3
 8015a06:	f001 f92d 	bl	8016c64 <xTaskRemoveFromEventList>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d013      	beq.n	8015a38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015a10:	4b3f      	ldr	r3, [pc, #252]	@ (8015b10 <xQueueGenericSend+0x200>)
 8015a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a16:	601a      	str	r2, [r3, #0]
 8015a18:	f3bf 8f4f 	dsb	sy
 8015a1c:	f3bf 8f6f 	isb	sy
 8015a20:	e00a      	b.n	8015a38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d007      	beq.n	8015a38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015a28:	4b39      	ldr	r3, [pc, #228]	@ (8015b10 <xQueueGenericSend+0x200>)
 8015a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a2e:	601a      	str	r2, [r3, #0]
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015a38:	f002 fac8 	bl	8017fcc <vPortExitCritical>
				return pdPASS;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	e063      	b.n	8015b08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d103      	bne.n	8015a4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015a46:	f002 fac1 	bl	8017fcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	e05c      	b.n	8015b08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d106      	bne.n	8015a62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015a54:	f107 0314 	add.w	r3, r7, #20
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f001 f967 	bl	8016d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015a62:	f002 fab3 	bl	8017fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015a66:	f000 fecf 	bl	8016808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015a6a:	f002 fa7d 	bl	8017f68 <vPortEnterCritical>
 8015a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015a74:	b25b      	sxtb	r3, r3
 8015a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a7a:	d103      	bne.n	8015a84 <xQueueGenericSend+0x174>
 8015a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a7e:	2200      	movs	r2, #0
 8015a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015a8a:	b25b      	sxtb	r3, r3
 8015a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a90:	d103      	bne.n	8015a9a <xQueueGenericSend+0x18a>
 8015a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a94:	2200      	movs	r2, #0
 8015a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015a9a:	f002 fa97 	bl	8017fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a9e:	1d3a      	adds	r2, r7, #4
 8015aa0:	f107 0314 	add.w	r3, r7, #20
 8015aa4:	4611      	mov	r1, r2
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f001 f956 	bl	8016d58 <xTaskCheckForTimeOut>
 8015aac:	4603      	mov	r3, r0
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d124      	bne.n	8015afc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015ab2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015ab4:	f000 fbce 	bl	8016254 <prvIsQueueFull>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d018      	beq.n	8015af0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac0:	3310      	adds	r3, #16
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f001 f87a 	bl	8016bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015ace:	f000 fb59 	bl	8016184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015ad2:	f000 fea7 	bl	8016824 <xTaskResumeAll>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f47f af7c 	bne.w	80159d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8015ade:	4b0c      	ldr	r3, [pc, #48]	@ (8015b10 <xQueueGenericSend+0x200>)
 8015ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ae4:	601a      	str	r2, [r3, #0]
 8015ae6:	f3bf 8f4f 	dsb	sy
 8015aea:	f3bf 8f6f 	isb	sy
 8015aee:	e772      	b.n	80159d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015af2:	f000 fb47 	bl	8016184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015af6:	f000 fe95 	bl	8016824 <xTaskResumeAll>
 8015afa:	e76c      	b.n	80159d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015afe:	f000 fb41 	bl	8016184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015b02:	f000 fe8f 	bl	8016824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015b06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3738      	adds	r7, #56	@ 0x38
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	e000ed04 	.word	0xe000ed04

08015b14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b090      	sub	sp, #64	@ 0x40
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	60b9      	str	r1, [r7, #8]
 8015b1e:	607a      	str	r2, [r7, #4]
 8015b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8015b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d10b      	bne.n	8015b44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8015b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b30:	f383 8811 	msr	BASEPRI, r3
 8015b34:	f3bf 8f6f 	isb	sy
 8015b38:	f3bf 8f4f 	dsb	sy
 8015b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015b3e:	bf00      	nop
 8015b40:	bf00      	nop
 8015b42:	e7fd      	b.n	8015b40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d103      	bne.n	8015b52 <xQueueGenericSendFromISR+0x3e>
 8015b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d101      	bne.n	8015b56 <xQueueGenericSendFromISR+0x42>
 8015b52:	2301      	movs	r3, #1
 8015b54:	e000      	b.n	8015b58 <xQueueGenericSendFromISR+0x44>
 8015b56:	2300      	movs	r3, #0
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d10b      	bne.n	8015b74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8015b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b60:	f383 8811 	msr	BASEPRI, r3
 8015b64:	f3bf 8f6f 	isb	sy
 8015b68:	f3bf 8f4f 	dsb	sy
 8015b6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015b6e:	bf00      	nop
 8015b70:	bf00      	nop
 8015b72:	e7fd      	b.n	8015b70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	2b02      	cmp	r3, #2
 8015b78:	d103      	bne.n	8015b82 <xQueueGenericSendFromISR+0x6e>
 8015b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d101      	bne.n	8015b86 <xQueueGenericSendFromISR+0x72>
 8015b82:	2301      	movs	r3, #1
 8015b84:	e000      	b.n	8015b88 <xQueueGenericSendFromISR+0x74>
 8015b86:	2300      	movs	r3, #0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d10b      	bne.n	8015ba4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8015b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b90:	f383 8811 	msr	BASEPRI, r3
 8015b94:	f3bf 8f6f 	isb	sy
 8015b98:	f3bf 8f4f 	dsb	sy
 8015b9c:	623b      	str	r3, [r7, #32]
}
 8015b9e:	bf00      	nop
 8015ba0:	bf00      	nop
 8015ba2:	e7fd      	b.n	8015ba0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ba4:	f002 fac0 	bl	8018128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015ba8:	f3ef 8211 	mrs	r2, BASEPRI
 8015bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bb0:	f383 8811 	msr	BASEPRI, r3
 8015bb4:	f3bf 8f6f 	isb	sy
 8015bb8:	f3bf 8f4f 	dsb	sy
 8015bbc:	61fa      	str	r2, [r7, #28]
 8015bbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015bc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015bc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d302      	bcc.n	8015bd6 <xQueueGenericSendFromISR+0xc2>
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	2b02      	cmp	r3, #2
 8015bd4:	d12f      	bne.n	8015c36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015be6:	683a      	ldr	r2, [r7, #0]
 8015be8:	68b9      	ldr	r1, [r7, #8]
 8015bea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015bec:	f000 fa3a 	bl	8016064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015bf0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf8:	d112      	bne.n	8015c20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d016      	beq.n	8015c30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c04:	3324      	adds	r3, #36	@ 0x24
 8015c06:	4618      	mov	r0, r3
 8015c08:	f001 f82c 	bl	8016c64 <xTaskRemoveFromEventList>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d00e      	beq.n	8015c30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d00b      	beq.n	8015c30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2201      	movs	r2, #1
 8015c1c:	601a      	str	r2, [r3, #0]
 8015c1e:	e007      	b.n	8015c30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015c24:	3301      	adds	r3, #1
 8015c26:	b2db      	uxtb	r3, r3
 8015c28:	b25a      	sxtb	r2, r3
 8015c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015c30:	2301      	movs	r3, #1
 8015c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8015c34:	e001      	b.n	8015c3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015c36:	2300      	movs	r3, #0
 8015c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015c44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3740      	adds	r7, #64	@ 0x40
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b08c      	sub	sp, #48	@ 0x30
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d10b      	bne.n	8015c82 <xQueueReceive+0x32>
	__asm volatile
 8015c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c6e:	f383 8811 	msr	BASEPRI, r3
 8015c72:	f3bf 8f6f 	isb	sy
 8015c76:	f3bf 8f4f 	dsb	sy
 8015c7a:	623b      	str	r3, [r7, #32]
}
 8015c7c:	bf00      	nop
 8015c7e:	bf00      	nop
 8015c80:	e7fd      	b.n	8015c7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d103      	bne.n	8015c90 <xQueueReceive+0x40>
 8015c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <xQueueReceive+0x44>
 8015c90:	2301      	movs	r3, #1
 8015c92:	e000      	b.n	8015c96 <xQueueReceive+0x46>
 8015c94:	2300      	movs	r3, #0
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d10b      	bne.n	8015cb2 <xQueueReceive+0x62>
	__asm volatile
 8015c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c9e:	f383 8811 	msr	BASEPRI, r3
 8015ca2:	f3bf 8f6f 	isb	sy
 8015ca6:	f3bf 8f4f 	dsb	sy
 8015caa:	61fb      	str	r3, [r7, #28]
}
 8015cac:	bf00      	nop
 8015cae:	bf00      	nop
 8015cb0:	e7fd      	b.n	8015cae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015cb2:	f001 f9ad 	bl	8017010 <xTaskGetSchedulerState>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d102      	bne.n	8015cc2 <xQueueReceive+0x72>
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d101      	bne.n	8015cc6 <xQueueReceive+0x76>
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	e000      	b.n	8015cc8 <xQueueReceive+0x78>
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d10b      	bne.n	8015ce4 <xQueueReceive+0x94>
	__asm volatile
 8015ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cd0:	f383 8811 	msr	BASEPRI, r3
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	f3bf 8f4f 	dsb	sy
 8015cdc:	61bb      	str	r3, [r7, #24]
}
 8015cde:	bf00      	nop
 8015ce0:	bf00      	nop
 8015ce2:	e7fd      	b.n	8015ce0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015ce4:	f002 f940 	bl	8017f68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d01f      	beq.n	8015d34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015cf4:	68b9      	ldr	r1, [r7, #8]
 8015cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015cf8:	f000 fa1e 	bl	8016138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cfe:	1e5a      	subs	r2, r3, #1
 8015d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d06:	691b      	ldr	r3, [r3, #16]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d00f      	beq.n	8015d2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d0e:	3310      	adds	r3, #16
 8015d10:	4618      	mov	r0, r3
 8015d12:	f000 ffa7 	bl	8016c64 <xTaskRemoveFromEventList>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d007      	beq.n	8015d2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8015e10 <xQueueReceive+0x1c0>)
 8015d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d22:	601a      	str	r2, [r3, #0]
 8015d24:	f3bf 8f4f 	dsb	sy
 8015d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015d2c:	f002 f94e 	bl	8017fcc <vPortExitCritical>
				return pdPASS;
 8015d30:	2301      	movs	r3, #1
 8015d32:	e069      	b.n	8015e08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d103      	bne.n	8015d42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d3a:	f002 f947 	bl	8017fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	e062      	b.n	8015e08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d106      	bne.n	8015d56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d48:	f107 0310 	add.w	r3, r7, #16
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f000 ffed 	bl	8016d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d52:	2301      	movs	r3, #1
 8015d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d56:	f002 f939 	bl	8017fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d5a:	f000 fd55 	bl	8016808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d5e:	f002 f903 	bl	8017f68 <vPortEnterCritical>
 8015d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015d68:	b25b      	sxtb	r3, r3
 8015d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d6e:	d103      	bne.n	8015d78 <xQueueReceive+0x128>
 8015d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d72:	2200      	movs	r2, #0
 8015d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015d7e:	b25b      	sxtb	r3, r3
 8015d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d84:	d103      	bne.n	8015d8e <xQueueReceive+0x13e>
 8015d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d88:	2200      	movs	r2, #0
 8015d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d8e:	f002 f91d 	bl	8017fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015d92:	1d3a      	adds	r2, r7, #4
 8015d94:	f107 0310 	add.w	r3, r7, #16
 8015d98:	4611      	mov	r1, r2
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f000 ffdc 	bl	8016d58 <xTaskCheckForTimeOut>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d123      	bne.n	8015dee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015da8:	f000 fa3e 	bl	8016228 <prvIsQueueEmpty>
 8015dac:	4603      	mov	r3, r0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d017      	beq.n	8015de2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015db4:	3324      	adds	r3, #36	@ 0x24
 8015db6:	687a      	ldr	r2, [r7, #4]
 8015db8:	4611      	mov	r1, r2
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f000 ff00 	bl	8016bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015dc2:	f000 f9df 	bl	8016184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015dc6:	f000 fd2d 	bl	8016824 <xTaskResumeAll>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d189      	bne.n	8015ce4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8015dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8015e10 <xQueueReceive+0x1c0>)
 8015dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015dd6:	601a      	str	r2, [r3, #0]
 8015dd8:	f3bf 8f4f 	dsb	sy
 8015ddc:	f3bf 8f6f 	isb	sy
 8015de0:	e780      	b.n	8015ce4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015de4:	f000 f9ce 	bl	8016184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015de8:	f000 fd1c 	bl	8016824 <xTaskResumeAll>
 8015dec:	e77a      	b.n	8015ce4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015df0:	f000 f9c8 	bl	8016184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015df4:	f000 fd16 	bl	8016824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015df8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015dfa:	f000 fa15 	bl	8016228 <prvIsQueueEmpty>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	f43f af6f 	beq.w	8015ce4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015e06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3730      	adds	r7, #48	@ 0x30
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	e000ed04 	.word	0xe000ed04

08015e14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b08e      	sub	sp, #56	@ 0x38
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015e26:	2300      	movs	r3, #0
 8015e28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d10b      	bne.n	8015e48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8015e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e34:	f383 8811 	msr	BASEPRI, r3
 8015e38:	f3bf 8f6f 	isb	sy
 8015e3c:	f3bf 8f4f 	dsb	sy
 8015e40:	623b      	str	r3, [r7, #32]
}
 8015e42:	bf00      	nop
 8015e44:	bf00      	nop
 8015e46:	e7fd      	b.n	8015e44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d00b      	beq.n	8015e68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	61fb      	str	r3, [r7, #28]
}
 8015e62:	bf00      	nop
 8015e64:	bf00      	nop
 8015e66:	e7fd      	b.n	8015e64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e68:	f001 f8d2 	bl	8017010 <xTaskGetSchedulerState>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d102      	bne.n	8015e78 <xQueueSemaphoreTake+0x64>
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d101      	bne.n	8015e7c <xQueueSemaphoreTake+0x68>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e000      	b.n	8015e7e <xQueueSemaphoreTake+0x6a>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d10b      	bne.n	8015e9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8015e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e86:	f383 8811 	msr	BASEPRI, r3
 8015e8a:	f3bf 8f6f 	isb	sy
 8015e8e:	f3bf 8f4f 	dsb	sy
 8015e92:	61bb      	str	r3, [r7, #24]
}
 8015e94:	bf00      	nop
 8015e96:	bf00      	nop
 8015e98:	e7fd      	b.n	8015e96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e9a:	f002 f865 	bl	8017f68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d024      	beq.n	8015ef4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eac:	1e5a      	subs	r2, r3, #1
 8015eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d104      	bne.n	8015ec4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015eba:	f001 fa23 	bl	8017304 <pvTaskIncrementMutexHeldCount>
 8015ebe:	4602      	mov	r2, r0
 8015ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec6:	691b      	ldr	r3, [r3, #16]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d00f      	beq.n	8015eec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ece:	3310      	adds	r3, #16
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f000 fec7 	bl	8016c64 <xTaskRemoveFromEventList>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d007      	beq.n	8015eec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015edc:	4b54      	ldr	r3, [pc, #336]	@ (8016030 <xQueueSemaphoreTake+0x21c>)
 8015ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ee2:	601a      	str	r2, [r3, #0]
 8015ee4:	f3bf 8f4f 	dsb	sy
 8015ee8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015eec:	f002 f86e 	bl	8017fcc <vPortExitCritical>
				return pdPASS;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	e098      	b.n	8016026 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d112      	bne.n	8015f20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d00b      	beq.n	8015f18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8015f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f04:	f383 8811 	msr	BASEPRI, r3
 8015f08:	f3bf 8f6f 	isb	sy
 8015f0c:	f3bf 8f4f 	dsb	sy
 8015f10:	617b      	str	r3, [r7, #20]
}
 8015f12:	bf00      	nop
 8015f14:	bf00      	nop
 8015f16:	e7fd      	b.n	8015f14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015f18:	f002 f858 	bl	8017fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	e082      	b.n	8016026 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d106      	bne.n	8015f34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f26:	f107 030c 	add.w	r3, r7, #12
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f000 fefe 	bl	8016d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015f30:	2301      	movs	r3, #1
 8015f32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015f34:	f002 f84a 	bl	8017fcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015f38:	f000 fc66 	bl	8016808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015f3c:	f002 f814 	bl	8017f68 <vPortEnterCritical>
 8015f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015f46:	b25b      	sxtb	r3, r3
 8015f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f4c:	d103      	bne.n	8015f56 <xQueueSemaphoreTake+0x142>
 8015f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f50:	2200      	movs	r2, #0
 8015f52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015f5c:	b25b      	sxtb	r3, r3
 8015f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f62:	d103      	bne.n	8015f6c <xQueueSemaphoreTake+0x158>
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	2200      	movs	r2, #0
 8015f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015f6c:	f002 f82e 	bl	8017fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015f70:	463a      	mov	r2, r7
 8015f72:	f107 030c 	add.w	r3, r7, #12
 8015f76:	4611      	mov	r1, r2
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f000 feed 	bl	8016d58 <xTaskCheckForTimeOut>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d132      	bne.n	8015fea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015f84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f86:	f000 f94f 	bl	8016228 <prvIsQueueEmpty>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d026      	beq.n	8015fde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d109      	bne.n	8015fac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8015f98:	f001 ffe6 	bl	8017f68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f9e:	689b      	ldr	r3, [r3, #8]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f001 f853 	bl	801704c <xTaskPriorityInherit>
 8015fa6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015fa8:	f002 f810 	bl	8017fcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fae:	3324      	adds	r3, #36	@ 0x24
 8015fb0:	683a      	ldr	r2, [r7, #0]
 8015fb2:	4611      	mov	r1, r2
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f000 fe03 	bl	8016bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015fba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015fbc:	f000 f8e2 	bl	8016184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015fc0:	f000 fc30 	bl	8016824 <xTaskResumeAll>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	f47f af67 	bne.w	8015e9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8015fcc:	4b18      	ldr	r3, [pc, #96]	@ (8016030 <xQueueSemaphoreTake+0x21c>)
 8015fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015fd2:	601a      	str	r2, [r3, #0]
 8015fd4:	f3bf 8f4f 	dsb	sy
 8015fd8:	f3bf 8f6f 	isb	sy
 8015fdc:	e75d      	b.n	8015e9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015fde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015fe0:	f000 f8d0 	bl	8016184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015fe4:	f000 fc1e 	bl	8016824 <xTaskResumeAll>
 8015fe8:	e757      	b.n	8015e9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015fea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015fec:	f000 f8ca 	bl	8016184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ff0:	f000 fc18 	bl	8016824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015ff6:	f000 f917 	bl	8016228 <prvIsQueueEmpty>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	f43f af4c 	beq.w	8015e9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016004:	2b00      	cmp	r3, #0
 8016006:	d00d      	beq.n	8016024 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8016008:	f001 ffae 	bl	8017f68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801600c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801600e:	f000 f811 	bl	8016034 <prvGetDisinheritPriorityAfterTimeout>
 8016012:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016016:	689b      	ldr	r3, [r3, #8]
 8016018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801601a:	4618      	mov	r0, r3
 801601c:	f001 f8ee 	bl	80171fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016020:	f001 ffd4 	bl	8017fcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016026:	4618      	mov	r0, r3
 8016028:	3738      	adds	r7, #56	@ 0x38
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	e000ed04 	.word	0xe000ed04

08016034 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016034:	b480      	push	{r7}
 8016036:	b085      	sub	sp, #20
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016040:	2b00      	cmp	r3, #0
 8016042:	d006      	beq.n	8016052 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801604e:	60fb      	str	r3, [r7, #12]
 8016050:	e001      	b.n	8016056 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016052:	2300      	movs	r3, #0
 8016054:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016056:	68fb      	ldr	r3, [r7, #12]
	}
 8016058:	4618      	mov	r0, r3
 801605a:	3714      	adds	r7, #20
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr

08016064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b086      	sub	sp, #24
 8016068:	af00      	add	r7, sp, #0
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016070:	2300      	movs	r3, #0
 8016072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801607e:	2b00      	cmp	r3, #0
 8016080:	d10d      	bne.n	801609e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d14d      	bne.n	8016126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	689b      	ldr	r3, [r3, #8]
 801608e:	4618      	mov	r0, r3
 8016090:	f001 f844 	bl	801711c <xTaskPriorityDisinherit>
 8016094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2200      	movs	r2, #0
 801609a:	609a      	str	r2, [r3, #8]
 801609c:	e043      	b.n	8016126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d119      	bne.n	80160d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	6858      	ldr	r0, [r3, #4]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160ac:	461a      	mov	r2, r3
 80160ae:	68b9      	ldr	r1, [r7, #8]
 80160b0:	f006 f939 	bl	801c326 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	685a      	ldr	r2, [r3, #4]
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160bc:	441a      	add	r2, r3
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	685a      	ldr	r2, [r3, #4]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	689b      	ldr	r3, [r3, #8]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d32b      	bcc.n	8016126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	605a      	str	r2, [r3, #4]
 80160d6:	e026      	b.n	8016126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	68d8      	ldr	r0, [r3, #12]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160e0:	461a      	mov	r2, r3
 80160e2:	68b9      	ldr	r1, [r7, #8]
 80160e4:	f006 f91f 	bl	801c326 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	68da      	ldr	r2, [r3, #12]
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160f0:	425b      	negs	r3, r3
 80160f2:	441a      	add	r2, r3
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	68da      	ldr	r2, [r3, #12]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	429a      	cmp	r2, r3
 8016102:	d207      	bcs.n	8016114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	689a      	ldr	r2, [r3, #8]
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801610c:	425b      	negs	r3, r3
 801610e:	441a      	add	r2, r3
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2b02      	cmp	r3, #2
 8016118:	d105      	bne.n	8016126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d002      	beq.n	8016126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	3b01      	subs	r3, #1
 8016124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	1c5a      	adds	r2, r3, #1
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801612e:	697b      	ldr	r3, [r7, #20]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3718      	adds	r7, #24
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016146:	2b00      	cmp	r3, #0
 8016148:	d018      	beq.n	801617c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	68da      	ldr	r2, [r3, #12]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016152:	441a      	add	r2, r3
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	68da      	ldr	r2, [r3, #12]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	689b      	ldr	r3, [r3, #8]
 8016160:	429a      	cmp	r2, r3
 8016162:	d303      	bcc.n	801616c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681a      	ldr	r2, [r3, #0]
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	68d9      	ldr	r1, [r3, #12]
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016174:	461a      	mov	r2, r3
 8016176:	6838      	ldr	r0, [r7, #0]
 8016178:	f006 f8d5 	bl	801c326 <memcpy>
	}
}
 801617c:	bf00      	nop
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b084      	sub	sp, #16
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801618c:	f001 feec 	bl	8017f68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016198:	e011      	b.n	80161be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d012      	beq.n	80161c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	3324      	adds	r3, #36	@ 0x24
 80161a6:	4618      	mov	r0, r3
 80161a8:	f000 fd5c 	bl	8016c64 <xTaskRemoveFromEventList>
 80161ac:	4603      	mov	r3, r0
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d001      	beq.n	80161b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80161b2:	f000 fe35 	bl	8016e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80161b6:	7bfb      	ldrb	r3, [r7, #15]
 80161b8:	3b01      	subs	r3, #1
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80161be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	dce9      	bgt.n	801619a <prvUnlockQueue+0x16>
 80161c6:	e000      	b.n	80161ca <prvUnlockQueue+0x46>
					break;
 80161c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	22ff      	movs	r2, #255	@ 0xff
 80161ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80161d2:	f001 fefb 	bl	8017fcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80161d6:	f001 fec7 	bl	8017f68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80161e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80161e2:	e011      	b.n	8016208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	691b      	ldr	r3, [r3, #16]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d012      	beq.n	8016212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	3310      	adds	r3, #16
 80161f0:	4618      	mov	r0, r3
 80161f2:	f000 fd37 	bl	8016c64 <xTaskRemoveFromEventList>
 80161f6:	4603      	mov	r3, r0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d001      	beq.n	8016200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80161fc:	f000 fe10 	bl	8016e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016200:	7bbb      	ldrb	r3, [r7, #14]
 8016202:	3b01      	subs	r3, #1
 8016204:	b2db      	uxtb	r3, r3
 8016206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801620c:	2b00      	cmp	r3, #0
 801620e:	dce9      	bgt.n	80161e4 <prvUnlockQueue+0x60>
 8016210:	e000      	b.n	8016214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	22ff      	movs	r2, #255	@ 0xff
 8016218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801621c:	f001 fed6 	bl	8017fcc <vPortExitCritical>
}
 8016220:	bf00      	nop
 8016222:	3710      	adds	r7, #16
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016230:	f001 fe9a 	bl	8017f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016238:	2b00      	cmp	r3, #0
 801623a:	d102      	bne.n	8016242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801623c:	2301      	movs	r3, #1
 801623e:	60fb      	str	r3, [r7, #12]
 8016240:	e001      	b.n	8016246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016242:	2300      	movs	r3, #0
 8016244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016246:	f001 fec1 	bl	8017fcc <vPortExitCritical>

	return xReturn;
 801624a:	68fb      	ldr	r3, [r7, #12]
}
 801624c:	4618      	mov	r0, r3
 801624e:	3710      	adds	r7, #16
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b084      	sub	sp, #16
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801625c:	f001 fe84 	bl	8017f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016268:	429a      	cmp	r2, r3
 801626a:	d102      	bne.n	8016272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801626c:	2301      	movs	r3, #1
 801626e:	60fb      	str	r3, [r7, #12]
 8016270:	e001      	b.n	8016276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016272:	2300      	movs	r3, #0
 8016274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016276:	f001 fea9 	bl	8017fcc <vPortExitCritical>

	return xReturn;
 801627a:	68fb      	ldr	r3, [r7, #12]
}
 801627c:	4618      	mov	r0, r3
 801627e:	3710      	adds	r7, #16
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016284:	b480      	push	{r7}
 8016286:	b085      	sub	sp, #20
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801628e:	2300      	movs	r3, #0
 8016290:	60fb      	str	r3, [r7, #12]
 8016292:	e014      	b.n	80162be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016294:	4a0f      	ldr	r2, [pc, #60]	@ (80162d4 <vQueueAddToRegistry+0x50>)
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d10b      	bne.n	80162b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80162a0:	490c      	ldr	r1, [pc, #48]	@ (80162d4 <vQueueAddToRegistry+0x50>)
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	683a      	ldr	r2, [r7, #0]
 80162a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80162aa:	4a0a      	ldr	r2, [pc, #40]	@ (80162d4 <vQueueAddToRegistry+0x50>)
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	00db      	lsls	r3, r3, #3
 80162b0:	4413      	add	r3, r2
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80162b6:	e006      	b.n	80162c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	3301      	adds	r3, #1
 80162bc:	60fb      	str	r3, [r7, #12]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2b07      	cmp	r3, #7
 80162c2:	d9e7      	bls.n	8016294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80162c4:	bf00      	nop
 80162c6:	bf00      	nop
 80162c8:	3714      	adds	r7, #20
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	20005e70 	.word	0x20005e70

080162d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b086      	sub	sp, #24
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80162e8:	f001 fe3e 	bl	8017f68 <vPortEnterCritical>
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80162f2:	b25b      	sxtb	r3, r3
 80162f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162f8:	d103      	bne.n	8016302 <vQueueWaitForMessageRestricted+0x2a>
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	2200      	movs	r2, #0
 80162fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016302:	697b      	ldr	r3, [r7, #20]
 8016304:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016308:	b25b      	sxtb	r3, r3
 801630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801630e:	d103      	bne.n	8016318 <vQueueWaitForMessageRestricted+0x40>
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	2200      	movs	r2, #0
 8016314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016318:	f001 fe58 	bl	8017fcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016320:	2b00      	cmp	r3, #0
 8016322:	d106      	bne.n	8016332 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	3324      	adds	r3, #36	@ 0x24
 8016328:	687a      	ldr	r2, [r7, #4]
 801632a:	68b9      	ldr	r1, [r7, #8]
 801632c:	4618      	mov	r0, r3
 801632e:	f000 fc6d 	bl	8016c0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016332:	6978      	ldr	r0, [r7, #20]
 8016334:	f7ff ff26 	bl	8016184 <prvUnlockQueue>
	}
 8016338:	bf00      	nop
 801633a:	3718      	adds	r7, #24
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016340:	b580      	push	{r7, lr}
 8016342:	b08e      	sub	sp, #56	@ 0x38
 8016344:	af04      	add	r7, sp, #16
 8016346:	60f8      	str	r0, [r7, #12]
 8016348:	60b9      	str	r1, [r7, #8]
 801634a:	607a      	str	r2, [r7, #4]
 801634c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801634e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016350:	2b00      	cmp	r3, #0
 8016352:	d10b      	bne.n	801636c <xTaskCreateStatic+0x2c>
	__asm volatile
 8016354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016358:	f383 8811 	msr	BASEPRI, r3
 801635c:	f3bf 8f6f 	isb	sy
 8016360:	f3bf 8f4f 	dsb	sy
 8016364:	623b      	str	r3, [r7, #32]
}
 8016366:	bf00      	nop
 8016368:	bf00      	nop
 801636a:	e7fd      	b.n	8016368 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801636e:	2b00      	cmp	r3, #0
 8016370:	d10b      	bne.n	801638a <xTaskCreateStatic+0x4a>
	__asm volatile
 8016372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016376:	f383 8811 	msr	BASEPRI, r3
 801637a:	f3bf 8f6f 	isb	sy
 801637e:	f3bf 8f4f 	dsb	sy
 8016382:	61fb      	str	r3, [r7, #28]
}
 8016384:	bf00      	nop
 8016386:	bf00      	nop
 8016388:	e7fd      	b.n	8016386 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801638a:	23a8      	movs	r3, #168	@ 0xa8
 801638c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	2ba8      	cmp	r3, #168	@ 0xa8
 8016392:	d00b      	beq.n	80163ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8016394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016398:	f383 8811 	msr	BASEPRI, r3
 801639c:	f3bf 8f6f 	isb	sy
 80163a0:	f3bf 8f4f 	dsb	sy
 80163a4:	61bb      	str	r3, [r7, #24]
}
 80163a6:	bf00      	nop
 80163a8:	bf00      	nop
 80163aa:	e7fd      	b.n	80163a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80163ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80163ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d01e      	beq.n	80163f2 <xTaskCreateStatic+0xb2>
 80163b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d01b      	beq.n	80163f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80163ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80163be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80163c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80163c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c6:	2202      	movs	r2, #2
 80163c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80163cc:	2300      	movs	r3, #0
 80163ce:	9303      	str	r3, [sp, #12]
 80163d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163d2:	9302      	str	r3, [sp, #8]
 80163d4:	f107 0314 	add.w	r3, r7, #20
 80163d8:	9301      	str	r3, [sp, #4]
 80163da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163dc:	9300      	str	r3, [sp, #0]
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	68b9      	ldr	r1, [r7, #8]
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f000 f851 	bl	801648c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80163ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163ec:	f000 f8f6 	bl	80165dc <prvAddNewTaskToReadyList>
 80163f0:	e001      	b.n	80163f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80163f2:	2300      	movs	r3, #0
 80163f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80163f6:	697b      	ldr	r3, [r7, #20]
	}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3728      	adds	r7, #40	@ 0x28
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016400:	b580      	push	{r7, lr}
 8016402:	b08c      	sub	sp, #48	@ 0x30
 8016404:	af04      	add	r7, sp, #16
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	603b      	str	r3, [r7, #0]
 801640c:	4613      	mov	r3, r2
 801640e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016410:	88fb      	ldrh	r3, [r7, #6]
 8016412:	009b      	lsls	r3, r3, #2
 8016414:	4618      	mov	r0, r3
 8016416:	f001 fec9 	bl	80181ac <pvPortMalloc>
 801641a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d00e      	beq.n	8016440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016422:	20a8      	movs	r0, #168	@ 0xa8
 8016424:	f001 fec2 	bl	80181ac <pvPortMalloc>
 8016428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801642a:	69fb      	ldr	r3, [r7, #28]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d003      	beq.n	8016438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	697a      	ldr	r2, [r7, #20]
 8016434:	631a      	str	r2, [r3, #48]	@ 0x30
 8016436:	e005      	b.n	8016444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016438:	6978      	ldr	r0, [r7, #20]
 801643a:	f001 ff85 	bl	8018348 <vPortFree>
 801643e:	e001      	b.n	8016444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016440:	2300      	movs	r3, #0
 8016442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016444:	69fb      	ldr	r3, [r7, #28]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d017      	beq.n	801647a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801644a:	69fb      	ldr	r3, [r7, #28]
 801644c:	2200      	movs	r2, #0
 801644e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016452:	88fa      	ldrh	r2, [r7, #6]
 8016454:	2300      	movs	r3, #0
 8016456:	9303      	str	r3, [sp, #12]
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	9302      	str	r3, [sp, #8]
 801645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801645e:	9301      	str	r3, [sp, #4]
 8016460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	68b9      	ldr	r1, [r7, #8]
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f000 f80f 	bl	801648c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801646e:	69f8      	ldr	r0, [r7, #28]
 8016470:	f000 f8b4 	bl	80165dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016474:	2301      	movs	r3, #1
 8016476:	61bb      	str	r3, [r7, #24]
 8016478:	e002      	b.n	8016480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801647a:	f04f 33ff 	mov.w	r3, #4294967295
 801647e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016480:	69bb      	ldr	r3, [r7, #24]
	}
 8016482:	4618      	mov	r0, r3
 8016484:	3720      	adds	r7, #32
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
	...

0801648c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b088      	sub	sp, #32
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
 8016498:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801649c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	009b      	lsls	r3, r3, #2
 80164a2:	461a      	mov	r2, r3
 80164a4:	21a5      	movs	r1, #165	@ 0xa5
 80164a6:	f005 fe4f 	bl	801c148 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80164aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80164b4:	3b01      	subs	r3, #1
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	4413      	add	r3, r2
 80164ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80164bc:	69bb      	ldr	r3, [r7, #24]
 80164be:	f023 0307 	bic.w	r3, r3, #7
 80164c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80164c4:	69bb      	ldr	r3, [r7, #24]
 80164c6:	f003 0307 	and.w	r3, r3, #7
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00b      	beq.n	80164e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80164ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164d2:	f383 8811 	msr	BASEPRI, r3
 80164d6:	f3bf 8f6f 	isb	sy
 80164da:	f3bf 8f4f 	dsb	sy
 80164de:	617b      	str	r3, [r7, #20]
}
 80164e0:	bf00      	nop
 80164e2:	bf00      	nop
 80164e4:	e7fd      	b.n	80164e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d01f      	beq.n	801652c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80164ec:	2300      	movs	r3, #0
 80164ee:	61fb      	str	r3, [r7, #28]
 80164f0:	e012      	b.n	8016518 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80164f2:	68ba      	ldr	r2, [r7, #8]
 80164f4:	69fb      	ldr	r3, [r7, #28]
 80164f6:	4413      	add	r3, r2
 80164f8:	7819      	ldrb	r1, [r3, #0]
 80164fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	4413      	add	r3, r2
 8016500:	3334      	adds	r3, #52	@ 0x34
 8016502:	460a      	mov	r2, r1
 8016504:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016506:	68ba      	ldr	r2, [r7, #8]
 8016508:	69fb      	ldr	r3, [r7, #28]
 801650a:	4413      	add	r3, r2
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d006      	beq.n	8016520 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016512:	69fb      	ldr	r3, [r7, #28]
 8016514:	3301      	adds	r3, #1
 8016516:	61fb      	str	r3, [r7, #28]
 8016518:	69fb      	ldr	r3, [r7, #28]
 801651a:	2b0f      	cmp	r3, #15
 801651c:	d9e9      	bls.n	80164f2 <prvInitialiseNewTask+0x66>
 801651e:	e000      	b.n	8016522 <prvInitialiseNewTask+0x96>
			{
				break;
 8016520:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016524:	2200      	movs	r2, #0
 8016526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801652a:	e003      	b.n	8016534 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801652e:	2200      	movs	r2, #0
 8016530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016536:	2b37      	cmp	r3, #55	@ 0x37
 8016538:	d901      	bls.n	801653e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801653a:	2337      	movs	r3, #55	@ 0x37
 801653c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016542:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016548:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801654c:	2200      	movs	r2, #0
 801654e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016552:	3304      	adds	r3, #4
 8016554:	4618      	mov	r0, r3
 8016556:	f7fe ffcf 	bl	80154f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801655c:	3318      	adds	r3, #24
 801655e:	4618      	mov	r0, r3
 8016560:	f7fe ffca 	bl	80154f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016568:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801656c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016572:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016578:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801657c:	2200      	movs	r2, #0
 801657e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016584:	2200      	movs	r2, #0
 8016586:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801658c:	3354      	adds	r3, #84	@ 0x54
 801658e:	224c      	movs	r2, #76	@ 0x4c
 8016590:	2100      	movs	r1, #0
 8016592:	4618      	mov	r0, r3
 8016594:	f005 fdd8 	bl	801c148 <memset>
 8016598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801659a:	4a0d      	ldr	r2, [pc, #52]	@ (80165d0 <prvInitialiseNewTask+0x144>)
 801659c:	659a      	str	r2, [r3, #88]	@ 0x58
 801659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165a0:	4a0c      	ldr	r2, [pc, #48]	@ (80165d4 <prvInitialiseNewTask+0x148>)
 80165a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80165a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165a6:	4a0c      	ldr	r2, [pc, #48]	@ (80165d8 <prvInitialiseNewTask+0x14c>)
 80165a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80165aa:	683a      	ldr	r2, [r7, #0]
 80165ac:	68f9      	ldr	r1, [r7, #12]
 80165ae:	69b8      	ldr	r0, [r7, #24]
 80165b0:	f001 fbaa 	bl	8017d08 <pxPortInitialiseStack>
 80165b4:	4602      	mov	r2, r0
 80165b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80165ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d002      	beq.n	80165c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80165c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80165c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165c6:	bf00      	nop
 80165c8:	3720      	adds	r7, #32
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	2000c2f4 	.word	0x2000c2f4
 80165d4:	2000c35c 	.word	0x2000c35c
 80165d8:	2000c3c4 	.word	0x2000c3c4

080165dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80165e4:	f001 fcc0 	bl	8017f68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80165e8:	4b2d      	ldr	r3, [pc, #180]	@ (80166a0 <prvAddNewTaskToReadyList+0xc4>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	3301      	adds	r3, #1
 80165ee:	4a2c      	ldr	r2, [pc, #176]	@ (80166a0 <prvAddNewTaskToReadyList+0xc4>)
 80165f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80165f2:	4b2c      	ldr	r3, [pc, #176]	@ (80166a4 <prvAddNewTaskToReadyList+0xc8>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d109      	bne.n	801660e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80165fa:	4a2a      	ldr	r2, [pc, #168]	@ (80166a4 <prvAddNewTaskToReadyList+0xc8>)
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016600:	4b27      	ldr	r3, [pc, #156]	@ (80166a0 <prvAddNewTaskToReadyList+0xc4>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	2b01      	cmp	r3, #1
 8016606:	d110      	bne.n	801662a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016608:	f000 fc2e 	bl	8016e68 <prvInitialiseTaskLists>
 801660c:	e00d      	b.n	801662a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801660e:	4b26      	ldr	r3, [pc, #152]	@ (80166a8 <prvAddNewTaskToReadyList+0xcc>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d109      	bne.n	801662a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016616:	4b23      	ldr	r3, [pc, #140]	@ (80166a4 <prvAddNewTaskToReadyList+0xc8>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016620:	429a      	cmp	r2, r3
 8016622:	d802      	bhi.n	801662a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016624:	4a1f      	ldr	r2, [pc, #124]	@ (80166a4 <prvAddNewTaskToReadyList+0xc8>)
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801662a:	4b20      	ldr	r3, [pc, #128]	@ (80166ac <prvAddNewTaskToReadyList+0xd0>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	3301      	adds	r3, #1
 8016630:	4a1e      	ldr	r2, [pc, #120]	@ (80166ac <prvAddNewTaskToReadyList+0xd0>)
 8016632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016634:	4b1d      	ldr	r3, [pc, #116]	@ (80166ac <prvAddNewTaskToReadyList+0xd0>)
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016640:	4b1b      	ldr	r3, [pc, #108]	@ (80166b0 <prvAddNewTaskToReadyList+0xd4>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	429a      	cmp	r2, r3
 8016646:	d903      	bls.n	8016650 <prvAddNewTaskToReadyList+0x74>
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801664c:	4a18      	ldr	r2, [pc, #96]	@ (80166b0 <prvAddNewTaskToReadyList+0xd4>)
 801664e:	6013      	str	r3, [r2, #0]
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016654:	4613      	mov	r3, r2
 8016656:	009b      	lsls	r3, r3, #2
 8016658:	4413      	add	r3, r2
 801665a:	009b      	lsls	r3, r3, #2
 801665c:	4a15      	ldr	r2, [pc, #84]	@ (80166b4 <prvAddNewTaskToReadyList+0xd8>)
 801665e:	441a      	add	r2, r3
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	3304      	adds	r3, #4
 8016664:	4619      	mov	r1, r3
 8016666:	4610      	mov	r0, r2
 8016668:	f7fe ff53 	bl	8015512 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801666c:	f001 fcae 	bl	8017fcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016670:	4b0d      	ldr	r3, [pc, #52]	@ (80166a8 <prvAddNewTaskToReadyList+0xcc>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d00e      	beq.n	8016696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016678:	4b0a      	ldr	r3, [pc, #40]	@ (80166a4 <prvAddNewTaskToReadyList+0xc8>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016682:	429a      	cmp	r2, r3
 8016684:	d207      	bcs.n	8016696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016686:	4b0c      	ldr	r3, [pc, #48]	@ (80166b8 <prvAddNewTaskToReadyList+0xdc>)
 8016688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801668c:	601a      	str	r2, [r3, #0]
 801668e:	f3bf 8f4f 	dsb	sy
 8016692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016696:	bf00      	nop
 8016698:	3708      	adds	r7, #8
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
 801669e:	bf00      	nop
 80166a0:	20006384 	.word	0x20006384
 80166a4:	20005eb0 	.word	0x20005eb0
 80166a8:	20006390 	.word	0x20006390
 80166ac:	200063a0 	.word	0x200063a0
 80166b0:	2000638c 	.word	0x2000638c
 80166b4:	20005eb4 	.word	0x20005eb4
 80166b8:	e000ed04 	.word	0xe000ed04

080166bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80166c4:	2300      	movs	r3, #0
 80166c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d018      	beq.n	8016700 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80166ce:	4b14      	ldr	r3, [pc, #80]	@ (8016720 <vTaskDelay+0x64>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d00b      	beq.n	80166ee <vTaskDelay+0x32>
	__asm volatile
 80166d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166da:	f383 8811 	msr	BASEPRI, r3
 80166de:	f3bf 8f6f 	isb	sy
 80166e2:	f3bf 8f4f 	dsb	sy
 80166e6:	60bb      	str	r3, [r7, #8]
}
 80166e8:	bf00      	nop
 80166ea:	bf00      	nop
 80166ec:	e7fd      	b.n	80166ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80166ee:	f000 f88b 	bl	8016808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80166f2:	2100      	movs	r1, #0
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f000 fefb 	bl	80174f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80166fa:	f000 f893 	bl	8016824 <xTaskResumeAll>
 80166fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d107      	bne.n	8016716 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8016706:	4b07      	ldr	r3, [pc, #28]	@ (8016724 <vTaskDelay+0x68>)
 8016708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801670c:	601a      	str	r2, [r3, #0]
 801670e:	f3bf 8f4f 	dsb	sy
 8016712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016716:	bf00      	nop
 8016718:	3710      	adds	r7, #16
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
 801671e:	bf00      	nop
 8016720:	200063ac 	.word	0x200063ac
 8016724:	e000ed04 	.word	0xe000ed04

08016728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b08a      	sub	sp, #40	@ 0x28
 801672c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801672e:	2300      	movs	r3, #0
 8016730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016732:	2300      	movs	r3, #0
 8016734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016736:	463a      	mov	r2, r7
 8016738:	1d39      	adds	r1, r7, #4
 801673a:	f107 0308 	add.w	r3, r7, #8
 801673e:	4618      	mov	r0, r3
 8016740:	f7fe fe86 	bl	8015450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016744:	6839      	ldr	r1, [r7, #0]
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	68ba      	ldr	r2, [r7, #8]
 801674a:	9202      	str	r2, [sp, #8]
 801674c:	9301      	str	r3, [sp, #4]
 801674e:	2300      	movs	r3, #0
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	2300      	movs	r3, #0
 8016754:	460a      	mov	r2, r1
 8016756:	4924      	ldr	r1, [pc, #144]	@ (80167e8 <vTaskStartScheduler+0xc0>)
 8016758:	4824      	ldr	r0, [pc, #144]	@ (80167ec <vTaskStartScheduler+0xc4>)
 801675a:	f7ff fdf1 	bl	8016340 <xTaskCreateStatic>
 801675e:	4603      	mov	r3, r0
 8016760:	4a23      	ldr	r2, [pc, #140]	@ (80167f0 <vTaskStartScheduler+0xc8>)
 8016762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016764:	4b22      	ldr	r3, [pc, #136]	@ (80167f0 <vTaskStartScheduler+0xc8>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d002      	beq.n	8016772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801676c:	2301      	movs	r3, #1
 801676e:	617b      	str	r3, [r7, #20]
 8016770:	e001      	b.n	8016776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016772:	2300      	movs	r3, #0
 8016774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	2b01      	cmp	r3, #1
 801677a:	d102      	bne.n	8016782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801677c:	f000 ff0c 	bl	8017598 <xTimerCreateTimerTask>
 8016780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	2b01      	cmp	r3, #1
 8016786:	d11b      	bne.n	80167c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8016788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801678c:	f383 8811 	msr	BASEPRI, r3
 8016790:	f3bf 8f6f 	isb	sy
 8016794:	f3bf 8f4f 	dsb	sy
 8016798:	613b      	str	r3, [r7, #16]
}
 801679a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801679c:	4b15      	ldr	r3, [pc, #84]	@ (80167f4 <vTaskStartScheduler+0xcc>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	3354      	adds	r3, #84	@ 0x54
 80167a2:	4a15      	ldr	r2, [pc, #84]	@ (80167f8 <vTaskStartScheduler+0xd0>)
 80167a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80167a6:	4b15      	ldr	r3, [pc, #84]	@ (80167fc <vTaskStartScheduler+0xd4>)
 80167a8:	f04f 32ff 	mov.w	r2, #4294967295
 80167ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80167ae:	4b14      	ldr	r3, [pc, #80]	@ (8016800 <vTaskStartScheduler+0xd8>)
 80167b0:	2201      	movs	r2, #1
 80167b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80167b4:	4b13      	ldr	r3, [pc, #76]	@ (8016804 <vTaskStartScheduler+0xdc>)
 80167b6:	2200      	movs	r2, #0
 80167b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80167ba:	f001 fb31 	bl	8017e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80167be:	e00f      	b.n	80167e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167c6:	d10b      	bne.n	80167e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80167c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167cc:	f383 8811 	msr	BASEPRI, r3
 80167d0:	f3bf 8f6f 	isb	sy
 80167d4:	f3bf 8f4f 	dsb	sy
 80167d8:	60fb      	str	r3, [r7, #12]
}
 80167da:	bf00      	nop
 80167dc:	bf00      	nop
 80167de:	e7fd      	b.n	80167dc <vTaskStartScheduler+0xb4>
}
 80167e0:	bf00      	nop
 80167e2:	3718      	adds	r7, #24
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	08021fe8 	.word	0x08021fe8
 80167ec:	08016e39 	.word	0x08016e39
 80167f0:	200063a8 	.word	0x200063a8
 80167f4:	20005eb0 	.word	0x20005eb0
 80167f8:	20000164 	.word	0x20000164
 80167fc:	200063a4 	.word	0x200063a4
 8016800:	20006390 	.word	0x20006390
 8016804:	20006388 	.word	0x20006388

08016808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016808:	b480      	push	{r7}
 801680a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801680c:	4b04      	ldr	r3, [pc, #16]	@ (8016820 <vTaskSuspendAll+0x18>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	3301      	adds	r3, #1
 8016812:	4a03      	ldr	r2, [pc, #12]	@ (8016820 <vTaskSuspendAll+0x18>)
 8016814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016816:	bf00      	nop
 8016818:	46bd      	mov	sp, r7
 801681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681e:	4770      	bx	lr
 8016820:	200063ac 	.word	0x200063ac

08016824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801682a:	2300      	movs	r3, #0
 801682c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801682e:	2300      	movs	r3, #0
 8016830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016832:	4b42      	ldr	r3, [pc, #264]	@ (801693c <xTaskResumeAll+0x118>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d10b      	bne.n	8016852 <xTaskResumeAll+0x2e>
	__asm volatile
 801683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801683e:	f383 8811 	msr	BASEPRI, r3
 8016842:	f3bf 8f6f 	isb	sy
 8016846:	f3bf 8f4f 	dsb	sy
 801684a:	603b      	str	r3, [r7, #0]
}
 801684c:	bf00      	nop
 801684e:	bf00      	nop
 8016850:	e7fd      	b.n	801684e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016852:	f001 fb89 	bl	8017f68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016856:	4b39      	ldr	r3, [pc, #228]	@ (801693c <xTaskResumeAll+0x118>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	3b01      	subs	r3, #1
 801685c:	4a37      	ldr	r2, [pc, #220]	@ (801693c <xTaskResumeAll+0x118>)
 801685e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016860:	4b36      	ldr	r3, [pc, #216]	@ (801693c <xTaskResumeAll+0x118>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d162      	bne.n	801692e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016868:	4b35      	ldr	r3, [pc, #212]	@ (8016940 <xTaskResumeAll+0x11c>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d05e      	beq.n	801692e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016870:	e02f      	b.n	80168d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016872:	4b34      	ldr	r3, [pc, #208]	@ (8016944 <xTaskResumeAll+0x120>)
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	3318      	adds	r3, #24
 801687e:	4618      	mov	r0, r3
 8016880:	f7fe fea4 	bl	80155cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	3304      	adds	r3, #4
 8016888:	4618      	mov	r0, r3
 801688a:	f7fe fe9f 	bl	80155cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016892:	4b2d      	ldr	r3, [pc, #180]	@ (8016948 <xTaskResumeAll+0x124>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	429a      	cmp	r2, r3
 8016898:	d903      	bls.n	80168a2 <xTaskResumeAll+0x7e>
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801689e:	4a2a      	ldr	r2, [pc, #168]	@ (8016948 <xTaskResumeAll+0x124>)
 80168a0:	6013      	str	r3, [r2, #0]
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168a6:	4613      	mov	r3, r2
 80168a8:	009b      	lsls	r3, r3, #2
 80168aa:	4413      	add	r3, r2
 80168ac:	009b      	lsls	r3, r3, #2
 80168ae:	4a27      	ldr	r2, [pc, #156]	@ (801694c <xTaskResumeAll+0x128>)
 80168b0:	441a      	add	r2, r3
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	3304      	adds	r3, #4
 80168b6:	4619      	mov	r1, r3
 80168b8:	4610      	mov	r0, r2
 80168ba:	f7fe fe2a 	bl	8015512 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168c2:	4b23      	ldr	r3, [pc, #140]	@ (8016950 <xTaskResumeAll+0x12c>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168c8:	429a      	cmp	r2, r3
 80168ca:	d302      	bcc.n	80168d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80168cc:	4b21      	ldr	r3, [pc, #132]	@ (8016954 <xTaskResumeAll+0x130>)
 80168ce:	2201      	movs	r2, #1
 80168d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80168d2:	4b1c      	ldr	r3, [pc, #112]	@ (8016944 <xTaskResumeAll+0x120>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d1cb      	bne.n	8016872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80168e0:	f000 fb66 	bl	8016fb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80168e4:	4b1c      	ldr	r3, [pc, #112]	@ (8016958 <xTaskResumeAll+0x134>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d010      	beq.n	8016912 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80168f0:	f000 f846 	bl	8016980 <xTaskIncrementTick>
 80168f4:	4603      	mov	r3, r0
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d002      	beq.n	8016900 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80168fa:	4b16      	ldr	r3, [pc, #88]	@ (8016954 <xTaskResumeAll+0x130>)
 80168fc:	2201      	movs	r2, #1
 80168fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	3b01      	subs	r3, #1
 8016904:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1f1      	bne.n	80168f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801690c:	4b12      	ldr	r3, [pc, #72]	@ (8016958 <xTaskResumeAll+0x134>)
 801690e:	2200      	movs	r2, #0
 8016910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016912:	4b10      	ldr	r3, [pc, #64]	@ (8016954 <xTaskResumeAll+0x130>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d009      	beq.n	801692e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801691a:	2301      	movs	r3, #1
 801691c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801691e:	4b0f      	ldr	r3, [pc, #60]	@ (801695c <xTaskResumeAll+0x138>)
 8016920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016924:	601a      	str	r2, [r3, #0]
 8016926:	f3bf 8f4f 	dsb	sy
 801692a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801692e:	f001 fb4d 	bl	8017fcc <vPortExitCritical>

	return xAlreadyYielded;
 8016932:	68bb      	ldr	r3, [r7, #8]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3710      	adds	r7, #16
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	200063ac 	.word	0x200063ac
 8016940:	20006384 	.word	0x20006384
 8016944:	20006344 	.word	0x20006344
 8016948:	2000638c 	.word	0x2000638c
 801694c:	20005eb4 	.word	0x20005eb4
 8016950:	20005eb0 	.word	0x20005eb0
 8016954:	20006398 	.word	0x20006398
 8016958:	20006394 	.word	0x20006394
 801695c:	e000ed04 	.word	0xe000ed04

08016960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016960:	b480      	push	{r7}
 8016962:	b083      	sub	sp, #12
 8016964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016966:	4b05      	ldr	r3, [pc, #20]	@ (801697c <xTaskGetTickCount+0x1c>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801696c:	687b      	ldr	r3, [r7, #4]
}
 801696e:	4618      	mov	r0, r3
 8016970:	370c      	adds	r7, #12
 8016972:	46bd      	mov	sp, r7
 8016974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016978:	4770      	bx	lr
 801697a:	bf00      	nop
 801697c:	20006388 	.word	0x20006388

08016980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b086      	sub	sp, #24
 8016984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016986:	2300      	movs	r3, #0
 8016988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801698a:	4b4f      	ldr	r3, [pc, #316]	@ (8016ac8 <xTaskIncrementTick+0x148>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	f040 8090 	bne.w	8016ab4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016994:	4b4d      	ldr	r3, [pc, #308]	@ (8016acc <xTaskIncrementTick+0x14c>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	3301      	adds	r3, #1
 801699a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801699c:	4a4b      	ldr	r2, [pc, #300]	@ (8016acc <xTaskIncrementTick+0x14c>)
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d121      	bne.n	80169ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80169a8:	4b49      	ldr	r3, [pc, #292]	@ (8016ad0 <xTaskIncrementTick+0x150>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d00b      	beq.n	80169ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80169b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169b6:	f383 8811 	msr	BASEPRI, r3
 80169ba:	f3bf 8f6f 	isb	sy
 80169be:	f3bf 8f4f 	dsb	sy
 80169c2:	603b      	str	r3, [r7, #0]
}
 80169c4:	bf00      	nop
 80169c6:	bf00      	nop
 80169c8:	e7fd      	b.n	80169c6 <xTaskIncrementTick+0x46>
 80169ca:	4b41      	ldr	r3, [pc, #260]	@ (8016ad0 <xTaskIncrementTick+0x150>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	60fb      	str	r3, [r7, #12]
 80169d0:	4b40      	ldr	r3, [pc, #256]	@ (8016ad4 <xTaskIncrementTick+0x154>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	4a3e      	ldr	r2, [pc, #248]	@ (8016ad0 <xTaskIncrementTick+0x150>)
 80169d6:	6013      	str	r3, [r2, #0]
 80169d8:	4a3e      	ldr	r2, [pc, #248]	@ (8016ad4 <xTaskIncrementTick+0x154>)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	4b3e      	ldr	r3, [pc, #248]	@ (8016ad8 <xTaskIncrementTick+0x158>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	3301      	adds	r3, #1
 80169e4:	4a3c      	ldr	r2, [pc, #240]	@ (8016ad8 <xTaskIncrementTick+0x158>)
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	f000 fae2 	bl	8016fb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80169ec:	4b3b      	ldr	r3, [pc, #236]	@ (8016adc <xTaskIncrementTick+0x15c>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	693a      	ldr	r2, [r7, #16]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d349      	bcc.n	8016a8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80169f6:	4b36      	ldr	r3, [pc, #216]	@ (8016ad0 <xTaskIncrementTick+0x150>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d104      	bne.n	8016a0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a00:	4b36      	ldr	r3, [pc, #216]	@ (8016adc <xTaskIncrementTick+0x15c>)
 8016a02:	f04f 32ff 	mov.w	r2, #4294967295
 8016a06:	601a      	str	r2, [r3, #0]
					break;
 8016a08:	e03f      	b.n	8016a8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a0a:	4b31      	ldr	r3, [pc, #196]	@ (8016ad0 <xTaskIncrementTick+0x150>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	68db      	ldr	r3, [r3, #12]
 8016a10:	68db      	ldr	r3, [r3, #12]
 8016a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	685b      	ldr	r3, [r3, #4]
 8016a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016a1a:	693a      	ldr	r2, [r7, #16]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d203      	bcs.n	8016a2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016a22:	4a2e      	ldr	r2, [pc, #184]	@ (8016adc <xTaskIncrementTick+0x15c>)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016a28:	e02f      	b.n	8016a8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7fe fdcc 	bl	80155cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d004      	beq.n	8016a46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	3318      	adds	r3, #24
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7fe fdc3 	bl	80155cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a4a:	4b25      	ldr	r3, [pc, #148]	@ (8016ae0 <xTaskIncrementTick+0x160>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d903      	bls.n	8016a5a <xTaskIncrementTick+0xda>
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a56:	4a22      	ldr	r2, [pc, #136]	@ (8016ae0 <xTaskIncrementTick+0x160>)
 8016a58:	6013      	str	r3, [r2, #0]
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a5e:	4613      	mov	r3, r2
 8016a60:	009b      	lsls	r3, r3, #2
 8016a62:	4413      	add	r3, r2
 8016a64:	009b      	lsls	r3, r3, #2
 8016a66:	4a1f      	ldr	r2, [pc, #124]	@ (8016ae4 <xTaskIncrementTick+0x164>)
 8016a68:	441a      	add	r2, r3
 8016a6a:	68bb      	ldr	r3, [r7, #8]
 8016a6c:	3304      	adds	r3, #4
 8016a6e:	4619      	mov	r1, r3
 8016a70:	4610      	mov	r0, r2
 8016a72:	f7fe fd4e 	bl	8015512 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8016ae8 <xTaskIncrementTick+0x168>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d3b8      	bcc.n	80169f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8016a84:	2301      	movs	r3, #1
 8016a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a88:	e7b5      	b.n	80169f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016a8a:	4b17      	ldr	r3, [pc, #92]	@ (8016ae8 <xTaskIncrementTick+0x168>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a90:	4914      	ldr	r1, [pc, #80]	@ (8016ae4 <xTaskIncrementTick+0x164>)
 8016a92:	4613      	mov	r3, r2
 8016a94:	009b      	lsls	r3, r3, #2
 8016a96:	4413      	add	r3, r2
 8016a98:	009b      	lsls	r3, r3, #2
 8016a9a:	440b      	add	r3, r1
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	2b01      	cmp	r3, #1
 8016aa0:	d901      	bls.n	8016aa6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016aa6:	4b11      	ldr	r3, [pc, #68]	@ (8016aec <xTaskIncrementTick+0x16c>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d007      	beq.n	8016abe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8016aae:	2301      	movs	r3, #1
 8016ab0:	617b      	str	r3, [r7, #20]
 8016ab2:	e004      	b.n	8016abe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8016af0 <xTaskIncrementTick+0x170>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	4a0d      	ldr	r2, [pc, #52]	@ (8016af0 <xTaskIncrementTick+0x170>)
 8016abc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016abe:	697b      	ldr	r3, [r7, #20]
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3718      	adds	r7, #24
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	200063ac 	.word	0x200063ac
 8016acc:	20006388 	.word	0x20006388
 8016ad0:	2000633c 	.word	0x2000633c
 8016ad4:	20006340 	.word	0x20006340
 8016ad8:	2000639c 	.word	0x2000639c
 8016adc:	200063a4 	.word	0x200063a4
 8016ae0:	2000638c 	.word	0x2000638c
 8016ae4:	20005eb4 	.word	0x20005eb4
 8016ae8:	20005eb0 	.word	0x20005eb0
 8016aec:	20006398 	.word	0x20006398
 8016af0:	20006394 	.word	0x20006394

08016af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016af4:	b480      	push	{r7}
 8016af6:	b085      	sub	sp, #20
 8016af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016afa:	4b2b      	ldr	r3, [pc, #172]	@ (8016ba8 <vTaskSwitchContext+0xb4>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d003      	beq.n	8016b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016b02:	4b2a      	ldr	r3, [pc, #168]	@ (8016bac <vTaskSwitchContext+0xb8>)
 8016b04:	2201      	movs	r2, #1
 8016b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016b08:	e047      	b.n	8016b9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8016b0a:	4b28      	ldr	r3, [pc, #160]	@ (8016bac <vTaskSwitchContext+0xb8>)
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b10:	4b27      	ldr	r3, [pc, #156]	@ (8016bb0 <vTaskSwitchContext+0xbc>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	60fb      	str	r3, [r7, #12]
 8016b16:	e011      	b.n	8016b3c <vTaskSwitchContext+0x48>
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d10b      	bne.n	8016b36 <vTaskSwitchContext+0x42>
	__asm volatile
 8016b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b22:	f383 8811 	msr	BASEPRI, r3
 8016b26:	f3bf 8f6f 	isb	sy
 8016b2a:	f3bf 8f4f 	dsb	sy
 8016b2e:	607b      	str	r3, [r7, #4]
}
 8016b30:	bf00      	nop
 8016b32:	bf00      	nop
 8016b34:	e7fd      	b.n	8016b32 <vTaskSwitchContext+0x3e>
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	3b01      	subs	r3, #1
 8016b3a:	60fb      	str	r3, [r7, #12]
 8016b3c:	491d      	ldr	r1, [pc, #116]	@ (8016bb4 <vTaskSwitchContext+0xc0>)
 8016b3e:	68fa      	ldr	r2, [r7, #12]
 8016b40:	4613      	mov	r3, r2
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	4413      	add	r3, r2
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	440b      	add	r3, r1
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d0e3      	beq.n	8016b18 <vTaskSwitchContext+0x24>
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	4613      	mov	r3, r2
 8016b54:	009b      	lsls	r3, r3, #2
 8016b56:	4413      	add	r3, r2
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	4a16      	ldr	r2, [pc, #88]	@ (8016bb4 <vTaskSwitchContext+0xc0>)
 8016b5c:	4413      	add	r3, r2
 8016b5e:	60bb      	str	r3, [r7, #8]
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	685b      	ldr	r3, [r3, #4]
 8016b64:	685a      	ldr	r2, [r3, #4]
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	605a      	str	r2, [r3, #4]
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	685a      	ldr	r2, [r3, #4]
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	3308      	adds	r3, #8
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d104      	bne.n	8016b80 <vTaskSwitchContext+0x8c>
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	685b      	ldr	r3, [r3, #4]
 8016b7a:	685a      	ldr	r2, [r3, #4]
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	605a      	str	r2, [r3, #4]
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	68db      	ldr	r3, [r3, #12]
 8016b86:	4a0c      	ldr	r2, [pc, #48]	@ (8016bb8 <vTaskSwitchContext+0xc4>)
 8016b88:	6013      	str	r3, [r2, #0]
 8016b8a:	4a09      	ldr	r2, [pc, #36]	@ (8016bb0 <vTaskSwitchContext+0xbc>)
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016b90:	4b09      	ldr	r3, [pc, #36]	@ (8016bb8 <vTaskSwitchContext+0xc4>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	3354      	adds	r3, #84	@ 0x54
 8016b96:	4a09      	ldr	r2, [pc, #36]	@ (8016bbc <vTaskSwitchContext+0xc8>)
 8016b98:	6013      	str	r3, [r2, #0]
}
 8016b9a:	bf00      	nop
 8016b9c:	3714      	adds	r7, #20
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	200063ac 	.word	0x200063ac
 8016bac:	20006398 	.word	0x20006398
 8016bb0:	2000638c 	.word	0x2000638c
 8016bb4:	20005eb4 	.word	0x20005eb4
 8016bb8:	20005eb0 	.word	0x20005eb0
 8016bbc:	20000164 	.word	0x20000164

08016bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b084      	sub	sp, #16
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d10b      	bne.n	8016be8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8016bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bd4:	f383 8811 	msr	BASEPRI, r3
 8016bd8:	f3bf 8f6f 	isb	sy
 8016bdc:	f3bf 8f4f 	dsb	sy
 8016be0:	60fb      	str	r3, [r7, #12]
}
 8016be2:	bf00      	nop
 8016be4:	bf00      	nop
 8016be6:	e7fd      	b.n	8016be4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016be8:	4b07      	ldr	r3, [pc, #28]	@ (8016c08 <vTaskPlaceOnEventList+0x48>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	3318      	adds	r3, #24
 8016bee:	4619      	mov	r1, r3
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f7fe fcb2 	bl	801555a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016bf6:	2101      	movs	r1, #1
 8016bf8:	6838      	ldr	r0, [r7, #0]
 8016bfa:	f000 fc79 	bl	80174f0 <prvAddCurrentTaskToDelayedList>
}
 8016bfe:	bf00      	nop
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	bf00      	nop
 8016c08:	20005eb0 	.word	0x20005eb0

08016c0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b086      	sub	sp, #24
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	60f8      	str	r0, [r7, #12]
 8016c14:	60b9      	str	r1, [r7, #8]
 8016c16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d10b      	bne.n	8016c36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8016c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c22:	f383 8811 	msr	BASEPRI, r3
 8016c26:	f3bf 8f6f 	isb	sy
 8016c2a:	f3bf 8f4f 	dsb	sy
 8016c2e:	617b      	str	r3, [r7, #20]
}
 8016c30:	bf00      	nop
 8016c32:	bf00      	nop
 8016c34:	e7fd      	b.n	8016c32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016c36:	4b0a      	ldr	r3, [pc, #40]	@ (8016c60 <vTaskPlaceOnEventListRestricted+0x54>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	3318      	adds	r3, #24
 8016c3c:	4619      	mov	r1, r3
 8016c3e:	68f8      	ldr	r0, [r7, #12]
 8016c40:	f7fe fc67 	bl	8015512 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d002      	beq.n	8016c50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8016c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016c50:	6879      	ldr	r1, [r7, #4]
 8016c52:	68b8      	ldr	r0, [r7, #8]
 8016c54:	f000 fc4c 	bl	80174f0 <prvAddCurrentTaskToDelayedList>
	}
 8016c58:	bf00      	nop
 8016c5a:	3718      	adds	r7, #24
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	20005eb0 	.word	0x20005eb0

08016c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b086      	sub	sp, #24
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	68db      	ldr	r3, [r3, #12]
 8016c72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016c74:	693b      	ldr	r3, [r7, #16]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d10b      	bne.n	8016c92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8016c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c7e:	f383 8811 	msr	BASEPRI, r3
 8016c82:	f3bf 8f6f 	isb	sy
 8016c86:	f3bf 8f4f 	dsb	sy
 8016c8a:	60fb      	str	r3, [r7, #12]
}
 8016c8c:	bf00      	nop
 8016c8e:	bf00      	nop
 8016c90:	e7fd      	b.n	8016c8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	3318      	adds	r3, #24
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7fe fc98 	bl	80155cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8016d14 <xTaskRemoveFromEventList+0xb0>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d11d      	bne.n	8016ce0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	3304      	adds	r3, #4
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7fe fc8f 	bl	80155cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cb2:	4b19      	ldr	r3, [pc, #100]	@ (8016d18 <xTaskRemoveFromEventList+0xb4>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d903      	bls.n	8016cc2 <xTaskRemoveFromEventList+0x5e>
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cbe:	4a16      	ldr	r2, [pc, #88]	@ (8016d18 <xTaskRemoveFromEventList+0xb4>)
 8016cc0:	6013      	str	r3, [r2, #0]
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	4413      	add	r3, r2
 8016ccc:	009b      	lsls	r3, r3, #2
 8016cce:	4a13      	ldr	r2, [pc, #76]	@ (8016d1c <xTaskRemoveFromEventList+0xb8>)
 8016cd0:	441a      	add	r2, r3
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	3304      	adds	r3, #4
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	4610      	mov	r0, r2
 8016cda:	f7fe fc1a 	bl	8015512 <vListInsertEnd>
 8016cde:	e005      	b.n	8016cec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016ce0:	693b      	ldr	r3, [r7, #16]
 8016ce2:	3318      	adds	r3, #24
 8016ce4:	4619      	mov	r1, r3
 8016ce6:	480e      	ldr	r0, [pc, #56]	@ (8016d20 <xTaskRemoveFromEventList+0xbc>)
 8016ce8:	f7fe fc13 	bl	8015512 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8016d24 <xTaskRemoveFromEventList+0xc0>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	d905      	bls.n	8016d06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8016d28 <xTaskRemoveFromEventList+0xc4>)
 8016d00:	2201      	movs	r2, #1
 8016d02:	601a      	str	r2, [r3, #0]
 8016d04:	e001      	b.n	8016d0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8016d06:	2300      	movs	r3, #0
 8016d08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016d0a:	697b      	ldr	r3, [r7, #20]
}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	3718      	adds	r7, #24
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}
 8016d14:	200063ac 	.word	0x200063ac
 8016d18:	2000638c 	.word	0x2000638c
 8016d1c:	20005eb4 	.word	0x20005eb4
 8016d20:	20006344 	.word	0x20006344
 8016d24:	20005eb0 	.word	0x20005eb0
 8016d28:	20006398 	.word	0x20006398

08016d2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b083      	sub	sp, #12
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016d34:	4b06      	ldr	r3, [pc, #24]	@ (8016d50 <vTaskInternalSetTimeOutState+0x24>)
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016d3c:	4b05      	ldr	r3, [pc, #20]	@ (8016d54 <vTaskInternalSetTimeOutState+0x28>)
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	605a      	str	r2, [r3, #4]
}
 8016d44:	bf00      	nop
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4e:	4770      	bx	lr
 8016d50:	2000639c 	.word	0x2000639c
 8016d54:	20006388 	.word	0x20006388

08016d58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b088      	sub	sp, #32
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d10b      	bne.n	8016d80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8016d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d6c:	f383 8811 	msr	BASEPRI, r3
 8016d70:	f3bf 8f6f 	isb	sy
 8016d74:	f3bf 8f4f 	dsb	sy
 8016d78:	613b      	str	r3, [r7, #16]
}
 8016d7a:	bf00      	nop
 8016d7c:	bf00      	nop
 8016d7e:	e7fd      	b.n	8016d7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d10b      	bne.n	8016d9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8016d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d8a:	f383 8811 	msr	BASEPRI, r3
 8016d8e:	f3bf 8f6f 	isb	sy
 8016d92:	f3bf 8f4f 	dsb	sy
 8016d96:	60fb      	str	r3, [r7, #12]
}
 8016d98:	bf00      	nop
 8016d9a:	bf00      	nop
 8016d9c:	e7fd      	b.n	8016d9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8016d9e:	f001 f8e3 	bl	8017f68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016da2:	4b1d      	ldr	r3, [pc, #116]	@ (8016e18 <xTaskCheckForTimeOut+0xc0>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	69ba      	ldr	r2, [r7, #24]
 8016dae:	1ad3      	subs	r3, r2, r3
 8016db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dba:	d102      	bne.n	8016dc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	61fb      	str	r3, [r7, #28]
 8016dc0:	e023      	b.n	8016e0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681a      	ldr	r2, [r3, #0]
 8016dc6:	4b15      	ldr	r3, [pc, #84]	@ (8016e1c <xTaskCheckForTimeOut+0xc4>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d007      	beq.n	8016dde <xTaskCheckForTimeOut+0x86>
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	69ba      	ldr	r2, [r7, #24]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d302      	bcc.n	8016dde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016dd8:	2301      	movs	r3, #1
 8016dda:	61fb      	str	r3, [r7, #28]
 8016ddc:	e015      	b.n	8016e0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	697a      	ldr	r2, [r7, #20]
 8016de4:	429a      	cmp	r2, r3
 8016de6:	d20b      	bcs.n	8016e00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	681a      	ldr	r2, [r3, #0]
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	1ad2      	subs	r2, r2, r3
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f7ff ff99 	bl	8016d2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	61fb      	str	r3, [r7, #28]
 8016dfe:	e004      	b.n	8016e0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	2200      	movs	r2, #0
 8016e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016e06:	2301      	movs	r3, #1
 8016e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016e0a:	f001 f8df 	bl	8017fcc <vPortExitCritical>

	return xReturn;
 8016e0e:	69fb      	ldr	r3, [r7, #28]
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3720      	adds	r7, #32
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	20006388 	.word	0x20006388
 8016e1c:	2000639c 	.word	0x2000639c

08016e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016e20:	b480      	push	{r7}
 8016e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016e24:	4b03      	ldr	r3, [pc, #12]	@ (8016e34 <vTaskMissedYield+0x14>)
 8016e26:	2201      	movs	r2, #1
 8016e28:	601a      	str	r2, [r3, #0]
}
 8016e2a:	bf00      	nop
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr
 8016e34:	20006398 	.word	0x20006398

08016e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016e40:	f000 f852 	bl	8016ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016e44:	4b06      	ldr	r3, [pc, #24]	@ (8016e60 <prvIdleTask+0x28>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2b01      	cmp	r3, #1
 8016e4a:	d9f9      	bls.n	8016e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016e4c:	4b05      	ldr	r3, [pc, #20]	@ (8016e64 <prvIdleTask+0x2c>)
 8016e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016e52:	601a      	str	r2, [r3, #0]
 8016e54:	f3bf 8f4f 	dsb	sy
 8016e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016e5c:	e7f0      	b.n	8016e40 <prvIdleTask+0x8>
 8016e5e:	bf00      	nop
 8016e60:	20005eb4 	.word	0x20005eb4
 8016e64:	e000ed04 	.word	0xe000ed04

08016e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016e6e:	2300      	movs	r3, #0
 8016e70:	607b      	str	r3, [r7, #4]
 8016e72:	e00c      	b.n	8016e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	4613      	mov	r3, r2
 8016e78:	009b      	lsls	r3, r3, #2
 8016e7a:	4413      	add	r3, r2
 8016e7c:	009b      	lsls	r3, r3, #2
 8016e7e:	4a12      	ldr	r2, [pc, #72]	@ (8016ec8 <prvInitialiseTaskLists+0x60>)
 8016e80:	4413      	add	r3, r2
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7fe fb18 	bl	80154b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	607b      	str	r3, [r7, #4]
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2b37      	cmp	r3, #55	@ 0x37
 8016e92:	d9ef      	bls.n	8016e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016e94:	480d      	ldr	r0, [pc, #52]	@ (8016ecc <prvInitialiseTaskLists+0x64>)
 8016e96:	f7fe fb0f 	bl	80154b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016e9a:	480d      	ldr	r0, [pc, #52]	@ (8016ed0 <prvInitialiseTaskLists+0x68>)
 8016e9c:	f7fe fb0c 	bl	80154b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016ea0:	480c      	ldr	r0, [pc, #48]	@ (8016ed4 <prvInitialiseTaskLists+0x6c>)
 8016ea2:	f7fe fb09 	bl	80154b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016ea6:	480c      	ldr	r0, [pc, #48]	@ (8016ed8 <prvInitialiseTaskLists+0x70>)
 8016ea8:	f7fe fb06 	bl	80154b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016eac:	480b      	ldr	r0, [pc, #44]	@ (8016edc <prvInitialiseTaskLists+0x74>)
 8016eae:	f7fe fb03 	bl	80154b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8016ee0 <prvInitialiseTaskLists+0x78>)
 8016eb4:	4a05      	ldr	r2, [pc, #20]	@ (8016ecc <prvInitialiseTaskLists+0x64>)
 8016eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8016ee4 <prvInitialiseTaskLists+0x7c>)
 8016eba:	4a05      	ldr	r2, [pc, #20]	@ (8016ed0 <prvInitialiseTaskLists+0x68>)
 8016ebc:	601a      	str	r2, [r3, #0]
}
 8016ebe:	bf00      	nop
 8016ec0:	3708      	adds	r7, #8
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	bd80      	pop	{r7, pc}
 8016ec6:	bf00      	nop
 8016ec8:	20005eb4 	.word	0x20005eb4
 8016ecc:	20006314 	.word	0x20006314
 8016ed0:	20006328 	.word	0x20006328
 8016ed4:	20006344 	.word	0x20006344
 8016ed8:	20006358 	.word	0x20006358
 8016edc:	20006370 	.word	0x20006370
 8016ee0:	2000633c 	.word	0x2000633c
 8016ee4:	20006340 	.word	0x20006340

08016ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016eee:	e019      	b.n	8016f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016ef0:	f001 f83a 	bl	8017f68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ef4:	4b10      	ldr	r3, [pc, #64]	@ (8016f38 <prvCheckTasksWaitingTermination+0x50>)
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	68db      	ldr	r3, [r3, #12]
 8016efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	3304      	adds	r3, #4
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7fe fb63 	bl	80155cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016f06:	4b0d      	ldr	r3, [pc, #52]	@ (8016f3c <prvCheckTasksWaitingTermination+0x54>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8016f3c <prvCheckTasksWaitingTermination+0x54>)
 8016f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016f10:	4b0b      	ldr	r3, [pc, #44]	@ (8016f40 <prvCheckTasksWaitingTermination+0x58>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	3b01      	subs	r3, #1
 8016f16:	4a0a      	ldr	r2, [pc, #40]	@ (8016f40 <prvCheckTasksWaitingTermination+0x58>)
 8016f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016f1a:	f001 f857 	bl	8017fcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f000 f810 	bl	8016f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016f24:	4b06      	ldr	r3, [pc, #24]	@ (8016f40 <prvCheckTasksWaitingTermination+0x58>)
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d1e1      	bne.n	8016ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016f2c:	bf00      	nop
 8016f2e:	bf00      	nop
 8016f30:	3708      	adds	r7, #8
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
 8016f36:	bf00      	nop
 8016f38:	20006358 	.word	0x20006358
 8016f3c:	20006384 	.word	0x20006384
 8016f40:	2000636c 	.word	0x2000636c

08016f44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b084      	sub	sp, #16
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	3354      	adds	r3, #84	@ 0x54
 8016f50:	4618      	mov	r0, r3
 8016f52:	f005 f927 	bl	801c1a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d108      	bne.n	8016f72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f64:	4618      	mov	r0, r3
 8016f66:	f001 f9ef 	bl	8018348 <vPortFree>
				vPortFree( pxTCB );
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f001 f9ec 	bl	8018348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016f70:	e019      	b.n	8016fa6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016f78:	2b01      	cmp	r3, #1
 8016f7a:	d103      	bne.n	8016f84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f001 f9e3 	bl	8018348 <vPortFree>
	}
 8016f82:	e010      	b.n	8016fa6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016f8a:	2b02      	cmp	r3, #2
 8016f8c:	d00b      	beq.n	8016fa6 <prvDeleteTCB+0x62>
	__asm volatile
 8016f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f92:	f383 8811 	msr	BASEPRI, r3
 8016f96:	f3bf 8f6f 	isb	sy
 8016f9a:	f3bf 8f4f 	dsb	sy
 8016f9e:	60fb      	str	r3, [r7, #12]
}
 8016fa0:	bf00      	nop
 8016fa2:	bf00      	nop
 8016fa4:	e7fd      	b.n	8016fa2 <prvDeleteTCB+0x5e>
	}
 8016fa6:	bf00      	nop
 8016fa8:	3710      	adds	r7, #16
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
	...

08016fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016fb0:	b480      	push	{r7}
 8016fb2:	b083      	sub	sp, #12
 8016fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8016fe8 <prvResetNextTaskUnblockTime+0x38>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d104      	bne.n	8016fca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8016fec <prvResetNextTaskUnblockTime+0x3c>)
 8016fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8016fc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016fc8:	e008      	b.n	8016fdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fca:	4b07      	ldr	r3, [pc, #28]	@ (8016fe8 <prvResetNextTaskUnblockTime+0x38>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	68db      	ldr	r3, [r3, #12]
 8016fd0:	68db      	ldr	r3, [r3, #12]
 8016fd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	4a04      	ldr	r2, [pc, #16]	@ (8016fec <prvResetNextTaskUnblockTime+0x3c>)
 8016fda:	6013      	str	r3, [r2, #0]
}
 8016fdc:	bf00      	nop
 8016fde:	370c      	adds	r7, #12
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe6:	4770      	bx	lr
 8016fe8:	2000633c 	.word	0x2000633c
 8016fec:	200063a4 	.word	0x200063a4

08016ff0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016ff0:	b480      	push	{r7}
 8016ff2:	b083      	sub	sp, #12
 8016ff4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016ff6:	4b05      	ldr	r3, [pc, #20]	@ (801700c <xTaskGetCurrentTaskHandle+0x1c>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016ffc:	687b      	ldr	r3, [r7, #4]
	}
 8016ffe:	4618      	mov	r0, r3
 8017000:	370c      	adds	r7, #12
 8017002:	46bd      	mov	sp, r7
 8017004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop
 801700c:	20005eb0 	.word	0x20005eb0

08017010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017016:	4b0b      	ldr	r3, [pc, #44]	@ (8017044 <xTaskGetSchedulerState+0x34>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d102      	bne.n	8017024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801701e:	2301      	movs	r3, #1
 8017020:	607b      	str	r3, [r7, #4]
 8017022:	e008      	b.n	8017036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017024:	4b08      	ldr	r3, [pc, #32]	@ (8017048 <xTaskGetSchedulerState+0x38>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d102      	bne.n	8017032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801702c:	2302      	movs	r3, #2
 801702e:	607b      	str	r3, [r7, #4]
 8017030:	e001      	b.n	8017036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017032:	2300      	movs	r3, #0
 8017034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017036:	687b      	ldr	r3, [r7, #4]
	}
 8017038:	4618      	mov	r0, r3
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017042:	4770      	bx	lr
 8017044:	20006390 	.word	0x20006390
 8017048:	200063ac 	.word	0x200063ac

0801704c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801704c:	b580      	push	{r7, lr}
 801704e:	b084      	sub	sp, #16
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017058:	2300      	movs	r3, #0
 801705a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d051      	beq.n	8017106 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017066:	4b2a      	ldr	r3, [pc, #168]	@ (8017110 <xTaskPriorityInherit+0xc4>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801706c:	429a      	cmp	r2, r3
 801706e:	d241      	bcs.n	80170f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	699b      	ldr	r3, [r3, #24]
 8017074:	2b00      	cmp	r3, #0
 8017076:	db06      	blt.n	8017086 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017078:	4b25      	ldr	r3, [pc, #148]	@ (8017110 <xTaskPriorityInherit+0xc4>)
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801707e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	6959      	ldr	r1, [r3, #20]
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801708e:	4613      	mov	r3, r2
 8017090:	009b      	lsls	r3, r3, #2
 8017092:	4413      	add	r3, r2
 8017094:	009b      	lsls	r3, r3, #2
 8017096:	4a1f      	ldr	r2, [pc, #124]	@ (8017114 <xTaskPriorityInherit+0xc8>)
 8017098:	4413      	add	r3, r2
 801709a:	4299      	cmp	r1, r3
 801709c:	d122      	bne.n	80170e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801709e:	68bb      	ldr	r3, [r7, #8]
 80170a0:	3304      	adds	r3, #4
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7fe fa92 	bl	80155cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80170a8:	4b19      	ldr	r3, [pc, #100]	@ (8017110 <xTaskPriorityInherit+0xc4>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80170b6:	4b18      	ldr	r3, [pc, #96]	@ (8017118 <xTaskPriorityInherit+0xcc>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d903      	bls.n	80170c6 <xTaskPriorityInherit+0x7a>
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170c2:	4a15      	ldr	r2, [pc, #84]	@ (8017118 <xTaskPriorityInherit+0xcc>)
 80170c4:	6013      	str	r3, [r2, #0]
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80170ca:	4613      	mov	r3, r2
 80170cc:	009b      	lsls	r3, r3, #2
 80170ce:	4413      	add	r3, r2
 80170d0:	009b      	lsls	r3, r3, #2
 80170d2:	4a10      	ldr	r2, [pc, #64]	@ (8017114 <xTaskPriorityInherit+0xc8>)
 80170d4:	441a      	add	r2, r3
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	3304      	adds	r3, #4
 80170da:	4619      	mov	r1, r3
 80170dc:	4610      	mov	r0, r2
 80170de:	f7fe fa18 	bl	8015512 <vListInsertEnd>
 80170e2:	e004      	b.n	80170ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80170e4:	4b0a      	ldr	r3, [pc, #40]	@ (8017110 <xTaskPriorityInherit+0xc4>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80170ee:	2301      	movs	r3, #1
 80170f0:	60fb      	str	r3, [r7, #12]
 80170f2:	e008      	b.n	8017106 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170f8:	4b05      	ldr	r3, [pc, #20]	@ (8017110 <xTaskPriorityInherit+0xc4>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170fe:	429a      	cmp	r2, r3
 8017100:	d201      	bcs.n	8017106 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017102:	2301      	movs	r3, #1
 8017104:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017106:	68fb      	ldr	r3, [r7, #12]
	}
 8017108:	4618      	mov	r0, r3
 801710a:	3710      	adds	r7, #16
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}
 8017110:	20005eb0 	.word	0x20005eb0
 8017114:	20005eb4 	.word	0x20005eb4
 8017118:	2000638c 	.word	0x2000638c

0801711c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801711c:	b580      	push	{r7, lr}
 801711e:	b086      	sub	sp, #24
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017128:	2300      	movs	r3, #0
 801712a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d058      	beq.n	80171e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017132:	4b2f      	ldr	r3, [pc, #188]	@ (80171f0 <xTaskPriorityDisinherit+0xd4>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	693a      	ldr	r2, [r7, #16]
 8017138:	429a      	cmp	r2, r3
 801713a:	d00b      	beq.n	8017154 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017140:	f383 8811 	msr	BASEPRI, r3
 8017144:	f3bf 8f6f 	isb	sy
 8017148:	f3bf 8f4f 	dsb	sy
 801714c:	60fb      	str	r3, [r7, #12]
}
 801714e:	bf00      	nop
 8017150:	bf00      	nop
 8017152:	e7fd      	b.n	8017150 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017158:	2b00      	cmp	r3, #0
 801715a:	d10b      	bne.n	8017174 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017160:	f383 8811 	msr	BASEPRI, r3
 8017164:	f3bf 8f6f 	isb	sy
 8017168:	f3bf 8f4f 	dsb	sy
 801716c:	60bb      	str	r3, [r7, #8]
}
 801716e:	bf00      	nop
 8017170:	bf00      	nop
 8017172:	e7fd      	b.n	8017170 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017178:	1e5a      	subs	r2, r3, #1
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017186:	429a      	cmp	r2, r3
 8017188:	d02c      	beq.n	80171e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801718e:	2b00      	cmp	r3, #0
 8017190:	d128      	bne.n	80171e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	3304      	adds	r3, #4
 8017196:	4618      	mov	r0, r3
 8017198:	f7fe fa18 	bl	80155cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171b4:	4b0f      	ldr	r3, [pc, #60]	@ (80171f4 <xTaskPriorityDisinherit+0xd8>)
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d903      	bls.n	80171c4 <xTaskPriorityDisinherit+0xa8>
 80171bc:	693b      	ldr	r3, [r7, #16]
 80171be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171c0:	4a0c      	ldr	r2, [pc, #48]	@ (80171f4 <xTaskPriorityDisinherit+0xd8>)
 80171c2:	6013      	str	r3, [r2, #0]
 80171c4:	693b      	ldr	r3, [r7, #16]
 80171c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171c8:	4613      	mov	r3, r2
 80171ca:	009b      	lsls	r3, r3, #2
 80171cc:	4413      	add	r3, r2
 80171ce:	009b      	lsls	r3, r3, #2
 80171d0:	4a09      	ldr	r2, [pc, #36]	@ (80171f8 <xTaskPriorityDisinherit+0xdc>)
 80171d2:	441a      	add	r2, r3
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	3304      	adds	r3, #4
 80171d8:	4619      	mov	r1, r3
 80171da:	4610      	mov	r0, r2
 80171dc:	f7fe f999 	bl	8015512 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80171e0:	2301      	movs	r3, #1
 80171e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80171e4:	697b      	ldr	r3, [r7, #20]
	}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3718      	adds	r7, #24
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}
 80171ee:	bf00      	nop
 80171f0:	20005eb0 	.word	0x20005eb0
 80171f4:	2000638c 	.word	0x2000638c
 80171f8:	20005eb4 	.word	0x20005eb4

080171fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b088      	sub	sp, #32
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801720a:	2301      	movs	r3, #1
 801720c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d06c      	beq.n	80172ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017218:	2b00      	cmp	r3, #0
 801721a:	d10b      	bne.n	8017234 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017220:	f383 8811 	msr	BASEPRI, r3
 8017224:	f3bf 8f6f 	isb	sy
 8017228:	f3bf 8f4f 	dsb	sy
 801722c:	60fb      	str	r3, [r7, #12]
}
 801722e:	bf00      	nop
 8017230:	bf00      	nop
 8017232:	e7fd      	b.n	8017230 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017234:	69bb      	ldr	r3, [r7, #24]
 8017236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	429a      	cmp	r2, r3
 801723c:	d902      	bls.n	8017244 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	61fb      	str	r3, [r7, #28]
 8017242:	e002      	b.n	801724a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017248:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801724a:	69bb      	ldr	r3, [r7, #24]
 801724c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801724e:	69fa      	ldr	r2, [r7, #28]
 8017250:	429a      	cmp	r2, r3
 8017252:	d04c      	beq.n	80172ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017254:	69bb      	ldr	r3, [r7, #24]
 8017256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017258:	697a      	ldr	r2, [r7, #20]
 801725a:	429a      	cmp	r2, r3
 801725c:	d147      	bne.n	80172ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801725e:	4b26      	ldr	r3, [pc, #152]	@ (80172f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	69ba      	ldr	r2, [r7, #24]
 8017264:	429a      	cmp	r2, r3
 8017266:	d10b      	bne.n	8017280 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8017268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801726c:	f383 8811 	msr	BASEPRI, r3
 8017270:	f3bf 8f6f 	isb	sy
 8017274:	f3bf 8f4f 	dsb	sy
 8017278:	60bb      	str	r3, [r7, #8]
}
 801727a:	bf00      	nop
 801727c:	bf00      	nop
 801727e:	e7fd      	b.n	801727c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017280:	69bb      	ldr	r3, [r7, #24]
 8017282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017284:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017286:	69bb      	ldr	r3, [r7, #24]
 8017288:	69fa      	ldr	r2, [r7, #28]
 801728a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	699b      	ldr	r3, [r3, #24]
 8017290:	2b00      	cmp	r3, #0
 8017292:	db04      	blt.n	801729e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017294:	69fb      	ldr	r3, [r7, #28]
 8017296:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801729a:	69bb      	ldr	r3, [r7, #24]
 801729c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801729e:	69bb      	ldr	r3, [r7, #24]
 80172a0:	6959      	ldr	r1, [r3, #20]
 80172a2:	693a      	ldr	r2, [r7, #16]
 80172a4:	4613      	mov	r3, r2
 80172a6:	009b      	lsls	r3, r3, #2
 80172a8:	4413      	add	r3, r2
 80172aa:	009b      	lsls	r3, r3, #2
 80172ac:	4a13      	ldr	r2, [pc, #76]	@ (80172fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80172ae:	4413      	add	r3, r2
 80172b0:	4299      	cmp	r1, r3
 80172b2:	d11c      	bne.n	80172ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172b4:	69bb      	ldr	r3, [r7, #24]
 80172b6:	3304      	adds	r3, #4
 80172b8:	4618      	mov	r0, r3
 80172ba:	f7fe f987 	bl	80155cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80172be:	69bb      	ldr	r3, [r7, #24]
 80172c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80172c2:	4b0f      	ldr	r3, [pc, #60]	@ (8017300 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d903      	bls.n	80172d2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80172ca:	69bb      	ldr	r3, [r7, #24]
 80172cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172ce:	4a0c      	ldr	r2, [pc, #48]	@ (8017300 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80172d0:	6013      	str	r3, [r2, #0]
 80172d2:	69bb      	ldr	r3, [r7, #24]
 80172d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80172d6:	4613      	mov	r3, r2
 80172d8:	009b      	lsls	r3, r3, #2
 80172da:	4413      	add	r3, r2
 80172dc:	009b      	lsls	r3, r3, #2
 80172de:	4a07      	ldr	r2, [pc, #28]	@ (80172fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80172e0:	441a      	add	r2, r3
 80172e2:	69bb      	ldr	r3, [r7, #24]
 80172e4:	3304      	adds	r3, #4
 80172e6:	4619      	mov	r1, r3
 80172e8:	4610      	mov	r0, r2
 80172ea:	f7fe f912 	bl	8015512 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80172ee:	bf00      	nop
 80172f0:	3720      	adds	r7, #32
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	20005eb0 	.word	0x20005eb0
 80172fc:	20005eb4 	.word	0x20005eb4
 8017300:	2000638c 	.word	0x2000638c

08017304 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017304:	b480      	push	{r7}
 8017306:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017308:	4b07      	ldr	r3, [pc, #28]	@ (8017328 <pvTaskIncrementMutexHeldCount+0x24>)
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d004      	beq.n	801731a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017310:	4b05      	ldr	r3, [pc, #20]	@ (8017328 <pvTaskIncrementMutexHeldCount+0x24>)
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017316:	3201      	adds	r2, #1
 8017318:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801731a:	4b03      	ldr	r3, [pc, #12]	@ (8017328 <pvTaskIncrementMutexHeldCount+0x24>)
 801731c:	681b      	ldr	r3, [r3, #0]
	}
 801731e:	4618      	mov	r0, r3
 8017320:	46bd      	mov	sp, r7
 8017322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017326:	4770      	bx	lr
 8017328:	20005eb0 	.word	0x20005eb0

0801732c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8017336:	f000 fe17 	bl	8017f68 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801733a:	4b20      	ldr	r3, [pc, #128]	@ (80173bc <ulTaskNotifyTake+0x90>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017342:	2b00      	cmp	r3, #0
 8017344:	d113      	bne.n	801736e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017346:	4b1d      	ldr	r3, [pc, #116]	@ (80173bc <ulTaskNotifyTake+0x90>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2201      	movs	r2, #1
 801734c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d00b      	beq.n	801736e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017356:	2101      	movs	r1, #1
 8017358:	6838      	ldr	r0, [r7, #0]
 801735a:	f000 f8c9 	bl	80174f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801735e:	4b18      	ldr	r3, [pc, #96]	@ (80173c0 <ulTaskNotifyTake+0x94>)
 8017360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017364:	601a      	str	r2, [r3, #0]
 8017366:	f3bf 8f4f 	dsb	sy
 801736a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801736e:	f000 fe2d 	bl	8017fcc <vPortExitCritical>

		taskENTER_CRITICAL();
 8017372:	f000 fdf9 	bl	8017f68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8017376:	4b11      	ldr	r3, [pc, #68]	@ (80173bc <ulTaskNotifyTake+0x90>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801737e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d00e      	beq.n	80173a4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d005      	beq.n	8017398 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801738c:	4b0b      	ldr	r3, [pc, #44]	@ (80173bc <ulTaskNotifyTake+0x90>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	2200      	movs	r2, #0
 8017392:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8017396:	e005      	b.n	80173a4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8017398:	4b08      	ldr	r3, [pc, #32]	@ (80173bc <ulTaskNotifyTake+0x90>)
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	3a01      	subs	r2, #1
 80173a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80173a4:	4b05      	ldr	r3, [pc, #20]	@ (80173bc <ulTaskNotifyTake+0x90>)
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	2200      	movs	r2, #0
 80173aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80173ae:	f000 fe0d 	bl	8017fcc <vPortExitCritical>

		return ulReturn;
 80173b2:	68fb      	ldr	r3, [r7, #12]
	}
 80173b4:	4618      	mov	r0, r3
 80173b6:	3710      	adds	r7, #16
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	20005eb0 	.word	0x20005eb0
 80173c0:	e000ed04 	.word	0xe000ed04

080173c4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b08a      	sub	sp, #40	@ 0x28
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d10b      	bne.n	80173ec <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80173d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173d8:	f383 8811 	msr	BASEPRI, r3
 80173dc:	f3bf 8f6f 	isb	sy
 80173e0:	f3bf 8f4f 	dsb	sy
 80173e4:	61bb      	str	r3, [r7, #24]
}
 80173e6:	bf00      	nop
 80173e8:	bf00      	nop
 80173ea:	e7fd      	b.n	80173e8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80173ec:	f000 fe9c 	bl	8018128 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80173f4:	f3ef 8211 	mrs	r2, BASEPRI
 80173f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173fc:	f383 8811 	msr	BASEPRI, r3
 8017400:	f3bf 8f6f 	isb	sy
 8017404:	f3bf 8f4f 	dsb	sy
 8017408:	617a      	str	r2, [r7, #20]
 801740a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801740c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801740e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017412:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8017416:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801741a:	2202      	movs	r2, #2
 801741c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8017420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017426:	1c5a      	adds	r2, r3, #1
 8017428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801742e:	7ffb      	ldrb	r3, [r7, #31]
 8017430:	2b01      	cmp	r3, #1
 8017432:	d147      	bne.n	80174c4 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017438:	2b00      	cmp	r3, #0
 801743a:	d00b      	beq.n	8017454 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 801743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017440:	f383 8811 	msr	BASEPRI, r3
 8017444:	f3bf 8f6f 	isb	sy
 8017448:	f3bf 8f4f 	dsb	sy
 801744c:	60fb      	str	r3, [r7, #12]
}
 801744e:	bf00      	nop
 8017450:	bf00      	nop
 8017452:	e7fd      	b.n	8017450 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017454:	4b20      	ldr	r3, [pc, #128]	@ (80174d8 <vTaskNotifyGiveFromISR+0x114>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d11d      	bne.n	8017498 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801745e:	3304      	adds	r3, #4
 8017460:	4618      	mov	r0, r3
 8017462:	f7fe f8b3 	bl	80155cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801746a:	4b1c      	ldr	r3, [pc, #112]	@ (80174dc <vTaskNotifyGiveFromISR+0x118>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	429a      	cmp	r2, r3
 8017470:	d903      	bls.n	801747a <vTaskNotifyGiveFromISR+0xb6>
 8017472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017476:	4a19      	ldr	r2, [pc, #100]	@ (80174dc <vTaskNotifyGiveFromISR+0x118>)
 8017478:	6013      	str	r3, [r2, #0]
 801747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801747c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801747e:	4613      	mov	r3, r2
 8017480:	009b      	lsls	r3, r3, #2
 8017482:	4413      	add	r3, r2
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	4a16      	ldr	r2, [pc, #88]	@ (80174e0 <vTaskNotifyGiveFromISR+0x11c>)
 8017488:	441a      	add	r2, r3
 801748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801748c:	3304      	adds	r3, #4
 801748e:	4619      	mov	r1, r3
 8017490:	4610      	mov	r0, r2
 8017492:	f7fe f83e 	bl	8015512 <vListInsertEnd>
 8017496:	e005      	b.n	80174a4 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801749a:	3318      	adds	r3, #24
 801749c:	4619      	mov	r1, r3
 801749e:	4811      	ldr	r0, [pc, #68]	@ (80174e4 <vTaskNotifyGiveFromISR+0x120>)
 80174a0:	f7fe f837 	bl	8015512 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80174a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80174a8:	4b0f      	ldr	r3, [pc, #60]	@ (80174e8 <vTaskNotifyGiveFromISR+0x124>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d908      	bls.n	80174c4 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d002      	beq.n	80174be <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	2201      	movs	r2, #1
 80174bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80174be:	4b0b      	ldr	r3, [pc, #44]	@ (80174ec <vTaskNotifyGiveFromISR+0x128>)
 80174c0:	2201      	movs	r2, #1
 80174c2:	601a      	str	r2, [r3, #0]
 80174c4:	6a3b      	ldr	r3, [r7, #32]
 80174c6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80174c8:	68bb      	ldr	r3, [r7, #8]
 80174ca:	f383 8811 	msr	BASEPRI, r3
}
 80174ce:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80174d0:	bf00      	nop
 80174d2:	3728      	adds	r7, #40	@ 0x28
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}
 80174d8:	200063ac 	.word	0x200063ac
 80174dc:	2000638c 	.word	0x2000638c
 80174e0:	20005eb4 	.word	0x20005eb4
 80174e4:	20006344 	.word	0x20006344
 80174e8:	20005eb0 	.word	0x20005eb0
 80174ec:	20006398 	.word	0x20006398

080174f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80174fa:	4b21      	ldr	r3, [pc, #132]	@ (8017580 <prvAddCurrentTaskToDelayedList+0x90>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017500:	4b20      	ldr	r3, [pc, #128]	@ (8017584 <prvAddCurrentTaskToDelayedList+0x94>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	3304      	adds	r3, #4
 8017506:	4618      	mov	r0, r3
 8017508:	f7fe f860 	bl	80155cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017512:	d10a      	bne.n	801752a <prvAddCurrentTaskToDelayedList+0x3a>
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d007      	beq.n	801752a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801751a:	4b1a      	ldr	r3, [pc, #104]	@ (8017584 <prvAddCurrentTaskToDelayedList+0x94>)
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	3304      	adds	r3, #4
 8017520:	4619      	mov	r1, r3
 8017522:	4819      	ldr	r0, [pc, #100]	@ (8017588 <prvAddCurrentTaskToDelayedList+0x98>)
 8017524:	f7fd fff5 	bl	8015512 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017528:	e026      	b.n	8017578 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801752a:	68fa      	ldr	r2, [r7, #12]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	4413      	add	r3, r2
 8017530:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017532:	4b14      	ldr	r3, [pc, #80]	@ (8017584 <prvAddCurrentTaskToDelayedList+0x94>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	68ba      	ldr	r2, [r7, #8]
 8017538:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801753a:	68ba      	ldr	r2, [r7, #8]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	429a      	cmp	r2, r3
 8017540:	d209      	bcs.n	8017556 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017542:	4b12      	ldr	r3, [pc, #72]	@ (801758c <prvAddCurrentTaskToDelayedList+0x9c>)
 8017544:	681a      	ldr	r2, [r3, #0]
 8017546:	4b0f      	ldr	r3, [pc, #60]	@ (8017584 <prvAddCurrentTaskToDelayedList+0x94>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	3304      	adds	r3, #4
 801754c:	4619      	mov	r1, r3
 801754e:	4610      	mov	r0, r2
 8017550:	f7fe f803 	bl	801555a <vListInsert>
}
 8017554:	e010      	b.n	8017578 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017556:	4b0e      	ldr	r3, [pc, #56]	@ (8017590 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017558:	681a      	ldr	r2, [r3, #0]
 801755a:	4b0a      	ldr	r3, [pc, #40]	@ (8017584 <prvAddCurrentTaskToDelayedList+0x94>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	3304      	adds	r3, #4
 8017560:	4619      	mov	r1, r3
 8017562:	4610      	mov	r0, r2
 8017564:	f7fd fff9 	bl	801555a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017568:	4b0a      	ldr	r3, [pc, #40]	@ (8017594 <prvAddCurrentTaskToDelayedList+0xa4>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	68ba      	ldr	r2, [r7, #8]
 801756e:	429a      	cmp	r2, r3
 8017570:	d202      	bcs.n	8017578 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017572:	4a08      	ldr	r2, [pc, #32]	@ (8017594 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	6013      	str	r3, [r2, #0]
}
 8017578:	bf00      	nop
 801757a:	3710      	adds	r7, #16
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}
 8017580:	20006388 	.word	0x20006388
 8017584:	20005eb0 	.word	0x20005eb0
 8017588:	20006370 	.word	0x20006370
 801758c:	20006340 	.word	0x20006340
 8017590:	2000633c 	.word	0x2000633c
 8017594:	200063a4 	.word	0x200063a4

08017598 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b08a      	sub	sp, #40	@ 0x28
 801759c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801759e:	2300      	movs	r3, #0
 80175a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80175a2:	f000 fb71 	bl	8017c88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80175a6:	4b1d      	ldr	r3, [pc, #116]	@ (801761c <xTimerCreateTimerTask+0x84>)
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d021      	beq.n	80175f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80175ae:	2300      	movs	r3, #0
 80175b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80175b2:	2300      	movs	r3, #0
 80175b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80175b6:	1d3a      	adds	r2, r7, #4
 80175b8:	f107 0108 	add.w	r1, r7, #8
 80175bc:	f107 030c 	add.w	r3, r7, #12
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7fd ff5f 	bl	8015484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80175c6:	6879      	ldr	r1, [r7, #4]
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	68fa      	ldr	r2, [r7, #12]
 80175cc:	9202      	str	r2, [sp, #8]
 80175ce:	9301      	str	r3, [sp, #4]
 80175d0:	2302      	movs	r3, #2
 80175d2:	9300      	str	r3, [sp, #0]
 80175d4:	2300      	movs	r3, #0
 80175d6:	460a      	mov	r2, r1
 80175d8:	4911      	ldr	r1, [pc, #68]	@ (8017620 <xTimerCreateTimerTask+0x88>)
 80175da:	4812      	ldr	r0, [pc, #72]	@ (8017624 <xTimerCreateTimerTask+0x8c>)
 80175dc:	f7fe feb0 	bl	8016340 <xTaskCreateStatic>
 80175e0:	4603      	mov	r3, r0
 80175e2:	4a11      	ldr	r2, [pc, #68]	@ (8017628 <xTimerCreateTimerTask+0x90>)
 80175e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80175e6:	4b10      	ldr	r3, [pc, #64]	@ (8017628 <xTimerCreateTimerTask+0x90>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d001      	beq.n	80175f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80175ee:	2301      	movs	r3, #1
 80175f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d10b      	bne.n	8017610 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80175f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175fc:	f383 8811 	msr	BASEPRI, r3
 8017600:	f3bf 8f6f 	isb	sy
 8017604:	f3bf 8f4f 	dsb	sy
 8017608:	613b      	str	r3, [r7, #16]
}
 801760a:	bf00      	nop
 801760c:	bf00      	nop
 801760e:	e7fd      	b.n	801760c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017610:	697b      	ldr	r3, [r7, #20]
}
 8017612:	4618      	mov	r0, r3
 8017614:	3718      	adds	r7, #24
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}
 801761a:	bf00      	nop
 801761c:	200063e0 	.word	0x200063e0
 8017620:	08021ff0 	.word	0x08021ff0
 8017624:	08017821 	.word	0x08017821
 8017628:	200063e4 	.word	0x200063e4

0801762c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801762c:	b580      	push	{r7, lr}
 801762e:	b088      	sub	sp, #32
 8017630:	af02      	add	r7, sp, #8
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
 8017638:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801763a:	202c      	movs	r0, #44	@ 0x2c
 801763c:	f000 fdb6 	bl	80181ac <pvPortMalloc>
 8017640:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d00d      	beq.n	8017664 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	2200      	movs	r2, #0
 801764c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	9301      	str	r3, [sp, #4]
 8017654:	6a3b      	ldr	r3, [r7, #32]
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	687a      	ldr	r2, [r7, #4]
 801765c:	68b9      	ldr	r1, [r7, #8]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f000 f805 	bl	801766e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017664:	697b      	ldr	r3, [r7, #20]
	}
 8017666:	4618      	mov	r0, r3
 8017668:	3718      	adds	r7, #24
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}

0801766e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801766e:	b580      	push	{r7, lr}
 8017670:	b086      	sub	sp, #24
 8017672:	af00      	add	r7, sp, #0
 8017674:	60f8      	str	r0, [r7, #12]
 8017676:	60b9      	str	r1, [r7, #8]
 8017678:	607a      	str	r2, [r7, #4]
 801767a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801767c:	68bb      	ldr	r3, [r7, #8]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d10b      	bne.n	801769a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8017682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017686:	f383 8811 	msr	BASEPRI, r3
 801768a:	f3bf 8f6f 	isb	sy
 801768e:	f3bf 8f4f 	dsb	sy
 8017692:	617b      	str	r3, [r7, #20]
}
 8017694:	bf00      	nop
 8017696:	bf00      	nop
 8017698:	e7fd      	b.n	8017696 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801769c:	2b00      	cmp	r3, #0
 801769e:	d01e      	beq.n	80176de <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80176a0:	f000 faf2 	bl	8017c88 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80176a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176a6:	68fa      	ldr	r2, [r7, #12]
 80176a8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80176aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ac:	68ba      	ldr	r2, [r7, #8]
 80176ae:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80176b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176b2:	683a      	ldr	r2, [r7, #0]
 80176b4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80176b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176b8:	6a3a      	ldr	r2, [r7, #32]
 80176ba:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80176bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176be:	3304      	adds	r3, #4
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7fd ff19 	bl	80154f8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d008      	beq.n	80176de <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80176cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80176d2:	f043 0304 	orr.w	r3, r3, #4
 80176d6:	b2da      	uxtb	r2, r3
 80176d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80176de:	bf00      	nop
 80176e0:	3718      	adds	r7, #24
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}
	...

080176e8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b08a      	sub	sp, #40	@ 0x28
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	60f8      	str	r0, [r7, #12]
 80176f0:	60b9      	str	r1, [r7, #8]
 80176f2:	607a      	str	r2, [r7, #4]
 80176f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80176f6:	2300      	movs	r3, #0
 80176f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d10b      	bne.n	8017718 <xTimerGenericCommand+0x30>
	__asm volatile
 8017700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017704:	f383 8811 	msr	BASEPRI, r3
 8017708:	f3bf 8f6f 	isb	sy
 801770c:	f3bf 8f4f 	dsb	sy
 8017710:	623b      	str	r3, [r7, #32]
}
 8017712:	bf00      	nop
 8017714:	bf00      	nop
 8017716:	e7fd      	b.n	8017714 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017718:	4b19      	ldr	r3, [pc, #100]	@ (8017780 <xTimerGenericCommand+0x98>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d02a      	beq.n	8017776 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	2b05      	cmp	r3, #5
 8017730:	dc18      	bgt.n	8017764 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017732:	f7ff fc6d 	bl	8017010 <xTaskGetSchedulerState>
 8017736:	4603      	mov	r3, r0
 8017738:	2b02      	cmp	r3, #2
 801773a:	d109      	bne.n	8017750 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801773c:	4b10      	ldr	r3, [pc, #64]	@ (8017780 <xTimerGenericCommand+0x98>)
 801773e:	6818      	ldr	r0, [r3, #0]
 8017740:	f107 0110 	add.w	r1, r7, #16
 8017744:	2300      	movs	r3, #0
 8017746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017748:	f7fe f8e2 	bl	8015910 <xQueueGenericSend>
 801774c:	6278      	str	r0, [r7, #36]	@ 0x24
 801774e:	e012      	b.n	8017776 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017750:	4b0b      	ldr	r3, [pc, #44]	@ (8017780 <xTimerGenericCommand+0x98>)
 8017752:	6818      	ldr	r0, [r3, #0]
 8017754:	f107 0110 	add.w	r1, r7, #16
 8017758:	2300      	movs	r3, #0
 801775a:	2200      	movs	r2, #0
 801775c:	f7fe f8d8 	bl	8015910 <xQueueGenericSend>
 8017760:	6278      	str	r0, [r7, #36]	@ 0x24
 8017762:	e008      	b.n	8017776 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017764:	4b06      	ldr	r3, [pc, #24]	@ (8017780 <xTimerGenericCommand+0x98>)
 8017766:	6818      	ldr	r0, [r3, #0]
 8017768:	f107 0110 	add.w	r1, r7, #16
 801776c:	2300      	movs	r3, #0
 801776e:	683a      	ldr	r2, [r7, #0]
 8017770:	f7fe f9d0 	bl	8015b14 <xQueueGenericSendFromISR>
 8017774:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017778:	4618      	mov	r0, r3
 801777a:	3728      	adds	r7, #40	@ 0x28
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	200063e0 	.word	0x200063e0

08017784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b088      	sub	sp, #32
 8017788:	af02      	add	r7, sp, #8
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801778e:	4b23      	ldr	r3, [pc, #140]	@ (801781c <prvProcessExpiredTimer+0x98>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	68db      	ldr	r3, [r3, #12]
 8017794:	68db      	ldr	r3, [r3, #12]
 8017796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	3304      	adds	r3, #4
 801779c:	4618      	mov	r0, r3
 801779e:	f7fd ff15 	bl	80155cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80177a8:	f003 0304 	and.w	r3, r3, #4
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d023      	beq.n	80177f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	699a      	ldr	r2, [r3, #24]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	18d1      	adds	r1, r2, r3
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	683a      	ldr	r2, [r7, #0]
 80177bc:	6978      	ldr	r0, [r7, #20]
 80177be:	f000 f8d5 	bl	801796c <prvInsertTimerInActiveList>
 80177c2:	4603      	mov	r3, r0
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d020      	beq.n	801780a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80177c8:	2300      	movs	r3, #0
 80177ca:	9300      	str	r3, [sp, #0]
 80177cc:	2300      	movs	r3, #0
 80177ce:	687a      	ldr	r2, [r7, #4]
 80177d0:	2100      	movs	r1, #0
 80177d2:	6978      	ldr	r0, [r7, #20]
 80177d4:	f7ff ff88 	bl	80176e8 <xTimerGenericCommand>
 80177d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80177da:	693b      	ldr	r3, [r7, #16]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d114      	bne.n	801780a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80177e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177e4:	f383 8811 	msr	BASEPRI, r3
 80177e8:	f3bf 8f6f 	isb	sy
 80177ec:	f3bf 8f4f 	dsb	sy
 80177f0:	60fb      	str	r3, [r7, #12]
}
 80177f2:	bf00      	nop
 80177f4:	bf00      	nop
 80177f6:	e7fd      	b.n	80177f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80177fe:	f023 0301 	bic.w	r3, r3, #1
 8017802:	b2da      	uxtb	r2, r3
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	6a1b      	ldr	r3, [r3, #32]
 801780e:	6978      	ldr	r0, [r7, #20]
 8017810:	4798      	blx	r3
}
 8017812:	bf00      	nop
 8017814:	3718      	adds	r7, #24
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}
 801781a:	bf00      	nop
 801781c:	200063d8 	.word	0x200063d8

08017820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b084      	sub	sp, #16
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017828:	f107 0308 	add.w	r3, r7, #8
 801782c:	4618      	mov	r0, r3
 801782e:	f000 f859 	bl	80178e4 <prvGetNextExpireTime>
 8017832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	4619      	mov	r1, r3
 8017838:	68f8      	ldr	r0, [r7, #12]
 801783a:	f000 f805 	bl	8017848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801783e:	f000 f8d7 	bl	80179f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017842:	bf00      	nop
 8017844:	e7f0      	b.n	8017828 <prvTimerTask+0x8>
	...

08017848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b084      	sub	sp, #16
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
 8017850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017852:	f7fe ffd9 	bl	8016808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017856:	f107 0308 	add.w	r3, r7, #8
 801785a:	4618      	mov	r0, r3
 801785c:	f000 f866 	bl	801792c <prvSampleTimeNow>
 8017860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d130      	bne.n	80178ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017868:	683b      	ldr	r3, [r7, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d10a      	bne.n	8017884 <prvProcessTimerOrBlockTask+0x3c>
 801786e:	687a      	ldr	r2, [r7, #4]
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	429a      	cmp	r2, r3
 8017874:	d806      	bhi.n	8017884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017876:	f7fe ffd5 	bl	8016824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801787a:	68f9      	ldr	r1, [r7, #12]
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f7ff ff81 	bl	8017784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017882:	e024      	b.n	80178ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d008      	beq.n	801789c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801788a:	4b13      	ldr	r3, [pc, #76]	@ (80178d8 <prvProcessTimerOrBlockTask+0x90>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d101      	bne.n	8017898 <prvProcessTimerOrBlockTask+0x50>
 8017894:	2301      	movs	r3, #1
 8017896:	e000      	b.n	801789a <prvProcessTimerOrBlockTask+0x52>
 8017898:	2300      	movs	r3, #0
 801789a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801789c:	4b0f      	ldr	r3, [pc, #60]	@ (80178dc <prvProcessTimerOrBlockTask+0x94>)
 801789e:	6818      	ldr	r0, [r3, #0]
 80178a0:	687a      	ldr	r2, [r7, #4]
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	1ad3      	subs	r3, r2, r3
 80178a6:	683a      	ldr	r2, [r7, #0]
 80178a8:	4619      	mov	r1, r3
 80178aa:	f7fe fd15 	bl	80162d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80178ae:	f7fe ffb9 	bl	8016824 <xTaskResumeAll>
 80178b2:	4603      	mov	r3, r0
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d10a      	bne.n	80178ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80178b8:	4b09      	ldr	r3, [pc, #36]	@ (80178e0 <prvProcessTimerOrBlockTask+0x98>)
 80178ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80178be:	601a      	str	r2, [r3, #0]
 80178c0:	f3bf 8f4f 	dsb	sy
 80178c4:	f3bf 8f6f 	isb	sy
}
 80178c8:	e001      	b.n	80178ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80178ca:	f7fe ffab 	bl	8016824 <xTaskResumeAll>
}
 80178ce:	bf00      	nop
 80178d0:	3710      	adds	r7, #16
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}
 80178d6:	bf00      	nop
 80178d8:	200063dc 	.word	0x200063dc
 80178dc:	200063e0 	.word	0x200063e0
 80178e0:	e000ed04 	.word	0xe000ed04

080178e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80178e4:	b480      	push	{r7}
 80178e6:	b085      	sub	sp, #20
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80178ec:	4b0e      	ldr	r3, [pc, #56]	@ (8017928 <prvGetNextExpireTime+0x44>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d101      	bne.n	80178fa <prvGetNextExpireTime+0x16>
 80178f6:	2201      	movs	r2, #1
 80178f8:	e000      	b.n	80178fc <prvGetNextExpireTime+0x18>
 80178fa:	2200      	movs	r2, #0
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d105      	bne.n	8017914 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017908:	4b07      	ldr	r3, [pc, #28]	@ (8017928 <prvGetNextExpireTime+0x44>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	68db      	ldr	r3, [r3, #12]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	60fb      	str	r3, [r7, #12]
 8017912:	e001      	b.n	8017918 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017914:	2300      	movs	r3, #0
 8017916:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017918:	68fb      	ldr	r3, [r7, #12]
}
 801791a:	4618      	mov	r0, r3
 801791c:	3714      	adds	r7, #20
 801791e:	46bd      	mov	sp, r7
 8017920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017924:	4770      	bx	lr
 8017926:	bf00      	nop
 8017928:	200063d8 	.word	0x200063d8

0801792c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b084      	sub	sp, #16
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017934:	f7ff f814 	bl	8016960 <xTaskGetTickCount>
 8017938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801793a:	4b0b      	ldr	r3, [pc, #44]	@ (8017968 <prvSampleTimeNow+0x3c>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	68fa      	ldr	r2, [r7, #12]
 8017940:	429a      	cmp	r2, r3
 8017942:	d205      	bcs.n	8017950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017944:	f000 f93a 	bl	8017bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2201      	movs	r2, #1
 801794c:	601a      	str	r2, [r3, #0]
 801794e:	e002      	b.n	8017956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	2200      	movs	r2, #0
 8017954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017956:	4a04      	ldr	r2, [pc, #16]	@ (8017968 <prvSampleTimeNow+0x3c>)
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801795c:	68fb      	ldr	r3, [r7, #12]
}
 801795e:	4618      	mov	r0, r3
 8017960:	3710      	adds	r7, #16
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	200063e8 	.word	0x200063e8

0801796c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b086      	sub	sp, #24
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	607a      	str	r2, [r7, #4]
 8017978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801797a:	2300      	movs	r3, #0
 801797c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	68ba      	ldr	r2, [r7, #8]
 8017982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	68fa      	ldr	r2, [r7, #12]
 8017988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801798a:	68ba      	ldr	r2, [r7, #8]
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	429a      	cmp	r2, r3
 8017990:	d812      	bhi.n	80179b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	1ad2      	subs	r2, r2, r3
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	699b      	ldr	r3, [r3, #24]
 801799c:	429a      	cmp	r2, r3
 801799e:	d302      	bcc.n	80179a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80179a0:	2301      	movs	r3, #1
 80179a2:	617b      	str	r3, [r7, #20]
 80179a4:	e01b      	b.n	80179de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80179a6:	4b10      	ldr	r3, [pc, #64]	@ (80179e8 <prvInsertTimerInActiveList+0x7c>)
 80179a8:	681a      	ldr	r2, [r3, #0]
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	3304      	adds	r3, #4
 80179ae:	4619      	mov	r1, r3
 80179b0:	4610      	mov	r0, r2
 80179b2:	f7fd fdd2 	bl	801555a <vListInsert>
 80179b6:	e012      	b.n	80179de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	429a      	cmp	r2, r3
 80179be:	d206      	bcs.n	80179ce <prvInsertTimerInActiveList+0x62>
 80179c0:	68ba      	ldr	r2, [r7, #8]
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d302      	bcc.n	80179ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80179c8:	2301      	movs	r3, #1
 80179ca:	617b      	str	r3, [r7, #20]
 80179cc:	e007      	b.n	80179de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80179ce:	4b07      	ldr	r3, [pc, #28]	@ (80179ec <prvInsertTimerInActiveList+0x80>)
 80179d0:	681a      	ldr	r2, [r3, #0]
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	3304      	adds	r3, #4
 80179d6:	4619      	mov	r1, r3
 80179d8:	4610      	mov	r0, r2
 80179da:	f7fd fdbe 	bl	801555a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80179de:	697b      	ldr	r3, [r7, #20]
}
 80179e0:	4618      	mov	r0, r3
 80179e2:	3718      	adds	r7, #24
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	200063dc 	.word	0x200063dc
 80179ec:	200063d8 	.word	0x200063d8

080179f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b08e      	sub	sp, #56	@ 0x38
 80179f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80179f6:	e0ce      	b.n	8017b96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	da19      	bge.n	8017a32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80179fe:	1d3b      	adds	r3, r7, #4
 8017a00:	3304      	adds	r3, #4
 8017a02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d10b      	bne.n	8017a22 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8017a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a0e:	f383 8811 	msr	BASEPRI, r3
 8017a12:	f3bf 8f6f 	isb	sy
 8017a16:	f3bf 8f4f 	dsb	sy
 8017a1a:	61fb      	str	r3, [r7, #28]
}
 8017a1c:	bf00      	nop
 8017a1e:	bf00      	nop
 8017a20:	e7fd      	b.n	8017a1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017a28:	6850      	ldr	r0, [r2, #4]
 8017a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017a2c:	6892      	ldr	r2, [r2, #8]
 8017a2e:	4611      	mov	r1, r2
 8017a30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f2c0 80ae 	blt.w	8017b96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a40:	695b      	ldr	r3, [r3, #20]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d004      	beq.n	8017a50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a48:	3304      	adds	r3, #4
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7fd fdbe 	bl	80155cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017a50:	463b      	mov	r3, r7
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7ff ff6a 	bl	801792c <prvSampleTimeNow>
 8017a58:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2b09      	cmp	r3, #9
 8017a5e:	f200 8097 	bhi.w	8017b90 <prvProcessReceivedCommands+0x1a0>
 8017a62:	a201      	add	r2, pc, #4	@ (adr r2, 8017a68 <prvProcessReceivedCommands+0x78>)
 8017a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a68:	08017a91 	.word	0x08017a91
 8017a6c:	08017a91 	.word	0x08017a91
 8017a70:	08017a91 	.word	0x08017a91
 8017a74:	08017b07 	.word	0x08017b07
 8017a78:	08017b1b 	.word	0x08017b1b
 8017a7c:	08017b67 	.word	0x08017b67
 8017a80:	08017a91 	.word	0x08017a91
 8017a84:	08017a91 	.word	0x08017a91
 8017a88:	08017b07 	.word	0x08017b07
 8017a8c:	08017b1b 	.word	0x08017b1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017a96:	f043 0301 	orr.w	r3, r3, #1
 8017a9a:	b2da      	uxtb	r2, r3
 8017a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017aa2:	68ba      	ldr	r2, [r7, #8]
 8017aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aa6:	699b      	ldr	r3, [r3, #24]
 8017aa8:	18d1      	adds	r1, r2, r3
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ab0:	f7ff ff5c 	bl	801796c <prvInsertTimerInActiveList>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d06c      	beq.n	8017b94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017abc:	6a1b      	ldr	r3, [r3, #32]
 8017abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ac0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017ac8:	f003 0304 	and.w	r3, r3, #4
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d061      	beq.n	8017b94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017ad0:	68ba      	ldr	r2, [r7, #8]
 8017ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad4:	699b      	ldr	r3, [r3, #24]
 8017ad6:	441a      	add	r2, r3
 8017ad8:	2300      	movs	r3, #0
 8017ada:	9300      	str	r3, [sp, #0]
 8017adc:	2300      	movs	r3, #0
 8017ade:	2100      	movs	r1, #0
 8017ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ae2:	f7ff fe01 	bl	80176e8 <xTimerGenericCommand>
 8017ae6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017ae8:	6a3b      	ldr	r3, [r7, #32]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d152      	bne.n	8017b94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8017aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017af2:	f383 8811 	msr	BASEPRI, r3
 8017af6:	f3bf 8f6f 	isb	sy
 8017afa:	f3bf 8f4f 	dsb	sy
 8017afe:	61bb      	str	r3, [r7, #24]
}
 8017b00:	bf00      	nop
 8017b02:	bf00      	nop
 8017b04:	e7fd      	b.n	8017b02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b0c:	f023 0301 	bic.w	r3, r3, #1
 8017b10:	b2da      	uxtb	r2, r3
 8017b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017b18:	e03d      	b.n	8017b96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b20:	f043 0301 	orr.w	r3, r3, #1
 8017b24:	b2da      	uxtb	r2, r3
 8017b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017b2c:	68ba      	ldr	r2, [r7, #8]
 8017b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b34:	699b      	ldr	r3, [r3, #24]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d10b      	bne.n	8017b52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8017b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b3e:	f383 8811 	msr	BASEPRI, r3
 8017b42:	f3bf 8f6f 	isb	sy
 8017b46:	f3bf 8f4f 	dsb	sy
 8017b4a:	617b      	str	r3, [r7, #20]
}
 8017b4c:	bf00      	nop
 8017b4e:	bf00      	nop
 8017b50:	e7fd      	b.n	8017b4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b54:	699a      	ldr	r2, [r3, #24]
 8017b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b58:	18d1      	adds	r1, r2, r3
 8017b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b60:	f7ff ff04 	bl	801796c <prvInsertTimerInActiveList>
					break;
 8017b64:	e017      	b.n	8017b96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b6c:	f003 0302 	and.w	r3, r3, #2
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d103      	bne.n	8017b7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8017b74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b76:	f000 fbe7 	bl	8018348 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017b7a:	e00c      	b.n	8017b96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b82:	f023 0301 	bic.w	r3, r3, #1
 8017b86:	b2da      	uxtb	r2, r3
 8017b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017b8e:	e002      	b.n	8017b96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8017b90:	bf00      	nop
 8017b92:	e000      	b.n	8017b96 <prvProcessReceivedCommands+0x1a6>
					break;
 8017b94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017b96:	4b08      	ldr	r3, [pc, #32]	@ (8017bb8 <prvProcessReceivedCommands+0x1c8>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	1d39      	adds	r1, r7, #4
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7fe f856 	bl	8015c50 <xQueueReceive>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	f47f af26 	bne.w	80179f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017bac:	bf00      	nop
 8017bae:	bf00      	nop
 8017bb0:	3730      	adds	r7, #48	@ 0x30
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	200063e0 	.word	0x200063e0

08017bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b088      	sub	sp, #32
 8017bc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017bc2:	e049      	b.n	8017c58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8017c80 <prvSwitchTimerLists+0xc4>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	68db      	ldr	r3, [r3, #12]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bce:	4b2c      	ldr	r3, [pc, #176]	@ (8017c80 <prvSwitchTimerLists+0xc4>)
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	68db      	ldr	r3, [r3, #12]
 8017bd4:	68db      	ldr	r3, [r3, #12]
 8017bd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	3304      	adds	r3, #4
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f7fd fcf5 	bl	80155cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	6a1b      	ldr	r3, [r3, #32]
 8017be6:	68f8      	ldr	r0, [r7, #12]
 8017be8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017bf0:	f003 0304 	and.w	r3, r3, #4
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d02f      	beq.n	8017c58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	699b      	ldr	r3, [r3, #24]
 8017bfc:	693a      	ldr	r2, [r7, #16]
 8017bfe:	4413      	add	r3, r2
 8017c00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017c02:	68ba      	ldr	r2, [r7, #8]
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d90e      	bls.n	8017c28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	68ba      	ldr	r2, [r7, #8]
 8017c0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	68fa      	ldr	r2, [r7, #12]
 8017c14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017c16:	4b1a      	ldr	r3, [pc, #104]	@ (8017c80 <prvSwitchTimerLists+0xc4>)
 8017c18:	681a      	ldr	r2, [r3, #0]
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	4619      	mov	r1, r3
 8017c20:	4610      	mov	r0, r2
 8017c22:	f7fd fc9a 	bl	801555a <vListInsert>
 8017c26:	e017      	b.n	8017c58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017c28:	2300      	movs	r3, #0
 8017c2a:	9300      	str	r3, [sp, #0]
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	693a      	ldr	r2, [r7, #16]
 8017c30:	2100      	movs	r1, #0
 8017c32:	68f8      	ldr	r0, [r7, #12]
 8017c34:	f7ff fd58 	bl	80176e8 <xTimerGenericCommand>
 8017c38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d10b      	bne.n	8017c58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8017c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c44:	f383 8811 	msr	BASEPRI, r3
 8017c48:	f3bf 8f6f 	isb	sy
 8017c4c:	f3bf 8f4f 	dsb	sy
 8017c50:	603b      	str	r3, [r7, #0]
}
 8017c52:	bf00      	nop
 8017c54:	bf00      	nop
 8017c56:	e7fd      	b.n	8017c54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017c58:	4b09      	ldr	r3, [pc, #36]	@ (8017c80 <prvSwitchTimerLists+0xc4>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d1b0      	bne.n	8017bc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017c62:	4b07      	ldr	r3, [pc, #28]	@ (8017c80 <prvSwitchTimerLists+0xc4>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017c68:	4b06      	ldr	r3, [pc, #24]	@ (8017c84 <prvSwitchTimerLists+0xc8>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	4a04      	ldr	r2, [pc, #16]	@ (8017c80 <prvSwitchTimerLists+0xc4>)
 8017c6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017c70:	4a04      	ldr	r2, [pc, #16]	@ (8017c84 <prvSwitchTimerLists+0xc8>)
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	6013      	str	r3, [r2, #0]
}
 8017c76:	bf00      	nop
 8017c78:	3718      	adds	r7, #24
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	200063d8 	.word	0x200063d8
 8017c84:	200063dc 	.word	0x200063dc

08017c88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017c8e:	f000 f96b 	bl	8017f68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017c92:	4b15      	ldr	r3, [pc, #84]	@ (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d120      	bne.n	8017cdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017c9a:	4814      	ldr	r0, [pc, #80]	@ (8017cec <prvCheckForValidListAndQueue+0x64>)
 8017c9c:	f7fd fc0c 	bl	80154b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017ca0:	4813      	ldr	r0, [pc, #76]	@ (8017cf0 <prvCheckForValidListAndQueue+0x68>)
 8017ca2:	f7fd fc09 	bl	80154b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ca6:	4b13      	ldr	r3, [pc, #76]	@ (8017cf4 <prvCheckForValidListAndQueue+0x6c>)
 8017ca8:	4a10      	ldr	r2, [pc, #64]	@ (8017cec <prvCheckForValidListAndQueue+0x64>)
 8017caa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017cac:	4b12      	ldr	r3, [pc, #72]	@ (8017cf8 <prvCheckForValidListAndQueue+0x70>)
 8017cae:	4a10      	ldr	r2, [pc, #64]	@ (8017cf0 <prvCheckForValidListAndQueue+0x68>)
 8017cb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	9300      	str	r3, [sp, #0]
 8017cb6:	4b11      	ldr	r3, [pc, #68]	@ (8017cfc <prvCheckForValidListAndQueue+0x74>)
 8017cb8:	4a11      	ldr	r2, [pc, #68]	@ (8017d00 <prvCheckForValidListAndQueue+0x78>)
 8017cba:	2110      	movs	r1, #16
 8017cbc:	200a      	movs	r0, #10
 8017cbe:	f7fd fd19 	bl	80156f4 <xQueueGenericCreateStatic>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	4a08      	ldr	r2, [pc, #32]	@ (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017cc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017cc8:	4b07      	ldr	r3, [pc, #28]	@ (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d005      	beq.n	8017cdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017cd0:	4b05      	ldr	r3, [pc, #20]	@ (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	490b      	ldr	r1, [pc, #44]	@ (8017d04 <prvCheckForValidListAndQueue+0x7c>)
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fe fad4 	bl	8016284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017cdc:	f000 f976 	bl	8017fcc <vPortExitCritical>
}
 8017ce0:	bf00      	nop
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	bf00      	nop
 8017ce8:	200063e0 	.word	0x200063e0
 8017cec:	200063b0 	.word	0x200063b0
 8017cf0:	200063c4 	.word	0x200063c4
 8017cf4:	200063d8 	.word	0x200063d8
 8017cf8:	200063dc 	.word	0x200063dc
 8017cfc:	2000648c 	.word	0x2000648c
 8017d00:	200063ec 	.word	0x200063ec
 8017d04:	08021ff8 	.word	0x08021ff8

08017d08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017d08:	b480      	push	{r7}
 8017d0a:	b085      	sub	sp, #20
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	3b04      	subs	r3, #4
 8017d18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	3b04      	subs	r3, #4
 8017d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	f023 0201 	bic.w	r2, r3, #1
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	3b04      	subs	r3, #4
 8017d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017d38:	4a0c      	ldr	r2, [pc, #48]	@ (8017d6c <pxPortInitialiseStack+0x64>)
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	3b14      	subs	r3, #20
 8017d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	3b04      	subs	r3, #4
 8017d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	f06f 0202 	mvn.w	r2, #2
 8017d56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	3b20      	subs	r3, #32
 8017d5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3714      	adds	r7, #20
 8017d64:	46bd      	mov	sp, r7
 8017d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6a:	4770      	bx	lr
 8017d6c:	08017d71 	.word	0x08017d71

08017d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017d70:	b480      	push	{r7}
 8017d72:	b085      	sub	sp, #20
 8017d74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017d76:	2300      	movs	r3, #0
 8017d78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017d7a:	4b13      	ldr	r3, [pc, #76]	@ (8017dc8 <prvTaskExitError+0x58>)
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d82:	d00b      	beq.n	8017d9c <prvTaskExitError+0x2c>
	__asm volatile
 8017d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	60fb      	str	r3, [r7, #12]
}
 8017d96:	bf00      	nop
 8017d98:	bf00      	nop
 8017d9a:	e7fd      	b.n	8017d98 <prvTaskExitError+0x28>
	__asm volatile
 8017d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017da0:	f383 8811 	msr	BASEPRI, r3
 8017da4:	f3bf 8f6f 	isb	sy
 8017da8:	f3bf 8f4f 	dsb	sy
 8017dac:	60bb      	str	r3, [r7, #8]
}
 8017dae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017db0:	bf00      	nop
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d0fc      	beq.n	8017db2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017db8:	bf00      	nop
 8017dba:	bf00      	nop
 8017dbc:	3714      	adds	r7, #20
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc4:	4770      	bx	lr
 8017dc6:	bf00      	nop
 8017dc8:	200000f0 	.word	0x200000f0
 8017dcc:	00000000 	.word	0x00000000

08017dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017dd0:	4b07      	ldr	r3, [pc, #28]	@ (8017df0 <pxCurrentTCBConst2>)
 8017dd2:	6819      	ldr	r1, [r3, #0]
 8017dd4:	6808      	ldr	r0, [r1, #0]
 8017dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dda:	f380 8809 	msr	PSP, r0
 8017dde:	f3bf 8f6f 	isb	sy
 8017de2:	f04f 0000 	mov.w	r0, #0
 8017de6:	f380 8811 	msr	BASEPRI, r0
 8017dea:	4770      	bx	lr
 8017dec:	f3af 8000 	nop.w

08017df0 <pxCurrentTCBConst2>:
 8017df0:	20005eb0 	.word	0x20005eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017df4:	bf00      	nop
 8017df6:	bf00      	nop

08017df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017df8:	4808      	ldr	r0, [pc, #32]	@ (8017e1c <prvPortStartFirstTask+0x24>)
 8017dfa:	6800      	ldr	r0, [r0, #0]
 8017dfc:	6800      	ldr	r0, [r0, #0]
 8017dfe:	f380 8808 	msr	MSP, r0
 8017e02:	f04f 0000 	mov.w	r0, #0
 8017e06:	f380 8814 	msr	CONTROL, r0
 8017e0a:	b662      	cpsie	i
 8017e0c:	b661      	cpsie	f
 8017e0e:	f3bf 8f4f 	dsb	sy
 8017e12:	f3bf 8f6f 	isb	sy
 8017e16:	df00      	svc	0
 8017e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017e1a:	bf00      	nop
 8017e1c:	e000ed08 	.word	0xe000ed08

08017e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b086      	sub	sp, #24
 8017e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017e26:	4b47      	ldr	r3, [pc, #284]	@ (8017f44 <xPortStartScheduler+0x124>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	4a47      	ldr	r2, [pc, #284]	@ (8017f48 <xPortStartScheduler+0x128>)
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d10b      	bne.n	8017e48 <xPortStartScheduler+0x28>
	__asm volatile
 8017e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e34:	f383 8811 	msr	BASEPRI, r3
 8017e38:	f3bf 8f6f 	isb	sy
 8017e3c:	f3bf 8f4f 	dsb	sy
 8017e40:	60fb      	str	r3, [r7, #12]
}
 8017e42:	bf00      	nop
 8017e44:	bf00      	nop
 8017e46:	e7fd      	b.n	8017e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017e48:	4b3e      	ldr	r3, [pc, #248]	@ (8017f44 <xPortStartScheduler+0x124>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8017f4c <xPortStartScheduler+0x12c>)
 8017e4e:	4293      	cmp	r3, r2
 8017e50:	d10b      	bne.n	8017e6a <xPortStartScheduler+0x4a>
	__asm volatile
 8017e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e56:	f383 8811 	msr	BASEPRI, r3
 8017e5a:	f3bf 8f6f 	isb	sy
 8017e5e:	f3bf 8f4f 	dsb	sy
 8017e62:	613b      	str	r3, [r7, #16]
}
 8017e64:	bf00      	nop
 8017e66:	bf00      	nop
 8017e68:	e7fd      	b.n	8017e66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017e6a:	4b39      	ldr	r3, [pc, #228]	@ (8017f50 <xPortStartScheduler+0x130>)
 8017e6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	22ff      	movs	r2, #255	@ 0xff
 8017e7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	b2db      	uxtb	r3, r3
 8017e82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017e84:	78fb      	ldrb	r3, [r7, #3]
 8017e86:	b2db      	uxtb	r3, r3
 8017e88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8017e8c:	b2da      	uxtb	r2, r3
 8017e8e:	4b31      	ldr	r3, [pc, #196]	@ (8017f54 <xPortStartScheduler+0x134>)
 8017e90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017e92:	4b31      	ldr	r3, [pc, #196]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017e94:	2207      	movs	r2, #7
 8017e96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e98:	e009      	b.n	8017eae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8017e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	3b01      	subs	r3, #1
 8017ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017ea2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017ea4:	78fb      	ldrb	r3, [r7, #3]
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	005b      	lsls	r3, r3, #1
 8017eaa:	b2db      	uxtb	r3, r3
 8017eac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017eae:	78fb      	ldrb	r3, [r7, #3]
 8017eb0:	b2db      	uxtb	r3, r3
 8017eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017eb6:	2b80      	cmp	r3, #128	@ 0x80
 8017eb8:	d0ef      	beq.n	8017e9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017eba:	4b27      	ldr	r3, [pc, #156]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	f1c3 0307 	rsb	r3, r3, #7
 8017ec2:	2b04      	cmp	r3, #4
 8017ec4:	d00b      	beq.n	8017ede <xPortStartScheduler+0xbe>
	__asm volatile
 8017ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017eca:	f383 8811 	msr	BASEPRI, r3
 8017ece:	f3bf 8f6f 	isb	sy
 8017ed2:	f3bf 8f4f 	dsb	sy
 8017ed6:	60bb      	str	r3, [r7, #8]
}
 8017ed8:	bf00      	nop
 8017eda:	bf00      	nop
 8017edc:	e7fd      	b.n	8017eda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017ede:	4b1e      	ldr	r3, [pc, #120]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	021b      	lsls	r3, r3, #8
 8017ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017ee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017ef0:	4a19      	ldr	r2, [pc, #100]	@ (8017f58 <xPortStartScheduler+0x138>)
 8017ef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	b2da      	uxtb	r2, r3
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017efc:	4b17      	ldr	r3, [pc, #92]	@ (8017f5c <xPortStartScheduler+0x13c>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	4a16      	ldr	r2, [pc, #88]	@ (8017f5c <xPortStartScheduler+0x13c>)
 8017f02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017f06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017f08:	4b14      	ldr	r3, [pc, #80]	@ (8017f5c <xPortStartScheduler+0x13c>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	4a13      	ldr	r2, [pc, #76]	@ (8017f5c <xPortStartScheduler+0x13c>)
 8017f0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017f12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017f14:	f000 f8da 	bl	80180cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017f18:	4b11      	ldr	r3, [pc, #68]	@ (8017f60 <xPortStartScheduler+0x140>)
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017f1e:	f000 f8f9 	bl	8018114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017f22:	4b10      	ldr	r3, [pc, #64]	@ (8017f64 <xPortStartScheduler+0x144>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	4a0f      	ldr	r2, [pc, #60]	@ (8017f64 <xPortStartScheduler+0x144>)
 8017f28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8017f2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017f2e:	f7ff ff63 	bl	8017df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017f32:	f7fe fddf 	bl	8016af4 <vTaskSwitchContext>
	prvTaskExitError();
 8017f36:	f7ff ff1b 	bl	8017d70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017f3a:	2300      	movs	r3, #0
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	3718      	adds	r7, #24
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}
 8017f44:	e000ed00 	.word	0xe000ed00
 8017f48:	410fc271 	.word	0x410fc271
 8017f4c:	410fc270 	.word	0x410fc270
 8017f50:	e000e400 	.word	0xe000e400
 8017f54:	200064dc 	.word	0x200064dc
 8017f58:	200064e0 	.word	0x200064e0
 8017f5c:	e000ed20 	.word	0xe000ed20
 8017f60:	200000f0 	.word	0x200000f0
 8017f64:	e000ef34 	.word	0xe000ef34

08017f68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b083      	sub	sp, #12
 8017f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8017f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f72:	f383 8811 	msr	BASEPRI, r3
 8017f76:	f3bf 8f6f 	isb	sy
 8017f7a:	f3bf 8f4f 	dsb	sy
 8017f7e:	607b      	str	r3, [r7, #4]
}
 8017f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017f82:	4b10      	ldr	r3, [pc, #64]	@ (8017fc4 <vPortEnterCritical+0x5c>)
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	3301      	adds	r3, #1
 8017f88:	4a0e      	ldr	r2, [pc, #56]	@ (8017fc4 <vPortEnterCritical+0x5c>)
 8017f8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc4 <vPortEnterCritical+0x5c>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d110      	bne.n	8017fb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017f94:	4b0c      	ldr	r3, [pc, #48]	@ (8017fc8 <vPortEnterCritical+0x60>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d00b      	beq.n	8017fb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8017f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fa2:	f383 8811 	msr	BASEPRI, r3
 8017fa6:	f3bf 8f6f 	isb	sy
 8017faa:	f3bf 8f4f 	dsb	sy
 8017fae:	603b      	str	r3, [r7, #0]
}
 8017fb0:	bf00      	nop
 8017fb2:	bf00      	nop
 8017fb4:	e7fd      	b.n	8017fb2 <vPortEnterCritical+0x4a>
	}
}
 8017fb6:	bf00      	nop
 8017fb8:	370c      	adds	r7, #12
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc0:	4770      	bx	lr
 8017fc2:	bf00      	nop
 8017fc4:	200000f0 	.word	0x200000f0
 8017fc8:	e000ed04 	.word	0xe000ed04

08017fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b083      	sub	sp, #12
 8017fd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017fd2:	4b12      	ldr	r3, [pc, #72]	@ (801801c <vPortExitCritical+0x50>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d10b      	bne.n	8017ff2 <vPortExitCritical+0x26>
	__asm volatile
 8017fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fde:	f383 8811 	msr	BASEPRI, r3
 8017fe2:	f3bf 8f6f 	isb	sy
 8017fe6:	f3bf 8f4f 	dsb	sy
 8017fea:	607b      	str	r3, [r7, #4]
}
 8017fec:	bf00      	nop
 8017fee:	bf00      	nop
 8017ff0:	e7fd      	b.n	8017fee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017ff2:	4b0a      	ldr	r3, [pc, #40]	@ (801801c <vPortExitCritical+0x50>)
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	3b01      	subs	r3, #1
 8017ff8:	4a08      	ldr	r2, [pc, #32]	@ (801801c <vPortExitCritical+0x50>)
 8017ffa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017ffc:	4b07      	ldr	r3, [pc, #28]	@ (801801c <vPortExitCritical+0x50>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d105      	bne.n	8018010 <vPortExitCritical+0x44>
 8018004:	2300      	movs	r3, #0
 8018006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018008:	683b      	ldr	r3, [r7, #0]
 801800a:	f383 8811 	msr	BASEPRI, r3
}
 801800e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018010:	bf00      	nop
 8018012:	370c      	adds	r7, #12
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr
 801801c:	200000f0 	.word	0x200000f0

08018020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018020:	f3ef 8009 	mrs	r0, PSP
 8018024:	f3bf 8f6f 	isb	sy
 8018028:	4b15      	ldr	r3, [pc, #84]	@ (8018080 <pxCurrentTCBConst>)
 801802a:	681a      	ldr	r2, [r3, #0]
 801802c:	f01e 0f10 	tst.w	lr, #16
 8018030:	bf08      	it	eq
 8018032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801803a:	6010      	str	r0, [r2, #0]
 801803c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018044:	f380 8811 	msr	BASEPRI, r0
 8018048:	f3bf 8f4f 	dsb	sy
 801804c:	f3bf 8f6f 	isb	sy
 8018050:	f7fe fd50 	bl	8016af4 <vTaskSwitchContext>
 8018054:	f04f 0000 	mov.w	r0, #0
 8018058:	f380 8811 	msr	BASEPRI, r0
 801805c:	bc09      	pop	{r0, r3}
 801805e:	6819      	ldr	r1, [r3, #0]
 8018060:	6808      	ldr	r0, [r1, #0]
 8018062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018066:	f01e 0f10 	tst.w	lr, #16
 801806a:	bf08      	it	eq
 801806c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018070:	f380 8809 	msr	PSP, r0
 8018074:	f3bf 8f6f 	isb	sy
 8018078:	4770      	bx	lr
 801807a:	bf00      	nop
 801807c:	f3af 8000 	nop.w

08018080 <pxCurrentTCBConst>:
 8018080:	20005eb0 	.word	0x20005eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018084:	bf00      	nop
 8018086:	bf00      	nop

08018088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b082      	sub	sp, #8
 801808c:	af00      	add	r7, sp, #0
	__asm volatile
 801808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018092:	f383 8811 	msr	BASEPRI, r3
 8018096:	f3bf 8f6f 	isb	sy
 801809a:	f3bf 8f4f 	dsb	sy
 801809e:	607b      	str	r3, [r7, #4]
}
 80180a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80180a2:	f7fe fc6d 	bl	8016980 <xTaskIncrementTick>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d003      	beq.n	80180b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80180ac:	4b06      	ldr	r3, [pc, #24]	@ (80180c8 <xPortSysTickHandler+0x40>)
 80180ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80180b2:	601a      	str	r2, [r3, #0]
 80180b4:	2300      	movs	r3, #0
 80180b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	f383 8811 	msr	BASEPRI, r3
}
 80180be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80180c0:	bf00      	nop
 80180c2:	3708      	adds	r7, #8
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	e000ed04 	.word	0xe000ed04

080180cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80180cc:	b480      	push	{r7}
 80180ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80180d0:	4b0b      	ldr	r3, [pc, #44]	@ (8018100 <vPortSetupTimerInterrupt+0x34>)
 80180d2:	2200      	movs	r2, #0
 80180d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80180d6:	4b0b      	ldr	r3, [pc, #44]	@ (8018104 <vPortSetupTimerInterrupt+0x38>)
 80180d8:	2200      	movs	r2, #0
 80180da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80180dc:	4b0a      	ldr	r3, [pc, #40]	@ (8018108 <vPortSetupTimerInterrupt+0x3c>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a0a      	ldr	r2, [pc, #40]	@ (801810c <vPortSetupTimerInterrupt+0x40>)
 80180e2:	fba2 2303 	umull	r2, r3, r2, r3
 80180e6:	099b      	lsrs	r3, r3, #6
 80180e8:	4a09      	ldr	r2, [pc, #36]	@ (8018110 <vPortSetupTimerInterrupt+0x44>)
 80180ea:	3b01      	subs	r3, #1
 80180ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80180ee:	4b04      	ldr	r3, [pc, #16]	@ (8018100 <vPortSetupTimerInterrupt+0x34>)
 80180f0:	2207      	movs	r2, #7
 80180f2:	601a      	str	r2, [r3, #0]
}
 80180f4:	bf00      	nop
 80180f6:	46bd      	mov	sp, r7
 80180f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fc:	4770      	bx	lr
 80180fe:	bf00      	nop
 8018100:	e000e010 	.word	0xe000e010
 8018104:	e000e018 	.word	0xe000e018
 8018108:	20000058 	.word	0x20000058
 801810c:	10624dd3 	.word	0x10624dd3
 8018110:	e000e014 	.word	0xe000e014

08018114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018114:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018124 <vPortEnableVFP+0x10>
 8018118:	6801      	ldr	r1, [r0, #0]
 801811a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801811e:	6001      	str	r1, [r0, #0]
 8018120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018122:	bf00      	nop
 8018124:	e000ed88 	.word	0xe000ed88

08018128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018128:	b480      	push	{r7}
 801812a:	b085      	sub	sp, #20
 801812c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801812e:	f3ef 8305 	mrs	r3, IPSR
 8018132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	2b0f      	cmp	r3, #15
 8018138:	d915      	bls.n	8018166 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801813a:	4a18      	ldr	r2, [pc, #96]	@ (801819c <vPortValidateInterruptPriority+0x74>)
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	4413      	add	r3, r2
 8018140:	781b      	ldrb	r3, [r3, #0]
 8018142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018144:	4b16      	ldr	r3, [pc, #88]	@ (80181a0 <vPortValidateInterruptPriority+0x78>)
 8018146:	781b      	ldrb	r3, [r3, #0]
 8018148:	7afa      	ldrb	r2, [r7, #11]
 801814a:	429a      	cmp	r2, r3
 801814c:	d20b      	bcs.n	8018166 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018152:	f383 8811 	msr	BASEPRI, r3
 8018156:	f3bf 8f6f 	isb	sy
 801815a:	f3bf 8f4f 	dsb	sy
 801815e:	607b      	str	r3, [r7, #4]
}
 8018160:	bf00      	nop
 8018162:	bf00      	nop
 8018164:	e7fd      	b.n	8018162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018166:	4b0f      	ldr	r3, [pc, #60]	@ (80181a4 <vPortValidateInterruptPriority+0x7c>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801816e:	4b0e      	ldr	r3, [pc, #56]	@ (80181a8 <vPortValidateInterruptPriority+0x80>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	429a      	cmp	r2, r3
 8018174:	d90b      	bls.n	801818e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8018176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801817a:	f383 8811 	msr	BASEPRI, r3
 801817e:	f3bf 8f6f 	isb	sy
 8018182:	f3bf 8f4f 	dsb	sy
 8018186:	603b      	str	r3, [r7, #0]
}
 8018188:	bf00      	nop
 801818a:	bf00      	nop
 801818c:	e7fd      	b.n	801818a <vPortValidateInterruptPriority+0x62>
	}
 801818e:	bf00      	nop
 8018190:	3714      	adds	r7, #20
 8018192:	46bd      	mov	sp, r7
 8018194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018198:	4770      	bx	lr
 801819a:	bf00      	nop
 801819c:	e000e3f0 	.word	0xe000e3f0
 80181a0:	200064dc 	.word	0x200064dc
 80181a4:	e000ed0c 	.word	0xe000ed0c
 80181a8:	200064e0 	.word	0x200064e0

080181ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b08a      	sub	sp, #40	@ 0x28
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80181b4:	2300      	movs	r3, #0
 80181b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80181b8:	f7fe fb26 	bl	8016808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80181bc:	4b5c      	ldr	r3, [pc, #368]	@ (8018330 <pvPortMalloc+0x184>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d101      	bne.n	80181c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80181c4:	f000 f924 	bl	8018410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80181c8:	4b5a      	ldr	r3, [pc, #360]	@ (8018334 <pvPortMalloc+0x188>)
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	4013      	ands	r3, r2
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	f040 8095 	bne.w	8018300 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d01e      	beq.n	801821a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80181dc:	2208      	movs	r2, #8
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	4413      	add	r3, r2
 80181e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f003 0307 	and.w	r3, r3, #7
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d015      	beq.n	801821a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	f023 0307 	bic.w	r3, r3, #7
 80181f4:	3308      	adds	r3, #8
 80181f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f003 0307 	and.w	r3, r3, #7
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d00b      	beq.n	801821a <pvPortMalloc+0x6e>
	__asm volatile
 8018202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018206:	f383 8811 	msr	BASEPRI, r3
 801820a:	f3bf 8f6f 	isb	sy
 801820e:	f3bf 8f4f 	dsb	sy
 8018212:	617b      	str	r3, [r7, #20]
}
 8018214:	bf00      	nop
 8018216:	bf00      	nop
 8018218:	e7fd      	b.n	8018216 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d06f      	beq.n	8018300 <pvPortMalloc+0x154>
 8018220:	4b45      	ldr	r3, [pc, #276]	@ (8018338 <pvPortMalloc+0x18c>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	687a      	ldr	r2, [r7, #4]
 8018226:	429a      	cmp	r2, r3
 8018228:	d86a      	bhi.n	8018300 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801822a:	4b44      	ldr	r3, [pc, #272]	@ (801833c <pvPortMalloc+0x190>)
 801822c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801822e:	4b43      	ldr	r3, [pc, #268]	@ (801833c <pvPortMalloc+0x190>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018234:	e004      	b.n	8018240 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018238:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018242:	685b      	ldr	r3, [r3, #4]
 8018244:	687a      	ldr	r2, [r7, #4]
 8018246:	429a      	cmp	r2, r3
 8018248:	d903      	bls.n	8018252 <pvPortMalloc+0xa6>
 801824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d1f1      	bne.n	8018236 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018252:	4b37      	ldr	r3, [pc, #220]	@ (8018330 <pvPortMalloc+0x184>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018258:	429a      	cmp	r2, r3
 801825a:	d051      	beq.n	8018300 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801825c:	6a3b      	ldr	r3, [r7, #32]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	2208      	movs	r2, #8
 8018262:	4413      	add	r3, r2
 8018264:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018268:	681a      	ldr	r2, [r3, #0]
 801826a:	6a3b      	ldr	r3, [r7, #32]
 801826c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018270:	685a      	ldr	r2, [r3, #4]
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	1ad2      	subs	r2, r2, r3
 8018276:	2308      	movs	r3, #8
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	429a      	cmp	r2, r3
 801827c:	d920      	bls.n	80182c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801827e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	4413      	add	r3, r2
 8018284:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018286:	69bb      	ldr	r3, [r7, #24]
 8018288:	f003 0307 	and.w	r3, r3, #7
 801828c:	2b00      	cmp	r3, #0
 801828e:	d00b      	beq.n	80182a8 <pvPortMalloc+0xfc>
	__asm volatile
 8018290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018294:	f383 8811 	msr	BASEPRI, r3
 8018298:	f3bf 8f6f 	isb	sy
 801829c:	f3bf 8f4f 	dsb	sy
 80182a0:	613b      	str	r3, [r7, #16]
}
 80182a2:	bf00      	nop
 80182a4:	bf00      	nop
 80182a6:	e7fd      	b.n	80182a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80182a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182aa:	685a      	ldr	r2, [r3, #4]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	1ad2      	subs	r2, r2, r3
 80182b0:	69bb      	ldr	r3, [r7, #24]
 80182b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80182b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b6:	687a      	ldr	r2, [r7, #4]
 80182b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80182ba:	69b8      	ldr	r0, [r7, #24]
 80182bc:	f000 f90a 	bl	80184d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80182c0:	4b1d      	ldr	r3, [pc, #116]	@ (8018338 <pvPortMalloc+0x18c>)
 80182c2:	681a      	ldr	r2, [r3, #0]
 80182c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	1ad3      	subs	r3, r2, r3
 80182ca:	4a1b      	ldr	r2, [pc, #108]	@ (8018338 <pvPortMalloc+0x18c>)
 80182cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80182ce:	4b1a      	ldr	r3, [pc, #104]	@ (8018338 <pvPortMalloc+0x18c>)
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	4b1b      	ldr	r3, [pc, #108]	@ (8018340 <pvPortMalloc+0x194>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d203      	bcs.n	80182e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80182da:	4b17      	ldr	r3, [pc, #92]	@ (8018338 <pvPortMalloc+0x18c>)
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	4a18      	ldr	r2, [pc, #96]	@ (8018340 <pvPortMalloc+0x194>)
 80182e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80182e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182e4:	685a      	ldr	r2, [r3, #4]
 80182e6:	4b13      	ldr	r3, [pc, #76]	@ (8018334 <pvPortMalloc+0x188>)
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	431a      	orrs	r2, r3
 80182ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80182f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182f2:	2200      	movs	r2, #0
 80182f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80182f6:	4b13      	ldr	r3, [pc, #76]	@ (8018344 <pvPortMalloc+0x198>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	3301      	adds	r3, #1
 80182fc:	4a11      	ldr	r2, [pc, #68]	@ (8018344 <pvPortMalloc+0x198>)
 80182fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018300:	f7fe fa90 	bl	8016824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	f003 0307 	and.w	r3, r3, #7
 801830a:	2b00      	cmp	r3, #0
 801830c:	d00b      	beq.n	8018326 <pvPortMalloc+0x17a>
	__asm volatile
 801830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018312:	f383 8811 	msr	BASEPRI, r3
 8018316:	f3bf 8f6f 	isb	sy
 801831a:	f3bf 8f4f 	dsb	sy
 801831e:	60fb      	str	r3, [r7, #12]
}
 8018320:	bf00      	nop
 8018322:	bf00      	nop
 8018324:	e7fd      	b.n	8018322 <pvPortMalloc+0x176>
	return pvReturn;
 8018326:	69fb      	ldr	r3, [r7, #28]
}
 8018328:	4618      	mov	r0, r3
 801832a:	3728      	adds	r7, #40	@ 0x28
 801832c:	46bd      	mov	sp, r7
 801832e:	bd80      	pop	{r7, pc}
 8018330:	2000a0ec 	.word	0x2000a0ec
 8018334:	2000a100 	.word	0x2000a100
 8018338:	2000a0f0 	.word	0x2000a0f0
 801833c:	2000a0e4 	.word	0x2000a0e4
 8018340:	2000a0f4 	.word	0x2000a0f4
 8018344:	2000a0f8 	.word	0x2000a0f8

08018348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b086      	sub	sp, #24
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d04f      	beq.n	80183fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801835a:	2308      	movs	r3, #8
 801835c:	425b      	negs	r3, r3
 801835e:	697a      	ldr	r2, [r7, #20]
 8018360:	4413      	add	r3, r2
 8018362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018368:	693b      	ldr	r3, [r7, #16]
 801836a:	685a      	ldr	r2, [r3, #4]
 801836c:	4b25      	ldr	r3, [pc, #148]	@ (8018404 <vPortFree+0xbc>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	4013      	ands	r3, r2
 8018372:	2b00      	cmp	r3, #0
 8018374:	d10b      	bne.n	801838e <vPortFree+0x46>
	__asm volatile
 8018376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801837a:	f383 8811 	msr	BASEPRI, r3
 801837e:	f3bf 8f6f 	isb	sy
 8018382:	f3bf 8f4f 	dsb	sy
 8018386:	60fb      	str	r3, [r7, #12]
}
 8018388:	bf00      	nop
 801838a:	bf00      	nop
 801838c:	e7fd      	b.n	801838a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801838e:	693b      	ldr	r3, [r7, #16]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d00b      	beq.n	80183ae <vPortFree+0x66>
	__asm volatile
 8018396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801839a:	f383 8811 	msr	BASEPRI, r3
 801839e:	f3bf 8f6f 	isb	sy
 80183a2:	f3bf 8f4f 	dsb	sy
 80183a6:	60bb      	str	r3, [r7, #8]
}
 80183a8:	bf00      	nop
 80183aa:	bf00      	nop
 80183ac:	e7fd      	b.n	80183aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80183ae:	693b      	ldr	r3, [r7, #16]
 80183b0:	685a      	ldr	r2, [r3, #4]
 80183b2:	4b14      	ldr	r3, [pc, #80]	@ (8018404 <vPortFree+0xbc>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	4013      	ands	r3, r2
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d01e      	beq.n	80183fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80183bc:	693b      	ldr	r3, [r7, #16]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d11a      	bne.n	80183fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80183c4:	693b      	ldr	r3, [r7, #16]
 80183c6:	685a      	ldr	r2, [r3, #4]
 80183c8:	4b0e      	ldr	r3, [pc, #56]	@ (8018404 <vPortFree+0xbc>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	43db      	mvns	r3, r3
 80183ce:	401a      	ands	r2, r3
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80183d4:	f7fe fa18 	bl	8016808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80183d8:	693b      	ldr	r3, [r7, #16]
 80183da:	685a      	ldr	r2, [r3, #4]
 80183dc:	4b0a      	ldr	r3, [pc, #40]	@ (8018408 <vPortFree+0xc0>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	4413      	add	r3, r2
 80183e2:	4a09      	ldr	r2, [pc, #36]	@ (8018408 <vPortFree+0xc0>)
 80183e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80183e6:	6938      	ldr	r0, [r7, #16]
 80183e8:	f000 f874 	bl	80184d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80183ec:	4b07      	ldr	r3, [pc, #28]	@ (801840c <vPortFree+0xc4>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	3301      	adds	r3, #1
 80183f2:	4a06      	ldr	r2, [pc, #24]	@ (801840c <vPortFree+0xc4>)
 80183f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80183f6:	f7fe fa15 	bl	8016824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80183fa:	bf00      	nop
 80183fc:	3718      	adds	r7, #24
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	2000a100 	.word	0x2000a100
 8018408:	2000a0f0 	.word	0x2000a0f0
 801840c:	2000a0fc 	.word	0x2000a0fc

08018410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018410:	b480      	push	{r7}
 8018412:	b085      	sub	sp, #20
 8018414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018416:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801841a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801841c:	4b27      	ldr	r3, [pc, #156]	@ (80184bc <prvHeapInit+0xac>)
 801841e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	f003 0307 	and.w	r3, r3, #7
 8018426:	2b00      	cmp	r3, #0
 8018428:	d00c      	beq.n	8018444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	3307      	adds	r3, #7
 801842e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	f023 0307 	bic.w	r3, r3, #7
 8018436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018438:	68ba      	ldr	r2, [r7, #8]
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	1ad3      	subs	r3, r2, r3
 801843e:	4a1f      	ldr	r2, [pc, #124]	@ (80184bc <prvHeapInit+0xac>)
 8018440:	4413      	add	r3, r2
 8018442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018448:	4a1d      	ldr	r2, [pc, #116]	@ (80184c0 <prvHeapInit+0xb0>)
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801844e:	4b1c      	ldr	r3, [pc, #112]	@ (80184c0 <prvHeapInit+0xb0>)
 8018450:	2200      	movs	r2, #0
 8018452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	68ba      	ldr	r2, [r7, #8]
 8018458:	4413      	add	r3, r2
 801845a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801845c:	2208      	movs	r2, #8
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	1a9b      	subs	r3, r3, r2
 8018462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	f023 0307 	bic.w	r3, r3, #7
 801846a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	4a15      	ldr	r2, [pc, #84]	@ (80184c4 <prvHeapInit+0xb4>)
 8018470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018472:	4b14      	ldr	r3, [pc, #80]	@ (80184c4 <prvHeapInit+0xb4>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	2200      	movs	r2, #0
 8018478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801847a:	4b12      	ldr	r3, [pc, #72]	@ (80184c4 <prvHeapInit+0xb4>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2200      	movs	r2, #0
 8018480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	68fa      	ldr	r2, [r7, #12]
 801848a:	1ad2      	subs	r2, r2, r3
 801848c:	683b      	ldr	r3, [r7, #0]
 801848e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018490:	4b0c      	ldr	r3, [pc, #48]	@ (80184c4 <prvHeapInit+0xb4>)
 8018492:	681a      	ldr	r2, [r3, #0]
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	4a0a      	ldr	r2, [pc, #40]	@ (80184c8 <prvHeapInit+0xb8>)
 801849e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80184a0:	683b      	ldr	r3, [r7, #0]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	4a09      	ldr	r2, [pc, #36]	@ (80184cc <prvHeapInit+0xbc>)
 80184a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80184a8:	4b09      	ldr	r3, [pc, #36]	@ (80184d0 <prvHeapInit+0xc0>)
 80184aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80184ae:	601a      	str	r2, [r3, #0]
}
 80184b0:	bf00      	nop
 80184b2:	3714      	adds	r7, #20
 80184b4:	46bd      	mov	sp, r7
 80184b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ba:	4770      	bx	lr
 80184bc:	200064e4 	.word	0x200064e4
 80184c0:	2000a0e4 	.word	0x2000a0e4
 80184c4:	2000a0ec 	.word	0x2000a0ec
 80184c8:	2000a0f4 	.word	0x2000a0f4
 80184cc:	2000a0f0 	.word	0x2000a0f0
 80184d0:	2000a100 	.word	0x2000a100

080184d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80184d4:	b480      	push	{r7}
 80184d6:	b085      	sub	sp, #20
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80184dc:	4b28      	ldr	r3, [pc, #160]	@ (8018580 <prvInsertBlockIntoFreeList+0xac>)
 80184de:	60fb      	str	r3, [r7, #12]
 80184e0:	e002      	b.n	80184e8 <prvInsertBlockIntoFreeList+0x14>
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	60fb      	str	r3, [r7, #12]
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	687a      	ldr	r2, [r7, #4]
 80184ee:	429a      	cmp	r2, r3
 80184f0:	d8f7      	bhi.n	80184e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	685b      	ldr	r3, [r3, #4]
 80184fa:	68ba      	ldr	r2, [r7, #8]
 80184fc:	4413      	add	r3, r2
 80184fe:	687a      	ldr	r2, [r7, #4]
 8018500:	429a      	cmp	r2, r3
 8018502:	d108      	bne.n	8018516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	685a      	ldr	r2, [r3, #4]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	685b      	ldr	r3, [r3, #4]
 801850c:	441a      	add	r2, r3
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	685b      	ldr	r3, [r3, #4]
 801851e:	68ba      	ldr	r2, [r7, #8]
 8018520:	441a      	add	r2, r3
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	429a      	cmp	r2, r3
 8018528:	d118      	bne.n	801855c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	4b15      	ldr	r3, [pc, #84]	@ (8018584 <prvInsertBlockIntoFreeList+0xb0>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	429a      	cmp	r2, r3
 8018534:	d00d      	beq.n	8018552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	685a      	ldr	r2, [r3, #4]
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	685b      	ldr	r3, [r3, #4]
 8018540:	441a      	add	r2, r3
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	601a      	str	r2, [r3, #0]
 8018550:	e008      	b.n	8018564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018552:	4b0c      	ldr	r3, [pc, #48]	@ (8018584 <prvInsertBlockIntoFreeList+0xb0>)
 8018554:	681a      	ldr	r2, [r3, #0]
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	601a      	str	r2, [r3, #0]
 801855a:	e003      	b.n	8018564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	681a      	ldr	r2, [r3, #0]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018564:	68fa      	ldr	r2, [r7, #12]
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	429a      	cmp	r2, r3
 801856a:	d002      	beq.n	8018572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018572:	bf00      	nop
 8018574:	3714      	adds	r7, #20
 8018576:	46bd      	mov	sp, r7
 8018578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857c:	4770      	bx	lr
 801857e:	bf00      	nop
 8018580:	2000a0e4 	.word	0x2000a0e4
 8018584:	2000a0ec 	.word	0x2000a0ec

08018588 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801858c:	2200      	movs	r2, #0
 801858e:	4912      	ldr	r1, [pc, #72]	@ (80185d8 <MX_USB_DEVICE_Init+0x50>)
 8018590:	4812      	ldr	r0, [pc, #72]	@ (80185dc <MX_USB_DEVICE_Init+0x54>)
 8018592:	f7fb fb1f 	bl	8013bd4 <USBD_Init>
 8018596:	4603      	mov	r3, r0
 8018598:	2b00      	cmp	r3, #0
 801859a:	d001      	beq.n	80185a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801859c:	f7f1 fd26 	bl	8009fec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80185a0:	490f      	ldr	r1, [pc, #60]	@ (80185e0 <MX_USB_DEVICE_Init+0x58>)
 80185a2:	480e      	ldr	r0, [pc, #56]	@ (80185dc <MX_USB_DEVICE_Init+0x54>)
 80185a4:	f7fb fb46 	bl	8013c34 <USBD_RegisterClass>
 80185a8:	4603      	mov	r3, r0
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d001      	beq.n	80185b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80185ae:	f7f1 fd1d 	bl	8009fec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80185b2:	490c      	ldr	r1, [pc, #48]	@ (80185e4 <MX_USB_DEVICE_Init+0x5c>)
 80185b4:	4809      	ldr	r0, [pc, #36]	@ (80185dc <MX_USB_DEVICE_Init+0x54>)
 80185b6:	f7fb fa3d 	bl	8013a34 <USBD_CDC_RegisterInterface>
 80185ba:	4603      	mov	r3, r0
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d001      	beq.n	80185c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80185c0:	f7f1 fd14 	bl	8009fec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80185c4:	4805      	ldr	r0, [pc, #20]	@ (80185dc <MX_USB_DEVICE_Init+0x54>)
 80185c6:	f7fb fb6b 	bl	8013ca0 <USBD_Start>
 80185ca:	4603      	mov	r3, r0
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d001      	beq.n	80185d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80185d0:	f7f1 fd0c 	bl	8009fec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80185d4:	bf00      	nop
 80185d6:	bd80      	pop	{r7, pc}
 80185d8:	20000108 	.word	0x20000108
 80185dc:	2000a104 	.word	0x2000a104
 80185e0:	20000070 	.word	0x20000070
 80185e4:	200000f4 	.word	0x200000f4

080185e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b08a      	sub	sp, #40	@ 0x28
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	2300      	movs	r3, #0
 80185f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80185f2:	f3ef 8310 	mrs	r3, PRIMASK
 80185f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80185f8:	69fb      	ldr	r3, [r7, #28]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 80185fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80185fc:	b672      	cpsid	i
}
 80185fe:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018600:	f3bf 8f4f 	dsb	sy
}
 8018604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018606:	f3bf 8f6f 	isb	sy
}
 801860a:	bf00      	nop
    return old;
 801860c:	69bb      	ldr	r3, [r7, #24]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 801860e:	617b      	str	r3, [r7, #20]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8018610:	6a3b      	ldr	r3, [r7, #32]
 8018612:	2b01      	cmp	r3, #1
 8018614:	d001      	beq.n	801861a <CDC_Init_FS+0x32>
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	e000      	b.n	801861c <CDC_Init_FS+0x34>
 801861a:	2300      	movs	r3, #0
  /* USER CODE BEGIN 3 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 801861c:	607b      	str	r3, [r7, #4]
 801861e:	2301      	movs	r3, #1
 8018620:	627b      	str	r3, [r7, #36]	@ 0x24
 8018622:	e007      	b.n	8018634 <CDC_Init_FS+0x4c>
	{
		ring_buffer_init(&rx_ringbuffer, rx_buffer, RX_BUFFER_SIZE);
 8018624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018628:	4917      	ldr	r1, [pc, #92]	@ (8018688 <CDC_Init_FS+0xa0>)
 801862a:	4818      	ldr	r0, [pc, #96]	@ (801868c <CDC_Init_FS+0xa4>)
 801862c:	f7f0 fcd4 	bl	8008fd8 <ring_buffer_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8018630:	2300      	movs	r3, #0
 8018632:	627b      	str	r3, [r7, #36]	@ 0x24
 8018634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018636:	2b00      	cmp	r3, #0
 8018638:	d1f4      	bne.n	8018624 <CDC_Init_FS+0x3c>
 801863a:	1d3b      	adds	r3, r7, #4
 801863c:	613b      	str	r3, [r7, #16]
	exit_critical(*sreg);		// restore saved I-bit
 801863e:	693b      	ldr	r3, [r7, #16]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8018644:	f3bf 8f5f 	dmb	sy
}
 8018648:	bf00      	nop
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	f383 8810 	msr	PRIMASK, r3
}
 8018654:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018656:	f3bf 8f4f 	dsb	sy
}
 801865a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801865c:	f3bf 8f6f 	isb	sy
}
 8018660:	bf00      	nop
}
 8018662:	bf00      	nop
}
 8018664:	bf00      	nop
	}


  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018666:	2200      	movs	r2, #0
 8018668:	4909      	ldr	r1, [pc, #36]	@ (8018690 <CDC_Init_FS+0xa8>)
 801866a:	480a      	ldr	r0, [pc, #40]	@ (8018694 <CDC_Init_FS+0xac>)
 801866c:	f7fb f9fc 	bl	8013a68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018670:	4909      	ldr	r1, [pc, #36]	@ (8018698 <CDC_Init_FS+0xb0>)
 8018672:	4808      	ldr	r0, [pc, #32]	@ (8018694 <CDC_Init_FS+0xac>)
 8018674:	f7fb fa1a 	bl	8013aac <USBD_CDC_SetRxBuffer>

  // Arm the first OUT transfer so the host can send data
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018678:	4806      	ldr	r0, [pc, #24]	@ (8018694 <CDC_Init_FS+0xac>)
 801867a:	f7fb fa75 	bl	8013b68 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 801867e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018680:	4618      	mov	r0, r3
 8018682:	3728      	adds	r7, #40	@ 0x28
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}
 8018688:	2000b3e0 	.word	0x2000b3e0
 801868c:	2000b7e0 	.word	0x2000b7e0
 8018690:	2000abe0 	.word	0x2000abe0
 8018694:	2000a104 	.word	0x2000a104
 8018698:	2000a3e0 	.word	0x2000a3e0

0801869c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b08a      	sub	sp, #40	@ 0x28
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	2300      	movs	r3, #0
 80186a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80186a6:	f3ef 8310 	mrs	r3, PRIMASK
 80186aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80186ac:	69fb      	ldr	r3, [r7, #28]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 80186ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80186b0:	b672      	cpsid	i
}
 80186b2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80186b4:	f3bf 8f4f 	dsb	sy
}
 80186b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80186ba:	f3bf 8f6f 	isb	sy
}
 80186be:	bf00      	nop
    return old;
 80186c0:	69bb      	ldr	r3, [r7, #24]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 80186c2:	617b      	str	r3, [r7, #20]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 80186c4:	6a3b      	ldr	r3, [r7, #32]
 80186c6:	2b01      	cmp	r3, #1
 80186c8:	d001      	beq.n	80186ce <CDC_DeInit_FS+0x32>
 80186ca:	697b      	ldr	r3, [r7, #20]
 80186cc:	e000      	b.n	80186d0 <CDC_DeInit_FS+0x34>
 80186ce:	2300      	movs	r3, #0
  /* USER CODE BEGIN 4 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80186d0:	607b      	str	r3, [r7, #4]
 80186d2:	2301      	movs	r3, #1
 80186d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80186d6:	e004      	b.n	80186e2 <CDC_DeInit_FS+0x46>
	{
		ring_buffer_clear(&rx_ringbuffer);
 80186d8:	4811      	ldr	r0, [pc, #68]	@ (8018720 <CDC_DeInit_FS+0x84>)
 80186da:	f7f0 fe0a 	bl	80092f2 <ring_buffer_clear>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80186de:	2300      	movs	r3, #0
 80186e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80186e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d1f7      	bne.n	80186d8 <CDC_DeInit_FS+0x3c>
 80186e8:	1d3b      	adds	r3, r7, #4
 80186ea:	613b      	str	r3, [r7, #16]
	exit_critical(*sreg);		// restore saved I-bit
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80186f2:	f3bf 8f5f 	dmb	sy
}
 80186f6:	bf00      	nop
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	f383 8810 	msr	PRIMASK, r3
}
 8018702:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018704:	f3bf 8f4f 	dsb	sy
}
 8018708:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801870a:	f3bf 8f6f 	isb	sy
}
 801870e:	bf00      	nop
}
 8018710:	bf00      	nop
}
 8018712:	bf00      	nop
	}

  return (USBD_OK);
 8018714:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018716:	4618      	mov	r0, r3
 8018718:	3728      	adds	r7, #40	@ 0x28
 801871a:	46bd      	mov	sp, r7
 801871c:	bd80      	pop	{r7, pc}
 801871e:	bf00      	nop
 8018720:	2000b7e0 	.word	0x2000b7e0

08018724 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018724:	b480      	push	{r7}
 8018726:	b083      	sub	sp, #12
 8018728:	af00      	add	r7, sp, #0
 801872a:	4603      	mov	r3, r0
 801872c:	6039      	str	r1, [r7, #0]
 801872e:	71fb      	strb	r3, [r7, #7]
 8018730:	4613      	mov	r3, r2
 8018732:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018734:	79fb      	ldrb	r3, [r7, #7]
 8018736:	2b23      	cmp	r3, #35	@ 0x23
 8018738:	d84a      	bhi.n	80187d0 <CDC_Control_FS+0xac>
 801873a:	a201      	add	r2, pc, #4	@ (adr r2, 8018740 <CDC_Control_FS+0x1c>)
 801873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018740:	080187d1 	.word	0x080187d1
 8018744:	080187d1 	.word	0x080187d1
 8018748:	080187d1 	.word	0x080187d1
 801874c:	080187d1 	.word	0x080187d1
 8018750:	080187d1 	.word	0x080187d1
 8018754:	080187d1 	.word	0x080187d1
 8018758:	080187d1 	.word	0x080187d1
 801875c:	080187d1 	.word	0x080187d1
 8018760:	080187d1 	.word	0x080187d1
 8018764:	080187d1 	.word	0x080187d1
 8018768:	080187d1 	.word	0x080187d1
 801876c:	080187d1 	.word	0x080187d1
 8018770:	080187d1 	.word	0x080187d1
 8018774:	080187d1 	.word	0x080187d1
 8018778:	080187d1 	.word	0x080187d1
 801877c:	080187d1 	.word	0x080187d1
 8018780:	080187d1 	.word	0x080187d1
 8018784:	080187d1 	.word	0x080187d1
 8018788:	080187d1 	.word	0x080187d1
 801878c:	080187d1 	.word	0x080187d1
 8018790:	080187d1 	.word	0x080187d1
 8018794:	080187d1 	.word	0x080187d1
 8018798:	080187d1 	.word	0x080187d1
 801879c:	080187d1 	.word	0x080187d1
 80187a0:	080187d1 	.word	0x080187d1
 80187a4:	080187d1 	.word	0x080187d1
 80187a8:	080187d1 	.word	0x080187d1
 80187ac:	080187d1 	.word	0x080187d1
 80187b0:	080187d1 	.word	0x080187d1
 80187b4:	080187d1 	.word	0x080187d1
 80187b8:	080187d1 	.word	0x080187d1
 80187bc:	080187d1 	.word	0x080187d1
 80187c0:	080187d1 	.word	0x080187d1
 80187c4:	080187d1 	.word	0x080187d1
 80187c8:	080187d1 	.word	0x080187d1
 80187cc:	080187d1 	.word	0x080187d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80187d0:	bf00      	nop
  }

  return (USBD_OK);
 80187d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	370c      	adds	r7, #12
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr

080187e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b08c      	sub	sp, #48	@ 0x30
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	6039      	str	r1, [r7, #0]
 80187ea:	2300      	movs	r3, #0
 80187ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80187ee:	f3ef 8310 	mrs	r3, PRIMASK
 80187f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80187f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 80187f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80187f8:	b672      	cpsid	i
}
 80187fa:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80187fc:	f3bf 8f4f 	dsb	sy
}
 8018800:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018802:	f3bf 8f6f 	isb	sy
}
 8018806:	bf00      	nop
    return old;
 8018808:	6a3b      	ldr	r3, [r7, #32]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 801880a:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 801880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801880e:	2b01      	cmp	r3, #1
 8018810:	d001      	beq.n	8018816 <CDC_Receive_FS+0x36>
 8018812:	69fb      	ldr	r3, [r7, #28]
 8018814:	e000      	b.n	8018818 <CDC_Receive_FS+0x38>
 8018816:	2300      	movs	r3, #0
  /* USER CODE BEGIN 6 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8018818:	60fb      	str	r3, [r7, #12]
 801881a:	2301      	movs	r3, #1
 801881c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801881e:	e008      	b.n	8018832 <CDC_Receive_FS+0x52>
	{
		ring_buffer_enqueue_arr(&rx_ringbuffer, Buf, *Len);
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	461a      	mov	r2, r3
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	4815      	ldr	r0, [pc, #84]	@ (8018880 <CDC_Receive_FS+0xa0>)
 801882a:	f7f0 fc8c 	bl	8009146 <ring_buffer_enqueue_arr>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 801882e:	2300      	movs	r3, #0
 8018830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018834:	2b00      	cmp	r3, #0
 8018836:	d1f3      	bne.n	8018820 <CDC_Receive_FS+0x40>
 8018838:	f107 030c 	add.w	r3, r7, #12
 801883c:	61bb      	str	r3, [r7, #24]
	exit_critical(*sreg);		// restore saved I-bit
 801883e:	69bb      	ldr	r3, [r7, #24]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8018844:	f3bf 8f5f 	dmb	sy
}
 8018848:	bf00      	nop
 801884a:	697b      	ldr	r3, [r7, #20]
 801884c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801884e:	693b      	ldr	r3, [r7, #16]
 8018850:	f383 8810 	msr	PRIMASK, r3
}
 8018854:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018856:	f3bf 8f4f 	dsb	sy
}
 801885a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801885c:	f3bf 8f6f 	isb	sy
}
 8018860:	bf00      	nop
}
 8018862:	bf00      	nop
}
 8018864:	bf00      	nop
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018866:	4907      	ldr	r1, [pc, #28]	@ (8018884 <CDC_Receive_FS+0xa4>)
 8018868:	4807      	ldr	r0, [pc, #28]	@ (8018888 <CDC_Receive_FS+0xa8>)
 801886a:	f7fb f91f 	bl	8013aac <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801886e:	4806      	ldr	r0, [pc, #24]	@ (8018888 <CDC_Receive_FS+0xa8>)
 8018870:	f7fb f97a 	bl	8013b68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018874:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018876:	4618      	mov	r0, r3
 8018878:	3730      	adds	r7, #48	@ 0x30
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}
 801887e:	bf00      	nop
 8018880:	2000b7e0 	.word	0x2000b7e0
 8018884:	2000a3e0 	.word	0x2000a3e0
 8018888:	2000a104 	.word	0x2000a104

0801888c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b084      	sub	sp, #16
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
 8018894:	460b      	mov	r3, r1
 8018896:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018898:	2300      	movs	r3, #0
 801889a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801889c:	4b0d      	ldr	r3, [pc, #52]	@ (80188d4 <CDC_Transmit_FS+0x48>)
 801889e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80188a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d001      	beq.n	80188b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80188ae:	2301      	movs	r3, #1
 80188b0:	e00b      	b.n	80188ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80188b2:	887b      	ldrh	r3, [r7, #2]
 80188b4:	461a      	mov	r2, r3
 80188b6:	6879      	ldr	r1, [r7, #4]
 80188b8:	4806      	ldr	r0, [pc, #24]	@ (80188d4 <CDC_Transmit_FS+0x48>)
 80188ba:	f7fb f8d5 	bl	8013a68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80188be:	4805      	ldr	r0, [pc, #20]	@ (80188d4 <CDC_Transmit_FS+0x48>)
 80188c0:	f7fb f912 	bl	8013ae8 <USBD_CDC_TransmitPacket>
 80188c4:	4603      	mov	r3, r0
 80188c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80188c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3710      	adds	r7, #16
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}
 80188d2:	bf00      	nop
 80188d4:	2000a104 	.word	0x2000a104

080188d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80188d8:	b480      	push	{r7}
 80188da:	b087      	sub	sp, #28
 80188dc:	af00      	add	r7, sp, #0
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	4613      	mov	r3, r2
 80188e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80188e6:	2300      	movs	r3, #0
 80188e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80188ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188ee:	4618      	mov	r0, r3
 80188f0:	371c      	adds	r7, #28
 80188f2:	46bd      	mov	sp, r7
 80188f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f8:	4770      	bx	lr
	...

080188fc <CDC_recv_data>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

size_t CDC_recv_data(char* out_buf, size_t max_len)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b08c      	sub	sp, #48	@ 0x30
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d002      	beq.n	8018912 <CDC_recv_data+0x16>
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d101      	bne.n	8018916 <CDC_recv_data+0x1a>
        return 0;
 8018912:	2300      	movs	r3, #0
 8018914:	e03d      	b.n	8018992 <CDC_recv_data+0x96>
 8018916:	2300      	movs	r3, #0
 8018918:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801891a:	f3ef 8310 	mrs	r3, PRIMASK
 801891e:	623b      	str	r3, [r7, #32]
  return(result);
 8018920:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8018922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018924:	b672      	cpsid	i
}
 8018926:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018928:	f3bf 8f4f 	dsb	sy
}
 801892c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801892e:	f3bf 8f6f 	isb	sy
}
 8018932:	bf00      	nop
    return old;
 8018934:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8018936:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8018938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801893a:	2b01      	cmp	r3, #1
 801893c:	d001      	beq.n	8018942 <CDC_recv_data+0x46>
 801893e:	69bb      	ldr	r3, [r7, #24]
 8018940:	e000      	b.n	8018944 <CDC_recv_data+0x48>
 8018942:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8018944:	60bb      	str	r3, [r7, #8]
 8018946:	2301      	movs	r3, #1
 8018948:	62bb      	str	r3, [r7, #40]	@ 0x28
 801894a:	e007      	b.n	801895c <CDC_recv_data+0x60>
    {
    	bytes_read = ring_buffer_dequeue_arr(&rx_ringbuffer, (uint8_t*)out_buf, max_len);
 801894c:	683a      	ldr	r2, [r7, #0]
 801894e:	6879      	ldr	r1, [r7, #4]
 8018950:	4812      	ldr	r0, [pc, #72]	@ (801899c <CDC_recv_data+0xa0>)
 8018952:	f7f0 fc52 	bl	80091fa <ring_buffer_dequeue_arr>
 8018956:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8018958:	2300      	movs	r3, #0
 801895a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801895e:	2b00      	cmp	r3, #0
 8018960:	d1f4      	bne.n	801894c <CDC_recv_data+0x50>
 8018962:	f107 0308 	add.w	r3, r7, #8
 8018966:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 8018968:	697b      	ldr	r3, [r7, #20]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 801896e:	f3bf 8f5f 	dmb	sy
}
 8018972:	bf00      	nop
 8018974:	693b      	ldr	r3, [r7, #16]
 8018976:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	f383 8810 	msr	PRIMASK, r3
}
 801897e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8018980:	f3bf 8f4f 	dsb	sy
}
 8018984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018986:	f3bf 8f6f 	isb	sy
}
 801898a:	bf00      	nop
}
 801898c:	bf00      	nop
}
 801898e:	bf00      	nop
    }

    return bytes_read;
 8018990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018992:	4618      	mov	r0, r3
 8018994:	3730      	adds	r7, #48	@ 0x30
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}
 801899a:	bf00      	nop
 801899c:	2000b7e0 	.word	0x2000b7e0

080189a0 <usb_printf>:
    return used;
}
#include "stdarg.h"
char usb_printf_buffer[512];
void usb_printf(const char *fmt, ...)
{
 80189a0:	b40f      	push	{r0, r1, r2, r3}
 80189a2:	b580      	push	{r7, lr}
 80189a4:	b082      	sub	sp, #8
 80189a6:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 80189a8:	f107 0314 	add.w	r3, r7, #20
 80189ac:	607b      	str	r3, [r7, #4]
    vsnprintf(usb_printf_buffer, sizeof(usb_printf_buffer), fmt, args);
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	693a      	ldr	r2, [r7, #16]
 80189b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80189b6:	480c      	ldr	r0, [pc, #48]	@ (80189e8 <usb_printf+0x48>)
 80189b8:	f003 fb0a 	bl	801bfd0 <vsniprintf>
    va_end(args);

    // wait until previous transmission is done
    while (CDC_Transmit_FS((uint8_t*)usb_printf_buffer, strlen(usb_printf_buffer)) == USBD_BUSY)
 80189bc:	bf00      	nop
 80189be:	480a      	ldr	r0, [pc, #40]	@ (80189e8 <usb_printf+0x48>)
 80189c0:	f7e7 fc66 	bl	8000290 <strlen>
 80189c4:	4603      	mov	r3, r0
 80189c6:	b29b      	uxth	r3, r3
 80189c8:	4619      	mov	r1, r3
 80189ca:	4807      	ldr	r0, [pc, #28]	@ (80189e8 <usb_printf+0x48>)
 80189cc:	f7ff ff5e 	bl	801888c <CDC_Transmit_FS>
 80189d0:	4603      	mov	r3, r0
 80189d2:	2b01      	cmp	r3, #1
 80189d4:	d0f3      	beq.n	80189be <usb_printf+0x1e>
        ;  // simple blocking retry
}
 80189d6:	bf00      	nop
 80189d8:	bf00      	nop
 80189da:	3708      	adds	r7, #8
 80189dc:	46bd      	mov	sp, r7
 80189de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80189e2:	b004      	add	sp, #16
 80189e4:	4770      	bx	lr
 80189e6:	bf00      	nop
 80189e8:	2000b7f0 	.word	0x2000b7f0

080189ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189ec:	b480      	push	{r7}
 80189ee:	b083      	sub	sp, #12
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	4603      	mov	r3, r0
 80189f4:	6039      	str	r1, [r7, #0]
 80189f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	2212      	movs	r2, #18
 80189fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80189fe:	4b03      	ldr	r3, [pc, #12]	@ (8018a0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	370c      	adds	r7, #12
 8018a04:	46bd      	mov	sp, r7
 8018a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0a:	4770      	bx	lr
 8018a0c:	20000124 	.word	0x20000124

08018a10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a10:	b480      	push	{r7}
 8018a12:	b083      	sub	sp, #12
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	4603      	mov	r3, r0
 8018a18:	6039      	str	r1, [r7, #0]
 8018a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	2204      	movs	r2, #4
 8018a20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018a22:	4b03      	ldr	r3, [pc, #12]	@ (8018a30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	370c      	adds	r7, #12
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr
 8018a30:	20000138 	.word	0x20000138

08018a34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b082      	sub	sp, #8
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	6039      	str	r1, [r7, #0]
 8018a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a40:	79fb      	ldrb	r3, [r7, #7]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d105      	bne.n	8018a52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018a46:	683a      	ldr	r2, [r7, #0]
 8018a48:	4907      	ldr	r1, [pc, #28]	@ (8018a68 <USBD_FS_ProductStrDescriptor+0x34>)
 8018a4a:	4808      	ldr	r0, [pc, #32]	@ (8018a6c <USBD_FS_ProductStrDescriptor+0x38>)
 8018a4c:	f7fc fad8 	bl	8015000 <USBD_GetString>
 8018a50:	e004      	b.n	8018a5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018a52:	683a      	ldr	r2, [r7, #0]
 8018a54:	4904      	ldr	r1, [pc, #16]	@ (8018a68 <USBD_FS_ProductStrDescriptor+0x34>)
 8018a56:	4805      	ldr	r0, [pc, #20]	@ (8018a6c <USBD_FS_ProductStrDescriptor+0x38>)
 8018a58:	f7fc fad2 	bl	8015000 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a5c:	4b02      	ldr	r3, [pc, #8]	@ (8018a68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3708      	adds	r7, #8
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	2000b9f0 	.word	0x2000b9f0
 8018a6c:	08022000 	.word	0x08022000

08018a70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b082      	sub	sp, #8
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	4603      	mov	r3, r0
 8018a78:	6039      	str	r1, [r7, #0]
 8018a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018a7c:	683a      	ldr	r2, [r7, #0]
 8018a7e:	4904      	ldr	r1, [pc, #16]	@ (8018a90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018a80:	4804      	ldr	r0, [pc, #16]	@ (8018a94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018a82:	f7fc fabd 	bl	8015000 <USBD_GetString>
  return USBD_StrDesc;
 8018a86:	4b02      	ldr	r3, [pc, #8]	@ (8018a90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3708      	adds	r7, #8
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}
 8018a90:	2000b9f0 	.word	0x2000b9f0
 8018a94:	08022018 	.word	0x08022018

08018a98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b082      	sub	sp, #8
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	6039      	str	r1, [r7, #0]
 8018aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	221a      	movs	r2, #26
 8018aa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018aaa:	f000 f843 	bl	8018b34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018aae:	4b02      	ldr	r3, [pc, #8]	@ (8018ab8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	2000013c 	.word	0x2000013c

08018abc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	6039      	str	r1, [r7, #0]
 8018ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018ac8:	79fb      	ldrb	r3, [r7, #7]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d105      	bne.n	8018ada <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018ace:	683a      	ldr	r2, [r7, #0]
 8018ad0:	4907      	ldr	r1, [pc, #28]	@ (8018af0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018ad2:	4808      	ldr	r0, [pc, #32]	@ (8018af4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018ad4:	f7fc fa94 	bl	8015000 <USBD_GetString>
 8018ad8:	e004      	b.n	8018ae4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018ada:	683a      	ldr	r2, [r7, #0]
 8018adc:	4904      	ldr	r1, [pc, #16]	@ (8018af0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018ade:	4805      	ldr	r0, [pc, #20]	@ (8018af4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018ae0:	f7fc fa8e 	bl	8015000 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018ae4:	4b02      	ldr	r3, [pc, #8]	@ (8018af0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	2000b9f0 	.word	0x2000b9f0
 8018af4:	0802202c 	.word	0x0802202c

08018af8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	4603      	mov	r3, r0
 8018b00:	6039      	str	r1, [r7, #0]
 8018b02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b04:	79fb      	ldrb	r3, [r7, #7]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d105      	bne.n	8018b16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b0a:	683a      	ldr	r2, [r7, #0]
 8018b0c:	4907      	ldr	r1, [pc, #28]	@ (8018b2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b0e:	4808      	ldr	r0, [pc, #32]	@ (8018b30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b10:	f7fc fa76 	bl	8015000 <USBD_GetString>
 8018b14:	e004      	b.n	8018b20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b16:	683a      	ldr	r2, [r7, #0]
 8018b18:	4904      	ldr	r1, [pc, #16]	@ (8018b2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b1a:	4805      	ldr	r0, [pc, #20]	@ (8018b30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b1c:	f7fc fa70 	bl	8015000 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b20:	4b02      	ldr	r3, [pc, #8]	@ (8018b2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018b22:	4618      	mov	r0, r3
 8018b24:	3708      	adds	r7, #8
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	2000b9f0 	.word	0x2000b9f0
 8018b30:	08022038 	.word	0x08022038

08018b34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b084      	sub	sp, #16
 8018b38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8018b78 <Get_SerialNum+0x44>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018b40:	4b0e      	ldr	r3, [pc, #56]	@ (8018b7c <Get_SerialNum+0x48>)
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018b46:	4b0e      	ldr	r3, [pc, #56]	@ (8018b80 <Get_SerialNum+0x4c>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	4413      	add	r3, r2
 8018b52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d009      	beq.n	8018b6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018b5a:	2208      	movs	r2, #8
 8018b5c:	4909      	ldr	r1, [pc, #36]	@ (8018b84 <Get_SerialNum+0x50>)
 8018b5e:	68f8      	ldr	r0, [r7, #12]
 8018b60:	f000 f814 	bl	8018b8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018b64:	2204      	movs	r2, #4
 8018b66:	4908      	ldr	r1, [pc, #32]	@ (8018b88 <Get_SerialNum+0x54>)
 8018b68:	68b8      	ldr	r0, [r7, #8]
 8018b6a:	f000 f80f 	bl	8018b8c <IntToUnicode>
  }
}
 8018b6e:	bf00      	nop
 8018b70:	3710      	adds	r7, #16
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}
 8018b76:	bf00      	nop
 8018b78:	1fff7a10 	.word	0x1fff7a10
 8018b7c:	1fff7a14 	.word	0x1fff7a14
 8018b80:	1fff7a18 	.word	0x1fff7a18
 8018b84:	2000013e 	.word	0x2000013e
 8018b88:	2000014e 	.word	0x2000014e

08018b8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018b8c:	b480      	push	{r7}
 8018b8e:	b087      	sub	sp, #28
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	4613      	mov	r3, r2
 8018b98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	75fb      	strb	r3, [r7, #23]
 8018ba2:	e027      	b.n	8018bf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	0f1b      	lsrs	r3, r3, #28
 8018ba8:	2b09      	cmp	r3, #9
 8018baa:	d80b      	bhi.n	8018bc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	0f1b      	lsrs	r3, r3, #28
 8018bb0:	b2da      	uxtb	r2, r3
 8018bb2:	7dfb      	ldrb	r3, [r7, #23]
 8018bb4:	005b      	lsls	r3, r3, #1
 8018bb6:	4619      	mov	r1, r3
 8018bb8:	68bb      	ldr	r3, [r7, #8]
 8018bba:	440b      	add	r3, r1
 8018bbc:	3230      	adds	r2, #48	@ 0x30
 8018bbe:	b2d2      	uxtb	r2, r2
 8018bc0:	701a      	strb	r2, [r3, #0]
 8018bc2:	e00a      	b.n	8018bda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	0f1b      	lsrs	r3, r3, #28
 8018bc8:	b2da      	uxtb	r2, r3
 8018bca:	7dfb      	ldrb	r3, [r7, #23]
 8018bcc:	005b      	lsls	r3, r3, #1
 8018bce:	4619      	mov	r1, r3
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	440b      	add	r3, r1
 8018bd4:	3237      	adds	r2, #55	@ 0x37
 8018bd6:	b2d2      	uxtb	r2, r2
 8018bd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	011b      	lsls	r3, r3, #4
 8018bde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018be0:	7dfb      	ldrb	r3, [r7, #23]
 8018be2:	005b      	lsls	r3, r3, #1
 8018be4:	3301      	adds	r3, #1
 8018be6:	68ba      	ldr	r2, [r7, #8]
 8018be8:	4413      	add	r3, r2
 8018bea:	2200      	movs	r2, #0
 8018bec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018bee:	7dfb      	ldrb	r3, [r7, #23]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	75fb      	strb	r3, [r7, #23]
 8018bf4:	7dfa      	ldrb	r2, [r7, #23]
 8018bf6:	79fb      	ldrb	r3, [r7, #7]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d3d3      	bcc.n	8018ba4 <IntToUnicode+0x18>
  }
}
 8018bfc:	bf00      	nop
 8018bfe:	bf00      	nop
 8018c00:	371c      	adds	r7, #28
 8018c02:	46bd      	mov	sp, r7
 8018c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c08:	4770      	bx	lr
	...

08018c0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b08a      	sub	sp, #40	@ 0x28
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018c14:	f107 0314 	add.w	r3, r7, #20
 8018c18:	2200      	movs	r2, #0
 8018c1a:	601a      	str	r2, [r3, #0]
 8018c1c:	605a      	str	r2, [r3, #4]
 8018c1e:	609a      	str	r2, [r3, #8]
 8018c20:	60da      	str	r2, [r3, #12]
 8018c22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018c2c:	d13a      	bne.n	8018ca4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018c2e:	2300      	movs	r3, #0
 8018c30:	613b      	str	r3, [r7, #16]
 8018c32:	4b1e      	ldr	r3, [pc, #120]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018c36:	4a1d      	ldr	r2, [pc, #116]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c38:	f043 0301 	orr.w	r3, r3, #1
 8018c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8018c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018c42:	f003 0301 	and.w	r3, r3, #1
 8018c46:	613b      	str	r3, [r7, #16]
 8018c48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018c4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018c50:	2302      	movs	r3, #2
 8018c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c54:	2300      	movs	r3, #0
 8018c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018c58:	2303      	movs	r3, #3
 8018c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018c5c:	230a      	movs	r3, #10
 8018c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018c60:	f107 0314 	add.w	r3, r7, #20
 8018c64:	4619      	mov	r1, r3
 8018c66:	4812      	ldr	r0, [pc, #72]	@ (8018cb0 <HAL_PCD_MspInit+0xa4>)
 8018c68:	f7f3 fd0e 	bl	800c688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c70:	4a0e      	ldr	r2, [pc, #56]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c76:	6353      	str	r3, [r2, #52]	@ 0x34
 8018c78:	2300      	movs	r3, #0
 8018c7a:	60fb      	str	r3, [r7, #12]
 8018c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c80:	4a0a      	ldr	r2, [pc, #40]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018c86:	6453      	str	r3, [r2, #68]	@ 0x44
 8018c88:	4b08      	ldr	r3, [pc, #32]	@ (8018cac <HAL_PCD_MspInit+0xa0>)
 8018c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018c90:	60fb      	str	r3, [r7, #12]
 8018c92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018c94:	2200      	movs	r2, #0
 8018c96:	2105      	movs	r1, #5
 8018c98:	2043      	movs	r0, #67	@ 0x43
 8018c9a:	f7f3 f85d 	bl	800bd58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018c9e:	2043      	movs	r0, #67	@ 0x43
 8018ca0:	f7f3 f876 	bl	800bd90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018ca4:	bf00      	nop
 8018ca6:	3728      	adds	r7, #40	@ 0x28
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}
 8018cac:	40023800 	.word	0x40023800
 8018cb0:	40020000 	.word	0x40020000

08018cb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018cc8:	4619      	mov	r1, r3
 8018cca:	4610      	mov	r0, r2
 8018ccc:	f7fb f835 	bl	8013d3a <USBD_LL_SetupStage>
}
 8018cd0:	bf00      	nop
 8018cd2:	3708      	adds	r7, #8
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	bd80      	pop	{r7, pc}

08018cd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
 8018ce0:	460b      	mov	r3, r1
 8018ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018cea:	78fa      	ldrb	r2, [r7, #3]
 8018cec:	6879      	ldr	r1, [r7, #4]
 8018cee:	4613      	mov	r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	4413      	add	r3, r2
 8018cf4:	009b      	lsls	r3, r3, #2
 8018cf6:	440b      	add	r3, r1
 8018cf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018cfc:	681a      	ldr	r2, [r3, #0]
 8018cfe:	78fb      	ldrb	r3, [r7, #3]
 8018d00:	4619      	mov	r1, r3
 8018d02:	f7fb f86f 	bl	8013de4 <USBD_LL_DataOutStage>
}
 8018d06:	bf00      	nop
 8018d08:	3708      	adds	r7, #8
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bd80      	pop	{r7, pc}

08018d0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d0e:	b580      	push	{r7, lr}
 8018d10:	b082      	sub	sp, #8
 8018d12:	af00      	add	r7, sp, #0
 8018d14:	6078      	str	r0, [r7, #4]
 8018d16:	460b      	mov	r3, r1
 8018d18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018d20:	78fa      	ldrb	r2, [r7, #3]
 8018d22:	6879      	ldr	r1, [r7, #4]
 8018d24:	4613      	mov	r3, r2
 8018d26:	00db      	lsls	r3, r3, #3
 8018d28:	4413      	add	r3, r2
 8018d2a:	009b      	lsls	r3, r3, #2
 8018d2c:	440b      	add	r3, r1
 8018d2e:	3320      	adds	r3, #32
 8018d30:	681a      	ldr	r2, [r3, #0]
 8018d32:	78fb      	ldrb	r3, [r7, #3]
 8018d34:	4619      	mov	r1, r3
 8018d36:	f7fb f908 	bl	8013f4a <USBD_LL_DataInStage>
}
 8018d3a:	bf00      	nop
 8018d3c:	3708      	adds	r7, #8
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bd80      	pop	{r7, pc}

08018d42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d42:	b580      	push	{r7, lr}
 8018d44:	b082      	sub	sp, #8
 8018d46:	af00      	add	r7, sp, #0
 8018d48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7fb fa42 	bl	80141da <USBD_LL_SOF>
}
 8018d56:	bf00      	nop
 8018d58:	3708      	adds	r7, #8
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}

08018d5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d5e:	b580      	push	{r7, lr}
 8018d60:	b084      	sub	sp, #16
 8018d62:	af00      	add	r7, sp, #0
 8018d64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018d66:	2301      	movs	r3, #1
 8018d68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	79db      	ldrb	r3, [r3, #7]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d102      	bne.n	8018d78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018d72:	2300      	movs	r3, #0
 8018d74:	73fb      	strb	r3, [r7, #15]
 8018d76:	e008      	b.n	8018d8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	79db      	ldrb	r3, [r3, #7]
 8018d7c:	2b02      	cmp	r3, #2
 8018d7e:	d102      	bne.n	8018d86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018d80:	2301      	movs	r3, #1
 8018d82:	73fb      	strb	r3, [r7, #15]
 8018d84:	e001      	b.n	8018d8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018d86:	f7f1 f931 	bl	8009fec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d90:	7bfa      	ldrb	r2, [r7, #15]
 8018d92:	4611      	mov	r1, r2
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7fb f9dc 	bl	8014152 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018da0:	4618      	mov	r0, r3
 8018da2:	f7fb f984 	bl	80140ae <USBD_LL_Reset>
}
 8018da6:	bf00      	nop
 8018da8:	3710      	adds	r7, #16
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
	...

08018db0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b082      	sub	sp, #8
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7fb f9d7 	bl	8014172 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	687a      	ldr	r2, [r7, #4]
 8018dd0:	6812      	ldr	r2, [r2, #0]
 8018dd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018dd6:	f043 0301 	orr.w	r3, r3, #1
 8018dda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	7adb      	ldrb	r3, [r3, #11]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d005      	beq.n	8018df0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018de4:	4b04      	ldr	r3, [pc, #16]	@ (8018df8 <HAL_PCD_SuspendCallback+0x48>)
 8018de6:	691b      	ldr	r3, [r3, #16]
 8018de8:	4a03      	ldr	r2, [pc, #12]	@ (8018df8 <HAL_PCD_SuspendCallback+0x48>)
 8018dea:	f043 0306 	orr.w	r3, r3, #6
 8018dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018df0:	bf00      	nop
 8018df2:	3708      	adds	r7, #8
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	e000ed00 	.word	0xe000ed00

08018dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b082      	sub	sp, #8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7fb f9cd 	bl	80141aa <USBD_LL_Resume>
}
 8018e10:	bf00      	nop
 8018e12:	3708      	adds	r7, #8
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bd80      	pop	{r7, pc}

08018e18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b082      	sub	sp, #8
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	460b      	mov	r3, r1
 8018e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e2a:	78fa      	ldrb	r2, [r7, #3]
 8018e2c:	4611      	mov	r1, r2
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7fb fa25 	bl	801427e <USBD_LL_IsoOUTIncomplete>
}
 8018e34:	bf00      	nop
 8018e36:	3708      	adds	r7, #8
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}

08018e3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b082      	sub	sp, #8
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
 8018e44:	460b      	mov	r3, r1
 8018e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e4e:	78fa      	ldrb	r2, [r7, #3]
 8018e50:	4611      	mov	r1, r2
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7fb f9e1 	bl	801421a <USBD_LL_IsoINIncomplete>
}
 8018e58:	bf00      	nop
 8018e5a:	3708      	adds	r7, #8
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b082      	sub	sp, #8
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7fb fa37 	bl	80142e2 <USBD_LL_DevConnected>
}
 8018e74:	bf00      	nop
 8018e76:	3708      	adds	r7, #8
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f7fb fa34 	bl	80142f8 <USBD_LL_DevDisconnected>
}
 8018e90:	bf00      	nop
 8018e92:	3708      	adds	r7, #8
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd80      	pop	{r7, pc}

08018e98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b082      	sub	sp, #8
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d13c      	bne.n	8018f22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018ea8:	4a20      	ldr	r2, [pc, #128]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018eb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018eba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8018ebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ec2:	2204      	movs	r2, #4
 8018ec4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018ec6:	4b19      	ldr	r3, [pc, #100]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ec8:	2202      	movs	r2, #2
 8018eca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018ecc:	4b17      	ldr	r3, [pc, #92]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ece:	2200      	movs	r2, #0
 8018ed0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018ed2:	4b16      	ldr	r3, [pc, #88]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ed4:	2202      	movs	r2, #2
 8018ed6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018ed8:	4b14      	ldr	r3, [pc, #80]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018eda:	2200      	movs	r2, #0
 8018edc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018ede:	4b13      	ldr	r3, [pc, #76]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018ee4:	4b11      	ldr	r3, [pc, #68]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018eea:	4b10      	ldr	r3, [pc, #64]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018eec:	2200      	movs	r2, #0
 8018eee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018ef6:	480d      	ldr	r0, [pc, #52]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018ef8:	f7f3 fe77 	bl	800cbea <HAL_PCD_Init>
 8018efc:	4603      	mov	r3, r0
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d001      	beq.n	8018f06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018f02:	f7f1 f873 	bl	8009fec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018f06:	2180      	movs	r1, #128	@ 0x80
 8018f08:	4808      	ldr	r0, [pc, #32]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018f0a:	f7f5 f8a4 	bl	800e056 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018f0e:	2240      	movs	r2, #64	@ 0x40
 8018f10:	2100      	movs	r1, #0
 8018f12:	4806      	ldr	r0, [pc, #24]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018f14:	f7f5 f858 	bl	800dfc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018f18:	2280      	movs	r2, #128	@ 0x80
 8018f1a:	2101      	movs	r1, #1
 8018f1c:	4803      	ldr	r0, [pc, #12]	@ (8018f2c <USBD_LL_Init+0x94>)
 8018f1e:	f7f5 f853 	bl	800dfc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018f22:	2300      	movs	r3, #0
}
 8018f24:	4618      	mov	r0, r3
 8018f26:	3708      	adds	r7, #8
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bd80      	pop	{r7, pc}
 8018f2c:	2000bbf0 	.word	0x2000bbf0

08018f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b084      	sub	sp, #16
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f38:	2300      	movs	r3, #0
 8018f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7f3 ff5e 	bl	800ce08 <HAL_PCD_Start>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f50:	7bfb      	ldrb	r3, [r7, #15]
 8018f52:	4618      	mov	r0, r3
 8018f54:	f000 f942 	bl	80191dc <USBD_Get_USB_Status>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}

08018f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018f66:	b580      	push	{r7, lr}
 8018f68:	b084      	sub	sp, #16
 8018f6a:	af00      	add	r7, sp, #0
 8018f6c:	6078      	str	r0, [r7, #4]
 8018f6e:	4608      	mov	r0, r1
 8018f70:	4611      	mov	r1, r2
 8018f72:	461a      	mov	r2, r3
 8018f74:	4603      	mov	r3, r0
 8018f76:	70fb      	strb	r3, [r7, #3]
 8018f78:	460b      	mov	r3, r1
 8018f7a:	70bb      	strb	r3, [r7, #2]
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f80:	2300      	movs	r3, #0
 8018f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f84:	2300      	movs	r3, #0
 8018f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f8e:	78bb      	ldrb	r3, [r7, #2]
 8018f90:	883a      	ldrh	r2, [r7, #0]
 8018f92:	78f9      	ldrb	r1, [r7, #3]
 8018f94:	f7f4 fc32 	bl	800d7fc <HAL_PCD_EP_Open>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f9c:	7bfb      	ldrb	r3, [r7, #15]
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f000 f91c 	bl	80191dc <USBD_Get_USB_Status>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3710      	adds	r7, #16
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}

08018fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fb2:	b580      	push	{r7, lr}
 8018fb4:	b084      	sub	sp, #16
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	6078      	str	r0, [r7, #4]
 8018fba:	460b      	mov	r3, r1
 8018fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018fcc:	78fa      	ldrb	r2, [r7, #3]
 8018fce:	4611      	mov	r1, r2
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7f4 fc7d 	bl	800d8d0 <HAL_PCD_EP_Close>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fda:	7bfb      	ldrb	r3, [r7, #15]
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f000 f8fd 	bl	80191dc <USBD_Get_USB_Status>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fe8:	4618      	mov	r0, r3
 8018fea:	3710      	adds	r7, #16
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}

08018ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b084      	sub	sp, #16
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
 8018ff8:	460b      	mov	r3, r1
 8018ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019000:	2300      	movs	r3, #0
 8019002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801900a:	78fa      	ldrb	r2, [r7, #3]
 801900c:	4611      	mov	r1, r2
 801900e:	4618      	mov	r0, r3
 8019010:	f7f4 fd35 	bl	800da7e <HAL_PCD_EP_SetStall>
 8019014:	4603      	mov	r3, r0
 8019016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019018:	7bfb      	ldrb	r3, [r7, #15]
 801901a:	4618      	mov	r0, r3
 801901c:	f000 f8de 	bl	80191dc <USBD_Get_USB_Status>
 8019020:	4603      	mov	r3, r0
 8019022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019024:	7bbb      	ldrb	r3, [r7, #14]
}
 8019026:	4618      	mov	r0, r3
 8019028:	3710      	adds	r7, #16
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}

0801902e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801902e:	b580      	push	{r7, lr}
 8019030:	b084      	sub	sp, #16
 8019032:	af00      	add	r7, sp, #0
 8019034:	6078      	str	r0, [r7, #4]
 8019036:	460b      	mov	r3, r1
 8019038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801903a:	2300      	movs	r3, #0
 801903c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801903e:	2300      	movs	r3, #0
 8019040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019048:	78fa      	ldrb	r2, [r7, #3]
 801904a:	4611      	mov	r1, r2
 801904c:	4618      	mov	r0, r3
 801904e:	f7f4 fd79 	bl	800db44 <HAL_PCD_EP_ClrStall>
 8019052:	4603      	mov	r3, r0
 8019054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019056:	7bfb      	ldrb	r3, [r7, #15]
 8019058:	4618      	mov	r0, r3
 801905a:	f000 f8bf 	bl	80191dc <USBD_Get_USB_Status>
 801905e:	4603      	mov	r3, r0
 8019060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019062:	7bbb      	ldrb	r3, [r7, #14]
}
 8019064:	4618      	mov	r0, r3
 8019066:	3710      	adds	r7, #16
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}

0801906c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801906c:	b480      	push	{r7}
 801906e:	b085      	sub	sp, #20
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	460b      	mov	r3, r1
 8019076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801907e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019084:	2b00      	cmp	r3, #0
 8019086:	da0b      	bge.n	80190a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019088:	78fb      	ldrb	r3, [r7, #3]
 801908a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801908e:	68f9      	ldr	r1, [r7, #12]
 8019090:	4613      	mov	r3, r2
 8019092:	00db      	lsls	r3, r3, #3
 8019094:	4413      	add	r3, r2
 8019096:	009b      	lsls	r3, r3, #2
 8019098:	440b      	add	r3, r1
 801909a:	3316      	adds	r3, #22
 801909c:	781b      	ldrb	r3, [r3, #0]
 801909e:	e00b      	b.n	80190b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80190a0:	78fb      	ldrb	r3, [r7, #3]
 80190a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80190a6:	68f9      	ldr	r1, [r7, #12]
 80190a8:	4613      	mov	r3, r2
 80190aa:	00db      	lsls	r3, r3, #3
 80190ac:	4413      	add	r3, r2
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	440b      	add	r3, r1
 80190b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80190b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3714      	adds	r7, #20
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr

080190c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b084      	sub	sp, #16
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
 80190cc:	460b      	mov	r3, r1
 80190ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190d0:	2300      	movs	r3, #0
 80190d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190d4:	2300      	movs	r3, #0
 80190d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190de:	78fa      	ldrb	r2, [r7, #3]
 80190e0:	4611      	mov	r1, r2
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7f4 fb66 	bl	800d7b4 <HAL_PCD_SetAddress>
 80190e8:	4603      	mov	r3, r0
 80190ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190ec:	7bfb      	ldrb	r3, [r7, #15]
 80190ee:	4618      	mov	r0, r3
 80190f0:	f000 f874 	bl	80191dc <USBD_Get_USB_Status>
 80190f4:	4603      	mov	r3, r0
 80190f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}

08019102 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019102:	b580      	push	{r7, lr}
 8019104:	b086      	sub	sp, #24
 8019106:	af00      	add	r7, sp, #0
 8019108:	60f8      	str	r0, [r7, #12]
 801910a:	607a      	str	r2, [r7, #4]
 801910c:	603b      	str	r3, [r7, #0]
 801910e:	460b      	mov	r3, r1
 8019110:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019112:	2300      	movs	r3, #0
 8019114:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019116:	2300      	movs	r3, #0
 8019118:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019120:	7af9      	ldrb	r1, [r7, #11]
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	687a      	ldr	r2, [r7, #4]
 8019126:	f7f4 fc70 	bl	800da0a <HAL_PCD_EP_Transmit>
 801912a:	4603      	mov	r3, r0
 801912c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801912e:	7dfb      	ldrb	r3, [r7, #23]
 8019130:	4618      	mov	r0, r3
 8019132:	f000 f853 	bl	80191dc <USBD_Get_USB_Status>
 8019136:	4603      	mov	r3, r0
 8019138:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801913a:	7dbb      	ldrb	r3, [r7, #22]
}
 801913c:	4618      	mov	r0, r3
 801913e:	3718      	adds	r7, #24
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}

08019144 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b086      	sub	sp, #24
 8019148:	af00      	add	r7, sp, #0
 801914a:	60f8      	str	r0, [r7, #12]
 801914c:	607a      	str	r2, [r7, #4]
 801914e:	603b      	str	r3, [r7, #0]
 8019150:	460b      	mov	r3, r1
 8019152:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019154:	2300      	movs	r3, #0
 8019156:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019158:	2300      	movs	r3, #0
 801915a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019162:	7af9      	ldrb	r1, [r7, #11]
 8019164:	683b      	ldr	r3, [r7, #0]
 8019166:	687a      	ldr	r2, [r7, #4]
 8019168:	f7f4 fbfc 	bl	800d964 <HAL_PCD_EP_Receive>
 801916c:	4603      	mov	r3, r0
 801916e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019170:	7dfb      	ldrb	r3, [r7, #23]
 8019172:	4618      	mov	r0, r3
 8019174:	f000 f832 	bl	80191dc <USBD_Get_USB_Status>
 8019178:	4603      	mov	r3, r0
 801917a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801917c:	7dbb      	ldrb	r3, [r7, #22]
}
 801917e:	4618      	mov	r0, r3
 8019180:	3718      	adds	r7, #24
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019186:	b580      	push	{r7, lr}
 8019188:	b082      	sub	sp, #8
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
 801918e:	460b      	mov	r3, r1
 8019190:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019198:	78fa      	ldrb	r2, [r7, #3]
 801919a:	4611      	mov	r1, r2
 801919c:	4618      	mov	r0, r3
 801919e:	f7f4 fc1c 	bl	800d9da <HAL_PCD_EP_GetRxCount>
 80191a2:	4603      	mov	r3, r0
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3708      	adds	r7, #8
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80191ac:	b480      	push	{r7}
 80191ae:	b083      	sub	sp, #12
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80191b4:	4b03      	ldr	r3, [pc, #12]	@ (80191c4 <USBD_static_malloc+0x18>)
}
 80191b6:	4618      	mov	r0, r3
 80191b8:	370c      	adds	r7, #12
 80191ba:	46bd      	mov	sp, r7
 80191bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c0:	4770      	bx	lr
 80191c2:	bf00      	nop
 80191c4:	2000c0d4 	.word	0x2000c0d4

080191c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80191c8:	b480      	push	{r7}
 80191ca:	b083      	sub	sp, #12
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]

}
 80191d0:	bf00      	nop
 80191d2:	370c      	adds	r7, #12
 80191d4:	46bd      	mov	sp, r7
 80191d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191da:	4770      	bx	lr

080191dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80191dc:	b480      	push	{r7}
 80191de:	b085      	sub	sp, #20
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	4603      	mov	r3, r0
 80191e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191e6:	2300      	movs	r3, #0
 80191e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80191ea:	79fb      	ldrb	r3, [r7, #7]
 80191ec:	2b03      	cmp	r3, #3
 80191ee:	d817      	bhi.n	8019220 <USBD_Get_USB_Status+0x44>
 80191f0:	a201      	add	r2, pc, #4	@ (adr r2, 80191f8 <USBD_Get_USB_Status+0x1c>)
 80191f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191f6:	bf00      	nop
 80191f8:	08019209 	.word	0x08019209
 80191fc:	0801920f 	.word	0x0801920f
 8019200:	08019215 	.word	0x08019215
 8019204:	0801921b 	.word	0x0801921b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019208:	2300      	movs	r3, #0
 801920a:	73fb      	strb	r3, [r7, #15]
    break;
 801920c:	e00b      	b.n	8019226 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801920e:	2303      	movs	r3, #3
 8019210:	73fb      	strb	r3, [r7, #15]
    break;
 8019212:	e008      	b.n	8019226 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019214:	2301      	movs	r3, #1
 8019216:	73fb      	strb	r3, [r7, #15]
    break;
 8019218:	e005      	b.n	8019226 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801921a:	2303      	movs	r3, #3
 801921c:	73fb      	strb	r3, [r7, #15]
    break;
 801921e:	e002      	b.n	8019226 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019220:	2303      	movs	r3, #3
 8019222:	73fb      	strb	r3, [r7, #15]
    break;
 8019224:	bf00      	nop
  }
  return usb_status;
 8019226:	7bfb      	ldrb	r3, [r7, #15]
}
 8019228:	4618      	mov	r0, r3
 801922a:	3714      	adds	r7, #20
 801922c:	46bd      	mov	sp, r7
 801922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019232:	4770      	bx	lr

08019234 <acosf>:
 8019234:	b508      	push	{r3, lr}
 8019236:	ed2d 8b02 	vpush	{d8}
 801923a:	eeb0 8a40 	vmov.f32	s16, s0
 801923e:	f000 faef 	bl	8019820 <__ieee754_acosf>
 8019242:	eeb4 8a48 	vcmp.f32	s16, s16
 8019246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801924a:	eef0 8a40 	vmov.f32	s17, s0
 801924e:	d615      	bvs.n	801927c <acosf+0x48>
 8019250:	eeb0 0a48 	vmov.f32	s0, s16
 8019254:	f000 f9d6 	bl	8019604 <fabsf>
 8019258:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801925c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019264:	dd0a      	ble.n	801927c <acosf+0x48>
 8019266:	f003 f831 	bl	801c2cc <__errno>
 801926a:	ecbd 8b02 	vpop	{d8}
 801926e:	2321      	movs	r3, #33	@ 0x21
 8019270:	6003      	str	r3, [r0, #0]
 8019272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019276:	4804      	ldr	r0, [pc, #16]	@ (8019288 <acosf+0x54>)
 8019278:	f000 ba28 	b.w	80196cc <nanf>
 801927c:	eeb0 0a68 	vmov.f32	s0, s17
 8019280:	ecbd 8b02 	vpop	{d8}
 8019284:	bd08      	pop	{r3, pc}
 8019286:	bf00      	nop
 8019288:	080221af 	.word	0x080221af

0801928c <asinf>:
 801928c:	b508      	push	{r3, lr}
 801928e:	ed2d 8b02 	vpush	{d8}
 8019292:	eeb0 8a40 	vmov.f32	s16, s0
 8019296:	f000 fbb9 	bl	8019a0c <__ieee754_asinf>
 801929a:	eeb4 8a48 	vcmp.f32	s16, s16
 801929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192a2:	eef0 8a40 	vmov.f32	s17, s0
 80192a6:	d615      	bvs.n	80192d4 <asinf+0x48>
 80192a8:	eeb0 0a48 	vmov.f32	s0, s16
 80192ac:	f000 f9aa 	bl	8019604 <fabsf>
 80192b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80192b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80192b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192bc:	dd0a      	ble.n	80192d4 <asinf+0x48>
 80192be:	f003 f805 	bl	801c2cc <__errno>
 80192c2:	ecbd 8b02 	vpop	{d8}
 80192c6:	2321      	movs	r3, #33	@ 0x21
 80192c8:	6003      	str	r3, [r0, #0]
 80192ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80192ce:	4804      	ldr	r0, [pc, #16]	@ (80192e0 <asinf+0x54>)
 80192d0:	f000 b9fc 	b.w	80196cc <nanf>
 80192d4:	eeb0 0a68 	vmov.f32	s0, s17
 80192d8:	ecbd 8b02 	vpop	{d8}
 80192dc:	bd08      	pop	{r3, pc}
 80192de:	bf00      	nop
 80192e0:	080221af 	.word	0x080221af

080192e4 <atan2f>:
 80192e4:	f000 bc76 	b.w	8019bd4 <__ieee754_atan2f>

080192e8 <powf>:
 80192e8:	b508      	push	{r3, lr}
 80192ea:	ed2d 8b04 	vpush	{d8-d9}
 80192ee:	eeb0 8a60 	vmov.f32	s16, s1
 80192f2:	eeb0 9a40 	vmov.f32	s18, s0
 80192f6:	f000 fd0d 	bl	8019d14 <__ieee754_powf>
 80192fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80192fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019302:	eef0 8a40 	vmov.f32	s17, s0
 8019306:	d63e      	bvs.n	8019386 <powf+0x9e>
 8019308:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019310:	d112      	bne.n	8019338 <powf+0x50>
 8019312:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931a:	d039      	beq.n	8019390 <powf+0xa8>
 801931c:	eeb0 0a48 	vmov.f32	s0, s16
 8019320:	f000 f9be 	bl	80196a0 <finitef>
 8019324:	b378      	cbz	r0, 8019386 <powf+0x9e>
 8019326:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801932e:	d52a      	bpl.n	8019386 <powf+0x9e>
 8019330:	f002 ffcc 	bl	801c2cc <__errno>
 8019334:	2322      	movs	r3, #34	@ 0x22
 8019336:	e014      	b.n	8019362 <powf+0x7a>
 8019338:	f000 f9b2 	bl	80196a0 <finitef>
 801933c:	b998      	cbnz	r0, 8019366 <powf+0x7e>
 801933e:	eeb0 0a49 	vmov.f32	s0, s18
 8019342:	f000 f9ad 	bl	80196a0 <finitef>
 8019346:	b170      	cbz	r0, 8019366 <powf+0x7e>
 8019348:	eeb0 0a48 	vmov.f32	s0, s16
 801934c:	f000 f9a8 	bl	80196a0 <finitef>
 8019350:	b148      	cbz	r0, 8019366 <powf+0x7e>
 8019352:	eef4 8a68 	vcmp.f32	s17, s17
 8019356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801935a:	d7e9      	bvc.n	8019330 <powf+0x48>
 801935c:	f002 ffb6 	bl	801c2cc <__errno>
 8019360:	2321      	movs	r3, #33	@ 0x21
 8019362:	6003      	str	r3, [r0, #0]
 8019364:	e00f      	b.n	8019386 <powf+0x9e>
 8019366:	eef5 8a40 	vcmp.f32	s17, #0.0
 801936a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801936e:	d10a      	bne.n	8019386 <powf+0x9e>
 8019370:	eeb0 0a49 	vmov.f32	s0, s18
 8019374:	f000 f994 	bl	80196a0 <finitef>
 8019378:	b128      	cbz	r0, 8019386 <powf+0x9e>
 801937a:	eeb0 0a48 	vmov.f32	s0, s16
 801937e:	f000 f98f 	bl	80196a0 <finitef>
 8019382:	2800      	cmp	r0, #0
 8019384:	d1d4      	bne.n	8019330 <powf+0x48>
 8019386:	eeb0 0a68 	vmov.f32	s0, s17
 801938a:	ecbd 8b04 	vpop	{d8-d9}
 801938e:	bd08      	pop	{r3, pc}
 8019390:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8019394:	e7f7      	b.n	8019386 <powf+0x9e>
	...

08019398 <sqrtf>:
 8019398:	b508      	push	{r3, lr}
 801939a:	ed2d 8b02 	vpush	{d8}
 801939e:	eeb0 8a40 	vmov.f32	s16, s0
 80193a2:	f000 f999 	bl	80196d8 <__ieee754_sqrtf>
 80193a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80193aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ae:	d60c      	bvs.n	80193ca <sqrtf+0x32>
 80193b0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80193d0 <sqrtf+0x38>
 80193b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80193b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193bc:	d505      	bpl.n	80193ca <sqrtf+0x32>
 80193be:	f002 ff85 	bl	801c2cc <__errno>
 80193c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80193c6:	2321      	movs	r3, #33	@ 0x21
 80193c8:	6003      	str	r3, [r0, #0]
 80193ca:	ecbd 8b02 	vpop	{d8}
 80193ce:	bd08      	pop	{r3, pc}
 80193d0:	00000000 	.word	0x00000000

080193d4 <atanf>:
 80193d4:	b538      	push	{r3, r4, r5, lr}
 80193d6:	ee10 5a10 	vmov	r5, s0
 80193da:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80193de:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80193e2:	eef0 7a40 	vmov.f32	s15, s0
 80193e6:	d310      	bcc.n	801940a <atanf+0x36>
 80193e8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80193ec:	d904      	bls.n	80193f8 <atanf+0x24>
 80193ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80193f2:	eeb0 0a67 	vmov.f32	s0, s15
 80193f6:	bd38      	pop	{r3, r4, r5, pc}
 80193f8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8019530 <atanf+0x15c>
 80193fc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8019534 <atanf+0x160>
 8019400:	2d00      	cmp	r5, #0
 8019402:	bfc8      	it	gt
 8019404:	eef0 7a47 	vmovgt.f32	s15, s14
 8019408:	e7f3      	b.n	80193f2 <atanf+0x1e>
 801940a:	4b4b      	ldr	r3, [pc, #300]	@ (8019538 <atanf+0x164>)
 801940c:	429c      	cmp	r4, r3
 801940e:	d810      	bhi.n	8019432 <atanf+0x5e>
 8019410:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8019414:	d20a      	bcs.n	801942c <atanf+0x58>
 8019416:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801953c <atanf+0x168>
 801941a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801941e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019422:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801942a:	dce2      	bgt.n	80193f2 <atanf+0x1e>
 801942c:	f04f 33ff 	mov.w	r3, #4294967295
 8019430:	e013      	b.n	801945a <atanf+0x86>
 8019432:	f000 f8e7 	bl	8019604 <fabsf>
 8019436:	4b42      	ldr	r3, [pc, #264]	@ (8019540 <atanf+0x16c>)
 8019438:	429c      	cmp	r4, r3
 801943a:	d84f      	bhi.n	80194dc <atanf+0x108>
 801943c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8019440:	429c      	cmp	r4, r3
 8019442:	d841      	bhi.n	80194c8 <atanf+0xf4>
 8019444:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8019448:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801944c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019450:	2300      	movs	r3, #0
 8019452:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019456:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801945a:	1c5a      	adds	r2, r3, #1
 801945c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019460:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8019544 <atanf+0x170>
 8019464:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8019548 <atanf+0x174>
 8019468:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801954c <atanf+0x178>
 801946c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019470:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019474:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8019550 <atanf+0x17c>
 8019478:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801947c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8019554 <atanf+0x180>
 8019480:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019484:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019558 <atanf+0x184>
 8019488:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801948c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801955c <atanf+0x188>
 8019490:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019494:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8019560 <atanf+0x18c>
 8019498:	eea6 5a87 	vfma.f32	s10, s13, s14
 801949c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8019564 <atanf+0x190>
 80194a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80194a4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8019568 <atanf+0x194>
 80194a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80194ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801956c <atanf+0x198>
 80194b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80194b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80194b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80194bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80194c0:	d121      	bne.n	8019506 <atanf+0x132>
 80194c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194c6:	e794      	b.n	80193f2 <atanf+0x1e>
 80194c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80194cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80194d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80194d4:	2301      	movs	r3, #1
 80194d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80194da:	e7be      	b.n	801945a <atanf+0x86>
 80194dc:	4b24      	ldr	r3, [pc, #144]	@ (8019570 <atanf+0x19c>)
 80194de:	429c      	cmp	r4, r3
 80194e0:	d80b      	bhi.n	80194fa <atanf+0x126>
 80194e2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80194e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80194ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80194ee:	2302      	movs	r3, #2
 80194f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80194f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80194f8:	e7af      	b.n	801945a <atanf+0x86>
 80194fa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80194fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019502:	2303      	movs	r3, #3
 8019504:	e7a9      	b.n	801945a <atanf+0x86>
 8019506:	4a1b      	ldr	r2, [pc, #108]	@ (8019574 <atanf+0x1a0>)
 8019508:	491b      	ldr	r1, [pc, #108]	@ (8019578 <atanf+0x1a4>)
 801950a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801950e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019512:	edd3 6a00 	vldr	s13, [r3]
 8019516:	ee37 7a66 	vsub.f32	s14, s14, s13
 801951a:	2d00      	cmp	r5, #0
 801951c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019520:	edd2 7a00 	vldr	s15, [r2]
 8019524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019528:	bfb8      	it	lt
 801952a:	eef1 7a67 	vneglt.f32	s15, s15
 801952e:	e760      	b.n	80193f2 <atanf+0x1e>
 8019530:	bfc90fdb 	.word	0xbfc90fdb
 8019534:	3fc90fdb 	.word	0x3fc90fdb
 8019538:	3edfffff 	.word	0x3edfffff
 801953c:	7149f2ca 	.word	0x7149f2ca
 8019540:	3f97ffff 	.word	0x3f97ffff
 8019544:	3c8569d7 	.word	0x3c8569d7
 8019548:	3d4bda59 	.word	0x3d4bda59
 801954c:	bd6ef16b 	.word	0xbd6ef16b
 8019550:	3d886b35 	.word	0x3d886b35
 8019554:	3dba2e6e 	.word	0x3dba2e6e
 8019558:	3e124925 	.word	0x3e124925
 801955c:	3eaaaaab 	.word	0x3eaaaaab
 8019560:	bd15a221 	.word	0xbd15a221
 8019564:	bd9d8795 	.word	0xbd9d8795
 8019568:	bde38e38 	.word	0xbde38e38
 801956c:	be4ccccd 	.word	0xbe4ccccd
 8019570:	401bffff 	.word	0x401bffff
 8019574:	0802232c 	.word	0x0802232c
 8019578:	0802231c 	.word	0x0802231c

0801957c <cosf>:
 801957c:	ee10 3a10 	vmov	r3, s0
 8019580:	b507      	push	{r0, r1, r2, lr}
 8019582:	4a1e      	ldr	r2, [pc, #120]	@ (80195fc <cosf+0x80>)
 8019584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019588:	4293      	cmp	r3, r2
 801958a:	d806      	bhi.n	801959a <cosf+0x1e>
 801958c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019600 <cosf+0x84>
 8019590:	b003      	add	sp, #12
 8019592:	f85d eb04 	ldr.w	lr, [sp], #4
 8019596:	f000 b8a3 	b.w	80196e0 <__kernel_cosf>
 801959a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801959e:	d304      	bcc.n	80195aa <cosf+0x2e>
 80195a0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195a4:	b003      	add	sp, #12
 80195a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80195aa:	4668      	mov	r0, sp
 80195ac:	f000 fe80 	bl	801a2b0 <__ieee754_rem_pio2f>
 80195b0:	f000 0003 	and.w	r0, r0, #3
 80195b4:	2801      	cmp	r0, #1
 80195b6:	d009      	beq.n	80195cc <cosf+0x50>
 80195b8:	2802      	cmp	r0, #2
 80195ba:	d010      	beq.n	80195de <cosf+0x62>
 80195bc:	b9b0      	cbnz	r0, 80195ec <cosf+0x70>
 80195be:	eddd 0a01 	vldr	s1, [sp, #4]
 80195c2:	ed9d 0a00 	vldr	s0, [sp]
 80195c6:	f000 f88b 	bl	80196e0 <__kernel_cosf>
 80195ca:	e7eb      	b.n	80195a4 <cosf+0x28>
 80195cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80195d0:	ed9d 0a00 	vldr	s0, [sp]
 80195d4:	f000 f8dc 	bl	8019790 <__kernel_sinf>
 80195d8:	eeb1 0a40 	vneg.f32	s0, s0
 80195dc:	e7e2      	b.n	80195a4 <cosf+0x28>
 80195de:	eddd 0a01 	vldr	s1, [sp, #4]
 80195e2:	ed9d 0a00 	vldr	s0, [sp]
 80195e6:	f000 f87b 	bl	80196e0 <__kernel_cosf>
 80195ea:	e7f5      	b.n	80195d8 <cosf+0x5c>
 80195ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80195f0:	ed9d 0a00 	vldr	s0, [sp]
 80195f4:	2001      	movs	r0, #1
 80195f6:	f000 f8cb 	bl	8019790 <__kernel_sinf>
 80195fa:	e7d3      	b.n	80195a4 <cosf+0x28>
 80195fc:	3f490fd8 	.word	0x3f490fd8
 8019600:	00000000 	.word	0x00000000

08019604 <fabsf>:
 8019604:	ee10 3a10 	vmov	r3, s0
 8019608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801960c:	ee00 3a10 	vmov	s0, r3
 8019610:	4770      	bx	lr
	...

08019614 <sinf>:
 8019614:	ee10 3a10 	vmov	r3, s0
 8019618:	b507      	push	{r0, r1, r2, lr}
 801961a:	4a1f      	ldr	r2, [pc, #124]	@ (8019698 <sinf+0x84>)
 801961c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019620:	4293      	cmp	r3, r2
 8019622:	d807      	bhi.n	8019634 <sinf+0x20>
 8019624:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801969c <sinf+0x88>
 8019628:	2000      	movs	r0, #0
 801962a:	b003      	add	sp, #12
 801962c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019630:	f000 b8ae 	b.w	8019790 <__kernel_sinf>
 8019634:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019638:	d304      	bcc.n	8019644 <sinf+0x30>
 801963a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801963e:	b003      	add	sp, #12
 8019640:	f85d fb04 	ldr.w	pc, [sp], #4
 8019644:	4668      	mov	r0, sp
 8019646:	f000 fe33 	bl	801a2b0 <__ieee754_rem_pio2f>
 801964a:	f000 0003 	and.w	r0, r0, #3
 801964e:	2801      	cmp	r0, #1
 8019650:	d00a      	beq.n	8019668 <sinf+0x54>
 8019652:	2802      	cmp	r0, #2
 8019654:	d00f      	beq.n	8019676 <sinf+0x62>
 8019656:	b9c0      	cbnz	r0, 801968a <sinf+0x76>
 8019658:	eddd 0a01 	vldr	s1, [sp, #4]
 801965c:	ed9d 0a00 	vldr	s0, [sp]
 8019660:	2001      	movs	r0, #1
 8019662:	f000 f895 	bl	8019790 <__kernel_sinf>
 8019666:	e7ea      	b.n	801963e <sinf+0x2a>
 8019668:	eddd 0a01 	vldr	s1, [sp, #4]
 801966c:	ed9d 0a00 	vldr	s0, [sp]
 8019670:	f000 f836 	bl	80196e0 <__kernel_cosf>
 8019674:	e7e3      	b.n	801963e <sinf+0x2a>
 8019676:	eddd 0a01 	vldr	s1, [sp, #4]
 801967a:	ed9d 0a00 	vldr	s0, [sp]
 801967e:	2001      	movs	r0, #1
 8019680:	f000 f886 	bl	8019790 <__kernel_sinf>
 8019684:	eeb1 0a40 	vneg.f32	s0, s0
 8019688:	e7d9      	b.n	801963e <sinf+0x2a>
 801968a:	eddd 0a01 	vldr	s1, [sp, #4]
 801968e:	ed9d 0a00 	vldr	s0, [sp]
 8019692:	f000 f825 	bl	80196e0 <__kernel_cosf>
 8019696:	e7f5      	b.n	8019684 <sinf+0x70>
 8019698:	3f490fd8 	.word	0x3f490fd8
 801969c:	00000000 	.word	0x00000000

080196a0 <finitef>:
 80196a0:	ee10 3a10 	vmov	r3, s0
 80196a4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80196a8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80196ac:	bfac      	ite	ge
 80196ae:	2000      	movge	r0, #0
 80196b0:	2001      	movlt	r0, #1
 80196b2:	4770      	bx	lr

080196b4 <copysignf>:
 80196b4:	ee10 2a10 	vmov	r2, s0
 80196b8:	ee10 3a90 	vmov	r3, s1
 80196bc:	f362 031e 	bfi	r3, r2, #0, #31
 80196c0:	ee00 3a90 	vmov	s1, r3
 80196c4:	eeb0 0a60 	vmov.f32	s0, s1
 80196c8:	4770      	bx	lr
	...

080196cc <nanf>:
 80196cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80196d4 <nanf+0x8>
 80196d0:	4770      	bx	lr
 80196d2:	bf00      	nop
 80196d4:	7fc00000 	.word	0x7fc00000

080196d8 <__ieee754_sqrtf>:
 80196d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80196dc:	4770      	bx	lr
	...

080196e0 <__kernel_cosf>:
 80196e0:	ee10 3a10 	vmov	r3, s0
 80196e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80196e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80196ec:	eef0 6a40 	vmov.f32	s13, s0
 80196f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80196f4:	d204      	bcs.n	8019700 <__kernel_cosf+0x20>
 80196f6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80196fa:	ee17 2a90 	vmov	r2, s15
 80196fe:	b342      	cbz	r2, 8019752 <__kernel_cosf+0x72>
 8019700:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019704:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8019770 <__kernel_cosf+0x90>
 8019708:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8019774 <__kernel_cosf+0x94>
 801970c:	4a1a      	ldr	r2, [pc, #104]	@ (8019778 <__kernel_cosf+0x98>)
 801970e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019712:	4293      	cmp	r3, r2
 8019714:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801977c <__kernel_cosf+0x9c>
 8019718:	eee6 7a07 	vfma.f32	s15, s12, s14
 801971c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8019780 <__kernel_cosf+0xa0>
 8019720:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019724:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8019784 <__kernel_cosf+0xa4>
 8019728:	eee6 7a07 	vfma.f32	s15, s12, s14
 801972c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8019788 <__kernel_cosf+0xa8>
 8019730:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019734:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8019738:	ee26 6a07 	vmul.f32	s12, s12, s14
 801973c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019740:	eee7 0a06 	vfma.f32	s1, s14, s12
 8019744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019748:	d804      	bhi.n	8019754 <__kernel_cosf+0x74>
 801974a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801974e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019752:	4770      	bx	lr
 8019754:	4a0d      	ldr	r2, [pc, #52]	@ (801978c <__kernel_cosf+0xac>)
 8019756:	4293      	cmp	r3, r2
 8019758:	bf9a      	itte	ls
 801975a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801975e:	ee07 3a10 	vmovls	s14, r3
 8019762:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8019766:	ee30 0a47 	vsub.f32	s0, s0, s14
 801976a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801976e:	e7ec      	b.n	801974a <__kernel_cosf+0x6a>
 8019770:	ad47d74e 	.word	0xad47d74e
 8019774:	310f74f6 	.word	0x310f74f6
 8019778:	3e999999 	.word	0x3e999999
 801977c:	b493f27c 	.word	0xb493f27c
 8019780:	37d00d01 	.word	0x37d00d01
 8019784:	bab60b61 	.word	0xbab60b61
 8019788:	3d2aaaab 	.word	0x3d2aaaab
 801978c:	3f480000 	.word	0x3f480000

08019790 <__kernel_sinf>:
 8019790:	ee10 3a10 	vmov	r3, s0
 8019794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019798:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801979c:	d204      	bcs.n	80197a8 <__kernel_sinf+0x18>
 801979e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80197a2:	ee17 3a90 	vmov	r3, s15
 80197a6:	b35b      	cbz	r3, 8019800 <__kernel_sinf+0x70>
 80197a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80197ac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019804 <__kernel_sinf+0x74>
 80197b0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019808 <__kernel_sinf+0x78>
 80197b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80197b8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801980c <__kernel_sinf+0x7c>
 80197bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197c0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019810 <__kernel_sinf+0x80>
 80197c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80197c8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8019814 <__kernel_sinf+0x84>
 80197cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80197d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197d4:	b930      	cbnz	r0, 80197e4 <__kernel_sinf+0x54>
 80197d6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019818 <__kernel_sinf+0x88>
 80197da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80197de:	eea6 0a26 	vfma.f32	s0, s12, s13
 80197e2:	4770      	bx	lr
 80197e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80197e8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80197ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 80197f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80197f4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801981c <__kernel_sinf+0x8c>
 80197f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80197fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019800:	4770      	bx	lr
 8019802:	bf00      	nop
 8019804:	2f2ec9d3 	.word	0x2f2ec9d3
 8019808:	b2d72f34 	.word	0xb2d72f34
 801980c:	3638ef1b 	.word	0x3638ef1b
 8019810:	b9500d01 	.word	0xb9500d01
 8019814:	3c088889 	.word	0x3c088889
 8019818:	be2aaaab 	.word	0xbe2aaaab
 801981c:	3e2aaaab 	.word	0x3e2aaaab

08019820 <__ieee754_acosf>:
 8019820:	b508      	push	{r3, lr}
 8019822:	ee10 3a10 	vmov	r3, s0
 8019826:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801982a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801982e:	ed2d 8b0c 	vpush	{d8-d13}
 8019832:	d10a      	bne.n	801984a <__ieee754_acosf+0x2a>
 8019834:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80199c8 <__ieee754_acosf+0x1a8>
 8019838:	eddf 7a64 	vldr	s15, [pc, #400]	@ 80199cc <__ieee754_acosf+0x1ac>
 801983c:	2b00      	cmp	r3, #0
 801983e:	bfc8      	it	gt
 8019840:	eeb0 0a67 	vmovgt.f32	s0, s15
 8019844:	ecbd 8b0c 	vpop	{d8-d13}
 8019848:	bd08      	pop	{r3, pc}
 801984a:	d904      	bls.n	8019856 <__ieee754_acosf+0x36>
 801984c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019850:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019854:	e7f6      	b.n	8019844 <__ieee754_acosf+0x24>
 8019856:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801985a:	d23c      	bcs.n	80198d6 <__ieee754_acosf+0xb6>
 801985c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8019860:	f240 80af 	bls.w	80199c2 <__ieee754_acosf+0x1a2>
 8019864:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019868:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80199d0 <__ieee754_acosf+0x1b0>
 801986c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80199d4 <__ieee754_acosf+0x1b4>
 8019870:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 80199d8 <__ieee754_acosf+0x1b8>
 8019874:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019878:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80199dc <__ieee754_acosf+0x1bc>
 801987c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019880:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80199e0 <__ieee754_acosf+0x1c0>
 8019884:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019888:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80199e4 <__ieee754_acosf+0x1c4>
 801988c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019890:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80199e8 <__ieee754_acosf+0x1c8>
 8019894:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019898:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80199ec <__ieee754_acosf+0x1cc>
 801989c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80198a0:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80199f0 <__ieee754_acosf+0x1d0>
 80198a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80198a8:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80199f4 <__ieee754_acosf+0x1d4>
 80198ac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80198b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80198b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80198b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198bc:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80199f8 <__ieee754_acosf+0x1d8>
 80198c0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80198c4:	eee0 7a46 	vfms.f32	s15, s0, s12
 80198c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80198cc:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80199fc <__ieee754_acosf+0x1dc>
 80198d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80198d4:	e7b6      	b.n	8019844 <__ieee754_acosf+0x24>
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	eddf da3d 	vldr	s27, [pc, #244]	@ 80199d0 <__ieee754_acosf+0x1b0>
 80198dc:	eddf ca3d 	vldr	s25, [pc, #244]	@ 80199d4 <__ieee754_acosf+0x1b4>
 80198e0:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 80199dc <__ieee754_acosf+0x1bc>
 80198e4:	eddf ba3e 	vldr	s23, [pc, #248]	@ 80199e0 <__ieee754_acosf+0x1c0>
 80198e8:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 80199e4 <__ieee754_acosf+0x1c4>
 80198ec:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 80199e8 <__ieee754_acosf+0x1c8>
 80198f0:	ed9f da3e 	vldr	s26, [pc, #248]	@ 80199ec <__ieee754_acosf+0x1cc>
 80198f4:	eddf aa38 	vldr	s21, [pc, #224]	@ 80199d8 <__ieee754_acosf+0x1b8>
 80198f8:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 80199f0 <__ieee754_acosf+0x1d0>
 80198fc:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 80199f4 <__ieee754_acosf+0x1d4>
 8019900:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8019904:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019908:	da28      	bge.n	801995c <__ieee754_acosf+0x13c>
 801990a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801990e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019912:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8019916:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801991a:	eeac ca80 	vfma.f32	s24, s25, s0
 801991e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8019922:	eeec ba00 	vfma.f32	s23, s24, s0
 8019926:	eeea 9a00 	vfma.f32	s19, s20, s0
 801992a:	eeab ba80 	vfma.f32	s22, s23, s0
 801992e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8019932:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8019936:	ee68 8a80 	vmul.f32	s17, s17, s0
 801993a:	f7ff fecd 	bl	80196d8 <__ieee754_sqrtf>
 801993e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8019942:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8019a00 <__ieee754_acosf+0x1e0>
 8019946:	eee0 7a07 	vfma.f32	s15, s0, s14
 801994a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801994e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019952:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8019a04 <__ieee754_acosf+0x1e4>
 8019956:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801995a:	e773      	b.n	8019844 <__ieee754_acosf+0x24>
 801995c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019960:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019964:	eeb0 0a48 	vmov.f32	s0, s16
 8019968:	f7ff feb6 	bl	80196d8 <__ieee754_sqrtf>
 801996c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019970:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8019974:	eeac ca88 	vfma.f32	s24, s25, s16
 8019978:	eeaa aa88 	vfma.f32	s20, s21, s16
 801997c:	eeec ba08 	vfma.f32	s23, s24, s16
 8019980:	ee10 3a10 	vmov	r3, s0
 8019984:	eeab ba88 	vfma.f32	s22, s23, s16
 8019988:	f36f 030b 	bfc	r3, #0, #12
 801998c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019990:	ee07 3a90 	vmov	s15, r3
 8019994:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8019998:	eeb0 6a48 	vmov.f32	s12, s16
 801999c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80199a0:	eea9 9a88 	vfma.f32	s18, s19, s16
 80199a4:	ee70 6a27 	vadd.f32	s13, s0, s15
 80199a8:	ee68 8a88 	vmul.f32	s17, s17, s16
 80199ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80199b0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80199b4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80199b8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80199bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80199c0:	e740      	b.n	8019844 <__ieee754_acosf+0x24>
 80199c2:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8019a08 <__ieee754_acosf+0x1e8>
 80199c6:	e73d      	b.n	8019844 <__ieee754_acosf+0x24>
 80199c8:	40490fdb 	.word	0x40490fdb
 80199cc:	00000000 	.word	0x00000000
 80199d0:	3811ef08 	.word	0x3811ef08
 80199d4:	3a4f7f04 	.word	0x3a4f7f04
 80199d8:	bf303361 	.word	0xbf303361
 80199dc:	bd241146 	.word	0xbd241146
 80199e0:	3e4e0aa8 	.word	0x3e4e0aa8
 80199e4:	bea6b090 	.word	0xbea6b090
 80199e8:	3e2aaaab 	.word	0x3e2aaaab
 80199ec:	3d9dc62e 	.word	0x3d9dc62e
 80199f0:	4001572d 	.word	0x4001572d
 80199f4:	c019d139 	.word	0xc019d139
 80199f8:	33a22168 	.word	0x33a22168
 80199fc:	3fc90fda 	.word	0x3fc90fda
 8019a00:	b3a22168 	.word	0xb3a22168
 8019a04:	40490fda 	.word	0x40490fda
 8019a08:	3fc90fdb 	.word	0x3fc90fdb

08019a0c <__ieee754_asinf>:
 8019a0c:	b538      	push	{r3, r4, r5, lr}
 8019a0e:	ee10 5a10 	vmov	r5, s0
 8019a12:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019a16:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8019a1a:	ed2d 8b04 	vpush	{d8-d9}
 8019a1e:	d10c      	bne.n	8019a3a <__ieee754_asinf+0x2e>
 8019a20:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019b94 <__ieee754_asinf+0x188>
 8019a24:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8019b98 <__ieee754_asinf+0x18c>
 8019a28:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019a2c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019a30:	eeb0 0a67 	vmov.f32	s0, s15
 8019a34:	ecbd 8b04 	vpop	{d8-d9}
 8019a38:	bd38      	pop	{r3, r4, r5, pc}
 8019a3a:	d904      	bls.n	8019a46 <__ieee754_asinf+0x3a>
 8019a3c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019a40:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019a44:	e7f6      	b.n	8019a34 <__ieee754_asinf+0x28>
 8019a46:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019a4a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8019a4e:	d20b      	bcs.n	8019a68 <__ieee754_asinf+0x5c>
 8019a50:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8019a54:	d252      	bcs.n	8019afc <__ieee754_asinf+0xf0>
 8019a56:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8019b9c <__ieee754_asinf+0x190>
 8019a5a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019a5e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a66:	dce5      	bgt.n	8019a34 <__ieee754_asinf+0x28>
 8019a68:	f7ff fdcc 	bl	8019604 <fabsf>
 8019a6c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8019a70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019a74:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019a78:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8019ba0 <__ieee754_asinf+0x194>
 8019a7c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8019ba4 <__ieee754_asinf+0x198>
 8019a80:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8019ba8 <__ieee754_asinf+0x19c>
 8019a84:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019a88:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8019bac <__ieee754_asinf+0x1a0>
 8019a8c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019a90:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8019bb0 <__ieee754_asinf+0x1a4>
 8019a94:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019a98:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8019bb4 <__ieee754_asinf+0x1a8>
 8019a9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019aa0:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8019bb8 <__ieee754_asinf+0x1ac>
 8019aa4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019aa8:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8019bbc <__ieee754_asinf+0x1b0>
 8019aac:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019ab0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8019bc0 <__ieee754_asinf+0x1b4>
 8019ab4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019ab8:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8019bc4 <__ieee754_asinf+0x1b8>
 8019abc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8019ac4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019ac8:	f7ff fe06 	bl	80196d8 <__ieee754_sqrtf>
 8019acc:	4b3e      	ldr	r3, [pc, #248]	@ (8019bc8 <__ieee754_asinf+0x1bc>)
 8019ace:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019ad2:	429c      	cmp	r4, r3
 8019ad4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019ad8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8019adc:	d93d      	bls.n	8019b5a <__ieee754_asinf+0x14e>
 8019ade:	eea0 0a06 	vfma.f32	s0, s0, s12
 8019ae2:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8019bcc <__ieee754_asinf+0x1c0>
 8019ae6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019aea:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8019b98 <__ieee754_asinf+0x18c>
 8019aee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019af2:	2d00      	cmp	r5, #0
 8019af4:	bfd8      	it	le
 8019af6:	eeb1 0a40 	vnegle.f32	s0, s0
 8019afa:	e79b      	b.n	8019a34 <__ieee754_asinf+0x28>
 8019afc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019b00:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8019ba4 <__ieee754_asinf+0x198>
 8019b04:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8019ba0 <__ieee754_asinf+0x194>
 8019b08:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8019bb8 <__ieee754_asinf+0x1ac>
 8019b0c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019b10:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8019bac <__ieee754_asinf+0x1a0>
 8019b14:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019b18:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8019bb0 <__ieee754_asinf+0x1a4>
 8019b1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019b20:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8019bb4 <__ieee754_asinf+0x1a8>
 8019b24:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019b28:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8019ba8 <__ieee754_asinf+0x19c>
 8019b2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019b30:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8019bbc <__ieee754_asinf+0x1b0>
 8019b34:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019b38:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8019bc0 <__ieee754_asinf+0x1b4>
 8019b3c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019b40:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8019bc4 <__ieee754_asinf+0x1b8>
 8019b44:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b4c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8019b50:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019b54:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019b58:	e76c      	b.n	8019a34 <__ieee754_asinf+0x28>
 8019b5a:	ee10 3a10 	vmov	r3, s0
 8019b5e:	f36f 030b 	bfc	r3, #0, #12
 8019b62:	ee07 3a10 	vmov	s14, r3
 8019b66:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019b6a:	ee70 5a00 	vadd.f32	s11, s0, s0
 8019b6e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8019b72:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019b94 <__ieee754_asinf+0x188>
 8019b76:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8019b7a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8019bd0 <__ieee754_asinf+0x1c4>
 8019b7e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8019b82:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8019b86:	eeb0 6a40 	vmov.f32	s12, s0
 8019b8a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019b8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019b92:	e7ac      	b.n	8019aee <__ieee754_asinf+0xe2>
 8019b94:	b33bbd2e 	.word	0xb33bbd2e
 8019b98:	3fc90fdb 	.word	0x3fc90fdb
 8019b9c:	7149f2ca 	.word	0x7149f2ca
 8019ba0:	3a4f7f04 	.word	0x3a4f7f04
 8019ba4:	3811ef08 	.word	0x3811ef08
 8019ba8:	3e2aaaab 	.word	0x3e2aaaab
 8019bac:	bd241146 	.word	0xbd241146
 8019bb0:	3e4e0aa8 	.word	0x3e4e0aa8
 8019bb4:	bea6b090 	.word	0xbea6b090
 8019bb8:	3d9dc62e 	.word	0x3d9dc62e
 8019bbc:	bf303361 	.word	0xbf303361
 8019bc0:	4001572d 	.word	0x4001572d
 8019bc4:	c019d139 	.word	0xc019d139
 8019bc8:	3f799999 	.word	0x3f799999
 8019bcc:	333bbd2e 	.word	0x333bbd2e
 8019bd0:	3f490fdb 	.word	0x3f490fdb

08019bd4 <__ieee754_atan2f>:
 8019bd4:	ee10 2a90 	vmov	r2, s1
 8019bd8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8019bdc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019be0:	b510      	push	{r4, lr}
 8019be2:	eef0 7a40 	vmov.f32	s15, s0
 8019be6:	d806      	bhi.n	8019bf6 <__ieee754_atan2f+0x22>
 8019be8:	ee10 0a10 	vmov	r0, s0
 8019bec:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8019bf0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019bf4:	d904      	bls.n	8019c00 <__ieee754_atan2f+0x2c>
 8019bf6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8019bfe:	bd10      	pop	{r4, pc}
 8019c00:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019c04:	d103      	bne.n	8019c0e <__ieee754_atan2f+0x3a>
 8019c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c0a:	f7ff bbe3 	b.w	80193d4 <atanf>
 8019c0e:	1794      	asrs	r4, r2, #30
 8019c10:	f004 0402 	and.w	r4, r4, #2
 8019c14:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019c18:	b943      	cbnz	r3, 8019c2c <__ieee754_atan2f+0x58>
 8019c1a:	2c02      	cmp	r4, #2
 8019c1c:	d05e      	beq.n	8019cdc <__ieee754_atan2f+0x108>
 8019c1e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019cf0 <__ieee754_atan2f+0x11c>
 8019c22:	2c03      	cmp	r4, #3
 8019c24:	bf08      	it	eq
 8019c26:	eef0 7a47 	vmoveq.f32	s15, s14
 8019c2a:	e7e6      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019c2c:	b941      	cbnz	r1, 8019c40 <__ieee754_atan2f+0x6c>
 8019c2e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8019cf4 <__ieee754_atan2f+0x120>
 8019c32:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8019cf8 <__ieee754_atan2f+0x124>
 8019c36:	2800      	cmp	r0, #0
 8019c38:	bfa8      	it	ge
 8019c3a:	eef0 7a47 	vmovge.f32	s15, s14
 8019c3e:	e7dc      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019c40:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019c44:	d110      	bne.n	8019c68 <__ieee754_atan2f+0x94>
 8019c46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019c4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8019c4e:	d107      	bne.n	8019c60 <__ieee754_atan2f+0x8c>
 8019c50:	2c02      	cmp	r4, #2
 8019c52:	d846      	bhi.n	8019ce2 <__ieee754_atan2f+0x10e>
 8019c54:	4b29      	ldr	r3, [pc, #164]	@ (8019cfc <__ieee754_atan2f+0x128>)
 8019c56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019c5a:	edd3 7a00 	vldr	s15, [r3]
 8019c5e:	e7cc      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019c60:	2c02      	cmp	r4, #2
 8019c62:	d841      	bhi.n	8019ce8 <__ieee754_atan2f+0x114>
 8019c64:	4b26      	ldr	r3, [pc, #152]	@ (8019d00 <__ieee754_atan2f+0x12c>)
 8019c66:	e7f6      	b.n	8019c56 <__ieee754_atan2f+0x82>
 8019c68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019c6c:	d0df      	beq.n	8019c2e <__ieee754_atan2f+0x5a>
 8019c6e:	1a5b      	subs	r3, r3, r1
 8019c70:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8019c74:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019c78:	da1a      	bge.n	8019cb0 <__ieee754_atan2f+0xdc>
 8019c7a:	2a00      	cmp	r2, #0
 8019c7c:	da01      	bge.n	8019c82 <__ieee754_atan2f+0xae>
 8019c7e:	313c      	adds	r1, #60	@ 0x3c
 8019c80:	db19      	blt.n	8019cb6 <__ieee754_atan2f+0xe2>
 8019c82:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019c86:	f7ff fcbd 	bl	8019604 <fabsf>
 8019c8a:	f7ff fba3 	bl	80193d4 <atanf>
 8019c8e:	eef0 7a40 	vmov.f32	s15, s0
 8019c92:	2c01      	cmp	r4, #1
 8019c94:	d012      	beq.n	8019cbc <__ieee754_atan2f+0xe8>
 8019c96:	2c02      	cmp	r4, #2
 8019c98:	d017      	beq.n	8019cca <__ieee754_atan2f+0xf6>
 8019c9a:	2c00      	cmp	r4, #0
 8019c9c:	d0ad      	beq.n	8019bfa <__ieee754_atan2f+0x26>
 8019c9e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8019d04 <__ieee754_atan2f+0x130>
 8019ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ca6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8019d08 <__ieee754_atan2f+0x134>
 8019caa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cae:	e7a4      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019cb0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8019cf8 <__ieee754_atan2f+0x124>
 8019cb4:	e7ed      	b.n	8019c92 <__ieee754_atan2f+0xbe>
 8019cb6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019d0c <__ieee754_atan2f+0x138>
 8019cba:	e7ea      	b.n	8019c92 <__ieee754_atan2f+0xbe>
 8019cbc:	ee17 3a90 	vmov	r3, s15
 8019cc0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019cc4:	ee07 3a90 	vmov	s15, r3
 8019cc8:	e797      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019cca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8019d04 <__ieee754_atan2f+0x130>
 8019cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019cd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8019d08 <__ieee754_atan2f+0x134>
 8019cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019cda:	e78e      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019cdc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8019d08 <__ieee754_atan2f+0x134>
 8019ce0:	e78b      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019ce2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8019d10 <__ieee754_atan2f+0x13c>
 8019ce6:	e788      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019ce8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019d0c <__ieee754_atan2f+0x138>
 8019cec:	e785      	b.n	8019bfa <__ieee754_atan2f+0x26>
 8019cee:	bf00      	nop
 8019cf0:	c0490fdb 	.word	0xc0490fdb
 8019cf4:	bfc90fdb 	.word	0xbfc90fdb
 8019cf8:	3fc90fdb 	.word	0x3fc90fdb
 8019cfc:	08022348 	.word	0x08022348
 8019d00:	0802233c 	.word	0x0802233c
 8019d04:	33bbbd2e 	.word	0x33bbbd2e
 8019d08:	40490fdb 	.word	0x40490fdb
 8019d0c:	00000000 	.word	0x00000000
 8019d10:	3f490fdb 	.word	0x3f490fdb

08019d14 <__ieee754_powf>:
 8019d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d18:	ee10 4a90 	vmov	r4, s1
 8019d1c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8019d20:	ed2d 8b02 	vpush	{d8}
 8019d24:	ee10 6a10 	vmov	r6, s0
 8019d28:	eeb0 8a40 	vmov.f32	s16, s0
 8019d2c:	eef0 8a60 	vmov.f32	s17, s1
 8019d30:	d10c      	bne.n	8019d4c <__ieee754_powf+0x38>
 8019d32:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8019d36:	0076      	lsls	r6, r6, #1
 8019d38:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8019d3c:	f240 8274 	bls.w	801a228 <__ieee754_powf+0x514>
 8019d40:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019d44:	ecbd 8b02 	vpop	{d8}
 8019d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d4c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8019d50:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8019d54:	d802      	bhi.n	8019d5c <__ieee754_powf+0x48>
 8019d56:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019d5a:	d908      	bls.n	8019d6e <__ieee754_powf+0x5a>
 8019d5c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8019d60:	d1ee      	bne.n	8019d40 <__ieee754_powf+0x2c>
 8019d62:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8019d66:	0064      	lsls	r4, r4, #1
 8019d68:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8019d6c:	e7e6      	b.n	8019d3c <__ieee754_powf+0x28>
 8019d6e:	2e00      	cmp	r6, #0
 8019d70:	da1f      	bge.n	8019db2 <__ieee754_powf+0x9e>
 8019d72:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8019d76:	f080 8260 	bcs.w	801a23a <__ieee754_powf+0x526>
 8019d7a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019d7e:	d32f      	bcc.n	8019de0 <__ieee754_powf+0xcc>
 8019d80:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8019d84:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8019d88:	fa49 f503 	asr.w	r5, r9, r3
 8019d8c:	fa05 f303 	lsl.w	r3, r5, r3
 8019d90:	454b      	cmp	r3, r9
 8019d92:	d123      	bne.n	8019ddc <__ieee754_powf+0xc8>
 8019d94:	f005 0501 	and.w	r5, r5, #1
 8019d98:	f1c5 0502 	rsb	r5, r5, #2
 8019d9c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019da0:	d11f      	bne.n	8019de2 <__ieee754_powf+0xce>
 8019da2:	2c00      	cmp	r4, #0
 8019da4:	f280 8246 	bge.w	801a234 <__ieee754_powf+0x520>
 8019da8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019dac:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019db0:	e7c8      	b.n	8019d44 <__ieee754_powf+0x30>
 8019db2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019db6:	d111      	bne.n	8019ddc <__ieee754_powf+0xc8>
 8019db8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8019dbc:	f000 8234 	beq.w	801a228 <__ieee754_powf+0x514>
 8019dc0:	d906      	bls.n	8019dd0 <__ieee754_powf+0xbc>
 8019dc2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 801a0d8 <__ieee754_powf+0x3c4>
 8019dc6:	2c00      	cmp	r4, #0
 8019dc8:	bfa8      	it	ge
 8019dca:	eeb0 0a68 	vmovge.f32	s0, s17
 8019dce:	e7b9      	b.n	8019d44 <__ieee754_powf+0x30>
 8019dd0:	2c00      	cmp	r4, #0
 8019dd2:	f280 822c 	bge.w	801a22e <__ieee754_powf+0x51a>
 8019dd6:	eeb1 0a68 	vneg.f32	s0, s17
 8019dda:	e7b3      	b.n	8019d44 <__ieee754_powf+0x30>
 8019ddc:	2500      	movs	r5, #0
 8019dde:	e7dd      	b.n	8019d9c <__ieee754_powf+0x88>
 8019de0:	2500      	movs	r5, #0
 8019de2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019de6:	d102      	bne.n	8019dee <__ieee754_powf+0xda>
 8019de8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019dec:	e7aa      	b.n	8019d44 <__ieee754_powf+0x30>
 8019dee:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019df2:	f040 8227 	bne.w	801a244 <__ieee754_powf+0x530>
 8019df6:	2e00      	cmp	r6, #0
 8019df8:	f2c0 8224 	blt.w	801a244 <__ieee754_powf+0x530>
 8019dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8019e00:	ecbd 8b02 	vpop	{d8}
 8019e04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e08:	f7ff bc66 	b.w	80196d8 <__ieee754_sqrtf>
 8019e0c:	2d01      	cmp	r5, #1
 8019e0e:	d199      	bne.n	8019d44 <__ieee754_powf+0x30>
 8019e10:	eeb1 0a40 	vneg.f32	s0, s0
 8019e14:	e796      	b.n	8019d44 <__ieee754_powf+0x30>
 8019e16:	0ff0      	lsrs	r0, r6, #31
 8019e18:	3801      	subs	r0, #1
 8019e1a:	ea55 0300 	orrs.w	r3, r5, r0
 8019e1e:	d104      	bne.n	8019e2a <__ieee754_powf+0x116>
 8019e20:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019e24:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019e28:	e78c      	b.n	8019d44 <__ieee754_powf+0x30>
 8019e2a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8019e2e:	d96d      	bls.n	8019f0c <__ieee754_powf+0x1f8>
 8019e30:	4baa      	ldr	r3, [pc, #680]	@ (801a0dc <__ieee754_powf+0x3c8>)
 8019e32:	4598      	cmp	r8, r3
 8019e34:	d808      	bhi.n	8019e48 <__ieee754_powf+0x134>
 8019e36:	2c00      	cmp	r4, #0
 8019e38:	da0b      	bge.n	8019e52 <__ieee754_powf+0x13e>
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	ecbd 8b02 	vpop	{d8}
 8019e40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e44:	f000 bbea 	b.w	801a61c <__math_oflowf>
 8019e48:	4ba5      	ldr	r3, [pc, #660]	@ (801a0e0 <__ieee754_powf+0x3cc>)
 8019e4a:	4598      	cmp	r8, r3
 8019e4c:	d908      	bls.n	8019e60 <__ieee754_powf+0x14c>
 8019e4e:	2c00      	cmp	r4, #0
 8019e50:	dcf3      	bgt.n	8019e3a <__ieee754_powf+0x126>
 8019e52:	2000      	movs	r0, #0
 8019e54:	ecbd 8b02 	vpop	{d8}
 8019e58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e5c:	f000 bbd8 	b.w	801a610 <__math_uflowf>
 8019e60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019e64:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019e68:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801a0e4 <__ieee754_powf+0x3d0>
 8019e6c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019e70:	eee0 6a67 	vfms.f32	s13, s0, s15
 8019e74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019e78:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019e7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019e80:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801a0e8 <__ieee754_powf+0x3d4>
 8019e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e88:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801a0ec <__ieee754_powf+0x3d8>
 8019e8c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8019e90:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801a0f0 <__ieee754_powf+0x3dc>
 8019e94:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019e98:	eeb0 7a67 	vmov.f32	s14, s15
 8019e9c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019ea0:	ee17 3a10 	vmov	r3, s14
 8019ea4:	f36f 030b 	bfc	r3, #0, #12
 8019ea8:	ee07 3a10 	vmov	s14, r3
 8019eac:	eeb0 6a47 	vmov.f32	s12, s14
 8019eb0:	eea0 6a66 	vfms.f32	s12, s0, s13
 8019eb4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019eb8:	3d01      	subs	r5, #1
 8019eba:	4305      	orrs	r5, r0
 8019ebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019ec0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8019ec4:	f36f 040b 	bfc	r4, #0, #12
 8019ec8:	bf18      	it	ne
 8019eca:	eeb0 8a66 	vmovne.f32	s16, s13
 8019ece:	ee06 4a90 	vmov	s13, r4
 8019ed2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019ed6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8019eda:	ee67 7a26 	vmul.f32	s15, s14, s13
 8019ede:	eee6 0a07 	vfma.f32	s1, s12, s14
 8019ee2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019ee6:	ee17 1a10 	vmov	r1, s14
 8019eea:	2900      	cmp	r1, #0
 8019eec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019ef0:	f340 80dd 	ble.w	801a0ae <__ieee754_powf+0x39a>
 8019ef4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8019ef8:	f240 80ca 	bls.w	801a090 <__ieee754_powf+0x37c>
 8019efc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f04:	bf4c      	ite	mi
 8019f06:	2001      	movmi	r0, #1
 8019f08:	2000      	movpl	r0, #0
 8019f0a:	e797      	b.n	8019e3c <__ieee754_powf+0x128>
 8019f0c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8019f10:	bf01      	itttt	eq
 8019f12:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801a0f4 <__ieee754_powf+0x3e0>
 8019f16:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8019f1a:	f06f 0317 	mvneq.w	r3, #23
 8019f1e:	ee17 7a90 	vmoveq	r7, s15
 8019f22:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8019f26:	bf18      	it	ne
 8019f28:	2300      	movne	r3, #0
 8019f2a:	3a7f      	subs	r2, #127	@ 0x7f
 8019f2c:	441a      	add	r2, r3
 8019f2e:	4b72      	ldr	r3, [pc, #456]	@ (801a0f8 <__ieee754_powf+0x3e4>)
 8019f30:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8019f34:	429f      	cmp	r7, r3
 8019f36:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8019f3a:	dd06      	ble.n	8019f4a <__ieee754_powf+0x236>
 8019f3c:	4b6f      	ldr	r3, [pc, #444]	@ (801a0fc <__ieee754_powf+0x3e8>)
 8019f3e:	429f      	cmp	r7, r3
 8019f40:	f340 80a4 	ble.w	801a08c <__ieee754_powf+0x378>
 8019f44:	3201      	adds	r2, #1
 8019f46:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8019f4a:	2600      	movs	r6, #0
 8019f4c:	4b6c      	ldr	r3, [pc, #432]	@ (801a100 <__ieee754_powf+0x3ec>)
 8019f4e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8019f52:	ee07 1a10 	vmov	s14, r1
 8019f56:	edd3 5a00 	vldr	s11, [r3]
 8019f5a:	4b6a      	ldr	r3, [pc, #424]	@ (801a104 <__ieee754_powf+0x3f0>)
 8019f5c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8019f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019f64:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8019f68:	1049      	asrs	r1, r1, #1
 8019f6a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8019f6e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8019f72:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8019f76:	ee37 6a65 	vsub.f32	s12, s14, s11
 8019f7a:	ee07 1a90 	vmov	s15, r1
 8019f7e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8019f82:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8019f86:	ee15 7a10 	vmov	r7, s10
 8019f8a:	401f      	ands	r7, r3
 8019f8c:	ee06 7a90 	vmov	s13, r7
 8019f90:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8019f94:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019f98:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019f9c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019fa0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801a108 <__ieee754_powf+0x3f4>
 8019fa4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801a10c <__ieee754_powf+0x3f8>
 8019fa8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019fac:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801a110 <__ieee754_powf+0x3fc>
 8019fb0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019fb4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801a0e4 <__ieee754_powf+0x3d0>
 8019fb8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019fbc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801a114 <__ieee754_powf+0x400>
 8019fc0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019fc4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801a118 <__ieee754_powf+0x404>
 8019fc8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019fcc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019fd0:	ee35 7a26 	vadd.f32	s14, s10, s13
 8019fd4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8019fd8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019fdc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019fe0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8019fe4:	eef0 5a67 	vmov.f32	s11, s15
 8019fe8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8019fec:	ee75 5a87 	vadd.f32	s11, s11, s14
 8019ff0:	ee15 1a90 	vmov	r1, s11
 8019ff4:	4019      	ands	r1, r3
 8019ff6:	ee05 1a90 	vmov	s11, r1
 8019ffa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019ffe:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801a002:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a006:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a00a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a00e:	eeb0 6a67 	vmov.f32	s12, s15
 801a012:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a016:	ee16 1a10 	vmov	r1, s12
 801a01a:	4019      	ands	r1, r3
 801a01c:	ee06 1a10 	vmov	s12, r1
 801a020:	eeb0 7a46 	vmov.f32	s14, s12
 801a024:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801a028:	493c      	ldr	r1, [pc, #240]	@ (801a11c <__ieee754_powf+0x408>)
 801a02a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801a02e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a032:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801a120 <__ieee754_powf+0x40c>
 801a036:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801a124 <__ieee754_powf+0x410>
 801a03a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a03e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801a128 <__ieee754_powf+0x414>
 801a042:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a046:	ed91 7a00 	vldr	s14, [r1]
 801a04a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a04e:	ee07 2a10 	vmov	s14, r2
 801a052:	4a36      	ldr	r2, [pc, #216]	@ (801a12c <__ieee754_powf+0x418>)
 801a054:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801a058:	eeb0 7a67 	vmov.f32	s14, s15
 801a05c:	eea6 7a25 	vfma.f32	s14, s12, s11
 801a060:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801a064:	ed92 5a00 	vldr	s10, [r2]
 801a068:	ee37 7a05 	vadd.f32	s14, s14, s10
 801a06c:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a070:	ee17 2a10 	vmov	r2, s14
 801a074:	401a      	ands	r2, r3
 801a076:	ee07 2a10 	vmov	s14, r2
 801a07a:	ee77 6a66 	vsub.f32	s13, s14, s13
 801a07e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801a082:	eee6 6a65 	vfms.f32	s13, s12, s11
 801a086:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a08a:	e715      	b.n	8019eb8 <__ieee754_powf+0x1a4>
 801a08c:	2601      	movs	r6, #1
 801a08e:	e75d      	b.n	8019f4c <__ieee754_powf+0x238>
 801a090:	d152      	bne.n	801a138 <__ieee754_powf+0x424>
 801a092:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801a130 <__ieee754_powf+0x41c>
 801a096:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a09a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801a09e:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0a6:	f73f af29 	bgt.w	8019efc <__ieee754_powf+0x1e8>
 801a0aa:	2386      	movs	r3, #134	@ 0x86
 801a0ac:	e048      	b.n	801a140 <__ieee754_powf+0x42c>
 801a0ae:	4a21      	ldr	r2, [pc, #132]	@ (801a134 <__ieee754_powf+0x420>)
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d907      	bls.n	801a0c4 <__ieee754_powf+0x3b0>
 801a0b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0bc:	bf4c      	ite	mi
 801a0be:	2001      	movmi	r0, #1
 801a0c0:	2000      	movpl	r0, #0
 801a0c2:	e6c7      	b.n	8019e54 <__ieee754_powf+0x140>
 801a0c4:	d138      	bne.n	801a138 <__ieee754_powf+0x424>
 801a0c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a0ca:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801a0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0d2:	dbea      	blt.n	801a0aa <__ieee754_powf+0x396>
 801a0d4:	e7ee      	b.n	801a0b4 <__ieee754_powf+0x3a0>
 801a0d6:	bf00      	nop
 801a0d8:	00000000 	.word	0x00000000
 801a0dc:	3f7ffff3 	.word	0x3f7ffff3
 801a0e0:	3f800007 	.word	0x3f800007
 801a0e4:	3eaaaaab 	.word	0x3eaaaaab
 801a0e8:	3fb8aa00 	.word	0x3fb8aa00
 801a0ec:	3fb8aa3b 	.word	0x3fb8aa3b
 801a0f0:	36eca570 	.word	0x36eca570
 801a0f4:	4b800000 	.word	0x4b800000
 801a0f8:	001cc471 	.word	0x001cc471
 801a0fc:	005db3d6 	.word	0x005db3d6
 801a100:	08022364 	.word	0x08022364
 801a104:	fffff000 	.word	0xfffff000
 801a108:	3e6c3255 	.word	0x3e6c3255
 801a10c:	3e53f142 	.word	0x3e53f142
 801a110:	3e8ba305 	.word	0x3e8ba305
 801a114:	3edb6db7 	.word	0x3edb6db7
 801a118:	3f19999a 	.word	0x3f19999a
 801a11c:	08022354 	.word	0x08022354
 801a120:	3f76384f 	.word	0x3f76384f
 801a124:	3f763800 	.word	0x3f763800
 801a128:	369dc3a0 	.word	0x369dc3a0
 801a12c:	0802235c 	.word	0x0802235c
 801a130:	3338aa3c 	.word	0x3338aa3c
 801a134:	43160000 	.word	0x43160000
 801a138:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801a13c:	d96f      	bls.n	801a21e <__ieee754_powf+0x50a>
 801a13e:	15db      	asrs	r3, r3, #23
 801a140:	3b7e      	subs	r3, #126	@ 0x7e
 801a142:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801a146:	4118      	asrs	r0, r3
 801a148:	4408      	add	r0, r1
 801a14a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801a14e:	4a4e      	ldr	r2, [pc, #312]	@ (801a288 <__ieee754_powf+0x574>)
 801a150:	3b7f      	subs	r3, #127	@ 0x7f
 801a152:	411a      	asrs	r2, r3
 801a154:	4002      	ands	r2, r0
 801a156:	ee07 2a10 	vmov	s14, r2
 801a15a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801a15e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801a162:	f1c3 0317 	rsb	r3, r3, #23
 801a166:	4118      	asrs	r0, r3
 801a168:	2900      	cmp	r1, #0
 801a16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a16e:	bfb8      	it	lt
 801a170:	4240      	neglt	r0, r0
 801a172:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801a176:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801a28c <__ieee754_powf+0x578>
 801a17a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801a290 <__ieee754_powf+0x57c>
 801a17e:	ee16 3a90 	vmov	r3, s13
 801a182:	f36f 030b 	bfc	r3, #0, #12
 801a186:	ee06 3a90 	vmov	s13, r3
 801a18a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a18e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a192:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a196:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801a294 <__ieee754_powf+0x580>
 801a19a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a19e:	eee0 7a87 	vfma.f32	s15, s1, s14
 801a1a2:	eeb0 7a67 	vmov.f32	s14, s15
 801a1a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 801a1aa:	eef0 5a47 	vmov.f32	s11, s14
 801a1ae:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801a1b2:	ee67 6a07 	vmul.f32	s13, s14, s14
 801a1b6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a1ba:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801a298 <__ieee754_powf+0x584>
 801a1be:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801a29c <__ieee754_powf+0x588>
 801a1c2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a1c6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801a2a0 <__ieee754_powf+0x58c>
 801a1ca:	eee6 5a26 	vfma.f32	s11, s12, s13
 801a1ce:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801a2a4 <__ieee754_powf+0x590>
 801a1d2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801a1d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801a2a8 <__ieee754_powf+0x594>
 801a1da:	eee6 5a26 	vfma.f32	s11, s12, s13
 801a1de:	eeb0 6a47 	vmov.f32	s12, s14
 801a1e2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801a1e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801a1ea:	ee67 5a06 	vmul.f32	s11, s14, s12
 801a1ee:	ee36 6a66 	vsub.f32	s12, s12, s13
 801a1f2:	eee7 7a27 	vfma.f32	s15, s14, s15
 801a1f6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801a1fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a1fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a202:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a206:	ee10 3a10 	vmov	r3, s0
 801a20a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801a20e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a212:	da06      	bge.n	801a222 <__ieee754_powf+0x50e>
 801a214:	f000 f97c 	bl	801a510 <scalbnf>
 801a218:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a21c:	e592      	b.n	8019d44 <__ieee754_powf+0x30>
 801a21e:	2000      	movs	r0, #0
 801a220:	e7a7      	b.n	801a172 <__ieee754_powf+0x45e>
 801a222:	ee00 3a10 	vmov	s0, r3
 801a226:	e7f7      	b.n	801a218 <__ieee754_powf+0x504>
 801a228:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a22c:	e58a      	b.n	8019d44 <__ieee754_powf+0x30>
 801a22e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801a2ac <__ieee754_powf+0x598>
 801a232:	e587      	b.n	8019d44 <__ieee754_powf+0x30>
 801a234:	eeb0 0a48 	vmov.f32	s0, s16
 801a238:	e584      	b.n	8019d44 <__ieee754_powf+0x30>
 801a23a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801a23e:	f43f adbb 	beq.w	8019db8 <__ieee754_powf+0xa4>
 801a242:	2502      	movs	r5, #2
 801a244:	eeb0 0a48 	vmov.f32	s0, s16
 801a248:	f7ff f9dc 	bl	8019604 <fabsf>
 801a24c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801a250:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801a254:	4647      	mov	r7, r8
 801a256:	d003      	beq.n	801a260 <__ieee754_powf+0x54c>
 801a258:	f1b8 0f00 	cmp.w	r8, #0
 801a25c:	f47f addb 	bne.w	8019e16 <__ieee754_powf+0x102>
 801a260:	2c00      	cmp	r4, #0
 801a262:	bfbc      	itt	lt
 801a264:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801a268:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801a26c:	2e00      	cmp	r6, #0
 801a26e:	f6bf ad69 	bge.w	8019d44 <__ieee754_powf+0x30>
 801a272:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801a276:	ea58 0805 	orrs.w	r8, r8, r5
 801a27a:	f47f adc7 	bne.w	8019e0c <__ieee754_powf+0xf8>
 801a27e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a282:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a286:	e55d      	b.n	8019d44 <__ieee754_powf+0x30>
 801a288:	ff800000 	.word	0xff800000
 801a28c:	3f317218 	.word	0x3f317218
 801a290:	3f317200 	.word	0x3f317200
 801a294:	35bfbe8c 	.word	0x35bfbe8c
 801a298:	b5ddea0e 	.word	0xb5ddea0e
 801a29c:	3331bb4c 	.word	0x3331bb4c
 801a2a0:	388ab355 	.word	0x388ab355
 801a2a4:	bb360b61 	.word	0xbb360b61
 801a2a8:	3e2aaaab 	.word	0x3e2aaaab
 801a2ac:	00000000 	.word	0x00000000

0801a2b0 <__ieee754_rem_pio2f>:
 801a2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2b2:	ee10 6a10 	vmov	r6, s0
 801a2b6:	4b88      	ldr	r3, [pc, #544]	@ (801a4d8 <__ieee754_rem_pio2f+0x228>)
 801a2b8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801a2bc:	429d      	cmp	r5, r3
 801a2be:	b087      	sub	sp, #28
 801a2c0:	4604      	mov	r4, r0
 801a2c2:	d805      	bhi.n	801a2d0 <__ieee754_rem_pio2f+0x20>
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	ed80 0a00 	vstr	s0, [r0]
 801a2ca:	6043      	str	r3, [r0, #4]
 801a2cc:	2000      	movs	r0, #0
 801a2ce:	e022      	b.n	801a316 <__ieee754_rem_pio2f+0x66>
 801a2d0:	4b82      	ldr	r3, [pc, #520]	@ (801a4dc <__ieee754_rem_pio2f+0x22c>)
 801a2d2:	429d      	cmp	r5, r3
 801a2d4:	d83a      	bhi.n	801a34c <__ieee754_rem_pio2f+0x9c>
 801a2d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a2da:	2e00      	cmp	r6, #0
 801a2dc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801a4e0 <__ieee754_rem_pio2f+0x230>
 801a2e0:	4a80      	ldr	r2, [pc, #512]	@ (801a4e4 <__ieee754_rem_pio2f+0x234>)
 801a2e2:	f023 030f 	bic.w	r3, r3, #15
 801a2e6:	dd18      	ble.n	801a31a <__ieee754_rem_pio2f+0x6a>
 801a2e8:	4293      	cmp	r3, r2
 801a2ea:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a2ee:	bf09      	itett	eq
 801a2f0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801a4e8 <__ieee754_rem_pio2f+0x238>
 801a2f4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801a4ec <__ieee754_rem_pio2f+0x23c>
 801a2f8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801a4f0 <__ieee754_rem_pio2f+0x240>
 801a2fc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a300:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801a304:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a308:	ed80 7a00 	vstr	s14, [r0]
 801a30c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a310:	edc0 7a01 	vstr	s15, [r0, #4]
 801a314:	2001      	movs	r0, #1
 801a316:	b007      	add	sp, #28
 801a318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a31a:	4293      	cmp	r3, r2
 801a31c:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a320:	bf09      	itett	eq
 801a322:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801a4e8 <__ieee754_rem_pio2f+0x238>
 801a326:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801a4ec <__ieee754_rem_pio2f+0x23c>
 801a32a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801a4f0 <__ieee754_rem_pio2f+0x240>
 801a32e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a332:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a33a:	ed80 7a00 	vstr	s14, [r0]
 801a33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a342:	edc0 7a01 	vstr	s15, [r0, #4]
 801a346:	f04f 30ff 	mov.w	r0, #4294967295
 801a34a:	e7e4      	b.n	801a316 <__ieee754_rem_pio2f+0x66>
 801a34c:	4b69      	ldr	r3, [pc, #420]	@ (801a4f4 <__ieee754_rem_pio2f+0x244>)
 801a34e:	429d      	cmp	r5, r3
 801a350:	d873      	bhi.n	801a43a <__ieee754_rem_pio2f+0x18a>
 801a352:	f7ff f957 	bl	8019604 <fabsf>
 801a356:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801a4f8 <__ieee754_rem_pio2f+0x248>
 801a35a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a35e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a36a:	ee17 0a90 	vmov	r0, s15
 801a36e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a4e0 <__ieee754_rem_pio2f+0x230>
 801a372:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a376:	281f      	cmp	r0, #31
 801a378:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a4ec <__ieee754_rem_pio2f+0x23c>
 801a37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a380:	eeb1 6a47 	vneg.f32	s12, s14
 801a384:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a388:	ee16 1a90 	vmov	r1, s13
 801a38c:	dc09      	bgt.n	801a3a2 <__ieee754_rem_pio2f+0xf2>
 801a38e:	4a5b      	ldr	r2, [pc, #364]	@ (801a4fc <__ieee754_rem_pio2f+0x24c>)
 801a390:	1e47      	subs	r7, r0, #1
 801a392:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a396:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801a39a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	d107      	bne.n	801a3b2 <__ieee754_rem_pio2f+0x102>
 801a3a2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801a3a6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801a3aa:	2a08      	cmp	r2, #8
 801a3ac:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a3b0:	dc14      	bgt.n	801a3dc <__ieee754_rem_pio2f+0x12c>
 801a3b2:	6021      	str	r1, [r4, #0]
 801a3b4:	ed94 7a00 	vldr	s14, [r4]
 801a3b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a3bc:	2e00      	cmp	r6, #0
 801a3be:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a3c2:	ed84 0a01 	vstr	s0, [r4, #4]
 801a3c6:	daa6      	bge.n	801a316 <__ieee754_rem_pio2f+0x66>
 801a3c8:	eeb1 7a47 	vneg.f32	s14, s14
 801a3cc:	eeb1 0a40 	vneg.f32	s0, s0
 801a3d0:	ed84 7a00 	vstr	s14, [r4]
 801a3d4:	ed84 0a01 	vstr	s0, [r4, #4]
 801a3d8:	4240      	negs	r0, r0
 801a3da:	e79c      	b.n	801a316 <__ieee754_rem_pio2f+0x66>
 801a3dc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801a4e8 <__ieee754_rem_pio2f+0x238>
 801a3e0:	eef0 6a40 	vmov.f32	s13, s0
 801a3e4:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a3e8:	ee70 7a66 	vsub.f32	s15, s0, s13
 801a3ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a3f0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801a4f0 <__ieee754_rem_pio2f+0x240>
 801a3f4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a3f8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a3fc:	ee15 2a90 	vmov	r2, s11
 801a400:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a404:	1a5b      	subs	r3, r3, r1
 801a406:	2b19      	cmp	r3, #25
 801a408:	dc04      	bgt.n	801a414 <__ieee754_rem_pio2f+0x164>
 801a40a:	edc4 5a00 	vstr	s11, [r4]
 801a40e:	eeb0 0a66 	vmov.f32	s0, s13
 801a412:	e7cf      	b.n	801a3b4 <__ieee754_rem_pio2f+0x104>
 801a414:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801a500 <__ieee754_rem_pio2f+0x250>
 801a418:	eeb0 0a66 	vmov.f32	s0, s13
 801a41c:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a420:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a424:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801a504 <__ieee754_rem_pio2f+0x254>
 801a428:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a42c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a430:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a434:	ed84 7a00 	vstr	s14, [r4]
 801a438:	e7bc      	b.n	801a3b4 <__ieee754_rem_pio2f+0x104>
 801a43a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801a43e:	d306      	bcc.n	801a44e <__ieee754_rem_pio2f+0x19e>
 801a440:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a444:	edc0 7a01 	vstr	s15, [r0, #4]
 801a448:	edc0 7a00 	vstr	s15, [r0]
 801a44c:	e73e      	b.n	801a2cc <__ieee754_rem_pio2f+0x1c>
 801a44e:	15ea      	asrs	r2, r5, #23
 801a450:	3a86      	subs	r2, #134	@ 0x86
 801a452:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a456:	ee07 3a90 	vmov	s15, r3
 801a45a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a45e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801a508 <__ieee754_rem_pio2f+0x258>
 801a462:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a46a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a46e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a472:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a47a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a47e:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a482:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a486:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a48e:	edcd 7a05 	vstr	s15, [sp, #20]
 801a492:	d11e      	bne.n	801a4d2 <__ieee754_rem_pio2f+0x222>
 801a494:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a49c:	bf0c      	ite	eq
 801a49e:	2301      	moveq	r3, #1
 801a4a0:	2302      	movne	r3, #2
 801a4a2:	491a      	ldr	r1, [pc, #104]	@ (801a50c <__ieee754_rem_pio2f+0x25c>)
 801a4a4:	9101      	str	r1, [sp, #4]
 801a4a6:	2102      	movs	r1, #2
 801a4a8:	9100      	str	r1, [sp, #0]
 801a4aa:	a803      	add	r0, sp, #12
 801a4ac:	4621      	mov	r1, r4
 801a4ae:	f000 f8bb 	bl	801a628 <__kernel_rem_pio2f>
 801a4b2:	2e00      	cmp	r6, #0
 801a4b4:	f6bf af2f 	bge.w	801a316 <__ieee754_rem_pio2f+0x66>
 801a4b8:	edd4 7a00 	vldr	s15, [r4]
 801a4bc:	eef1 7a67 	vneg.f32	s15, s15
 801a4c0:	edc4 7a00 	vstr	s15, [r4]
 801a4c4:	edd4 7a01 	vldr	s15, [r4, #4]
 801a4c8:	eef1 7a67 	vneg.f32	s15, s15
 801a4cc:	edc4 7a01 	vstr	s15, [r4, #4]
 801a4d0:	e782      	b.n	801a3d8 <__ieee754_rem_pio2f+0x128>
 801a4d2:	2303      	movs	r3, #3
 801a4d4:	e7e5      	b.n	801a4a2 <__ieee754_rem_pio2f+0x1f2>
 801a4d6:	bf00      	nop
 801a4d8:	3f490fd8 	.word	0x3f490fd8
 801a4dc:	4016cbe3 	.word	0x4016cbe3
 801a4e0:	3fc90f80 	.word	0x3fc90f80
 801a4e4:	3fc90fd0 	.word	0x3fc90fd0
 801a4e8:	37354400 	.word	0x37354400
 801a4ec:	37354443 	.word	0x37354443
 801a4f0:	2e85a308 	.word	0x2e85a308
 801a4f4:	43490f80 	.word	0x43490f80
 801a4f8:	3f22f984 	.word	0x3f22f984
 801a4fc:	0802236c 	.word	0x0802236c
 801a500:	2e85a300 	.word	0x2e85a300
 801a504:	248d3132 	.word	0x248d3132
 801a508:	43800000 	.word	0x43800000
 801a50c:	080223ec 	.word	0x080223ec

0801a510 <scalbnf>:
 801a510:	ee10 3a10 	vmov	r3, s0
 801a514:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801a518:	d02b      	beq.n	801a572 <scalbnf+0x62>
 801a51a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801a51e:	d302      	bcc.n	801a526 <scalbnf+0x16>
 801a520:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a524:	4770      	bx	lr
 801a526:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a52a:	d123      	bne.n	801a574 <scalbnf+0x64>
 801a52c:	4b24      	ldr	r3, [pc, #144]	@ (801a5c0 <scalbnf+0xb0>)
 801a52e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801a5c4 <scalbnf+0xb4>
 801a532:	4298      	cmp	r0, r3
 801a534:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a538:	db17      	blt.n	801a56a <scalbnf+0x5a>
 801a53a:	ee10 3a10 	vmov	r3, s0
 801a53e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a542:	3a19      	subs	r2, #25
 801a544:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801a548:	4288      	cmp	r0, r1
 801a54a:	dd15      	ble.n	801a578 <scalbnf+0x68>
 801a54c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801a5c8 <scalbnf+0xb8>
 801a550:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801a5cc <scalbnf+0xbc>
 801a554:	ee10 3a10 	vmov	r3, s0
 801a558:	eeb0 7a67 	vmov.f32	s14, s15
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	bfb8      	it	lt
 801a560:	eef0 7a66 	vmovlt.f32	s15, s13
 801a564:	ee27 0a87 	vmul.f32	s0, s15, s14
 801a568:	4770      	bx	lr
 801a56a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a5d0 <scalbnf+0xc0>
 801a56e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a572:	4770      	bx	lr
 801a574:	0dd2      	lsrs	r2, r2, #23
 801a576:	e7e5      	b.n	801a544 <scalbnf+0x34>
 801a578:	4410      	add	r0, r2
 801a57a:	28fe      	cmp	r0, #254	@ 0xfe
 801a57c:	dce6      	bgt.n	801a54c <scalbnf+0x3c>
 801a57e:	2800      	cmp	r0, #0
 801a580:	dd06      	ble.n	801a590 <scalbnf+0x80>
 801a582:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a586:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a58a:	ee00 3a10 	vmov	s0, r3
 801a58e:	4770      	bx	lr
 801a590:	f110 0f16 	cmn.w	r0, #22
 801a594:	da09      	bge.n	801a5aa <scalbnf+0x9a>
 801a596:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801a5d0 <scalbnf+0xc0>
 801a59a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801a5d4 <scalbnf+0xc4>
 801a59e:	ee10 3a10 	vmov	r3, s0
 801a5a2:	eeb0 7a67 	vmov.f32	s14, s15
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	e7d9      	b.n	801a55e <scalbnf+0x4e>
 801a5aa:	3019      	adds	r0, #25
 801a5ac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a5b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a5b4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a5d8 <scalbnf+0xc8>
 801a5b8:	ee07 3a90 	vmov	s15, r3
 801a5bc:	e7d7      	b.n	801a56e <scalbnf+0x5e>
 801a5be:	bf00      	nop
 801a5c0:	ffff3cb0 	.word	0xffff3cb0
 801a5c4:	4c000000 	.word	0x4c000000
 801a5c8:	7149f2ca 	.word	0x7149f2ca
 801a5cc:	f149f2ca 	.word	0xf149f2ca
 801a5d0:	0da24260 	.word	0x0da24260
 801a5d4:	8da24260 	.word	0x8da24260
 801a5d8:	33000000 	.word	0x33000000

0801a5dc <with_errnof>:
 801a5dc:	b510      	push	{r4, lr}
 801a5de:	ed2d 8b02 	vpush	{d8}
 801a5e2:	eeb0 8a40 	vmov.f32	s16, s0
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	f001 fe70 	bl	801c2cc <__errno>
 801a5ec:	eeb0 0a48 	vmov.f32	s0, s16
 801a5f0:	ecbd 8b02 	vpop	{d8}
 801a5f4:	6004      	str	r4, [r0, #0]
 801a5f6:	bd10      	pop	{r4, pc}

0801a5f8 <xflowf>:
 801a5f8:	b130      	cbz	r0, 801a608 <xflowf+0x10>
 801a5fa:	eef1 7a40 	vneg.f32	s15, s0
 801a5fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a602:	2022      	movs	r0, #34	@ 0x22
 801a604:	f7ff bfea 	b.w	801a5dc <with_errnof>
 801a608:	eef0 7a40 	vmov.f32	s15, s0
 801a60c:	e7f7      	b.n	801a5fe <xflowf+0x6>
	...

0801a610 <__math_uflowf>:
 801a610:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a618 <__math_uflowf+0x8>
 801a614:	f7ff bff0 	b.w	801a5f8 <xflowf>
 801a618:	10000000 	.word	0x10000000

0801a61c <__math_oflowf>:
 801a61c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a624 <__math_oflowf+0x8>
 801a620:	f7ff bfea 	b.w	801a5f8 <xflowf>
 801a624:	70000000 	.word	0x70000000

0801a628 <__kernel_rem_pio2f>:
 801a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a62c:	ed2d 8b04 	vpush	{d8-d9}
 801a630:	b0d9      	sub	sp, #356	@ 0x164
 801a632:	4690      	mov	r8, r2
 801a634:	9001      	str	r0, [sp, #4]
 801a636:	4ab6      	ldr	r2, [pc, #728]	@ (801a910 <__kernel_rem_pio2f+0x2e8>)
 801a638:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801a63a:	f118 0f04 	cmn.w	r8, #4
 801a63e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801a642:	460f      	mov	r7, r1
 801a644:	f103 3bff 	add.w	fp, r3, #4294967295
 801a648:	db26      	blt.n	801a698 <__kernel_rem_pio2f+0x70>
 801a64a:	f1b8 0203 	subs.w	r2, r8, #3
 801a64e:	bf48      	it	mi
 801a650:	f108 0204 	addmi.w	r2, r8, #4
 801a654:	10d2      	asrs	r2, r2, #3
 801a656:	1c55      	adds	r5, r2, #1
 801a658:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a65a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801a65e:	00e8      	lsls	r0, r5, #3
 801a660:	eba2 060b 	sub.w	r6, r2, fp
 801a664:	9002      	str	r0, [sp, #8]
 801a666:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801a66a:	eb0a 0c0b 	add.w	ip, sl, fp
 801a66e:	ac1c      	add	r4, sp, #112	@ 0x70
 801a670:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801a674:	2000      	movs	r0, #0
 801a676:	4560      	cmp	r0, ip
 801a678:	dd10      	ble.n	801a69c <__kernel_rem_pio2f+0x74>
 801a67a:	a91c      	add	r1, sp, #112	@ 0x70
 801a67c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801a680:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801a684:	2600      	movs	r6, #0
 801a686:	4556      	cmp	r6, sl
 801a688:	dc24      	bgt.n	801a6d4 <__kernel_rem_pio2f+0xac>
 801a68a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a68e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801a692:	4684      	mov	ip, r0
 801a694:	2400      	movs	r4, #0
 801a696:	e016      	b.n	801a6c6 <__kernel_rem_pio2f+0x9e>
 801a698:	2200      	movs	r2, #0
 801a69a:	e7dc      	b.n	801a656 <__kernel_rem_pio2f+0x2e>
 801a69c:	42c6      	cmn	r6, r0
 801a69e:	bf5d      	ittte	pl
 801a6a0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801a6a4:	ee07 1a90 	vmovpl	s15, r1
 801a6a8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a6ac:	eef0 7a47 	vmovmi.f32	s15, s14
 801a6b0:	ece4 7a01 	vstmia	r4!, {s15}
 801a6b4:	3001      	adds	r0, #1
 801a6b6:	e7de      	b.n	801a676 <__kernel_rem_pio2f+0x4e>
 801a6b8:	ecfe 6a01 	vldmia	lr!, {s13}
 801a6bc:	ed3c 7a01 	vldmdb	ip!, {s14}
 801a6c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a6c4:	3401      	adds	r4, #1
 801a6c6:	455c      	cmp	r4, fp
 801a6c8:	ddf6      	ble.n	801a6b8 <__kernel_rem_pio2f+0x90>
 801a6ca:	ece9 7a01 	vstmia	r9!, {s15}
 801a6ce:	3601      	adds	r6, #1
 801a6d0:	3004      	adds	r0, #4
 801a6d2:	e7d8      	b.n	801a686 <__kernel_rem_pio2f+0x5e>
 801a6d4:	a908      	add	r1, sp, #32
 801a6d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a6da:	9104      	str	r1, [sp, #16]
 801a6dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a6de:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801a91c <__kernel_rem_pio2f+0x2f4>
 801a6e2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801a918 <__kernel_rem_pio2f+0x2f0>
 801a6e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a6ea:	9203      	str	r2, [sp, #12]
 801a6ec:	4654      	mov	r4, sl
 801a6ee:	00a2      	lsls	r2, r4, #2
 801a6f0:	9205      	str	r2, [sp, #20]
 801a6f2:	aa58      	add	r2, sp, #352	@ 0x160
 801a6f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801a6f8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801a6fc:	a944      	add	r1, sp, #272	@ 0x110
 801a6fe:	aa08      	add	r2, sp, #32
 801a700:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801a704:	4694      	mov	ip, r2
 801a706:	4626      	mov	r6, r4
 801a708:	2e00      	cmp	r6, #0
 801a70a:	dc4c      	bgt.n	801a7a6 <__kernel_rem_pio2f+0x17e>
 801a70c:	4628      	mov	r0, r5
 801a70e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a712:	f7ff fefd 	bl	801a510 <scalbnf>
 801a716:	eeb0 8a40 	vmov.f32	s16, s0
 801a71a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801a71e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a722:	f000 f9e9 	bl	801aaf8 <floorf>
 801a726:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801a72a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a72e:	2d00      	cmp	r5, #0
 801a730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a734:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a738:	ee17 9a90 	vmov	r9, s15
 801a73c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a740:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a744:	dd41      	ble.n	801a7ca <__kernel_rem_pio2f+0x1a2>
 801a746:	f104 3cff 	add.w	ip, r4, #4294967295
 801a74a:	a908      	add	r1, sp, #32
 801a74c:	f1c5 0e08 	rsb	lr, r5, #8
 801a750:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801a754:	fa46 f00e 	asr.w	r0, r6, lr
 801a758:	4481      	add	r9, r0
 801a75a:	fa00 f00e 	lsl.w	r0, r0, lr
 801a75e:	1a36      	subs	r6, r6, r0
 801a760:	f1c5 0007 	rsb	r0, r5, #7
 801a764:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801a768:	4106      	asrs	r6, r0
 801a76a:	2e00      	cmp	r6, #0
 801a76c:	dd3c      	ble.n	801a7e8 <__kernel_rem_pio2f+0x1c0>
 801a76e:	f04f 0e00 	mov.w	lr, #0
 801a772:	f109 0901 	add.w	r9, r9, #1
 801a776:	4670      	mov	r0, lr
 801a778:	4574      	cmp	r4, lr
 801a77a:	dc68      	bgt.n	801a84e <__kernel_rem_pio2f+0x226>
 801a77c:	2d00      	cmp	r5, #0
 801a77e:	dd03      	ble.n	801a788 <__kernel_rem_pio2f+0x160>
 801a780:	2d01      	cmp	r5, #1
 801a782:	d074      	beq.n	801a86e <__kernel_rem_pio2f+0x246>
 801a784:	2d02      	cmp	r5, #2
 801a786:	d07d      	beq.n	801a884 <__kernel_rem_pio2f+0x25c>
 801a788:	2e02      	cmp	r6, #2
 801a78a:	d12d      	bne.n	801a7e8 <__kernel_rem_pio2f+0x1c0>
 801a78c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a790:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a794:	b340      	cbz	r0, 801a7e8 <__kernel_rem_pio2f+0x1c0>
 801a796:	4628      	mov	r0, r5
 801a798:	9306      	str	r3, [sp, #24]
 801a79a:	f7ff feb9 	bl	801a510 <scalbnf>
 801a79e:	9b06      	ldr	r3, [sp, #24]
 801a7a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a7a4:	e020      	b.n	801a7e8 <__kernel_rem_pio2f+0x1c0>
 801a7a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a7aa:	3e01      	subs	r6, #1
 801a7ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a7b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a7b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a7b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a7bc:	ecac 0a01 	vstmia	ip!, {s0}
 801a7c0:	ed30 0a01 	vldmdb	r0!, {s0}
 801a7c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a7c8:	e79e      	b.n	801a708 <__kernel_rem_pio2f+0xe0>
 801a7ca:	d105      	bne.n	801a7d8 <__kernel_rem_pio2f+0x1b0>
 801a7cc:	1e60      	subs	r0, r4, #1
 801a7ce:	a908      	add	r1, sp, #32
 801a7d0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801a7d4:	11f6      	asrs	r6, r6, #7
 801a7d6:	e7c8      	b.n	801a76a <__kernel_rem_pio2f+0x142>
 801a7d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a7dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e4:	da31      	bge.n	801a84a <__kernel_rem_pio2f+0x222>
 801a7e6:	2600      	movs	r6, #0
 801a7e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7f0:	f040 8098 	bne.w	801a924 <__kernel_rem_pio2f+0x2fc>
 801a7f4:	1e60      	subs	r0, r4, #1
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	4550      	cmp	r0, sl
 801a7fa:	da4b      	bge.n	801a894 <__kernel_rem_pio2f+0x26c>
 801a7fc:	2a00      	cmp	r2, #0
 801a7fe:	d065      	beq.n	801a8cc <__kernel_rem_pio2f+0x2a4>
 801a800:	3c01      	subs	r4, #1
 801a802:	ab08      	add	r3, sp, #32
 801a804:	3d08      	subs	r5, #8
 801a806:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d0f8      	beq.n	801a800 <__kernel_rem_pio2f+0x1d8>
 801a80e:	4628      	mov	r0, r5
 801a810:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a814:	f7ff fe7c 	bl	801a510 <scalbnf>
 801a818:	1c63      	adds	r3, r4, #1
 801a81a:	aa44      	add	r2, sp, #272	@ 0x110
 801a81c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801a91c <__kernel_rem_pio2f+0x2f4>
 801a820:	0099      	lsls	r1, r3, #2
 801a822:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a826:	4623      	mov	r3, r4
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f280 80a9 	bge.w	801a980 <__kernel_rem_pio2f+0x358>
 801a82e:	4623      	mov	r3, r4
 801a830:	2b00      	cmp	r3, #0
 801a832:	f2c0 80c7 	blt.w	801a9c4 <__kernel_rem_pio2f+0x39c>
 801a836:	aa44      	add	r2, sp, #272	@ 0x110
 801a838:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801a83c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801a914 <__kernel_rem_pio2f+0x2ec>
 801a840:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801a844:	2000      	movs	r0, #0
 801a846:	1ae2      	subs	r2, r4, r3
 801a848:	e0b1      	b.n	801a9ae <__kernel_rem_pio2f+0x386>
 801a84a:	2602      	movs	r6, #2
 801a84c:	e78f      	b.n	801a76e <__kernel_rem_pio2f+0x146>
 801a84e:	f852 1b04 	ldr.w	r1, [r2], #4
 801a852:	b948      	cbnz	r0, 801a868 <__kernel_rem_pio2f+0x240>
 801a854:	b121      	cbz	r1, 801a860 <__kernel_rem_pio2f+0x238>
 801a856:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801a85a:	f842 1c04 	str.w	r1, [r2, #-4]
 801a85e:	2101      	movs	r1, #1
 801a860:	f10e 0e01 	add.w	lr, lr, #1
 801a864:	4608      	mov	r0, r1
 801a866:	e787      	b.n	801a778 <__kernel_rem_pio2f+0x150>
 801a868:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801a86c:	e7f5      	b.n	801a85a <__kernel_rem_pio2f+0x232>
 801a86e:	f104 3cff 	add.w	ip, r4, #4294967295
 801a872:	aa08      	add	r2, sp, #32
 801a874:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a87c:	a908      	add	r1, sp, #32
 801a87e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a882:	e781      	b.n	801a788 <__kernel_rem_pio2f+0x160>
 801a884:	f104 3cff 	add.w	ip, r4, #4294967295
 801a888:	aa08      	add	r2, sp, #32
 801a88a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a88e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a892:	e7f3      	b.n	801a87c <__kernel_rem_pio2f+0x254>
 801a894:	a908      	add	r1, sp, #32
 801a896:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a89a:	3801      	subs	r0, #1
 801a89c:	430a      	orrs	r2, r1
 801a89e:	e7ab      	b.n	801a7f8 <__kernel_rem_pio2f+0x1d0>
 801a8a0:	3201      	adds	r2, #1
 801a8a2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a8a6:	2e00      	cmp	r6, #0
 801a8a8:	d0fa      	beq.n	801a8a0 <__kernel_rem_pio2f+0x278>
 801a8aa:	9905      	ldr	r1, [sp, #20]
 801a8ac:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801a8b0:	eb0d 0001 	add.w	r0, sp, r1
 801a8b4:	18e6      	adds	r6, r4, r3
 801a8b6:	a91c      	add	r1, sp, #112	@ 0x70
 801a8b8:	f104 0c01 	add.w	ip, r4, #1
 801a8bc:	384c      	subs	r0, #76	@ 0x4c
 801a8be:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801a8c2:	4422      	add	r2, r4
 801a8c4:	4562      	cmp	r2, ip
 801a8c6:	da04      	bge.n	801a8d2 <__kernel_rem_pio2f+0x2aa>
 801a8c8:	4614      	mov	r4, r2
 801a8ca:	e710      	b.n	801a6ee <__kernel_rem_pio2f+0xc6>
 801a8cc:	9804      	ldr	r0, [sp, #16]
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	e7e7      	b.n	801a8a2 <__kernel_rem_pio2f+0x27a>
 801a8d2:	9903      	ldr	r1, [sp, #12]
 801a8d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a8d8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a8dc:	9105      	str	r1, [sp, #20]
 801a8de:	ee07 1a90 	vmov	s15, r1
 801a8e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8e6:	2400      	movs	r4, #0
 801a8e8:	ece6 7a01 	vstmia	r6!, {s15}
 801a8ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801a8f0:	46b1      	mov	r9, r6
 801a8f2:	455c      	cmp	r4, fp
 801a8f4:	dd04      	ble.n	801a900 <__kernel_rem_pio2f+0x2d8>
 801a8f6:	ece0 7a01 	vstmia	r0!, {s15}
 801a8fa:	f10c 0c01 	add.w	ip, ip, #1
 801a8fe:	e7e1      	b.n	801a8c4 <__kernel_rem_pio2f+0x29c>
 801a900:	ecfe 6a01 	vldmia	lr!, {s13}
 801a904:	ed39 7a01 	vldmdb	r9!, {s14}
 801a908:	3401      	adds	r4, #1
 801a90a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a90e:	e7f0      	b.n	801a8f2 <__kernel_rem_pio2f+0x2ca>
 801a910:	08022730 	.word	0x08022730
 801a914:	08022704 	.word	0x08022704
 801a918:	43800000 	.word	0x43800000
 801a91c:	3b800000 	.word	0x3b800000
 801a920:	00000000 	.word	0x00000000
 801a924:	9b02      	ldr	r3, [sp, #8]
 801a926:	eeb0 0a48 	vmov.f32	s0, s16
 801a92a:	eba3 0008 	sub.w	r0, r3, r8
 801a92e:	f7ff fdef 	bl	801a510 <scalbnf>
 801a932:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801a918 <__kernel_rem_pio2f+0x2f0>
 801a936:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a93e:	db19      	blt.n	801a974 <__kernel_rem_pio2f+0x34c>
 801a940:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801a91c <__kernel_rem_pio2f+0x2f4>
 801a944:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a948:	aa08      	add	r2, sp, #32
 801a94a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a94e:	3508      	adds	r5, #8
 801a950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a954:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a95c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a960:	ee10 3a10 	vmov	r3, s0
 801a964:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a968:	ee17 3a90 	vmov	r3, s15
 801a96c:	3401      	adds	r4, #1
 801a96e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a972:	e74c      	b.n	801a80e <__kernel_rem_pio2f+0x1e6>
 801a974:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a978:	aa08      	add	r2, sp, #32
 801a97a:	ee10 3a10 	vmov	r3, s0
 801a97e:	e7f6      	b.n	801a96e <__kernel_rem_pio2f+0x346>
 801a980:	a808      	add	r0, sp, #32
 801a982:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a986:	9001      	str	r0, [sp, #4]
 801a988:	ee07 0a90 	vmov	s15, r0
 801a98c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a990:	3b01      	subs	r3, #1
 801a992:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a996:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a99a:	ed62 7a01 	vstmdb	r2!, {s15}
 801a99e:	e743      	b.n	801a828 <__kernel_rem_pio2f+0x200>
 801a9a0:	ecfc 6a01 	vldmia	ip!, {s13}
 801a9a4:	ecb5 7a01 	vldmia	r5!, {s14}
 801a9a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a9ac:	3001      	adds	r0, #1
 801a9ae:	4550      	cmp	r0, sl
 801a9b0:	dc01      	bgt.n	801a9b6 <__kernel_rem_pio2f+0x38e>
 801a9b2:	4290      	cmp	r0, r2
 801a9b4:	ddf4      	ble.n	801a9a0 <__kernel_rem_pio2f+0x378>
 801a9b6:	a858      	add	r0, sp, #352	@ 0x160
 801a9b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a9bc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801a9c0:	3b01      	subs	r3, #1
 801a9c2:	e735      	b.n	801a830 <__kernel_rem_pio2f+0x208>
 801a9c4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a9c6:	2b02      	cmp	r3, #2
 801a9c8:	dc09      	bgt.n	801a9de <__kernel_rem_pio2f+0x3b6>
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	dc27      	bgt.n	801aa1e <__kernel_rem_pio2f+0x3f6>
 801a9ce:	d040      	beq.n	801aa52 <__kernel_rem_pio2f+0x42a>
 801a9d0:	f009 0007 	and.w	r0, r9, #7
 801a9d4:	b059      	add	sp, #356	@ 0x164
 801a9d6:	ecbd 8b04 	vpop	{d8-d9}
 801a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9de:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a9e0:	2b03      	cmp	r3, #3
 801a9e2:	d1f5      	bne.n	801a9d0 <__kernel_rem_pio2f+0x3a8>
 801a9e4:	aa30      	add	r2, sp, #192	@ 0xc0
 801a9e6:	1f0b      	subs	r3, r1, #4
 801a9e8:	4413      	add	r3, r2
 801a9ea:	461a      	mov	r2, r3
 801a9ec:	4620      	mov	r0, r4
 801a9ee:	2800      	cmp	r0, #0
 801a9f0:	dc50      	bgt.n	801aa94 <__kernel_rem_pio2f+0x46c>
 801a9f2:	4622      	mov	r2, r4
 801a9f4:	2a01      	cmp	r2, #1
 801a9f6:	dc5d      	bgt.n	801aab4 <__kernel_rem_pio2f+0x48c>
 801a9f8:	ab30      	add	r3, sp, #192	@ 0xc0
 801a9fa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801a9fe:	440b      	add	r3, r1
 801aa00:	2c01      	cmp	r4, #1
 801aa02:	dc67      	bgt.n	801aad4 <__kernel_rem_pio2f+0x4ac>
 801aa04:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801aa08:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801aa0c:	2e00      	cmp	r6, #0
 801aa0e:	d167      	bne.n	801aae0 <__kernel_rem_pio2f+0x4b8>
 801aa10:	edc7 6a00 	vstr	s13, [r7]
 801aa14:	ed87 7a01 	vstr	s14, [r7, #4]
 801aa18:	edc7 7a02 	vstr	s15, [r7, #8]
 801aa1c:	e7d8      	b.n	801a9d0 <__kernel_rem_pio2f+0x3a8>
 801aa1e:	ab30      	add	r3, sp, #192	@ 0xc0
 801aa20:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801aa24:	440b      	add	r3, r1
 801aa26:	4622      	mov	r2, r4
 801aa28:	2a00      	cmp	r2, #0
 801aa2a:	da24      	bge.n	801aa76 <__kernel_rem_pio2f+0x44e>
 801aa2c:	b34e      	cbz	r6, 801aa82 <__kernel_rem_pio2f+0x45a>
 801aa2e:	eef1 7a47 	vneg.f32	s15, s14
 801aa32:	edc7 7a00 	vstr	s15, [r7]
 801aa36:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801aa3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa3e:	aa31      	add	r2, sp, #196	@ 0xc4
 801aa40:	2301      	movs	r3, #1
 801aa42:	429c      	cmp	r4, r3
 801aa44:	da20      	bge.n	801aa88 <__kernel_rem_pio2f+0x460>
 801aa46:	b10e      	cbz	r6, 801aa4c <__kernel_rem_pio2f+0x424>
 801aa48:	eef1 7a67 	vneg.f32	s15, s15
 801aa4c:	edc7 7a01 	vstr	s15, [r7, #4]
 801aa50:	e7be      	b.n	801a9d0 <__kernel_rem_pio2f+0x3a8>
 801aa52:	ab30      	add	r3, sp, #192	@ 0xc0
 801aa54:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801a920 <__kernel_rem_pio2f+0x2f8>
 801aa58:	440b      	add	r3, r1
 801aa5a:	2c00      	cmp	r4, #0
 801aa5c:	da05      	bge.n	801aa6a <__kernel_rem_pio2f+0x442>
 801aa5e:	b10e      	cbz	r6, 801aa64 <__kernel_rem_pio2f+0x43c>
 801aa60:	eef1 7a67 	vneg.f32	s15, s15
 801aa64:	edc7 7a00 	vstr	s15, [r7]
 801aa68:	e7b2      	b.n	801a9d0 <__kernel_rem_pio2f+0x3a8>
 801aa6a:	ed33 7a01 	vldmdb	r3!, {s14}
 801aa6e:	3c01      	subs	r4, #1
 801aa70:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa74:	e7f1      	b.n	801aa5a <__kernel_rem_pio2f+0x432>
 801aa76:	ed73 7a01 	vldmdb	r3!, {s15}
 801aa7a:	3a01      	subs	r2, #1
 801aa7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa80:	e7d2      	b.n	801aa28 <__kernel_rem_pio2f+0x400>
 801aa82:	eef0 7a47 	vmov.f32	s15, s14
 801aa86:	e7d4      	b.n	801aa32 <__kernel_rem_pio2f+0x40a>
 801aa88:	ecb2 7a01 	vldmia	r2!, {s14}
 801aa8c:	3301      	adds	r3, #1
 801aa8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa92:	e7d6      	b.n	801aa42 <__kernel_rem_pio2f+0x41a>
 801aa94:	ed72 7a01 	vldmdb	r2!, {s15}
 801aa98:	edd2 6a01 	vldr	s13, [r2, #4]
 801aa9c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aaa0:	3801      	subs	r0, #1
 801aaa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aaa6:	ed82 7a00 	vstr	s14, [r2]
 801aaaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aaae:	edc2 7a01 	vstr	s15, [r2, #4]
 801aab2:	e79c      	b.n	801a9ee <__kernel_rem_pio2f+0x3c6>
 801aab4:	ed73 7a01 	vldmdb	r3!, {s15}
 801aab8:	edd3 6a01 	vldr	s13, [r3, #4]
 801aabc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aac0:	3a01      	subs	r2, #1
 801aac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aac6:	ed83 7a00 	vstr	s14, [r3]
 801aaca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aace:	edc3 7a01 	vstr	s15, [r3, #4]
 801aad2:	e78f      	b.n	801a9f4 <__kernel_rem_pio2f+0x3cc>
 801aad4:	ed33 7a01 	vldmdb	r3!, {s14}
 801aad8:	3c01      	subs	r4, #1
 801aada:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aade:	e78f      	b.n	801aa00 <__kernel_rem_pio2f+0x3d8>
 801aae0:	eef1 6a66 	vneg.f32	s13, s13
 801aae4:	eeb1 7a47 	vneg.f32	s14, s14
 801aae8:	edc7 6a00 	vstr	s13, [r7]
 801aaec:	ed87 7a01 	vstr	s14, [r7, #4]
 801aaf0:	eef1 7a67 	vneg.f32	s15, s15
 801aaf4:	e790      	b.n	801aa18 <__kernel_rem_pio2f+0x3f0>
 801aaf6:	bf00      	nop

0801aaf8 <floorf>:
 801aaf8:	ee10 3a10 	vmov	r3, s0
 801aafc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ab00:	3a7f      	subs	r2, #127	@ 0x7f
 801ab02:	2a16      	cmp	r2, #22
 801ab04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ab08:	dc2b      	bgt.n	801ab62 <floorf+0x6a>
 801ab0a:	2a00      	cmp	r2, #0
 801ab0c:	da12      	bge.n	801ab34 <floorf+0x3c>
 801ab0e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ab74 <floorf+0x7c>
 801ab12:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ab16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ab1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab1e:	dd06      	ble.n	801ab2e <floorf+0x36>
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	da24      	bge.n	801ab6e <floorf+0x76>
 801ab24:	2900      	cmp	r1, #0
 801ab26:	4b14      	ldr	r3, [pc, #80]	@ (801ab78 <floorf+0x80>)
 801ab28:	bf08      	it	eq
 801ab2a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801ab2e:	ee00 3a10 	vmov	s0, r3
 801ab32:	4770      	bx	lr
 801ab34:	4911      	ldr	r1, [pc, #68]	@ (801ab7c <floorf+0x84>)
 801ab36:	4111      	asrs	r1, r2
 801ab38:	420b      	tst	r3, r1
 801ab3a:	d0fa      	beq.n	801ab32 <floorf+0x3a>
 801ab3c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801ab74 <floorf+0x7c>
 801ab40:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ab44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ab48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab4c:	ddef      	ble.n	801ab2e <floorf+0x36>
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	bfbe      	ittt	lt
 801ab52:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801ab56:	fa40 f202 	asrlt.w	r2, r0, r2
 801ab5a:	189b      	addlt	r3, r3, r2
 801ab5c:	ea23 0301 	bic.w	r3, r3, r1
 801ab60:	e7e5      	b.n	801ab2e <floorf+0x36>
 801ab62:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ab66:	d3e4      	bcc.n	801ab32 <floorf+0x3a>
 801ab68:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ab6c:	4770      	bx	lr
 801ab6e:	2300      	movs	r3, #0
 801ab70:	e7dd      	b.n	801ab2e <floorf+0x36>
 801ab72:	bf00      	nop
 801ab74:	7149f2ca 	.word	0x7149f2ca
 801ab78:	bf800000 	.word	0xbf800000
 801ab7c:	007fffff 	.word	0x007fffff

0801ab80 <_strtol_l.isra.0>:
 801ab80:	2b24      	cmp	r3, #36	@ 0x24
 801ab82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab86:	4686      	mov	lr, r0
 801ab88:	4690      	mov	r8, r2
 801ab8a:	d801      	bhi.n	801ab90 <_strtol_l.isra.0+0x10>
 801ab8c:	2b01      	cmp	r3, #1
 801ab8e:	d106      	bne.n	801ab9e <_strtol_l.isra.0+0x1e>
 801ab90:	f001 fb9c 	bl	801c2cc <__errno>
 801ab94:	2316      	movs	r3, #22
 801ab96:	6003      	str	r3, [r0, #0]
 801ab98:	2000      	movs	r0, #0
 801ab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab9e:	4834      	ldr	r0, [pc, #208]	@ (801ac70 <_strtol_l.isra.0+0xf0>)
 801aba0:	460d      	mov	r5, r1
 801aba2:	462a      	mov	r2, r5
 801aba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aba8:	5d06      	ldrb	r6, [r0, r4]
 801abaa:	f016 0608 	ands.w	r6, r6, #8
 801abae:	d1f8      	bne.n	801aba2 <_strtol_l.isra.0+0x22>
 801abb0:	2c2d      	cmp	r4, #45	@ 0x2d
 801abb2:	d110      	bne.n	801abd6 <_strtol_l.isra.0+0x56>
 801abb4:	782c      	ldrb	r4, [r5, #0]
 801abb6:	2601      	movs	r6, #1
 801abb8:	1c95      	adds	r5, r2, #2
 801abba:	f033 0210 	bics.w	r2, r3, #16
 801abbe:	d115      	bne.n	801abec <_strtol_l.isra.0+0x6c>
 801abc0:	2c30      	cmp	r4, #48	@ 0x30
 801abc2:	d10d      	bne.n	801abe0 <_strtol_l.isra.0+0x60>
 801abc4:	782a      	ldrb	r2, [r5, #0]
 801abc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801abca:	2a58      	cmp	r2, #88	@ 0x58
 801abcc:	d108      	bne.n	801abe0 <_strtol_l.isra.0+0x60>
 801abce:	786c      	ldrb	r4, [r5, #1]
 801abd0:	3502      	adds	r5, #2
 801abd2:	2310      	movs	r3, #16
 801abd4:	e00a      	b.n	801abec <_strtol_l.isra.0+0x6c>
 801abd6:	2c2b      	cmp	r4, #43	@ 0x2b
 801abd8:	bf04      	itt	eq
 801abda:	782c      	ldrbeq	r4, [r5, #0]
 801abdc:	1c95      	addeq	r5, r2, #2
 801abde:	e7ec      	b.n	801abba <_strtol_l.isra.0+0x3a>
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d1f6      	bne.n	801abd2 <_strtol_l.isra.0+0x52>
 801abe4:	2c30      	cmp	r4, #48	@ 0x30
 801abe6:	bf14      	ite	ne
 801abe8:	230a      	movne	r3, #10
 801abea:	2308      	moveq	r3, #8
 801abec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801abf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801abf4:	2200      	movs	r2, #0
 801abf6:	fbbc f9f3 	udiv	r9, ip, r3
 801abfa:	4610      	mov	r0, r2
 801abfc:	fb03 ca19 	mls	sl, r3, r9, ip
 801ac00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ac04:	2f09      	cmp	r7, #9
 801ac06:	d80f      	bhi.n	801ac28 <_strtol_l.isra.0+0xa8>
 801ac08:	463c      	mov	r4, r7
 801ac0a:	42a3      	cmp	r3, r4
 801ac0c:	dd1b      	ble.n	801ac46 <_strtol_l.isra.0+0xc6>
 801ac0e:	1c57      	adds	r7, r2, #1
 801ac10:	d007      	beq.n	801ac22 <_strtol_l.isra.0+0xa2>
 801ac12:	4581      	cmp	r9, r0
 801ac14:	d314      	bcc.n	801ac40 <_strtol_l.isra.0+0xc0>
 801ac16:	d101      	bne.n	801ac1c <_strtol_l.isra.0+0x9c>
 801ac18:	45a2      	cmp	sl, r4
 801ac1a:	db11      	blt.n	801ac40 <_strtol_l.isra.0+0xc0>
 801ac1c:	fb00 4003 	mla	r0, r0, r3, r4
 801ac20:	2201      	movs	r2, #1
 801ac22:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ac26:	e7eb      	b.n	801ac00 <_strtol_l.isra.0+0x80>
 801ac28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ac2c:	2f19      	cmp	r7, #25
 801ac2e:	d801      	bhi.n	801ac34 <_strtol_l.isra.0+0xb4>
 801ac30:	3c37      	subs	r4, #55	@ 0x37
 801ac32:	e7ea      	b.n	801ac0a <_strtol_l.isra.0+0x8a>
 801ac34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ac38:	2f19      	cmp	r7, #25
 801ac3a:	d804      	bhi.n	801ac46 <_strtol_l.isra.0+0xc6>
 801ac3c:	3c57      	subs	r4, #87	@ 0x57
 801ac3e:	e7e4      	b.n	801ac0a <_strtol_l.isra.0+0x8a>
 801ac40:	f04f 32ff 	mov.w	r2, #4294967295
 801ac44:	e7ed      	b.n	801ac22 <_strtol_l.isra.0+0xa2>
 801ac46:	1c53      	adds	r3, r2, #1
 801ac48:	d108      	bne.n	801ac5c <_strtol_l.isra.0+0xdc>
 801ac4a:	2322      	movs	r3, #34	@ 0x22
 801ac4c:	f8ce 3000 	str.w	r3, [lr]
 801ac50:	4660      	mov	r0, ip
 801ac52:	f1b8 0f00 	cmp.w	r8, #0
 801ac56:	d0a0      	beq.n	801ab9a <_strtol_l.isra.0+0x1a>
 801ac58:	1e69      	subs	r1, r5, #1
 801ac5a:	e006      	b.n	801ac6a <_strtol_l.isra.0+0xea>
 801ac5c:	b106      	cbz	r6, 801ac60 <_strtol_l.isra.0+0xe0>
 801ac5e:	4240      	negs	r0, r0
 801ac60:	f1b8 0f00 	cmp.w	r8, #0
 801ac64:	d099      	beq.n	801ab9a <_strtol_l.isra.0+0x1a>
 801ac66:	2a00      	cmp	r2, #0
 801ac68:	d1f6      	bne.n	801ac58 <_strtol_l.isra.0+0xd8>
 801ac6a:	f8c8 1000 	str.w	r1, [r8]
 801ac6e:	e794      	b.n	801ab9a <_strtol_l.isra.0+0x1a>
 801ac70:	0802273d 	.word	0x0802273d

0801ac74 <_strtol_r>:
 801ac74:	f7ff bf84 	b.w	801ab80 <_strtol_l.isra.0>

0801ac78 <__cvt>:
 801ac78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac7c:	ec57 6b10 	vmov	r6, r7, d0
 801ac80:	2f00      	cmp	r7, #0
 801ac82:	460c      	mov	r4, r1
 801ac84:	4619      	mov	r1, r3
 801ac86:	463b      	mov	r3, r7
 801ac88:	bfbb      	ittet	lt
 801ac8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801ac8e:	461f      	movlt	r7, r3
 801ac90:	2300      	movge	r3, #0
 801ac92:	232d      	movlt	r3, #45	@ 0x2d
 801ac94:	700b      	strb	r3, [r1, #0]
 801ac96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ac98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801ac9c:	4691      	mov	r9, r2
 801ac9e:	f023 0820 	bic.w	r8, r3, #32
 801aca2:	bfbc      	itt	lt
 801aca4:	4632      	movlt	r2, r6
 801aca6:	4616      	movlt	r6, r2
 801aca8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801acac:	d005      	beq.n	801acba <__cvt+0x42>
 801acae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801acb2:	d100      	bne.n	801acb6 <__cvt+0x3e>
 801acb4:	3401      	adds	r4, #1
 801acb6:	2102      	movs	r1, #2
 801acb8:	e000      	b.n	801acbc <__cvt+0x44>
 801acba:	2103      	movs	r1, #3
 801acbc:	ab03      	add	r3, sp, #12
 801acbe:	9301      	str	r3, [sp, #4]
 801acc0:	ab02      	add	r3, sp, #8
 801acc2:	9300      	str	r3, [sp, #0]
 801acc4:	ec47 6b10 	vmov	d0, r6, r7
 801acc8:	4653      	mov	r3, sl
 801acca:	4622      	mov	r2, r4
 801accc:	f001 fbe0 	bl	801c490 <_dtoa_r>
 801acd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801acd4:	4605      	mov	r5, r0
 801acd6:	d119      	bne.n	801ad0c <__cvt+0x94>
 801acd8:	f019 0f01 	tst.w	r9, #1
 801acdc:	d00e      	beq.n	801acfc <__cvt+0x84>
 801acde:	eb00 0904 	add.w	r9, r0, r4
 801ace2:	2200      	movs	r2, #0
 801ace4:	2300      	movs	r3, #0
 801ace6:	4630      	mov	r0, r6
 801ace8:	4639      	mov	r1, r7
 801acea:	f7e5 fefd 	bl	8000ae8 <__aeabi_dcmpeq>
 801acee:	b108      	cbz	r0, 801acf4 <__cvt+0x7c>
 801acf0:	f8cd 900c 	str.w	r9, [sp, #12]
 801acf4:	2230      	movs	r2, #48	@ 0x30
 801acf6:	9b03      	ldr	r3, [sp, #12]
 801acf8:	454b      	cmp	r3, r9
 801acfa:	d31e      	bcc.n	801ad3a <__cvt+0xc2>
 801acfc:	9b03      	ldr	r3, [sp, #12]
 801acfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ad00:	1b5b      	subs	r3, r3, r5
 801ad02:	4628      	mov	r0, r5
 801ad04:	6013      	str	r3, [r2, #0]
 801ad06:	b004      	add	sp, #16
 801ad08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ad10:	eb00 0904 	add.w	r9, r0, r4
 801ad14:	d1e5      	bne.n	801ace2 <__cvt+0x6a>
 801ad16:	7803      	ldrb	r3, [r0, #0]
 801ad18:	2b30      	cmp	r3, #48	@ 0x30
 801ad1a:	d10a      	bne.n	801ad32 <__cvt+0xba>
 801ad1c:	2200      	movs	r2, #0
 801ad1e:	2300      	movs	r3, #0
 801ad20:	4630      	mov	r0, r6
 801ad22:	4639      	mov	r1, r7
 801ad24:	f7e5 fee0 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad28:	b918      	cbnz	r0, 801ad32 <__cvt+0xba>
 801ad2a:	f1c4 0401 	rsb	r4, r4, #1
 801ad2e:	f8ca 4000 	str.w	r4, [sl]
 801ad32:	f8da 3000 	ldr.w	r3, [sl]
 801ad36:	4499      	add	r9, r3
 801ad38:	e7d3      	b.n	801ace2 <__cvt+0x6a>
 801ad3a:	1c59      	adds	r1, r3, #1
 801ad3c:	9103      	str	r1, [sp, #12]
 801ad3e:	701a      	strb	r2, [r3, #0]
 801ad40:	e7d9      	b.n	801acf6 <__cvt+0x7e>

0801ad42 <__exponent>:
 801ad42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad44:	2900      	cmp	r1, #0
 801ad46:	bfba      	itte	lt
 801ad48:	4249      	neglt	r1, r1
 801ad4a:	232d      	movlt	r3, #45	@ 0x2d
 801ad4c:	232b      	movge	r3, #43	@ 0x2b
 801ad4e:	2909      	cmp	r1, #9
 801ad50:	7002      	strb	r2, [r0, #0]
 801ad52:	7043      	strb	r3, [r0, #1]
 801ad54:	dd29      	ble.n	801adaa <__exponent+0x68>
 801ad56:	f10d 0307 	add.w	r3, sp, #7
 801ad5a:	461d      	mov	r5, r3
 801ad5c:	270a      	movs	r7, #10
 801ad5e:	461a      	mov	r2, r3
 801ad60:	fbb1 f6f7 	udiv	r6, r1, r7
 801ad64:	fb07 1416 	mls	r4, r7, r6, r1
 801ad68:	3430      	adds	r4, #48	@ 0x30
 801ad6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ad6e:	460c      	mov	r4, r1
 801ad70:	2c63      	cmp	r4, #99	@ 0x63
 801ad72:	f103 33ff 	add.w	r3, r3, #4294967295
 801ad76:	4631      	mov	r1, r6
 801ad78:	dcf1      	bgt.n	801ad5e <__exponent+0x1c>
 801ad7a:	3130      	adds	r1, #48	@ 0x30
 801ad7c:	1e94      	subs	r4, r2, #2
 801ad7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801ad82:	1c41      	adds	r1, r0, #1
 801ad84:	4623      	mov	r3, r4
 801ad86:	42ab      	cmp	r3, r5
 801ad88:	d30a      	bcc.n	801ada0 <__exponent+0x5e>
 801ad8a:	f10d 0309 	add.w	r3, sp, #9
 801ad8e:	1a9b      	subs	r3, r3, r2
 801ad90:	42ac      	cmp	r4, r5
 801ad92:	bf88      	it	hi
 801ad94:	2300      	movhi	r3, #0
 801ad96:	3302      	adds	r3, #2
 801ad98:	4403      	add	r3, r0
 801ad9a:	1a18      	subs	r0, r3, r0
 801ad9c:	b003      	add	sp, #12
 801ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ada0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ada4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801ada8:	e7ed      	b.n	801ad86 <__exponent+0x44>
 801adaa:	2330      	movs	r3, #48	@ 0x30
 801adac:	3130      	adds	r1, #48	@ 0x30
 801adae:	7083      	strb	r3, [r0, #2]
 801adb0:	70c1      	strb	r1, [r0, #3]
 801adb2:	1d03      	adds	r3, r0, #4
 801adb4:	e7f1      	b.n	801ad9a <__exponent+0x58>
	...

0801adb8 <_printf_float>:
 801adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adbc:	b08d      	sub	sp, #52	@ 0x34
 801adbe:	460c      	mov	r4, r1
 801adc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801adc4:	4616      	mov	r6, r2
 801adc6:	461f      	mov	r7, r3
 801adc8:	4605      	mov	r5, r0
 801adca:	f001 f9d7 	bl	801c17c <_localeconv_r>
 801adce:	6803      	ldr	r3, [r0, #0]
 801add0:	9304      	str	r3, [sp, #16]
 801add2:	4618      	mov	r0, r3
 801add4:	f7e5 fa5c 	bl	8000290 <strlen>
 801add8:	2300      	movs	r3, #0
 801adda:	930a      	str	r3, [sp, #40]	@ 0x28
 801addc:	f8d8 3000 	ldr.w	r3, [r8]
 801ade0:	9005      	str	r0, [sp, #20]
 801ade2:	3307      	adds	r3, #7
 801ade4:	f023 0307 	bic.w	r3, r3, #7
 801ade8:	f103 0208 	add.w	r2, r3, #8
 801adec:	f894 a018 	ldrb.w	sl, [r4, #24]
 801adf0:	f8d4 b000 	ldr.w	fp, [r4]
 801adf4:	f8c8 2000 	str.w	r2, [r8]
 801adf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801adfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801ae00:	9307      	str	r3, [sp, #28]
 801ae02:	f8cd 8018 	str.w	r8, [sp, #24]
 801ae06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801ae0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae0e:	4b9c      	ldr	r3, [pc, #624]	@ (801b080 <_printf_float+0x2c8>)
 801ae10:	f04f 32ff 	mov.w	r2, #4294967295
 801ae14:	f7e5 fe9a 	bl	8000b4c <__aeabi_dcmpun>
 801ae18:	bb70      	cbnz	r0, 801ae78 <_printf_float+0xc0>
 801ae1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae1e:	4b98      	ldr	r3, [pc, #608]	@ (801b080 <_printf_float+0x2c8>)
 801ae20:	f04f 32ff 	mov.w	r2, #4294967295
 801ae24:	f7e5 fe74 	bl	8000b10 <__aeabi_dcmple>
 801ae28:	bb30      	cbnz	r0, 801ae78 <_printf_float+0xc0>
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	4640      	mov	r0, r8
 801ae30:	4649      	mov	r1, r9
 801ae32:	f7e5 fe63 	bl	8000afc <__aeabi_dcmplt>
 801ae36:	b110      	cbz	r0, 801ae3e <_printf_float+0x86>
 801ae38:	232d      	movs	r3, #45	@ 0x2d
 801ae3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ae3e:	4a91      	ldr	r2, [pc, #580]	@ (801b084 <_printf_float+0x2cc>)
 801ae40:	4b91      	ldr	r3, [pc, #580]	@ (801b088 <_printf_float+0x2d0>)
 801ae42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801ae46:	bf8c      	ite	hi
 801ae48:	4690      	movhi	r8, r2
 801ae4a:	4698      	movls	r8, r3
 801ae4c:	2303      	movs	r3, #3
 801ae4e:	6123      	str	r3, [r4, #16]
 801ae50:	f02b 0304 	bic.w	r3, fp, #4
 801ae54:	6023      	str	r3, [r4, #0]
 801ae56:	f04f 0900 	mov.w	r9, #0
 801ae5a:	9700      	str	r7, [sp, #0]
 801ae5c:	4633      	mov	r3, r6
 801ae5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801ae60:	4621      	mov	r1, r4
 801ae62:	4628      	mov	r0, r5
 801ae64:	f000 fb1e 	bl	801b4a4 <_printf_common>
 801ae68:	3001      	adds	r0, #1
 801ae6a:	f040 808d 	bne.w	801af88 <_printf_float+0x1d0>
 801ae6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ae72:	b00d      	add	sp, #52	@ 0x34
 801ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae78:	4642      	mov	r2, r8
 801ae7a:	464b      	mov	r3, r9
 801ae7c:	4640      	mov	r0, r8
 801ae7e:	4649      	mov	r1, r9
 801ae80:	f7e5 fe64 	bl	8000b4c <__aeabi_dcmpun>
 801ae84:	b140      	cbz	r0, 801ae98 <_printf_float+0xe0>
 801ae86:	464b      	mov	r3, r9
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	bfbc      	itt	lt
 801ae8c:	232d      	movlt	r3, #45	@ 0x2d
 801ae8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ae92:	4a7e      	ldr	r2, [pc, #504]	@ (801b08c <_printf_float+0x2d4>)
 801ae94:	4b7e      	ldr	r3, [pc, #504]	@ (801b090 <_printf_float+0x2d8>)
 801ae96:	e7d4      	b.n	801ae42 <_printf_float+0x8a>
 801ae98:	6863      	ldr	r3, [r4, #4]
 801ae9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801ae9e:	9206      	str	r2, [sp, #24]
 801aea0:	1c5a      	adds	r2, r3, #1
 801aea2:	d13b      	bne.n	801af1c <_printf_float+0x164>
 801aea4:	2306      	movs	r3, #6
 801aea6:	6063      	str	r3, [r4, #4]
 801aea8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801aeac:	2300      	movs	r3, #0
 801aeae:	6022      	str	r2, [r4, #0]
 801aeb0:	9303      	str	r3, [sp, #12]
 801aeb2:	ab0a      	add	r3, sp, #40	@ 0x28
 801aeb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801aeb8:	ab09      	add	r3, sp, #36	@ 0x24
 801aeba:	9300      	str	r3, [sp, #0]
 801aebc:	6861      	ldr	r1, [r4, #4]
 801aebe:	ec49 8b10 	vmov	d0, r8, r9
 801aec2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801aec6:	4628      	mov	r0, r5
 801aec8:	f7ff fed6 	bl	801ac78 <__cvt>
 801aecc:	9b06      	ldr	r3, [sp, #24]
 801aece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aed0:	2b47      	cmp	r3, #71	@ 0x47
 801aed2:	4680      	mov	r8, r0
 801aed4:	d129      	bne.n	801af2a <_printf_float+0x172>
 801aed6:	1cc8      	adds	r0, r1, #3
 801aed8:	db02      	blt.n	801aee0 <_printf_float+0x128>
 801aeda:	6863      	ldr	r3, [r4, #4]
 801aedc:	4299      	cmp	r1, r3
 801aede:	dd41      	ble.n	801af64 <_printf_float+0x1ac>
 801aee0:	f1aa 0a02 	sub.w	sl, sl, #2
 801aee4:	fa5f fa8a 	uxtb.w	sl, sl
 801aee8:	3901      	subs	r1, #1
 801aeea:	4652      	mov	r2, sl
 801aeec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801aef0:	9109      	str	r1, [sp, #36]	@ 0x24
 801aef2:	f7ff ff26 	bl	801ad42 <__exponent>
 801aef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aef8:	1813      	adds	r3, r2, r0
 801aefa:	2a01      	cmp	r2, #1
 801aefc:	4681      	mov	r9, r0
 801aefe:	6123      	str	r3, [r4, #16]
 801af00:	dc02      	bgt.n	801af08 <_printf_float+0x150>
 801af02:	6822      	ldr	r2, [r4, #0]
 801af04:	07d2      	lsls	r2, r2, #31
 801af06:	d501      	bpl.n	801af0c <_printf_float+0x154>
 801af08:	3301      	adds	r3, #1
 801af0a:	6123      	str	r3, [r4, #16]
 801af0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801af10:	2b00      	cmp	r3, #0
 801af12:	d0a2      	beq.n	801ae5a <_printf_float+0xa2>
 801af14:	232d      	movs	r3, #45	@ 0x2d
 801af16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af1a:	e79e      	b.n	801ae5a <_printf_float+0xa2>
 801af1c:	9a06      	ldr	r2, [sp, #24]
 801af1e:	2a47      	cmp	r2, #71	@ 0x47
 801af20:	d1c2      	bne.n	801aea8 <_printf_float+0xf0>
 801af22:	2b00      	cmp	r3, #0
 801af24:	d1c0      	bne.n	801aea8 <_printf_float+0xf0>
 801af26:	2301      	movs	r3, #1
 801af28:	e7bd      	b.n	801aea6 <_printf_float+0xee>
 801af2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801af2e:	d9db      	bls.n	801aee8 <_printf_float+0x130>
 801af30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801af34:	d118      	bne.n	801af68 <_printf_float+0x1b0>
 801af36:	2900      	cmp	r1, #0
 801af38:	6863      	ldr	r3, [r4, #4]
 801af3a:	dd0b      	ble.n	801af54 <_printf_float+0x19c>
 801af3c:	6121      	str	r1, [r4, #16]
 801af3e:	b913      	cbnz	r3, 801af46 <_printf_float+0x18e>
 801af40:	6822      	ldr	r2, [r4, #0]
 801af42:	07d0      	lsls	r0, r2, #31
 801af44:	d502      	bpl.n	801af4c <_printf_float+0x194>
 801af46:	3301      	adds	r3, #1
 801af48:	440b      	add	r3, r1
 801af4a:	6123      	str	r3, [r4, #16]
 801af4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801af4e:	f04f 0900 	mov.w	r9, #0
 801af52:	e7db      	b.n	801af0c <_printf_float+0x154>
 801af54:	b913      	cbnz	r3, 801af5c <_printf_float+0x1a4>
 801af56:	6822      	ldr	r2, [r4, #0]
 801af58:	07d2      	lsls	r2, r2, #31
 801af5a:	d501      	bpl.n	801af60 <_printf_float+0x1a8>
 801af5c:	3302      	adds	r3, #2
 801af5e:	e7f4      	b.n	801af4a <_printf_float+0x192>
 801af60:	2301      	movs	r3, #1
 801af62:	e7f2      	b.n	801af4a <_printf_float+0x192>
 801af64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801af68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801af6a:	4299      	cmp	r1, r3
 801af6c:	db05      	blt.n	801af7a <_printf_float+0x1c2>
 801af6e:	6823      	ldr	r3, [r4, #0]
 801af70:	6121      	str	r1, [r4, #16]
 801af72:	07d8      	lsls	r0, r3, #31
 801af74:	d5ea      	bpl.n	801af4c <_printf_float+0x194>
 801af76:	1c4b      	adds	r3, r1, #1
 801af78:	e7e7      	b.n	801af4a <_printf_float+0x192>
 801af7a:	2900      	cmp	r1, #0
 801af7c:	bfd4      	ite	le
 801af7e:	f1c1 0202 	rsble	r2, r1, #2
 801af82:	2201      	movgt	r2, #1
 801af84:	4413      	add	r3, r2
 801af86:	e7e0      	b.n	801af4a <_printf_float+0x192>
 801af88:	6823      	ldr	r3, [r4, #0]
 801af8a:	055a      	lsls	r2, r3, #21
 801af8c:	d407      	bmi.n	801af9e <_printf_float+0x1e6>
 801af8e:	6923      	ldr	r3, [r4, #16]
 801af90:	4642      	mov	r2, r8
 801af92:	4631      	mov	r1, r6
 801af94:	4628      	mov	r0, r5
 801af96:	47b8      	blx	r7
 801af98:	3001      	adds	r0, #1
 801af9a:	d12b      	bne.n	801aff4 <_printf_float+0x23c>
 801af9c:	e767      	b.n	801ae6e <_printf_float+0xb6>
 801af9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801afa2:	f240 80dd 	bls.w	801b160 <_printf_float+0x3a8>
 801afa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801afaa:	2200      	movs	r2, #0
 801afac:	2300      	movs	r3, #0
 801afae:	f7e5 fd9b 	bl	8000ae8 <__aeabi_dcmpeq>
 801afb2:	2800      	cmp	r0, #0
 801afb4:	d033      	beq.n	801b01e <_printf_float+0x266>
 801afb6:	4a37      	ldr	r2, [pc, #220]	@ (801b094 <_printf_float+0x2dc>)
 801afb8:	2301      	movs	r3, #1
 801afba:	4631      	mov	r1, r6
 801afbc:	4628      	mov	r0, r5
 801afbe:	47b8      	blx	r7
 801afc0:	3001      	adds	r0, #1
 801afc2:	f43f af54 	beq.w	801ae6e <_printf_float+0xb6>
 801afc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801afca:	4543      	cmp	r3, r8
 801afcc:	db02      	blt.n	801afd4 <_printf_float+0x21c>
 801afce:	6823      	ldr	r3, [r4, #0]
 801afd0:	07d8      	lsls	r0, r3, #31
 801afd2:	d50f      	bpl.n	801aff4 <_printf_float+0x23c>
 801afd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801afd8:	4631      	mov	r1, r6
 801afda:	4628      	mov	r0, r5
 801afdc:	47b8      	blx	r7
 801afde:	3001      	adds	r0, #1
 801afe0:	f43f af45 	beq.w	801ae6e <_printf_float+0xb6>
 801afe4:	f04f 0900 	mov.w	r9, #0
 801afe8:	f108 38ff 	add.w	r8, r8, #4294967295
 801afec:	f104 0a1a 	add.w	sl, r4, #26
 801aff0:	45c8      	cmp	r8, r9
 801aff2:	dc09      	bgt.n	801b008 <_printf_float+0x250>
 801aff4:	6823      	ldr	r3, [r4, #0]
 801aff6:	079b      	lsls	r3, r3, #30
 801aff8:	f100 8103 	bmi.w	801b202 <_printf_float+0x44a>
 801affc:	68e0      	ldr	r0, [r4, #12]
 801affe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b000:	4298      	cmp	r0, r3
 801b002:	bfb8      	it	lt
 801b004:	4618      	movlt	r0, r3
 801b006:	e734      	b.n	801ae72 <_printf_float+0xba>
 801b008:	2301      	movs	r3, #1
 801b00a:	4652      	mov	r2, sl
 801b00c:	4631      	mov	r1, r6
 801b00e:	4628      	mov	r0, r5
 801b010:	47b8      	blx	r7
 801b012:	3001      	adds	r0, #1
 801b014:	f43f af2b 	beq.w	801ae6e <_printf_float+0xb6>
 801b018:	f109 0901 	add.w	r9, r9, #1
 801b01c:	e7e8      	b.n	801aff0 <_printf_float+0x238>
 801b01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b020:	2b00      	cmp	r3, #0
 801b022:	dc39      	bgt.n	801b098 <_printf_float+0x2e0>
 801b024:	4a1b      	ldr	r2, [pc, #108]	@ (801b094 <_printf_float+0x2dc>)
 801b026:	2301      	movs	r3, #1
 801b028:	4631      	mov	r1, r6
 801b02a:	4628      	mov	r0, r5
 801b02c:	47b8      	blx	r7
 801b02e:	3001      	adds	r0, #1
 801b030:	f43f af1d 	beq.w	801ae6e <_printf_float+0xb6>
 801b034:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801b038:	ea59 0303 	orrs.w	r3, r9, r3
 801b03c:	d102      	bne.n	801b044 <_printf_float+0x28c>
 801b03e:	6823      	ldr	r3, [r4, #0]
 801b040:	07d9      	lsls	r1, r3, #31
 801b042:	d5d7      	bpl.n	801aff4 <_printf_float+0x23c>
 801b044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b048:	4631      	mov	r1, r6
 801b04a:	4628      	mov	r0, r5
 801b04c:	47b8      	blx	r7
 801b04e:	3001      	adds	r0, #1
 801b050:	f43f af0d 	beq.w	801ae6e <_printf_float+0xb6>
 801b054:	f04f 0a00 	mov.w	sl, #0
 801b058:	f104 0b1a 	add.w	fp, r4, #26
 801b05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b05e:	425b      	negs	r3, r3
 801b060:	4553      	cmp	r3, sl
 801b062:	dc01      	bgt.n	801b068 <_printf_float+0x2b0>
 801b064:	464b      	mov	r3, r9
 801b066:	e793      	b.n	801af90 <_printf_float+0x1d8>
 801b068:	2301      	movs	r3, #1
 801b06a:	465a      	mov	r2, fp
 801b06c:	4631      	mov	r1, r6
 801b06e:	4628      	mov	r0, r5
 801b070:	47b8      	blx	r7
 801b072:	3001      	adds	r0, #1
 801b074:	f43f aefb 	beq.w	801ae6e <_printf_float+0xb6>
 801b078:	f10a 0a01 	add.w	sl, sl, #1
 801b07c:	e7ee      	b.n	801b05c <_printf_float+0x2a4>
 801b07e:	bf00      	nop
 801b080:	7fefffff 	.word	0x7fefffff
 801b084:	08022130 	.word	0x08022130
 801b088:	0802212c 	.word	0x0802212c
 801b08c:	08022138 	.word	0x08022138
 801b090:	08022134 	.word	0x08022134
 801b094:	080222ae 	.word	0x080222ae
 801b098:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b09a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801b09e:	4553      	cmp	r3, sl
 801b0a0:	bfa8      	it	ge
 801b0a2:	4653      	movge	r3, sl
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	4699      	mov	r9, r3
 801b0a8:	dc36      	bgt.n	801b118 <_printf_float+0x360>
 801b0aa:	f04f 0b00 	mov.w	fp, #0
 801b0ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b0b2:	f104 021a 	add.w	r2, r4, #26
 801b0b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b0b8:	9306      	str	r3, [sp, #24]
 801b0ba:	eba3 0309 	sub.w	r3, r3, r9
 801b0be:	455b      	cmp	r3, fp
 801b0c0:	dc31      	bgt.n	801b126 <_printf_float+0x36e>
 801b0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0c4:	459a      	cmp	sl, r3
 801b0c6:	dc3a      	bgt.n	801b13e <_printf_float+0x386>
 801b0c8:	6823      	ldr	r3, [r4, #0]
 801b0ca:	07da      	lsls	r2, r3, #31
 801b0cc:	d437      	bmi.n	801b13e <_printf_float+0x386>
 801b0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0d0:	ebaa 0903 	sub.w	r9, sl, r3
 801b0d4:	9b06      	ldr	r3, [sp, #24]
 801b0d6:	ebaa 0303 	sub.w	r3, sl, r3
 801b0da:	4599      	cmp	r9, r3
 801b0dc:	bfa8      	it	ge
 801b0de:	4699      	movge	r9, r3
 801b0e0:	f1b9 0f00 	cmp.w	r9, #0
 801b0e4:	dc33      	bgt.n	801b14e <_printf_float+0x396>
 801b0e6:	f04f 0800 	mov.w	r8, #0
 801b0ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b0ee:	f104 0b1a 	add.w	fp, r4, #26
 801b0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0f4:	ebaa 0303 	sub.w	r3, sl, r3
 801b0f8:	eba3 0309 	sub.w	r3, r3, r9
 801b0fc:	4543      	cmp	r3, r8
 801b0fe:	f77f af79 	ble.w	801aff4 <_printf_float+0x23c>
 801b102:	2301      	movs	r3, #1
 801b104:	465a      	mov	r2, fp
 801b106:	4631      	mov	r1, r6
 801b108:	4628      	mov	r0, r5
 801b10a:	47b8      	blx	r7
 801b10c:	3001      	adds	r0, #1
 801b10e:	f43f aeae 	beq.w	801ae6e <_printf_float+0xb6>
 801b112:	f108 0801 	add.w	r8, r8, #1
 801b116:	e7ec      	b.n	801b0f2 <_printf_float+0x33a>
 801b118:	4642      	mov	r2, r8
 801b11a:	4631      	mov	r1, r6
 801b11c:	4628      	mov	r0, r5
 801b11e:	47b8      	blx	r7
 801b120:	3001      	adds	r0, #1
 801b122:	d1c2      	bne.n	801b0aa <_printf_float+0x2f2>
 801b124:	e6a3      	b.n	801ae6e <_printf_float+0xb6>
 801b126:	2301      	movs	r3, #1
 801b128:	4631      	mov	r1, r6
 801b12a:	4628      	mov	r0, r5
 801b12c:	9206      	str	r2, [sp, #24]
 801b12e:	47b8      	blx	r7
 801b130:	3001      	adds	r0, #1
 801b132:	f43f ae9c 	beq.w	801ae6e <_printf_float+0xb6>
 801b136:	9a06      	ldr	r2, [sp, #24]
 801b138:	f10b 0b01 	add.w	fp, fp, #1
 801b13c:	e7bb      	b.n	801b0b6 <_printf_float+0x2fe>
 801b13e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b142:	4631      	mov	r1, r6
 801b144:	4628      	mov	r0, r5
 801b146:	47b8      	blx	r7
 801b148:	3001      	adds	r0, #1
 801b14a:	d1c0      	bne.n	801b0ce <_printf_float+0x316>
 801b14c:	e68f      	b.n	801ae6e <_printf_float+0xb6>
 801b14e:	9a06      	ldr	r2, [sp, #24]
 801b150:	464b      	mov	r3, r9
 801b152:	4442      	add	r2, r8
 801b154:	4631      	mov	r1, r6
 801b156:	4628      	mov	r0, r5
 801b158:	47b8      	blx	r7
 801b15a:	3001      	adds	r0, #1
 801b15c:	d1c3      	bne.n	801b0e6 <_printf_float+0x32e>
 801b15e:	e686      	b.n	801ae6e <_printf_float+0xb6>
 801b160:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801b164:	f1ba 0f01 	cmp.w	sl, #1
 801b168:	dc01      	bgt.n	801b16e <_printf_float+0x3b6>
 801b16a:	07db      	lsls	r3, r3, #31
 801b16c:	d536      	bpl.n	801b1dc <_printf_float+0x424>
 801b16e:	2301      	movs	r3, #1
 801b170:	4642      	mov	r2, r8
 801b172:	4631      	mov	r1, r6
 801b174:	4628      	mov	r0, r5
 801b176:	47b8      	blx	r7
 801b178:	3001      	adds	r0, #1
 801b17a:	f43f ae78 	beq.w	801ae6e <_printf_float+0xb6>
 801b17e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b182:	4631      	mov	r1, r6
 801b184:	4628      	mov	r0, r5
 801b186:	47b8      	blx	r7
 801b188:	3001      	adds	r0, #1
 801b18a:	f43f ae70 	beq.w	801ae6e <_printf_float+0xb6>
 801b18e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801b192:	2200      	movs	r2, #0
 801b194:	2300      	movs	r3, #0
 801b196:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b19a:	f7e5 fca5 	bl	8000ae8 <__aeabi_dcmpeq>
 801b19e:	b9c0      	cbnz	r0, 801b1d2 <_printf_float+0x41a>
 801b1a0:	4653      	mov	r3, sl
 801b1a2:	f108 0201 	add.w	r2, r8, #1
 801b1a6:	4631      	mov	r1, r6
 801b1a8:	4628      	mov	r0, r5
 801b1aa:	47b8      	blx	r7
 801b1ac:	3001      	adds	r0, #1
 801b1ae:	d10c      	bne.n	801b1ca <_printf_float+0x412>
 801b1b0:	e65d      	b.n	801ae6e <_printf_float+0xb6>
 801b1b2:	2301      	movs	r3, #1
 801b1b4:	465a      	mov	r2, fp
 801b1b6:	4631      	mov	r1, r6
 801b1b8:	4628      	mov	r0, r5
 801b1ba:	47b8      	blx	r7
 801b1bc:	3001      	adds	r0, #1
 801b1be:	f43f ae56 	beq.w	801ae6e <_printf_float+0xb6>
 801b1c2:	f108 0801 	add.w	r8, r8, #1
 801b1c6:	45d0      	cmp	r8, sl
 801b1c8:	dbf3      	blt.n	801b1b2 <_printf_float+0x3fa>
 801b1ca:	464b      	mov	r3, r9
 801b1cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801b1d0:	e6df      	b.n	801af92 <_printf_float+0x1da>
 801b1d2:	f04f 0800 	mov.w	r8, #0
 801b1d6:	f104 0b1a 	add.w	fp, r4, #26
 801b1da:	e7f4      	b.n	801b1c6 <_printf_float+0x40e>
 801b1dc:	2301      	movs	r3, #1
 801b1de:	4642      	mov	r2, r8
 801b1e0:	e7e1      	b.n	801b1a6 <_printf_float+0x3ee>
 801b1e2:	2301      	movs	r3, #1
 801b1e4:	464a      	mov	r2, r9
 801b1e6:	4631      	mov	r1, r6
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	47b8      	blx	r7
 801b1ec:	3001      	adds	r0, #1
 801b1ee:	f43f ae3e 	beq.w	801ae6e <_printf_float+0xb6>
 801b1f2:	f108 0801 	add.w	r8, r8, #1
 801b1f6:	68e3      	ldr	r3, [r4, #12]
 801b1f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b1fa:	1a5b      	subs	r3, r3, r1
 801b1fc:	4543      	cmp	r3, r8
 801b1fe:	dcf0      	bgt.n	801b1e2 <_printf_float+0x42a>
 801b200:	e6fc      	b.n	801affc <_printf_float+0x244>
 801b202:	f04f 0800 	mov.w	r8, #0
 801b206:	f104 0919 	add.w	r9, r4, #25
 801b20a:	e7f4      	b.n	801b1f6 <_printf_float+0x43e>

0801b20c <__sfputc_r>:
 801b20c:	6893      	ldr	r3, [r2, #8]
 801b20e:	3b01      	subs	r3, #1
 801b210:	2b00      	cmp	r3, #0
 801b212:	b410      	push	{r4}
 801b214:	6093      	str	r3, [r2, #8]
 801b216:	da08      	bge.n	801b22a <__sfputc_r+0x1e>
 801b218:	6994      	ldr	r4, [r2, #24]
 801b21a:	42a3      	cmp	r3, r4
 801b21c:	db01      	blt.n	801b222 <__sfputc_r+0x16>
 801b21e:	290a      	cmp	r1, #10
 801b220:	d103      	bne.n	801b22a <__sfputc_r+0x1e>
 801b222:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b226:	f000 bee1 	b.w	801bfec <__swbuf_r>
 801b22a:	6813      	ldr	r3, [r2, #0]
 801b22c:	1c58      	adds	r0, r3, #1
 801b22e:	6010      	str	r0, [r2, #0]
 801b230:	7019      	strb	r1, [r3, #0]
 801b232:	4608      	mov	r0, r1
 801b234:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b238:	4770      	bx	lr

0801b23a <__sfputs_r>:
 801b23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b23c:	4606      	mov	r6, r0
 801b23e:	460f      	mov	r7, r1
 801b240:	4614      	mov	r4, r2
 801b242:	18d5      	adds	r5, r2, r3
 801b244:	42ac      	cmp	r4, r5
 801b246:	d101      	bne.n	801b24c <__sfputs_r+0x12>
 801b248:	2000      	movs	r0, #0
 801b24a:	e007      	b.n	801b25c <__sfputs_r+0x22>
 801b24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b250:	463a      	mov	r2, r7
 801b252:	4630      	mov	r0, r6
 801b254:	f7ff ffda 	bl	801b20c <__sfputc_r>
 801b258:	1c43      	adds	r3, r0, #1
 801b25a:	d1f3      	bne.n	801b244 <__sfputs_r+0xa>
 801b25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b260 <_vfiprintf_r>:
 801b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b264:	460d      	mov	r5, r1
 801b266:	b09d      	sub	sp, #116	@ 0x74
 801b268:	4614      	mov	r4, r2
 801b26a:	4698      	mov	r8, r3
 801b26c:	4606      	mov	r6, r0
 801b26e:	b118      	cbz	r0, 801b278 <_vfiprintf_r+0x18>
 801b270:	6a03      	ldr	r3, [r0, #32]
 801b272:	b90b      	cbnz	r3, 801b278 <_vfiprintf_r+0x18>
 801b274:	f000 fd3c 	bl	801bcf0 <__sinit>
 801b278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b27a:	07d9      	lsls	r1, r3, #31
 801b27c:	d405      	bmi.n	801b28a <_vfiprintf_r+0x2a>
 801b27e:	89ab      	ldrh	r3, [r5, #12]
 801b280:	059a      	lsls	r2, r3, #22
 801b282:	d402      	bmi.n	801b28a <_vfiprintf_r+0x2a>
 801b284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b286:	f001 f84c 	bl	801c322 <__retarget_lock_acquire_recursive>
 801b28a:	89ab      	ldrh	r3, [r5, #12]
 801b28c:	071b      	lsls	r3, r3, #28
 801b28e:	d501      	bpl.n	801b294 <_vfiprintf_r+0x34>
 801b290:	692b      	ldr	r3, [r5, #16]
 801b292:	b99b      	cbnz	r3, 801b2bc <_vfiprintf_r+0x5c>
 801b294:	4629      	mov	r1, r5
 801b296:	4630      	mov	r0, r6
 801b298:	f000 fee6 	bl	801c068 <__swsetup_r>
 801b29c:	b170      	cbz	r0, 801b2bc <_vfiprintf_r+0x5c>
 801b29e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2a0:	07dc      	lsls	r4, r3, #31
 801b2a2:	d504      	bpl.n	801b2ae <_vfiprintf_r+0x4e>
 801b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2a8:	b01d      	add	sp, #116	@ 0x74
 801b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ae:	89ab      	ldrh	r3, [r5, #12]
 801b2b0:	0598      	lsls	r0, r3, #22
 801b2b2:	d4f7      	bmi.n	801b2a4 <_vfiprintf_r+0x44>
 801b2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2b6:	f001 f835 	bl	801c324 <__retarget_lock_release_recursive>
 801b2ba:	e7f3      	b.n	801b2a4 <_vfiprintf_r+0x44>
 801b2bc:	2300      	movs	r3, #0
 801b2be:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2c0:	2320      	movs	r3, #32
 801b2c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2ca:	2330      	movs	r3, #48	@ 0x30
 801b2cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b47c <_vfiprintf_r+0x21c>
 801b2d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b2d4:	f04f 0901 	mov.w	r9, #1
 801b2d8:	4623      	mov	r3, r4
 801b2da:	469a      	mov	sl, r3
 801b2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2e0:	b10a      	cbz	r2, 801b2e6 <_vfiprintf_r+0x86>
 801b2e2:	2a25      	cmp	r2, #37	@ 0x25
 801b2e4:	d1f9      	bne.n	801b2da <_vfiprintf_r+0x7a>
 801b2e6:	ebba 0b04 	subs.w	fp, sl, r4
 801b2ea:	d00b      	beq.n	801b304 <_vfiprintf_r+0xa4>
 801b2ec:	465b      	mov	r3, fp
 801b2ee:	4622      	mov	r2, r4
 801b2f0:	4629      	mov	r1, r5
 801b2f2:	4630      	mov	r0, r6
 801b2f4:	f7ff ffa1 	bl	801b23a <__sfputs_r>
 801b2f8:	3001      	adds	r0, #1
 801b2fa:	f000 80a7 	beq.w	801b44c <_vfiprintf_r+0x1ec>
 801b2fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b300:	445a      	add	r2, fp
 801b302:	9209      	str	r2, [sp, #36]	@ 0x24
 801b304:	f89a 3000 	ldrb.w	r3, [sl]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f000 809f 	beq.w	801b44c <_vfiprintf_r+0x1ec>
 801b30e:	2300      	movs	r3, #0
 801b310:	f04f 32ff 	mov.w	r2, #4294967295
 801b314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b318:	f10a 0a01 	add.w	sl, sl, #1
 801b31c:	9304      	str	r3, [sp, #16]
 801b31e:	9307      	str	r3, [sp, #28]
 801b320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b324:	931a      	str	r3, [sp, #104]	@ 0x68
 801b326:	4654      	mov	r4, sl
 801b328:	2205      	movs	r2, #5
 801b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b32e:	4853      	ldr	r0, [pc, #332]	@ (801b47c <_vfiprintf_r+0x21c>)
 801b330:	f7e4 ff5e 	bl	80001f0 <memchr>
 801b334:	9a04      	ldr	r2, [sp, #16]
 801b336:	b9d8      	cbnz	r0, 801b370 <_vfiprintf_r+0x110>
 801b338:	06d1      	lsls	r1, r2, #27
 801b33a:	bf44      	itt	mi
 801b33c:	2320      	movmi	r3, #32
 801b33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b342:	0713      	lsls	r3, r2, #28
 801b344:	bf44      	itt	mi
 801b346:	232b      	movmi	r3, #43	@ 0x2b
 801b348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b34c:	f89a 3000 	ldrb.w	r3, [sl]
 801b350:	2b2a      	cmp	r3, #42	@ 0x2a
 801b352:	d015      	beq.n	801b380 <_vfiprintf_r+0x120>
 801b354:	9a07      	ldr	r2, [sp, #28]
 801b356:	4654      	mov	r4, sl
 801b358:	2000      	movs	r0, #0
 801b35a:	f04f 0c0a 	mov.w	ip, #10
 801b35e:	4621      	mov	r1, r4
 801b360:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b364:	3b30      	subs	r3, #48	@ 0x30
 801b366:	2b09      	cmp	r3, #9
 801b368:	d94b      	bls.n	801b402 <_vfiprintf_r+0x1a2>
 801b36a:	b1b0      	cbz	r0, 801b39a <_vfiprintf_r+0x13a>
 801b36c:	9207      	str	r2, [sp, #28]
 801b36e:	e014      	b.n	801b39a <_vfiprintf_r+0x13a>
 801b370:	eba0 0308 	sub.w	r3, r0, r8
 801b374:	fa09 f303 	lsl.w	r3, r9, r3
 801b378:	4313      	orrs	r3, r2
 801b37a:	9304      	str	r3, [sp, #16]
 801b37c:	46a2      	mov	sl, r4
 801b37e:	e7d2      	b.n	801b326 <_vfiprintf_r+0xc6>
 801b380:	9b03      	ldr	r3, [sp, #12]
 801b382:	1d19      	adds	r1, r3, #4
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	9103      	str	r1, [sp, #12]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	bfbb      	ittet	lt
 801b38c:	425b      	neglt	r3, r3
 801b38e:	f042 0202 	orrlt.w	r2, r2, #2
 801b392:	9307      	strge	r3, [sp, #28]
 801b394:	9307      	strlt	r3, [sp, #28]
 801b396:	bfb8      	it	lt
 801b398:	9204      	strlt	r2, [sp, #16]
 801b39a:	7823      	ldrb	r3, [r4, #0]
 801b39c:	2b2e      	cmp	r3, #46	@ 0x2e
 801b39e:	d10a      	bne.n	801b3b6 <_vfiprintf_r+0x156>
 801b3a0:	7863      	ldrb	r3, [r4, #1]
 801b3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b3a4:	d132      	bne.n	801b40c <_vfiprintf_r+0x1ac>
 801b3a6:	9b03      	ldr	r3, [sp, #12]
 801b3a8:	1d1a      	adds	r2, r3, #4
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	9203      	str	r2, [sp, #12]
 801b3ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b3b2:	3402      	adds	r4, #2
 801b3b4:	9305      	str	r3, [sp, #20]
 801b3b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b48c <_vfiprintf_r+0x22c>
 801b3ba:	7821      	ldrb	r1, [r4, #0]
 801b3bc:	2203      	movs	r2, #3
 801b3be:	4650      	mov	r0, sl
 801b3c0:	f7e4 ff16 	bl	80001f0 <memchr>
 801b3c4:	b138      	cbz	r0, 801b3d6 <_vfiprintf_r+0x176>
 801b3c6:	9b04      	ldr	r3, [sp, #16]
 801b3c8:	eba0 000a 	sub.w	r0, r0, sl
 801b3cc:	2240      	movs	r2, #64	@ 0x40
 801b3ce:	4082      	lsls	r2, r0
 801b3d0:	4313      	orrs	r3, r2
 801b3d2:	3401      	adds	r4, #1
 801b3d4:	9304      	str	r3, [sp, #16]
 801b3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3da:	4829      	ldr	r0, [pc, #164]	@ (801b480 <_vfiprintf_r+0x220>)
 801b3dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b3e0:	2206      	movs	r2, #6
 801b3e2:	f7e4 ff05 	bl	80001f0 <memchr>
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	d03f      	beq.n	801b46a <_vfiprintf_r+0x20a>
 801b3ea:	4b26      	ldr	r3, [pc, #152]	@ (801b484 <_vfiprintf_r+0x224>)
 801b3ec:	bb1b      	cbnz	r3, 801b436 <_vfiprintf_r+0x1d6>
 801b3ee:	9b03      	ldr	r3, [sp, #12]
 801b3f0:	3307      	adds	r3, #7
 801b3f2:	f023 0307 	bic.w	r3, r3, #7
 801b3f6:	3308      	adds	r3, #8
 801b3f8:	9303      	str	r3, [sp, #12]
 801b3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3fc:	443b      	add	r3, r7
 801b3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801b400:	e76a      	b.n	801b2d8 <_vfiprintf_r+0x78>
 801b402:	fb0c 3202 	mla	r2, ip, r2, r3
 801b406:	460c      	mov	r4, r1
 801b408:	2001      	movs	r0, #1
 801b40a:	e7a8      	b.n	801b35e <_vfiprintf_r+0xfe>
 801b40c:	2300      	movs	r3, #0
 801b40e:	3401      	adds	r4, #1
 801b410:	9305      	str	r3, [sp, #20]
 801b412:	4619      	mov	r1, r3
 801b414:	f04f 0c0a 	mov.w	ip, #10
 801b418:	4620      	mov	r0, r4
 801b41a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b41e:	3a30      	subs	r2, #48	@ 0x30
 801b420:	2a09      	cmp	r2, #9
 801b422:	d903      	bls.n	801b42c <_vfiprintf_r+0x1cc>
 801b424:	2b00      	cmp	r3, #0
 801b426:	d0c6      	beq.n	801b3b6 <_vfiprintf_r+0x156>
 801b428:	9105      	str	r1, [sp, #20]
 801b42a:	e7c4      	b.n	801b3b6 <_vfiprintf_r+0x156>
 801b42c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b430:	4604      	mov	r4, r0
 801b432:	2301      	movs	r3, #1
 801b434:	e7f0      	b.n	801b418 <_vfiprintf_r+0x1b8>
 801b436:	ab03      	add	r3, sp, #12
 801b438:	9300      	str	r3, [sp, #0]
 801b43a:	462a      	mov	r2, r5
 801b43c:	4b12      	ldr	r3, [pc, #72]	@ (801b488 <_vfiprintf_r+0x228>)
 801b43e:	a904      	add	r1, sp, #16
 801b440:	4630      	mov	r0, r6
 801b442:	f7ff fcb9 	bl	801adb8 <_printf_float>
 801b446:	4607      	mov	r7, r0
 801b448:	1c78      	adds	r0, r7, #1
 801b44a:	d1d6      	bne.n	801b3fa <_vfiprintf_r+0x19a>
 801b44c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b44e:	07d9      	lsls	r1, r3, #31
 801b450:	d405      	bmi.n	801b45e <_vfiprintf_r+0x1fe>
 801b452:	89ab      	ldrh	r3, [r5, #12]
 801b454:	059a      	lsls	r2, r3, #22
 801b456:	d402      	bmi.n	801b45e <_vfiprintf_r+0x1fe>
 801b458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b45a:	f000 ff63 	bl	801c324 <__retarget_lock_release_recursive>
 801b45e:	89ab      	ldrh	r3, [r5, #12]
 801b460:	065b      	lsls	r3, r3, #25
 801b462:	f53f af1f 	bmi.w	801b2a4 <_vfiprintf_r+0x44>
 801b466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b468:	e71e      	b.n	801b2a8 <_vfiprintf_r+0x48>
 801b46a:	ab03      	add	r3, sp, #12
 801b46c:	9300      	str	r3, [sp, #0]
 801b46e:	462a      	mov	r2, r5
 801b470:	4b05      	ldr	r3, [pc, #20]	@ (801b488 <_vfiprintf_r+0x228>)
 801b472:	a904      	add	r1, sp, #16
 801b474:	4630      	mov	r0, r6
 801b476:	f000 f883 	bl	801b580 <_printf_i>
 801b47a:	e7e4      	b.n	801b446 <_vfiprintf_r+0x1e6>
 801b47c:	0802213c 	.word	0x0802213c
 801b480:	08022146 	.word	0x08022146
 801b484:	0801adb9 	.word	0x0801adb9
 801b488:	0801b23b 	.word	0x0801b23b
 801b48c:	08022142 	.word	0x08022142

0801b490 <vfiprintf>:
 801b490:	4613      	mov	r3, r2
 801b492:	460a      	mov	r2, r1
 801b494:	4601      	mov	r1, r0
 801b496:	4802      	ldr	r0, [pc, #8]	@ (801b4a0 <vfiprintf+0x10>)
 801b498:	6800      	ldr	r0, [r0, #0]
 801b49a:	f7ff bee1 	b.w	801b260 <_vfiprintf_r>
 801b49e:	bf00      	nop
 801b4a0:	20000164 	.word	0x20000164

0801b4a4 <_printf_common>:
 801b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4a8:	4616      	mov	r6, r2
 801b4aa:	4698      	mov	r8, r3
 801b4ac:	688a      	ldr	r2, [r1, #8]
 801b4ae:	690b      	ldr	r3, [r1, #16]
 801b4b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	bfb8      	it	lt
 801b4b8:	4613      	movlt	r3, r2
 801b4ba:	6033      	str	r3, [r6, #0]
 801b4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b4c0:	4607      	mov	r7, r0
 801b4c2:	460c      	mov	r4, r1
 801b4c4:	b10a      	cbz	r2, 801b4ca <_printf_common+0x26>
 801b4c6:	3301      	adds	r3, #1
 801b4c8:	6033      	str	r3, [r6, #0]
 801b4ca:	6823      	ldr	r3, [r4, #0]
 801b4cc:	0699      	lsls	r1, r3, #26
 801b4ce:	bf42      	ittt	mi
 801b4d0:	6833      	ldrmi	r3, [r6, #0]
 801b4d2:	3302      	addmi	r3, #2
 801b4d4:	6033      	strmi	r3, [r6, #0]
 801b4d6:	6825      	ldr	r5, [r4, #0]
 801b4d8:	f015 0506 	ands.w	r5, r5, #6
 801b4dc:	d106      	bne.n	801b4ec <_printf_common+0x48>
 801b4de:	f104 0a19 	add.w	sl, r4, #25
 801b4e2:	68e3      	ldr	r3, [r4, #12]
 801b4e4:	6832      	ldr	r2, [r6, #0]
 801b4e6:	1a9b      	subs	r3, r3, r2
 801b4e8:	42ab      	cmp	r3, r5
 801b4ea:	dc26      	bgt.n	801b53a <_printf_common+0x96>
 801b4ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b4f0:	6822      	ldr	r2, [r4, #0]
 801b4f2:	3b00      	subs	r3, #0
 801b4f4:	bf18      	it	ne
 801b4f6:	2301      	movne	r3, #1
 801b4f8:	0692      	lsls	r2, r2, #26
 801b4fa:	d42b      	bmi.n	801b554 <_printf_common+0xb0>
 801b4fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b500:	4641      	mov	r1, r8
 801b502:	4638      	mov	r0, r7
 801b504:	47c8      	blx	r9
 801b506:	3001      	adds	r0, #1
 801b508:	d01e      	beq.n	801b548 <_printf_common+0xa4>
 801b50a:	6823      	ldr	r3, [r4, #0]
 801b50c:	6922      	ldr	r2, [r4, #16]
 801b50e:	f003 0306 	and.w	r3, r3, #6
 801b512:	2b04      	cmp	r3, #4
 801b514:	bf02      	ittt	eq
 801b516:	68e5      	ldreq	r5, [r4, #12]
 801b518:	6833      	ldreq	r3, [r6, #0]
 801b51a:	1aed      	subeq	r5, r5, r3
 801b51c:	68a3      	ldr	r3, [r4, #8]
 801b51e:	bf0c      	ite	eq
 801b520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b524:	2500      	movne	r5, #0
 801b526:	4293      	cmp	r3, r2
 801b528:	bfc4      	itt	gt
 801b52a:	1a9b      	subgt	r3, r3, r2
 801b52c:	18ed      	addgt	r5, r5, r3
 801b52e:	2600      	movs	r6, #0
 801b530:	341a      	adds	r4, #26
 801b532:	42b5      	cmp	r5, r6
 801b534:	d11a      	bne.n	801b56c <_printf_common+0xc8>
 801b536:	2000      	movs	r0, #0
 801b538:	e008      	b.n	801b54c <_printf_common+0xa8>
 801b53a:	2301      	movs	r3, #1
 801b53c:	4652      	mov	r2, sl
 801b53e:	4641      	mov	r1, r8
 801b540:	4638      	mov	r0, r7
 801b542:	47c8      	blx	r9
 801b544:	3001      	adds	r0, #1
 801b546:	d103      	bne.n	801b550 <_printf_common+0xac>
 801b548:	f04f 30ff 	mov.w	r0, #4294967295
 801b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b550:	3501      	adds	r5, #1
 801b552:	e7c6      	b.n	801b4e2 <_printf_common+0x3e>
 801b554:	18e1      	adds	r1, r4, r3
 801b556:	1c5a      	adds	r2, r3, #1
 801b558:	2030      	movs	r0, #48	@ 0x30
 801b55a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b55e:	4422      	add	r2, r4
 801b560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b568:	3302      	adds	r3, #2
 801b56a:	e7c7      	b.n	801b4fc <_printf_common+0x58>
 801b56c:	2301      	movs	r3, #1
 801b56e:	4622      	mov	r2, r4
 801b570:	4641      	mov	r1, r8
 801b572:	4638      	mov	r0, r7
 801b574:	47c8      	blx	r9
 801b576:	3001      	adds	r0, #1
 801b578:	d0e6      	beq.n	801b548 <_printf_common+0xa4>
 801b57a:	3601      	adds	r6, #1
 801b57c:	e7d9      	b.n	801b532 <_printf_common+0x8e>
	...

0801b580 <_printf_i>:
 801b580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b584:	7e0f      	ldrb	r7, [r1, #24]
 801b586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b588:	2f78      	cmp	r7, #120	@ 0x78
 801b58a:	4691      	mov	r9, r2
 801b58c:	4680      	mov	r8, r0
 801b58e:	460c      	mov	r4, r1
 801b590:	469a      	mov	sl, r3
 801b592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b596:	d807      	bhi.n	801b5a8 <_printf_i+0x28>
 801b598:	2f62      	cmp	r7, #98	@ 0x62
 801b59a:	d80a      	bhi.n	801b5b2 <_printf_i+0x32>
 801b59c:	2f00      	cmp	r7, #0
 801b59e:	f000 80d1 	beq.w	801b744 <_printf_i+0x1c4>
 801b5a2:	2f58      	cmp	r7, #88	@ 0x58
 801b5a4:	f000 80b8 	beq.w	801b718 <_printf_i+0x198>
 801b5a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b5ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b5b0:	e03a      	b.n	801b628 <_printf_i+0xa8>
 801b5b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b5b6:	2b15      	cmp	r3, #21
 801b5b8:	d8f6      	bhi.n	801b5a8 <_printf_i+0x28>
 801b5ba:	a101      	add	r1, pc, #4	@ (adr r1, 801b5c0 <_printf_i+0x40>)
 801b5bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b5c0:	0801b619 	.word	0x0801b619
 801b5c4:	0801b62d 	.word	0x0801b62d
 801b5c8:	0801b5a9 	.word	0x0801b5a9
 801b5cc:	0801b5a9 	.word	0x0801b5a9
 801b5d0:	0801b5a9 	.word	0x0801b5a9
 801b5d4:	0801b5a9 	.word	0x0801b5a9
 801b5d8:	0801b62d 	.word	0x0801b62d
 801b5dc:	0801b5a9 	.word	0x0801b5a9
 801b5e0:	0801b5a9 	.word	0x0801b5a9
 801b5e4:	0801b5a9 	.word	0x0801b5a9
 801b5e8:	0801b5a9 	.word	0x0801b5a9
 801b5ec:	0801b72b 	.word	0x0801b72b
 801b5f0:	0801b657 	.word	0x0801b657
 801b5f4:	0801b6e5 	.word	0x0801b6e5
 801b5f8:	0801b5a9 	.word	0x0801b5a9
 801b5fc:	0801b5a9 	.word	0x0801b5a9
 801b600:	0801b74d 	.word	0x0801b74d
 801b604:	0801b5a9 	.word	0x0801b5a9
 801b608:	0801b657 	.word	0x0801b657
 801b60c:	0801b5a9 	.word	0x0801b5a9
 801b610:	0801b5a9 	.word	0x0801b5a9
 801b614:	0801b6ed 	.word	0x0801b6ed
 801b618:	6833      	ldr	r3, [r6, #0]
 801b61a:	1d1a      	adds	r2, r3, #4
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	6032      	str	r2, [r6, #0]
 801b620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b628:	2301      	movs	r3, #1
 801b62a:	e09c      	b.n	801b766 <_printf_i+0x1e6>
 801b62c:	6833      	ldr	r3, [r6, #0]
 801b62e:	6820      	ldr	r0, [r4, #0]
 801b630:	1d19      	adds	r1, r3, #4
 801b632:	6031      	str	r1, [r6, #0]
 801b634:	0606      	lsls	r6, r0, #24
 801b636:	d501      	bpl.n	801b63c <_printf_i+0xbc>
 801b638:	681d      	ldr	r5, [r3, #0]
 801b63a:	e003      	b.n	801b644 <_printf_i+0xc4>
 801b63c:	0645      	lsls	r5, r0, #25
 801b63e:	d5fb      	bpl.n	801b638 <_printf_i+0xb8>
 801b640:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b644:	2d00      	cmp	r5, #0
 801b646:	da03      	bge.n	801b650 <_printf_i+0xd0>
 801b648:	232d      	movs	r3, #45	@ 0x2d
 801b64a:	426d      	negs	r5, r5
 801b64c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b650:	4858      	ldr	r0, [pc, #352]	@ (801b7b4 <_printf_i+0x234>)
 801b652:	230a      	movs	r3, #10
 801b654:	e011      	b.n	801b67a <_printf_i+0xfa>
 801b656:	6821      	ldr	r1, [r4, #0]
 801b658:	6833      	ldr	r3, [r6, #0]
 801b65a:	0608      	lsls	r0, r1, #24
 801b65c:	f853 5b04 	ldr.w	r5, [r3], #4
 801b660:	d402      	bmi.n	801b668 <_printf_i+0xe8>
 801b662:	0649      	lsls	r1, r1, #25
 801b664:	bf48      	it	mi
 801b666:	b2ad      	uxthmi	r5, r5
 801b668:	2f6f      	cmp	r7, #111	@ 0x6f
 801b66a:	4852      	ldr	r0, [pc, #328]	@ (801b7b4 <_printf_i+0x234>)
 801b66c:	6033      	str	r3, [r6, #0]
 801b66e:	bf14      	ite	ne
 801b670:	230a      	movne	r3, #10
 801b672:	2308      	moveq	r3, #8
 801b674:	2100      	movs	r1, #0
 801b676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b67a:	6866      	ldr	r6, [r4, #4]
 801b67c:	60a6      	str	r6, [r4, #8]
 801b67e:	2e00      	cmp	r6, #0
 801b680:	db05      	blt.n	801b68e <_printf_i+0x10e>
 801b682:	6821      	ldr	r1, [r4, #0]
 801b684:	432e      	orrs	r6, r5
 801b686:	f021 0104 	bic.w	r1, r1, #4
 801b68a:	6021      	str	r1, [r4, #0]
 801b68c:	d04b      	beq.n	801b726 <_printf_i+0x1a6>
 801b68e:	4616      	mov	r6, r2
 801b690:	fbb5 f1f3 	udiv	r1, r5, r3
 801b694:	fb03 5711 	mls	r7, r3, r1, r5
 801b698:	5dc7      	ldrb	r7, [r0, r7]
 801b69a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b69e:	462f      	mov	r7, r5
 801b6a0:	42bb      	cmp	r3, r7
 801b6a2:	460d      	mov	r5, r1
 801b6a4:	d9f4      	bls.n	801b690 <_printf_i+0x110>
 801b6a6:	2b08      	cmp	r3, #8
 801b6a8:	d10b      	bne.n	801b6c2 <_printf_i+0x142>
 801b6aa:	6823      	ldr	r3, [r4, #0]
 801b6ac:	07df      	lsls	r7, r3, #31
 801b6ae:	d508      	bpl.n	801b6c2 <_printf_i+0x142>
 801b6b0:	6923      	ldr	r3, [r4, #16]
 801b6b2:	6861      	ldr	r1, [r4, #4]
 801b6b4:	4299      	cmp	r1, r3
 801b6b6:	bfde      	ittt	le
 801b6b8:	2330      	movle	r3, #48	@ 0x30
 801b6ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b6be:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b6c2:	1b92      	subs	r2, r2, r6
 801b6c4:	6122      	str	r2, [r4, #16]
 801b6c6:	f8cd a000 	str.w	sl, [sp]
 801b6ca:	464b      	mov	r3, r9
 801b6cc:	aa03      	add	r2, sp, #12
 801b6ce:	4621      	mov	r1, r4
 801b6d0:	4640      	mov	r0, r8
 801b6d2:	f7ff fee7 	bl	801b4a4 <_printf_common>
 801b6d6:	3001      	adds	r0, #1
 801b6d8:	d14a      	bne.n	801b770 <_printf_i+0x1f0>
 801b6da:	f04f 30ff 	mov.w	r0, #4294967295
 801b6de:	b004      	add	sp, #16
 801b6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6e4:	6823      	ldr	r3, [r4, #0]
 801b6e6:	f043 0320 	orr.w	r3, r3, #32
 801b6ea:	6023      	str	r3, [r4, #0]
 801b6ec:	4832      	ldr	r0, [pc, #200]	@ (801b7b8 <_printf_i+0x238>)
 801b6ee:	2778      	movs	r7, #120	@ 0x78
 801b6f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b6f4:	6823      	ldr	r3, [r4, #0]
 801b6f6:	6831      	ldr	r1, [r6, #0]
 801b6f8:	061f      	lsls	r7, r3, #24
 801b6fa:	f851 5b04 	ldr.w	r5, [r1], #4
 801b6fe:	d402      	bmi.n	801b706 <_printf_i+0x186>
 801b700:	065f      	lsls	r7, r3, #25
 801b702:	bf48      	it	mi
 801b704:	b2ad      	uxthmi	r5, r5
 801b706:	6031      	str	r1, [r6, #0]
 801b708:	07d9      	lsls	r1, r3, #31
 801b70a:	bf44      	itt	mi
 801b70c:	f043 0320 	orrmi.w	r3, r3, #32
 801b710:	6023      	strmi	r3, [r4, #0]
 801b712:	b11d      	cbz	r5, 801b71c <_printf_i+0x19c>
 801b714:	2310      	movs	r3, #16
 801b716:	e7ad      	b.n	801b674 <_printf_i+0xf4>
 801b718:	4826      	ldr	r0, [pc, #152]	@ (801b7b4 <_printf_i+0x234>)
 801b71a:	e7e9      	b.n	801b6f0 <_printf_i+0x170>
 801b71c:	6823      	ldr	r3, [r4, #0]
 801b71e:	f023 0320 	bic.w	r3, r3, #32
 801b722:	6023      	str	r3, [r4, #0]
 801b724:	e7f6      	b.n	801b714 <_printf_i+0x194>
 801b726:	4616      	mov	r6, r2
 801b728:	e7bd      	b.n	801b6a6 <_printf_i+0x126>
 801b72a:	6833      	ldr	r3, [r6, #0]
 801b72c:	6825      	ldr	r5, [r4, #0]
 801b72e:	6961      	ldr	r1, [r4, #20]
 801b730:	1d18      	adds	r0, r3, #4
 801b732:	6030      	str	r0, [r6, #0]
 801b734:	062e      	lsls	r6, r5, #24
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	d501      	bpl.n	801b73e <_printf_i+0x1be>
 801b73a:	6019      	str	r1, [r3, #0]
 801b73c:	e002      	b.n	801b744 <_printf_i+0x1c4>
 801b73e:	0668      	lsls	r0, r5, #25
 801b740:	d5fb      	bpl.n	801b73a <_printf_i+0x1ba>
 801b742:	8019      	strh	r1, [r3, #0]
 801b744:	2300      	movs	r3, #0
 801b746:	6123      	str	r3, [r4, #16]
 801b748:	4616      	mov	r6, r2
 801b74a:	e7bc      	b.n	801b6c6 <_printf_i+0x146>
 801b74c:	6833      	ldr	r3, [r6, #0]
 801b74e:	1d1a      	adds	r2, r3, #4
 801b750:	6032      	str	r2, [r6, #0]
 801b752:	681e      	ldr	r6, [r3, #0]
 801b754:	6862      	ldr	r2, [r4, #4]
 801b756:	2100      	movs	r1, #0
 801b758:	4630      	mov	r0, r6
 801b75a:	f7e4 fd49 	bl	80001f0 <memchr>
 801b75e:	b108      	cbz	r0, 801b764 <_printf_i+0x1e4>
 801b760:	1b80      	subs	r0, r0, r6
 801b762:	6060      	str	r0, [r4, #4]
 801b764:	6863      	ldr	r3, [r4, #4]
 801b766:	6123      	str	r3, [r4, #16]
 801b768:	2300      	movs	r3, #0
 801b76a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b76e:	e7aa      	b.n	801b6c6 <_printf_i+0x146>
 801b770:	6923      	ldr	r3, [r4, #16]
 801b772:	4632      	mov	r2, r6
 801b774:	4649      	mov	r1, r9
 801b776:	4640      	mov	r0, r8
 801b778:	47d0      	blx	sl
 801b77a:	3001      	adds	r0, #1
 801b77c:	d0ad      	beq.n	801b6da <_printf_i+0x15a>
 801b77e:	6823      	ldr	r3, [r4, #0]
 801b780:	079b      	lsls	r3, r3, #30
 801b782:	d413      	bmi.n	801b7ac <_printf_i+0x22c>
 801b784:	68e0      	ldr	r0, [r4, #12]
 801b786:	9b03      	ldr	r3, [sp, #12]
 801b788:	4298      	cmp	r0, r3
 801b78a:	bfb8      	it	lt
 801b78c:	4618      	movlt	r0, r3
 801b78e:	e7a6      	b.n	801b6de <_printf_i+0x15e>
 801b790:	2301      	movs	r3, #1
 801b792:	4632      	mov	r2, r6
 801b794:	4649      	mov	r1, r9
 801b796:	4640      	mov	r0, r8
 801b798:	47d0      	blx	sl
 801b79a:	3001      	adds	r0, #1
 801b79c:	d09d      	beq.n	801b6da <_printf_i+0x15a>
 801b79e:	3501      	adds	r5, #1
 801b7a0:	68e3      	ldr	r3, [r4, #12]
 801b7a2:	9903      	ldr	r1, [sp, #12]
 801b7a4:	1a5b      	subs	r3, r3, r1
 801b7a6:	42ab      	cmp	r3, r5
 801b7a8:	dcf2      	bgt.n	801b790 <_printf_i+0x210>
 801b7aa:	e7eb      	b.n	801b784 <_printf_i+0x204>
 801b7ac:	2500      	movs	r5, #0
 801b7ae:	f104 0619 	add.w	r6, r4, #25
 801b7b2:	e7f5      	b.n	801b7a0 <_printf_i+0x220>
 801b7b4:	0802214d 	.word	0x0802214d
 801b7b8:	0802215e 	.word	0x0802215e

0801b7bc <_scanf_float>:
 801b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c0:	b087      	sub	sp, #28
 801b7c2:	4691      	mov	r9, r2
 801b7c4:	9303      	str	r3, [sp, #12]
 801b7c6:	688b      	ldr	r3, [r1, #8]
 801b7c8:	1e5a      	subs	r2, r3, #1
 801b7ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b7ce:	bf81      	itttt	hi
 801b7d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b7d4:	eb03 0b05 	addhi.w	fp, r3, r5
 801b7d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b7dc:	608b      	strhi	r3, [r1, #8]
 801b7de:	680b      	ldr	r3, [r1, #0]
 801b7e0:	460a      	mov	r2, r1
 801b7e2:	f04f 0500 	mov.w	r5, #0
 801b7e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801b7ea:	f842 3b1c 	str.w	r3, [r2], #28
 801b7ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b7f2:	4680      	mov	r8, r0
 801b7f4:	460c      	mov	r4, r1
 801b7f6:	bf98      	it	ls
 801b7f8:	f04f 0b00 	movls.w	fp, #0
 801b7fc:	9201      	str	r2, [sp, #4]
 801b7fe:	4616      	mov	r6, r2
 801b800:	46aa      	mov	sl, r5
 801b802:	462f      	mov	r7, r5
 801b804:	9502      	str	r5, [sp, #8]
 801b806:	68a2      	ldr	r2, [r4, #8]
 801b808:	b15a      	cbz	r2, 801b822 <_scanf_float+0x66>
 801b80a:	f8d9 3000 	ldr.w	r3, [r9]
 801b80e:	781b      	ldrb	r3, [r3, #0]
 801b810:	2b4e      	cmp	r3, #78	@ 0x4e
 801b812:	d863      	bhi.n	801b8dc <_scanf_float+0x120>
 801b814:	2b40      	cmp	r3, #64	@ 0x40
 801b816:	d83b      	bhi.n	801b890 <_scanf_float+0xd4>
 801b818:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801b81c:	b2c8      	uxtb	r0, r1
 801b81e:	280e      	cmp	r0, #14
 801b820:	d939      	bls.n	801b896 <_scanf_float+0xda>
 801b822:	b11f      	cbz	r7, 801b82c <_scanf_float+0x70>
 801b824:	6823      	ldr	r3, [r4, #0]
 801b826:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b82a:	6023      	str	r3, [r4, #0]
 801b82c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b830:	f1ba 0f01 	cmp.w	sl, #1
 801b834:	f200 8114 	bhi.w	801ba60 <_scanf_float+0x2a4>
 801b838:	9b01      	ldr	r3, [sp, #4]
 801b83a:	429e      	cmp	r6, r3
 801b83c:	f200 8105 	bhi.w	801ba4a <_scanf_float+0x28e>
 801b840:	2001      	movs	r0, #1
 801b842:	b007      	add	sp, #28
 801b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b848:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801b84c:	2a0d      	cmp	r2, #13
 801b84e:	d8e8      	bhi.n	801b822 <_scanf_float+0x66>
 801b850:	a101      	add	r1, pc, #4	@ (adr r1, 801b858 <_scanf_float+0x9c>)
 801b852:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b856:	bf00      	nop
 801b858:	0801b9a1 	.word	0x0801b9a1
 801b85c:	0801b823 	.word	0x0801b823
 801b860:	0801b823 	.word	0x0801b823
 801b864:	0801b823 	.word	0x0801b823
 801b868:	0801b9fd 	.word	0x0801b9fd
 801b86c:	0801b9d7 	.word	0x0801b9d7
 801b870:	0801b823 	.word	0x0801b823
 801b874:	0801b823 	.word	0x0801b823
 801b878:	0801b9af 	.word	0x0801b9af
 801b87c:	0801b823 	.word	0x0801b823
 801b880:	0801b823 	.word	0x0801b823
 801b884:	0801b823 	.word	0x0801b823
 801b888:	0801b823 	.word	0x0801b823
 801b88c:	0801b96b 	.word	0x0801b96b
 801b890:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b894:	e7da      	b.n	801b84c <_scanf_float+0x90>
 801b896:	290e      	cmp	r1, #14
 801b898:	d8c3      	bhi.n	801b822 <_scanf_float+0x66>
 801b89a:	a001      	add	r0, pc, #4	@ (adr r0, 801b8a0 <_scanf_float+0xe4>)
 801b89c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b8a0:	0801b95b 	.word	0x0801b95b
 801b8a4:	0801b823 	.word	0x0801b823
 801b8a8:	0801b95b 	.word	0x0801b95b
 801b8ac:	0801b9eb 	.word	0x0801b9eb
 801b8b0:	0801b823 	.word	0x0801b823
 801b8b4:	0801b8fd 	.word	0x0801b8fd
 801b8b8:	0801b941 	.word	0x0801b941
 801b8bc:	0801b941 	.word	0x0801b941
 801b8c0:	0801b941 	.word	0x0801b941
 801b8c4:	0801b941 	.word	0x0801b941
 801b8c8:	0801b941 	.word	0x0801b941
 801b8cc:	0801b941 	.word	0x0801b941
 801b8d0:	0801b941 	.word	0x0801b941
 801b8d4:	0801b941 	.word	0x0801b941
 801b8d8:	0801b941 	.word	0x0801b941
 801b8dc:	2b6e      	cmp	r3, #110	@ 0x6e
 801b8de:	d809      	bhi.n	801b8f4 <_scanf_float+0x138>
 801b8e0:	2b60      	cmp	r3, #96	@ 0x60
 801b8e2:	d8b1      	bhi.n	801b848 <_scanf_float+0x8c>
 801b8e4:	2b54      	cmp	r3, #84	@ 0x54
 801b8e6:	d07b      	beq.n	801b9e0 <_scanf_float+0x224>
 801b8e8:	2b59      	cmp	r3, #89	@ 0x59
 801b8ea:	d19a      	bne.n	801b822 <_scanf_float+0x66>
 801b8ec:	2d07      	cmp	r5, #7
 801b8ee:	d198      	bne.n	801b822 <_scanf_float+0x66>
 801b8f0:	2508      	movs	r5, #8
 801b8f2:	e02f      	b.n	801b954 <_scanf_float+0x198>
 801b8f4:	2b74      	cmp	r3, #116	@ 0x74
 801b8f6:	d073      	beq.n	801b9e0 <_scanf_float+0x224>
 801b8f8:	2b79      	cmp	r3, #121	@ 0x79
 801b8fa:	e7f6      	b.n	801b8ea <_scanf_float+0x12e>
 801b8fc:	6821      	ldr	r1, [r4, #0]
 801b8fe:	05c8      	lsls	r0, r1, #23
 801b900:	d51e      	bpl.n	801b940 <_scanf_float+0x184>
 801b902:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b906:	6021      	str	r1, [r4, #0]
 801b908:	3701      	adds	r7, #1
 801b90a:	f1bb 0f00 	cmp.w	fp, #0
 801b90e:	d003      	beq.n	801b918 <_scanf_float+0x15c>
 801b910:	3201      	adds	r2, #1
 801b912:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b916:	60a2      	str	r2, [r4, #8]
 801b918:	68a3      	ldr	r3, [r4, #8]
 801b91a:	3b01      	subs	r3, #1
 801b91c:	60a3      	str	r3, [r4, #8]
 801b91e:	6923      	ldr	r3, [r4, #16]
 801b920:	3301      	adds	r3, #1
 801b922:	6123      	str	r3, [r4, #16]
 801b924:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b928:	3b01      	subs	r3, #1
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	f8c9 3004 	str.w	r3, [r9, #4]
 801b930:	f340 8082 	ble.w	801ba38 <_scanf_float+0x27c>
 801b934:	f8d9 3000 	ldr.w	r3, [r9]
 801b938:	3301      	adds	r3, #1
 801b93a:	f8c9 3000 	str.w	r3, [r9]
 801b93e:	e762      	b.n	801b806 <_scanf_float+0x4a>
 801b940:	eb1a 0105 	adds.w	r1, sl, r5
 801b944:	f47f af6d 	bne.w	801b822 <_scanf_float+0x66>
 801b948:	6822      	ldr	r2, [r4, #0]
 801b94a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b94e:	6022      	str	r2, [r4, #0]
 801b950:	460d      	mov	r5, r1
 801b952:	468a      	mov	sl, r1
 801b954:	f806 3b01 	strb.w	r3, [r6], #1
 801b958:	e7de      	b.n	801b918 <_scanf_float+0x15c>
 801b95a:	6822      	ldr	r2, [r4, #0]
 801b95c:	0610      	lsls	r0, r2, #24
 801b95e:	f57f af60 	bpl.w	801b822 <_scanf_float+0x66>
 801b962:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b966:	6022      	str	r2, [r4, #0]
 801b968:	e7f4      	b.n	801b954 <_scanf_float+0x198>
 801b96a:	f1ba 0f00 	cmp.w	sl, #0
 801b96e:	d10c      	bne.n	801b98a <_scanf_float+0x1ce>
 801b970:	b977      	cbnz	r7, 801b990 <_scanf_float+0x1d4>
 801b972:	6822      	ldr	r2, [r4, #0]
 801b974:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b978:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b97c:	d108      	bne.n	801b990 <_scanf_float+0x1d4>
 801b97e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b982:	6022      	str	r2, [r4, #0]
 801b984:	f04f 0a01 	mov.w	sl, #1
 801b988:	e7e4      	b.n	801b954 <_scanf_float+0x198>
 801b98a:	f1ba 0f02 	cmp.w	sl, #2
 801b98e:	d050      	beq.n	801ba32 <_scanf_float+0x276>
 801b990:	2d01      	cmp	r5, #1
 801b992:	d002      	beq.n	801b99a <_scanf_float+0x1de>
 801b994:	2d04      	cmp	r5, #4
 801b996:	f47f af44 	bne.w	801b822 <_scanf_float+0x66>
 801b99a:	3501      	adds	r5, #1
 801b99c:	b2ed      	uxtb	r5, r5
 801b99e:	e7d9      	b.n	801b954 <_scanf_float+0x198>
 801b9a0:	f1ba 0f01 	cmp.w	sl, #1
 801b9a4:	f47f af3d 	bne.w	801b822 <_scanf_float+0x66>
 801b9a8:	f04f 0a02 	mov.w	sl, #2
 801b9ac:	e7d2      	b.n	801b954 <_scanf_float+0x198>
 801b9ae:	b975      	cbnz	r5, 801b9ce <_scanf_float+0x212>
 801b9b0:	2f00      	cmp	r7, #0
 801b9b2:	f47f af37 	bne.w	801b824 <_scanf_float+0x68>
 801b9b6:	6822      	ldr	r2, [r4, #0]
 801b9b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b9bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b9c0:	f040 8103 	bne.w	801bbca <_scanf_float+0x40e>
 801b9c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b9c8:	6022      	str	r2, [r4, #0]
 801b9ca:	2501      	movs	r5, #1
 801b9cc:	e7c2      	b.n	801b954 <_scanf_float+0x198>
 801b9ce:	2d03      	cmp	r5, #3
 801b9d0:	d0e3      	beq.n	801b99a <_scanf_float+0x1de>
 801b9d2:	2d05      	cmp	r5, #5
 801b9d4:	e7df      	b.n	801b996 <_scanf_float+0x1da>
 801b9d6:	2d02      	cmp	r5, #2
 801b9d8:	f47f af23 	bne.w	801b822 <_scanf_float+0x66>
 801b9dc:	2503      	movs	r5, #3
 801b9de:	e7b9      	b.n	801b954 <_scanf_float+0x198>
 801b9e0:	2d06      	cmp	r5, #6
 801b9e2:	f47f af1e 	bne.w	801b822 <_scanf_float+0x66>
 801b9e6:	2507      	movs	r5, #7
 801b9e8:	e7b4      	b.n	801b954 <_scanf_float+0x198>
 801b9ea:	6822      	ldr	r2, [r4, #0]
 801b9ec:	0591      	lsls	r1, r2, #22
 801b9ee:	f57f af18 	bpl.w	801b822 <_scanf_float+0x66>
 801b9f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b9f6:	6022      	str	r2, [r4, #0]
 801b9f8:	9702      	str	r7, [sp, #8]
 801b9fa:	e7ab      	b.n	801b954 <_scanf_float+0x198>
 801b9fc:	6822      	ldr	r2, [r4, #0]
 801b9fe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801ba02:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801ba06:	d005      	beq.n	801ba14 <_scanf_float+0x258>
 801ba08:	0550      	lsls	r0, r2, #21
 801ba0a:	f57f af0a 	bpl.w	801b822 <_scanf_float+0x66>
 801ba0e:	2f00      	cmp	r7, #0
 801ba10:	f000 80db 	beq.w	801bbca <_scanf_float+0x40e>
 801ba14:	0591      	lsls	r1, r2, #22
 801ba16:	bf58      	it	pl
 801ba18:	9902      	ldrpl	r1, [sp, #8]
 801ba1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ba1e:	bf58      	it	pl
 801ba20:	1a79      	subpl	r1, r7, r1
 801ba22:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801ba26:	bf58      	it	pl
 801ba28:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ba2c:	6022      	str	r2, [r4, #0]
 801ba2e:	2700      	movs	r7, #0
 801ba30:	e790      	b.n	801b954 <_scanf_float+0x198>
 801ba32:	f04f 0a03 	mov.w	sl, #3
 801ba36:	e78d      	b.n	801b954 <_scanf_float+0x198>
 801ba38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ba3c:	4649      	mov	r1, r9
 801ba3e:	4640      	mov	r0, r8
 801ba40:	4798      	blx	r3
 801ba42:	2800      	cmp	r0, #0
 801ba44:	f43f aedf 	beq.w	801b806 <_scanf_float+0x4a>
 801ba48:	e6eb      	b.n	801b822 <_scanf_float+0x66>
 801ba4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ba4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ba52:	464a      	mov	r2, r9
 801ba54:	4640      	mov	r0, r8
 801ba56:	4798      	blx	r3
 801ba58:	6923      	ldr	r3, [r4, #16]
 801ba5a:	3b01      	subs	r3, #1
 801ba5c:	6123      	str	r3, [r4, #16]
 801ba5e:	e6eb      	b.n	801b838 <_scanf_float+0x7c>
 801ba60:	1e6b      	subs	r3, r5, #1
 801ba62:	2b06      	cmp	r3, #6
 801ba64:	d824      	bhi.n	801bab0 <_scanf_float+0x2f4>
 801ba66:	2d02      	cmp	r5, #2
 801ba68:	d836      	bhi.n	801bad8 <_scanf_float+0x31c>
 801ba6a:	9b01      	ldr	r3, [sp, #4]
 801ba6c:	429e      	cmp	r6, r3
 801ba6e:	f67f aee7 	bls.w	801b840 <_scanf_float+0x84>
 801ba72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ba76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ba7a:	464a      	mov	r2, r9
 801ba7c:	4640      	mov	r0, r8
 801ba7e:	4798      	blx	r3
 801ba80:	6923      	ldr	r3, [r4, #16]
 801ba82:	3b01      	subs	r3, #1
 801ba84:	6123      	str	r3, [r4, #16]
 801ba86:	e7f0      	b.n	801ba6a <_scanf_float+0x2ae>
 801ba88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ba8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801ba90:	464a      	mov	r2, r9
 801ba92:	4640      	mov	r0, r8
 801ba94:	4798      	blx	r3
 801ba96:	6923      	ldr	r3, [r4, #16]
 801ba98:	3b01      	subs	r3, #1
 801ba9a:	6123      	str	r3, [r4, #16]
 801ba9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801baa0:	fa5f fa8a 	uxtb.w	sl, sl
 801baa4:	f1ba 0f02 	cmp.w	sl, #2
 801baa8:	d1ee      	bne.n	801ba88 <_scanf_float+0x2cc>
 801baaa:	3d03      	subs	r5, #3
 801baac:	b2ed      	uxtb	r5, r5
 801baae:	1b76      	subs	r6, r6, r5
 801bab0:	6823      	ldr	r3, [r4, #0]
 801bab2:	05da      	lsls	r2, r3, #23
 801bab4:	d530      	bpl.n	801bb18 <_scanf_float+0x35c>
 801bab6:	055b      	lsls	r3, r3, #21
 801bab8:	d511      	bpl.n	801bade <_scanf_float+0x322>
 801baba:	9b01      	ldr	r3, [sp, #4]
 801babc:	429e      	cmp	r6, r3
 801babe:	f67f aebf 	bls.w	801b840 <_scanf_float+0x84>
 801bac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801baca:	464a      	mov	r2, r9
 801bacc:	4640      	mov	r0, r8
 801bace:	4798      	blx	r3
 801bad0:	6923      	ldr	r3, [r4, #16]
 801bad2:	3b01      	subs	r3, #1
 801bad4:	6123      	str	r3, [r4, #16]
 801bad6:	e7f0      	b.n	801baba <_scanf_float+0x2fe>
 801bad8:	46aa      	mov	sl, r5
 801bada:	46b3      	mov	fp, r6
 801badc:	e7de      	b.n	801ba9c <_scanf_float+0x2e0>
 801bade:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bae2:	6923      	ldr	r3, [r4, #16]
 801bae4:	2965      	cmp	r1, #101	@ 0x65
 801bae6:	f103 33ff 	add.w	r3, r3, #4294967295
 801baea:	f106 35ff 	add.w	r5, r6, #4294967295
 801baee:	6123      	str	r3, [r4, #16]
 801baf0:	d00c      	beq.n	801bb0c <_scanf_float+0x350>
 801baf2:	2945      	cmp	r1, #69	@ 0x45
 801baf4:	d00a      	beq.n	801bb0c <_scanf_float+0x350>
 801baf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bafa:	464a      	mov	r2, r9
 801bafc:	4640      	mov	r0, r8
 801bafe:	4798      	blx	r3
 801bb00:	6923      	ldr	r3, [r4, #16]
 801bb02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bb06:	3b01      	subs	r3, #1
 801bb08:	1eb5      	subs	r5, r6, #2
 801bb0a:	6123      	str	r3, [r4, #16]
 801bb0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bb10:	464a      	mov	r2, r9
 801bb12:	4640      	mov	r0, r8
 801bb14:	4798      	blx	r3
 801bb16:	462e      	mov	r6, r5
 801bb18:	6822      	ldr	r2, [r4, #0]
 801bb1a:	f012 0210 	ands.w	r2, r2, #16
 801bb1e:	d001      	beq.n	801bb24 <_scanf_float+0x368>
 801bb20:	2000      	movs	r0, #0
 801bb22:	e68e      	b.n	801b842 <_scanf_float+0x86>
 801bb24:	7032      	strb	r2, [r6, #0]
 801bb26:	6823      	ldr	r3, [r4, #0]
 801bb28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801bb2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801bb30:	d125      	bne.n	801bb7e <_scanf_float+0x3c2>
 801bb32:	9b02      	ldr	r3, [sp, #8]
 801bb34:	429f      	cmp	r7, r3
 801bb36:	d00a      	beq.n	801bb4e <_scanf_float+0x392>
 801bb38:	1bda      	subs	r2, r3, r7
 801bb3a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801bb3e:	429e      	cmp	r6, r3
 801bb40:	bf28      	it	cs
 801bb42:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801bb46:	4922      	ldr	r1, [pc, #136]	@ (801bbd0 <_scanf_float+0x414>)
 801bb48:	4630      	mov	r0, r6
 801bb4a:	f000 f97f 	bl	801be4c <siprintf>
 801bb4e:	9901      	ldr	r1, [sp, #4]
 801bb50:	2200      	movs	r2, #0
 801bb52:	4640      	mov	r0, r8
 801bb54:	f002 fe48 	bl	801e7e8 <_strtod_r>
 801bb58:	9b03      	ldr	r3, [sp, #12]
 801bb5a:	6821      	ldr	r1, [r4, #0]
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	f011 0f02 	tst.w	r1, #2
 801bb62:	ec57 6b10 	vmov	r6, r7, d0
 801bb66:	f103 0204 	add.w	r2, r3, #4
 801bb6a:	d015      	beq.n	801bb98 <_scanf_float+0x3dc>
 801bb6c:	9903      	ldr	r1, [sp, #12]
 801bb6e:	600a      	str	r2, [r1, #0]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	e9c3 6700 	strd	r6, r7, [r3]
 801bb76:	68e3      	ldr	r3, [r4, #12]
 801bb78:	3301      	adds	r3, #1
 801bb7a:	60e3      	str	r3, [r4, #12]
 801bb7c:	e7d0      	b.n	801bb20 <_scanf_float+0x364>
 801bb7e:	9b04      	ldr	r3, [sp, #16]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d0e4      	beq.n	801bb4e <_scanf_float+0x392>
 801bb84:	9905      	ldr	r1, [sp, #20]
 801bb86:	230a      	movs	r3, #10
 801bb88:	3101      	adds	r1, #1
 801bb8a:	4640      	mov	r0, r8
 801bb8c:	f7ff f872 	bl	801ac74 <_strtol_r>
 801bb90:	9b04      	ldr	r3, [sp, #16]
 801bb92:	9e05      	ldr	r6, [sp, #20]
 801bb94:	1ac2      	subs	r2, r0, r3
 801bb96:	e7d0      	b.n	801bb3a <_scanf_float+0x37e>
 801bb98:	f011 0f04 	tst.w	r1, #4
 801bb9c:	9903      	ldr	r1, [sp, #12]
 801bb9e:	600a      	str	r2, [r1, #0]
 801bba0:	d1e6      	bne.n	801bb70 <_scanf_float+0x3b4>
 801bba2:	681d      	ldr	r5, [r3, #0]
 801bba4:	4632      	mov	r2, r6
 801bba6:	463b      	mov	r3, r7
 801bba8:	4630      	mov	r0, r6
 801bbaa:	4639      	mov	r1, r7
 801bbac:	f7e4 ffce 	bl	8000b4c <__aeabi_dcmpun>
 801bbb0:	b128      	cbz	r0, 801bbbe <_scanf_float+0x402>
 801bbb2:	4808      	ldr	r0, [pc, #32]	@ (801bbd4 <_scanf_float+0x418>)
 801bbb4:	f7fd fd8a 	bl	80196cc <nanf>
 801bbb8:	ed85 0a00 	vstr	s0, [r5]
 801bbbc:	e7db      	b.n	801bb76 <_scanf_float+0x3ba>
 801bbbe:	4630      	mov	r0, r6
 801bbc0:	4639      	mov	r1, r7
 801bbc2:	f7e5 f821 	bl	8000c08 <__aeabi_d2f>
 801bbc6:	6028      	str	r0, [r5, #0]
 801bbc8:	e7d5      	b.n	801bb76 <_scanf_float+0x3ba>
 801bbca:	2700      	movs	r7, #0
 801bbcc:	e62e      	b.n	801b82c <_scanf_float+0x70>
 801bbce:	bf00      	nop
 801bbd0:	0802216f 	.word	0x0802216f
 801bbd4:	080221af 	.word	0x080221af

0801bbd8 <std>:
 801bbd8:	2300      	movs	r3, #0
 801bbda:	b510      	push	{r4, lr}
 801bbdc:	4604      	mov	r4, r0
 801bbde:	e9c0 3300 	strd	r3, r3, [r0]
 801bbe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bbe6:	6083      	str	r3, [r0, #8]
 801bbe8:	8181      	strh	r1, [r0, #12]
 801bbea:	6643      	str	r3, [r0, #100]	@ 0x64
 801bbec:	81c2      	strh	r2, [r0, #14]
 801bbee:	6183      	str	r3, [r0, #24]
 801bbf0:	4619      	mov	r1, r3
 801bbf2:	2208      	movs	r2, #8
 801bbf4:	305c      	adds	r0, #92	@ 0x5c
 801bbf6:	f000 faa7 	bl	801c148 <memset>
 801bbfa:	4b0d      	ldr	r3, [pc, #52]	@ (801bc30 <std+0x58>)
 801bbfc:	6263      	str	r3, [r4, #36]	@ 0x24
 801bbfe:	4b0d      	ldr	r3, [pc, #52]	@ (801bc34 <std+0x5c>)
 801bc00:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bc02:	4b0d      	ldr	r3, [pc, #52]	@ (801bc38 <std+0x60>)
 801bc04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bc06:	4b0d      	ldr	r3, [pc, #52]	@ (801bc3c <std+0x64>)
 801bc08:	6323      	str	r3, [r4, #48]	@ 0x30
 801bc0a:	4b0d      	ldr	r3, [pc, #52]	@ (801bc40 <std+0x68>)
 801bc0c:	6224      	str	r4, [r4, #32]
 801bc0e:	429c      	cmp	r4, r3
 801bc10:	d006      	beq.n	801bc20 <std+0x48>
 801bc12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bc16:	4294      	cmp	r4, r2
 801bc18:	d002      	beq.n	801bc20 <std+0x48>
 801bc1a:	33d0      	adds	r3, #208	@ 0xd0
 801bc1c:	429c      	cmp	r4, r3
 801bc1e:	d105      	bne.n	801bc2c <std+0x54>
 801bc20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc28:	f000 bb7a 	b.w	801c320 <__retarget_lock_init_recursive>
 801bc2c:	bd10      	pop	{r4, pc}
 801bc2e:	bf00      	nop
 801bc30:	0801bee9 	.word	0x0801bee9
 801bc34:	0801bf0f 	.word	0x0801bf0f
 801bc38:	0801bf47 	.word	0x0801bf47
 801bc3c:	0801bf6b 	.word	0x0801bf6b
 801bc40:	2000c2f4 	.word	0x2000c2f4

0801bc44 <stdio_exit_handler>:
 801bc44:	4a02      	ldr	r2, [pc, #8]	@ (801bc50 <stdio_exit_handler+0xc>)
 801bc46:	4903      	ldr	r1, [pc, #12]	@ (801bc54 <stdio_exit_handler+0x10>)
 801bc48:	4803      	ldr	r0, [pc, #12]	@ (801bc58 <stdio_exit_handler+0x14>)
 801bc4a:	f000 b869 	b.w	801bd20 <_fwalk_sglue>
 801bc4e:	bf00      	nop
 801bc50:	20000158 	.word	0x20000158
 801bc54:	0801f1e9 	.word	0x0801f1e9
 801bc58:	20000168 	.word	0x20000168

0801bc5c <cleanup_stdio>:
 801bc5c:	6841      	ldr	r1, [r0, #4]
 801bc5e:	4b0c      	ldr	r3, [pc, #48]	@ (801bc90 <cleanup_stdio+0x34>)
 801bc60:	4299      	cmp	r1, r3
 801bc62:	b510      	push	{r4, lr}
 801bc64:	4604      	mov	r4, r0
 801bc66:	d001      	beq.n	801bc6c <cleanup_stdio+0x10>
 801bc68:	f003 fabe 	bl	801f1e8 <_fflush_r>
 801bc6c:	68a1      	ldr	r1, [r4, #8]
 801bc6e:	4b09      	ldr	r3, [pc, #36]	@ (801bc94 <cleanup_stdio+0x38>)
 801bc70:	4299      	cmp	r1, r3
 801bc72:	d002      	beq.n	801bc7a <cleanup_stdio+0x1e>
 801bc74:	4620      	mov	r0, r4
 801bc76:	f003 fab7 	bl	801f1e8 <_fflush_r>
 801bc7a:	68e1      	ldr	r1, [r4, #12]
 801bc7c:	4b06      	ldr	r3, [pc, #24]	@ (801bc98 <cleanup_stdio+0x3c>)
 801bc7e:	4299      	cmp	r1, r3
 801bc80:	d004      	beq.n	801bc8c <cleanup_stdio+0x30>
 801bc82:	4620      	mov	r0, r4
 801bc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc88:	f003 baae 	b.w	801f1e8 <_fflush_r>
 801bc8c:	bd10      	pop	{r4, pc}
 801bc8e:	bf00      	nop
 801bc90:	2000c2f4 	.word	0x2000c2f4
 801bc94:	2000c35c 	.word	0x2000c35c
 801bc98:	2000c3c4 	.word	0x2000c3c4

0801bc9c <global_stdio_init.part.0>:
 801bc9c:	b510      	push	{r4, lr}
 801bc9e:	4b0b      	ldr	r3, [pc, #44]	@ (801bccc <global_stdio_init.part.0+0x30>)
 801bca0:	4c0b      	ldr	r4, [pc, #44]	@ (801bcd0 <global_stdio_init.part.0+0x34>)
 801bca2:	4a0c      	ldr	r2, [pc, #48]	@ (801bcd4 <global_stdio_init.part.0+0x38>)
 801bca4:	601a      	str	r2, [r3, #0]
 801bca6:	4620      	mov	r0, r4
 801bca8:	2200      	movs	r2, #0
 801bcaa:	2104      	movs	r1, #4
 801bcac:	f7ff ff94 	bl	801bbd8 <std>
 801bcb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801bcb4:	2201      	movs	r2, #1
 801bcb6:	2109      	movs	r1, #9
 801bcb8:	f7ff ff8e 	bl	801bbd8 <std>
 801bcbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801bcc0:	2202      	movs	r2, #2
 801bcc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcc6:	2112      	movs	r1, #18
 801bcc8:	f7ff bf86 	b.w	801bbd8 <std>
 801bccc:	2000c42c 	.word	0x2000c42c
 801bcd0:	2000c2f4 	.word	0x2000c2f4
 801bcd4:	0801bc45 	.word	0x0801bc45

0801bcd8 <__sfp_lock_acquire>:
 801bcd8:	4801      	ldr	r0, [pc, #4]	@ (801bce0 <__sfp_lock_acquire+0x8>)
 801bcda:	f000 bb22 	b.w	801c322 <__retarget_lock_acquire_recursive>
 801bcde:	bf00      	nop
 801bce0:	2000c435 	.word	0x2000c435

0801bce4 <__sfp_lock_release>:
 801bce4:	4801      	ldr	r0, [pc, #4]	@ (801bcec <__sfp_lock_release+0x8>)
 801bce6:	f000 bb1d 	b.w	801c324 <__retarget_lock_release_recursive>
 801bcea:	bf00      	nop
 801bcec:	2000c435 	.word	0x2000c435

0801bcf0 <__sinit>:
 801bcf0:	b510      	push	{r4, lr}
 801bcf2:	4604      	mov	r4, r0
 801bcf4:	f7ff fff0 	bl	801bcd8 <__sfp_lock_acquire>
 801bcf8:	6a23      	ldr	r3, [r4, #32]
 801bcfa:	b11b      	cbz	r3, 801bd04 <__sinit+0x14>
 801bcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd00:	f7ff bff0 	b.w	801bce4 <__sfp_lock_release>
 801bd04:	4b04      	ldr	r3, [pc, #16]	@ (801bd18 <__sinit+0x28>)
 801bd06:	6223      	str	r3, [r4, #32]
 801bd08:	4b04      	ldr	r3, [pc, #16]	@ (801bd1c <__sinit+0x2c>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d1f5      	bne.n	801bcfc <__sinit+0xc>
 801bd10:	f7ff ffc4 	bl	801bc9c <global_stdio_init.part.0>
 801bd14:	e7f2      	b.n	801bcfc <__sinit+0xc>
 801bd16:	bf00      	nop
 801bd18:	0801bc5d 	.word	0x0801bc5d
 801bd1c:	2000c42c 	.word	0x2000c42c

0801bd20 <_fwalk_sglue>:
 801bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd24:	4607      	mov	r7, r0
 801bd26:	4688      	mov	r8, r1
 801bd28:	4614      	mov	r4, r2
 801bd2a:	2600      	movs	r6, #0
 801bd2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bd30:	f1b9 0901 	subs.w	r9, r9, #1
 801bd34:	d505      	bpl.n	801bd42 <_fwalk_sglue+0x22>
 801bd36:	6824      	ldr	r4, [r4, #0]
 801bd38:	2c00      	cmp	r4, #0
 801bd3a:	d1f7      	bne.n	801bd2c <_fwalk_sglue+0xc>
 801bd3c:	4630      	mov	r0, r6
 801bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd42:	89ab      	ldrh	r3, [r5, #12]
 801bd44:	2b01      	cmp	r3, #1
 801bd46:	d907      	bls.n	801bd58 <_fwalk_sglue+0x38>
 801bd48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bd4c:	3301      	adds	r3, #1
 801bd4e:	d003      	beq.n	801bd58 <_fwalk_sglue+0x38>
 801bd50:	4629      	mov	r1, r5
 801bd52:	4638      	mov	r0, r7
 801bd54:	47c0      	blx	r8
 801bd56:	4306      	orrs	r6, r0
 801bd58:	3568      	adds	r5, #104	@ 0x68
 801bd5a:	e7e9      	b.n	801bd30 <_fwalk_sglue+0x10>

0801bd5c <iprintf>:
 801bd5c:	b40f      	push	{r0, r1, r2, r3}
 801bd5e:	b507      	push	{r0, r1, r2, lr}
 801bd60:	4906      	ldr	r1, [pc, #24]	@ (801bd7c <iprintf+0x20>)
 801bd62:	ab04      	add	r3, sp, #16
 801bd64:	6808      	ldr	r0, [r1, #0]
 801bd66:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd6a:	6881      	ldr	r1, [r0, #8]
 801bd6c:	9301      	str	r3, [sp, #4]
 801bd6e:	f7ff fa77 	bl	801b260 <_vfiprintf_r>
 801bd72:	b003      	add	sp, #12
 801bd74:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd78:	b004      	add	sp, #16
 801bd7a:	4770      	bx	lr
 801bd7c:	20000164 	.word	0x20000164

0801bd80 <putchar>:
 801bd80:	4b02      	ldr	r3, [pc, #8]	@ (801bd8c <putchar+0xc>)
 801bd82:	4601      	mov	r1, r0
 801bd84:	6818      	ldr	r0, [r3, #0]
 801bd86:	6882      	ldr	r2, [r0, #8]
 801bd88:	f003 baca 	b.w	801f320 <_putc_r>
 801bd8c:	20000164 	.word	0x20000164

0801bd90 <_puts_r>:
 801bd90:	6a03      	ldr	r3, [r0, #32]
 801bd92:	b570      	push	{r4, r5, r6, lr}
 801bd94:	6884      	ldr	r4, [r0, #8]
 801bd96:	4605      	mov	r5, r0
 801bd98:	460e      	mov	r6, r1
 801bd9a:	b90b      	cbnz	r3, 801bda0 <_puts_r+0x10>
 801bd9c:	f7ff ffa8 	bl	801bcf0 <__sinit>
 801bda0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bda2:	07db      	lsls	r3, r3, #31
 801bda4:	d405      	bmi.n	801bdb2 <_puts_r+0x22>
 801bda6:	89a3      	ldrh	r3, [r4, #12]
 801bda8:	0598      	lsls	r0, r3, #22
 801bdaa:	d402      	bmi.n	801bdb2 <_puts_r+0x22>
 801bdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdae:	f000 fab8 	bl	801c322 <__retarget_lock_acquire_recursive>
 801bdb2:	89a3      	ldrh	r3, [r4, #12]
 801bdb4:	0719      	lsls	r1, r3, #28
 801bdb6:	d502      	bpl.n	801bdbe <_puts_r+0x2e>
 801bdb8:	6923      	ldr	r3, [r4, #16]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d135      	bne.n	801be2a <_puts_r+0x9a>
 801bdbe:	4621      	mov	r1, r4
 801bdc0:	4628      	mov	r0, r5
 801bdc2:	f000 f951 	bl	801c068 <__swsetup_r>
 801bdc6:	b380      	cbz	r0, 801be2a <_puts_r+0x9a>
 801bdc8:	f04f 35ff 	mov.w	r5, #4294967295
 801bdcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bdce:	07da      	lsls	r2, r3, #31
 801bdd0:	d405      	bmi.n	801bdde <_puts_r+0x4e>
 801bdd2:	89a3      	ldrh	r3, [r4, #12]
 801bdd4:	059b      	lsls	r3, r3, #22
 801bdd6:	d402      	bmi.n	801bdde <_puts_r+0x4e>
 801bdd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdda:	f000 faa3 	bl	801c324 <__retarget_lock_release_recursive>
 801bdde:	4628      	mov	r0, r5
 801bde0:	bd70      	pop	{r4, r5, r6, pc}
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	da04      	bge.n	801bdf0 <_puts_r+0x60>
 801bde6:	69a2      	ldr	r2, [r4, #24]
 801bde8:	429a      	cmp	r2, r3
 801bdea:	dc17      	bgt.n	801be1c <_puts_r+0x8c>
 801bdec:	290a      	cmp	r1, #10
 801bdee:	d015      	beq.n	801be1c <_puts_r+0x8c>
 801bdf0:	6823      	ldr	r3, [r4, #0]
 801bdf2:	1c5a      	adds	r2, r3, #1
 801bdf4:	6022      	str	r2, [r4, #0]
 801bdf6:	7019      	strb	r1, [r3, #0]
 801bdf8:	68a3      	ldr	r3, [r4, #8]
 801bdfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bdfe:	3b01      	subs	r3, #1
 801be00:	60a3      	str	r3, [r4, #8]
 801be02:	2900      	cmp	r1, #0
 801be04:	d1ed      	bne.n	801bde2 <_puts_r+0x52>
 801be06:	2b00      	cmp	r3, #0
 801be08:	da11      	bge.n	801be2e <_puts_r+0x9e>
 801be0a:	4622      	mov	r2, r4
 801be0c:	210a      	movs	r1, #10
 801be0e:	4628      	mov	r0, r5
 801be10:	f000 f8ec 	bl	801bfec <__swbuf_r>
 801be14:	3001      	adds	r0, #1
 801be16:	d0d7      	beq.n	801bdc8 <_puts_r+0x38>
 801be18:	250a      	movs	r5, #10
 801be1a:	e7d7      	b.n	801bdcc <_puts_r+0x3c>
 801be1c:	4622      	mov	r2, r4
 801be1e:	4628      	mov	r0, r5
 801be20:	f000 f8e4 	bl	801bfec <__swbuf_r>
 801be24:	3001      	adds	r0, #1
 801be26:	d1e7      	bne.n	801bdf8 <_puts_r+0x68>
 801be28:	e7ce      	b.n	801bdc8 <_puts_r+0x38>
 801be2a:	3e01      	subs	r6, #1
 801be2c:	e7e4      	b.n	801bdf8 <_puts_r+0x68>
 801be2e:	6823      	ldr	r3, [r4, #0]
 801be30:	1c5a      	adds	r2, r3, #1
 801be32:	6022      	str	r2, [r4, #0]
 801be34:	220a      	movs	r2, #10
 801be36:	701a      	strb	r2, [r3, #0]
 801be38:	e7ee      	b.n	801be18 <_puts_r+0x88>
	...

0801be3c <puts>:
 801be3c:	4b02      	ldr	r3, [pc, #8]	@ (801be48 <puts+0xc>)
 801be3e:	4601      	mov	r1, r0
 801be40:	6818      	ldr	r0, [r3, #0]
 801be42:	f7ff bfa5 	b.w	801bd90 <_puts_r>
 801be46:	bf00      	nop
 801be48:	20000164 	.word	0x20000164

0801be4c <siprintf>:
 801be4c:	b40e      	push	{r1, r2, r3}
 801be4e:	b510      	push	{r4, lr}
 801be50:	b09d      	sub	sp, #116	@ 0x74
 801be52:	ab1f      	add	r3, sp, #124	@ 0x7c
 801be54:	9002      	str	r0, [sp, #8]
 801be56:	9006      	str	r0, [sp, #24]
 801be58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801be5c:	480a      	ldr	r0, [pc, #40]	@ (801be88 <siprintf+0x3c>)
 801be5e:	9107      	str	r1, [sp, #28]
 801be60:	9104      	str	r1, [sp, #16]
 801be62:	490a      	ldr	r1, [pc, #40]	@ (801be8c <siprintf+0x40>)
 801be64:	f853 2b04 	ldr.w	r2, [r3], #4
 801be68:	9105      	str	r1, [sp, #20]
 801be6a:	2400      	movs	r4, #0
 801be6c:	a902      	add	r1, sp, #8
 801be6e:	6800      	ldr	r0, [r0, #0]
 801be70:	9301      	str	r3, [sp, #4]
 801be72:	941b      	str	r4, [sp, #108]	@ 0x6c
 801be74:	f002 fd1a 	bl	801e8ac <_svfiprintf_r>
 801be78:	9b02      	ldr	r3, [sp, #8]
 801be7a:	701c      	strb	r4, [r3, #0]
 801be7c:	b01d      	add	sp, #116	@ 0x74
 801be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be82:	b003      	add	sp, #12
 801be84:	4770      	bx	lr
 801be86:	bf00      	nop
 801be88:	20000164 	.word	0x20000164
 801be8c:	ffff0208 	.word	0xffff0208

0801be90 <siscanf>:
 801be90:	b40e      	push	{r1, r2, r3}
 801be92:	b570      	push	{r4, r5, r6, lr}
 801be94:	b09d      	sub	sp, #116	@ 0x74
 801be96:	ac21      	add	r4, sp, #132	@ 0x84
 801be98:	2500      	movs	r5, #0
 801be9a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801be9e:	f854 6b04 	ldr.w	r6, [r4], #4
 801bea2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bea6:	951b      	str	r5, [sp, #108]	@ 0x6c
 801bea8:	9002      	str	r0, [sp, #8]
 801beaa:	9006      	str	r0, [sp, #24]
 801beac:	f7e4 f9f0 	bl	8000290 <strlen>
 801beb0:	4b0b      	ldr	r3, [pc, #44]	@ (801bee0 <siscanf+0x50>)
 801beb2:	9003      	str	r0, [sp, #12]
 801beb4:	9007      	str	r0, [sp, #28]
 801beb6:	480b      	ldr	r0, [pc, #44]	@ (801bee4 <siscanf+0x54>)
 801beb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801beba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bebe:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bec2:	4632      	mov	r2, r6
 801bec4:	4623      	mov	r3, r4
 801bec6:	a902      	add	r1, sp, #8
 801bec8:	6800      	ldr	r0, [r0, #0]
 801beca:	950f      	str	r5, [sp, #60]	@ 0x3c
 801becc:	9514      	str	r5, [sp, #80]	@ 0x50
 801bece:	9401      	str	r4, [sp, #4]
 801bed0:	f002 fe42 	bl	801eb58 <__ssvfiscanf_r>
 801bed4:	b01d      	add	sp, #116	@ 0x74
 801bed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801beda:	b003      	add	sp, #12
 801bedc:	4770      	bx	lr
 801bede:	bf00      	nop
 801bee0:	0801bf0b 	.word	0x0801bf0b
 801bee4:	20000164 	.word	0x20000164

0801bee8 <__sread>:
 801bee8:	b510      	push	{r4, lr}
 801beea:	460c      	mov	r4, r1
 801beec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bef0:	f000 f9c8 	bl	801c284 <_read_r>
 801bef4:	2800      	cmp	r0, #0
 801bef6:	bfab      	itete	ge
 801bef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801befa:	89a3      	ldrhlt	r3, [r4, #12]
 801befc:	181b      	addge	r3, r3, r0
 801befe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bf02:	bfac      	ite	ge
 801bf04:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bf06:	81a3      	strhlt	r3, [r4, #12]
 801bf08:	bd10      	pop	{r4, pc}

0801bf0a <__seofread>:
 801bf0a:	2000      	movs	r0, #0
 801bf0c:	4770      	bx	lr

0801bf0e <__swrite>:
 801bf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf12:	461f      	mov	r7, r3
 801bf14:	898b      	ldrh	r3, [r1, #12]
 801bf16:	05db      	lsls	r3, r3, #23
 801bf18:	4605      	mov	r5, r0
 801bf1a:	460c      	mov	r4, r1
 801bf1c:	4616      	mov	r6, r2
 801bf1e:	d505      	bpl.n	801bf2c <__swrite+0x1e>
 801bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf24:	2302      	movs	r3, #2
 801bf26:	2200      	movs	r2, #0
 801bf28:	f000 f99a 	bl	801c260 <_lseek_r>
 801bf2c:	89a3      	ldrh	r3, [r4, #12]
 801bf2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bf36:	81a3      	strh	r3, [r4, #12]
 801bf38:	4632      	mov	r2, r6
 801bf3a:	463b      	mov	r3, r7
 801bf3c:	4628      	mov	r0, r5
 801bf3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf42:	f000 b9b1 	b.w	801c2a8 <_write_r>

0801bf46 <__sseek>:
 801bf46:	b510      	push	{r4, lr}
 801bf48:	460c      	mov	r4, r1
 801bf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf4e:	f000 f987 	bl	801c260 <_lseek_r>
 801bf52:	1c43      	adds	r3, r0, #1
 801bf54:	89a3      	ldrh	r3, [r4, #12]
 801bf56:	bf15      	itete	ne
 801bf58:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bf5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bf5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bf62:	81a3      	strheq	r3, [r4, #12]
 801bf64:	bf18      	it	ne
 801bf66:	81a3      	strhne	r3, [r4, #12]
 801bf68:	bd10      	pop	{r4, pc}

0801bf6a <__sclose>:
 801bf6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf6e:	f000 b909 	b.w	801c184 <_close_r>

0801bf72 <_vsniprintf_r>:
 801bf72:	b530      	push	{r4, r5, lr}
 801bf74:	4614      	mov	r4, r2
 801bf76:	2c00      	cmp	r4, #0
 801bf78:	b09b      	sub	sp, #108	@ 0x6c
 801bf7a:	4605      	mov	r5, r0
 801bf7c:	461a      	mov	r2, r3
 801bf7e:	da05      	bge.n	801bf8c <_vsniprintf_r+0x1a>
 801bf80:	238b      	movs	r3, #139	@ 0x8b
 801bf82:	6003      	str	r3, [r0, #0]
 801bf84:	f04f 30ff 	mov.w	r0, #4294967295
 801bf88:	b01b      	add	sp, #108	@ 0x6c
 801bf8a:	bd30      	pop	{r4, r5, pc}
 801bf8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bf90:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bf94:	f04f 0300 	mov.w	r3, #0
 801bf98:	9319      	str	r3, [sp, #100]	@ 0x64
 801bf9a:	bf14      	ite	ne
 801bf9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bfa0:	4623      	moveq	r3, r4
 801bfa2:	9302      	str	r3, [sp, #8]
 801bfa4:	9305      	str	r3, [sp, #20]
 801bfa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bfaa:	9100      	str	r1, [sp, #0]
 801bfac:	9104      	str	r1, [sp, #16]
 801bfae:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bfb2:	4669      	mov	r1, sp
 801bfb4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bfb6:	f002 fc79 	bl	801e8ac <_svfiprintf_r>
 801bfba:	1c43      	adds	r3, r0, #1
 801bfbc:	bfbc      	itt	lt
 801bfbe:	238b      	movlt	r3, #139	@ 0x8b
 801bfc0:	602b      	strlt	r3, [r5, #0]
 801bfc2:	2c00      	cmp	r4, #0
 801bfc4:	d0e0      	beq.n	801bf88 <_vsniprintf_r+0x16>
 801bfc6:	9b00      	ldr	r3, [sp, #0]
 801bfc8:	2200      	movs	r2, #0
 801bfca:	701a      	strb	r2, [r3, #0]
 801bfcc:	e7dc      	b.n	801bf88 <_vsniprintf_r+0x16>
	...

0801bfd0 <vsniprintf>:
 801bfd0:	b507      	push	{r0, r1, r2, lr}
 801bfd2:	9300      	str	r3, [sp, #0]
 801bfd4:	4613      	mov	r3, r2
 801bfd6:	460a      	mov	r2, r1
 801bfd8:	4601      	mov	r1, r0
 801bfda:	4803      	ldr	r0, [pc, #12]	@ (801bfe8 <vsniprintf+0x18>)
 801bfdc:	6800      	ldr	r0, [r0, #0]
 801bfde:	f7ff ffc8 	bl	801bf72 <_vsniprintf_r>
 801bfe2:	b003      	add	sp, #12
 801bfe4:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfe8:	20000164 	.word	0x20000164

0801bfec <__swbuf_r>:
 801bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfee:	460e      	mov	r6, r1
 801bff0:	4614      	mov	r4, r2
 801bff2:	4605      	mov	r5, r0
 801bff4:	b118      	cbz	r0, 801bffe <__swbuf_r+0x12>
 801bff6:	6a03      	ldr	r3, [r0, #32]
 801bff8:	b90b      	cbnz	r3, 801bffe <__swbuf_r+0x12>
 801bffa:	f7ff fe79 	bl	801bcf0 <__sinit>
 801bffe:	69a3      	ldr	r3, [r4, #24]
 801c000:	60a3      	str	r3, [r4, #8]
 801c002:	89a3      	ldrh	r3, [r4, #12]
 801c004:	071a      	lsls	r2, r3, #28
 801c006:	d501      	bpl.n	801c00c <__swbuf_r+0x20>
 801c008:	6923      	ldr	r3, [r4, #16]
 801c00a:	b943      	cbnz	r3, 801c01e <__swbuf_r+0x32>
 801c00c:	4621      	mov	r1, r4
 801c00e:	4628      	mov	r0, r5
 801c010:	f000 f82a 	bl	801c068 <__swsetup_r>
 801c014:	b118      	cbz	r0, 801c01e <__swbuf_r+0x32>
 801c016:	f04f 37ff 	mov.w	r7, #4294967295
 801c01a:	4638      	mov	r0, r7
 801c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c01e:	6823      	ldr	r3, [r4, #0]
 801c020:	6922      	ldr	r2, [r4, #16]
 801c022:	1a98      	subs	r0, r3, r2
 801c024:	6963      	ldr	r3, [r4, #20]
 801c026:	b2f6      	uxtb	r6, r6
 801c028:	4283      	cmp	r3, r0
 801c02a:	4637      	mov	r7, r6
 801c02c:	dc05      	bgt.n	801c03a <__swbuf_r+0x4e>
 801c02e:	4621      	mov	r1, r4
 801c030:	4628      	mov	r0, r5
 801c032:	f003 f8d9 	bl	801f1e8 <_fflush_r>
 801c036:	2800      	cmp	r0, #0
 801c038:	d1ed      	bne.n	801c016 <__swbuf_r+0x2a>
 801c03a:	68a3      	ldr	r3, [r4, #8]
 801c03c:	3b01      	subs	r3, #1
 801c03e:	60a3      	str	r3, [r4, #8]
 801c040:	6823      	ldr	r3, [r4, #0]
 801c042:	1c5a      	adds	r2, r3, #1
 801c044:	6022      	str	r2, [r4, #0]
 801c046:	701e      	strb	r6, [r3, #0]
 801c048:	6962      	ldr	r2, [r4, #20]
 801c04a:	1c43      	adds	r3, r0, #1
 801c04c:	429a      	cmp	r2, r3
 801c04e:	d004      	beq.n	801c05a <__swbuf_r+0x6e>
 801c050:	89a3      	ldrh	r3, [r4, #12]
 801c052:	07db      	lsls	r3, r3, #31
 801c054:	d5e1      	bpl.n	801c01a <__swbuf_r+0x2e>
 801c056:	2e0a      	cmp	r6, #10
 801c058:	d1df      	bne.n	801c01a <__swbuf_r+0x2e>
 801c05a:	4621      	mov	r1, r4
 801c05c:	4628      	mov	r0, r5
 801c05e:	f003 f8c3 	bl	801f1e8 <_fflush_r>
 801c062:	2800      	cmp	r0, #0
 801c064:	d0d9      	beq.n	801c01a <__swbuf_r+0x2e>
 801c066:	e7d6      	b.n	801c016 <__swbuf_r+0x2a>

0801c068 <__swsetup_r>:
 801c068:	b538      	push	{r3, r4, r5, lr}
 801c06a:	4b29      	ldr	r3, [pc, #164]	@ (801c110 <__swsetup_r+0xa8>)
 801c06c:	4605      	mov	r5, r0
 801c06e:	6818      	ldr	r0, [r3, #0]
 801c070:	460c      	mov	r4, r1
 801c072:	b118      	cbz	r0, 801c07c <__swsetup_r+0x14>
 801c074:	6a03      	ldr	r3, [r0, #32]
 801c076:	b90b      	cbnz	r3, 801c07c <__swsetup_r+0x14>
 801c078:	f7ff fe3a 	bl	801bcf0 <__sinit>
 801c07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c080:	0719      	lsls	r1, r3, #28
 801c082:	d422      	bmi.n	801c0ca <__swsetup_r+0x62>
 801c084:	06da      	lsls	r2, r3, #27
 801c086:	d407      	bmi.n	801c098 <__swsetup_r+0x30>
 801c088:	2209      	movs	r2, #9
 801c08a:	602a      	str	r2, [r5, #0]
 801c08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c090:	81a3      	strh	r3, [r4, #12]
 801c092:	f04f 30ff 	mov.w	r0, #4294967295
 801c096:	e033      	b.n	801c100 <__swsetup_r+0x98>
 801c098:	0758      	lsls	r0, r3, #29
 801c09a:	d512      	bpl.n	801c0c2 <__swsetup_r+0x5a>
 801c09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c09e:	b141      	cbz	r1, 801c0b2 <__swsetup_r+0x4a>
 801c0a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c0a4:	4299      	cmp	r1, r3
 801c0a6:	d002      	beq.n	801c0ae <__swsetup_r+0x46>
 801c0a8:	4628      	mov	r0, r5
 801c0aa:	f000 ffc1 	bl	801d030 <_free_r>
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	6363      	str	r3, [r4, #52]	@ 0x34
 801c0b2:	89a3      	ldrh	r3, [r4, #12]
 801c0b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c0b8:	81a3      	strh	r3, [r4, #12]
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	6063      	str	r3, [r4, #4]
 801c0be:	6923      	ldr	r3, [r4, #16]
 801c0c0:	6023      	str	r3, [r4, #0]
 801c0c2:	89a3      	ldrh	r3, [r4, #12]
 801c0c4:	f043 0308 	orr.w	r3, r3, #8
 801c0c8:	81a3      	strh	r3, [r4, #12]
 801c0ca:	6923      	ldr	r3, [r4, #16]
 801c0cc:	b94b      	cbnz	r3, 801c0e2 <__swsetup_r+0x7a>
 801c0ce:	89a3      	ldrh	r3, [r4, #12]
 801c0d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c0d8:	d003      	beq.n	801c0e2 <__swsetup_r+0x7a>
 801c0da:	4621      	mov	r1, r4
 801c0dc:	4628      	mov	r0, r5
 801c0de:	f003 f8e3 	bl	801f2a8 <__smakebuf_r>
 801c0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0e6:	f013 0201 	ands.w	r2, r3, #1
 801c0ea:	d00a      	beq.n	801c102 <__swsetup_r+0x9a>
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	60a2      	str	r2, [r4, #8]
 801c0f0:	6962      	ldr	r2, [r4, #20]
 801c0f2:	4252      	negs	r2, r2
 801c0f4:	61a2      	str	r2, [r4, #24]
 801c0f6:	6922      	ldr	r2, [r4, #16]
 801c0f8:	b942      	cbnz	r2, 801c10c <__swsetup_r+0xa4>
 801c0fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c0fe:	d1c5      	bne.n	801c08c <__swsetup_r+0x24>
 801c100:	bd38      	pop	{r3, r4, r5, pc}
 801c102:	0799      	lsls	r1, r3, #30
 801c104:	bf58      	it	pl
 801c106:	6962      	ldrpl	r2, [r4, #20]
 801c108:	60a2      	str	r2, [r4, #8]
 801c10a:	e7f4      	b.n	801c0f6 <__swsetup_r+0x8e>
 801c10c:	2000      	movs	r0, #0
 801c10e:	e7f7      	b.n	801c100 <__swsetup_r+0x98>
 801c110:	20000164 	.word	0x20000164

0801c114 <memmove>:
 801c114:	4288      	cmp	r0, r1
 801c116:	b510      	push	{r4, lr}
 801c118:	eb01 0402 	add.w	r4, r1, r2
 801c11c:	d902      	bls.n	801c124 <memmove+0x10>
 801c11e:	4284      	cmp	r4, r0
 801c120:	4623      	mov	r3, r4
 801c122:	d807      	bhi.n	801c134 <memmove+0x20>
 801c124:	1e43      	subs	r3, r0, #1
 801c126:	42a1      	cmp	r1, r4
 801c128:	d008      	beq.n	801c13c <memmove+0x28>
 801c12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c132:	e7f8      	b.n	801c126 <memmove+0x12>
 801c134:	4402      	add	r2, r0
 801c136:	4601      	mov	r1, r0
 801c138:	428a      	cmp	r2, r1
 801c13a:	d100      	bne.n	801c13e <memmove+0x2a>
 801c13c:	bd10      	pop	{r4, pc}
 801c13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c146:	e7f7      	b.n	801c138 <memmove+0x24>

0801c148 <memset>:
 801c148:	4402      	add	r2, r0
 801c14a:	4603      	mov	r3, r0
 801c14c:	4293      	cmp	r3, r2
 801c14e:	d100      	bne.n	801c152 <memset+0xa>
 801c150:	4770      	bx	lr
 801c152:	f803 1b01 	strb.w	r1, [r3], #1
 801c156:	e7f9      	b.n	801c14c <memset+0x4>

0801c158 <strncmp>:
 801c158:	b510      	push	{r4, lr}
 801c15a:	b16a      	cbz	r2, 801c178 <strncmp+0x20>
 801c15c:	3901      	subs	r1, #1
 801c15e:	1884      	adds	r4, r0, r2
 801c160:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c164:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c168:	429a      	cmp	r2, r3
 801c16a:	d103      	bne.n	801c174 <strncmp+0x1c>
 801c16c:	42a0      	cmp	r0, r4
 801c16e:	d001      	beq.n	801c174 <strncmp+0x1c>
 801c170:	2a00      	cmp	r2, #0
 801c172:	d1f5      	bne.n	801c160 <strncmp+0x8>
 801c174:	1ad0      	subs	r0, r2, r3
 801c176:	bd10      	pop	{r4, pc}
 801c178:	4610      	mov	r0, r2
 801c17a:	e7fc      	b.n	801c176 <strncmp+0x1e>

0801c17c <_localeconv_r>:
 801c17c:	4800      	ldr	r0, [pc, #0]	@ (801c180 <_localeconv_r+0x4>)
 801c17e:	4770      	bx	lr
 801c180:	200002a4 	.word	0x200002a4

0801c184 <_close_r>:
 801c184:	b538      	push	{r3, r4, r5, lr}
 801c186:	4d06      	ldr	r5, [pc, #24]	@ (801c1a0 <_close_r+0x1c>)
 801c188:	2300      	movs	r3, #0
 801c18a:	4604      	mov	r4, r0
 801c18c:	4608      	mov	r0, r1
 801c18e:	602b      	str	r3, [r5, #0]
 801c190:	f7ef f906 	bl	800b3a0 <_close>
 801c194:	1c43      	adds	r3, r0, #1
 801c196:	d102      	bne.n	801c19e <_close_r+0x1a>
 801c198:	682b      	ldr	r3, [r5, #0]
 801c19a:	b103      	cbz	r3, 801c19e <_close_r+0x1a>
 801c19c:	6023      	str	r3, [r4, #0]
 801c19e:	bd38      	pop	{r3, r4, r5, pc}
 801c1a0:	2000c430 	.word	0x2000c430

0801c1a4 <_reclaim_reent>:
 801c1a4:	4b2d      	ldr	r3, [pc, #180]	@ (801c25c <_reclaim_reent+0xb8>)
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	4283      	cmp	r3, r0
 801c1aa:	b570      	push	{r4, r5, r6, lr}
 801c1ac:	4604      	mov	r4, r0
 801c1ae:	d053      	beq.n	801c258 <_reclaim_reent+0xb4>
 801c1b0:	69c3      	ldr	r3, [r0, #28]
 801c1b2:	b31b      	cbz	r3, 801c1fc <_reclaim_reent+0x58>
 801c1b4:	68db      	ldr	r3, [r3, #12]
 801c1b6:	b163      	cbz	r3, 801c1d2 <_reclaim_reent+0x2e>
 801c1b8:	2500      	movs	r5, #0
 801c1ba:	69e3      	ldr	r3, [r4, #28]
 801c1bc:	68db      	ldr	r3, [r3, #12]
 801c1be:	5959      	ldr	r1, [r3, r5]
 801c1c0:	b9b1      	cbnz	r1, 801c1f0 <_reclaim_reent+0x4c>
 801c1c2:	3504      	adds	r5, #4
 801c1c4:	2d80      	cmp	r5, #128	@ 0x80
 801c1c6:	d1f8      	bne.n	801c1ba <_reclaim_reent+0x16>
 801c1c8:	69e3      	ldr	r3, [r4, #28]
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	68d9      	ldr	r1, [r3, #12]
 801c1ce:	f000 ff2f 	bl	801d030 <_free_r>
 801c1d2:	69e3      	ldr	r3, [r4, #28]
 801c1d4:	6819      	ldr	r1, [r3, #0]
 801c1d6:	b111      	cbz	r1, 801c1de <_reclaim_reent+0x3a>
 801c1d8:	4620      	mov	r0, r4
 801c1da:	f000 ff29 	bl	801d030 <_free_r>
 801c1de:	69e3      	ldr	r3, [r4, #28]
 801c1e0:	689d      	ldr	r5, [r3, #8]
 801c1e2:	b15d      	cbz	r5, 801c1fc <_reclaim_reent+0x58>
 801c1e4:	4629      	mov	r1, r5
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	682d      	ldr	r5, [r5, #0]
 801c1ea:	f000 ff21 	bl	801d030 <_free_r>
 801c1ee:	e7f8      	b.n	801c1e2 <_reclaim_reent+0x3e>
 801c1f0:	680e      	ldr	r6, [r1, #0]
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	f000 ff1c 	bl	801d030 <_free_r>
 801c1f8:	4631      	mov	r1, r6
 801c1fa:	e7e1      	b.n	801c1c0 <_reclaim_reent+0x1c>
 801c1fc:	6961      	ldr	r1, [r4, #20]
 801c1fe:	b111      	cbz	r1, 801c206 <_reclaim_reent+0x62>
 801c200:	4620      	mov	r0, r4
 801c202:	f000 ff15 	bl	801d030 <_free_r>
 801c206:	69e1      	ldr	r1, [r4, #28]
 801c208:	b111      	cbz	r1, 801c210 <_reclaim_reent+0x6c>
 801c20a:	4620      	mov	r0, r4
 801c20c:	f000 ff10 	bl	801d030 <_free_r>
 801c210:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c212:	b111      	cbz	r1, 801c21a <_reclaim_reent+0x76>
 801c214:	4620      	mov	r0, r4
 801c216:	f000 ff0b 	bl	801d030 <_free_r>
 801c21a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c21c:	b111      	cbz	r1, 801c224 <_reclaim_reent+0x80>
 801c21e:	4620      	mov	r0, r4
 801c220:	f000 ff06 	bl	801d030 <_free_r>
 801c224:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c226:	b111      	cbz	r1, 801c22e <_reclaim_reent+0x8a>
 801c228:	4620      	mov	r0, r4
 801c22a:	f000 ff01 	bl	801d030 <_free_r>
 801c22e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c230:	b111      	cbz	r1, 801c238 <_reclaim_reent+0x94>
 801c232:	4620      	mov	r0, r4
 801c234:	f000 fefc 	bl	801d030 <_free_r>
 801c238:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c23a:	b111      	cbz	r1, 801c242 <_reclaim_reent+0x9e>
 801c23c:	4620      	mov	r0, r4
 801c23e:	f000 fef7 	bl	801d030 <_free_r>
 801c242:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c244:	b111      	cbz	r1, 801c24c <_reclaim_reent+0xa8>
 801c246:	4620      	mov	r0, r4
 801c248:	f000 fef2 	bl	801d030 <_free_r>
 801c24c:	6a23      	ldr	r3, [r4, #32]
 801c24e:	b11b      	cbz	r3, 801c258 <_reclaim_reent+0xb4>
 801c250:	4620      	mov	r0, r4
 801c252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c256:	4718      	bx	r3
 801c258:	bd70      	pop	{r4, r5, r6, pc}
 801c25a:	bf00      	nop
 801c25c:	20000164 	.word	0x20000164

0801c260 <_lseek_r>:
 801c260:	b538      	push	{r3, r4, r5, lr}
 801c262:	4d07      	ldr	r5, [pc, #28]	@ (801c280 <_lseek_r+0x20>)
 801c264:	4604      	mov	r4, r0
 801c266:	4608      	mov	r0, r1
 801c268:	4611      	mov	r1, r2
 801c26a:	2200      	movs	r2, #0
 801c26c:	602a      	str	r2, [r5, #0]
 801c26e:	461a      	mov	r2, r3
 801c270:	f7ef f8bd 	bl	800b3ee <_lseek>
 801c274:	1c43      	adds	r3, r0, #1
 801c276:	d102      	bne.n	801c27e <_lseek_r+0x1e>
 801c278:	682b      	ldr	r3, [r5, #0]
 801c27a:	b103      	cbz	r3, 801c27e <_lseek_r+0x1e>
 801c27c:	6023      	str	r3, [r4, #0]
 801c27e:	bd38      	pop	{r3, r4, r5, pc}
 801c280:	2000c430 	.word	0x2000c430

0801c284 <_read_r>:
 801c284:	b538      	push	{r3, r4, r5, lr}
 801c286:	4d07      	ldr	r5, [pc, #28]	@ (801c2a4 <_read_r+0x20>)
 801c288:	4604      	mov	r4, r0
 801c28a:	4608      	mov	r0, r1
 801c28c:	4611      	mov	r1, r2
 801c28e:	2200      	movs	r2, #0
 801c290:	602a      	str	r2, [r5, #0]
 801c292:	461a      	mov	r2, r3
 801c294:	f7ef f867 	bl	800b366 <_read>
 801c298:	1c43      	adds	r3, r0, #1
 801c29a:	d102      	bne.n	801c2a2 <_read_r+0x1e>
 801c29c:	682b      	ldr	r3, [r5, #0]
 801c29e:	b103      	cbz	r3, 801c2a2 <_read_r+0x1e>
 801c2a0:	6023      	str	r3, [r4, #0]
 801c2a2:	bd38      	pop	{r3, r4, r5, pc}
 801c2a4:	2000c430 	.word	0x2000c430

0801c2a8 <_write_r>:
 801c2a8:	b538      	push	{r3, r4, r5, lr}
 801c2aa:	4d07      	ldr	r5, [pc, #28]	@ (801c2c8 <_write_r+0x20>)
 801c2ac:	4604      	mov	r4, r0
 801c2ae:	4608      	mov	r0, r1
 801c2b0:	4611      	mov	r1, r2
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	602a      	str	r2, [r5, #0]
 801c2b6:	461a      	mov	r2, r3
 801c2b8:	f7ed fddc 	bl	8009e74 <_write>
 801c2bc:	1c43      	adds	r3, r0, #1
 801c2be:	d102      	bne.n	801c2c6 <_write_r+0x1e>
 801c2c0:	682b      	ldr	r3, [r5, #0]
 801c2c2:	b103      	cbz	r3, 801c2c6 <_write_r+0x1e>
 801c2c4:	6023      	str	r3, [r4, #0]
 801c2c6:	bd38      	pop	{r3, r4, r5, pc}
 801c2c8:	2000c430 	.word	0x2000c430

0801c2cc <__errno>:
 801c2cc:	4b01      	ldr	r3, [pc, #4]	@ (801c2d4 <__errno+0x8>)
 801c2ce:	6818      	ldr	r0, [r3, #0]
 801c2d0:	4770      	bx	lr
 801c2d2:	bf00      	nop
 801c2d4:	20000164 	.word	0x20000164

0801c2d8 <__libc_init_array>:
 801c2d8:	b570      	push	{r4, r5, r6, lr}
 801c2da:	4d0d      	ldr	r5, [pc, #52]	@ (801c310 <__libc_init_array+0x38>)
 801c2dc:	4c0d      	ldr	r4, [pc, #52]	@ (801c314 <__libc_init_array+0x3c>)
 801c2de:	1b64      	subs	r4, r4, r5
 801c2e0:	10a4      	asrs	r4, r4, #2
 801c2e2:	2600      	movs	r6, #0
 801c2e4:	42a6      	cmp	r6, r4
 801c2e6:	d109      	bne.n	801c2fc <__libc_init_array+0x24>
 801c2e8:	4d0b      	ldr	r5, [pc, #44]	@ (801c318 <__libc_init_array+0x40>)
 801c2ea:	4c0c      	ldr	r4, [pc, #48]	@ (801c31c <__libc_init_array+0x44>)
 801c2ec:	f003 fd2c 	bl	801fd48 <_init>
 801c2f0:	1b64      	subs	r4, r4, r5
 801c2f2:	10a4      	asrs	r4, r4, #2
 801c2f4:	2600      	movs	r6, #0
 801c2f6:	42a6      	cmp	r6, r4
 801c2f8:	d105      	bne.n	801c306 <__libc_init_array+0x2e>
 801c2fa:	bd70      	pop	{r4, r5, r6, pc}
 801c2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801c300:	4798      	blx	r3
 801c302:	3601      	adds	r6, #1
 801c304:	e7ee      	b.n	801c2e4 <__libc_init_array+0xc>
 801c306:	f855 3b04 	ldr.w	r3, [r5], #4
 801c30a:	4798      	blx	r3
 801c30c:	3601      	adds	r6, #1
 801c30e:	e7f2      	b.n	801c2f6 <__libc_init_array+0x1e>
 801c310:	08022998 	.word	0x08022998
 801c314:	08022998 	.word	0x08022998
 801c318:	08022998 	.word	0x08022998
 801c31c:	0802299c 	.word	0x0802299c

0801c320 <__retarget_lock_init_recursive>:
 801c320:	4770      	bx	lr

0801c322 <__retarget_lock_acquire_recursive>:
 801c322:	4770      	bx	lr

0801c324 <__retarget_lock_release_recursive>:
 801c324:	4770      	bx	lr

0801c326 <memcpy>:
 801c326:	440a      	add	r2, r1
 801c328:	4291      	cmp	r1, r2
 801c32a:	f100 33ff 	add.w	r3, r0, #4294967295
 801c32e:	d100      	bne.n	801c332 <memcpy+0xc>
 801c330:	4770      	bx	lr
 801c332:	b510      	push	{r4, lr}
 801c334:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c338:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c33c:	4291      	cmp	r1, r2
 801c33e:	d1f9      	bne.n	801c334 <memcpy+0xe>
 801c340:	bd10      	pop	{r4, pc}
	...

0801c344 <__assert_func>:
 801c344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c346:	4614      	mov	r4, r2
 801c348:	461a      	mov	r2, r3
 801c34a:	4b09      	ldr	r3, [pc, #36]	@ (801c370 <__assert_func+0x2c>)
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	4605      	mov	r5, r0
 801c350:	68d8      	ldr	r0, [r3, #12]
 801c352:	b14c      	cbz	r4, 801c368 <__assert_func+0x24>
 801c354:	4b07      	ldr	r3, [pc, #28]	@ (801c374 <__assert_func+0x30>)
 801c356:	9100      	str	r1, [sp, #0]
 801c358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c35c:	4906      	ldr	r1, [pc, #24]	@ (801c378 <__assert_func+0x34>)
 801c35e:	462b      	mov	r3, r5
 801c360:	f002 ff6a 	bl	801f238 <fiprintf>
 801c364:	f003 f8c0 	bl	801f4e8 <abort>
 801c368:	4b04      	ldr	r3, [pc, #16]	@ (801c37c <__assert_func+0x38>)
 801c36a:	461c      	mov	r4, r3
 801c36c:	e7f3      	b.n	801c356 <__assert_func+0x12>
 801c36e:	bf00      	nop
 801c370:	20000164 	.word	0x20000164
 801c374:	08022174 	.word	0x08022174
 801c378:	08022181 	.word	0x08022181
 801c37c:	080221af 	.word	0x080221af

0801c380 <quorem>:
 801c380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c384:	6903      	ldr	r3, [r0, #16]
 801c386:	690c      	ldr	r4, [r1, #16]
 801c388:	42a3      	cmp	r3, r4
 801c38a:	4607      	mov	r7, r0
 801c38c:	db7e      	blt.n	801c48c <quorem+0x10c>
 801c38e:	3c01      	subs	r4, #1
 801c390:	f101 0814 	add.w	r8, r1, #20
 801c394:	00a3      	lsls	r3, r4, #2
 801c396:	f100 0514 	add.w	r5, r0, #20
 801c39a:	9300      	str	r3, [sp, #0]
 801c39c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3a0:	9301      	str	r3, [sp, #4]
 801c3a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c3a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3aa:	3301      	adds	r3, #1
 801c3ac:	429a      	cmp	r2, r3
 801c3ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c3b2:	fbb2 f6f3 	udiv	r6, r2, r3
 801c3b6:	d32e      	bcc.n	801c416 <quorem+0x96>
 801c3b8:	f04f 0a00 	mov.w	sl, #0
 801c3bc:	46c4      	mov	ip, r8
 801c3be:	46ae      	mov	lr, r5
 801c3c0:	46d3      	mov	fp, sl
 801c3c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c3c6:	b298      	uxth	r0, r3
 801c3c8:	fb06 a000 	mla	r0, r6, r0, sl
 801c3cc:	0c02      	lsrs	r2, r0, #16
 801c3ce:	0c1b      	lsrs	r3, r3, #16
 801c3d0:	fb06 2303 	mla	r3, r6, r3, r2
 801c3d4:	f8de 2000 	ldr.w	r2, [lr]
 801c3d8:	b280      	uxth	r0, r0
 801c3da:	b292      	uxth	r2, r2
 801c3dc:	1a12      	subs	r2, r2, r0
 801c3de:	445a      	add	r2, fp
 801c3e0:	f8de 0000 	ldr.w	r0, [lr]
 801c3e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c3e8:	b29b      	uxth	r3, r3
 801c3ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c3ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c3f2:	b292      	uxth	r2, r2
 801c3f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c3f8:	45e1      	cmp	r9, ip
 801c3fa:	f84e 2b04 	str.w	r2, [lr], #4
 801c3fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c402:	d2de      	bcs.n	801c3c2 <quorem+0x42>
 801c404:	9b00      	ldr	r3, [sp, #0]
 801c406:	58eb      	ldr	r3, [r5, r3]
 801c408:	b92b      	cbnz	r3, 801c416 <quorem+0x96>
 801c40a:	9b01      	ldr	r3, [sp, #4]
 801c40c:	3b04      	subs	r3, #4
 801c40e:	429d      	cmp	r5, r3
 801c410:	461a      	mov	r2, r3
 801c412:	d32f      	bcc.n	801c474 <quorem+0xf4>
 801c414:	613c      	str	r4, [r7, #16]
 801c416:	4638      	mov	r0, r7
 801c418:	f001 f9c6 	bl	801d7a8 <__mcmp>
 801c41c:	2800      	cmp	r0, #0
 801c41e:	db25      	blt.n	801c46c <quorem+0xec>
 801c420:	4629      	mov	r1, r5
 801c422:	2000      	movs	r0, #0
 801c424:	f858 2b04 	ldr.w	r2, [r8], #4
 801c428:	f8d1 c000 	ldr.w	ip, [r1]
 801c42c:	fa1f fe82 	uxth.w	lr, r2
 801c430:	fa1f f38c 	uxth.w	r3, ip
 801c434:	eba3 030e 	sub.w	r3, r3, lr
 801c438:	4403      	add	r3, r0
 801c43a:	0c12      	lsrs	r2, r2, #16
 801c43c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c440:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c444:	b29b      	uxth	r3, r3
 801c446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c44a:	45c1      	cmp	r9, r8
 801c44c:	f841 3b04 	str.w	r3, [r1], #4
 801c450:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c454:	d2e6      	bcs.n	801c424 <quorem+0xa4>
 801c456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c45e:	b922      	cbnz	r2, 801c46a <quorem+0xea>
 801c460:	3b04      	subs	r3, #4
 801c462:	429d      	cmp	r5, r3
 801c464:	461a      	mov	r2, r3
 801c466:	d30b      	bcc.n	801c480 <quorem+0x100>
 801c468:	613c      	str	r4, [r7, #16]
 801c46a:	3601      	adds	r6, #1
 801c46c:	4630      	mov	r0, r6
 801c46e:	b003      	add	sp, #12
 801c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c474:	6812      	ldr	r2, [r2, #0]
 801c476:	3b04      	subs	r3, #4
 801c478:	2a00      	cmp	r2, #0
 801c47a:	d1cb      	bne.n	801c414 <quorem+0x94>
 801c47c:	3c01      	subs	r4, #1
 801c47e:	e7c6      	b.n	801c40e <quorem+0x8e>
 801c480:	6812      	ldr	r2, [r2, #0]
 801c482:	3b04      	subs	r3, #4
 801c484:	2a00      	cmp	r2, #0
 801c486:	d1ef      	bne.n	801c468 <quorem+0xe8>
 801c488:	3c01      	subs	r4, #1
 801c48a:	e7ea      	b.n	801c462 <quorem+0xe2>
 801c48c:	2000      	movs	r0, #0
 801c48e:	e7ee      	b.n	801c46e <quorem+0xee>

0801c490 <_dtoa_r>:
 801c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c494:	69c7      	ldr	r7, [r0, #28]
 801c496:	b097      	sub	sp, #92	@ 0x5c
 801c498:	ed8d 0b04 	vstr	d0, [sp, #16]
 801c49c:	ec55 4b10 	vmov	r4, r5, d0
 801c4a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c4a2:	9107      	str	r1, [sp, #28]
 801c4a4:	4681      	mov	r9, r0
 801c4a6:	920c      	str	r2, [sp, #48]	@ 0x30
 801c4a8:	9311      	str	r3, [sp, #68]	@ 0x44
 801c4aa:	b97f      	cbnz	r7, 801c4cc <_dtoa_r+0x3c>
 801c4ac:	2010      	movs	r0, #16
 801c4ae:	f000 fe09 	bl	801d0c4 <malloc>
 801c4b2:	4602      	mov	r2, r0
 801c4b4:	f8c9 001c 	str.w	r0, [r9, #28]
 801c4b8:	b920      	cbnz	r0, 801c4c4 <_dtoa_r+0x34>
 801c4ba:	4ba9      	ldr	r3, [pc, #676]	@ (801c760 <_dtoa_r+0x2d0>)
 801c4bc:	21ef      	movs	r1, #239	@ 0xef
 801c4be:	48a9      	ldr	r0, [pc, #676]	@ (801c764 <_dtoa_r+0x2d4>)
 801c4c0:	f7ff ff40 	bl	801c344 <__assert_func>
 801c4c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c4c8:	6007      	str	r7, [r0, #0]
 801c4ca:	60c7      	str	r7, [r0, #12]
 801c4cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c4d0:	6819      	ldr	r1, [r3, #0]
 801c4d2:	b159      	cbz	r1, 801c4ec <_dtoa_r+0x5c>
 801c4d4:	685a      	ldr	r2, [r3, #4]
 801c4d6:	604a      	str	r2, [r1, #4]
 801c4d8:	2301      	movs	r3, #1
 801c4da:	4093      	lsls	r3, r2
 801c4dc:	608b      	str	r3, [r1, #8]
 801c4de:	4648      	mov	r0, r9
 801c4e0:	f000 fee6 	bl	801d2b0 <_Bfree>
 801c4e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c4e8:	2200      	movs	r2, #0
 801c4ea:	601a      	str	r2, [r3, #0]
 801c4ec:	1e2b      	subs	r3, r5, #0
 801c4ee:	bfb9      	ittee	lt
 801c4f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c4f4:	9305      	strlt	r3, [sp, #20]
 801c4f6:	2300      	movge	r3, #0
 801c4f8:	6033      	strge	r3, [r6, #0]
 801c4fa:	9f05      	ldr	r7, [sp, #20]
 801c4fc:	4b9a      	ldr	r3, [pc, #616]	@ (801c768 <_dtoa_r+0x2d8>)
 801c4fe:	bfbc      	itt	lt
 801c500:	2201      	movlt	r2, #1
 801c502:	6032      	strlt	r2, [r6, #0]
 801c504:	43bb      	bics	r3, r7
 801c506:	d112      	bne.n	801c52e <_dtoa_r+0x9e>
 801c508:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c50a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c50e:	6013      	str	r3, [r2, #0]
 801c510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c514:	4323      	orrs	r3, r4
 801c516:	f000 855a 	beq.w	801cfce <_dtoa_r+0xb3e>
 801c51a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c51c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801c77c <_dtoa_r+0x2ec>
 801c520:	2b00      	cmp	r3, #0
 801c522:	f000 855c 	beq.w	801cfde <_dtoa_r+0xb4e>
 801c526:	f10a 0303 	add.w	r3, sl, #3
 801c52a:	f000 bd56 	b.w	801cfda <_dtoa_r+0xb4a>
 801c52e:	ed9d 7b04 	vldr	d7, [sp, #16]
 801c532:	2200      	movs	r2, #0
 801c534:	ec51 0b17 	vmov	r0, r1, d7
 801c538:	2300      	movs	r3, #0
 801c53a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801c53e:	f7e4 fad3 	bl	8000ae8 <__aeabi_dcmpeq>
 801c542:	4680      	mov	r8, r0
 801c544:	b158      	cbz	r0, 801c55e <_dtoa_r+0xce>
 801c546:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c548:	2301      	movs	r3, #1
 801c54a:	6013      	str	r3, [r2, #0]
 801c54c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c54e:	b113      	cbz	r3, 801c556 <_dtoa_r+0xc6>
 801c550:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c552:	4b86      	ldr	r3, [pc, #536]	@ (801c76c <_dtoa_r+0x2dc>)
 801c554:	6013      	str	r3, [r2, #0]
 801c556:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801c780 <_dtoa_r+0x2f0>
 801c55a:	f000 bd40 	b.w	801cfde <_dtoa_r+0xb4e>
 801c55e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801c562:	aa14      	add	r2, sp, #80	@ 0x50
 801c564:	a915      	add	r1, sp, #84	@ 0x54
 801c566:	4648      	mov	r0, r9
 801c568:	f001 fa3e 	bl	801d9e8 <__d2b>
 801c56c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801c570:	9002      	str	r0, [sp, #8]
 801c572:	2e00      	cmp	r6, #0
 801c574:	d078      	beq.n	801c668 <_dtoa_r+0x1d8>
 801c576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c578:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801c57c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c584:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c588:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c58c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801c590:	4619      	mov	r1, r3
 801c592:	2200      	movs	r2, #0
 801c594:	4b76      	ldr	r3, [pc, #472]	@ (801c770 <_dtoa_r+0x2e0>)
 801c596:	f7e3 fe87 	bl	80002a8 <__aeabi_dsub>
 801c59a:	a36b      	add	r3, pc, #428	@ (adr r3, 801c748 <_dtoa_r+0x2b8>)
 801c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5a0:	f7e4 f83a 	bl	8000618 <__aeabi_dmul>
 801c5a4:	a36a      	add	r3, pc, #424	@ (adr r3, 801c750 <_dtoa_r+0x2c0>)
 801c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5aa:	f7e3 fe7f 	bl	80002ac <__adddf3>
 801c5ae:	4604      	mov	r4, r0
 801c5b0:	4630      	mov	r0, r6
 801c5b2:	460d      	mov	r5, r1
 801c5b4:	f7e3 ffc6 	bl	8000544 <__aeabi_i2d>
 801c5b8:	a367      	add	r3, pc, #412	@ (adr r3, 801c758 <_dtoa_r+0x2c8>)
 801c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5be:	f7e4 f82b 	bl	8000618 <__aeabi_dmul>
 801c5c2:	4602      	mov	r2, r0
 801c5c4:	460b      	mov	r3, r1
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	4629      	mov	r1, r5
 801c5ca:	f7e3 fe6f 	bl	80002ac <__adddf3>
 801c5ce:	4604      	mov	r4, r0
 801c5d0:	460d      	mov	r5, r1
 801c5d2:	f7e4 fad1 	bl	8000b78 <__aeabi_d2iz>
 801c5d6:	2200      	movs	r2, #0
 801c5d8:	4607      	mov	r7, r0
 801c5da:	2300      	movs	r3, #0
 801c5dc:	4620      	mov	r0, r4
 801c5de:	4629      	mov	r1, r5
 801c5e0:	f7e4 fa8c 	bl	8000afc <__aeabi_dcmplt>
 801c5e4:	b140      	cbz	r0, 801c5f8 <_dtoa_r+0x168>
 801c5e6:	4638      	mov	r0, r7
 801c5e8:	f7e3 ffac 	bl	8000544 <__aeabi_i2d>
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	462b      	mov	r3, r5
 801c5f0:	f7e4 fa7a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c5f4:	b900      	cbnz	r0, 801c5f8 <_dtoa_r+0x168>
 801c5f6:	3f01      	subs	r7, #1
 801c5f8:	2f16      	cmp	r7, #22
 801c5fa:	d852      	bhi.n	801c6a2 <_dtoa_r+0x212>
 801c5fc:	4b5d      	ldr	r3, [pc, #372]	@ (801c774 <_dtoa_r+0x2e4>)
 801c5fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c60a:	f7e4 fa77 	bl	8000afc <__aeabi_dcmplt>
 801c60e:	2800      	cmp	r0, #0
 801c610:	d049      	beq.n	801c6a6 <_dtoa_r+0x216>
 801c612:	3f01      	subs	r7, #1
 801c614:	2300      	movs	r3, #0
 801c616:	9310      	str	r3, [sp, #64]	@ 0x40
 801c618:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c61a:	1b9b      	subs	r3, r3, r6
 801c61c:	1e5a      	subs	r2, r3, #1
 801c61e:	bf45      	ittet	mi
 801c620:	f1c3 0301 	rsbmi	r3, r3, #1
 801c624:	9300      	strmi	r3, [sp, #0]
 801c626:	2300      	movpl	r3, #0
 801c628:	2300      	movmi	r3, #0
 801c62a:	9206      	str	r2, [sp, #24]
 801c62c:	bf54      	ite	pl
 801c62e:	9300      	strpl	r3, [sp, #0]
 801c630:	9306      	strmi	r3, [sp, #24]
 801c632:	2f00      	cmp	r7, #0
 801c634:	db39      	blt.n	801c6aa <_dtoa_r+0x21a>
 801c636:	9b06      	ldr	r3, [sp, #24]
 801c638:	970d      	str	r7, [sp, #52]	@ 0x34
 801c63a:	443b      	add	r3, r7
 801c63c:	9306      	str	r3, [sp, #24]
 801c63e:	2300      	movs	r3, #0
 801c640:	9308      	str	r3, [sp, #32]
 801c642:	9b07      	ldr	r3, [sp, #28]
 801c644:	2b09      	cmp	r3, #9
 801c646:	d863      	bhi.n	801c710 <_dtoa_r+0x280>
 801c648:	2b05      	cmp	r3, #5
 801c64a:	bfc4      	itt	gt
 801c64c:	3b04      	subgt	r3, #4
 801c64e:	9307      	strgt	r3, [sp, #28]
 801c650:	9b07      	ldr	r3, [sp, #28]
 801c652:	f1a3 0302 	sub.w	r3, r3, #2
 801c656:	bfcc      	ite	gt
 801c658:	2400      	movgt	r4, #0
 801c65a:	2401      	movle	r4, #1
 801c65c:	2b03      	cmp	r3, #3
 801c65e:	d863      	bhi.n	801c728 <_dtoa_r+0x298>
 801c660:	e8df f003 	tbb	[pc, r3]
 801c664:	2b375452 	.word	0x2b375452
 801c668:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801c66c:	441e      	add	r6, r3
 801c66e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801c672:	2b20      	cmp	r3, #32
 801c674:	bfc1      	itttt	gt
 801c676:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801c67a:	409f      	lslgt	r7, r3
 801c67c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801c680:	fa24 f303 	lsrgt.w	r3, r4, r3
 801c684:	bfd6      	itet	le
 801c686:	f1c3 0320 	rsble	r3, r3, #32
 801c68a:	ea47 0003 	orrgt.w	r0, r7, r3
 801c68e:	fa04 f003 	lslle.w	r0, r4, r3
 801c692:	f7e3 ff47 	bl	8000524 <__aeabi_ui2d>
 801c696:	2201      	movs	r2, #1
 801c698:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801c69c:	3e01      	subs	r6, #1
 801c69e:	9212      	str	r2, [sp, #72]	@ 0x48
 801c6a0:	e776      	b.n	801c590 <_dtoa_r+0x100>
 801c6a2:	2301      	movs	r3, #1
 801c6a4:	e7b7      	b.n	801c616 <_dtoa_r+0x186>
 801c6a6:	9010      	str	r0, [sp, #64]	@ 0x40
 801c6a8:	e7b6      	b.n	801c618 <_dtoa_r+0x188>
 801c6aa:	9b00      	ldr	r3, [sp, #0]
 801c6ac:	1bdb      	subs	r3, r3, r7
 801c6ae:	9300      	str	r3, [sp, #0]
 801c6b0:	427b      	negs	r3, r7
 801c6b2:	9308      	str	r3, [sp, #32]
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c6b8:	e7c3      	b.n	801c642 <_dtoa_r+0x1b2>
 801c6ba:	2301      	movs	r3, #1
 801c6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c6be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6c0:	eb07 0b03 	add.w	fp, r7, r3
 801c6c4:	f10b 0301 	add.w	r3, fp, #1
 801c6c8:	2b01      	cmp	r3, #1
 801c6ca:	9303      	str	r3, [sp, #12]
 801c6cc:	bfb8      	it	lt
 801c6ce:	2301      	movlt	r3, #1
 801c6d0:	e006      	b.n	801c6e0 <_dtoa_r+0x250>
 801c6d2:	2301      	movs	r3, #1
 801c6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c6d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	dd28      	ble.n	801c72e <_dtoa_r+0x29e>
 801c6dc:	469b      	mov	fp, r3
 801c6de:	9303      	str	r3, [sp, #12]
 801c6e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801c6e4:	2100      	movs	r1, #0
 801c6e6:	2204      	movs	r2, #4
 801c6e8:	f102 0514 	add.w	r5, r2, #20
 801c6ec:	429d      	cmp	r5, r3
 801c6ee:	d926      	bls.n	801c73e <_dtoa_r+0x2ae>
 801c6f0:	6041      	str	r1, [r0, #4]
 801c6f2:	4648      	mov	r0, r9
 801c6f4:	f000 fd9c 	bl	801d230 <_Balloc>
 801c6f8:	4682      	mov	sl, r0
 801c6fa:	2800      	cmp	r0, #0
 801c6fc:	d142      	bne.n	801c784 <_dtoa_r+0x2f4>
 801c6fe:	4b1e      	ldr	r3, [pc, #120]	@ (801c778 <_dtoa_r+0x2e8>)
 801c700:	4602      	mov	r2, r0
 801c702:	f240 11af 	movw	r1, #431	@ 0x1af
 801c706:	e6da      	b.n	801c4be <_dtoa_r+0x2e>
 801c708:	2300      	movs	r3, #0
 801c70a:	e7e3      	b.n	801c6d4 <_dtoa_r+0x244>
 801c70c:	2300      	movs	r3, #0
 801c70e:	e7d5      	b.n	801c6bc <_dtoa_r+0x22c>
 801c710:	2401      	movs	r4, #1
 801c712:	2300      	movs	r3, #0
 801c714:	9307      	str	r3, [sp, #28]
 801c716:	9409      	str	r4, [sp, #36]	@ 0x24
 801c718:	f04f 3bff 	mov.w	fp, #4294967295
 801c71c:	2200      	movs	r2, #0
 801c71e:	f8cd b00c 	str.w	fp, [sp, #12]
 801c722:	2312      	movs	r3, #18
 801c724:	920c      	str	r2, [sp, #48]	@ 0x30
 801c726:	e7db      	b.n	801c6e0 <_dtoa_r+0x250>
 801c728:	2301      	movs	r3, #1
 801c72a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c72c:	e7f4      	b.n	801c718 <_dtoa_r+0x288>
 801c72e:	f04f 0b01 	mov.w	fp, #1
 801c732:	f8cd b00c 	str.w	fp, [sp, #12]
 801c736:	465b      	mov	r3, fp
 801c738:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801c73c:	e7d0      	b.n	801c6e0 <_dtoa_r+0x250>
 801c73e:	3101      	adds	r1, #1
 801c740:	0052      	lsls	r2, r2, #1
 801c742:	e7d1      	b.n	801c6e8 <_dtoa_r+0x258>
 801c744:	f3af 8000 	nop.w
 801c748:	636f4361 	.word	0x636f4361
 801c74c:	3fd287a7 	.word	0x3fd287a7
 801c750:	8b60c8b3 	.word	0x8b60c8b3
 801c754:	3fc68a28 	.word	0x3fc68a28
 801c758:	509f79fb 	.word	0x509f79fb
 801c75c:	3fd34413 	.word	0x3fd34413
 801c760:	080221bd 	.word	0x080221bd
 801c764:	080221d4 	.word	0x080221d4
 801c768:	7ff00000 	.word	0x7ff00000
 801c76c:	080222af 	.word	0x080222af
 801c770:	3ff80000 	.word	0x3ff80000
 801c774:	08022878 	.word	0x08022878
 801c778:	0802222c 	.word	0x0802222c
 801c77c:	080221b9 	.word	0x080221b9
 801c780:	080222ae 	.word	0x080222ae
 801c784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c788:	6018      	str	r0, [r3, #0]
 801c78a:	9b03      	ldr	r3, [sp, #12]
 801c78c:	2b0e      	cmp	r3, #14
 801c78e:	f200 80a1 	bhi.w	801c8d4 <_dtoa_r+0x444>
 801c792:	2c00      	cmp	r4, #0
 801c794:	f000 809e 	beq.w	801c8d4 <_dtoa_r+0x444>
 801c798:	2f00      	cmp	r7, #0
 801c79a:	dd33      	ble.n	801c804 <_dtoa_r+0x374>
 801c79c:	4b9c      	ldr	r3, [pc, #624]	@ (801ca10 <_dtoa_r+0x580>)
 801c79e:	f007 020f 	and.w	r2, r7, #15
 801c7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7a6:	ed93 7b00 	vldr	d7, [r3]
 801c7aa:	05f8      	lsls	r0, r7, #23
 801c7ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801c7b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801c7b4:	d516      	bpl.n	801c7e4 <_dtoa_r+0x354>
 801c7b6:	4b97      	ldr	r3, [pc, #604]	@ (801ca14 <_dtoa_r+0x584>)
 801c7b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c7bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c7c0:	f7e4 f854 	bl	800086c <__aeabi_ddiv>
 801c7c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c7c8:	f004 040f 	and.w	r4, r4, #15
 801c7cc:	2603      	movs	r6, #3
 801c7ce:	4d91      	ldr	r5, [pc, #580]	@ (801ca14 <_dtoa_r+0x584>)
 801c7d0:	b954      	cbnz	r4, 801c7e8 <_dtoa_r+0x358>
 801c7d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c7d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c7da:	f7e4 f847 	bl	800086c <__aeabi_ddiv>
 801c7de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c7e2:	e028      	b.n	801c836 <_dtoa_r+0x3a6>
 801c7e4:	2602      	movs	r6, #2
 801c7e6:	e7f2      	b.n	801c7ce <_dtoa_r+0x33e>
 801c7e8:	07e1      	lsls	r1, r4, #31
 801c7ea:	d508      	bpl.n	801c7fe <_dtoa_r+0x36e>
 801c7ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801c7f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c7f4:	f7e3 ff10 	bl	8000618 <__aeabi_dmul>
 801c7f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c7fc:	3601      	adds	r6, #1
 801c7fe:	1064      	asrs	r4, r4, #1
 801c800:	3508      	adds	r5, #8
 801c802:	e7e5      	b.n	801c7d0 <_dtoa_r+0x340>
 801c804:	f000 80af 	beq.w	801c966 <_dtoa_r+0x4d6>
 801c808:	427c      	negs	r4, r7
 801c80a:	4b81      	ldr	r3, [pc, #516]	@ (801ca10 <_dtoa_r+0x580>)
 801c80c:	4d81      	ldr	r5, [pc, #516]	@ (801ca14 <_dtoa_r+0x584>)
 801c80e:	f004 020f 	and.w	r2, r4, #15
 801c812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c81e:	f7e3 fefb 	bl	8000618 <__aeabi_dmul>
 801c822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c826:	1124      	asrs	r4, r4, #4
 801c828:	2300      	movs	r3, #0
 801c82a:	2602      	movs	r6, #2
 801c82c:	2c00      	cmp	r4, #0
 801c82e:	f040 808f 	bne.w	801c950 <_dtoa_r+0x4c0>
 801c832:	2b00      	cmp	r3, #0
 801c834:	d1d3      	bne.n	801c7de <_dtoa_r+0x34e>
 801c836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c838:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	f000 8094 	beq.w	801c96a <_dtoa_r+0x4da>
 801c842:	4b75      	ldr	r3, [pc, #468]	@ (801ca18 <_dtoa_r+0x588>)
 801c844:	2200      	movs	r2, #0
 801c846:	4620      	mov	r0, r4
 801c848:	4629      	mov	r1, r5
 801c84a:	f7e4 f957 	bl	8000afc <__aeabi_dcmplt>
 801c84e:	2800      	cmp	r0, #0
 801c850:	f000 808b 	beq.w	801c96a <_dtoa_r+0x4da>
 801c854:	9b03      	ldr	r3, [sp, #12]
 801c856:	2b00      	cmp	r3, #0
 801c858:	f000 8087 	beq.w	801c96a <_dtoa_r+0x4da>
 801c85c:	f1bb 0f00 	cmp.w	fp, #0
 801c860:	dd34      	ble.n	801c8cc <_dtoa_r+0x43c>
 801c862:	4620      	mov	r0, r4
 801c864:	4b6d      	ldr	r3, [pc, #436]	@ (801ca1c <_dtoa_r+0x58c>)
 801c866:	2200      	movs	r2, #0
 801c868:	4629      	mov	r1, r5
 801c86a:	f7e3 fed5 	bl	8000618 <__aeabi_dmul>
 801c86e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c872:	f107 38ff 	add.w	r8, r7, #4294967295
 801c876:	3601      	adds	r6, #1
 801c878:	465c      	mov	r4, fp
 801c87a:	4630      	mov	r0, r6
 801c87c:	f7e3 fe62 	bl	8000544 <__aeabi_i2d>
 801c880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c884:	f7e3 fec8 	bl	8000618 <__aeabi_dmul>
 801c888:	4b65      	ldr	r3, [pc, #404]	@ (801ca20 <_dtoa_r+0x590>)
 801c88a:	2200      	movs	r2, #0
 801c88c:	f7e3 fd0e 	bl	80002ac <__adddf3>
 801c890:	4605      	mov	r5, r0
 801c892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801c896:	2c00      	cmp	r4, #0
 801c898:	d16a      	bne.n	801c970 <_dtoa_r+0x4e0>
 801c89a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c89e:	4b61      	ldr	r3, [pc, #388]	@ (801ca24 <_dtoa_r+0x594>)
 801c8a0:	2200      	movs	r2, #0
 801c8a2:	f7e3 fd01 	bl	80002a8 <__aeabi_dsub>
 801c8a6:	4602      	mov	r2, r0
 801c8a8:	460b      	mov	r3, r1
 801c8aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c8ae:	462a      	mov	r2, r5
 801c8b0:	4633      	mov	r3, r6
 801c8b2:	f7e4 f941 	bl	8000b38 <__aeabi_dcmpgt>
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	f040 8298 	bne.w	801cdec <_dtoa_r+0x95c>
 801c8bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c8c0:	462a      	mov	r2, r5
 801c8c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801c8c6:	f7e4 f919 	bl	8000afc <__aeabi_dcmplt>
 801c8ca:	bb38      	cbnz	r0, 801c91c <_dtoa_r+0x48c>
 801c8cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801c8d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801c8d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	f2c0 8157 	blt.w	801cb8a <_dtoa_r+0x6fa>
 801c8dc:	2f0e      	cmp	r7, #14
 801c8de:	f300 8154 	bgt.w	801cb8a <_dtoa_r+0x6fa>
 801c8e2:	4b4b      	ldr	r3, [pc, #300]	@ (801ca10 <_dtoa_r+0x580>)
 801c8e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c8e8:	ed93 7b00 	vldr	d7, [r3]
 801c8ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	ed8d 7b00 	vstr	d7, [sp]
 801c8f4:	f280 80e5 	bge.w	801cac2 <_dtoa_r+0x632>
 801c8f8:	9b03      	ldr	r3, [sp, #12]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	f300 80e1 	bgt.w	801cac2 <_dtoa_r+0x632>
 801c900:	d10c      	bne.n	801c91c <_dtoa_r+0x48c>
 801c902:	4b48      	ldr	r3, [pc, #288]	@ (801ca24 <_dtoa_r+0x594>)
 801c904:	2200      	movs	r2, #0
 801c906:	ec51 0b17 	vmov	r0, r1, d7
 801c90a:	f7e3 fe85 	bl	8000618 <__aeabi_dmul>
 801c90e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c912:	f7e4 f907 	bl	8000b24 <__aeabi_dcmpge>
 801c916:	2800      	cmp	r0, #0
 801c918:	f000 8266 	beq.w	801cde8 <_dtoa_r+0x958>
 801c91c:	2400      	movs	r4, #0
 801c91e:	4625      	mov	r5, r4
 801c920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c922:	4656      	mov	r6, sl
 801c924:	ea6f 0803 	mvn.w	r8, r3
 801c928:	2700      	movs	r7, #0
 801c92a:	4621      	mov	r1, r4
 801c92c:	4648      	mov	r0, r9
 801c92e:	f000 fcbf 	bl	801d2b0 <_Bfree>
 801c932:	2d00      	cmp	r5, #0
 801c934:	f000 80bd 	beq.w	801cab2 <_dtoa_r+0x622>
 801c938:	b12f      	cbz	r7, 801c946 <_dtoa_r+0x4b6>
 801c93a:	42af      	cmp	r7, r5
 801c93c:	d003      	beq.n	801c946 <_dtoa_r+0x4b6>
 801c93e:	4639      	mov	r1, r7
 801c940:	4648      	mov	r0, r9
 801c942:	f000 fcb5 	bl	801d2b0 <_Bfree>
 801c946:	4629      	mov	r1, r5
 801c948:	4648      	mov	r0, r9
 801c94a:	f000 fcb1 	bl	801d2b0 <_Bfree>
 801c94e:	e0b0      	b.n	801cab2 <_dtoa_r+0x622>
 801c950:	07e2      	lsls	r2, r4, #31
 801c952:	d505      	bpl.n	801c960 <_dtoa_r+0x4d0>
 801c954:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c958:	f7e3 fe5e 	bl	8000618 <__aeabi_dmul>
 801c95c:	3601      	adds	r6, #1
 801c95e:	2301      	movs	r3, #1
 801c960:	1064      	asrs	r4, r4, #1
 801c962:	3508      	adds	r5, #8
 801c964:	e762      	b.n	801c82c <_dtoa_r+0x39c>
 801c966:	2602      	movs	r6, #2
 801c968:	e765      	b.n	801c836 <_dtoa_r+0x3a6>
 801c96a:	9c03      	ldr	r4, [sp, #12]
 801c96c:	46b8      	mov	r8, r7
 801c96e:	e784      	b.n	801c87a <_dtoa_r+0x3ea>
 801c970:	4b27      	ldr	r3, [pc, #156]	@ (801ca10 <_dtoa_r+0x580>)
 801c972:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c97c:	4454      	add	r4, sl
 801c97e:	2900      	cmp	r1, #0
 801c980:	d054      	beq.n	801ca2c <_dtoa_r+0x59c>
 801c982:	4929      	ldr	r1, [pc, #164]	@ (801ca28 <_dtoa_r+0x598>)
 801c984:	2000      	movs	r0, #0
 801c986:	f7e3 ff71 	bl	800086c <__aeabi_ddiv>
 801c98a:	4633      	mov	r3, r6
 801c98c:	462a      	mov	r2, r5
 801c98e:	f7e3 fc8b 	bl	80002a8 <__aeabi_dsub>
 801c992:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c996:	4656      	mov	r6, sl
 801c998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c99c:	f7e4 f8ec 	bl	8000b78 <__aeabi_d2iz>
 801c9a0:	4605      	mov	r5, r0
 801c9a2:	f7e3 fdcf 	bl	8000544 <__aeabi_i2d>
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	460b      	mov	r3, r1
 801c9aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c9ae:	f7e3 fc7b 	bl	80002a8 <__aeabi_dsub>
 801c9b2:	3530      	adds	r5, #48	@ 0x30
 801c9b4:	4602      	mov	r2, r0
 801c9b6:	460b      	mov	r3, r1
 801c9b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c9bc:	f806 5b01 	strb.w	r5, [r6], #1
 801c9c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c9c4:	f7e4 f89a 	bl	8000afc <__aeabi_dcmplt>
 801c9c8:	2800      	cmp	r0, #0
 801c9ca:	d172      	bne.n	801cab2 <_dtoa_r+0x622>
 801c9cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c9d0:	4911      	ldr	r1, [pc, #68]	@ (801ca18 <_dtoa_r+0x588>)
 801c9d2:	2000      	movs	r0, #0
 801c9d4:	f7e3 fc68 	bl	80002a8 <__aeabi_dsub>
 801c9d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c9dc:	f7e4 f88e 	bl	8000afc <__aeabi_dcmplt>
 801c9e0:	2800      	cmp	r0, #0
 801c9e2:	f040 80b4 	bne.w	801cb4e <_dtoa_r+0x6be>
 801c9e6:	42a6      	cmp	r6, r4
 801c9e8:	f43f af70 	beq.w	801c8cc <_dtoa_r+0x43c>
 801c9ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801c9f0:	4b0a      	ldr	r3, [pc, #40]	@ (801ca1c <_dtoa_r+0x58c>)
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	f7e3 fe10 	bl	8000618 <__aeabi_dmul>
 801c9f8:	4b08      	ldr	r3, [pc, #32]	@ (801ca1c <_dtoa_r+0x58c>)
 801c9fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801c9fe:	2200      	movs	r2, #0
 801ca00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca04:	f7e3 fe08 	bl	8000618 <__aeabi_dmul>
 801ca08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ca0c:	e7c4      	b.n	801c998 <_dtoa_r+0x508>
 801ca0e:	bf00      	nop
 801ca10:	08022878 	.word	0x08022878
 801ca14:	08022850 	.word	0x08022850
 801ca18:	3ff00000 	.word	0x3ff00000
 801ca1c:	40240000 	.word	0x40240000
 801ca20:	401c0000 	.word	0x401c0000
 801ca24:	40140000 	.word	0x40140000
 801ca28:	3fe00000 	.word	0x3fe00000
 801ca2c:	4631      	mov	r1, r6
 801ca2e:	4628      	mov	r0, r5
 801ca30:	f7e3 fdf2 	bl	8000618 <__aeabi_dmul>
 801ca34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ca38:	9413      	str	r4, [sp, #76]	@ 0x4c
 801ca3a:	4656      	mov	r6, sl
 801ca3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca40:	f7e4 f89a 	bl	8000b78 <__aeabi_d2iz>
 801ca44:	4605      	mov	r5, r0
 801ca46:	f7e3 fd7d 	bl	8000544 <__aeabi_i2d>
 801ca4a:	4602      	mov	r2, r0
 801ca4c:	460b      	mov	r3, r1
 801ca4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca52:	f7e3 fc29 	bl	80002a8 <__aeabi_dsub>
 801ca56:	3530      	adds	r5, #48	@ 0x30
 801ca58:	f806 5b01 	strb.w	r5, [r6], #1
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	460b      	mov	r3, r1
 801ca60:	42a6      	cmp	r6, r4
 801ca62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ca66:	f04f 0200 	mov.w	r2, #0
 801ca6a:	d124      	bne.n	801cab6 <_dtoa_r+0x626>
 801ca6c:	4baf      	ldr	r3, [pc, #700]	@ (801cd2c <_dtoa_r+0x89c>)
 801ca6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ca72:	f7e3 fc1b 	bl	80002ac <__adddf3>
 801ca76:	4602      	mov	r2, r0
 801ca78:	460b      	mov	r3, r1
 801ca7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca7e:	f7e4 f85b 	bl	8000b38 <__aeabi_dcmpgt>
 801ca82:	2800      	cmp	r0, #0
 801ca84:	d163      	bne.n	801cb4e <_dtoa_r+0x6be>
 801ca86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ca8a:	49a8      	ldr	r1, [pc, #672]	@ (801cd2c <_dtoa_r+0x89c>)
 801ca8c:	2000      	movs	r0, #0
 801ca8e:	f7e3 fc0b 	bl	80002a8 <__aeabi_dsub>
 801ca92:	4602      	mov	r2, r0
 801ca94:	460b      	mov	r3, r1
 801ca96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca9a:	f7e4 f82f 	bl	8000afc <__aeabi_dcmplt>
 801ca9e:	2800      	cmp	r0, #0
 801caa0:	f43f af14 	beq.w	801c8cc <_dtoa_r+0x43c>
 801caa4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801caa6:	1e73      	subs	r3, r6, #1
 801caa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801caaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801caae:	2b30      	cmp	r3, #48	@ 0x30
 801cab0:	d0f8      	beq.n	801caa4 <_dtoa_r+0x614>
 801cab2:	4647      	mov	r7, r8
 801cab4:	e03b      	b.n	801cb2e <_dtoa_r+0x69e>
 801cab6:	4b9e      	ldr	r3, [pc, #632]	@ (801cd30 <_dtoa_r+0x8a0>)
 801cab8:	f7e3 fdae 	bl	8000618 <__aeabi_dmul>
 801cabc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cac0:	e7bc      	b.n	801ca3c <_dtoa_r+0x5ac>
 801cac2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801cac6:	4656      	mov	r6, sl
 801cac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cacc:	4620      	mov	r0, r4
 801cace:	4629      	mov	r1, r5
 801cad0:	f7e3 fecc 	bl	800086c <__aeabi_ddiv>
 801cad4:	f7e4 f850 	bl	8000b78 <__aeabi_d2iz>
 801cad8:	4680      	mov	r8, r0
 801cada:	f7e3 fd33 	bl	8000544 <__aeabi_i2d>
 801cade:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cae2:	f7e3 fd99 	bl	8000618 <__aeabi_dmul>
 801cae6:	4602      	mov	r2, r0
 801cae8:	460b      	mov	r3, r1
 801caea:	4620      	mov	r0, r4
 801caec:	4629      	mov	r1, r5
 801caee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801caf2:	f7e3 fbd9 	bl	80002a8 <__aeabi_dsub>
 801caf6:	f806 4b01 	strb.w	r4, [r6], #1
 801cafa:	9d03      	ldr	r5, [sp, #12]
 801cafc:	eba6 040a 	sub.w	r4, r6, sl
 801cb00:	42a5      	cmp	r5, r4
 801cb02:	4602      	mov	r2, r0
 801cb04:	460b      	mov	r3, r1
 801cb06:	d133      	bne.n	801cb70 <_dtoa_r+0x6e0>
 801cb08:	f7e3 fbd0 	bl	80002ac <__adddf3>
 801cb0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cb10:	4604      	mov	r4, r0
 801cb12:	460d      	mov	r5, r1
 801cb14:	f7e4 f810 	bl	8000b38 <__aeabi_dcmpgt>
 801cb18:	b9c0      	cbnz	r0, 801cb4c <_dtoa_r+0x6bc>
 801cb1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cb1e:	4620      	mov	r0, r4
 801cb20:	4629      	mov	r1, r5
 801cb22:	f7e3 ffe1 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb26:	b110      	cbz	r0, 801cb2e <_dtoa_r+0x69e>
 801cb28:	f018 0f01 	tst.w	r8, #1
 801cb2c:	d10e      	bne.n	801cb4c <_dtoa_r+0x6bc>
 801cb2e:	9902      	ldr	r1, [sp, #8]
 801cb30:	4648      	mov	r0, r9
 801cb32:	f000 fbbd 	bl	801d2b0 <_Bfree>
 801cb36:	2300      	movs	r3, #0
 801cb38:	7033      	strb	r3, [r6, #0]
 801cb3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cb3c:	3701      	adds	r7, #1
 801cb3e:	601f      	str	r7, [r3, #0]
 801cb40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	f000 824b 	beq.w	801cfde <_dtoa_r+0xb4e>
 801cb48:	601e      	str	r6, [r3, #0]
 801cb4a:	e248      	b.n	801cfde <_dtoa_r+0xb4e>
 801cb4c:	46b8      	mov	r8, r7
 801cb4e:	4633      	mov	r3, r6
 801cb50:	461e      	mov	r6, r3
 801cb52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cb56:	2a39      	cmp	r2, #57	@ 0x39
 801cb58:	d106      	bne.n	801cb68 <_dtoa_r+0x6d8>
 801cb5a:	459a      	cmp	sl, r3
 801cb5c:	d1f8      	bne.n	801cb50 <_dtoa_r+0x6c0>
 801cb5e:	2230      	movs	r2, #48	@ 0x30
 801cb60:	f108 0801 	add.w	r8, r8, #1
 801cb64:	f88a 2000 	strb.w	r2, [sl]
 801cb68:	781a      	ldrb	r2, [r3, #0]
 801cb6a:	3201      	adds	r2, #1
 801cb6c:	701a      	strb	r2, [r3, #0]
 801cb6e:	e7a0      	b.n	801cab2 <_dtoa_r+0x622>
 801cb70:	4b6f      	ldr	r3, [pc, #444]	@ (801cd30 <_dtoa_r+0x8a0>)
 801cb72:	2200      	movs	r2, #0
 801cb74:	f7e3 fd50 	bl	8000618 <__aeabi_dmul>
 801cb78:	2200      	movs	r2, #0
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	4604      	mov	r4, r0
 801cb7e:	460d      	mov	r5, r1
 801cb80:	f7e3 ffb2 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb84:	2800      	cmp	r0, #0
 801cb86:	d09f      	beq.n	801cac8 <_dtoa_r+0x638>
 801cb88:	e7d1      	b.n	801cb2e <_dtoa_r+0x69e>
 801cb8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb8c:	2a00      	cmp	r2, #0
 801cb8e:	f000 80ea 	beq.w	801cd66 <_dtoa_r+0x8d6>
 801cb92:	9a07      	ldr	r2, [sp, #28]
 801cb94:	2a01      	cmp	r2, #1
 801cb96:	f300 80cd 	bgt.w	801cd34 <_dtoa_r+0x8a4>
 801cb9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cb9c:	2a00      	cmp	r2, #0
 801cb9e:	f000 80c1 	beq.w	801cd24 <_dtoa_r+0x894>
 801cba2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801cba6:	9c08      	ldr	r4, [sp, #32]
 801cba8:	9e00      	ldr	r6, [sp, #0]
 801cbaa:	9a00      	ldr	r2, [sp, #0]
 801cbac:	441a      	add	r2, r3
 801cbae:	9200      	str	r2, [sp, #0]
 801cbb0:	9a06      	ldr	r2, [sp, #24]
 801cbb2:	2101      	movs	r1, #1
 801cbb4:	441a      	add	r2, r3
 801cbb6:	4648      	mov	r0, r9
 801cbb8:	9206      	str	r2, [sp, #24]
 801cbba:	f000 fc77 	bl	801d4ac <__i2b>
 801cbbe:	4605      	mov	r5, r0
 801cbc0:	b166      	cbz	r6, 801cbdc <_dtoa_r+0x74c>
 801cbc2:	9b06      	ldr	r3, [sp, #24]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	dd09      	ble.n	801cbdc <_dtoa_r+0x74c>
 801cbc8:	42b3      	cmp	r3, r6
 801cbca:	9a00      	ldr	r2, [sp, #0]
 801cbcc:	bfa8      	it	ge
 801cbce:	4633      	movge	r3, r6
 801cbd0:	1ad2      	subs	r2, r2, r3
 801cbd2:	9200      	str	r2, [sp, #0]
 801cbd4:	9a06      	ldr	r2, [sp, #24]
 801cbd6:	1af6      	subs	r6, r6, r3
 801cbd8:	1ad3      	subs	r3, r2, r3
 801cbda:	9306      	str	r3, [sp, #24]
 801cbdc:	9b08      	ldr	r3, [sp, #32]
 801cbde:	b30b      	cbz	r3, 801cc24 <_dtoa_r+0x794>
 801cbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	f000 80c6 	beq.w	801cd74 <_dtoa_r+0x8e4>
 801cbe8:	2c00      	cmp	r4, #0
 801cbea:	f000 80c0 	beq.w	801cd6e <_dtoa_r+0x8de>
 801cbee:	4629      	mov	r1, r5
 801cbf0:	4622      	mov	r2, r4
 801cbf2:	4648      	mov	r0, r9
 801cbf4:	f000 fd12 	bl	801d61c <__pow5mult>
 801cbf8:	9a02      	ldr	r2, [sp, #8]
 801cbfa:	4601      	mov	r1, r0
 801cbfc:	4605      	mov	r5, r0
 801cbfe:	4648      	mov	r0, r9
 801cc00:	f000 fc6a 	bl	801d4d8 <__multiply>
 801cc04:	9902      	ldr	r1, [sp, #8]
 801cc06:	4680      	mov	r8, r0
 801cc08:	4648      	mov	r0, r9
 801cc0a:	f000 fb51 	bl	801d2b0 <_Bfree>
 801cc0e:	9b08      	ldr	r3, [sp, #32]
 801cc10:	1b1b      	subs	r3, r3, r4
 801cc12:	9308      	str	r3, [sp, #32]
 801cc14:	f000 80b1 	beq.w	801cd7a <_dtoa_r+0x8ea>
 801cc18:	9a08      	ldr	r2, [sp, #32]
 801cc1a:	4641      	mov	r1, r8
 801cc1c:	4648      	mov	r0, r9
 801cc1e:	f000 fcfd 	bl	801d61c <__pow5mult>
 801cc22:	9002      	str	r0, [sp, #8]
 801cc24:	2101      	movs	r1, #1
 801cc26:	4648      	mov	r0, r9
 801cc28:	f000 fc40 	bl	801d4ac <__i2b>
 801cc2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc2e:	4604      	mov	r4, r0
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	f000 81d8 	beq.w	801cfe6 <_dtoa_r+0xb56>
 801cc36:	461a      	mov	r2, r3
 801cc38:	4601      	mov	r1, r0
 801cc3a:	4648      	mov	r0, r9
 801cc3c:	f000 fcee 	bl	801d61c <__pow5mult>
 801cc40:	9b07      	ldr	r3, [sp, #28]
 801cc42:	2b01      	cmp	r3, #1
 801cc44:	4604      	mov	r4, r0
 801cc46:	f300 809f 	bgt.w	801cd88 <_dtoa_r+0x8f8>
 801cc4a:	9b04      	ldr	r3, [sp, #16]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	f040 8097 	bne.w	801cd80 <_dtoa_r+0x8f0>
 801cc52:	9b05      	ldr	r3, [sp, #20]
 801cc54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	f040 8093 	bne.w	801cd84 <_dtoa_r+0x8f4>
 801cc5e:	9b05      	ldr	r3, [sp, #20]
 801cc60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cc64:	0d1b      	lsrs	r3, r3, #20
 801cc66:	051b      	lsls	r3, r3, #20
 801cc68:	b133      	cbz	r3, 801cc78 <_dtoa_r+0x7e8>
 801cc6a:	9b00      	ldr	r3, [sp, #0]
 801cc6c:	3301      	adds	r3, #1
 801cc6e:	9300      	str	r3, [sp, #0]
 801cc70:	9b06      	ldr	r3, [sp, #24]
 801cc72:	3301      	adds	r3, #1
 801cc74:	9306      	str	r3, [sp, #24]
 801cc76:	2301      	movs	r3, #1
 801cc78:	9308      	str	r3, [sp, #32]
 801cc7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	f000 81b8 	beq.w	801cff2 <_dtoa_r+0xb62>
 801cc82:	6923      	ldr	r3, [r4, #16]
 801cc84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cc88:	6918      	ldr	r0, [r3, #16]
 801cc8a:	f000 fbc3 	bl	801d414 <__hi0bits>
 801cc8e:	f1c0 0020 	rsb	r0, r0, #32
 801cc92:	9b06      	ldr	r3, [sp, #24]
 801cc94:	4418      	add	r0, r3
 801cc96:	f010 001f 	ands.w	r0, r0, #31
 801cc9a:	f000 8082 	beq.w	801cda2 <_dtoa_r+0x912>
 801cc9e:	f1c0 0320 	rsb	r3, r0, #32
 801cca2:	2b04      	cmp	r3, #4
 801cca4:	dd73      	ble.n	801cd8e <_dtoa_r+0x8fe>
 801cca6:	9b00      	ldr	r3, [sp, #0]
 801cca8:	f1c0 001c 	rsb	r0, r0, #28
 801ccac:	4403      	add	r3, r0
 801ccae:	9300      	str	r3, [sp, #0]
 801ccb0:	9b06      	ldr	r3, [sp, #24]
 801ccb2:	4403      	add	r3, r0
 801ccb4:	4406      	add	r6, r0
 801ccb6:	9306      	str	r3, [sp, #24]
 801ccb8:	9b00      	ldr	r3, [sp, #0]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	dd05      	ble.n	801ccca <_dtoa_r+0x83a>
 801ccbe:	9902      	ldr	r1, [sp, #8]
 801ccc0:	461a      	mov	r2, r3
 801ccc2:	4648      	mov	r0, r9
 801ccc4:	f000 fd04 	bl	801d6d0 <__lshift>
 801ccc8:	9002      	str	r0, [sp, #8]
 801ccca:	9b06      	ldr	r3, [sp, #24]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	dd05      	ble.n	801ccdc <_dtoa_r+0x84c>
 801ccd0:	4621      	mov	r1, r4
 801ccd2:	461a      	mov	r2, r3
 801ccd4:	4648      	mov	r0, r9
 801ccd6:	f000 fcfb 	bl	801d6d0 <__lshift>
 801ccda:	4604      	mov	r4, r0
 801ccdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d061      	beq.n	801cda6 <_dtoa_r+0x916>
 801cce2:	9802      	ldr	r0, [sp, #8]
 801cce4:	4621      	mov	r1, r4
 801cce6:	f000 fd5f 	bl	801d7a8 <__mcmp>
 801ccea:	2800      	cmp	r0, #0
 801ccec:	da5b      	bge.n	801cda6 <_dtoa_r+0x916>
 801ccee:	2300      	movs	r3, #0
 801ccf0:	9902      	ldr	r1, [sp, #8]
 801ccf2:	220a      	movs	r2, #10
 801ccf4:	4648      	mov	r0, r9
 801ccf6:	f000 fafd 	bl	801d2f4 <__multadd>
 801ccfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccfc:	9002      	str	r0, [sp, #8]
 801ccfe:	f107 38ff 	add.w	r8, r7, #4294967295
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f000 8177 	beq.w	801cff6 <_dtoa_r+0xb66>
 801cd08:	4629      	mov	r1, r5
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	220a      	movs	r2, #10
 801cd0e:	4648      	mov	r0, r9
 801cd10:	f000 faf0 	bl	801d2f4 <__multadd>
 801cd14:	f1bb 0f00 	cmp.w	fp, #0
 801cd18:	4605      	mov	r5, r0
 801cd1a:	dc6f      	bgt.n	801cdfc <_dtoa_r+0x96c>
 801cd1c:	9b07      	ldr	r3, [sp, #28]
 801cd1e:	2b02      	cmp	r3, #2
 801cd20:	dc49      	bgt.n	801cdb6 <_dtoa_r+0x926>
 801cd22:	e06b      	b.n	801cdfc <_dtoa_r+0x96c>
 801cd24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cd26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801cd2a:	e73c      	b.n	801cba6 <_dtoa_r+0x716>
 801cd2c:	3fe00000 	.word	0x3fe00000
 801cd30:	40240000 	.word	0x40240000
 801cd34:	9b03      	ldr	r3, [sp, #12]
 801cd36:	1e5c      	subs	r4, r3, #1
 801cd38:	9b08      	ldr	r3, [sp, #32]
 801cd3a:	42a3      	cmp	r3, r4
 801cd3c:	db09      	blt.n	801cd52 <_dtoa_r+0x8c2>
 801cd3e:	1b1c      	subs	r4, r3, r4
 801cd40:	9b03      	ldr	r3, [sp, #12]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	f6bf af30 	bge.w	801cba8 <_dtoa_r+0x718>
 801cd48:	9b00      	ldr	r3, [sp, #0]
 801cd4a:	9a03      	ldr	r2, [sp, #12]
 801cd4c:	1a9e      	subs	r6, r3, r2
 801cd4e:	2300      	movs	r3, #0
 801cd50:	e72b      	b.n	801cbaa <_dtoa_r+0x71a>
 801cd52:	9b08      	ldr	r3, [sp, #32]
 801cd54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cd56:	9408      	str	r4, [sp, #32]
 801cd58:	1ae3      	subs	r3, r4, r3
 801cd5a:	441a      	add	r2, r3
 801cd5c:	9e00      	ldr	r6, [sp, #0]
 801cd5e:	9b03      	ldr	r3, [sp, #12]
 801cd60:	920d      	str	r2, [sp, #52]	@ 0x34
 801cd62:	2400      	movs	r4, #0
 801cd64:	e721      	b.n	801cbaa <_dtoa_r+0x71a>
 801cd66:	9c08      	ldr	r4, [sp, #32]
 801cd68:	9e00      	ldr	r6, [sp, #0]
 801cd6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801cd6c:	e728      	b.n	801cbc0 <_dtoa_r+0x730>
 801cd6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cd72:	e751      	b.n	801cc18 <_dtoa_r+0x788>
 801cd74:	9a08      	ldr	r2, [sp, #32]
 801cd76:	9902      	ldr	r1, [sp, #8]
 801cd78:	e750      	b.n	801cc1c <_dtoa_r+0x78c>
 801cd7a:	f8cd 8008 	str.w	r8, [sp, #8]
 801cd7e:	e751      	b.n	801cc24 <_dtoa_r+0x794>
 801cd80:	2300      	movs	r3, #0
 801cd82:	e779      	b.n	801cc78 <_dtoa_r+0x7e8>
 801cd84:	9b04      	ldr	r3, [sp, #16]
 801cd86:	e777      	b.n	801cc78 <_dtoa_r+0x7e8>
 801cd88:	2300      	movs	r3, #0
 801cd8a:	9308      	str	r3, [sp, #32]
 801cd8c:	e779      	b.n	801cc82 <_dtoa_r+0x7f2>
 801cd8e:	d093      	beq.n	801ccb8 <_dtoa_r+0x828>
 801cd90:	9a00      	ldr	r2, [sp, #0]
 801cd92:	331c      	adds	r3, #28
 801cd94:	441a      	add	r2, r3
 801cd96:	9200      	str	r2, [sp, #0]
 801cd98:	9a06      	ldr	r2, [sp, #24]
 801cd9a:	441a      	add	r2, r3
 801cd9c:	441e      	add	r6, r3
 801cd9e:	9206      	str	r2, [sp, #24]
 801cda0:	e78a      	b.n	801ccb8 <_dtoa_r+0x828>
 801cda2:	4603      	mov	r3, r0
 801cda4:	e7f4      	b.n	801cd90 <_dtoa_r+0x900>
 801cda6:	9b03      	ldr	r3, [sp, #12]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	46b8      	mov	r8, r7
 801cdac:	dc20      	bgt.n	801cdf0 <_dtoa_r+0x960>
 801cdae:	469b      	mov	fp, r3
 801cdb0:	9b07      	ldr	r3, [sp, #28]
 801cdb2:	2b02      	cmp	r3, #2
 801cdb4:	dd1e      	ble.n	801cdf4 <_dtoa_r+0x964>
 801cdb6:	f1bb 0f00 	cmp.w	fp, #0
 801cdba:	f47f adb1 	bne.w	801c920 <_dtoa_r+0x490>
 801cdbe:	4621      	mov	r1, r4
 801cdc0:	465b      	mov	r3, fp
 801cdc2:	2205      	movs	r2, #5
 801cdc4:	4648      	mov	r0, r9
 801cdc6:	f000 fa95 	bl	801d2f4 <__multadd>
 801cdca:	4601      	mov	r1, r0
 801cdcc:	4604      	mov	r4, r0
 801cdce:	9802      	ldr	r0, [sp, #8]
 801cdd0:	f000 fcea 	bl	801d7a8 <__mcmp>
 801cdd4:	2800      	cmp	r0, #0
 801cdd6:	f77f ada3 	ble.w	801c920 <_dtoa_r+0x490>
 801cdda:	4656      	mov	r6, sl
 801cddc:	2331      	movs	r3, #49	@ 0x31
 801cdde:	f806 3b01 	strb.w	r3, [r6], #1
 801cde2:	f108 0801 	add.w	r8, r8, #1
 801cde6:	e59f      	b.n	801c928 <_dtoa_r+0x498>
 801cde8:	9c03      	ldr	r4, [sp, #12]
 801cdea:	46b8      	mov	r8, r7
 801cdec:	4625      	mov	r5, r4
 801cdee:	e7f4      	b.n	801cdda <_dtoa_r+0x94a>
 801cdf0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801cdf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	f000 8101 	beq.w	801cffe <_dtoa_r+0xb6e>
 801cdfc:	2e00      	cmp	r6, #0
 801cdfe:	dd05      	ble.n	801ce0c <_dtoa_r+0x97c>
 801ce00:	4629      	mov	r1, r5
 801ce02:	4632      	mov	r2, r6
 801ce04:	4648      	mov	r0, r9
 801ce06:	f000 fc63 	bl	801d6d0 <__lshift>
 801ce0a:	4605      	mov	r5, r0
 801ce0c:	9b08      	ldr	r3, [sp, #32]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d05c      	beq.n	801cecc <_dtoa_r+0xa3c>
 801ce12:	6869      	ldr	r1, [r5, #4]
 801ce14:	4648      	mov	r0, r9
 801ce16:	f000 fa0b 	bl	801d230 <_Balloc>
 801ce1a:	4606      	mov	r6, r0
 801ce1c:	b928      	cbnz	r0, 801ce2a <_dtoa_r+0x99a>
 801ce1e:	4b82      	ldr	r3, [pc, #520]	@ (801d028 <_dtoa_r+0xb98>)
 801ce20:	4602      	mov	r2, r0
 801ce22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ce26:	f7ff bb4a 	b.w	801c4be <_dtoa_r+0x2e>
 801ce2a:	692a      	ldr	r2, [r5, #16]
 801ce2c:	3202      	adds	r2, #2
 801ce2e:	0092      	lsls	r2, r2, #2
 801ce30:	f105 010c 	add.w	r1, r5, #12
 801ce34:	300c      	adds	r0, #12
 801ce36:	f7ff fa76 	bl	801c326 <memcpy>
 801ce3a:	2201      	movs	r2, #1
 801ce3c:	4631      	mov	r1, r6
 801ce3e:	4648      	mov	r0, r9
 801ce40:	f000 fc46 	bl	801d6d0 <__lshift>
 801ce44:	f10a 0301 	add.w	r3, sl, #1
 801ce48:	9300      	str	r3, [sp, #0]
 801ce4a:	eb0a 030b 	add.w	r3, sl, fp
 801ce4e:	9308      	str	r3, [sp, #32]
 801ce50:	9b04      	ldr	r3, [sp, #16]
 801ce52:	f003 0301 	and.w	r3, r3, #1
 801ce56:	462f      	mov	r7, r5
 801ce58:	9306      	str	r3, [sp, #24]
 801ce5a:	4605      	mov	r5, r0
 801ce5c:	9b00      	ldr	r3, [sp, #0]
 801ce5e:	9802      	ldr	r0, [sp, #8]
 801ce60:	4621      	mov	r1, r4
 801ce62:	f103 3bff 	add.w	fp, r3, #4294967295
 801ce66:	f7ff fa8b 	bl	801c380 <quorem>
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	3330      	adds	r3, #48	@ 0x30
 801ce6e:	9003      	str	r0, [sp, #12]
 801ce70:	4639      	mov	r1, r7
 801ce72:	9802      	ldr	r0, [sp, #8]
 801ce74:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce76:	f000 fc97 	bl	801d7a8 <__mcmp>
 801ce7a:	462a      	mov	r2, r5
 801ce7c:	9004      	str	r0, [sp, #16]
 801ce7e:	4621      	mov	r1, r4
 801ce80:	4648      	mov	r0, r9
 801ce82:	f000 fcad 	bl	801d7e0 <__mdiff>
 801ce86:	68c2      	ldr	r2, [r0, #12]
 801ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce8a:	4606      	mov	r6, r0
 801ce8c:	bb02      	cbnz	r2, 801ced0 <_dtoa_r+0xa40>
 801ce8e:	4601      	mov	r1, r0
 801ce90:	9802      	ldr	r0, [sp, #8]
 801ce92:	f000 fc89 	bl	801d7a8 <__mcmp>
 801ce96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce98:	4602      	mov	r2, r0
 801ce9a:	4631      	mov	r1, r6
 801ce9c:	4648      	mov	r0, r9
 801ce9e:	920c      	str	r2, [sp, #48]	@ 0x30
 801cea0:	9309      	str	r3, [sp, #36]	@ 0x24
 801cea2:	f000 fa05 	bl	801d2b0 <_Bfree>
 801cea6:	9b07      	ldr	r3, [sp, #28]
 801cea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ceaa:	9e00      	ldr	r6, [sp, #0]
 801ceac:	ea42 0103 	orr.w	r1, r2, r3
 801ceb0:	9b06      	ldr	r3, [sp, #24]
 801ceb2:	4319      	orrs	r1, r3
 801ceb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceb6:	d10d      	bne.n	801ced4 <_dtoa_r+0xa44>
 801ceb8:	2b39      	cmp	r3, #57	@ 0x39
 801ceba:	d027      	beq.n	801cf0c <_dtoa_r+0xa7c>
 801cebc:	9a04      	ldr	r2, [sp, #16]
 801cebe:	2a00      	cmp	r2, #0
 801cec0:	dd01      	ble.n	801cec6 <_dtoa_r+0xa36>
 801cec2:	9b03      	ldr	r3, [sp, #12]
 801cec4:	3331      	adds	r3, #49	@ 0x31
 801cec6:	f88b 3000 	strb.w	r3, [fp]
 801ceca:	e52e      	b.n	801c92a <_dtoa_r+0x49a>
 801cecc:	4628      	mov	r0, r5
 801cece:	e7b9      	b.n	801ce44 <_dtoa_r+0x9b4>
 801ced0:	2201      	movs	r2, #1
 801ced2:	e7e2      	b.n	801ce9a <_dtoa_r+0xa0a>
 801ced4:	9904      	ldr	r1, [sp, #16]
 801ced6:	2900      	cmp	r1, #0
 801ced8:	db04      	blt.n	801cee4 <_dtoa_r+0xa54>
 801ceda:	9807      	ldr	r0, [sp, #28]
 801cedc:	4301      	orrs	r1, r0
 801cede:	9806      	ldr	r0, [sp, #24]
 801cee0:	4301      	orrs	r1, r0
 801cee2:	d120      	bne.n	801cf26 <_dtoa_r+0xa96>
 801cee4:	2a00      	cmp	r2, #0
 801cee6:	ddee      	ble.n	801cec6 <_dtoa_r+0xa36>
 801cee8:	9902      	ldr	r1, [sp, #8]
 801ceea:	9300      	str	r3, [sp, #0]
 801ceec:	2201      	movs	r2, #1
 801ceee:	4648      	mov	r0, r9
 801cef0:	f000 fbee 	bl	801d6d0 <__lshift>
 801cef4:	4621      	mov	r1, r4
 801cef6:	9002      	str	r0, [sp, #8]
 801cef8:	f000 fc56 	bl	801d7a8 <__mcmp>
 801cefc:	2800      	cmp	r0, #0
 801cefe:	9b00      	ldr	r3, [sp, #0]
 801cf00:	dc02      	bgt.n	801cf08 <_dtoa_r+0xa78>
 801cf02:	d1e0      	bne.n	801cec6 <_dtoa_r+0xa36>
 801cf04:	07da      	lsls	r2, r3, #31
 801cf06:	d5de      	bpl.n	801cec6 <_dtoa_r+0xa36>
 801cf08:	2b39      	cmp	r3, #57	@ 0x39
 801cf0a:	d1da      	bne.n	801cec2 <_dtoa_r+0xa32>
 801cf0c:	2339      	movs	r3, #57	@ 0x39
 801cf0e:	f88b 3000 	strb.w	r3, [fp]
 801cf12:	4633      	mov	r3, r6
 801cf14:	461e      	mov	r6, r3
 801cf16:	3b01      	subs	r3, #1
 801cf18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801cf1c:	2a39      	cmp	r2, #57	@ 0x39
 801cf1e:	d04e      	beq.n	801cfbe <_dtoa_r+0xb2e>
 801cf20:	3201      	adds	r2, #1
 801cf22:	701a      	strb	r2, [r3, #0]
 801cf24:	e501      	b.n	801c92a <_dtoa_r+0x49a>
 801cf26:	2a00      	cmp	r2, #0
 801cf28:	dd03      	ble.n	801cf32 <_dtoa_r+0xaa2>
 801cf2a:	2b39      	cmp	r3, #57	@ 0x39
 801cf2c:	d0ee      	beq.n	801cf0c <_dtoa_r+0xa7c>
 801cf2e:	3301      	adds	r3, #1
 801cf30:	e7c9      	b.n	801cec6 <_dtoa_r+0xa36>
 801cf32:	9a00      	ldr	r2, [sp, #0]
 801cf34:	9908      	ldr	r1, [sp, #32]
 801cf36:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cf3a:	428a      	cmp	r2, r1
 801cf3c:	d028      	beq.n	801cf90 <_dtoa_r+0xb00>
 801cf3e:	9902      	ldr	r1, [sp, #8]
 801cf40:	2300      	movs	r3, #0
 801cf42:	220a      	movs	r2, #10
 801cf44:	4648      	mov	r0, r9
 801cf46:	f000 f9d5 	bl	801d2f4 <__multadd>
 801cf4a:	42af      	cmp	r7, r5
 801cf4c:	9002      	str	r0, [sp, #8]
 801cf4e:	f04f 0300 	mov.w	r3, #0
 801cf52:	f04f 020a 	mov.w	r2, #10
 801cf56:	4639      	mov	r1, r7
 801cf58:	4648      	mov	r0, r9
 801cf5a:	d107      	bne.n	801cf6c <_dtoa_r+0xadc>
 801cf5c:	f000 f9ca 	bl	801d2f4 <__multadd>
 801cf60:	4607      	mov	r7, r0
 801cf62:	4605      	mov	r5, r0
 801cf64:	9b00      	ldr	r3, [sp, #0]
 801cf66:	3301      	adds	r3, #1
 801cf68:	9300      	str	r3, [sp, #0]
 801cf6a:	e777      	b.n	801ce5c <_dtoa_r+0x9cc>
 801cf6c:	f000 f9c2 	bl	801d2f4 <__multadd>
 801cf70:	4629      	mov	r1, r5
 801cf72:	4607      	mov	r7, r0
 801cf74:	2300      	movs	r3, #0
 801cf76:	220a      	movs	r2, #10
 801cf78:	4648      	mov	r0, r9
 801cf7a:	f000 f9bb 	bl	801d2f4 <__multadd>
 801cf7e:	4605      	mov	r5, r0
 801cf80:	e7f0      	b.n	801cf64 <_dtoa_r+0xad4>
 801cf82:	f1bb 0f00 	cmp.w	fp, #0
 801cf86:	bfcc      	ite	gt
 801cf88:	465e      	movgt	r6, fp
 801cf8a:	2601      	movle	r6, #1
 801cf8c:	4456      	add	r6, sl
 801cf8e:	2700      	movs	r7, #0
 801cf90:	9902      	ldr	r1, [sp, #8]
 801cf92:	9300      	str	r3, [sp, #0]
 801cf94:	2201      	movs	r2, #1
 801cf96:	4648      	mov	r0, r9
 801cf98:	f000 fb9a 	bl	801d6d0 <__lshift>
 801cf9c:	4621      	mov	r1, r4
 801cf9e:	9002      	str	r0, [sp, #8]
 801cfa0:	f000 fc02 	bl	801d7a8 <__mcmp>
 801cfa4:	2800      	cmp	r0, #0
 801cfa6:	dcb4      	bgt.n	801cf12 <_dtoa_r+0xa82>
 801cfa8:	d102      	bne.n	801cfb0 <_dtoa_r+0xb20>
 801cfaa:	9b00      	ldr	r3, [sp, #0]
 801cfac:	07db      	lsls	r3, r3, #31
 801cfae:	d4b0      	bmi.n	801cf12 <_dtoa_r+0xa82>
 801cfb0:	4633      	mov	r3, r6
 801cfb2:	461e      	mov	r6, r3
 801cfb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfb8:	2a30      	cmp	r2, #48	@ 0x30
 801cfba:	d0fa      	beq.n	801cfb2 <_dtoa_r+0xb22>
 801cfbc:	e4b5      	b.n	801c92a <_dtoa_r+0x49a>
 801cfbe:	459a      	cmp	sl, r3
 801cfc0:	d1a8      	bne.n	801cf14 <_dtoa_r+0xa84>
 801cfc2:	2331      	movs	r3, #49	@ 0x31
 801cfc4:	f108 0801 	add.w	r8, r8, #1
 801cfc8:	f88a 3000 	strb.w	r3, [sl]
 801cfcc:	e4ad      	b.n	801c92a <_dtoa_r+0x49a>
 801cfce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cfd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801d02c <_dtoa_r+0xb9c>
 801cfd4:	b11b      	cbz	r3, 801cfde <_dtoa_r+0xb4e>
 801cfd6:	f10a 0308 	add.w	r3, sl, #8
 801cfda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cfdc:	6013      	str	r3, [r2, #0]
 801cfde:	4650      	mov	r0, sl
 801cfe0:	b017      	add	sp, #92	@ 0x5c
 801cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfe6:	9b07      	ldr	r3, [sp, #28]
 801cfe8:	2b01      	cmp	r3, #1
 801cfea:	f77f ae2e 	ble.w	801cc4a <_dtoa_r+0x7ba>
 801cfee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cff0:	9308      	str	r3, [sp, #32]
 801cff2:	2001      	movs	r0, #1
 801cff4:	e64d      	b.n	801cc92 <_dtoa_r+0x802>
 801cff6:	f1bb 0f00 	cmp.w	fp, #0
 801cffa:	f77f aed9 	ble.w	801cdb0 <_dtoa_r+0x920>
 801cffe:	4656      	mov	r6, sl
 801d000:	9802      	ldr	r0, [sp, #8]
 801d002:	4621      	mov	r1, r4
 801d004:	f7ff f9bc 	bl	801c380 <quorem>
 801d008:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d00c:	f806 3b01 	strb.w	r3, [r6], #1
 801d010:	eba6 020a 	sub.w	r2, r6, sl
 801d014:	4593      	cmp	fp, r2
 801d016:	ddb4      	ble.n	801cf82 <_dtoa_r+0xaf2>
 801d018:	9902      	ldr	r1, [sp, #8]
 801d01a:	2300      	movs	r3, #0
 801d01c:	220a      	movs	r2, #10
 801d01e:	4648      	mov	r0, r9
 801d020:	f000 f968 	bl	801d2f4 <__multadd>
 801d024:	9002      	str	r0, [sp, #8]
 801d026:	e7eb      	b.n	801d000 <_dtoa_r+0xb70>
 801d028:	0802222c 	.word	0x0802222c
 801d02c:	080221b0 	.word	0x080221b0

0801d030 <_free_r>:
 801d030:	b538      	push	{r3, r4, r5, lr}
 801d032:	4605      	mov	r5, r0
 801d034:	2900      	cmp	r1, #0
 801d036:	d041      	beq.n	801d0bc <_free_r+0x8c>
 801d038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d03c:	1f0c      	subs	r4, r1, #4
 801d03e:	2b00      	cmp	r3, #0
 801d040:	bfb8      	it	lt
 801d042:	18e4      	addlt	r4, r4, r3
 801d044:	f000 f8e8 	bl	801d218 <__malloc_lock>
 801d048:	4a1d      	ldr	r2, [pc, #116]	@ (801d0c0 <_free_r+0x90>)
 801d04a:	6813      	ldr	r3, [r2, #0]
 801d04c:	b933      	cbnz	r3, 801d05c <_free_r+0x2c>
 801d04e:	6063      	str	r3, [r4, #4]
 801d050:	6014      	str	r4, [r2, #0]
 801d052:	4628      	mov	r0, r5
 801d054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d058:	f000 b8e4 	b.w	801d224 <__malloc_unlock>
 801d05c:	42a3      	cmp	r3, r4
 801d05e:	d908      	bls.n	801d072 <_free_r+0x42>
 801d060:	6820      	ldr	r0, [r4, #0]
 801d062:	1821      	adds	r1, r4, r0
 801d064:	428b      	cmp	r3, r1
 801d066:	bf01      	itttt	eq
 801d068:	6819      	ldreq	r1, [r3, #0]
 801d06a:	685b      	ldreq	r3, [r3, #4]
 801d06c:	1809      	addeq	r1, r1, r0
 801d06e:	6021      	streq	r1, [r4, #0]
 801d070:	e7ed      	b.n	801d04e <_free_r+0x1e>
 801d072:	461a      	mov	r2, r3
 801d074:	685b      	ldr	r3, [r3, #4]
 801d076:	b10b      	cbz	r3, 801d07c <_free_r+0x4c>
 801d078:	42a3      	cmp	r3, r4
 801d07a:	d9fa      	bls.n	801d072 <_free_r+0x42>
 801d07c:	6811      	ldr	r1, [r2, #0]
 801d07e:	1850      	adds	r0, r2, r1
 801d080:	42a0      	cmp	r0, r4
 801d082:	d10b      	bne.n	801d09c <_free_r+0x6c>
 801d084:	6820      	ldr	r0, [r4, #0]
 801d086:	4401      	add	r1, r0
 801d088:	1850      	adds	r0, r2, r1
 801d08a:	4283      	cmp	r3, r0
 801d08c:	6011      	str	r1, [r2, #0]
 801d08e:	d1e0      	bne.n	801d052 <_free_r+0x22>
 801d090:	6818      	ldr	r0, [r3, #0]
 801d092:	685b      	ldr	r3, [r3, #4]
 801d094:	6053      	str	r3, [r2, #4]
 801d096:	4408      	add	r0, r1
 801d098:	6010      	str	r0, [r2, #0]
 801d09a:	e7da      	b.n	801d052 <_free_r+0x22>
 801d09c:	d902      	bls.n	801d0a4 <_free_r+0x74>
 801d09e:	230c      	movs	r3, #12
 801d0a0:	602b      	str	r3, [r5, #0]
 801d0a2:	e7d6      	b.n	801d052 <_free_r+0x22>
 801d0a4:	6820      	ldr	r0, [r4, #0]
 801d0a6:	1821      	adds	r1, r4, r0
 801d0a8:	428b      	cmp	r3, r1
 801d0aa:	bf04      	itt	eq
 801d0ac:	6819      	ldreq	r1, [r3, #0]
 801d0ae:	685b      	ldreq	r3, [r3, #4]
 801d0b0:	6063      	str	r3, [r4, #4]
 801d0b2:	bf04      	itt	eq
 801d0b4:	1809      	addeq	r1, r1, r0
 801d0b6:	6021      	streq	r1, [r4, #0]
 801d0b8:	6054      	str	r4, [r2, #4]
 801d0ba:	e7ca      	b.n	801d052 <_free_r+0x22>
 801d0bc:	bd38      	pop	{r3, r4, r5, pc}
 801d0be:	bf00      	nop
 801d0c0:	2000c43c 	.word	0x2000c43c

0801d0c4 <malloc>:
 801d0c4:	4b02      	ldr	r3, [pc, #8]	@ (801d0d0 <malloc+0xc>)
 801d0c6:	4601      	mov	r1, r0
 801d0c8:	6818      	ldr	r0, [r3, #0]
 801d0ca:	f000 b825 	b.w	801d118 <_malloc_r>
 801d0ce:	bf00      	nop
 801d0d0:	20000164 	.word	0x20000164

0801d0d4 <sbrk_aligned>:
 801d0d4:	b570      	push	{r4, r5, r6, lr}
 801d0d6:	4e0f      	ldr	r6, [pc, #60]	@ (801d114 <sbrk_aligned+0x40>)
 801d0d8:	460c      	mov	r4, r1
 801d0da:	6831      	ldr	r1, [r6, #0]
 801d0dc:	4605      	mov	r5, r0
 801d0de:	b911      	cbnz	r1, 801d0e6 <sbrk_aligned+0x12>
 801d0e0:	f002 f9e8 	bl	801f4b4 <_sbrk_r>
 801d0e4:	6030      	str	r0, [r6, #0]
 801d0e6:	4621      	mov	r1, r4
 801d0e8:	4628      	mov	r0, r5
 801d0ea:	f002 f9e3 	bl	801f4b4 <_sbrk_r>
 801d0ee:	1c43      	adds	r3, r0, #1
 801d0f0:	d103      	bne.n	801d0fa <sbrk_aligned+0x26>
 801d0f2:	f04f 34ff 	mov.w	r4, #4294967295
 801d0f6:	4620      	mov	r0, r4
 801d0f8:	bd70      	pop	{r4, r5, r6, pc}
 801d0fa:	1cc4      	adds	r4, r0, #3
 801d0fc:	f024 0403 	bic.w	r4, r4, #3
 801d100:	42a0      	cmp	r0, r4
 801d102:	d0f8      	beq.n	801d0f6 <sbrk_aligned+0x22>
 801d104:	1a21      	subs	r1, r4, r0
 801d106:	4628      	mov	r0, r5
 801d108:	f002 f9d4 	bl	801f4b4 <_sbrk_r>
 801d10c:	3001      	adds	r0, #1
 801d10e:	d1f2      	bne.n	801d0f6 <sbrk_aligned+0x22>
 801d110:	e7ef      	b.n	801d0f2 <sbrk_aligned+0x1e>
 801d112:	bf00      	nop
 801d114:	2000c438 	.word	0x2000c438

0801d118 <_malloc_r>:
 801d118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d11c:	1ccd      	adds	r5, r1, #3
 801d11e:	f025 0503 	bic.w	r5, r5, #3
 801d122:	3508      	adds	r5, #8
 801d124:	2d0c      	cmp	r5, #12
 801d126:	bf38      	it	cc
 801d128:	250c      	movcc	r5, #12
 801d12a:	2d00      	cmp	r5, #0
 801d12c:	4606      	mov	r6, r0
 801d12e:	db01      	blt.n	801d134 <_malloc_r+0x1c>
 801d130:	42a9      	cmp	r1, r5
 801d132:	d904      	bls.n	801d13e <_malloc_r+0x26>
 801d134:	230c      	movs	r3, #12
 801d136:	6033      	str	r3, [r6, #0]
 801d138:	2000      	movs	r0, #0
 801d13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d13e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d214 <_malloc_r+0xfc>
 801d142:	f000 f869 	bl	801d218 <__malloc_lock>
 801d146:	f8d8 3000 	ldr.w	r3, [r8]
 801d14a:	461c      	mov	r4, r3
 801d14c:	bb44      	cbnz	r4, 801d1a0 <_malloc_r+0x88>
 801d14e:	4629      	mov	r1, r5
 801d150:	4630      	mov	r0, r6
 801d152:	f7ff ffbf 	bl	801d0d4 <sbrk_aligned>
 801d156:	1c43      	adds	r3, r0, #1
 801d158:	4604      	mov	r4, r0
 801d15a:	d158      	bne.n	801d20e <_malloc_r+0xf6>
 801d15c:	f8d8 4000 	ldr.w	r4, [r8]
 801d160:	4627      	mov	r7, r4
 801d162:	2f00      	cmp	r7, #0
 801d164:	d143      	bne.n	801d1ee <_malloc_r+0xd6>
 801d166:	2c00      	cmp	r4, #0
 801d168:	d04b      	beq.n	801d202 <_malloc_r+0xea>
 801d16a:	6823      	ldr	r3, [r4, #0]
 801d16c:	4639      	mov	r1, r7
 801d16e:	4630      	mov	r0, r6
 801d170:	eb04 0903 	add.w	r9, r4, r3
 801d174:	f002 f99e 	bl	801f4b4 <_sbrk_r>
 801d178:	4581      	cmp	r9, r0
 801d17a:	d142      	bne.n	801d202 <_malloc_r+0xea>
 801d17c:	6821      	ldr	r1, [r4, #0]
 801d17e:	1a6d      	subs	r5, r5, r1
 801d180:	4629      	mov	r1, r5
 801d182:	4630      	mov	r0, r6
 801d184:	f7ff ffa6 	bl	801d0d4 <sbrk_aligned>
 801d188:	3001      	adds	r0, #1
 801d18a:	d03a      	beq.n	801d202 <_malloc_r+0xea>
 801d18c:	6823      	ldr	r3, [r4, #0]
 801d18e:	442b      	add	r3, r5
 801d190:	6023      	str	r3, [r4, #0]
 801d192:	f8d8 3000 	ldr.w	r3, [r8]
 801d196:	685a      	ldr	r2, [r3, #4]
 801d198:	bb62      	cbnz	r2, 801d1f4 <_malloc_r+0xdc>
 801d19a:	f8c8 7000 	str.w	r7, [r8]
 801d19e:	e00f      	b.n	801d1c0 <_malloc_r+0xa8>
 801d1a0:	6822      	ldr	r2, [r4, #0]
 801d1a2:	1b52      	subs	r2, r2, r5
 801d1a4:	d420      	bmi.n	801d1e8 <_malloc_r+0xd0>
 801d1a6:	2a0b      	cmp	r2, #11
 801d1a8:	d917      	bls.n	801d1da <_malloc_r+0xc2>
 801d1aa:	1961      	adds	r1, r4, r5
 801d1ac:	42a3      	cmp	r3, r4
 801d1ae:	6025      	str	r5, [r4, #0]
 801d1b0:	bf18      	it	ne
 801d1b2:	6059      	strne	r1, [r3, #4]
 801d1b4:	6863      	ldr	r3, [r4, #4]
 801d1b6:	bf08      	it	eq
 801d1b8:	f8c8 1000 	streq.w	r1, [r8]
 801d1bc:	5162      	str	r2, [r4, r5]
 801d1be:	604b      	str	r3, [r1, #4]
 801d1c0:	4630      	mov	r0, r6
 801d1c2:	f000 f82f 	bl	801d224 <__malloc_unlock>
 801d1c6:	f104 000b 	add.w	r0, r4, #11
 801d1ca:	1d23      	adds	r3, r4, #4
 801d1cc:	f020 0007 	bic.w	r0, r0, #7
 801d1d0:	1ac2      	subs	r2, r0, r3
 801d1d2:	bf1c      	itt	ne
 801d1d4:	1a1b      	subne	r3, r3, r0
 801d1d6:	50a3      	strne	r3, [r4, r2]
 801d1d8:	e7af      	b.n	801d13a <_malloc_r+0x22>
 801d1da:	6862      	ldr	r2, [r4, #4]
 801d1dc:	42a3      	cmp	r3, r4
 801d1de:	bf0c      	ite	eq
 801d1e0:	f8c8 2000 	streq.w	r2, [r8]
 801d1e4:	605a      	strne	r2, [r3, #4]
 801d1e6:	e7eb      	b.n	801d1c0 <_malloc_r+0xa8>
 801d1e8:	4623      	mov	r3, r4
 801d1ea:	6864      	ldr	r4, [r4, #4]
 801d1ec:	e7ae      	b.n	801d14c <_malloc_r+0x34>
 801d1ee:	463c      	mov	r4, r7
 801d1f0:	687f      	ldr	r7, [r7, #4]
 801d1f2:	e7b6      	b.n	801d162 <_malloc_r+0x4a>
 801d1f4:	461a      	mov	r2, r3
 801d1f6:	685b      	ldr	r3, [r3, #4]
 801d1f8:	42a3      	cmp	r3, r4
 801d1fa:	d1fb      	bne.n	801d1f4 <_malloc_r+0xdc>
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	6053      	str	r3, [r2, #4]
 801d200:	e7de      	b.n	801d1c0 <_malloc_r+0xa8>
 801d202:	230c      	movs	r3, #12
 801d204:	6033      	str	r3, [r6, #0]
 801d206:	4630      	mov	r0, r6
 801d208:	f000 f80c 	bl	801d224 <__malloc_unlock>
 801d20c:	e794      	b.n	801d138 <_malloc_r+0x20>
 801d20e:	6005      	str	r5, [r0, #0]
 801d210:	e7d6      	b.n	801d1c0 <_malloc_r+0xa8>
 801d212:	bf00      	nop
 801d214:	2000c43c 	.word	0x2000c43c

0801d218 <__malloc_lock>:
 801d218:	4801      	ldr	r0, [pc, #4]	@ (801d220 <__malloc_lock+0x8>)
 801d21a:	f7ff b882 	b.w	801c322 <__retarget_lock_acquire_recursive>
 801d21e:	bf00      	nop
 801d220:	2000c434 	.word	0x2000c434

0801d224 <__malloc_unlock>:
 801d224:	4801      	ldr	r0, [pc, #4]	@ (801d22c <__malloc_unlock+0x8>)
 801d226:	f7ff b87d 	b.w	801c324 <__retarget_lock_release_recursive>
 801d22a:	bf00      	nop
 801d22c:	2000c434 	.word	0x2000c434

0801d230 <_Balloc>:
 801d230:	b570      	push	{r4, r5, r6, lr}
 801d232:	69c6      	ldr	r6, [r0, #28]
 801d234:	4604      	mov	r4, r0
 801d236:	460d      	mov	r5, r1
 801d238:	b976      	cbnz	r6, 801d258 <_Balloc+0x28>
 801d23a:	2010      	movs	r0, #16
 801d23c:	f7ff ff42 	bl	801d0c4 <malloc>
 801d240:	4602      	mov	r2, r0
 801d242:	61e0      	str	r0, [r4, #28]
 801d244:	b920      	cbnz	r0, 801d250 <_Balloc+0x20>
 801d246:	4b18      	ldr	r3, [pc, #96]	@ (801d2a8 <_Balloc+0x78>)
 801d248:	4818      	ldr	r0, [pc, #96]	@ (801d2ac <_Balloc+0x7c>)
 801d24a:	216b      	movs	r1, #107	@ 0x6b
 801d24c:	f7ff f87a 	bl	801c344 <__assert_func>
 801d250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d254:	6006      	str	r6, [r0, #0]
 801d256:	60c6      	str	r6, [r0, #12]
 801d258:	69e6      	ldr	r6, [r4, #28]
 801d25a:	68f3      	ldr	r3, [r6, #12]
 801d25c:	b183      	cbz	r3, 801d280 <_Balloc+0x50>
 801d25e:	69e3      	ldr	r3, [r4, #28]
 801d260:	68db      	ldr	r3, [r3, #12]
 801d262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d266:	b9b8      	cbnz	r0, 801d298 <_Balloc+0x68>
 801d268:	2101      	movs	r1, #1
 801d26a:	fa01 f605 	lsl.w	r6, r1, r5
 801d26e:	1d72      	adds	r2, r6, #5
 801d270:	0092      	lsls	r2, r2, #2
 801d272:	4620      	mov	r0, r4
 801d274:	f002 f93f 	bl	801f4f6 <_calloc_r>
 801d278:	b160      	cbz	r0, 801d294 <_Balloc+0x64>
 801d27a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d27e:	e00e      	b.n	801d29e <_Balloc+0x6e>
 801d280:	2221      	movs	r2, #33	@ 0x21
 801d282:	2104      	movs	r1, #4
 801d284:	4620      	mov	r0, r4
 801d286:	f002 f936 	bl	801f4f6 <_calloc_r>
 801d28a:	69e3      	ldr	r3, [r4, #28]
 801d28c:	60f0      	str	r0, [r6, #12]
 801d28e:	68db      	ldr	r3, [r3, #12]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d1e4      	bne.n	801d25e <_Balloc+0x2e>
 801d294:	2000      	movs	r0, #0
 801d296:	bd70      	pop	{r4, r5, r6, pc}
 801d298:	6802      	ldr	r2, [r0, #0]
 801d29a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d29e:	2300      	movs	r3, #0
 801d2a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d2a4:	e7f7      	b.n	801d296 <_Balloc+0x66>
 801d2a6:	bf00      	nop
 801d2a8:	080221bd 	.word	0x080221bd
 801d2ac:	0802223d 	.word	0x0802223d

0801d2b0 <_Bfree>:
 801d2b0:	b570      	push	{r4, r5, r6, lr}
 801d2b2:	69c6      	ldr	r6, [r0, #28]
 801d2b4:	4605      	mov	r5, r0
 801d2b6:	460c      	mov	r4, r1
 801d2b8:	b976      	cbnz	r6, 801d2d8 <_Bfree+0x28>
 801d2ba:	2010      	movs	r0, #16
 801d2bc:	f7ff ff02 	bl	801d0c4 <malloc>
 801d2c0:	4602      	mov	r2, r0
 801d2c2:	61e8      	str	r0, [r5, #28]
 801d2c4:	b920      	cbnz	r0, 801d2d0 <_Bfree+0x20>
 801d2c6:	4b09      	ldr	r3, [pc, #36]	@ (801d2ec <_Bfree+0x3c>)
 801d2c8:	4809      	ldr	r0, [pc, #36]	@ (801d2f0 <_Bfree+0x40>)
 801d2ca:	218f      	movs	r1, #143	@ 0x8f
 801d2cc:	f7ff f83a 	bl	801c344 <__assert_func>
 801d2d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d2d4:	6006      	str	r6, [r0, #0]
 801d2d6:	60c6      	str	r6, [r0, #12]
 801d2d8:	b13c      	cbz	r4, 801d2ea <_Bfree+0x3a>
 801d2da:	69eb      	ldr	r3, [r5, #28]
 801d2dc:	6862      	ldr	r2, [r4, #4]
 801d2de:	68db      	ldr	r3, [r3, #12]
 801d2e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2e4:	6021      	str	r1, [r4, #0]
 801d2e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d2ea:	bd70      	pop	{r4, r5, r6, pc}
 801d2ec:	080221bd 	.word	0x080221bd
 801d2f0:	0802223d 	.word	0x0802223d

0801d2f4 <__multadd>:
 801d2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2f8:	690d      	ldr	r5, [r1, #16]
 801d2fa:	4607      	mov	r7, r0
 801d2fc:	460c      	mov	r4, r1
 801d2fe:	461e      	mov	r6, r3
 801d300:	f101 0c14 	add.w	ip, r1, #20
 801d304:	2000      	movs	r0, #0
 801d306:	f8dc 3000 	ldr.w	r3, [ip]
 801d30a:	b299      	uxth	r1, r3
 801d30c:	fb02 6101 	mla	r1, r2, r1, r6
 801d310:	0c1e      	lsrs	r6, r3, #16
 801d312:	0c0b      	lsrs	r3, r1, #16
 801d314:	fb02 3306 	mla	r3, r2, r6, r3
 801d318:	b289      	uxth	r1, r1
 801d31a:	3001      	adds	r0, #1
 801d31c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d320:	4285      	cmp	r5, r0
 801d322:	f84c 1b04 	str.w	r1, [ip], #4
 801d326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d32a:	dcec      	bgt.n	801d306 <__multadd+0x12>
 801d32c:	b30e      	cbz	r6, 801d372 <__multadd+0x7e>
 801d32e:	68a3      	ldr	r3, [r4, #8]
 801d330:	42ab      	cmp	r3, r5
 801d332:	dc19      	bgt.n	801d368 <__multadd+0x74>
 801d334:	6861      	ldr	r1, [r4, #4]
 801d336:	4638      	mov	r0, r7
 801d338:	3101      	adds	r1, #1
 801d33a:	f7ff ff79 	bl	801d230 <_Balloc>
 801d33e:	4680      	mov	r8, r0
 801d340:	b928      	cbnz	r0, 801d34e <__multadd+0x5a>
 801d342:	4602      	mov	r2, r0
 801d344:	4b0c      	ldr	r3, [pc, #48]	@ (801d378 <__multadd+0x84>)
 801d346:	480d      	ldr	r0, [pc, #52]	@ (801d37c <__multadd+0x88>)
 801d348:	21ba      	movs	r1, #186	@ 0xba
 801d34a:	f7fe fffb 	bl	801c344 <__assert_func>
 801d34e:	6922      	ldr	r2, [r4, #16]
 801d350:	3202      	adds	r2, #2
 801d352:	f104 010c 	add.w	r1, r4, #12
 801d356:	0092      	lsls	r2, r2, #2
 801d358:	300c      	adds	r0, #12
 801d35a:	f7fe ffe4 	bl	801c326 <memcpy>
 801d35e:	4621      	mov	r1, r4
 801d360:	4638      	mov	r0, r7
 801d362:	f7ff ffa5 	bl	801d2b0 <_Bfree>
 801d366:	4644      	mov	r4, r8
 801d368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d36c:	3501      	adds	r5, #1
 801d36e:	615e      	str	r6, [r3, #20]
 801d370:	6125      	str	r5, [r4, #16]
 801d372:	4620      	mov	r0, r4
 801d374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d378:	0802222c 	.word	0x0802222c
 801d37c:	0802223d 	.word	0x0802223d

0801d380 <__s2b>:
 801d380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d384:	460c      	mov	r4, r1
 801d386:	4615      	mov	r5, r2
 801d388:	461f      	mov	r7, r3
 801d38a:	2209      	movs	r2, #9
 801d38c:	3308      	adds	r3, #8
 801d38e:	4606      	mov	r6, r0
 801d390:	fb93 f3f2 	sdiv	r3, r3, r2
 801d394:	2100      	movs	r1, #0
 801d396:	2201      	movs	r2, #1
 801d398:	429a      	cmp	r2, r3
 801d39a:	db09      	blt.n	801d3b0 <__s2b+0x30>
 801d39c:	4630      	mov	r0, r6
 801d39e:	f7ff ff47 	bl	801d230 <_Balloc>
 801d3a2:	b940      	cbnz	r0, 801d3b6 <__s2b+0x36>
 801d3a4:	4602      	mov	r2, r0
 801d3a6:	4b19      	ldr	r3, [pc, #100]	@ (801d40c <__s2b+0x8c>)
 801d3a8:	4819      	ldr	r0, [pc, #100]	@ (801d410 <__s2b+0x90>)
 801d3aa:	21d3      	movs	r1, #211	@ 0xd3
 801d3ac:	f7fe ffca 	bl	801c344 <__assert_func>
 801d3b0:	0052      	lsls	r2, r2, #1
 801d3b2:	3101      	adds	r1, #1
 801d3b4:	e7f0      	b.n	801d398 <__s2b+0x18>
 801d3b6:	9b08      	ldr	r3, [sp, #32]
 801d3b8:	6143      	str	r3, [r0, #20]
 801d3ba:	2d09      	cmp	r5, #9
 801d3bc:	f04f 0301 	mov.w	r3, #1
 801d3c0:	6103      	str	r3, [r0, #16]
 801d3c2:	dd16      	ble.n	801d3f2 <__s2b+0x72>
 801d3c4:	f104 0909 	add.w	r9, r4, #9
 801d3c8:	46c8      	mov	r8, r9
 801d3ca:	442c      	add	r4, r5
 801d3cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d3d0:	4601      	mov	r1, r0
 801d3d2:	3b30      	subs	r3, #48	@ 0x30
 801d3d4:	220a      	movs	r2, #10
 801d3d6:	4630      	mov	r0, r6
 801d3d8:	f7ff ff8c 	bl	801d2f4 <__multadd>
 801d3dc:	45a0      	cmp	r8, r4
 801d3de:	d1f5      	bne.n	801d3cc <__s2b+0x4c>
 801d3e0:	f1a5 0408 	sub.w	r4, r5, #8
 801d3e4:	444c      	add	r4, r9
 801d3e6:	1b2d      	subs	r5, r5, r4
 801d3e8:	1963      	adds	r3, r4, r5
 801d3ea:	42bb      	cmp	r3, r7
 801d3ec:	db04      	blt.n	801d3f8 <__s2b+0x78>
 801d3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3f2:	340a      	adds	r4, #10
 801d3f4:	2509      	movs	r5, #9
 801d3f6:	e7f6      	b.n	801d3e6 <__s2b+0x66>
 801d3f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d3fc:	4601      	mov	r1, r0
 801d3fe:	3b30      	subs	r3, #48	@ 0x30
 801d400:	220a      	movs	r2, #10
 801d402:	4630      	mov	r0, r6
 801d404:	f7ff ff76 	bl	801d2f4 <__multadd>
 801d408:	e7ee      	b.n	801d3e8 <__s2b+0x68>
 801d40a:	bf00      	nop
 801d40c:	0802222c 	.word	0x0802222c
 801d410:	0802223d 	.word	0x0802223d

0801d414 <__hi0bits>:
 801d414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d418:	4603      	mov	r3, r0
 801d41a:	bf36      	itet	cc
 801d41c:	0403      	lslcc	r3, r0, #16
 801d41e:	2000      	movcs	r0, #0
 801d420:	2010      	movcc	r0, #16
 801d422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d426:	bf3c      	itt	cc
 801d428:	021b      	lslcc	r3, r3, #8
 801d42a:	3008      	addcc	r0, #8
 801d42c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d430:	bf3c      	itt	cc
 801d432:	011b      	lslcc	r3, r3, #4
 801d434:	3004      	addcc	r0, #4
 801d436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d43a:	bf3c      	itt	cc
 801d43c:	009b      	lslcc	r3, r3, #2
 801d43e:	3002      	addcc	r0, #2
 801d440:	2b00      	cmp	r3, #0
 801d442:	db05      	blt.n	801d450 <__hi0bits+0x3c>
 801d444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d448:	f100 0001 	add.w	r0, r0, #1
 801d44c:	bf08      	it	eq
 801d44e:	2020      	moveq	r0, #32
 801d450:	4770      	bx	lr

0801d452 <__lo0bits>:
 801d452:	6803      	ldr	r3, [r0, #0]
 801d454:	4602      	mov	r2, r0
 801d456:	f013 0007 	ands.w	r0, r3, #7
 801d45a:	d00b      	beq.n	801d474 <__lo0bits+0x22>
 801d45c:	07d9      	lsls	r1, r3, #31
 801d45e:	d421      	bmi.n	801d4a4 <__lo0bits+0x52>
 801d460:	0798      	lsls	r0, r3, #30
 801d462:	bf49      	itett	mi
 801d464:	085b      	lsrmi	r3, r3, #1
 801d466:	089b      	lsrpl	r3, r3, #2
 801d468:	2001      	movmi	r0, #1
 801d46a:	6013      	strmi	r3, [r2, #0]
 801d46c:	bf5c      	itt	pl
 801d46e:	6013      	strpl	r3, [r2, #0]
 801d470:	2002      	movpl	r0, #2
 801d472:	4770      	bx	lr
 801d474:	b299      	uxth	r1, r3
 801d476:	b909      	cbnz	r1, 801d47c <__lo0bits+0x2a>
 801d478:	0c1b      	lsrs	r3, r3, #16
 801d47a:	2010      	movs	r0, #16
 801d47c:	b2d9      	uxtb	r1, r3
 801d47e:	b909      	cbnz	r1, 801d484 <__lo0bits+0x32>
 801d480:	3008      	adds	r0, #8
 801d482:	0a1b      	lsrs	r3, r3, #8
 801d484:	0719      	lsls	r1, r3, #28
 801d486:	bf04      	itt	eq
 801d488:	091b      	lsreq	r3, r3, #4
 801d48a:	3004      	addeq	r0, #4
 801d48c:	0799      	lsls	r1, r3, #30
 801d48e:	bf04      	itt	eq
 801d490:	089b      	lsreq	r3, r3, #2
 801d492:	3002      	addeq	r0, #2
 801d494:	07d9      	lsls	r1, r3, #31
 801d496:	d403      	bmi.n	801d4a0 <__lo0bits+0x4e>
 801d498:	085b      	lsrs	r3, r3, #1
 801d49a:	f100 0001 	add.w	r0, r0, #1
 801d49e:	d003      	beq.n	801d4a8 <__lo0bits+0x56>
 801d4a0:	6013      	str	r3, [r2, #0]
 801d4a2:	4770      	bx	lr
 801d4a4:	2000      	movs	r0, #0
 801d4a6:	4770      	bx	lr
 801d4a8:	2020      	movs	r0, #32
 801d4aa:	4770      	bx	lr

0801d4ac <__i2b>:
 801d4ac:	b510      	push	{r4, lr}
 801d4ae:	460c      	mov	r4, r1
 801d4b0:	2101      	movs	r1, #1
 801d4b2:	f7ff febd 	bl	801d230 <_Balloc>
 801d4b6:	4602      	mov	r2, r0
 801d4b8:	b928      	cbnz	r0, 801d4c6 <__i2b+0x1a>
 801d4ba:	4b05      	ldr	r3, [pc, #20]	@ (801d4d0 <__i2b+0x24>)
 801d4bc:	4805      	ldr	r0, [pc, #20]	@ (801d4d4 <__i2b+0x28>)
 801d4be:	f240 1145 	movw	r1, #325	@ 0x145
 801d4c2:	f7fe ff3f 	bl	801c344 <__assert_func>
 801d4c6:	2301      	movs	r3, #1
 801d4c8:	6144      	str	r4, [r0, #20]
 801d4ca:	6103      	str	r3, [r0, #16]
 801d4cc:	bd10      	pop	{r4, pc}
 801d4ce:	bf00      	nop
 801d4d0:	0802222c 	.word	0x0802222c
 801d4d4:	0802223d 	.word	0x0802223d

0801d4d8 <__multiply>:
 801d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4dc:	4617      	mov	r7, r2
 801d4de:	690a      	ldr	r2, [r1, #16]
 801d4e0:	693b      	ldr	r3, [r7, #16]
 801d4e2:	429a      	cmp	r2, r3
 801d4e4:	bfa8      	it	ge
 801d4e6:	463b      	movge	r3, r7
 801d4e8:	4689      	mov	r9, r1
 801d4ea:	bfa4      	itt	ge
 801d4ec:	460f      	movge	r7, r1
 801d4ee:	4699      	movge	r9, r3
 801d4f0:	693d      	ldr	r5, [r7, #16]
 801d4f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d4f6:	68bb      	ldr	r3, [r7, #8]
 801d4f8:	6879      	ldr	r1, [r7, #4]
 801d4fa:	eb05 060a 	add.w	r6, r5, sl
 801d4fe:	42b3      	cmp	r3, r6
 801d500:	b085      	sub	sp, #20
 801d502:	bfb8      	it	lt
 801d504:	3101      	addlt	r1, #1
 801d506:	f7ff fe93 	bl	801d230 <_Balloc>
 801d50a:	b930      	cbnz	r0, 801d51a <__multiply+0x42>
 801d50c:	4602      	mov	r2, r0
 801d50e:	4b41      	ldr	r3, [pc, #260]	@ (801d614 <__multiply+0x13c>)
 801d510:	4841      	ldr	r0, [pc, #260]	@ (801d618 <__multiply+0x140>)
 801d512:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d516:	f7fe ff15 	bl	801c344 <__assert_func>
 801d51a:	f100 0414 	add.w	r4, r0, #20
 801d51e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d522:	4623      	mov	r3, r4
 801d524:	2200      	movs	r2, #0
 801d526:	4573      	cmp	r3, lr
 801d528:	d320      	bcc.n	801d56c <__multiply+0x94>
 801d52a:	f107 0814 	add.w	r8, r7, #20
 801d52e:	f109 0114 	add.w	r1, r9, #20
 801d532:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d536:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d53a:	9302      	str	r3, [sp, #8]
 801d53c:	1beb      	subs	r3, r5, r7
 801d53e:	3b15      	subs	r3, #21
 801d540:	f023 0303 	bic.w	r3, r3, #3
 801d544:	3304      	adds	r3, #4
 801d546:	3715      	adds	r7, #21
 801d548:	42bd      	cmp	r5, r7
 801d54a:	bf38      	it	cc
 801d54c:	2304      	movcc	r3, #4
 801d54e:	9301      	str	r3, [sp, #4]
 801d550:	9b02      	ldr	r3, [sp, #8]
 801d552:	9103      	str	r1, [sp, #12]
 801d554:	428b      	cmp	r3, r1
 801d556:	d80c      	bhi.n	801d572 <__multiply+0x9a>
 801d558:	2e00      	cmp	r6, #0
 801d55a:	dd03      	ble.n	801d564 <__multiply+0x8c>
 801d55c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d560:	2b00      	cmp	r3, #0
 801d562:	d055      	beq.n	801d610 <__multiply+0x138>
 801d564:	6106      	str	r6, [r0, #16]
 801d566:	b005      	add	sp, #20
 801d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d56c:	f843 2b04 	str.w	r2, [r3], #4
 801d570:	e7d9      	b.n	801d526 <__multiply+0x4e>
 801d572:	f8b1 a000 	ldrh.w	sl, [r1]
 801d576:	f1ba 0f00 	cmp.w	sl, #0
 801d57a:	d01f      	beq.n	801d5bc <__multiply+0xe4>
 801d57c:	46c4      	mov	ip, r8
 801d57e:	46a1      	mov	r9, r4
 801d580:	2700      	movs	r7, #0
 801d582:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d586:	f8d9 3000 	ldr.w	r3, [r9]
 801d58a:	fa1f fb82 	uxth.w	fp, r2
 801d58e:	b29b      	uxth	r3, r3
 801d590:	fb0a 330b 	mla	r3, sl, fp, r3
 801d594:	443b      	add	r3, r7
 801d596:	f8d9 7000 	ldr.w	r7, [r9]
 801d59a:	0c12      	lsrs	r2, r2, #16
 801d59c:	0c3f      	lsrs	r7, r7, #16
 801d59e:	fb0a 7202 	mla	r2, sl, r2, r7
 801d5a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d5a6:	b29b      	uxth	r3, r3
 801d5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d5ac:	4565      	cmp	r5, ip
 801d5ae:	f849 3b04 	str.w	r3, [r9], #4
 801d5b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d5b6:	d8e4      	bhi.n	801d582 <__multiply+0xaa>
 801d5b8:	9b01      	ldr	r3, [sp, #4]
 801d5ba:	50e7      	str	r7, [r4, r3]
 801d5bc:	9b03      	ldr	r3, [sp, #12]
 801d5be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d5c2:	3104      	adds	r1, #4
 801d5c4:	f1b9 0f00 	cmp.w	r9, #0
 801d5c8:	d020      	beq.n	801d60c <__multiply+0x134>
 801d5ca:	6823      	ldr	r3, [r4, #0]
 801d5cc:	4647      	mov	r7, r8
 801d5ce:	46a4      	mov	ip, r4
 801d5d0:	f04f 0a00 	mov.w	sl, #0
 801d5d4:	f8b7 b000 	ldrh.w	fp, [r7]
 801d5d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d5dc:	fb09 220b 	mla	r2, r9, fp, r2
 801d5e0:	4452      	add	r2, sl
 801d5e2:	b29b      	uxth	r3, r3
 801d5e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d5e8:	f84c 3b04 	str.w	r3, [ip], #4
 801d5ec:	f857 3b04 	ldr.w	r3, [r7], #4
 801d5f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d5f4:	f8bc 3000 	ldrh.w	r3, [ip]
 801d5f8:	fb09 330a 	mla	r3, r9, sl, r3
 801d5fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d600:	42bd      	cmp	r5, r7
 801d602:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d606:	d8e5      	bhi.n	801d5d4 <__multiply+0xfc>
 801d608:	9a01      	ldr	r2, [sp, #4]
 801d60a:	50a3      	str	r3, [r4, r2]
 801d60c:	3404      	adds	r4, #4
 801d60e:	e79f      	b.n	801d550 <__multiply+0x78>
 801d610:	3e01      	subs	r6, #1
 801d612:	e7a1      	b.n	801d558 <__multiply+0x80>
 801d614:	0802222c 	.word	0x0802222c
 801d618:	0802223d 	.word	0x0802223d

0801d61c <__pow5mult>:
 801d61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d620:	4615      	mov	r5, r2
 801d622:	f012 0203 	ands.w	r2, r2, #3
 801d626:	4607      	mov	r7, r0
 801d628:	460e      	mov	r6, r1
 801d62a:	d007      	beq.n	801d63c <__pow5mult+0x20>
 801d62c:	4c25      	ldr	r4, [pc, #148]	@ (801d6c4 <__pow5mult+0xa8>)
 801d62e:	3a01      	subs	r2, #1
 801d630:	2300      	movs	r3, #0
 801d632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d636:	f7ff fe5d 	bl	801d2f4 <__multadd>
 801d63a:	4606      	mov	r6, r0
 801d63c:	10ad      	asrs	r5, r5, #2
 801d63e:	d03d      	beq.n	801d6bc <__pow5mult+0xa0>
 801d640:	69fc      	ldr	r4, [r7, #28]
 801d642:	b97c      	cbnz	r4, 801d664 <__pow5mult+0x48>
 801d644:	2010      	movs	r0, #16
 801d646:	f7ff fd3d 	bl	801d0c4 <malloc>
 801d64a:	4602      	mov	r2, r0
 801d64c:	61f8      	str	r0, [r7, #28]
 801d64e:	b928      	cbnz	r0, 801d65c <__pow5mult+0x40>
 801d650:	4b1d      	ldr	r3, [pc, #116]	@ (801d6c8 <__pow5mult+0xac>)
 801d652:	481e      	ldr	r0, [pc, #120]	@ (801d6cc <__pow5mult+0xb0>)
 801d654:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d658:	f7fe fe74 	bl	801c344 <__assert_func>
 801d65c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d660:	6004      	str	r4, [r0, #0]
 801d662:	60c4      	str	r4, [r0, #12]
 801d664:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d66c:	b94c      	cbnz	r4, 801d682 <__pow5mult+0x66>
 801d66e:	f240 2171 	movw	r1, #625	@ 0x271
 801d672:	4638      	mov	r0, r7
 801d674:	f7ff ff1a 	bl	801d4ac <__i2b>
 801d678:	2300      	movs	r3, #0
 801d67a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d67e:	4604      	mov	r4, r0
 801d680:	6003      	str	r3, [r0, #0]
 801d682:	f04f 0900 	mov.w	r9, #0
 801d686:	07eb      	lsls	r3, r5, #31
 801d688:	d50a      	bpl.n	801d6a0 <__pow5mult+0x84>
 801d68a:	4631      	mov	r1, r6
 801d68c:	4622      	mov	r2, r4
 801d68e:	4638      	mov	r0, r7
 801d690:	f7ff ff22 	bl	801d4d8 <__multiply>
 801d694:	4631      	mov	r1, r6
 801d696:	4680      	mov	r8, r0
 801d698:	4638      	mov	r0, r7
 801d69a:	f7ff fe09 	bl	801d2b0 <_Bfree>
 801d69e:	4646      	mov	r6, r8
 801d6a0:	106d      	asrs	r5, r5, #1
 801d6a2:	d00b      	beq.n	801d6bc <__pow5mult+0xa0>
 801d6a4:	6820      	ldr	r0, [r4, #0]
 801d6a6:	b938      	cbnz	r0, 801d6b8 <__pow5mult+0x9c>
 801d6a8:	4622      	mov	r2, r4
 801d6aa:	4621      	mov	r1, r4
 801d6ac:	4638      	mov	r0, r7
 801d6ae:	f7ff ff13 	bl	801d4d8 <__multiply>
 801d6b2:	6020      	str	r0, [r4, #0]
 801d6b4:	f8c0 9000 	str.w	r9, [r0]
 801d6b8:	4604      	mov	r4, r0
 801d6ba:	e7e4      	b.n	801d686 <__pow5mult+0x6a>
 801d6bc:	4630      	mov	r0, r6
 801d6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6c2:	bf00      	nop
 801d6c4:	08022840 	.word	0x08022840
 801d6c8:	080221bd 	.word	0x080221bd
 801d6cc:	0802223d 	.word	0x0802223d

0801d6d0 <__lshift>:
 801d6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6d4:	460c      	mov	r4, r1
 801d6d6:	6849      	ldr	r1, [r1, #4]
 801d6d8:	6923      	ldr	r3, [r4, #16]
 801d6da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d6de:	68a3      	ldr	r3, [r4, #8]
 801d6e0:	4607      	mov	r7, r0
 801d6e2:	4691      	mov	r9, r2
 801d6e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d6e8:	f108 0601 	add.w	r6, r8, #1
 801d6ec:	42b3      	cmp	r3, r6
 801d6ee:	db0b      	blt.n	801d708 <__lshift+0x38>
 801d6f0:	4638      	mov	r0, r7
 801d6f2:	f7ff fd9d 	bl	801d230 <_Balloc>
 801d6f6:	4605      	mov	r5, r0
 801d6f8:	b948      	cbnz	r0, 801d70e <__lshift+0x3e>
 801d6fa:	4602      	mov	r2, r0
 801d6fc:	4b28      	ldr	r3, [pc, #160]	@ (801d7a0 <__lshift+0xd0>)
 801d6fe:	4829      	ldr	r0, [pc, #164]	@ (801d7a4 <__lshift+0xd4>)
 801d700:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d704:	f7fe fe1e 	bl	801c344 <__assert_func>
 801d708:	3101      	adds	r1, #1
 801d70a:	005b      	lsls	r3, r3, #1
 801d70c:	e7ee      	b.n	801d6ec <__lshift+0x1c>
 801d70e:	2300      	movs	r3, #0
 801d710:	f100 0114 	add.w	r1, r0, #20
 801d714:	f100 0210 	add.w	r2, r0, #16
 801d718:	4618      	mov	r0, r3
 801d71a:	4553      	cmp	r3, sl
 801d71c:	db33      	blt.n	801d786 <__lshift+0xb6>
 801d71e:	6920      	ldr	r0, [r4, #16]
 801d720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d724:	f104 0314 	add.w	r3, r4, #20
 801d728:	f019 091f 	ands.w	r9, r9, #31
 801d72c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d734:	d02b      	beq.n	801d78e <__lshift+0xbe>
 801d736:	f1c9 0e20 	rsb	lr, r9, #32
 801d73a:	468a      	mov	sl, r1
 801d73c:	2200      	movs	r2, #0
 801d73e:	6818      	ldr	r0, [r3, #0]
 801d740:	fa00 f009 	lsl.w	r0, r0, r9
 801d744:	4310      	orrs	r0, r2
 801d746:	f84a 0b04 	str.w	r0, [sl], #4
 801d74a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d74e:	459c      	cmp	ip, r3
 801d750:	fa22 f20e 	lsr.w	r2, r2, lr
 801d754:	d8f3      	bhi.n	801d73e <__lshift+0x6e>
 801d756:	ebac 0304 	sub.w	r3, ip, r4
 801d75a:	3b15      	subs	r3, #21
 801d75c:	f023 0303 	bic.w	r3, r3, #3
 801d760:	3304      	adds	r3, #4
 801d762:	f104 0015 	add.w	r0, r4, #21
 801d766:	4560      	cmp	r0, ip
 801d768:	bf88      	it	hi
 801d76a:	2304      	movhi	r3, #4
 801d76c:	50ca      	str	r2, [r1, r3]
 801d76e:	b10a      	cbz	r2, 801d774 <__lshift+0xa4>
 801d770:	f108 0602 	add.w	r6, r8, #2
 801d774:	3e01      	subs	r6, #1
 801d776:	4638      	mov	r0, r7
 801d778:	612e      	str	r6, [r5, #16]
 801d77a:	4621      	mov	r1, r4
 801d77c:	f7ff fd98 	bl	801d2b0 <_Bfree>
 801d780:	4628      	mov	r0, r5
 801d782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d786:	f842 0f04 	str.w	r0, [r2, #4]!
 801d78a:	3301      	adds	r3, #1
 801d78c:	e7c5      	b.n	801d71a <__lshift+0x4a>
 801d78e:	3904      	subs	r1, #4
 801d790:	f853 2b04 	ldr.w	r2, [r3], #4
 801d794:	f841 2f04 	str.w	r2, [r1, #4]!
 801d798:	459c      	cmp	ip, r3
 801d79a:	d8f9      	bhi.n	801d790 <__lshift+0xc0>
 801d79c:	e7ea      	b.n	801d774 <__lshift+0xa4>
 801d79e:	bf00      	nop
 801d7a0:	0802222c 	.word	0x0802222c
 801d7a4:	0802223d 	.word	0x0802223d

0801d7a8 <__mcmp>:
 801d7a8:	690a      	ldr	r2, [r1, #16]
 801d7aa:	4603      	mov	r3, r0
 801d7ac:	6900      	ldr	r0, [r0, #16]
 801d7ae:	1a80      	subs	r0, r0, r2
 801d7b0:	b530      	push	{r4, r5, lr}
 801d7b2:	d10e      	bne.n	801d7d2 <__mcmp+0x2a>
 801d7b4:	3314      	adds	r3, #20
 801d7b6:	3114      	adds	r1, #20
 801d7b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d7bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d7c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d7c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d7c8:	4295      	cmp	r5, r2
 801d7ca:	d003      	beq.n	801d7d4 <__mcmp+0x2c>
 801d7cc:	d205      	bcs.n	801d7da <__mcmp+0x32>
 801d7ce:	f04f 30ff 	mov.w	r0, #4294967295
 801d7d2:	bd30      	pop	{r4, r5, pc}
 801d7d4:	42a3      	cmp	r3, r4
 801d7d6:	d3f3      	bcc.n	801d7c0 <__mcmp+0x18>
 801d7d8:	e7fb      	b.n	801d7d2 <__mcmp+0x2a>
 801d7da:	2001      	movs	r0, #1
 801d7dc:	e7f9      	b.n	801d7d2 <__mcmp+0x2a>
	...

0801d7e0 <__mdiff>:
 801d7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e4:	4689      	mov	r9, r1
 801d7e6:	4606      	mov	r6, r0
 801d7e8:	4611      	mov	r1, r2
 801d7ea:	4648      	mov	r0, r9
 801d7ec:	4614      	mov	r4, r2
 801d7ee:	f7ff ffdb 	bl	801d7a8 <__mcmp>
 801d7f2:	1e05      	subs	r5, r0, #0
 801d7f4:	d112      	bne.n	801d81c <__mdiff+0x3c>
 801d7f6:	4629      	mov	r1, r5
 801d7f8:	4630      	mov	r0, r6
 801d7fa:	f7ff fd19 	bl	801d230 <_Balloc>
 801d7fe:	4602      	mov	r2, r0
 801d800:	b928      	cbnz	r0, 801d80e <__mdiff+0x2e>
 801d802:	4b3f      	ldr	r3, [pc, #252]	@ (801d900 <__mdiff+0x120>)
 801d804:	f240 2137 	movw	r1, #567	@ 0x237
 801d808:	483e      	ldr	r0, [pc, #248]	@ (801d904 <__mdiff+0x124>)
 801d80a:	f7fe fd9b 	bl	801c344 <__assert_func>
 801d80e:	2301      	movs	r3, #1
 801d810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d814:	4610      	mov	r0, r2
 801d816:	b003      	add	sp, #12
 801d818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d81c:	bfbc      	itt	lt
 801d81e:	464b      	movlt	r3, r9
 801d820:	46a1      	movlt	r9, r4
 801d822:	4630      	mov	r0, r6
 801d824:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d828:	bfba      	itte	lt
 801d82a:	461c      	movlt	r4, r3
 801d82c:	2501      	movlt	r5, #1
 801d82e:	2500      	movge	r5, #0
 801d830:	f7ff fcfe 	bl	801d230 <_Balloc>
 801d834:	4602      	mov	r2, r0
 801d836:	b918      	cbnz	r0, 801d840 <__mdiff+0x60>
 801d838:	4b31      	ldr	r3, [pc, #196]	@ (801d900 <__mdiff+0x120>)
 801d83a:	f240 2145 	movw	r1, #581	@ 0x245
 801d83e:	e7e3      	b.n	801d808 <__mdiff+0x28>
 801d840:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d844:	6926      	ldr	r6, [r4, #16]
 801d846:	60c5      	str	r5, [r0, #12]
 801d848:	f109 0310 	add.w	r3, r9, #16
 801d84c:	f109 0514 	add.w	r5, r9, #20
 801d850:	f104 0e14 	add.w	lr, r4, #20
 801d854:	f100 0b14 	add.w	fp, r0, #20
 801d858:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d85c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d860:	9301      	str	r3, [sp, #4]
 801d862:	46d9      	mov	r9, fp
 801d864:	f04f 0c00 	mov.w	ip, #0
 801d868:	9b01      	ldr	r3, [sp, #4]
 801d86a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d86e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d872:	9301      	str	r3, [sp, #4]
 801d874:	fa1f f38a 	uxth.w	r3, sl
 801d878:	4619      	mov	r1, r3
 801d87a:	b283      	uxth	r3, r0
 801d87c:	1acb      	subs	r3, r1, r3
 801d87e:	0c00      	lsrs	r0, r0, #16
 801d880:	4463      	add	r3, ip
 801d882:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d886:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d88a:	b29b      	uxth	r3, r3
 801d88c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d890:	4576      	cmp	r6, lr
 801d892:	f849 3b04 	str.w	r3, [r9], #4
 801d896:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d89a:	d8e5      	bhi.n	801d868 <__mdiff+0x88>
 801d89c:	1b33      	subs	r3, r6, r4
 801d89e:	3b15      	subs	r3, #21
 801d8a0:	f023 0303 	bic.w	r3, r3, #3
 801d8a4:	3415      	adds	r4, #21
 801d8a6:	3304      	adds	r3, #4
 801d8a8:	42a6      	cmp	r6, r4
 801d8aa:	bf38      	it	cc
 801d8ac:	2304      	movcc	r3, #4
 801d8ae:	441d      	add	r5, r3
 801d8b0:	445b      	add	r3, fp
 801d8b2:	461e      	mov	r6, r3
 801d8b4:	462c      	mov	r4, r5
 801d8b6:	4544      	cmp	r4, r8
 801d8b8:	d30e      	bcc.n	801d8d8 <__mdiff+0xf8>
 801d8ba:	f108 0103 	add.w	r1, r8, #3
 801d8be:	1b49      	subs	r1, r1, r5
 801d8c0:	f021 0103 	bic.w	r1, r1, #3
 801d8c4:	3d03      	subs	r5, #3
 801d8c6:	45a8      	cmp	r8, r5
 801d8c8:	bf38      	it	cc
 801d8ca:	2100      	movcc	r1, #0
 801d8cc:	440b      	add	r3, r1
 801d8ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d8d2:	b191      	cbz	r1, 801d8fa <__mdiff+0x11a>
 801d8d4:	6117      	str	r7, [r2, #16]
 801d8d6:	e79d      	b.n	801d814 <__mdiff+0x34>
 801d8d8:	f854 1b04 	ldr.w	r1, [r4], #4
 801d8dc:	46e6      	mov	lr, ip
 801d8de:	0c08      	lsrs	r0, r1, #16
 801d8e0:	fa1c fc81 	uxtah	ip, ip, r1
 801d8e4:	4471      	add	r1, lr
 801d8e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d8ea:	b289      	uxth	r1, r1
 801d8ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d8f0:	f846 1b04 	str.w	r1, [r6], #4
 801d8f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d8f8:	e7dd      	b.n	801d8b6 <__mdiff+0xd6>
 801d8fa:	3f01      	subs	r7, #1
 801d8fc:	e7e7      	b.n	801d8ce <__mdiff+0xee>
 801d8fe:	bf00      	nop
 801d900:	0802222c 	.word	0x0802222c
 801d904:	0802223d 	.word	0x0802223d

0801d908 <__ulp>:
 801d908:	b082      	sub	sp, #8
 801d90a:	ed8d 0b00 	vstr	d0, [sp]
 801d90e:	9a01      	ldr	r2, [sp, #4]
 801d910:	4b0f      	ldr	r3, [pc, #60]	@ (801d950 <__ulp+0x48>)
 801d912:	4013      	ands	r3, r2
 801d914:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d918:	2b00      	cmp	r3, #0
 801d91a:	dc08      	bgt.n	801d92e <__ulp+0x26>
 801d91c:	425b      	negs	r3, r3
 801d91e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d922:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d926:	da04      	bge.n	801d932 <__ulp+0x2a>
 801d928:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d92c:	4113      	asrs	r3, r2
 801d92e:	2200      	movs	r2, #0
 801d930:	e008      	b.n	801d944 <__ulp+0x3c>
 801d932:	f1a2 0314 	sub.w	r3, r2, #20
 801d936:	2b1e      	cmp	r3, #30
 801d938:	bfda      	itte	le
 801d93a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d93e:	40da      	lsrle	r2, r3
 801d940:	2201      	movgt	r2, #1
 801d942:	2300      	movs	r3, #0
 801d944:	4619      	mov	r1, r3
 801d946:	4610      	mov	r0, r2
 801d948:	ec41 0b10 	vmov	d0, r0, r1
 801d94c:	b002      	add	sp, #8
 801d94e:	4770      	bx	lr
 801d950:	7ff00000 	.word	0x7ff00000

0801d954 <__b2d>:
 801d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d958:	6906      	ldr	r6, [r0, #16]
 801d95a:	f100 0814 	add.w	r8, r0, #20
 801d95e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d962:	1f37      	subs	r7, r6, #4
 801d964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d968:	4610      	mov	r0, r2
 801d96a:	f7ff fd53 	bl	801d414 <__hi0bits>
 801d96e:	f1c0 0320 	rsb	r3, r0, #32
 801d972:	280a      	cmp	r0, #10
 801d974:	600b      	str	r3, [r1, #0]
 801d976:	491b      	ldr	r1, [pc, #108]	@ (801d9e4 <__b2d+0x90>)
 801d978:	dc15      	bgt.n	801d9a6 <__b2d+0x52>
 801d97a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d97e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d982:	45b8      	cmp	r8, r7
 801d984:	ea43 0501 	orr.w	r5, r3, r1
 801d988:	bf34      	ite	cc
 801d98a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d98e:	2300      	movcs	r3, #0
 801d990:	3015      	adds	r0, #21
 801d992:	fa02 f000 	lsl.w	r0, r2, r0
 801d996:	fa23 f30c 	lsr.w	r3, r3, ip
 801d99a:	4303      	orrs	r3, r0
 801d99c:	461c      	mov	r4, r3
 801d99e:	ec45 4b10 	vmov	d0, r4, r5
 801d9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9a6:	45b8      	cmp	r8, r7
 801d9a8:	bf3a      	itte	cc
 801d9aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d9ae:	f1a6 0708 	subcc.w	r7, r6, #8
 801d9b2:	2300      	movcs	r3, #0
 801d9b4:	380b      	subs	r0, #11
 801d9b6:	d012      	beq.n	801d9de <__b2d+0x8a>
 801d9b8:	f1c0 0120 	rsb	r1, r0, #32
 801d9bc:	fa23 f401 	lsr.w	r4, r3, r1
 801d9c0:	4082      	lsls	r2, r0
 801d9c2:	4322      	orrs	r2, r4
 801d9c4:	4547      	cmp	r7, r8
 801d9c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d9ca:	bf8c      	ite	hi
 801d9cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d9d0:	2200      	movls	r2, #0
 801d9d2:	4083      	lsls	r3, r0
 801d9d4:	40ca      	lsrs	r2, r1
 801d9d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d9da:	4313      	orrs	r3, r2
 801d9dc:	e7de      	b.n	801d99c <__b2d+0x48>
 801d9de:	ea42 0501 	orr.w	r5, r2, r1
 801d9e2:	e7db      	b.n	801d99c <__b2d+0x48>
 801d9e4:	3ff00000 	.word	0x3ff00000

0801d9e8 <__d2b>:
 801d9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d9ec:	460f      	mov	r7, r1
 801d9ee:	2101      	movs	r1, #1
 801d9f0:	ec59 8b10 	vmov	r8, r9, d0
 801d9f4:	4616      	mov	r6, r2
 801d9f6:	f7ff fc1b 	bl	801d230 <_Balloc>
 801d9fa:	4604      	mov	r4, r0
 801d9fc:	b930      	cbnz	r0, 801da0c <__d2b+0x24>
 801d9fe:	4602      	mov	r2, r0
 801da00:	4b23      	ldr	r3, [pc, #140]	@ (801da90 <__d2b+0xa8>)
 801da02:	4824      	ldr	r0, [pc, #144]	@ (801da94 <__d2b+0xac>)
 801da04:	f240 310f 	movw	r1, #783	@ 0x30f
 801da08:	f7fe fc9c 	bl	801c344 <__assert_func>
 801da0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801da10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801da14:	b10d      	cbz	r5, 801da1a <__d2b+0x32>
 801da16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801da1a:	9301      	str	r3, [sp, #4]
 801da1c:	f1b8 0300 	subs.w	r3, r8, #0
 801da20:	d023      	beq.n	801da6a <__d2b+0x82>
 801da22:	4668      	mov	r0, sp
 801da24:	9300      	str	r3, [sp, #0]
 801da26:	f7ff fd14 	bl	801d452 <__lo0bits>
 801da2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801da2e:	b1d0      	cbz	r0, 801da66 <__d2b+0x7e>
 801da30:	f1c0 0320 	rsb	r3, r0, #32
 801da34:	fa02 f303 	lsl.w	r3, r2, r3
 801da38:	430b      	orrs	r3, r1
 801da3a:	40c2      	lsrs	r2, r0
 801da3c:	6163      	str	r3, [r4, #20]
 801da3e:	9201      	str	r2, [sp, #4]
 801da40:	9b01      	ldr	r3, [sp, #4]
 801da42:	61a3      	str	r3, [r4, #24]
 801da44:	2b00      	cmp	r3, #0
 801da46:	bf0c      	ite	eq
 801da48:	2201      	moveq	r2, #1
 801da4a:	2202      	movne	r2, #2
 801da4c:	6122      	str	r2, [r4, #16]
 801da4e:	b1a5      	cbz	r5, 801da7a <__d2b+0x92>
 801da50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801da54:	4405      	add	r5, r0
 801da56:	603d      	str	r5, [r7, #0]
 801da58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801da5c:	6030      	str	r0, [r6, #0]
 801da5e:	4620      	mov	r0, r4
 801da60:	b003      	add	sp, #12
 801da62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da66:	6161      	str	r1, [r4, #20]
 801da68:	e7ea      	b.n	801da40 <__d2b+0x58>
 801da6a:	a801      	add	r0, sp, #4
 801da6c:	f7ff fcf1 	bl	801d452 <__lo0bits>
 801da70:	9b01      	ldr	r3, [sp, #4]
 801da72:	6163      	str	r3, [r4, #20]
 801da74:	3020      	adds	r0, #32
 801da76:	2201      	movs	r2, #1
 801da78:	e7e8      	b.n	801da4c <__d2b+0x64>
 801da7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801da7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801da82:	6038      	str	r0, [r7, #0]
 801da84:	6918      	ldr	r0, [r3, #16]
 801da86:	f7ff fcc5 	bl	801d414 <__hi0bits>
 801da8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801da8e:	e7e5      	b.n	801da5c <__d2b+0x74>
 801da90:	0802222c 	.word	0x0802222c
 801da94:	0802223d 	.word	0x0802223d

0801da98 <__ratio>:
 801da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da9c:	b085      	sub	sp, #20
 801da9e:	e9cd 1000 	strd	r1, r0, [sp]
 801daa2:	a902      	add	r1, sp, #8
 801daa4:	f7ff ff56 	bl	801d954 <__b2d>
 801daa8:	9800      	ldr	r0, [sp, #0]
 801daaa:	a903      	add	r1, sp, #12
 801daac:	ec55 4b10 	vmov	r4, r5, d0
 801dab0:	f7ff ff50 	bl	801d954 <__b2d>
 801dab4:	9b01      	ldr	r3, [sp, #4]
 801dab6:	6919      	ldr	r1, [r3, #16]
 801dab8:	9b00      	ldr	r3, [sp, #0]
 801daba:	691b      	ldr	r3, [r3, #16]
 801dabc:	1ac9      	subs	r1, r1, r3
 801dabe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801dac2:	1a9b      	subs	r3, r3, r2
 801dac4:	ec5b ab10 	vmov	sl, fp, d0
 801dac8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801dacc:	2b00      	cmp	r3, #0
 801dace:	bfce      	itee	gt
 801dad0:	462a      	movgt	r2, r5
 801dad2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dad6:	465a      	movle	r2, fp
 801dad8:	462f      	mov	r7, r5
 801dada:	46d9      	mov	r9, fp
 801dadc:	bfcc      	ite	gt
 801dade:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801dae2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801dae6:	464b      	mov	r3, r9
 801dae8:	4652      	mov	r2, sl
 801daea:	4620      	mov	r0, r4
 801daec:	4639      	mov	r1, r7
 801daee:	f7e2 febd 	bl	800086c <__aeabi_ddiv>
 801daf2:	ec41 0b10 	vmov	d0, r0, r1
 801daf6:	b005      	add	sp, #20
 801daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dafc <__copybits>:
 801dafc:	3901      	subs	r1, #1
 801dafe:	b570      	push	{r4, r5, r6, lr}
 801db00:	1149      	asrs	r1, r1, #5
 801db02:	6914      	ldr	r4, [r2, #16]
 801db04:	3101      	adds	r1, #1
 801db06:	f102 0314 	add.w	r3, r2, #20
 801db0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801db0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801db12:	1f05      	subs	r5, r0, #4
 801db14:	42a3      	cmp	r3, r4
 801db16:	d30c      	bcc.n	801db32 <__copybits+0x36>
 801db18:	1aa3      	subs	r3, r4, r2
 801db1a:	3b11      	subs	r3, #17
 801db1c:	f023 0303 	bic.w	r3, r3, #3
 801db20:	3211      	adds	r2, #17
 801db22:	42a2      	cmp	r2, r4
 801db24:	bf88      	it	hi
 801db26:	2300      	movhi	r3, #0
 801db28:	4418      	add	r0, r3
 801db2a:	2300      	movs	r3, #0
 801db2c:	4288      	cmp	r0, r1
 801db2e:	d305      	bcc.n	801db3c <__copybits+0x40>
 801db30:	bd70      	pop	{r4, r5, r6, pc}
 801db32:	f853 6b04 	ldr.w	r6, [r3], #4
 801db36:	f845 6f04 	str.w	r6, [r5, #4]!
 801db3a:	e7eb      	b.n	801db14 <__copybits+0x18>
 801db3c:	f840 3b04 	str.w	r3, [r0], #4
 801db40:	e7f4      	b.n	801db2c <__copybits+0x30>

0801db42 <__any_on>:
 801db42:	f100 0214 	add.w	r2, r0, #20
 801db46:	6900      	ldr	r0, [r0, #16]
 801db48:	114b      	asrs	r3, r1, #5
 801db4a:	4298      	cmp	r0, r3
 801db4c:	b510      	push	{r4, lr}
 801db4e:	db11      	blt.n	801db74 <__any_on+0x32>
 801db50:	dd0a      	ble.n	801db68 <__any_on+0x26>
 801db52:	f011 011f 	ands.w	r1, r1, #31
 801db56:	d007      	beq.n	801db68 <__any_on+0x26>
 801db58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801db5c:	fa24 f001 	lsr.w	r0, r4, r1
 801db60:	fa00 f101 	lsl.w	r1, r0, r1
 801db64:	428c      	cmp	r4, r1
 801db66:	d10b      	bne.n	801db80 <__any_on+0x3e>
 801db68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db6c:	4293      	cmp	r3, r2
 801db6e:	d803      	bhi.n	801db78 <__any_on+0x36>
 801db70:	2000      	movs	r0, #0
 801db72:	bd10      	pop	{r4, pc}
 801db74:	4603      	mov	r3, r0
 801db76:	e7f7      	b.n	801db68 <__any_on+0x26>
 801db78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801db7c:	2900      	cmp	r1, #0
 801db7e:	d0f5      	beq.n	801db6c <__any_on+0x2a>
 801db80:	2001      	movs	r0, #1
 801db82:	e7f6      	b.n	801db72 <__any_on+0x30>

0801db84 <_realloc_r>:
 801db84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db88:	4607      	mov	r7, r0
 801db8a:	4614      	mov	r4, r2
 801db8c:	460d      	mov	r5, r1
 801db8e:	b921      	cbnz	r1, 801db9a <_realloc_r+0x16>
 801db90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801db94:	4611      	mov	r1, r2
 801db96:	f7ff babf 	b.w	801d118 <_malloc_r>
 801db9a:	b92a      	cbnz	r2, 801dba8 <_realloc_r+0x24>
 801db9c:	f7ff fa48 	bl	801d030 <_free_r>
 801dba0:	4625      	mov	r5, r4
 801dba2:	4628      	mov	r0, r5
 801dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dba8:	f002 f803 	bl	801fbb2 <_malloc_usable_size_r>
 801dbac:	4284      	cmp	r4, r0
 801dbae:	4606      	mov	r6, r0
 801dbb0:	d802      	bhi.n	801dbb8 <_realloc_r+0x34>
 801dbb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801dbb6:	d8f4      	bhi.n	801dba2 <_realloc_r+0x1e>
 801dbb8:	4621      	mov	r1, r4
 801dbba:	4638      	mov	r0, r7
 801dbbc:	f7ff faac 	bl	801d118 <_malloc_r>
 801dbc0:	4680      	mov	r8, r0
 801dbc2:	b908      	cbnz	r0, 801dbc8 <_realloc_r+0x44>
 801dbc4:	4645      	mov	r5, r8
 801dbc6:	e7ec      	b.n	801dba2 <_realloc_r+0x1e>
 801dbc8:	42b4      	cmp	r4, r6
 801dbca:	4622      	mov	r2, r4
 801dbcc:	4629      	mov	r1, r5
 801dbce:	bf28      	it	cs
 801dbd0:	4632      	movcs	r2, r6
 801dbd2:	f7fe fba8 	bl	801c326 <memcpy>
 801dbd6:	4629      	mov	r1, r5
 801dbd8:	4638      	mov	r0, r7
 801dbda:	f7ff fa29 	bl	801d030 <_free_r>
 801dbde:	e7f1      	b.n	801dbc4 <_realloc_r+0x40>

0801dbe0 <sulp>:
 801dbe0:	b570      	push	{r4, r5, r6, lr}
 801dbe2:	4604      	mov	r4, r0
 801dbe4:	460d      	mov	r5, r1
 801dbe6:	ec45 4b10 	vmov	d0, r4, r5
 801dbea:	4616      	mov	r6, r2
 801dbec:	f7ff fe8c 	bl	801d908 <__ulp>
 801dbf0:	ec51 0b10 	vmov	r0, r1, d0
 801dbf4:	b17e      	cbz	r6, 801dc16 <sulp+0x36>
 801dbf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dbfa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	dd09      	ble.n	801dc16 <sulp+0x36>
 801dc02:	051b      	lsls	r3, r3, #20
 801dc04:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801dc08:	2400      	movs	r4, #0
 801dc0a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801dc0e:	4622      	mov	r2, r4
 801dc10:	462b      	mov	r3, r5
 801dc12:	f7e2 fd01 	bl	8000618 <__aeabi_dmul>
 801dc16:	ec41 0b10 	vmov	d0, r0, r1
 801dc1a:	bd70      	pop	{r4, r5, r6, pc}
 801dc1c:	0000      	movs	r0, r0
	...

0801dc20 <_strtod_l>:
 801dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc24:	b09f      	sub	sp, #124	@ 0x7c
 801dc26:	460c      	mov	r4, r1
 801dc28:	9217      	str	r2, [sp, #92]	@ 0x5c
 801dc2a:	2200      	movs	r2, #0
 801dc2c:	921a      	str	r2, [sp, #104]	@ 0x68
 801dc2e:	9005      	str	r0, [sp, #20]
 801dc30:	f04f 0a00 	mov.w	sl, #0
 801dc34:	f04f 0b00 	mov.w	fp, #0
 801dc38:	460a      	mov	r2, r1
 801dc3a:	9219      	str	r2, [sp, #100]	@ 0x64
 801dc3c:	7811      	ldrb	r1, [r2, #0]
 801dc3e:	292b      	cmp	r1, #43	@ 0x2b
 801dc40:	d04a      	beq.n	801dcd8 <_strtod_l+0xb8>
 801dc42:	d838      	bhi.n	801dcb6 <_strtod_l+0x96>
 801dc44:	290d      	cmp	r1, #13
 801dc46:	d832      	bhi.n	801dcae <_strtod_l+0x8e>
 801dc48:	2908      	cmp	r1, #8
 801dc4a:	d832      	bhi.n	801dcb2 <_strtod_l+0x92>
 801dc4c:	2900      	cmp	r1, #0
 801dc4e:	d03b      	beq.n	801dcc8 <_strtod_l+0xa8>
 801dc50:	2200      	movs	r2, #0
 801dc52:	920e      	str	r2, [sp, #56]	@ 0x38
 801dc54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801dc56:	782a      	ldrb	r2, [r5, #0]
 801dc58:	2a30      	cmp	r2, #48	@ 0x30
 801dc5a:	f040 80b2 	bne.w	801ddc2 <_strtod_l+0x1a2>
 801dc5e:	786a      	ldrb	r2, [r5, #1]
 801dc60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801dc64:	2a58      	cmp	r2, #88	@ 0x58
 801dc66:	d16e      	bne.n	801dd46 <_strtod_l+0x126>
 801dc68:	9302      	str	r3, [sp, #8]
 801dc6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc6c:	9301      	str	r3, [sp, #4]
 801dc6e:	ab1a      	add	r3, sp, #104	@ 0x68
 801dc70:	9300      	str	r3, [sp, #0]
 801dc72:	4a8f      	ldr	r2, [pc, #572]	@ (801deb0 <_strtod_l+0x290>)
 801dc74:	9805      	ldr	r0, [sp, #20]
 801dc76:	ab1b      	add	r3, sp, #108	@ 0x6c
 801dc78:	a919      	add	r1, sp, #100	@ 0x64
 801dc7a:	f001 fcb7 	bl	801f5ec <__gethex>
 801dc7e:	f010 060f 	ands.w	r6, r0, #15
 801dc82:	4604      	mov	r4, r0
 801dc84:	d005      	beq.n	801dc92 <_strtod_l+0x72>
 801dc86:	2e06      	cmp	r6, #6
 801dc88:	d128      	bne.n	801dcdc <_strtod_l+0xbc>
 801dc8a:	3501      	adds	r5, #1
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	9519      	str	r5, [sp, #100]	@ 0x64
 801dc90:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	f040 858e 	bne.w	801e7b6 <_strtod_l+0xb96>
 801dc9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc9c:	b1cb      	cbz	r3, 801dcd2 <_strtod_l+0xb2>
 801dc9e:	4652      	mov	r2, sl
 801dca0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801dca4:	ec43 2b10 	vmov	d0, r2, r3
 801dca8:	b01f      	add	sp, #124	@ 0x7c
 801dcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcae:	2920      	cmp	r1, #32
 801dcb0:	d1ce      	bne.n	801dc50 <_strtod_l+0x30>
 801dcb2:	3201      	adds	r2, #1
 801dcb4:	e7c1      	b.n	801dc3a <_strtod_l+0x1a>
 801dcb6:	292d      	cmp	r1, #45	@ 0x2d
 801dcb8:	d1ca      	bne.n	801dc50 <_strtod_l+0x30>
 801dcba:	2101      	movs	r1, #1
 801dcbc:	910e      	str	r1, [sp, #56]	@ 0x38
 801dcbe:	1c51      	adds	r1, r2, #1
 801dcc0:	9119      	str	r1, [sp, #100]	@ 0x64
 801dcc2:	7852      	ldrb	r2, [r2, #1]
 801dcc4:	2a00      	cmp	r2, #0
 801dcc6:	d1c5      	bne.n	801dc54 <_strtod_l+0x34>
 801dcc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dcca:	9419      	str	r4, [sp, #100]	@ 0x64
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	f040 8570 	bne.w	801e7b2 <_strtod_l+0xb92>
 801dcd2:	4652      	mov	r2, sl
 801dcd4:	465b      	mov	r3, fp
 801dcd6:	e7e5      	b.n	801dca4 <_strtod_l+0x84>
 801dcd8:	2100      	movs	r1, #0
 801dcda:	e7ef      	b.n	801dcbc <_strtod_l+0x9c>
 801dcdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dcde:	b13a      	cbz	r2, 801dcf0 <_strtod_l+0xd0>
 801dce0:	2135      	movs	r1, #53	@ 0x35
 801dce2:	a81c      	add	r0, sp, #112	@ 0x70
 801dce4:	f7ff ff0a 	bl	801dafc <__copybits>
 801dce8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dcea:	9805      	ldr	r0, [sp, #20]
 801dcec:	f7ff fae0 	bl	801d2b0 <_Bfree>
 801dcf0:	3e01      	subs	r6, #1
 801dcf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dcf4:	2e04      	cmp	r6, #4
 801dcf6:	d806      	bhi.n	801dd06 <_strtod_l+0xe6>
 801dcf8:	e8df f006 	tbb	[pc, r6]
 801dcfc:	201d0314 	.word	0x201d0314
 801dd00:	14          	.byte	0x14
 801dd01:	00          	.byte	0x00
 801dd02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801dd06:	05e1      	lsls	r1, r4, #23
 801dd08:	bf48      	it	mi
 801dd0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801dd0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801dd12:	0d1b      	lsrs	r3, r3, #20
 801dd14:	051b      	lsls	r3, r3, #20
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d1bb      	bne.n	801dc92 <_strtod_l+0x72>
 801dd1a:	f7fe fad7 	bl	801c2cc <__errno>
 801dd1e:	2322      	movs	r3, #34	@ 0x22
 801dd20:	6003      	str	r3, [r0, #0]
 801dd22:	e7b6      	b.n	801dc92 <_strtod_l+0x72>
 801dd24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801dd28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801dd2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801dd30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801dd34:	e7e7      	b.n	801dd06 <_strtod_l+0xe6>
 801dd36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801deb8 <_strtod_l+0x298>
 801dd3a:	e7e4      	b.n	801dd06 <_strtod_l+0xe6>
 801dd3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801dd40:	f04f 3aff 	mov.w	sl, #4294967295
 801dd44:	e7df      	b.n	801dd06 <_strtod_l+0xe6>
 801dd46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dd48:	1c5a      	adds	r2, r3, #1
 801dd4a:	9219      	str	r2, [sp, #100]	@ 0x64
 801dd4c:	785b      	ldrb	r3, [r3, #1]
 801dd4e:	2b30      	cmp	r3, #48	@ 0x30
 801dd50:	d0f9      	beq.n	801dd46 <_strtod_l+0x126>
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d09d      	beq.n	801dc92 <_strtod_l+0x72>
 801dd56:	2301      	movs	r3, #1
 801dd58:	2700      	movs	r7, #0
 801dd5a:	9308      	str	r3, [sp, #32]
 801dd5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dd5e:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd60:	970b      	str	r7, [sp, #44]	@ 0x2c
 801dd62:	46b9      	mov	r9, r7
 801dd64:	220a      	movs	r2, #10
 801dd66:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801dd68:	7805      	ldrb	r5, [r0, #0]
 801dd6a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801dd6e:	b2d9      	uxtb	r1, r3
 801dd70:	2909      	cmp	r1, #9
 801dd72:	d928      	bls.n	801ddc6 <_strtod_l+0x1a6>
 801dd74:	494f      	ldr	r1, [pc, #316]	@ (801deb4 <_strtod_l+0x294>)
 801dd76:	2201      	movs	r2, #1
 801dd78:	f7fe f9ee 	bl	801c158 <strncmp>
 801dd7c:	2800      	cmp	r0, #0
 801dd7e:	d032      	beq.n	801dde6 <_strtod_l+0x1c6>
 801dd80:	2000      	movs	r0, #0
 801dd82:	462a      	mov	r2, r5
 801dd84:	900a      	str	r0, [sp, #40]	@ 0x28
 801dd86:	464d      	mov	r5, r9
 801dd88:	4603      	mov	r3, r0
 801dd8a:	2a65      	cmp	r2, #101	@ 0x65
 801dd8c:	d001      	beq.n	801dd92 <_strtod_l+0x172>
 801dd8e:	2a45      	cmp	r2, #69	@ 0x45
 801dd90:	d114      	bne.n	801ddbc <_strtod_l+0x19c>
 801dd92:	b91d      	cbnz	r5, 801dd9c <_strtod_l+0x17c>
 801dd94:	9a08      	ldr	r2, [sp, #32]
 801dd96:	4302      	orrs	r2, r0
 801dd98:	d096      	beq.n	801dcc8 <_strtod_l+0xa8>
 801dd9a:	2500      	movs	r5, #0
 801dd9c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801dd9e:	1c62      	adds	r2, r4, #1
 801dda0:	9219      	str	r2, [sp, #100]	@ 0x64
 801dda2:	7862      	ldrb	r2, [r4, #1]
 801dda4:	2a2b      	cmp	r2, #43	@ 0x2b
 801dda6:	d07a      	beq.n	801de9e <_strtod_l+0x27e>
 801dda8:	2a2d      	cmp	r2, #45	@ 0x2d
 801ddaa:	d07e      	beq.n	801deaa <_strtod_l+0x28a>
 801ddac:	f04f 0c00 	mov.w	ip, #0
 801ddb0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801ddb4:	2909      	cmp	r1, #9
 801ddb6:	f240 8085 	bls.w	801dec4 <_strtod_l+0x2a4>
 801ddba:	9419      	str	r4, [sp, #100]	@ 0x64
 801ddbc:	f04f 0800 	mov.w	r8, #0
 801ddc0:	e0a5      	b.n	801df0e <_strtod_l+0x2ee>
 801ddc2:	2300      	movs	r3, #0
 801ddc4:	e7c8      	b.n	801dd58 <_strtod_l+0x138>
 801ddc6:	f1b9 0f08 	cmp.w	r9, #8
 801ddca:	bfd8      	it	le
 801ddcc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801ddce:	f100 0001 	add.w	r0, r0, #1
 801ddd2:	bfda      	itte	le
 801ddd4:	fb02 3301 	mlale	r3, r2, r1, r3
 801ddd8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801ddda:	fb02 3707 	mlagt	r7, r2, r7, r3
 801ddde:	f109 0901 	add.w	r9, r9, #1
 801dde2:	9019      	str	r0, [sp, #100]	@ 0x64
 801dde4:	e7bf      	b.n	801dd66 <_strtod_l+0x146>
 801dde6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dde8:	1c5a      	adds	r2, r3, #1
 801ddea:	9219      	str	r2, [sp, #100]	@ 0x64
 801ddec:	785a      	ldrb	r2, [r3, #1]
 801ddee:	f1b9 0f00 	cmp.w	r9, #0
 801ddf2:	d03b      	beq.n	801de6c <_strtod_l+0x24c>
 801ddf4:	900a      	str	r0, [sp, #40]	@ 0x28
 801ddf6:	464d      	mov	r5, r9
 801ddf8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801ddfc:	2b09      	cmp	r3, #9
 801ddfe:	d912      	bls.n	801de26 <_strtod_l+0x206>
 801de00:	2301      	movs	r3, #1
 801de02:	e7c2      	b.n	801dd8a <_strtod_l+0x16a>
 801de04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801de06:	1c5a      	adds	r2, r3, #1
 801de08:	9219      	str	r2, [sp, #100]	@ 0x64
 801de0a:	785a      	ldrb	r2, [r3, #1]
 801de0c:	3001      	adds	r0, #1
 801de0e:	2a30      	cmp	r2, #48	@ 0x30
 801de10:	d0f8      	beq.n	801de04 <_strtod_l+0x1e4>
 801de12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801de16:	2b08      	cmp	r3, #8
 801de18:	f200 84d2 	bhi.w	801e7c0 <_strtod_l+0xba0>
 801de1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801de1e:	900a      	str	r0, [sp, #40]	@ 0x28
 801de20:	2000      	movs	r0, #0
 801de22:	930c      	str	r3, [sp, #48]	@ 0x30
 801de24:	4605      	mov	r5, r0
 801de26:	3a30      	subs	r2, #48	@ 0x30
 801de28:	f100 0301 	add.w	r3, r0, #1
 801de2c:	d018      	beq.n	801de60 <_strtod_l+0x240>
 801de2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de30:	4419      	add	r1, r3
 801de32:	910a      	str	r1, [sp, #40]	@ 0x28
 801de34:	462e      	mov	r6, r5
 801de36:	f04f 0e0a 	mov.w	lr, #10
 801de3a:	1c71      	adds	r1, r6, #1
 801de3c:	eba1 0c05 	sub.w	ip, r1, r5
 801de40:	4563      	cmp	r3, ip
 801de42:	dc15      	bgt.n	801de70 <_strtod_l+0x250>
 801de44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801de48:	182b      	adds	r3, r5, r0
 801de4a:	2b08      	cmp	r3, #8
 801de4c:	f105 0501 	add.w	r5, r5, #1
 801de50:	4405      	add	r5, r0
 801de52:	dc1a      	bgt.n	801de8a <_strtod_l+0x26a>
 801de54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de56:	230a      	movs	r3, #10
 801de58:	fb03 2301 	mla	r3, r3, r1, r2
 801de5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de5e:	2300      	movs	r3, #0
 801de60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801de62:	1c51      	adds	r1, r2, #1
 801de64:	9119      	str	r1, [sp, #100]	@ 0x64
 801de66:	7852      	ldrb	r2, [r2, #1]
 801de68:	4618      	mov	r0, r3
 801de6a:	e7c5      	b.n	801ddf8 <_strtod_l+0x1d8>
 801de6c:	4648      	mov	r0, r9
 801de6e:	e7ce      	b.n	801de0e <_strtod_l+0x1ee>
 801de70:	2e08      	cmp	r6, #8
 801de72:	dc05      	bgt.n	801de80 <_strtod_l+0x260>
 801de74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de76:	fb0e f606 	mul.w	r6, lr, r6
 801de7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801de7c:	460e      	mov	r6, r1
 801de7e:	e7dc      	b.n	801de3a <_strtod_l+0x21a>
 801de80:	2910      	cmp	r1, #16
 801de82:	bfd8      	it	le
 801de84:	fb0e f707 	mulle.w	r7, lr, r7
 801de88:	e7f8      	b.n	801de7c <_strtod_l+0x25c>
 801de8a:	2b0f      	cmp	r3, #15
 801de8c:	bfdc      	itt	le
 801de8e:	230a      	movle	r3, #10
 801de90:	fb03 2707 	mlale	r7, r3, r7, r2
 801de94:	e7e3      	b.n	801de5e <_strtod_l+0x23e>
 801de96:	2300      	movs	r3, #0
 801de98:	930a      	str	r3, [sp, #40]	@ 0x28
 801de9a:	2301      	movs	r3, #1
 801de9c:	e77a      	b.n	801dd94 <_strtod_l+0x174>
 801de9e:	f04f 0c00 	mov.w	ip, #0
 801dea2:	1ca2      	adds	r2, r4, #2
 801dea4:	9219      	str	r2, [sp, #100]	@ 0x64
 801dea6:	78a2      	ldrb	r2, [r4, #2]
 801dea8:	e782      	b.n	801ddb0 <_strtod_l+0x190>
 801deaa:	f04f 0c01 	mov.w	ip, #1
 801deae:	e7f8      	b.n	801dea2 <_strtod_l+0x282>
 801deb0:	08022954 	.word	0x08022954
 801deb4:	08022296 	.word	0x08022296
 801deb8:	7ff00000 	.word	0x7ff00000
 801debc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801debe:	1c51      	adds	r1, r2, #1
 801dec0:	9119      	str	r1, [sp, #100]	@ 0x64
 801dec2:	7852      	ldrb	r2, [r2, #1]
 801dec4:	2a30      	cmp	r2, #48	@ 0x30
 801dec6:	d0f9      	beq.n	801debc <_strtod_l+0x29c>
 801dec8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801decc:	2908      	cmp	r1, #8
 801dece:	f63f af75 	bhi.w	801ddbc <_strtod_l+0x19c>
 801ded2:	3a30      	subs	r2, #48	@ 0x30
 801ded4:	9209      	str	r2, [sp, #36]	@ 0x24
 801ded6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ded8:	920f      	str	r2, [sp, #60]	@ 0x3c
 801deda:	f04f 080a 	mov.w	r8, #10
 801dede:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dee0:	1c56      	adds	r6, r2, #1
 801dee2:	9619      	str	r6, [sp, #100]	@ 0x64
 801dee4:	7852      	ldrb	r2, [r2, #1]
 801dee6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801deea:	f1be 0f09 	cmp.w	lr, #9
 801deee:	d939      	bls.n	801df64 <_strtod_l+0x344>
 801def0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801def2:	1a76      	subs	r6, r6, r1
 801def4:	2e08      	cmp	r6, #8
 801def6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801defa:	dc03      	bgt.n	801df04 <_strtod_l+0x2e4>
 801defc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801defe:	4588      	cmp	r8, r1
 801df00:	bfa8      	it	ge
 801df02:	4688      	movge	r8, r1
 801df04:	f1bc 0f00 	cmp.w	ip, #0
 801df08:	d001      	beq.n	801df0e <_strtod_l+0x2ee>
 801df0a:	f1c8 0800 	rsb	r8, r8, #0
 801df0e:	2d00      	cmp	r5, #0
 801df10:	d14e      	bne.n	801dfb0 <_strtod_l+0x390>
 801df12:	9908      	ldr	r1, [sp, #32]
 801df14:	4308      	orrs	r0, r1
 801df16:	f47f aebc 	bne.w	801dc92 <_strtod_l+0x72>
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	f47f aed4 	bne.w	801dcc8 <_strtod_l+0xa8>
 801df20:	2a69      	cmp	r2, #105	@ 0x69
 801df22:	d028      	beq.n	801df76 <_strtod_l+0x356>
 801df24:	dc25      	bgt.n	801df72 <_strtod_l+0x352>
 801df26:	2a49      	cmp	r2, #73	@ 0x49
 801df28:	d025      	beq.n	801df76 <_strtod_l+0x356>
 801df2a:	2a4e      	cmp	r2, #78	@ 0x4e
 801df2c:	f47f aecc 	bne.w	801dcc8 <_strtod_l+0xa8>
 801df30:	499a      	ldr	r1, [pc, #616]	@ (801e19c <_strtod_l+0x57c>)
 801df32:	a819      	add	r0, sp, #100	@ 0x64
 801df34:	f001 fd7c 	bl	801fa30 <__match>
 801df38:	2800      	cmp	r0, #0
 801df3a:	f43f aec5 	beq.w	801dcc8 <_strtod_l+0xa8>
 801df3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df40:	781b      	ldrb	r3, [r3, #0]
 801df42:	2b28      	cmp	r3, #40	@ 0x28
 801df44:	d12e      	bne.n	801dfa4 <_strtod_l+0x384>
 801df46:	4996      	ldr	r1, [pc, #600]	@ (801e1a0 <_strtod_l+0x580>)
 801df48:	aa1c      	add	r2, sp, #112	@ 0x70
 801df4a:	a819      	add	r0, sp, #100	@ 0x64
 801df4c:	f001 fd84 	bl	801fa58 <__hexnan>
 801df50:	2805      	cmp	r0, #5
 801df52:	d127      	bne.n	801dfa4 <_strtod_l+0x384>
 801df54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801df5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801df5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801df62:	e696      	b.n	801dc92 <_strtod_l+0x72>
 801df64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801df66:	fb08 2101 	mla	r1, r8, r1, r2
 801df6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801df6e:	9209      	str	r2, [sp, #36]	@ 0x24
 801df70:	e7b5      	b.n	801dede <_strtod_l+0x2be>
 801df72:	2a6e      	cmp	r2, #110	@ 0x6e
 801df74:	e7da      	b.n	801df2c <_strtod_l+0x30c>
 801df76:	498b      	ldr	r1, [pc, #556]	@ (801e1a4 <_strtod_l+0x584>)
 801df78:	a819      	add	r0, sp, #100	@ 0x64
 801df7a:	f001 fd59 	bl	801fa30 <__match>
 801df7e:	2800      	cmp	r0, #0
 801df80:	f43f aea2 	beq.w	801dcc8 <_strtod_l+0xa8>
 801df84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df86:	4988      	ldr	r1, [pc, #544]	@ (801e1a8 <_strtod_l+0x588>)
 801df88:	3b01      	subs	r3, #1
 801df8a:	a819      	add	r0, sp, #100	@ 0x64
 801df8c:	9319      	str	r3, [sp, #100]	@ 0x64
 801df8e:	f001 fd4f 	bl	801fa30 <__match>
 801df92:	b910      	cbnz	r0, 801df9a <_strtod_l+0x37a>
 801df94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df96:	3301      	adds	r3, #1
 801df98:	9319      	str	r3, [sp, #100]	@ 0x64
 801df9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801e1b8 <_strtod_l+0x598>
 801df9e:	f04f 0a00 	mov.w	sl, #0
 801dfa2:	e676      	b.n	801dc92 <_strtod_l+0x72>
 801dfa4:	4881      	ldr	r0, [pc, #516]	@ (801e1ac <_strtod_l+0x58c>)
 801dfa6:	f001 fa97 	bl	801f4d8 <nan>
 801dfaa:	ec5b ab10 	vmov	sl, fp, d0
 801dfae:	e670      	b.n	801dc92 <_strtod_l+0x72>
 801dfb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dfb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801dfb4:	eba8 0303 	sub.w	r3, r8, r3
 801dfb8:	f1b9 0f00 	cmp.w	r9, #0
 801dfbc:	bf08      	it	eq
 801dfbe:	46a9      	moveq	r9, r5
 801dfc0:	2d10      	cmp	r5, #16
 801dfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfc4:	462c      	mov	r4, r5
 801dfc6:	bfa8      	it	ge
 801dfc8:	2410      	movge	r4, #16
 801dfca:	f7e2 faab 	bl	8000524 <__aeabi_ui2d>
 801dfce:	2d09      	cmp	r5, #9
 801dfd0:	4682      	mov	sl, r0
 801dfd2:	468b      	mov	fp, r1
 801dfd4:	dc13      	bgt.n	801dffe <_strtod_l+0x3de>
 801dfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	f43f ae5a 	beq.w	801dc92 <_strtod_l+0x72>
 801dfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfe0:	dd78      	ble.n	801e0d4 <_strtod_l+0x4b4>
 801dfe2:	2b16      	cmp	r3, #22
 801dfe4:	dc5f      	bgt.n	801e0a6 <_strtod_l+0x486>
 801dfe6:	4972      	ldr	r1, [pc, #456]	@ (801e1b0 <_strtod_l+0x590>)
 801dfe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dfec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dff0:	4652      	mov	r2, sl
 801dff2:	465b      	mov	r3, fp
 801dff4:	f7e2 fb10 	bl	8000618 <__aeabi_dmul>
 801dff8:	4682      	mov	sl, r0
 801dffa:	468b      	mov	fp, r1
 801dffc:	e649      	b.n	801dc92 <_strtod_l+0x72>
 801dffe:	4b6c      	ldr	r3, [pc, #432]	@ (801e1b0 <_strtod_l+0x590>)
 801e000:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e004:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801e008:	f7e2 fb06 	bl	8000618 <__aeabi_dmul>
 801e00c:	4682      	mov	sl, r0
 801e00e:	4638      	mov	r0, r7
 801e010:	468b      	mov	fp, r1
 801e012:	f7e2 fa87 	bl	8000524 <__aeabi_ui2d>
 801e016:	4602      	mov	r2, r0
 801e018:	460b      	mov	r3, r1
 801e01a:	4650      	mov	r0, sl
 801e01c:	4659      	mov	r1, fp
 801e01e:	f7e2 f945 	bl	80002ac <__adddf3>
 801e022:	2d0f      	cmp	r5, #15
 801e024:	4682      	mov	sl, r0
 801e026:	468b      	mov	fp, r1
 801e028:	ddd5      	ble.n	801dfd6 <_strtod_l+0x3b6>
 801e02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e02c:	1b2c      	subs	r4, r5, r4
 801e02e:	441c      	add	r4, r3
 801e030:	2c00      	cmp	r4, #0
 801e032:	f340 8093 	ble.w	801e15c <_strtod_l+0x53c>
 801e036:	f014 030f 	ands.w	r3, r4, #15
 801e03a:	d00a      	beq.n	801e052 <_strtod_l+0x432>
 801e03c:	495c      	ldr	r1, [pc, #368]	@ (801e1b0 <_strtod_l+0x590>)
 801e03e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e042:	4652      	mov	r2, sl
 801e044:	465b      	mov	r3, fp
 801e046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e04a:	f7e2 fae5 	bl	8000618 <__aeabi_dmul>
 801e04e:	4682      	mov	sl, r0
 801e050:	468b      	mov	fp, r1
 801e052:	f034 040f 	bics.w	r4, r4, #15
 801e056:	d073      	beq.n	801e140 <_strtod_l+0x520>
 801e058:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801e05c:	dd49      	ble.n	801e0f2 <_strtod_l+0x4d2>
 801e05e:	2400      	movs	r4, #0
 801e060:	46a0      	mov	r8, r4
 801e062:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e064:	46a1      	mov	r9, r4
 801e066:	9a05      	ldr	r2, [sp, #20]
 801e068:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801e1b8 <_strtod_l+0x598>
 801e06c:	2322      	movs	r3, #34	@ 0x22
 801e06e:	6013      	str	r3, [r2, #0]
 801e070:	f04f 0a00 	mov.w	sl, #0
 801e074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e076:	2b00      	cmp	r3, #0
 801e078:	f43f ae0b 	beq.w	801dc92 <_strtod_l+0x72>
 801e07c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e07e:	9805      	ldr	r0, [sp, #20]
 801e080:	f7ff f916 	bl	801d2b0 <_Bfree>
 801e084:	9805      	ldr	r0, [sp, #20]
 801e086:	4649      	mov	r1, r9
 801e088:	f7ff f912 	bl	801d2b0 <_Bfree>
 801e08c:	9805      	ldr	r0, [sp, #20]
 801e08e:	4641      	mov	r1, r8
 801e090:	f7ff f90e 	bl	801d2b0 <_Bfree>
 801e094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e096:	9805      	ldr	r0, [sp, #20]
 801e098:	f7ff f90a 	bl	801d2b0 <_Bfree>
 801e09c:	9805      	ldr	r0, [sp, #20]
 801e09e:	4621      	mov	r1, r4
 801e0a0:	f7ff f906 	bl	801d2b0 <_Bfree>
 801e0a4:	e5f5      	b.n	801dc92 <_strtod_l+0x72>
 801e0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801e0ac:	4293      	cmp	r3, r2
 801e0ae:	dbbc      	blt.n	801e02a <_strtod_l+0x40a>
 801e0b0:	4c3f      	ldr	r4, [pc, #252]	@ (801e1b0 <_strtod_l+0x590>)
 801e0b2:	f1c5 050f 	rsb	r5, r5, #15
 801e0b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e0ba:	4652      	mov	r2, sl
 801e0bc:	465b      	mov	r3, fp
 801e0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e0c2:	f7e2 faa9 	bl	8000618 <__aeabi_dmul>
 801e0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0c8:	1b5d      	subs	r5, r3, r5
 801e0ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e0ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e0d2:	e78f      	b.n	801dff4 <_strtod_l+0x3d4>
 801e0d4:	3316      	adds	r3, #22
 801e0d6:	dba8      	blt.n	801e02a <_strtod_l+0x40a>
 801e0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0da:	eba3 0808 	sub.w	r8, r3, r8
 801e0de:	4b34      	ldr	r3, [pc, #208]	@ (801e1b0 <_strtod_l+0x590>)
 801e0e0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801e0e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 801e0e8:	4650      	mov	r0, sl
 801e0ea:	4659      	mov	r1, fp
 801e0ec:	f7e2 fbbe 	bl	800086c <__aeabi_ddiv>
 801e0f0:	e782      	b.n	801dff8 <_strtod_l+0x3d8>
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	4f2f      	ldr	r7, [pc, #188]	@ (801e1b4 <_strtod_l+0x594>)
 801e0f6:	1124      	asrs	r4, r4, #4
 801e0f8:	4650      	mov	r0, sl
 801e0fa:	4659      	mov	r1, fp
 801e0fc:	461e      	mov	r6, r3
 801e0fe:	2c01      	cmp	r4, #1
 801e100:	dc21      	bgt.n	801e146 <_strtod_l+0x526>
 801e102:	b10b      	cbz	r3, 801e108 <_strtod_l+0x4e8>
 801e104:	4682      	mov	sl, r0
 801e106:	468b      	mov	fp, r1
 801e108:	492a      	ldr	r1, [pc, #168]	@ (801e1b4 <_strtod_l+0x594>)
 801e10a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801e10e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801e112:	4652      	mov	r2, sl
 801e114:	465b      	mov	r3, fp
 801e116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e11a:	f7e2 fa7d 	bl	8000618 <__aeabi_dmul>
 801e11e:	4b26      	ldr	r3, [pc, #152]	@ (801e1b8 <_strtod_l+0x598>)
 801e120:	460a      	mov	r2, r1
 801e122:	400b      	ands	r3, r1
 801e124:	4925      	ldr	r1, [pc, #148]	@ (801e1bc <_strtod_l+0x59c>)
 801e126:	428b      	cmp	r3, r1
 801e128:	4682      	mov	sl, r0
 801e12a:	d898      	bhi.n	801e05e <_strtod_l+0x43e>
 801e12c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801e130:	428b      	cmp	r3, r1
 801e132:	bf86      	itte	hi
 801e134:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801e1c0 <_strtod_l+0x5a0>
 801e138:	f04f 3aff 	movhi.w	sl, #4294967295
 801e13c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801e140:	2300      	movs	r3, #0
 801e142:	9308      	str	r3, [sp, #32]
 801e144:	e076      	b.n	801e234 <_strtod_l+0x614>
 801e146:	07e2      	lsls	r2, r4, #31
 801e148:	d504      	bpl.n	801e154 <_strtod_l+0x534>
 801e14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e14e:	f7e2 fa63 	bl	8000618 <__aeabi_dmul>
 801e152:	2301      	movs	r3, #1
 801e154:	3601      	adds	r6, #1
 801e156:	1064      	asrs	r4, r4, #1
 801e158:	3708      	adds	r7, #8
 801e15a:	e7d0      	b.n	801e0fe <_strtod_l+0x4de>
 801e15c:	d0f0      	beq.n	801e140 <_strtod_l+0x520>
 801e15e:	4264      	negs	r4, r4
 801e160:	f014 020f 	ands.w	r2, r4, #15
 801e164:	d00a      	beq.n	801e17c <_strtod_l+0x55c>
 801e166:	4b12      	ldr	r3, [pc, #72]	@ (801e1b0 <_strtod_l+0x590>)
 801e168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e16c:	4650      	mov	r0, sl
 801e16e:	4659      	mov	r1, fp
 801e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e174:	f7e2 fb7a 	bl	800086c <__aeabi_ddiv>
 801e178:	4682      	mov	sl, r0
 801e17a:	468b      	mov	fp, r1
 801e17c:	1124      	asrs	r4, r4, #4
 801e17e:	d0df      	beq.n	801e140 <_strtod_l+0x520>
 801e180:	2c1f      	cmp	r4, #31
 801e182:	dd1f      	ble.n	801e1c4 <_strtod_l+0x5a4>
 801e184:	2400      	movs	r4, #0
 801e186:	46a0      	mov	r8, r4
 801e188:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e18a:	46a1      	mov	r9, r4
 801e18c:	9a05      	ldr	r2, [sp, #20]
 801e18e:	2322      	movs	r3, #34	@ 0x22
 801e190:	f04f 0a00 	mov.w	sl, #0
 801e194:	f04f 0b00 	mov.w	fp, #0
 801e198:	6013      	str	r3, [r2, #0]
 801e19a:	e76b      	b.n	801e074 <_strtod_l+0x454>
 801e19c:	08022139 	.word	0x08022139
 801e1a0:	08022940 	.word	0x08022940
 801e1a4:	08022131 	.word	0x08022131
 801e1a8:	080221b3 	.word	0x080221b3
 801e1ac:	080221af 	.word	0x080221af
 801e1b0:	08022878 	.word	0x08022878
 801e1b4:	08022850 	.word	0x08022850
 801e1b8:	7ff00000 	.word	0x7ff00000
 801e1bc:	7ca00000 	.word	0x7ca00000
 801e1c0:	7fefffff 	.word	0x7fefffff
 801e1c4:	f014 0310 	ands.w	r3, r4, #16
 801e1c8:	bf18      	it	ne
 801e1ca:	236a      	movne	r3, #106	@ 0x6a
 801e1cc:	4ea9      	ldr	r6, [pc, #676]	@ (801e474 <_strtod_l+0x854>)
 801e1ce:	9308      	str	r3, [sp, #32]
 801e1d0:	4650      	mov	r0, sl
 801e1d2:	4659      	mov	r1, fp
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	07e7      	lsls	r7, r4, #31
 801e1d8:	d504      	bpl.n	801e1e4 <_strtod_l+0x5c4>
 801e1da:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e1de:	f7e2 fa1b 	bl	8000618 <__aeabi_dmul>
 801e1e2:	2301      	movs	r3, #1
 801e1e4:	1064      	asrs	r4, r4, #1
 801e1e6:	f106 0608 	add.w	r6, r6, #8
 801e1ea:	d1f4      	bne.n	801e1d6 <_strtod_l+0x5b6>
 801e1ec:	b10b      	cbz	r3, 801e1f2 <_strtod_l+0x5d2>
 801e1ee:	4682      	mov	sl, r0
 801e1f0:	468b      	mov	fp, r1
 801e1f2:	9b08      	ldr	r3, [sp, #32]
 801e1f4:	b1b3      	cbz	r3, 801e224 <_strtod_l+0x604>
 801e1f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801e1fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	4659      	mov	r1, fp
 801e202:	dd0f      	ble.n	801e224 <_strtod_l+0x604>
 801e204:	2b1f      	cmp	r3, #31
 801e206:	dd56      	ble.n	801e2b6 <_strtod_l+0x696>
 801e208:	2b34      	cmp	r3, #52	@ 0x34
 801e20a:	bfde      	ittt	le
 801e20c:	f04f 33ff 	movle.w	r3, #4294967295
 801e210:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801e214:	4093      	lslle	r3, r2
 801e216:	f04f 0a00 	mov.w	sl, #0
 801e21a:	bfcc      	ite	gt
 801e21c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801e220:	ea03 0b01 	andle.w	fp, r3, r1
 801e224:	2200      	movs	r2, #0
 801e226:	2300      	movs	r3, #0
 801e228:	4650      	mov	r0, sl
 801e22a:	4659      	mov	r1, fp
 801e22c:	f7e2 fc5c 	bl	8000ae8 <__aeabi_dcmpeq>
 801e230:	2800      	cmp	r0, #0
 801e232:	d1a7      	bne.n	801e184 <_strtod_l+0x564>
 801e234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e236:	9300      	str	r3, [sp, #0]
 801e238:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e23a:	9805      	ldr	r0, [sp, #20]
 801e23c:	462b      	mov	r3, r5
 801e23e:	464a      	mov	r2, r9
 801e240:	f7ff f89e 	bl	801d380 <__s2b>
 801e244:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e246:	2800      	cmp	r0, #0
 801e248:	f43f af09 	beq.w	801e05e <_strtod_l+0x43e>
 801e24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e24e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e250:	2a00      	cmp	r2, #0
 801e252:	eba3 0308 	sub.w	r3, r3, r8
 801e256:	bfa8      	it	ge
 801e258:	2300      	movge	r3, #0
 801e25a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e25c:	2400      	movs	r4, #0
 801e25e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e262:	9316      	str	r3, [sp, #88]	@ 0x58
 801e264:	46a0      	mov	r8, r4
 801e266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e268:	9805      	ldr	r0, [sp, #20]
 801e26a:	6859      	ldr	r1, [r3, #4]
 801e26c:	f7fe ffe0 	bl	801d230 <_Balloc>
 801e270:	4681      	mov	r9, r0
 801e272:	2800      	cmp	r0, #0
 801e274:	f43f aef7 	beq.w	801e066 <_strtod_l+0x446>
 801e278:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e27a:	691a      	ldr	r2, [r3, #16]
 801e27c:	3202      	adds	r2, #2
 801e27e:	f103 010c 	add.w	r1, r3, #12
 801e282:	0092      	lsls	r2, r2, #2
 801e284:	300c      	adds	r0, #12
 801e286:	f7fe f84e 	bl	801c326 <memcpy>
 801e28a:	ec4b ab10 	vmov	d0, sl, fp
 801e28e:	9805      	ldr	r0, [sp, #20]
 801e290:	aa1c      	add	r2, sp, #112	@ 0x70
 801e292:	a91b      	add	r1, sp, #108	@ 0x6c
 801e294:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801e298:	f7ff fba6 	bl	801d9e8 <__d2b>
 801e29c:	901a      	str	r0, [sp, #104]	@ 0x68
 801e29e:	2800      	cmp	r0, #0
 801e2a0:	f43f aee1 	beq.w	801e066 <_strtod_l+0x446>
 801e2a4:	9805      	ldr	r0, [sp, #20]
 801e2a6:	2101      	movs	r1, #1
 801e2a8:	f7ff f900 	bl	801d4ac <__i2b>
 801e2ac:	4680      	mov	r8, r0
 801e2ae:	b948      	cbnz	r0, 801e2c4 <_strtod_l+0x6a4>
 801e2b0:	f04f 0800 	mov.w	r8, #0
 801e2b4:	e6d7      	b.n	801e066 <_strtod_l+0x446>
 801e2b6:	f04f 32ff 	mov.w	r2, #4294967295
 801e2ba:	fa02 f303 	lsl.w	r3, r2, r3
 801e2be:	ea03 0a0a 	and.w	sl, r3, sl
 801e2c2:	e7af      	b.n	801e224 <_strtod_l+0x604>
 801e2c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801e2c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801e2c8:	2d00      	cmp	r5, #0
 801e2ca:	bfab      	itete	ge
 801e2cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801e2ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801e2d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801e2d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801e2d4:	bfac      	ite	ge
 801e2d6:	18ef      	addge	r7, r5, r3
 801e2d8:	1b5e      	sublt	r6, r3, r5
 801e2da:	9b08      	ldr	r3, [sp, #32]
 801e2dc:	1aed      	subs	r5, r5, r3
 801e2de:	4415      	add	r5, r2
 801e2e0:	4b65      	ldr	r3, [pc, #404]	@ (801e478 <_strtod_l+0x858>)
 801e2e2:	3d01      	subs	r5, #1
 801e2e4:	429d      	cmp	r5, r3
 801e2e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801e2ea:	da50      	bge.n	801e38e <_strtod_l+0x76e>
 801e2ec:	1b5b      	subs	r3, r3, r5
 801e2ee:	2b1f      	cmp	r3, #31
 801e2f0:	eba2 0203 	sub.w	r2, r2, r3
 801e2f4:	f04f 0101 	mov.w	r1, #1
 801e2f8:	dc3d      	bgt.n	801e376 <_strtod_l+0x756>
 801e2fa:	fa01 f303 	lsl.w	r3, r1, r3
 801e2fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e300:	2300      	movs	r3, #0
 801e302:	9310      	str	r3, [sp, #64]	@ 0x40
 801e304:	18bd      	adds	r5, r7, r2
 801e306:	9b08      	ldr	r3, [sp, #32]
 801e308:	42af      	cmp	r7, r5
 801e30a:	4416      	add	r6, r2
 801e30c:	441e      	add	r6, r3
 801e30e:	463b      	mov	r3, r7
 801e310:	bfa8      	it	ge
 801e312:	462b      	movge	r3, r5
 801e314:	42b3      	cmp	r3, r6
 801e316:	bfa8      	it	ge
 801e318:	4633      	movge	r3, r6
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	bfc2      	ittt	gt
 801e31e:	1aed      	subgt	r5, r5, r3
 801e320:	1af6      	subgt	r6, r6, r3
 801e322:	1aff      	subgt	r7, r7, r3
 801e324:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e326:	2b00      	cmp	r3, #0
 801e328:	dd16      	ble.n	801e358 <_strtod_l+0x738>
 801e32a:	4641      	mov	r1, r8
 801e32c:	9805      	ldr	r0, [sp, #20]
 801e32e:	461a      	mov	r2, r3
 801e330:	f7ff f974 	bl	801d61c <__pow5mult>
 801e334:	4680      	mov	r8, r0
 801e336:	2800      	cmp	r0, #0
 801e338:	d0ba      	beq.n	801e2b0 <_strtod_l+0x690>
 801e33a:	4601      	mov	r1, r0
 801e33c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e33e:	9805      	ldr	r0, [sp, #20]
 801e340:	f7ff f8ca 	bl	801d4d8 <__multiply>
 801e344:	900a      	str	r0, [sp, #40]	@ 0x28
 801e346:	2800      	cmp	r0, #0
 801e348:	f43f ae8d 	beq.w	801e066 <_strtod_l+0x446>
 801e34c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e34e:	9805      	ldr	r0, [sp, #20]
 801e350:	f7fe ffae 	bl	801d2b0 <_Bfree>
 801e354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e356:	931a      	str	r3, [sp, #104]	@ 0x68
 801e358:	2d00      	cmp	r5, #0
 801e35a:	dc1d      	bgt.n	801e398 <_strtod_l+0x778>
 801e35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e35e:	2b00      	cmp	r3, #0
 801e360:	dd23      	ble.n	801e3aa <_strtod_l+0x78a>
 801e362:	4649      	mov	r1, r9
 801e364:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e366:	9805      	ldr	r0, [sp, #20]
 801e368:	f7ff f958 	bl	801d61c <__pow5mult>
 801e36c:	4681      	mov	r9, r0
 801e36e:	b9e0      	cbnz	r0, 801e3aa <_strtod_l+0x78a>
 801e370:	f04f 0900 	mov.w	r9, #0
 801e374:	e677      	b.n	801e066 <_strtod_l+0x446>
 801e376:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801e37a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801e37e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801e382:	35e2      	adds	r5, #226	@ 0xe2
 801e384:	fa01 f305 	lsl.w	r3, r1, r5
 801e388:	9310      	str	r3, [sp, #64]	@ 0x40
 801e38a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e38c:	e7ba      	b.n	801e304 <_strtod_l+0x6e4>
 801e38e:	2300      	movs	r3, #0
 801e390:	9310      	str	r3, [sp, #64]	@ 0x40
 801e392:	2301      	movs	r3, #1
 801e394:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e396:	e7b5      	b.n	801e304 <_strtod_l+0x6e4>
 801e398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e39a:	9805      	ldr	r0, [sp, #20]
 801e39c:	462a      	mov	r2, r5
 801e39e:	f7ff f997 	bl	801d6d0 <__lshift>
 801e3a2:	901a      	str	r0, [sp, #104]	@ 0x68
 801e3a4:	2800      	cmp	r0, #0
 801e3a6:	d1d9      	bne.n	801e35c <_strtod_l+0x73c>
 801e3a8:	e65d      	b.n	801e066 <_strtod_l+0x446>
 801e3aa:	2e00      	cmp	r6, #0
 801e3ac:	dd07      	ble.n	801e3be <_strtod_l+0x79e>
 801e3ae:	4649      	mov	r1, r9
 801e3b0:	9805      	ldr	r0, [sp, #20]
 801e3b2:	4632      	mov	r2, r6
 801e3b4:	f7ff f98c 	bl	801d6d0 <__lshift>
 801e3b8:	4681      	mov	r9, r0
 801e3ba:	2800      	cmp	r0, #0
 801e3bc:	d0d8      	beq.n	801e370 <_strtod_l+0x750>
 801e3be:	2f00      	cmp	r7, #0
 801e3c0:	dd08      	ble.n	801e3d4 <_strtod_l+0x7b4>
 801e3c2:	4641      	mov	r1, r8
 801e3c4:	9805      	ldr	r0, [sp, #20]
 801e3c6:	463a      	mov	r2, r7
 801e3c8:	f7ff f982 	bl	801d6d0 <__lshift>
 801e3cc:	4680      	mov	r8, r0
 801e3ce:	2800      	cmp	r0, #0
 801e3d0:	f43f ae49 	beq.w	801e066 <_strtod_l+0x446>
 801e3d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e3d6:	9805      	ldr	r0, [sp, #20]
 801e3d8:	464a      	mov	r2, r9
 801e3da:	f7ff fa01 	bl	801d7e0 <__mdiff>
 801e3de:	4604      	mov	r4, r0
 801e3e0:	2800      	cmp	r0, #0
 801e3e2:	f43f ae40 	beq.w	801e066 <_strtod_l+0x446>
 801e3e6:	68c3      	ldr	r3, [r0, #12]
 801e3e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	60c3      	str	r3, [r0, #12]
 801e3ee:	4641      	mov	r1, r8
 801e3f0:	f7ff f9da 	bl	801d7a8 <__mcmp>
 801e3f4:	2800      	cmp	r0, #0
 801e3f6:	da45      	bge.n	801e484 <_strtod_l+0x864>
 801e3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3fa:	ea53 030a 	orrs.w	r3, r3, sl
 801e3fe:	d16b      	bne.n	801e4d8 <_strtod_l+0x8b8>
 801e400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e404:	2b00      	cmp	r3, #0
 801e406:	d167      	bne.n	801e4d8 <_strtod_l+0x8b8>
 801e408:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e40c:	0d1b      	lsrs	r3, r3, #20
 801e40e:	051b      	lsls	r3, r3, #20
 801e410:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801e414:	d960      	bls.n	801e4d8 <_strtod_l+0x8b8>
 801e416:	6963      	ldr	r3, [r4, #20]
 801e418:	b913      	cbnz	r3, 801e420 <_strtod_l+0x800>
 801e41a:	6923      	ldr	r3, [r4, #16]
 801e41c:	2b01      	cmp	r3, #1
 801e41e:	dd5b      	ble.n	801e4d8 <_strtod_l+0x8b8>
 801e420:	4621      	mov	r1, r4
 801e422:	2201      	movs	r2, #1
 801e424:	9805      	ldr	r0, [sp, #20]
 801e426:	f7ff f953 	bl	801d6d0 <__lshift>
 801e42a:	4641      	mov	r1, r8
 801e42c:	4604      	mov	r4, r0
 801e42e:	f7ff f9bb 	bl	801d7a8 <__mcmp>
 801e432:	2800      	cmp	r0, #0
 801e434:	dd50      	ble.n	801e4d8 <_strtod_l+0x8b8>
 801e436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e43a:	9a08      	ldr	r2, [sp, #32]
 801e43c:	0d1b      	lsrs	r3, r3, #20
 801e43e:	051b      	lsls	r3, r3, #20
 801e440:	2a00      	cmp	r2, #0
 801e442:	d06a      	beq.n	801e51a <_strtod_l+0x8fa>
 801e444:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801e448:	d867      	bhi.n	801e51a <_strtod_l+0x8fa>
 801e44a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801e44e:	f67f ae9d 	bls.w	801e18c <_strtod_l+0x56c>
 801e452:	4b0a      	ldr	r3, [pc, #40]	@ (801e47c <_strtod_l+0x85c>)
 801e454:	4650      	mov	r0, sl
 801e456:	4659      	mov	r1, fp
 801e458:	2200      	movs	r2, #0
 801e45a:	f7e2 f8dd 	bl	8000618 <__aeabi_dmul>
 801e45e:	4b08      	ldr	r3, [pc, #32]	@ (801e480 <_strtod_l+0x860>)
 801e460:	400b      	ands	r3, r1
 801e462:	4682      	mov	sl, r0
 801e464:	468b      	mov	fp, r1
 801e466:	2b00      	cmp	r3, #0
 801e468:	f47f ae08 	bne.w	801e07c <_strtod_l+0x45c>
 801e46c:	9a05      	ldr	r2, [sp, #20]
 801e46e:	2322      	movs	r3, #34	@ 0x22
 801e470:	6013      	str	r3, [r2, #0]
 801e472:	e603      	b.n	801e07c <_strtod_l+0x45c>
 801e474:	08022968 	.word	0x08022968
 801e478:	fffffc02 	.word	0xfffffc02
 801e47c:	39500000 	.word	0x39500000
 801e480:	7ff00000 	.word	0x7ff00000
 801e484:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e488:	d165      	bne.n	801e556 <_strtod_l+0x936>
 801e48a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e48c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e490:	b35a      	cbz	r2, 801e4ea <_strtod_l+0x8ca>
 801e492:	4a9f      	ldr	r2, [pc, #636]	@ (801e710 <_strtod_l+0xaf0>)
 801e494:	4293      	cmp	r3, r2
 801e496:	d12b      	bne.n	801e4f0 <_strtod_l+0x8d0>
 801e498:	9b08      	ldr	r3, [sp, #32]
 801e49a:	4651      	mov	r1, sl
 801e49c:	b303      	cbz	r3, 801e4e0 <_strtod_l+0x8c0>
 801e49e:	4b9d      	ldr	r3, [pc, #628]	@ (801e714 <_strtod_l+0xaf4>)
 801e4a0:	465a      	mov	r2, fp
 801e4a2:	4013      	ands	r3, r2
 801e4a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801e4a8:	f04f 32ff 	mov.w	r2, #4294967295
 801e4ac:	d81b      	bhi.n	801e4e6 <_strtod_l+0x8c6>
 801e4ae:	0d1b      	lsrs	r3, r3, #20
 801e4b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801e4b4:	fa02 f303 	lsl.w	r3, r2, r3
 801e4b8:	4299      	cmp	r1, r3
 801e4ba:	d119      	bne.n	801e4f0 <_strtod_l+0x8d0>
 801e4bc:	4b96      	ldr	r3, [pc, #600]	@ (801e718 <_strtod_l+0xaf8>)
 801e4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4c0:	429a      	cmp	r2, r3
 801e4c2:	d102      	bne.n	801e4ca <_strtod_l+0x8aa>
 801e4c4:	3101      	adds	r1, #1
 801e4c6:	f43f adce 	beq.w	801e066 <_strtod_l+0x446>
 801e4ca:	4b92      	ldr	r3, [pc, #584]	@ (801e714 <_strtod_l+0xaf4>)
 801e4cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4ce:	401a      	ands	r2, r3
 801e4d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801e4d4:	f04f 0a00 	mov.w	sl, #0
 801e4d8:	9b08      	ldr	r3, [sp, #32]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	d1b9      	bne.n	801e452 <_strtod_l+0x832>
 801e4de:	e5cd      	b.n	801e07c <_strtod_l+0x45c>
 801e4e0:	f04f 33ff 	mov.w	r3, #4294967295
 801e4e4:	e7e8      	b.n	801e4b8 <_strtod_l+0x898>
 801e4e6:	4613      	mov	r3, r2
 801e4e8:	e7e6      	b.n	801e4b8 <_strtod_l+0x898>
 801e4ea:	ea53 030a 	orrs.w	r3, r3, sl
 801e4ee:	d0a2      	beq.n	801e436 <_strtod_l+0x816>
 801e4f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e4f2:	b1db      	cbz	r3, 801e52c <_strtod_l+0x90c>
 801e4f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4f6:	4213      	tst	r3, r2
 801e4f8:	d0ee      	beq.n	801e4d8 <_strtod_l+0x8b8>
 801e4fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4fc:	9a08      	ldr	r2, [sp, #32]
 801e4fe:	4650      	mov	r0, sl
 801e500:	4659      	mov	r1, fp
 801e502:	b1bb      	cbz	r3, 801e534 <_strtod_l+0x914>
 801e504:	f7ff fb6c 	bl	801dbe0 <sulp>
 801e508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e50c:	ec53 2b10 	vmov	r2, r3, d0
 801e510:	f7e1 fecc 	bl	80002ac <__adddf3>
 801e514:	4682      	mov	sl, r0
 801e516:	468b      	mov	fp, r1
 801e518:	e7de      	b.n	801e4d8 <_strtod_l+0x8b8>
 801e51a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e51e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e522:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e526:	f04f 3aff 	mov.w	sl, #4294967295
 801e52a:	e7d5      	b.n	801e4d8 <_strtod_l+0x8b8>
 801e52c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e52e:	ea13 0f0a 	tst.w	r3, sl
 801e532:	e7e1      	b.n	801e4f8 <_strtod_l+0x8d8>
 801e534:	f7ff fb54 	bl	801dbe0 <sulp>
 801e538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e53c:	ec53 2b10 	vmov	r2, r3, d0
 801e540:	f7e1 feb2 	bl	80002a8 <__aeabi_dsub>
 801e544:	2200      	movs	r2, #0
 801e546:	2300      	movs	r3, #0
 801e548:	4682      	mov	sl, r0
 801e54a:	468b      	mov	fp, r1
 801e54c:	f7e2 facc 	bl	8000ae8 <__aeabi_dcmpeq>
 801e550:	2800      	cmp	r0, #0
 801e552:	d0c1      	beq.n	801e4d8 <_strtod_l+0x8b8>
 801e554:	e61a      	b.n	801e18c <_strtod_l+0x56c>
 801e556:	4641      	mov	r1, r8
 801e558:	4620      	mov	r0, r4
 801e55a:	f7ff fa9d 	bl	801da98 <__ratio>
 801e55e:	ec57 6b10 	vmov	r6, r7, d0
 801e562:	2200      	movs	r2, #0
 801e564:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e568:	4630      	mov	r0, r6
 801e56a:	4639      	mov	r1, r7
 801e56c:	f7e2 fad0 	bl	8000b10 <__aeabi_dcmple>
 801e570:	2800      	cmp	r0, #0
 801e572:	d06f      	beq.n	801e654 <_strtod_l+0xa34>
 801e574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e576:	2b00      	cmp	r3, #0
 801e578:	d17a      	bne.n	801e670 <_strtod_l+0xa50>
 801e57a:	f1ba 0f00 	cmp.w	sl, #0
 801e57e:	d158      	bne.n	801e632 <_strtod_l+0xa12>
 801e580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e586:	2b00      	cmp	r3, #0
 801e588:	d15a      	bne.n	801e640 <_strtod_l+0xa20>
 801e58a:	4b64      	ldr	r3, [pc, #400]	@ (801e71c <_strtod_l+0xafc>)
 801e58c:	2200      	movs	r2, #0
 801e58e:	4630      	mov	r0, r6
 801e590:	4639      	mov	r1, r7
 801e592:	f7e2 fab3 	bl	8000afc <__aeabi_dcmplt>
 801e596:	2800      	cmp	r0, #0
 801e598:	d159      	bne.n	801e64e <_strtod_l+0xa2e>
 801e59a:	4630      	mov	r0, r6
 801e59c:	4639      	mov	r1, r7
 801e59e:	4b60      	ldr	r3, [pc, #384]	@ (801e720 <_strtod_l+0xb00>)
 801e5a0:	2200      	movs	r2, #0
 801e5a2:	f7e2 f839 	bl	8000618 <__aeabi_dmul>
 801e5a6:	4606      	mov	r6, r0
 801e5a8:	460f      	mov	r7, r1
 801e5aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801e5ae:	9606      	str	r6, [sp, #24]
 801e5b0:	9307      	str	r3, [sp, #28]
 801e5b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e5b6:	4d57      	ldr	r5, [pc, #348]	@ (801e714 <_strtod_l+0xaf4>)
 801e5b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801e5bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e5be:	401d      	ands	r5, r3
 801e5c0:	4b58      	ldr	r3, [pc, #352]	@ (801e724 <_strtod_l+0xb04>)
 801e5c2:	429d      	cmp	r5, r3
 801e5c4:	f040 80b2 	bne.w	801e72c <_strtod_l+0xb0c>
 801e5c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e5ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801e5ce:	ec4b ab10 	vmov	d0, sl, fp
 801e5d2:	f7ff f999 	bl	801d908 <__ulp>
 801e5d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e5da:	ec51 0b10 	vmov	r0, r1, d0
 801e5de:	f7e2 f81b 	bl	8000618 <__aeabi_dmul>
 801e5e2:	4652      	mov	r2, sl
 801e5e4:	465b      	mov	r3, fp
 801e5e6:	f7e1 fe61 	bl	80002ac <__adddf3>
 801e5ea:	460b      	mov	r3, r1
 801e5ec:	4949      	ldr	r1, [pc, #292]	@ (801e714 <_strtod_l+0xaf4>)
 801e5ee:	4a4e      	ldr	r2, [pc, #312]	@ (801e728 <_strtod_l+0xb08>)
 801e5f0:	4019      	ands	r1, r3
 801e5f2:	4291      	cmp	r1, r2
 801e5f4:	4682      	mov	sl, r0
 801e5f6:	d942      	bls.n	801e67e <_strtod_l+0xa5e>
 801e5f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e5fa:	4b47      	ldr	r3, [pc, #284]	@ (801e718 <_strtod_l+0xaf8>)
 801e5fc:	429a      	cmp	r2, r3
 801e5fe:	d103      	bne.n	801e608 <_strtod_l+0x9e8>
 801e600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e602:	3301      	adds	r3, #1
 801e604:	f43f ad2f 	beq.w	801e066 <_strtod_l+0x446>
 801e608:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801e718 <_strtod_l+0xaf8>
 801e60c:	f04f 3aff 	mov.w	sl, #4294967295
 801e610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e612:	9805      	ldr	r0, [sp, #20]
 801e614:	f7fe fe4c 	bl	801d2b0 <_Bfree>
 801e618:	9805      	ldr	r0, [sp, #20]
 801e61a:	4649      	mov	r1, r9
 801e61c:	f7fe fe48 	bl	801d2b0 <_Bfree>
 801e620:	9805      	ldr	r0, [sp, #20]
 801e622:	4641      	mov	r1, r8
 801e624:	f7fe fe44 	bl	801d2b0 <_Bfree>
 801e628:	9805      	ldr	r0, [sp, #20]
 801e62a:	4621      	mov	r1, r4
 801e62c:	f7fe fe40 	bl	801d2b0 <_Bfree>
 801e630:	e619      	b.n	801e266 <_strtod_l+0x646>
 801e632:	f1ba 0f01 	cmp.w	sl, #1
 801e636:	d103      	bne.n	801e640 <_strtod_l+0xa20>
 801e638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	f43f ada6 	beq.w	801e18c <_strtod_l+0x56c>
 801e640:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801e6f0 <_strtod_l+0xad0>
 801e644:	4f35      	ldr	r7, [pc, #212]	@ (801e71c <_strtod_l+0xafc>)
 801e646:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e64a:	2600      	movs	r6, #0
 801e64c:	e7b1      	b.n	801e5b2 <_strtod_l+0x992>
 801e64e:	4f34      	ldr	r7, [pc, #208]	@ (801e720 <_strtod_l+0xb00>)
 801e650:	2600      	movs	r6, #0
 801e652:	e7aa      	b.n	801e5aa <_strtod_l+0x98a>
 801e654:	4b32      	ldr	r3, [pc, #200]	@ (801e720 <_strtod_l+0xb00>)
 801e656:	4630      	mov	r0, r6
 801e658:	4639      	mov	r1, r7
 801e65a:	2200      	movs	r2, #0
 801e65c:	f7e1 ffdc 	bl	8000618 <__aeabi_dmul>
 801e660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e662:	4606      	mov	r6, r0
 801e664:	460f      	mov	r7, r1
 801e666:	2b00      	cmp	r3, #0
 801e668:	d09f      	beq.n	801e5aa <_strtod_l+0x98a>
 801e66a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e66e:	e7a0      	b.n	801e5b2 <_strtod_l+0x992>
 801e670:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801e6f8 <_strtod_l+0xad8>
 801e674:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e678:	ec57 6b17 	vmov	r6, r7, d7
 801e67c:	e799      	b.n	801e5b2 <_strtod_l+0x992>
 801e67e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801e682:	9b08      	ldr	r3, [sp, #32]
 801e684:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d1c1      	bne.n	801e610 <_strtod_l+0x9f0>
 801e68c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e690:	0d1b      	lsrs	r3, r3, #20
 801e692:	051b      	lsls	r3, r3, #20
 801e694:	429d      	cmp	r5, r3
 801e696:	d1bb      	bne.n	801e610 <_strtod_l+0x9f0>
 801e698:	4630      	mov	r0, r6
 801e69a:	4639      	mov	r1, r7
 801e69c:	f7e2 fb1c 	bl	8000cd8 <__aeabi_d2lz>
 801e6a0:	f7e1 ff8c 	bl	80005bc <__aeabi_l2d>
 801e6a4:	4602      	mov	r2, r0
 801e6a6:	460b      	mov	r3, r1
 801e6a8:	4630      	mov	r0, r6
 801e6aa:	4639      	mov	r1, r7
 801e6ac:	f7e1 fdfc 	bl	80002a8 <__aeabi_dsub>
 801e6b0:	460b      	mov	r3, r1
 801e6b2:	4602      	mov	r2, r0
 801e6b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801e6b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801e6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e6be:	ea46 060a 	orr.w	r6, r6, sl
 801e6c2:	431e      	orrs	r6, r3
 801e6c4:	d06f      	beq.n	801e7a6 <_strtod_l+0xb86>
 801e6c6:	a30e      	add	r3, pc, #56	@ (adr r3, 801e700 <_strtod_l+0xae0>)
 801e6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6cc:	f7e2 fa16 	bl	8000afc <__aeabi_dcmplt>
 801e6d0:	2800      	cmp	r0, #0
 801e6d2:	f47f acd3 	bne.w	801e07c <_strtod_l+0x45c>
 801e6d6:	a30c      	add	r3, pc, #48	@ (adr r3, 801e708 <_strtod_l+0xae8>)
 801e6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e6e0:	f7e2 fa2a 	bl	8000b38 <__aeabi_dcmpgt>
 801e6e4:	2800      	cmp	r0, #0
 801e6e6:	d093      	beq.n	801e610 <_strtod_l+0x9f0>
 801e6e8:	e4c8      	b.n	801e07c <_strtod_l+0x45c>
 801e6ea:	bf00      	nop
 801e6ec:	f3af 8000 	nop.w
 801e6f0:	00000000 	.word	0x00000000
 801e6f4:	bff00000 	.word	0xbff00000
 801e6f8:	00000000 	.word	0x00000000
 801e6fc:	3ff00000 	.word	0x3ff00000
 801e700:	94a03595 	.word	0x94a03595
 801e704:	3fdfffff 	.word	0x3fdfffff
 801e708:	35afe535 	.word	0x35afe535
 801e70c:	3fe00000 	.word	0x3fe00000
 801e710:	000fffff 	.word	0x000fffff
 801e714:	7ff00000 	.word	0x7ff00000
 801e718:	7fefffff 	.word	0x7fefffff
 801e71c:	3ff00000 	.word	0x3ff00000
 801e720:	3fe00000 	.word	0x3fe00000
 801e724:	7fe00000 	.word	0x7fe00000
 801e728:	7c9fffff 	.word	0x7c9fffff
 801e72c:	9b08      	ldr	r3, [sp, #32]
 801e72e:	b323      	cbz	r3, 801e77a <_strtod_l+0xb5a>
 801e730:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801e734:	d821      	bhi.n	801e77a <_strtod_l+0xb5a>
 801e736:	a328      	add	r3, pc, #160	@ (adr r3, 801e7d8 <_strtod_l+0xbb8>)
 801e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e73c:	4630      	mov	r0, r6
 801e73e:	4639      	mov	r1, r7
 801e740:	f7e2 f9e6 	bl	8000b10 <__aeabi_dcmple>
 801e744:	b1a0      	cbz	r0, 801e770 <_strtod_l+0xb50>
 801e746:	4639      	mov	r1, r7
 801e748:	4630      	mov	r0, r6
 801e74a:	f7e2 fa3d 	bl	8000bc8 <__aeabi_d2uiz>
 801e74e:	2801      	cmp	r0, #1
 801e750:	bf38      	it	cc
 801e752:	2001      	movcc	r0, #1
 801e754:	f7e1 fee6 	bl	8000524 <__aeabi_ui2d>
 801e758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e75a:	4606      	mov	r6, r0
 801e75c:	460f      	mov	r7, r1
 801e75e:	b9fb      	cbnz	r3, 801e7a0 <_strtod_l+0xb80>
 801e760:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e764:	9014      	str	r0, [sp, #80]	@ 0x50
 801e766:	9315      	str	r3, [sp, #84]	@ 0x54
 801e768:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801e76c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801e770:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e772:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801e776:	1b5b      	subs	r3, r3, r5
 801e778:	9311      	str	r3, [sp, #68]	@ 0x44
 801e77a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e77e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801e782:	f7ff f8c1 	bl	801d908 <__ulp>
 801e786:	4650      	mov	r0, sl
 801e788:	ec53 2b10 	vmov	r2, r3, d0
 801e78c:	4659      	mov	r1, fp
 801e78e:	f7e1 ff43 	bl	8000618 <__aeabi_dmul>
 801e792:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801e796:	f7e1 fd89 	bl	80002ac <__adddf3>
 801e79a:	4682      	mov	sl, r0
 801e79c:	468b      	mov	fp, r1
 801e79e:	e770      	b.n	801e682 <_strtod_l+0xa62>
 801e7a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801e7a4:	e7e0      	b.n	801e768 <_strtod_l+0xb48>
 801e7a6:	a30e      	add	r3, pc, #56	@ (adr r3, 801e7e0 <_strtod_l+0xbc0>)
 801e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ac:	f7e2 f9a6 	bl	8000afc <__aeabi_dcmplt>
 801e7b0:	e798      	b.n	801e6e4 <_strtod_l+0xac4>
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	930e      	str	r3, [sp, #56]	@ 0x38
 801e7b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e7b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e7ba:	6013      	str	r3, [r2, #0]
 801e7bc:	f7ff ba6d 	b.w	801dc9a <_strtod_l+0x7a>
 801e7c0:	2a65      	cmp	r2, #101	@ 0x65
 801e7c2:	f43f ab68 	beq.w	801de96 <_strtod_l+0x276>
 801e7c6:	2a45      	cmp	r2, #69	@ 0x45
 801e7c8:	f43f ab65 	beq.w	801de96 <_strtod_l+0x276>
 801e7cc:	2301      	movs	r3, #1
 801e7ce:	f7ff bba0 	b.w	801df12 <_strtod_l+0x2f2>
 801e7d2:	bf00      	nop
 801e7d4:	f3af 8000 	nop.w
 801e7d8:	ffc00000 	.word	0xffc00000
 801e7dc:	41dfffff 	.word	0x41dfffff
 801e7e0:	94a03595 	.word	0x94a03595
 801e7e4:	3fcfffff 	.word	0x3fcfffff

0801e7e8 <_strtod_r>:
 801e7e8:	4b01      	ldr	r3, [pc, #4]	@ (801e7f0 <_strtod_r+0x8>)
 801e7ea:	f7ff ba19 	b.w	801dc20 <_strtod_l>
 801e7ee:	bf00      	nop
 801e7f0:	200001b4 	.word	0x200001b4

0801e7f4 <__ssputs_r>:
 801e7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7f8:	688e      	ldr	r6, [r1, #8]
 801e7fa:	461f      	mov	r7, r3
 801e7fc:	42be      	cmp	r6, r7
 801e7fe:	680b      	ldr	r3, [r1, #0]
 801e800:	4682      	mov	sl, r0
 801e802:	460c      	mov	r4, r1
 801e804:	4690      	mov	r8, r2
 801e806:	d82d      	bhi.n	801e864 <__ssputs_r+0x70>
 801e808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e80c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e810:	d026      	beq.n	801e860 <__ssputs_r+0x6c>
 801e812:	6965      	ldr	r5, [r4, #20]
 801e814:	6909      	ldr	r1, [r1, #16]
 801e816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e81a:	eba3 0901 	sub.w	r9, r3, r1
 801e81e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e822:	1c7b      	adds	r3, r7, #1
 801e824:	444b      	add	r3, r9
 801e826:	106d      	asrs	r5, r5, #1
 801e828:	429d      	cmp	r5, r3
 801e82a:	bf38      	it	cc
 801e82c:	461d      	movcc	r5, r3
 801e82e:	0553      	lsls	r3, r2, #21
 801e830:	d527      	bpl.n	801e882 <__ssputs_r+0x8e>
 801e832:	4629      	mov	r1, r5
 801e834:	f7fe fc70 	bl	801d118 <_malloc_r>
 801e838:	4606      	mov	r6, r0
 801e83a:	b360      	cbz	r0, 801e896 <__ssputs_r+0xa2>
 801e83c:	6921      	ldr	r1, [r4, #16]
 801e83e:	464a      	mov	r2, r9
 801e840:	f7fd fd71 	bl	801c326 <memcpy>
 801e844:	89a3      	ldrh	r3, [r4, #12]
 801e846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e84e:	81a3      	strh	r3, [r4, #12]
 801e850:	6126      	str	r6, [r4, #16]
 801e852:	6165      	str	r5, [r4, #20]
 801e854:	444e      	add	r6, r9
 801e856:	eba5 0509 	sub.w	r5, r5, r9
 801e85a:	6026      	str	r6, [r4, #0]
 801e85c:	60a5      	str	r5, [r4, #8]
 801e85e:	463e      	mov	r6, r7
 801e860:	42be      	cmp	r6, r7
 801e862:	d900      	bls.n	801e866 <__ssputs_r+0x72>
 801e864:	463e      	mov	r6, r7
 801e866:	6820      	ldr	r0, [r4, #0]
 801e868:	4632      	mov	r2, r6
 801e86a:	4641      	mov	r1, r8
 801e86c:	f7fd fc52 	bl	801c114 <memmove>
 801e870:	68a3      	ldr	r3, [r4, #8]
 801e872:	1b9b      	subs	r3, r3, r6
 801e874:	60a3      	str	r3, [r4, #8]
 801e876:	6823      	ldr	r3, [r4, #0]
 801e878:	4433      	add	r3, r6
 801e87a:	6023      	str	r3, [r4, #0]
 801e87c:	2000      	movs	r0, #0
 801e87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e882:	462a      	mov	r2, r5
 801e884:	f7ff f97e 	bl	801db84 <_realloc_r>
 801e888:	4606      	mov	r6, r0
 801e88a:	2800      	cmp	r0, #0
 801e88c:	d1e0      	bne.n	801e850 <__ssputs_r+0x5c>
 801e88e:	6921      	ldr	r1, [r4, #16]
 801e890:	4650      	mov	r0, sl
 801e892:	f7fe fbcd 	bl	801d030 <_free_r>
 801e896:	230c      	movs	r3, #12
 801e898:	f8ca 3000 	str.w	r3, [sl]
 801e89c:	89a3      	ldrh	r3, [r4, #12]
 801e89e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e8a2:	81a3      	strh	r3, [r4, #12]
 801e8a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8a8:	e7e9      	b.n	801e87e <__ssputs_r+0x8a>
	...

0801e8ac <_svfiprintf_r>:
 801e8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8b0:	4698      	mov	r8, r3
 801e8b2:	898b      	ldrh	r3, [r1, #12]
 801e8b4:	061b      	lsls	r3, r3, #24
 801e8b6:	b09d      	sub	sp, #116	@ 0x74
 801e8b8:	4607      	mov	r7, r0
 801e8ba:	460d      	mov	r5, r1
 801e8bc:	4614      	mov	r4, r2
 801e8be:	d510      	bpl.n	801e8e2 <_svfiprintf_r+0x36>
 801e8c0:	690b      	ldr	r3, [r1, #16]
 801e8c2:	b973      	cbnz	r3, 801e8e2 <_svfiprintf_r+0x36>
 801e8c4:	2140      	movs	r1, #64	@ 0x40
 801e8c6:	f7fe fc27 	bl	801d118 <_malloc_r>
 801e8ca:	6028      	str	r0, [r5, #0]
 801e8cc:	6128      	str	r0, [r5, #16]
 801e8ce:	b930      	cbnz	r0, 801e8de <_svfiprintf_r+0x32>
 801e8d0:	230c      	movs	r3, #12
 801e8d2:	603b      	str	r3, [r7, #0]
 801e8d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8d8:	b01d      	add	sp, #116	@ 0x74
 801e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8de:	2340      	movs	r3, #64	@ 0x40
 801e8e0:	616b      	str	r3, [r5, #20]
 801e8e2:	2300      	movs	r3, #0
 801e8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8e6:	2320      	movs	r3, #32
 801e8e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e8ec:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8f0:	2330      	movs	r3, #48	@ 0x30
 801e8f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ea90 <_svfiprintf_r+0x1e4>
 801e8f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e8fa:	f04f 0901 	mov.w	r9, #1
 801e8fe:	4623      	mov	r3, r4
 801e900:	469a      	mov	sl, r3
 801e902:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e906:	b10a      	cbz	r2, 801e90c <_svfiprintf_r+0x60>
 801e908:	2a25      	cmp	r2, #37	@ 0x25
 801e90a:	d1f9      	bne.n	801e900 <_svfiprintf_r+0x54>
 801e90c:	ebba 0b04 	subs.w	fp, sl, r4
 801e910:	d00b      	beq.n	801e92a <_svfiprintf_r+0x7e>
 801e912:	465b      	mov	r3, fp
 801e914:	4622      	mov	r2, r4
 801e916:	4629      	mov	r1, r5
 801e918:	4638      	mov	r0, r7
 801e91a:	f7ff ff6b 	bl	801e7f4 <__ssputs_r>
 801e91e:	3001      	adds	r0, #1
 801e920:	f000 80a7 	beq.w	801ea72 <_svfiprintf_r+0x1c6>
 801e924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e926:	445a      	add	r2, fp
 801e928:	9209      	str	r2, [sp, #36]	@ 0x24
 801e92a:	f89a 3000 	ldrb.w	r3, [sl]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	f000 809f 	beq.w	801ea72 <_svfiprintf_r+0x1c6>
 801e934:	2300      	movs	r3, #0
 801e936:	f04f 32ff 	mov.w	r2, #4294967295
 801e93a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e93e:	f10a 0a01 	add.w	sl, sl, #1
 801e942:	9304      	str	r3, [sp, #16]
 801e944:	9307      	str	r3, [sp, #28]
 801e946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e94a:	931a      	str	r3, [sp, #104]	@ 0x68
 801e94c:	4654      	mov	r4, sl
 801e94e:	2205      	movs	r2, #5
 801e950:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e954:	484e      	ldr	r0, [pc, #312]	@ (801ea90 <_svfiprintf_r+0x1e4>)
 801e956:	f7e1 fc4b 	bl	80001f0 <memchr>
 801e95a:	9a04      	ldr	r2, [sp, #16]
 801e95c:	b9d8      	cbnz	r0, 801e996 <_svfiprintf_r+0xea>
 801e95e:	06d0      	lsls	r0, r2, #27
 801e960:	bf44      	itt	mi
 801e962:	2320      	movmi	r3, #32
 801e964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e968:	0711      	lsls	r1, r2, #28
 801e96a:	bf44      	itt	mi
 801e96c:	232b      	movmi	r3, #43	@ 0x2b
 801e96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e972:	f89a 3000 	ldrb.w	r3, [sl]
 801e976:	2b2a      	cmp	r3, #42	@ 0x2a
 801e978:	d015      	beq.n	801e9a6 <_svfiprintf_r+0xfa>
 801e97a:	9a07      	ldr	r2, [sp, #28]
 801e97c:	4654      	mov	r4, sl
 801e97e:	2000      	movs	r0, #0
 801e980:	f04f 0c0a 	mov.w	ip, #10
 801e984:	4621      	mov	r1, r4
 801e986:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e98a:	3b30      	subs	r3, #48	@ 0x30
 801e98c:	2b09      	cmp	r3, #9
 801e98e:	d94b      	bls.n	801ea28 <_svfiprintf_r+0x17c>
 801e990:	b1b0      	cbz	r0, 801e9c0 <_svfiprintf_r+0x114>
 801e992:	9207      	str	r2, [sp, #28]
 801e994:	e014      	b.n	801e9c0 <_svfiprintf_r+0x114>
 801e996:	eba0 0308 	sub.w	r3, r0, r8
 801e99a:	fa09 f303 	lsl.w	r3, r9, r3
 801e99e:	4313      	orrs	r3, r2
 801e9a0:	9304      	str	r3, [sp, #16]
 801e9a2:	46a2      	mov	sl, r4
 801e9a4:	e7d2      	b.n	801e94c <_svfiprintf_r+0xa0>
 801e9a6:	9b03      	ldr	r3, [sp, #12]
 801e9a8:	1d19      	adds	r1, r3, #4
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	9103      	str	r1, [sp, #12]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	bfbb      	ittet	lt
 801e9b2:	425b      	neglt	r3, r3
 801e9b4:	f042 0202 	orrlt.w	r2, r2, #2
 801e9b8:	9307      	strge	r3, [sp, #28]
 801e9ba:	9307      	strlt	r3, [sp, #28]
 801e9bc:	bfb8      	it	lt
 801e9be:	9204      	strlt	r2, [sp, #16]
 801e9c0:	7823      	ldrb	r3, [r4, #0]
 801e9c2:	2b2e      	cmp	r3, #46	@ 0x2e
 801e9c4:	d10a      	bne.n	801e9dc <_svfiprintf_r+0x130>
 801e9c6:	7863      	ldrb	r3, [r4, #1]
 801e9c8:	2b2a      	cmp	r3, #42	@ 0x2a
 801e9ca:	d132      	bne.n	801ea32 <_svfiprintf_r+0x186>
 801e9cc:	9b03      	ldr	r3, [sp, #12]
 801e9ce:	1d1a      	adds	r2, r3, #4
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	9203      	str	r2, [sp, #12]
 801e9d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e9d8:	3402      	adds	r4, #2
 801e9da:	9305      	str	r3, [sp, #20]
 801e9dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801eaa0 <_svfiprintf_r+0x1f4>
 801e9e0:	7821      	ldrb	r1, [r4, #0]
 801e9e2:	2203      	movs	r2, #3
 801e9e4:	4650      	mov	r0, sl
 801e9e6:	f7e1 fc03 	bl	80001f0 <memchr>
 801e9ea:	b138      	cbz	r0, 801e9fc <_svfiprintf_r+0x150>
 801e9ec:	9b04      	ldr	r3, [sp, #16]
 801e9ee:	eba0 000a 	sub.w	r0, r0, sl
 801e9f2:	2240      	movs	r2, #64	@ 0x40
 801e9f4:	4082      	lsls	r2, r0
 801e9f6:	4313      	orrs	r3, r2
 801e9f8:	3401      	adds	r4, #1
 801e9fa:	9304      	str	r3, [sp, #16]
 801e9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea00:	4824      	ldr	r0, [pc, #144]	@ (801ea94 <_svfiprintf_r+0x1e8>)
 801ea02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ea06:	2206      	movs	r2, #6
 801ea08:	f7e1 fbf2 	bl	80001f0 <memchr>
 801ea0c:	2800      	cmp	r0, #0
 801ea0e:	d036      	beq.n	801ea7e <_svfiprintf_r+0x1d2>
 801ea10:	4b21      	ldr	r3, [pc, #132]	@ (801ea98 <_svfiprintf_r+0x1ec>)
 801ea12:	bb1b      	cbnz	r3, 801ea5c <_svfiprintf_r+0x1b0>
 801ea14:	9b03      	ldr	r3, [sp, #12]
 801ea16:	3307      	adds	r3, #7
 801ea18:	f023 0307 	bic.w	r3, r3, #7
 801ea1c:	3308      	adds	r3, #8
 801ea1e:	9303      	str	r3, [sp, #12]
 801ea20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea22:	4433      	add	r3, r6
 801ea24:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea26:	e76a      	b.n	801e8fe <_svfiprintf_r+0x52>
 801ea28:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea2c:	460c      	mov	r4, r1
 801ea2e:	2001      	movs	r0, #1
 801ea30:	e7a8      	b.n	801e984 <_svfiprintf_r+0xd8>
 801ea32:	2300      	movs	r3, #0
 801ea34:	3401      	adds	r4, #1
 801ea36:	9305      	str	r3, [sp, #20]
 801ea38:	4619      	mov	r1, r3
 801ea3a:	f04f 0c0a 	mov.w	ip, #10
 801ea3e:	4620      	mov	r0, r4
 801ea40:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea44:	3a30      	subs	r2, #48	@ 0x30
 801ea46:	2a09      	cmp	r2, #9
 801ea48:	d903      	bls.n	801ea52 <_svfiprintf_r+0x1a6>
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d0c6      	beq.n	801e9dc <_svfiprintf_r+0x130>
 801ea4e:	9105      	str	r1, [sp, #20]
 801ea50:	e7c4      	b.n	801e9dc <_svfiprintf_r+0x130>
 801ea52:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea56:	4604      	mov	r4, r0
 801ea58:	2301      	movs	r3, #1
 801ea5a:	e7f0      	b.n	801ea3e <_svfiprintf_r+0x192>
 801ea5c:	ab03      	add	r3, sp, #12
 801ea5e:	9300      	str	r3, [sp, #0]
 801ea60:	462a      	mov	r2, r5
 801ea62:	4b0e      	ldr	r3, [pc, #56]	@ (801ea9c <_svfiprintf_r+0x1f0>)
 801ea64:	a904      	add	r1, sp, #16
 801ea66:	4638      	mov	r0, r7
 801ea68:	f7fc f9a6 	bl	801adb8 <_printf_float>
 801ea6c:	1c42      	adds	r2, r0, #1
 801ea6e:	4606      	mov	r6, r0
 801ea70:	d1d6      	bne.n	801ea20 <_svfiprintf_r+0x174>
 801ea72:	89ab      	ldrh	r3, [r5, #12]
 801ea74:	065b      	lsls	r3, r3, #25
 801ea76:	f53f af2d 	bmi.w	801e8d4 <_svfiprintf_r+0x28>
 801ea7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea7c:	e72c      	b.n	801e8d8 <_svfiprintf_r+0x2c>
 801ea7e:	ab03      	add	r3, sp, #12
 801ea80:	9300      	str	r3, [sp, #0]
 801ea82:	462a      	mov	r2, r5
 801ea84:	4b05      	ldr	r3, [pc, #20]	@ (801ea9c <_svfiprintf_r+0x1f0>)
 801ea86:	a904      	add	r1, sp, #16
 801ea88:	4638      	mov	r0, r7
 801ea8a:	f7fc fd79 	bl	801b580 <_printf_i>
 801ea8e:	e7ed      	b.n	801ea6c <_svfiprintf_r+0x1c0>
 801ea90:	0802213c 	.word	0x0802213c
 801ea94:	08022146 	.word	0x08022146
 801ea98:	0801adb9 	.word	0x0801adb9
 801ea9c:	0801e7f5 	.word	0x0801e7f5
 801eaa0:	08022142 	.word	0x08022142

0801eaa4 <_sungetc_r>:
 801eaa4:	b538      	push	{r3, r4, r5, lr}
 801eaa6:	1c4b      	adds	r3, r1, #1
 801eaa8:	4614      	mov	r4, r2
 801eaaa:	d103      	bne.n	801eab4 <_sungetc_r+0x10>
 801eaac:	f04f 35ff 	mov.w	r5, #4294967295
 801eab0:	4628      	mov	r0, r5
 801eab2:	bd38      	pop	{r3, r4, r5, pc}
 801eab4:	8993      	ldrh	r3, [r2, #12]
 801eab6:	f023 0320 	bic.w	r3, r3, #32
 801eaba:	8193      	strh	r3, [r2, #12]
 801eabc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801eabe:	6852      	ldr	r2, [r2, #4]
 801eac0:	b2cd      	uxtb	r5, r1
 801eac2:	b18b      	cbz	r3, 801eae8 <_sungetc_r+0x44>
 801eac4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801eac6:	4293      	cmp	r3, r2
 801eac8:	dd08      	ble.n	801eadc <_sungetc_r+0x38>
 801eaca:	6823      	ldr	r3, [r4, #0]
 801eacc:	1e5a      	subs	r2, r3, #1
 801eace:	6022      	str	r2, [r4, #0]
 801ead0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ead4:	6863      	ldr	r3, [r4, #4]
 801ead6:	3301      	adds	r3, #1
 801ead8:	6063      	str	r3, [r4, #4]
 801eada:	e7e9      	b.n	801eab0 <_sungetc_r+0xc>
 801eadc:	4621      	mov	r1, r4
 801eade:	f000 fc8c 	bl	801f3fa <__submore>
 801eae2:	2800      	cmp	r0, #0
 801eae4:	d0f1      	beq.n	801eaca <_sungetc_r+0x26>
 801eae6:	e7e1      	b.n	801eaac <_sungetc_r+0x8>
 801eae8:	6921      	ldr	r1, [r4, #16]
 801eaea:	6823      	ldr	r3, [r4, #0]
 801eaec:	b151      	cbz	r1, 801eb04 <_sungetc_r+0x60>
 801eaee:	4299      	cmp	r1, r3
 801eaf0:	d208      	bcs.n	801eb04 <_sungetc_r+0x60>
 801eaf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801eaf6:	42a9      	cmp	r1, r5
 801eaf8:	d104      	bne.n	801eb04 <_sungetc_r+0x60>
 801eafa:	3b01      	subs	r3, #1
 801eafc:	3201      	adds	r2, #1
 801eafe:	6023      	str	r3, [r4, #0]
 801eb00:	6062      	str	r2, [r4, #4]
 801eb02:	e7d5      	b.n	801eab0 <_sungetc_r+0xc>
 801eb04:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801eb08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eb0c:	6363      	str	r3, [r4, #52]	@ 0x34
 801eb0e:	2303      	movs	r3, #3
 801eb10:	63a3      	str	r3, [r4, #56]	@ 0x38
 801eb12:	4623      	mov	r3, r4
 801eb14:	f803 5f46 	strb.w	r5, [r3, #70]!
 801eb18:	6023      	str	r3, [r4, #0]
 801eb1a:	2301      	movs	r3, #1
 801eb1c:	e7dc      	b.n	801ead8 <_sungetc_r+0x34>

0801eb1e <__ssrefill_r>:
 801eb1e:	b510      	push	{r4, lr}
 801eb20:	460c      	mov	r4, r1
 801eb22:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801eb24:	b169      	cbz	r1, 801eb42 <__ssrefill_r+0x24>
 801eb26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eb2a:	4299      	cmp	r1, r3
 801eb2c:	d001      	beq.n	801eb32 <__ssrefill_r+0x14>
 801eb2e:	f7fe fa7f 	bl	801d030 <_free_r>
 801eb32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801eb34:	6063      	str	r3, [r4, #4]
 801eb36:	2000      	movs	r0, #0
 801eb38:	6360      	str	r0, [r4, #52]	@ 0x34
 801eb3a:	b113      	cbz	r3, 801eb42 <__ssrefill_r+0x24>
 801eb3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801eb3e:	6023      	str	r3, [r4, #0]
 801eb40:	bd10      	pop	{r4, pc}
 801eb42:	6923      	ldr	r3, [r4, #16]
 801eb44:	6023      	str	r3, [r4, #0]
 801eb46:	2300      	movs	r3, #0
 801eb48:	6063      	str	r3, [r4, #4]
 801eb4a:	89a3      	ldrh	r3, [r4, #12]
 801eb4c:	f043 0320 	orr.w	r3, r3, #32
 801eb50:	81a3      	strh	r3, [r4, #12]
 801eb52:	f04f 30ff 	mov.w	r0, #4294967295
 801eb56:	e7f3      	b.n	801eb40 <__ssrefill_r+0x22>

0801eb58 <__ssvfiscanf_r>:
 801eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb5c:	460c      	mov	r4, r1
 801eb5e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801eb62:	2100      	movs	r1, #0
 801eb64:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801eb68:	49a6      	ldr	r1, [pc, #664]	@ (801ee04 <__ssvfiscanf_r+0x2ac>)
 801eb6a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801eb6c:	f10d 0804 	add.w	r8, sp, #4
 801eb70:	49a5      	ldr	r1, [pc, #660]	@ (801ee08 <__ssvfiscanf_r+0x2b0>)
 801eb72:	4fa6      	ldr	r7, [pc, #664]	@ (801ee0c <__ssvfiscanf_r+0x2b4>)
 801eb74:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801eb78:	4606      	mov	r6, r0
 801eb7a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801eb7c:	9300      	str	r3, [sp, #0]
 801eb7e:	f892 9000 	ldrb.w	r9, [r2]
 801eb82:	f1b9 0f00 	cmp.w	r9, #0
 801eb86:	f000 8158 	beq.w	801ee3a <__ssvfiscanf_r+0x2e2>
 801eb8a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801eb8e:	f013 0308 	ands.w	r3, r3, #8
 801eb92:	f102 0501 	add.w	r5, r2, #1
 801eb96:	d019      	beq.n	801ebcc <__ssvfiscanf_r+0x74>
 801eb98:	6863      	ldr	r3, [r4, #4]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	dd0f      	ble.n	801ebbe <__ssvfiscanf_r+0x66>
 801eb9e:	6823      	ldr	r3, [r4, #0]
 801eba0:	781a      	ldrb	r2, [r3, #0]
 801eba2:	5cba      	ldrb	r2, [r7, r2]
 801eba4:	0712      	lsls	r2, r2, #28
 801eba6:	d401      	bmi.n	801ebac <__ssvfiscanf_r+0x54>
 801eba8:	462a      	mov	r2, r5
 801ebaa:	e7e8      	b.n	801eb7e <__ssvfiscanf_r+0x26>
 801ebac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801ebae:	3201      	adds	r2, #1
 801ebb0:	9245      	str	r2, [sp, #276]	@ 0x114
 801ebb2:	6862      	ldr	r2, [r4, #4]
 801ebb4:	3301      	adds	r3, #1
 801ebb6:	3a01      	subs	r2, #1
 801ebb8:	6062      	str	r2, [r4, #4]
 801ebba:	6023      	str	r3, [r4, #0]
 801ebbc:	e7ec      	b.n	801eb98 <__ssvfiscanf_r+0x40>
 801ebbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ebc0:	4621      	mov	r1, r4
 801ebc2:	4630      	mov	r0, r6
 801ebc4:	4798      	blx	r3
 801ebc6:	2800      	cmp	r0, #0
 801ebc8:	d0e9      	beq.n	801eb9e <__ssvfiscanf_r+0x46>
 801ebca:	e7ed      	b.n	801eba8 <__ssvfiscanf_r+0x50>
 801ebcc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801ebd0:	f040 8085 	bne.w	801ecde <__ssvfiscanf_r+0x186>
 801ebd4:	9341      	str	r3, [sp, #260]	@ 0x104
 801ebd6:	9343      	str	r3, [sp, #268]	@ 0x10c
 801ebd8:	7853      	ldrb	r3, [r2, #1]
 801ebda:	2b2a      	cmp	r3, #42	@ 0x2a
 801ebdc:	bf02      	ittt	eq
 801ebde:	2310      	moveq	r3, #16
 801ebe0:	1c95      	addeq	r5, r2, #2
 801ebe2:	9341      	streq	r3, [sp, #260]	@ 0x104
 801ebe4:	220a      	movs	r2, #10
 801ebe6:	46aa      	mov	sl, r5
 801ebe8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ebec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801ebf0:	2b09      	cmp	r3, #9
 801ebf2:	d91e      	bls.n	801ec32 <__ssvfiscanf_r+0xda>
 801ebf4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801ee10 <__ssvfiscanf_r+0x2b8>
 801ebf8:	2203      	movs	r2, #3
 801ebfa:	4658      	mov	r0, fp
 801ebfc:	f7e1 faf8 	bl	80001f0 <memchr>
 801ec00:	b138      	cbz	r0, 801ec12 <__ssvfiscanf_r+0xba>
 801ec02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ec04:	eba0 000b 	sub.w	r0, r0, fp
 801ec08:	2301      	movs	r3, #1
 801ec0a:	4083      	lsls	r3, r0
 801ec0c:	4313      	orrs	r3, r2
 801ec0e:	9341      	str	r3, [sp, #260]	@ 0x104
 801ec10:	4655      	mov	r5, sl
 801ec12:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ec16:	2b78      	cmp	r3, #120	@ 0x78
 801ec18:	d806      	bhi.n	801ec28 <__ssvfiscanf_r+0xd0>
 801ec1a:	2b57      	cmp	r3, #87	@ 0x57
 801ec1c:	d810      	bhi.n	801ec40 <__ssvfiscanf_r+0xe8>
 801ec1e:	2b25      	cmp	r3, #37	@ 0x25
 801ec20:	d05d      	beq.n	801ecde <__ssvfiscanf_r+0x186>
 801ec22:	d857      	bhi.n	801ecd4 <__ssvfiscanf_r+0x17c>
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d075      	beq.n	801ed14 <__ssvfiscanf_r+0x1bc>
 801ec28:	2303      	movs	r3, #3
 801ec2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801ec2c:	230a      	movs	r3, #10
 801ec2e:	9342      	str	r3, [sp, #264]	@ 0x108
 801ec30:	e088      	b.n	801ed44 <__ssvfiscanf_r+0x1ec>
 801ec32:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801ec34:	fb02 1103 	mla	r1, r2, r3, r1
 801ec38:	3930      	subs	r1, #48	@ 0x30
 801ec3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801ec3c:	4655      	mov	r5, sl
 801ec3e:	e7d2      	b.n	801ebe6 <__ssvfiscanf_r+0x8e>
 801ec40:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801ec44:	2a20      	cmp	r2, #32
 801ec46:	d8ef      	bhi.n	801ec28 <__ssvfiscanf_r+0xd0>
 801ec48:	a101      	add	r1, pc, #4	@ (adr r1, 801ec50 <__ssvfiscanf_r+0xf8>)
 801ec4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ec4e:	bf00      	nop
 801ec50:	0801ed23 	.word	0x0801ed23
 801ec54:	0801ec29 	.word	0x0801ec29
 801ec58:	0801ec29 	.word	0x0801ec29
 801ec5c:	0801ed7d 	.word	0x0801ed7d
 801ec60:	0801ec29 	.word	0x0801ec29
 801ec64:	0801ec29 	.word	0x0801ec29
 801ec68:	0801ec29 	.word	0x0801ec29
 801ec6c:	0801ec29 	.word	0x0801ec29
 801ec70:	0801ec29 	.word	0x0801ec29
 801ec74:	0801ec29 	.word	0x0801ec29
 801ec78:	0801ec29 	.word	0x0801ec29
 801ec7c:	0801ed93 	.word	0x0801ed93
 801ec80:	0801ed79 	.word	0x0801ed79
 801ec84:	0801ecdb 	.word	0x0801ecdb
 801ec88:	0801ecdb 	.word	0x0801ecdb
 801ec8c:	0801ecdb 	.word	0x0801ecdb
 801ec90:	0801ec29 	.word	0x0801ec29
 801ec94:	0801ed35 	.word	0x0801ed35
 801ec98:	0801ec29 	.word	0x0801ec29
 801ec9c:	0801ec29 	.word	0x0801ec29
 801eca0:	0801ec29 	.word	0x0801ec29
 801eca4:	0801ec29 	.word	0x0801ec29
 801eca8:	0801eda3 	.word	0x0801eda3
 801ecac:	0801ed3d 	.word	0x0801ed3d
 801ecb0:	0801ed1b 	.word	0x0801ed1b
 801ecb4:	0801ec29 	.word	0x0801ec29
 801ecb8:	0801ec29 	.word	0x0801ec29
 801ecbc:	0801ed9f 	.word	0x0801ed9f
 801ecc0:	0801ec29 	.word	0x0801ec29
 801ecc4:	0801ed79 	.word	0x0801ed79
 801ecc8:	0801ec29 	.word	0x0801ec29
 801eccc:	0801ec29 	.word	0x0801ec29
 801ecd0:	0801ed23 	.word	0x0801ed23
 801ecd4:	3b45      	subs	r3, #69	@ 0x45
 801ecd6:	2b02      	cmp	r3, #2
 801ecd8:	d8a6      	bhi.n	801ec28 <__ssvfiscanf_r+0xd0>
 801ecda:	2305      	movs	r3, #5
 801ecdc:	e031      	b.n	801ed42 <__ssvfiscanf_r+0x1ea>
 801ecde:	6863      	ldr	r3, [r4, #4]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	dd0d      	ble.n	801ed00 <__ssvfiscanf_r+0x1a8>
 801ece4:	6823      	ldr	r3, [r4, #0]
 801ece6:	781a      	ldrb	r2, [r3, #0]
 801ece8:	454a      	cmp	r2, r9
 801ecea:	f040 80a6 	bne.w	801ee3a <__ssvfiscanf_r+0x2e2>
 801ecee:	3301      	adds	r3, #1
 801ecf0:	6862      	ldr	r2, [r4, #4]
 801ecf2:	6023      	str	r3, [r4, #0]
 801ecf4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801ecf6:	3a01      	subs	r2, #1
 801ecf8:	3301      	adds	r3, #1
 801ecfa:	6062      	str	r2, [r4, #4]
 801ecfc:	9345      	str	r3, [sp, #276]	@ 0x114
 801ecfe:	e753      	b.n	801eba8 <__ssvfiscanf_r+0x50>
 801ed00:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ed02:	4621      	mov	r1, r4
 801ed04:	4630      	mov	r0, r6
 801ed06:	4798      	blx	r3
 801ed08:	2800      	cmp	r0, #0
 801ed0a:	d0eb      	beq.n	801ece4 <__ssvfiscanf_r+0x18c>
 801ed0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801ed0e:	2800      	cmp	r0, #0
 801ed10:	f040 808b 	bne.w	801ee2a <__ssvfiscanf_r+0x2d2>
 801ed14:	f04f 30ff 	mov.w	r0, #4294967295
 801ed18:	e08b      	b.n	801ee32 <__ssvfiscanf_r+0x2da>
 801ed1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ed1c:	f042 0220 	orr.w	r2, r2, #32
 801ed20:	9241      	str	r2, [sp, #260]	@ 0x104
 801ed22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ed24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801ed28:	9241      	str	r2, [sp, #260]	@ 0x104
 801ed2a:	2210      	movs	r2, #16
 801ed2c:	2b6e      	cmp	r3, #110	@ 0x6e
 801ed2e:	9242      	str	r2, [sp, #264]	@ 0x108
 801ed30:	d902      	bls.n	801ed38 <__ssvfiscanf_r+0x1e0>
 801ed32:	e005      	b.n	801ed40 <__ssvfiscanf_r+0x1e8>
 801ed34:	2300      	movs	r3, #0
 801ed36:	9342      	str	r3, [sp, #264]	@ 0x108
 801ed38:	2303      	movs	r3, #3
 801ed3a:	e002      	b.n	801ed42 <__ssvfiscanf_r+0x1ea>
 801ed3c:	2308      	movs	r3, #8
 801ed3e:	9342      	str	r3, [sp, #264]	@ 0x108
 801ed40:	2304      	movs	r3, #4
 801ed42:	9347      	str	r3, [sp, #284]	@ 0x11c
 801ed44:	6863      	ldr	r3, [r4, #4]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	dd39      	ble.n	801edbe <__ssvfiscanf_r+0x266>
 801ed4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ed4c:	0659      	lsls	r1, r3, #25
 801ed4e:	d404      	bmi.n	801ed5a <__ssvfiscanf_r+0x202>
 801ed50:	6823      	ldr	r3, [r4, #0]
 801ed52:	781a      	ldrb	r2, [r3, #0]
 801ed54:	5cba      	ldrb	r2, [r7, r2]
 801ed56:	0712      	lsls	r2, r2, #28
 801ed58:	d438      	bmi.n	801edcc <__ssvfiscanf_r+0x274>
 801ed5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801ed5c:	2b02      	cmp	r3, #2
 801ed5e:	dc47      	bgt.n	801edf0 <__ssvfiscanf_r+0x298>
 801ed60:	466b      	mov	r3, sp
 801ed62:	4622      	mov	r2, r4
 801ed64:	a941      	add	r1, sp, #260	@ 0x104
 801ed66:	4630      	mov	r0, r6
 801ed68:	f000 f86c 	bl	801ee44 <_scanf_chars>
 801ed6c:	2801      	cmp	r0, #1
 801ed6e:	d064      	beq.n	801ee3a <__ssvfiscanf_r+0x2e2>
 801ed70:	2802      	cmp	r0, #2
 801ed72:	f47f af19 	bne.w	801eba8 <__ssvfiscanf_r+0x50>
 801ed76:	e7c9      	b.n	801ed0c <__ssvfiscanf_r+0x1b4>
 801ed78:	220a      	movs	r2, #10
 801ed7a:	e7d7      	b.n	801ed2c <__ssvfiscanf_r+0x1d4>
 801ed7c:	4629      	mov	r1, r5
 801ed7e:	4640      	mov	r0, r8
 801ed80:	f000 fb02 	bl	801f388 <__sccl>
 801ed84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ed86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed8a:	9341      	str	r3, [sp, #260]	@ 0x104
 801ed8c:	4605      	mov	r5, r0
 801ed8e:	2301      	movs	r3, #1
 801ed90:	e7d7      	b.n	801ed42 <__ssvfiscanf_r+0x1ea>
 801ed92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ed94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed98:	9341      	str	r3, [sp, #260]	@ 0x104
 801ed9a:	2300      	movs	r3, #0
 801ed9c:	e7d1      	b.n	801ed42 <__ssvfiscanf_r+0x1ea>
 801ed9e:	2302      	movs	r3, #2
 801eda0:	e7cf      	b.n	801ed42 <__ssvfiscanf_r+0x1ea>
 801eda2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801eda4:	06c3      	lsls	r3, r0, #27
 801eda6:	f53f aeff 	bmi.w	801eba8 <__ssvfiscanf_r+0x50>
 801edaa:	9b00      	ldr	r3, [sp, #0]
 801edac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801edae:	1d19      	adds	r1, r3, #4
 801edb0:	9100      	str	r1, [sp, #0]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	07c0      	lsls	r0, r0, #31
 801edb6:	bf4c      	ite	mi
 801edb8:	801a      	strhmi	r2, [r3, #0]
 801edba:	601a      	strpl	r2, [r3, #0]
 801edbc:	e6f4      	b.n	801eba8 <__ssvfiscanf_r+0x50>
 801edbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801edc0:	4621      	mov	r1, r4
 801edc2:	4630      	mov	r0, r6
 801edc4:	4798      	blx	r3
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d0bf      	beq.n	801ed4a <__ssvfiscanf_r+0x1f2>
 801edca:	e79f      	b.n	801ed0c <__ssvfiscanf_r+0x1b4>
 801edcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801edce:	3201      	adds	r2, #1
 801edd0:	9245      	str	r2, [sp, #276]	@ 0x114
 801edd2:	6862      	ldr	r2, [r4, #4]
 801edd4:	3a01      	subs	r2, #1
 801edd6:	2a00      	cmp	r2, #0
 801edd8:	6062      	str	r2, [r4, #4]
 801edda:	dd02      	ble.n	801ede2 <__ssvfiscanf_r+0x28a>
 801eddc:	3301      	adds	r3, #1
 801edde:	6023      	str	r3, [r4, #0]
 801ede0:	e7b6      	b.n	801ed50 <__ssvfiscanf_r+0x1f8>
 801ede2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ede4:	4621      	mov	r1, r4
 801ede6:	4630      	mov	r0, r6
 801ede8:	4798      	blx	r3
 801edea:	2800      	cmp	r0, #0
 801edec:	d0b0      	beq.n	801ed50 <__ssvfiscanf_r+0x1f8>
 801edee:	e78d      	b.n	801ed0c <__ssvfiscanf_r+0x1b4>
 801edf0:	2b04      	cmp	r3, #4
 801edf2:	dc0f      	bgt.n	801ee14 <__ssvfiscanf_r+0x2bc>
 801edf4:	466b      	mov	r3, sp
 801edf6:	4622      	mov	r2, r4
 801edf8:	a941      	add	r1, sp, #260	@ 0x104
 801edfa:	4630      	mov	r0, r6
 801edfc:	f000 f87c 	bl	801eef8 <_scanf_i>
 801ee00:	e7b4      	b.n	801ed6c <__ssvfiscanf_r+0x214>
 801ee02:	bf00      	nop
 801ee04:	0801eaa5 	.word	0x0801eaa5
 801ee08:	0801eb1f 	.word	0x0801eb1f
 801ee0c:	0802273d 	.word	0x0802273d
 801ee10:	08022142 	.word	0x08022142
 801ee14:	4b0a      	ldr	r3, [pc, #40]	@ (801ee40 <__ssvfiscanf_r+0x2e8>)
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	f43f aec6 	beq.w	801eba8 <__ssvfiscanf_r+0x50>
 801ee1c:	466b      	mov	r3, sp
 801ee1e:	4622      	mov	r2, r4
 801ee20:	a941      	add	r1, sp, #260	@ 0x104
 801ee22:	4630      	mov	r0, r6
 801ee24:	f7fc fcca 	bl	801b7bc <_scanf_float>
 801ee28:	e7a0      	b.n	801ed6c <__ssvfiscanf_r+0x214>
 801ee2a:	89a3      	ldrh	r3, [r4, #12]
 801ee2c:	065b      	lsls	r3, r3, #25
 801ee2e:	f53f af71 	bmi.w	801ed14 <__ssvfiscanf_r+0x1bc>
 801ee32:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801ee36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801ee3c:	e7f9      	b.n	801ee32 <__ssvfiscanf_r+0x2da>
 801ee3e:	bf00      	nop
 801ee40:	0801b7bd 	.word	0x0801b7bd

0801ee44 <_scanf_chars>:
 801ee44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee48:	4615      	mov	r5, r2
 801ee4a:	688a      	ldr	r2, [r1, #8]
 801ee4c:	4680      	mov	r8, r0
 801ee4e:	460c      	mov	r4, r1
 801ee50:	b932      	cbnz	r2, 801ee60 <_scanf_chars+0x1c>
 801ee52:	698a      	ldr	r2, [r1, #24]
 801ee54:	2a00      	cmp	r2, #0
 801ee56:	bf14      	ite	ne
 801ee58:	f04f 32ff 	movne.w	r2, #4294967295
 801ee5c:	2201      	moveq	r2, #1
 801ee5e:	608a      	str	r2, [r1, #8]
 801ee60:	6822      	ldr	r2, [r4, #0]
 801ee62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801eef4 <_scanf_chars+0xb0>
 801ee66:	06d1      	lsls	r1, r2, #27
 801ee68:	bf5f      	itttt	pl
 801ee6a:	681a      	ldrpl	r2, [r3, #0]
 801ee6c:	1d11      	addpl	r1, r2, #4
 801ee6e:	6019      	strpl	r1, [r3, #0]
 801ee70:	6816      	ldrpl	r6, [r2, #0]
 801ee72:	2700      	movs	r7, #0
 801ee74:	69a0      	ldr	r0, [r4, #24]
 801ee76:	b188      	cbz	r0, 801ee9c <_scanf_chars+0x58>
 801ee78:	2801      	cmp	r0, #1
 801ee7a:	d107      	bne.n	801ee8c <_scanf_chars+0x48>
 801ee7c:	682b      	ldr	r3, [r5, #0]
 801ee7e:	781a      	ldrb	r2, [r3, #0]
 801ee80:	6963      	ldr	r3, [r4, #20]
 801ee82:	5c9b      	ldrb	r3, [r3, r2]
 801ee84:	b953      	cbnz	r3, 801ee9c <_scanf_chars+0x58>
 801ee86:	2f00      	cmp	r7, #0
 801ee88:	d031      	beq.n	801eeee <_scanf_chars+0xaa>
 801ee8a:	e022      	b.n	801eed2 <_scanf_chars+0x8e>
 801ee8c:	2802      	cmp	r0, #2
 801ee8e:	d120      	bne.n	801eed2 <_scanf_chars+0x8e>
 801ee90:	682b      	ldr	r3, [r5, #0]
 801ee92:	781b      	ldrb	r3, [r3, #0]
 801ee94:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ee98:	071b      	lsls	r3, r3, #28
 801ee9a:	d41a      	bmi.n	801eed2 <_scanf_chars+0x8e>
 801ee9c:	6823      	ldr	r3, [r4, #0]
 801ee9e:	06da      	lsls	r2, r3, #27
 801eea0:	bf5e      	ittt	pl
 801eea2:	682b      	ldrpl	r3, [r5, #0]
 801eea4:	781b      	ldrbpl	r3, [r3, #0]
 801eea6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801eeaa:	682a      	ldr	r2, [r5, #0]
 801eeac:	686b      	ldr	r3, [r5, #4]
 801eeae:	3201      	adds	r2, #1
 801eeb0:	602a      	str	r2, [r5, #0]
 801eeb2:	68a2      	ldr	r2, [r4, #8]
 801eeb4:	3b01      	subs	r3, #1
 801eeb6:	3a01      	subs	r2, #1
 801eeb8:	606b      	str	r3, [r5, #4]
 801eeba:	3701      	adds	r7, #1
 801eebc:	60a2      	str	r2, [r4, #8]
 801eebe:	b142      	cbz	r2, 801eed2 <_scanf_chars+0x8e>
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	dcd7      	bgt.n	801ee74 <_scanf_chars+0x30>
 801eec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801eec8:	4629      	mov	r1, r5
 801eeca:	4640      	mov	r0, r8
 801eecc:	4798      	blx	r3
 801eece:	2800      	cmp	r0, #0
 801eed0:	d0d0      	beq.n	801ee74 <_scanf_chars+0x30>
 801eed2:	6823      	ldr	r3, [r4, #0]
 801eed4:	f013 0310 	ands.w	r3, r3, #16
 801eed8:	d105      	bne.n	801eee6 <_scanf_chars+0xa2>
 801eeda:	68e2      	ldr	r2, [r4, #12]
 801eedc:	3201      	adds	r2, #1
 801eede:	60e2      	str	r2, [r4, #12]
 801eee0:	69a2      	ldr	r2, [r4, #24]
 801eee2:	b102      	cbz	r2, 801eee6 <_scanf_chars+0xa2>
 801eee4:	7033      	strb	r3, [r6, #0]
 801eee6:	6923      	ldr	r3, [r4, #16]
 801eee8:	443b      	add	r3, r7
 801eeea:	6123      	str	r3, [r4, #16]
 801eeec:	2000      	movs	r0, #0
 801eeee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eef2:	bf00      	nop
 801eef4:	0802273d 	.word	0x0802273d

0801eef8 <_scanf_i>:
 801eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eefc:	4698      	mov	r8, r3
 801eefe:	4b74      	ldr	r3, [pc, #464]	@ (801f0d0 <_scanf_i+0x1d8>)
 801ef00:	460c      	mov	r4, r1
 801ef02:	4682      	mov	sl, r0
 801ef04:	4616      	mov	r6, r2
 801ef06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ef0a:	b087      	sub	sp, #28
 801ef0c:	ab03      	add	r3, sp, #12
 801ef0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ef12:	4b70      	ldr	r3, [pc, #448]	@ (801f0d4 <_scanf_i+0x1dc>)
 801ef14:	69a1      	ldr	r1, [r4, #24]
 801ef16:	4a70      	ldr	r2, [pc, #448]	@ (801f0d8 <_scanf_i+0x1e0>)
 801ef18:	2903      	cmp	r1, #3
 801ef1a:	bf08      	it	eq
 801ef1c:	461a      	moveq	r2, r3
 801ef1e:	68a3      	ldr	r3, [r4, #8]
 801ef20:	9201      	str	r2, [sp, #4]
 801ef22:	1e5a      	subs	r2, r3, #1
 801ef24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ef28:	bf88      	it	hi
 801ef2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ef2e:	4627      	mov	r7, r4
 801ef30:	bf82      	ittt	hi
 801ef32:	eb03 0905 	addhi.w	r9, r3, r5
 801ef36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ef3a:	60a3      	strhi	r3, [r4, #8]
 801ef3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ef40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801ef44:	bf98      	it	ls
 801ef46:	f04f 0900 	movls.w	r9, #0
 801ef4a:	6023      	str	r3, [r4, #0]
 801ef4c:	463d      	mov	r5, r7
 801ef4e:	f04f 0b00 	mov.w	fp, #0
 801ef52:	6831      	ldr	r1, [r6, #0]
 801ef54:	ab03      	add	r3, sp, #12
 801ef56:	7809      	ldrb	r1, [r1, #0]
 801ef58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ef5c:	2202      	movs	r2, #2
 801ef5e:	f7e1 f947 	bl	80001f0 <memchr>
 801ef62:	b328      	cbz	r0, 801efb0 <_scanf_i+0xb8>
 801ef64:	f1bb 0f01 	cmp.w	fp, #1
 801ef68:	d159      	bne.n	801f01e <_scanf_i+0x126>
 801ef6a:	6862      	ldr	r2, [r4, #4]
 801ef6c:	b92a      	cbnz	r2, 801ef7a <_scanf_i+0x82>
 801ef6e:	6822      	ldr	r2, [r4, #0]
 801ef70:	2108      	movs	r1, #8
 801ef72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801ef76:	6061      	str	r1, [r4, #4]
 801ef78:	6022      	str	r2, [r4, #0]
 801ef7a:	6822      	ldr	r2, [r4, #0]
 801ef7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801ef80:	6022      	str	r2, [r4, #0]
 801ef82:	68a2      	ldr	r2, [r4, #8]
 801ef84:	1e51      	subs	r1, r2, #1
 801ef86:	60a1      	str	r1, [r4, #8]
 801ef88:	b192      	cbz	r2, 801efb0 <_scanf_i+0xb8>
 801ef8a:	6832      	ldr	r2, [r6, #0]
 801ef8c:	1c51      	adds	r1, r2, #1
 801ef8e:	6031      	str	r1, [r6, #0]
 801ef90:	7812      	ldrb	r2, [r2, #0]
 801ef92:	f805 2b01 	strb.w	r2, [r5], #1
 801ef96:	6872      	ldr	r2, [r6, #4]
 801ef98:	3a01      	subs	r2, #1
 801ef9a:	2a00      	cmp	r2, #0
 801ef9c:	6072      	str	r2, [r6, #4]
 801ef9e:	dc07      	bgt.n	801efb0 <_scanf_i+0xb8>
 801efa0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801efa4:	4631      	mov	r1, r6
 801efa6:	4650      	mov	r0, sl
 801efa8:	4790      	blx	r2
 801efaa:	2800      	cmp	r0, #0
 801efac:	f040 8085 	bne.w	801f0ba <_scanf_i+0x1c2>
 801efb0:	f10b 0b01 	add.w	fp, fp, #1
 801efb4:	f1bb 0f03 	cmp.w	fp, #3
 801efb8:	d1cb      	bne.n	801ef52 <_scanf_i+0x5a>
 801efba:	6863      	ldr	r3, [r4, #4]
 801efbc:	b90b      	cbnz	r3, 801efc2 <_scanf_i+0xca>
 801efbe:	230a      	movs	r3, #10
 801efc0:	6063      	str	r3, [r4, #4]
 801efc2:	6863      	ldr	r3, [r4, #4]
 801efc4:	4945      	ldr	r1, [pc, #276]	@ (801f0dc <_scanf_i+0x1e4>)
 801efc6:	6960      	ldr	r0, [r4, #20]
 801efc8:	1ac9      	subs	r1, r1, r3
 801efca:	f000 f9dd 	bl	801f388 <__sccl>
 801efce:	f04f 0b00 	mov.w	fp, #0
 801efd2:	68a3      	ldr	r3, [r4, #8]
 801efd4:	6822      	ldr	r2, [r4, #0]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d03d      	beq.n	801f056 <_scanf_i+0x15e>
 801efda:	6831      	ldr	r1, [r6, #0]
 801efdc:	6960      	ldr	r0, [r4, #20]
 801efde:	f891 c000 	ldrb.w	ip, [r1]
 801efe2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801efe6:	2800      	cmp	r0, #0
 801efe8:	d035      	beq.n	801f056 <_scanf_i+0x15e>
 801efea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801efee:	d124      	bne.n	801f03a <_scanf_i+0x142>
 801eff0:	0510      	lsls	r0, r2, #20
 801eff2:	d522      	bpl.n	801f03a <_scanf_i+0x142>
 801eff4:	f10b 0b01 	add.w	fp, fp, #1
 801eff8:	f1b9 0f00 	cmp.w	r9, #0
 801effc:	d003      	beq.n	801f006 <_scanf_i+0x10e>
 801effe:	3301      	adds	r3, #1
 801f000:	f109 39ff 	add.w	r9, r9, #4294967295
 801f004:	60a3      	str	r3, [r4, #8]
 801f006:	6873      	ldr	r3, [r6, #4]
 801f008:	3b01      	subs	r3, #1
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	6073      	str	r3, [r6, #4]
 801f00e:	dd1b      	ble.n	801f048 <_scanf_i+0x150>
 801f010:	6833      	ldr	r3, [r6, #0]
 801f012:	3301      	adds	r3, #1
 801f014:	6033      	str	r3, [r6, #0]
 801f016:	68a3      	ldr	r3, [r4, #8]
 801f018:	3b01      	subs	r3, #1
 801f01a:	60a3      	str	r3, [r4, #8]
 801f01c:	e7d9      	b.n	801efd2 <_scanf_i+0xda>
 801f01e:	f1bb 0f02 	cmp.w	fp, #2
 801f022:	d1ae      	bne.n	801ef82 <_scanf_i+0x8a>
 801f024:	6822      	ldr	r2, [r4, #0]
 801f026:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801f02a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f02e:	d1c4      	bne.n	801efba <_scanf_i+0xc2>
 801f030:	2110      	movs	r1, #16
 801f032:	6061      	str	r1, [r4, #4]
 801f034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f038:	e7a2      	b.n	801ef80 <_scanf_i+0x88>
 801f03a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801f03e:	6022      	str	r2, [r4, #0]
 801f040:	780b      	ldrb	r3, [r1, #0]
 801f042:	f805 3b01 	strb.w	r3, [r5], #1
 801f046:	e7de      	b.n	801f006 <_scanf_i+0x10e>
 801f048:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801f04c:	4631      	mov	r1, r6
 801f04e:	4650      	mov	r0, sl
 801f050:	4798      	blx	r3
 801f052:	2800      	cmp	r0, #0
 801f054:	d0df      	beq.n	801f016 <_scanf_i+0x11e>
 801f056:	6823      	ldr	r3, [r4, #0]
 801f058:	05d9      	lsls	r1, r3, #23
 801f05a:	d50d      	bpl.n	801f078 <_scanf_i+0x180>
 801f05c:	42bd      	cmp	r5, r7
 801f05e:	d909      	bls.n	801f074 <_scanf_i+0x17c>
 801f060:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f064:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801f068:	4632      	mov	r2, r6
 801f06a:	4650      	mov	r0, sl
 801f06c:	4798      	blx	r3
 801f06e:	f105 39ff 	add.w	r9, r5, #4294967295
 801f072:	464d      	mov	r5, r9
 801f074:	42bd      	cmp	r5, r7
 801f076:	d028      	beq.n	801f0ca <_scanf_i+0x1d2>
 801f078:	6822      	ldr	r2, [r4, #0]
 801f07a:	f012 0210 	ands.w	r2, r2, #16
 801f07e:	d113      	bne.n	801f0a8 <_scanf_i+0x1b0>
 801f080:	702a      	strb	r2, [r5, #0]
 801f082:	6863      	ldr	r3, [r4, #4]
 801f084:	9e01      	ldr	r6, [sp, #4]
 801f086:	4639      	mov	r1, r7
 801f088:	4650      	mov	r0, sl
 801f08a:	47b0      	blx	r6
 801f08c:	f8d8 3000 	ldr.w	r3, [r8]
 801f090:	6821      	ldr	r1, [r4, #0]
 801f092:	1d1a      	adds	r2, r3, #4
 801f094:	f8c8 2000 	str.w	r2, [r8]
 801f098:	f011 0f20 	tst.w	r1, #32
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	d00f      	beq.n	801f0c0 <_scanf_i+0x1c8>
 801f0a0:	6018      	str	r0, [r3, #0]
 801f0a2:	68e3      	ldr	r3, [r4, #12]
 801f0a4:	3301      	adds	r3, #1
 801f0a6:	60e3      	str	r3, [r4, #12]
 801f0a8:	6923      	ldr	r3, [r4, #16]
 801f0aa:	1bed      	subs	r5, r5, r7
 801f0ac:	445d      	add	r5, fp
 801f0ae:	442b      	add	r3, r5
 801f0b0:	6123      	str	r3, [r4, #16]
 801f0b2:	2000      	movs	r0, #0
 801f0b4:	b007      	add	sp, #28
 801f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ba:	f04f 0b00 	mov.w	fp, #0
 801f0be:	e7ca      	b.n	801f056 <_scanf_i+0x15e>
 801f0c0:	07ca      	lsls	r2, r1, #31
 801f0c2:	bf4c      	ite	mi
 801f0c4:	8018      	strhmi	r0, [r3, #0]
 801f0c6:	6018      	strpl	r0, [r3, #0]
 801f0c8:	e7eb      	b.n	801f0a2 <_scanf_i+0x1aa>
 801f0ca:	2001      	movs	r0, #1
 801f0cc:	e7f2      	b.n	801f0b4 <_scanf_i+0x1bc>
 801f0ce:	bf00      	nop
 801f0d0:	08022048 	.word	0x08022048
 801f0d4:	0801ac75 	.word	0x0801ac75
 801f0d8:	0801fca1 	.word	0x0801fca1
 801f0dc:	080222a8 	.word	0x080222a8

0801f0e0 <__sflush_r>:
 801f0e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0e8:	0716      	lsls	r6, r2, #28
 801f0ea:	4605      	mov	r5, r0
 801f0ec:	460c      	mov	r4, r1
 801f0ee:	d454      	bmi.n	801f19a <__sflush_r+0xba>
 801f0f0:	684b      	ldr	r3, [r1, #4]
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	dc02      	bgt.n	801f0fc <__sflush_r+0x1c>
 801f0f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	dd48      	ble.n	801f18e <__sflush_r+0xae>
 801f0fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f0fe:	2e00      	cmp	r6, #0
 801f100:	d045      	beq.n	801f18e <__sflush_r+0xae>
 801f102:	2300      	movs	r3, #0
 801f104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f108:	682f      	ldr	r7, [r5, #0]
 801f10a:	6a21      	ldr	r1, [r4, #32]
 801f10c:	602b      	str	r3, [r5, #0]
 801f10e:	d030      	beq.n	801f172 <__sflush_r+0x92>
 801f110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f112:	89a3      	ldrh	r3, [r4, #12]
 801f114:	0759      	lsls	r1, r3, #29
 801f116:	d505      	bpl.n	801f124 <__sflush_r+0x44>
 801f118:	6863      	ldr	r3, [r4, #4]
 801f11a:	1ad2      	subs	r2, r2, r3
 801f11c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f11e:	b10b      	cbz	r3, 801f124 <__sflush_r+0x44>
 801f120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f122:	1ad2      	subs	r2, r2, r3
 801f124:	2300      	movs	r3, #0
 801f126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f128:	6a21      	ldr	r1, [r4, #32]
 801f12a:	4628      	mov	r0, r5
 801f12c:	47b0      	blx	r6
 801f12e:	1c43      	adds	r3, r0, #1
 801f130:	89a3      	ldrh	r3, [r4, #12]
 801f132:	d106      	bne.n	801f142 <__sflush_r+0x62>
 801f134:	6829      	ldr	r1, [r5, #0]
 801f136:	291d      	cmp	r1, #29
 801f138:	d82b      	bhi.n	801f192 <__sflush_r+0xb2>
 801f13a:	4a2a      	ldr	r2, [pc, #168]	@ (801f1e4 <__sflush_r+0x104>)
 801f13c:	40ca      	lsrs	r2, r1
 801f13e:	07d6      	lsls	r6, r2, #31
 801f140:	d527      	bpl.n	801f192 <__sflush_r+0xb2>
 801f142:	2200      	movs	r2, #0
 801f144:	6062      	str	r2, [r4, #4]
 801f146:	04d9      	lsls	r1, r3, #19
 801f148:	6922      	ldr	r2, [r4, #16]
 801f14a:	6022      	str	r2, [r4, #0]
 801f14c:	d504      	bpl.n	801f158 <__sflush_r+0x78>
 801f14e:	1c42      	adds	r2, r0, #1
 801f150:	d101      	bne.n	801f156 <__sflush_r+0x76>
 801f152:	682b      	ldr	r3, [r5, #0]
 801f154:	b903      	cbnz	r3, 801f158 <__sflush_r+0x78>
 801f156:	6560      	str	r0, [r4, #84]	@ 0x54
 801f158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f15a:	602f      	str	r7, [r5, #0]
 801f15c:	b1b9      	cbz	r1, 801f18e <__sflush_r+0xae>
 801f15e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f162:	4299      	cmp	r1, r3
 801f164:	d002      	beq.n	801f16c <__sflush_r+0x8c>
 801f166:	4628      	mov	r0, r5
 801f168:	f7fd ff62 	bl	801d030 <_free_r>
 801f16c:	2300      	movs	r3, #0
 801f16e:	6363      	str	r3, [r4, #52]	@ 0x34
 801f170:	e00d      	b.n	801f18e <__sflush_r+0xae>
 801f172:	2301      	movs	r3, #1
 801f174:	4628      	mov	r0, r5
 801f176:	47b0      	blx	r6
 801f178:	4602      	mov	r2, r0
 801f17a:	1c50      	adds	r0, r2, #1
 801f17c:	d1c9      	bne.n	801f112 <__sflush_r+0x32>
 801f17e:	682b      	ldr	r3, [r5, #0]
 801f180:	2b00      	cmp	r3, #0
 801f182:	d0c6      	beq.n	801f112 <__sflush_r+0x32>
 801f184:	2b1d      	cmp	r3, #29
 801f186:	d001      	beq.n	801f18c <__sflush_r+0xac>
 801f188:	2b16      	cmp	r3, #22
 801f18a:	d11e      	bne.n	801f1ca <__sflush_r+0xea>
 801f18c:	602f      	str	r7, [r5, #0]
 801f18e:	2000      	movs	r0, #0
 801f190:	e022      	b.n	801f1d8 <__sflush_r+0xf8>
 801f192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f196:	b21b      	sxth	r3, r3
 801f198:	e01b      	b.n	801f1d2 <__sflush_r+0xf2>
 801f19a:	690f      	ldr	r7, [r1, #16]
 801f19c:	2f00      	cmp	r7, #0
 801f19e:	d0f6      	beq.n	801f18e <__sflush_r+0xae>
 801f1a0:	0793      	lsls	r3, r2, #30
 801f1a2:	680e      	ldr	r6, [r1, #0]
 801f1a4:	bf08      	it	eq
 801f1a6:	694b      	ldreq	r3, [r1, #20]
 801f1a8:	600f      	str	r7, [r1, #0]
 801f1aa:	bf18      	it	ne
 801f1ac:	2300      	movne	r3, #0
 801f1ae:	eba6 0807 	sub.w	r8, r6, r7
 801f1b2:	608b      	str	r3, [r1, #8]
 801f1b4:	f1b8 0f00 	cmp.w	r8, #0
 801f1b8:	dde9      	ble.n	801f18e <__sflush_r+0xae>
 801f1ba:	6a21      	ldr	r1, [r4, #32]
 801f1bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f1be:	4643      	mov	r3, r8
 801f1c0:	463a      	mov	r2, r7
 801f1c2:	4628      	mov	r0, r5
 801f1c4:	47b0      	blx	r6
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	dc08      	bgt.n	801f1dc <__sflush_r+0xfc>
 801f1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f1d2:	81a3      	strh	r3, [r4, #12]
 801f1d4:	f04f 30ff 	mov.w	r0, #4294967295
 801f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1dc:	4407      	add	r7, r0
 801f1de:	eba8 0800 	sub.w	r8, r8, r0
 801f1e2:	e7e7      	b.n	801f1b4 <__sflush_r+0xd4>
 801f1e4:	20400001 	.word	0x20400001

0801f1e8 <_fflush_r>:
 801f1e8:	b538      	push	{r3, r4, r5, lr}
 801f1ea:	690b      	ldr	r3, [r1, #16]
 801f1ec:	4605      	mov	r5, r0
 801f1ee:	460c      	mov	r4, r1
 801f1f0:	b913      	cbnz	r3, 801f1f8 <_fflush_r+0x10>
 801f1f2:	2500      	movs	r5, #0
 801f1f4:	4628      	mov	r0, r5
 801f1f6:	bd38      	pop	{r3, r4, r5, pc}
 801f1f8:	b118      	cbz	r0, 801f202 <_fflush_r+0x1a>
 801f1fa:	6a03      	ldr	r3, [r0, #32]
 801f1fc:	b90b      	cbnz	r3, 801f202 <_fflush_r+0x1a>
 801f1fe:	f7fc fd77 	bl	801bcf0 <__sinit>
 801f202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f206:	2b00      	cmp	r3, #0
 801f208:	d0f3      	beq.n	801f1f2 <_fflush_r+0xa>
 801f20a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f20c:	07d0      	lsls	r0, r2, #31
 801f20e:	d404      	bmi.n	801f21a <_fflush_r+0x32>
 801f210:	0599      	lsls	r1, r3, #22
 801f212:	d402      	bmi.n	801f21a <_fflush_r+0x32>
 801f214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f216:	f7fd f884 	bl	801c322 <__retarget_lock_acquire_recursive>
 801f21a:	4628      	mov	r0, r5
 801f21c:	4621      	mov	r1, r4
 801f21e:	f7ff ff5f 	bl	801f0e0 <__sflush_r>
 801f222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f224:	07da      	lsls	r2, r3, #31
 801f226:	4605      	mov	r5, r0
 801f228:	d4e4      	bmi.n	801f1f4 <_fflush_r+0xc>
 801f22a:	89a3      	ldrh	r3, [r4, #12]
 801f22c:	059b      	lsls	r3, r3, #22
 801f22e:	d4e1      	bmi.n	801f1f4 <_fflush_r+0xc>
 801f230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f232:	f7fd f877 	bl	801c324 <__retarget_lock_release_recursive>
 801f236:	e7dd      	b.n	801f1f4 <_fflush_r+0xc>

0801f238 <fiprintf>:
 801f238:	b40e      	push	{r1, r2, r3}
 801f23a:	b503      	push	{r0, r1, lr}
 801f23c:	4601      	mov	r1, r0
 801f23e:	ab03      	add	r3, sp, #12
 801f240:	4805      	ldr	r0, [pc, #20]	@ (801f258 <fiprintf+0x20>)
 801f242:	f853 2b04 	ldr.w	r2, [r3], #4
 801f246:	6800      	ldr	r0, [r0, #0]
 801f248:	9301      	str	r3, [sp, #4]
 801f24a:	f7fc f809 	bl	801b260 <_vfiprintf_r>
 801f24e:	b002      	add	sp, #8
 801f250:	f85d eb04 	ldr.w	lr, [sp], #4
 801f254:	b003      	add	sp, #12
 801f256:	4770      	bx	lr
 801f258:	20000164 	.word	0x20000164

0801f25c <__swhatbuf_r>:
 801f25c:	b570      	push	{r4, r5, r6, lr}
 801f25e:	460c      	mov	r4, r1
 801f260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f264:	2900      	cmp	r1, #0
 801f266:	b096      	sub	sp, #88	@ 0x58
 801f268:	4615      	mov	r5, r2
 801f26a:	461e      	mov	r6, r3
 801f26c:	da0d      	bge.n	801f28a <__swhatbuf_r+0x2e>
 801f26e:	89a3      	ldrh	r3, [r4, #12]
 801f270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f274:	f04f 0100 	mov.w	r1, #0
 801f278:	bf14      	ite	ne
 801f27a:	2340      	movne	r3, #64	@ 0x40
 801f27c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f280:	2000      	movs	r0, #0
 801f282:	6031      	str	r1, [r6, #0]
 801f284:	602b      	str	r3, [r5, #0]
 801f286:	b016      	add	sp, #88	@ 0x58
 801f288:	bd70      	pop	{r4, r5, r6, pc}
 801f28a:	466a      	mov	r2, sp
 801f28c:	f000 f8f0 	bl	801f470 <_fstat_r>
 801f290:	2800      	cmp	r0, #0
 801f292:	dbec      	blt.n	801f26e <__swhatbuf_r+0x12>
 801f294:	9901      	ldr	r1, [sp, #4]
 801f296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f29a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f29e:	4259      	negs	r1, r3
 801f2a0:	4159      	adcs	r1, r3
 801f2a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f2a6:	e7eb      	b.n	801f280 <__swhatbuf_r+0x24>

0801f2a8 <__smakebuf_r>:
 801f2a8:	898b      	ldrh	r3, [r1, #12]
 801f2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f2ac:	079d      	lsls	r5, r3, #30
 801f2ae:	4606      	mov	r6, r0
 801f2b0:	460c      	mov	r4, r1
 801f2b2:	d507      	bpl.n	801f2c4 <__smakebuf_r+0x1c>
 801f2b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f2b8:	6023      	str	r3, [r4, #0]
 801f2ba:	6123      	str	r3, [r4, #16]
 801f2bc:	2301      	movs	r3, #1
 801f2be:	6163      	str	r3, [r4, #20]
 801f2c0:	b003      	add	sp, #12
 801f2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2c4:	ab01      	add	r3, sp, #4
 801f2c6:	466a      	mov	r2, sp
 801f2c8:	f7ff ffc8 	bl	801f25c <__swhatbuf_r>
 801f2cc:	9f00      	ldr	r7, [sp, #0]
 801f2ce:	4605      	mov	r5, r0
 801f2d0:	4639      	mov	r1, r7
 801f2d2:	4630      	mov	r0, r6
 801f2d4:	f7fd ff20 	bl	801d118 <_malloc_r>
 801f2d8:	b948      	cbnz	r0, 801f2ee <__smakebuf_r+0x46>
 801f2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2de:	059a      	lsls	r2, r3, #22
 801f2e0:	d4ee      	bmi.n	801f2c0 <__smakebuf_r+0x18>
 801f2e2:	f023 0303 	bic.w	r3, r3, #3
 801f2e6:	f043 0302 	orr.w	r3, r3, #2
 801f2ea:	81a3      	strh	r3, [r4, #12]
 801f2ec:	e7e2      	b.n	801f2b4 <__smakebuf_r+0xc>
 801f2ee:	89a3      	ldrh	r3, [r4, #12]
 801f2f0:	6020      	str	r0, [r4, #0]
 801f2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f2f6:	81a3      	strh	r3, [r4, #12]
 801f2f8:	9b01      	ldr	r3, [sp, #4]
 801f2fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f2fe:	b15b      	cbz	r3, 801f318 <__smakebuf_r+0x70>
 801f300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f304:	4630      	mov	r0, r6
 801f306:	f000 f8c5 	bl	801f494 <_isatty_r>
 801f30a:	b128      	cbz	r0, 801f318 <__smakebuf_r+0x70>
 801f30c:	89a3      	ldrh	r3, [r4, #12]
 801f30e:	f023 0303 	bic.w	r3, r3, #3
 801f312:	f043 0301 	orr.w	r3, r3, #1
 801f316:	81a3      	strh	r3, [r4, #12]
 801f318:	89a3      	ldrh	r3, [r4, #12]
 801f31a:	431d      	orrs	r5, r3
 801f31c:	81a5      	strh	r5, [r4, #12]
 801f31e:	e7cf      	b.n	801f2c0 <__smakebuf_r+0x18>

0801f320 <_putc_r>:
 801f320:	b570      	push	{r4, r5, r6, lr}
 801f322:	460d      	mov	r5, r1
 801f324:	4614      	mov	r4, r2
 801f326:	4606      	mov	r6, r0
 801f328:	b118      	cbz	r0, 801f332 <_putc_r+0x12>
 801f32a:	6a03      	ldr	r3, [r0, #32]
 801f32c:	b90b      	cbnz	r3, 801f332 <_putc_r+0x12>
 801f32e:	f7fc fcdf 	bl	801bcf0 <__sinit>
 801f332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f334:	07d8      	lsls	r0, r3, #31
 801f336:	d405      	bmi.n	801f344 <_putc_r+0x24>
 801f338:	89a3      	ldrh	r3, [r4, #12]
 801f33a:	0599      	lsls	r1, r3, #22
 801f33c:	d402      	bmi.n	801f344 <_putc_r+0x24>
 801f33e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f340:	f7fc ffef 	bl	801c322 <__retarget_lock_acquire_recursive>
 801f344:	68a3      	ldr	r3, [r4, #8]
 801f346:	3b01      	subs	r3, #1
 801f348:	2b00      	cmp	r3, #0
 801f34a:	60a3      	str	r3, [r4, #8]
 801f34c:	da05      	bge.n	801f35a <_putc_r+0x3a>
 801f34e:	69a2      	ldr	r2, [r4, #24]
 801f350:	4293      	cmp	r3, r2
 801f352:	db12      	blt.n	801f37a <_putc_r+0x5a>
 801f354:	b2eb      	uxtb	r3, r5
 801f356:	2b0a      	cmp	r3, #10
 801f358:	d00f      	beq.n	801f37a <_putc_r+0x5a>
 801f35a:	6823      	ldr	r3, [r4, #0]
 801f35c:	1c5a      	adds	r2, r3, #1
 801f35e:	6022      	str	r2, [r4, #0]
 801f360:	701d      	strb	r5, [r3, #0]
 801f362:	b2ed      	uxtb	r5, r5
 801f364:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f366:	07da      	lsls	r2, r3, #31
 801f368:	d405      	bmi.n	801f376 <_putc_r+0x56>
 801f36a:	89a3      	ldrh	r3, [r4, #12]
 801f36c:	059b      	lsls	r3, r3, #22
 801f36e:	d402      	bmi.n	801f376 <_putc_r+0x56>
 801f370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f372:	f7fc ffd7 	bl	801c324 <__retarget_lock_release_recursive>
 801f376:	4628      	mov	r0, r5
 801f378:	bd70      	pop	{r4, r5, r6, pc}
 801f37a:	4629      	mov	r1, r5
 801f37c:	4622      	mov	r2, r4
 801f37e:	4630      	mov	r0, r6
 801f380:	f7fc fe34 	bl	801bfec <__swbuf_r>
 801f384:	4605      	mov	r5, r0
 801f386:	e7ed      	b.n	801f364 <_putc_r+0x44>

0801f388 <__sccl>:
 801f388:	b570      	push	{r4, r5, r6, lr}
 801f38a:	780b      	ldrb	r3, [r1, #0]
 801f38c:	4604      	mov	r4, r0
 801f38e:	2b5e      	cmp	r3, #94	@ 0x5e
 801f390:	bf0b      	itete	eq
 801f392:	784b      	ldrbeq	r3, [r1, #1]
 801f394:	1c4a      	addne	r2, r1, #1
 801f396:	1c8a      	addeq	r2, r1, #2
 801f398:	2100      	movne	r1, #0
 801f39a:	bf08      	it	eq
 801f39c:	2101      	moveq	r1, #1
 801f39e:	3801      	subs	r0, #1
 801f3a0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801f3a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f3a8:	42a8      	cmp	r0, r5
 801f3aa:	d1fb      	bne.n	801f3a4 <__sccl+0x1c>
 801f3ac:	b90b      	cbnz	r3, 801f3b2 <__sccl+0x2a>
 801f3ae:	1e50      	subs	r0, r2, #1
 801f3b0:	bd70      	pop	{r4, r5, r6, pc}
 801f3b2:	f081 0101 	eor.w	r1, r1, #1
 801f3b6:	54e1      	strb	r1, [r4, r3]
 801f3b8:	4610      	mov	r0, r2
 801f3ba:	4602      	mov	r2, r0
 801f3bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f3c0:	2d2d      	cmp	r5, #45	@ 0x2d
 801f3c2:	d005      	beq.n	801f3d0 <__sccl+0x48>
 801f3c4:	2d5d      	cmp	r5, #93	@ 0x5d
 801f3c6:	d016      	beq.n	801f3f6 <__sccl+0x6e>
 801f3c8:	2d00      	cmp	r5, #0
 801f3ca:	d0f1      	beq.n	801f3b0 <__sccl+0x28>
 801f3cc:	462b      	mov	r3, r5
 801f3ce:	e7f2      	b.n	801f3b6 <__sccl+0x2e>
 801f3d0:	7846      	ldrb	r6, [r0, #1]
 801f3d2:	2e5d      	cmp	r6, #93	@ 0x5d
 801f3d4:	d0fa      	beq.n	801f3cc <__sccl+0x44>
 801f3d6:	42b3      	cmp	r3, r6
 801f3d8:	dcf8      	bgt.n	801f3cc <__sccl+0x44>
 801f3da:	3002      	adds	r0, #2
 801f3dc:	461a      	mov	r2, r3
 801f3de:	3201      	adds	r2, #1
 801f3e0:	4296      	cmp	r6, r2
 801f3e2:	54a1      	strb	r1, [r4, r2]
 801f3e4:	dcfb      	bgt.n	801f3de <__sccl+0x56>
 801f3e6:	1af2      	subs	r2, r6, r3
 801f3e8:	3a01      	subs	r2, #1
 801f3ea:	1c5d      	adds	r5, r3, #1
 801f3ec:	42b3      	cmp	r3, r6
 801f3ee:	bfa8      	it	ge
 801f3f0:	2200      	movge	r2, #0
 801f3f2:	18ab      	adds	r3, r5, r2
 801f3f4:	e7e1      	b.n	801f3ba <__sccl+0x32>
 801f3f6:	4610      	mov	r0, r2
 801f3f8:	e7da      	b.n	801f3b0 <__sccl+0x28>

0801f3fa <__submore>:
 801f3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3fe:	460c      	mov	r4, r1
 801f400:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801f402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f406:	4299      	cmp	r1, r3
 801f408:	d11d      	bne.n	801f446 <__submore+0x4c>
 801f40a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801f40e:	f7fd fe83 	bl	801d118 <_malloc_r>
 801f412:	b918      	cbnz	r0, 801f41c <__submore+0x22>
 801f414:	f04f 30ff 	mov.w	r0, #4294967295
 801f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f41c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f420:	63a3      	str	r3, [r4, #56]	@ 0x38
 801f422:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801f426:	6360      	str	r0, [r4, #52]	@ 0x34
 801f428:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801f42c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801f430:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801f434:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801f438:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801f43c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801f440:	6020      	str	r0, [r4, #0]
 801f442:	2000      	movs	r0, #0
 801f444:	e7e8      	b.n	801f418 <__submore+0x1e>
 801f446:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801f448:	0077      	lsls	r7, r6, #1
 801f44a:	463a      	mov	r2, r7
 801f44c:	f7fe fb9a 	bl	801db84 <_realloc_r>
 801f450:	4605      	mov	r5, r0
 801f452:	2800      	cmp	r0, #0
 801f454:	d0de      	beq.n	801f414 <__submore+0x1a>
 801f456:	eb00 0806 	add.w	r8, r0, r6
 801f45a:	4601      	mov	r1, r0
 801f45c:	4632      	mov	r2, r6
 801f45e:	4640      	mov	r0, r8
 801f460:	f7fc ff61 	bl	801c326 <memcpy>
 801f464:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801f468:	f8c4 8000 	str.w	r8, [r4]
 801f46c:	e7e9      	b.n	801f442 <__submore+0x48>
	...

0801f470 <_fstat_r>:
 801f470:	b538      	push	{r3, r4, r5, lr}
 801f472:	4d07      	ldr	r5, [pc, #28]	@ (801f490 <_fstat_r+0x20>)
 801f474:	2300      	movs	r3, #0
 801f476:	4604      	mov	r4, r0
 801f478:	4608      	mov	r0, r1
 801f47a:	4611      	mov	r1, r2
 801f47c:	602b      	str	r3, [r5, #0]
 801f47e:	f7eb ff9b 	bl	800b3b8 <_fstat>
 801f482:	1c43      	adds	r3, r0, #1
 801f484:	d102      	bne.n	801f48c <_fstat_r+0x1c>
 801f486:	682b      	ldr	r3, [r5, #0]
 801f488:	b103      	cbz	r3, 801f48c <_fstat_r+0x1c>
 801f48a:	6023      	str	r3, [r4, #0]
 801f48c:	bd38      	pop	{r3, r4, r5, pc}
 801f48e:	bf00      	nop
 801f490:	2000c430 	.word	0x2000c430

0801f494 <_isatty_r>:
 801f494:	b538      	push	{r3, r4, r5, lr}
 801f496:	4d06      	ldr	r5, [pc, #24]	@ (801f4b0 <_isatty_r+0x1c>)
 801f498:	2300      	movs	r3, #0
 801f49a:	4604      	mov	r4, r0
 801f49c:	4608      	mov	r0, r1
 801f49e:	602b      	str	r3, [r5, #0]
 801f4a0:	f7eb ff9a 	bl	800b3d8 <_isatty>
 801f4a4:	1c43      	adds	r3, r0, #1
 801f4a6:	d102      	bne.n	801f4ae <_isatty_r+0x1a>
 801f4a8:	682b      	ldr	r3, [r5, #0]
 801f4aa:	b103      	cbz	r3, 801f4ae <_isatty_r+0x1a>
 801f4ac:	6023      	str	r3, [r4, #0]
 801f4ae:	bd38      	pop	{r3, r4, r5, pc}
 801f4b0:	2000c430 	.word	0x2000c430

0801f4b4 <_sbrk_r>:
 801f4b4:	b538      	push	{r3, r4, r5, lr}
 801f4b6:	4d06      	ldr	r5, [pc, #24]	@ (801f4d0 <_sbrk_r+0x1c>)
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	4604      	mov	r4, r0
 801f4bc:	4608      	mov	r0, r1
 801f4be:	602b      	str	r3, [r5, #0]
 801f4c0:	f7eb ffa2 	bl	800b408 <_sbrk>
 801f4c4:	1c43      	adds	r3, r0, #1
 801f4c6:	d102      	bne.n	801f4ce <_sbrk_r+0x1a>
 801f4c8:	682b      	ldr	r3, [r5, #0]
 801f4ca:	b103      	cbz	r3, 801f4ce <_sbrk_r+0x1a>
 801f4cc:	6023      	str	r3, [r4, #0]
 801f4ce:	bd38      	pop	{r3, r4, r5, pc}
 801f4d0:	2000c430 	.word	0x2000c430
 801f4d4:	00000000 	.word	0x00000000

0801f4d8 <nan>:
 801f4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f4e0 <nan+0x8>
 801f4dc:	4770      	bx	lr
 801f4de:	bf00      	nop
 801f4e0:	00000000 	.word	0x00000000
 801f4e4:	7ff80000 	.word	0x7ff80000

0801f4e8 <abort>:
 801f4e8:	b508      	push	{r3, lr}
 801f4ea:	2006      	movs	r0, #6
 801f4ec:	f000 fc10 	bl	801fd10 <raise>
 801f4f0:	2001      	movs	r0, #1
 801f4f2:	f7eb ff2d 	bl	800b350 <_exit>

0801f4f6 <_calloc_r>:
 801f4f6:	b570      	push	{r4, r5, r6, lr}
 801f4f8:	fba1 5402 	umull	r5, r4, r1, r2
 801f4fc:	b934      	cbnz	r4, 801f50c <_calloc_r+0x16>
 801f4fe:	4629      	mov	r1, r5
 801f500:	f7fd fe0a 	bl	801d118 <_malloc_r>
 801f504:	4606      	mov	r6, r0
 801f506:	b928      	cbnz	r0, 801f514 <_calloc_r+0x1e>
 801f508:	4630      	mov	r0, r6
 801f50a:	bd70      	pop	{r4, r5, r6, pc}
 801f50c:	220c      	movs	r2, #12
 801f50e:	6002      	str	r2, [r0, #0]
 801f510:	2600      	movs	r6, #0
 801f512:	e7f9      	b.n	801f508 <_calloc_r+0x12>
 801f514:	462a      	mov	r2, r5
 801f516:	4621      	mov	r1, r4
 801f518:	f7fc fe16 	bl	801c148 <memset>
 801f51c:	e7f4      	b.n	801f508 <_calloc_r+0x12>

0801f51e <rshift>:
 801f51e:	6903      	ldr	r3, [r0, #16]
 801f520:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f528:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f52c:	f100 0414 	add.w	r4, r0, #20
 801f530:	dd45      	ble.n	801f5be <rshift+0xa0>
 801f532:	f011 011f 	ands.w	r1, r1, #31
 801f536:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f53a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f53e:	d10c      	bne.n	801f55a <rshift+0x3c>
 801f540:	f100 0710 	add.w	r7, r0, #16
 801f544:	4629      	mov	r1, r5
 801f546:	42b1      	cmp	r1, r6
 801f548:	d334      	bcc.n	801f5b4 <rshift+0x96>
 801f54a:	1a9b      	subs	r3, r3, r2
 801f54c:	009b      	lsls	r3, r3, #2
 801f54e:	1eea      	subs	r2, r5, #3
 801f550:	4296      	cmp	r6, r2
 801f552:	bf38      	it	cc
 801f554:	2300      	movcc	r3, #0
 801f556:	4423      	add	r3, r4
 801f558:	e015      	b.n	801f586 <rshift+0x68>
 801f55a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f55e:	f1c1 0820 	rsb	r8, r1, #32
 801f562:	40cf      	lsrs	r7, r1
 801f564:	f105 0e04 	add.w	lr, r5, #4
 801f568:	46a1      	mov	r9, r4
 801f56a:	4576      	cmp	r6, lr
 801f56c:	46f4      	mov	ip, lr
 801f56e:	d815      	bhi.n	801f59c <rshift+0x7e>
 801f570:	1a9a      	subs	r2, r3, r2
 801f572:	0092      	lsls	r2, r2, #2
 801f574:	3a04      	subs	r2, #4
 801f576:	3501      	adds	r5, #1
 801f578:	42ae      	cmp	r6, r5
 801f57a:	bf38      	it	cc
 801f57c:	2200      	movcc	r2, #0
 801f57e:	18a3      	adds	r3, r4, r2
 801f580:	50a7      	str	r7, [r4, r2]
 801f582:	b107      	cbz	r7, 801f586 <rshift+0x68>
 801f584:	3304      	adds	r3, #4
 801f586:	1b1a      	subs	r2, r3, r4
 801f588:	42a3      	cmp	r3, r4
 801f58a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f58e:	bf08      	it	eq
 801f590:	2300      	moveq	r3, #0
 801f592:	6102      	str	r2, [r0, #16]
 801f594:	bf08      	it	eq
 801f596:	6143      	streq	r3, [r0, #20]
 801f598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f59c:	f8dc c000 	ldr.w	ip, [ip]
 801f5a0:	fa0c fc08 	lsl.w	ip, ip, r8
 801f5a4:	ea4c 0707 	orr.w	r7, ip, r7
 801f5a8:	f849 7b04 	str.w	r7, [r9], #4
 801f5ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f5b0:	40cf      	lsrs	r7, r1
 801f5b2:	e7da      	b.n	801f56a <rshift+0x4c>
 801f5b4:	f851 cb04 	ldr.w	ip, [r1], #4
 801f5b8:	f847 cf04 	str.w	ip, [r7, #4]!
 801f5bc:	e7c3      	b.n	801f546 <rshift+0x28>
 801f5be:	4623      	mov	r3, r4
 801f5c0:	e7e1      	b.n	801f586 <rshift+0x68>

0801f5c2 <__hexdig_fun>:
 801f5c2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801f5c6:	2b09      	cmp	r3, #9
 801f5c8:	d802      	bhi.n	801f5d0 <__hexdig_fun+0xe>
 801f5ca:	3820      	subs	r0, #32
 801f5cc:	b2c0      	uxtb	r0, r0
 801f5ce:	4770      	bx	lr
 801f5d0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f5d4:	2b05      	cmp	r3, #5
 801f5d6:	d801      	bhi.n	801f5dc <__hexdig_fun+0x1a>
 801f5d8:	3847      	subs	r0, #71	@ 0x47
 801f5da:	e7f7      	b.n	801f5cc <__hexdig_fun+0xa>
 801f5dc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f5e0:	2b05      	cmp	r3, #5
 801f5e2:	d801      	bhi.n	801f5e8 <__hexdig_fun+0x26>
 801f5e4:	3827      	subs	r0, #39	@ 0x27
 801f5e6:	e7f1      	b.n	801f5cc <__hexdig_fun+0xa>
 801f5e8:	2000      	movs	r0, #0
 801f5ea:	4770      	bx	lr

0801f5ec <__gethex>:
 801f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5f0:	b085      	sub	sp, #20
 801f5f2:	468a      	mov	sl, r1
 801f5f4:	9302      	str	r3, [sp, #8]
 801f5f6:	680b      	ldr	r3, [r1, #0]
 801f5f8:	9001      	str	r0, [sp, #4]
 801f5fa:	4690      	mov	r8, r2
 801f5fc:	1c9c      	adds	r4, r3, #2
 801f5fe:	46a1      	mov	r9, r4
 801f600:	f814 0b01 	ldrb.w	r0, [r4], #1
 801f604:	2830      	cmp	r0, #48	@ 0x30
 801f606:	d0fa      	beq.n	801f5fe <__gethex+0x12>
 801f608:	eba9 0303 	sub.w	r3, r9, r3
 801f60c:	f1a3 0b02 	sub.w	fp, r3, #2
 801f610:	f7ff ffd7 	bl	801f5c2 <__hexdig_fun>
 801f614:	4605      	mov	r5, r0
 801f616:	2800      	cmp	r0, #0
 801f618:	d168      	bne.n	801f6ec <__gethex+0x100>
 801f61a:	49a0      	ldr	r1, [pc, #640]	@ (801f89c <__gethex+0x2b0>)
 801f61c:	2201      	movs	r2, #1
 801f61e:	4648      	mov	r0, r9
 801f620:	f7fc fd9a 	bl	801c158 <strncmp>
 801f624:	4607      	mov	r7, r0
 801f626:	2800      	cmp	r0, #0
 801f628:	d167      	bne.n	801f6fa <__gethex+0x10e>
 801f62a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801f62e:	4626      	mov	r6, r4
 801f630:	f7ff ffc7 	bl	801f5c2 <__hexdig_fun>
 801f634:	2800      	cmp	r0, #0
 801f636:	d062      	beq.n	801f6fe <__gethex+0x112>
 801f638:	4623      	mov	r3, r4
 801f63a:	7818      	ldrb	r0, [r3, #0]
 801f63c:	2830      	cmp	r0, #48	@ 0x30
 801f63e:	4699      	mov	r9, r3
 801f640:	f103 0301 	add.w	r3, r3, #1
 801f644:	d0f9      	beq.n	801f63a <__gethex+0x4e>
 801f646:	f7ff ffbc 	bl	801f5c2 <__hexdig_fun>
 801f64a:	fab0 f580 	clz	r5, r0
 801f64e:	096d      	lsrs	r5, r5, #5
 801f650:	f04f 0b01 	mov.w	fp, #1
 801f654:	464a      	mov	r2, r9
 801f656:	4616      	mov	r6, r2
 801f658:	3201      	adds	r2, #1
 801f65a:	7830      	ldrb	r0, [r6, #0]
 801f65c:	f7ff ffb1 	bl	801f5c2 <__hexdig_fun>
 801f660:	2800      	cmp	r0, #0
 801f662:	d1f8      	bne.n	801f656 <__gethex+0x6a>
 801f664:	498d      	ldr	r1, [pc, #564]	@ (801f89c <__gethex+0x2b0>)
 801f666:	2201      	movs	r2, #1
 801f668:	4630      	mov	r0, r6
 801f66a:	f7fc fd75 	bl	801c158 <strncmp>
 801f66e:	2800      	cmp	r0, #0
 801f670:	d13f      	bne.n	801f6f2 <__gethex+0x106>
 801f672:	b944      	cbnz	r4, 801f686 <__gethex+0x9a>
 801f674:	1c74      	adds	r4, r6, #1
 801f676:	4622      	mov	r2, r4
 801f678:	4616      	mov	r6, r2
 801f67a:	3201      	adds	r2, #1
 801f67c:	7830      	ldrb	r0, [r6, #0]
 801f67e:	f7ff ffa0 	bl	801f5c2 <__hexdig_fun>
 801f682:	2800      	cmp	r0, #0
 801f684:	d1f8      	bne.n	801f678 <__gethex+0x8c>
 801f686:	1ba4      	subs	r4, r4, r6
 801f688:	00a7      	lsls	r7, r4, #2
 801f68a:	7833      	ldrb	r3, [r6, #0]
 801f68c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801f690:	2b50      	cmp	r3, #80	@ 0x50
 801f692:	d13e      	bne.n	801f712 <__gethex+0x126>
 801f694:	7873      	ldrb	r3, [r6, #1]
 801f696:	2b2b      	cmp	r3, #43	@ 0x2b
 801f698:	d033      	beq.n	801f702 <__gethex+0x116>
 801f69a:	2b2d      	cmp	r3, #45	@ 0x2d
 801f69c:	d034      	beq.n	801f708 <__gethex+0x11c>
 801f69e:	1c71      	adds	r1, r6, #1
 801f6a0:	2400      	movs	r4, #0
 801f6a2:	7808      	ldrb	r0, [r1, #0]
 801f6a4:	f7ff ff8d 	bl	801f5c2 <__hexdig_fun>
 801f6a8:	1e43      	subs	r3, r0, #1
 801f6aa:	b2db      	uxtb	r3, r3
 801f6ac:	2b18      	cmp	r3, #24
 801f6ae:	d830      	bhi.n	801f712 <__gethex+0x126>
 801f6b0:	f1a0 0210 	sub.w	r2, r0, #16
 801f6b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f6b8:	f7ff ff83 	bl	801f5c2 <__hexdig_fun>
 801f6bc:	f100 3cff 	add.w	ip, r0, #4294967295
 801f6c0:	fa5f fc8c 	uxtb.w	ip, ip
 801f6c4:	f1bc 0f18 	cmp.w	ip, #24
 801f6c8:	f04f 030a 	mov.w	r3, #10
 801f6cc:	d91e      	bls.n	801f70c <__gethex+0x120>
 801f6ce:	b104      	cbz	r4, 801f6d2 <__gethex+0xe6>
 801f6d0:	4252      	negs	r2, r2
 801f6d2:	4417      	add	r7, r2
 801f6d4:	f8ca 1000 	str.w	r1, [sl]
 801f6d8:	b1ed      	cbz	r5, 801f716 <__gethex+0x12a>
 801f6da:	f1bb 0f00 	cmp.w	fp, #0
 801f6de:	bf0c      	ite	eq
 801f6e0:	2506      	moveq	r5, #6
 801f6e2:	2500      	movne	r5, #0
 801f6e4:	4628      	mov	r0, r5
 801f6e6:	b005      	add	sp, #20
 801f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6ec:	2500      	movs	r5, #0
 801f6ee:	462c      	mov	r4, r5
 801f6f0:	e7b0      	b.n	801f654 <__gethex+0x68>
 801f6f2:	2c00      	cmp	r4, #0
 801f6f4:	d1c7      	bne.n	801f686 <__gethex+0x9a>
 801f6f6:	4627      	mov	r7, r4
 801f6f8:	e7c7      	b.n	801f68a <__gethex+0x9e>
 801f6fa:	464e      	mov	r6, r9
 801f6fc:	462f      	mov	r7, r5
 801f6fe:	2501      	movs	r5, #1
 801f700:	e7c3      	b.n	801f68a <__gethex+0x9e>
 801f702:	2400      	movs	r4, #0
 801f704:	1cb1      	adds	r1, r6, #2
 801f706:	e7cc      	b.n	801f6a2 <__gethex+0xb6>
 801f708:	2401      	movs	r4, #1
 801f70a:	e7fb      	b.n	801f704 <__gethex+0x118>
 801f70c:	fb03 0002 	mla	r0, r3, r2, r0
 801f710:	e7ce      	b.n	801f6b0 <__gethex+0xc4>
 801f712:	4631      	mov	r1, r6
 801f714:	e7de      	b.n	801f6d4 <__gethex+0xe8>
 801f716:	eba6 0309 	sub.w	r3, r6, r9
 801f71a:	3b01      	subs	r3, #1
 801f71c:	4629      	mov	r1, r5
 801f71e:	2b07      	cmp	r3, #7
 801f720:	dc0a      	bgt.n	801f738 <__gethex+0x14c>
 801f722:	9801      	ldr	r0, [sp, #4]
 801f724:	f7fd fd84 	bl	801d230 <_Balloc>
 801f728:	4604      	mov	r4, r0
 801f72a:	b940      	cbnz	r0, 801f73e <__gethex+0x152>
 801f72c:	4b5c      	ldr	r3, [pc, #368]	@ (801f8a0 <__gethex+0x2b4>)
 801f72e:	4602      	mov	r2, r0
 801f730:	21e4      	movs	r1, #228	@ 0xe4
 801f732:	485c      	ldr	r0, [pc, #368]	@ (801f8a4 <__gethex+0x2b8>)
 801f734:	f7fc fe06 	bl	801c344 <__assert_func>
 801f738:	3101      	adds	r1, #1
 801f73a:	105b      	asrs	r3, r3, #1
 801f73c:	e7ef      	b.n	801f71e <__gethex+0x132>
 801f73e:	f100 0a14 	add.w	sl, r0, #20
 801f742:	2300      	movs	r3, #0
 801f744:	4655      	mov	r5, sl
 801f746:	469b      	mov	fp, r3
 801f748:	45b1      	cmp	r9, r6
 801f74a:	d337      	bcc.n	801f7bc <__gethex+0x1d0>
 801f74c:	f845 bb04 	str.w	fp, [r5], #4
 801f750:	eba5 050a 	sub.w	r5, r5, sl
 801f754:	10ad      	asrs	r5, r5, #2
 801f756:	6125      	str	r5, [r4, #16]
 801f758:	4658      	mov	r0, fp
 801f75a:	f7fd fe5b 	bl	801d414 <__hi0bits>
 801f75e:	016d      	lsls	r5, r5, #5
 801f760:	f8d8 6000 	ldr.w	r6, [r8]
 801f764:	1a2d      	subs	r5, r5, r0
 801f766:	42b5      	cmp	r5, r6
 801f768:	dd54      	ble.n	801f814 <__gethex+0x228>
 801f76a:	1bad      	subs	r5, r5, r6
 801f76c:	4629      	mov	r1, r5
 801f76e:	4620      	mov	r0, r4
 801f770:	f7fe f9e7 	bl	801db42 <__any_on>
 801f774:	4681      	mov	r9, r0
 801f776:	b178      	cbz	r0, 801f798 <__gethex+0x1ac>
 801f778:	1e6b      	subs	r3, r5, #1
 801f77a:	1159      	asrs	r1, r3, #5
 801f77c:	f003 021f 	and.w	r2, r3, #31
 801f780:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f784:	f04f 0901 	mov.w	r9, #1
 801f788:	fa09 f202 	lsl.w	r2, r9, r2
 801f78c:	420a      	tst	r2, r1
 801f78e:	d003      	beq.n	801f798 <__gethex+0x1ac>
 801f790:	454b      	cmp	r3, r9
 801f792:	dc36      	bgt.n	801f802 <__gethex+0x216>
 801f794:	f04f 0902 	mov.w	r9, #2
 801f798:	4629      	mov	r1, r5
 801f79a:	4620      	mov	r0, r4
 801f79c:	f7ff febf 	bl	801f51e <rshift>
 801f7a0:	442f      	add	r7, r5
 801f7a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f7a6:	42bb      	cmp	r3, r7
 801f7a8:	da42      	bge.n	801f830 <__gethex+0x244>
 801f7aa:	9801      	ldr	r0, [sp, #4]
 801f7ac:	4621      	mov	r1, r4
 801f7ae:	f7fd fd7f 	bl	801d2b0 <_Bfree>
 801f7b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	6013      	str	r3, [r2, #0]
 801f7b8:	25a3      	movs	r5, #163	@ 0xa3
 801f7ba:	e793      	b.n	801f6e4 <__gethex+0xf8>
 801f7bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801f7c0:	2a2e      	cmp	r2, #46	@ 0x2e
 801f7c2:	d012      	beq.n	801f7ea <__gethex+0x1fe>
 801f7c4:	2b20      	cmp	r3, #32
 801f7c6:	d104      	bne.n	801f7d2 <__gethex+0x1e6>
 801f7c8:	f845 bb04 	str.w	fp, [r5], #4
 801f7cc:	f04f 0b00 	mov.w	fp, #0
 801f7d0:	465b      	mov	r3, fp
 801f7d2:	7830      	ldrb	r0, [r6, #0]
 801f7d4:	9303      	str	r3, [sp, #12]
 801f7d6:	f7ff fef4 	bl	801f5c2 <__hexdig_fun>
 801f7da:	9b03      	ldr	r3, [sp, #12]
 801f7dc:	f000 000f 	and.w	r0, r0, #15
 801f7e0:	4098      	lsls	r0, r3
 801f7e2:	ea4b 0b00 	orr.w	fp, fp, r0
 801f7e6:	3304      	adds	r3, #4
 801f7e8:	e7ae      	b.n	801f748 <__gethex+0x15c>
 801f7ea:	45b1      	cmp	r9, r6
 801f7ec:	d8ea      	bhi.n	801f7c4 <__gethex+0x1d8>
 801f7ee:	492b      	ldr	r1, [pc, #172]	@ (801f89c <__gethex+0x2b0>)
 801f7f0:	9303      	str	r3, [sp, #12]
 801f7f2:	2201      	movs	r2, #1
 801f7f4:	4630      	mov	r0, r6
 801f7f6:	f7fc fcaf 	bl	801c158 <strncmp>
 801f7fa:	9b03      	ldr	r3, [sp, #12]
 801f7fc:	2800      	cmp	r0, #0
 801f7fe:	d1e1      	bne.n	801f7c4 <__gethex+0x1d8>
 801f800:	e7a2      	b.n	801f748 <__gethex+0x15c>
 801f802:	1ea9      	subs	r1, r5, #2
 801f804:	4620      	mov	r0, r4
 801f806:	f7fe f99c 	bl	801db42 <__any_on>
 801f80a:	2800      	cmp	r0, #0
 801f80c:	d0c2      	beq.n	801f794 <__gethex+0x1a8>
 801f80e:	f04f 0903 	mov.w	r9, #3
 801f812:	e7c1      	b.n	801f798 <__gethex+0x1ac>
 801f814:	da09      	bge.n	801f82a <__gethex+0x23e>
 801f816:	1b75      	subs	r5, r6, r5
 801f818:	4621      	mov	r1, r4
 801f81a:	9801      	ldr	r0, [sp, #4]
 801f81c:	462a      	mov	r2, r5
 801f81e:	f7fd ff57 	bl	801d6d0 <__lshift>
 801f822:	1b7f      	subs	r7, r7, r5
 801f824:	4604      	mov	r4, r0
 801f826:	f100 0a14 	add.w	sl, r0, #20
 801f82a:	f04f 0900 	mov.w	r9, #0
 801f82e:	e7b8      	b.n	801f7a2 <__gethex+0x1b6>
 801f830:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f834:	42bd      	cmp	r5, r7
 801f836:	dd6f      	ble.n	801f918 <__gethex+0x32c>
 801f838:	1bed      	subs	r5, r5, r7
 801f83a:	42ae      	cmp	r6, r5
 801f83c:	dc34      	bgt.n	801f8a8 <__gethex+0x2bc>
 801f83e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f842:	2b02      	cmp	r3, #2
 801f844:	d022      	beq.n	801f88c <__gethex+0x2a0>
 801f846:	2b03      	cmp	r3, #3
 801f848:	d024      	beq.n	801f894 <__gethex+0x2a8>
 801f84a:	2b01      	cmp	r3, #1
 801f84c:	d115      	bne.n	801f87a <__gethex+0x28e>
 801f84e:	42ae      	cmp	r6, r5
 801f850:	d113      	bne.n	801f87a <__gethex+0x28e>
 801f852:	2e01      	cmp	r6, #1
 801f854:	d10b      	bne.n	801f86e <__gethex+0x282>
 801f856:	9a02      	ldr	r2, [sp, #8]
 801f858:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f85c:	6013      	str	r3, [r2, #0]
 801f85e:	2301      	movs	r3, #1
 801f860:	6123      	str	r3, [r4, #16]
 801f862:	f8ca 3000 	str.w	r3, [sl]
 801f866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f868:	2562      	movs	r5, #98	@ 0x62
 801f86a:	601c      	str	r4, [r3, #0]
 801f86c:	e73a      	b.n	801f6e4 <__gethex+0xf8>
 801f86e:	1e71      	subs	r1, r6, #1
 801f870:	4620      	mov	r0, r4
 801f872:	f7fe f966 	bl	801db42 <__any_on>
 801f876:	2800      	cmp	r0, #0
 801f878:	d1ed      	bne.n	801f856 <__gethex+0x26a>
 801f87a:	9801      	ldr	r0, [sp, #4]
 801f87c:	4621      	mov	r1, r4
 801f87e:	f7fd fd17 	bl	801d2b0 <_Bfree>
 801f882:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f884:	2300      	movs	r3, #0
 801f886:	6013      	str	r3, [r2, #0]
 801f888:	2550      	movs	r5, #80	@ 0x50
 801f88a:	e72b      	b.n	801f6e4 <__gethex+0xf8>
 801f88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f88e:	2b00      	cmp	r3, #0
 801f890:	d1f3      	bne.n	801f87a <__gethex+0x28e>
 801f892:	e7e0      	b.n	801f856 <__gethex+0x26a>
 801f894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f896:	2b00      	cmp	r3, #0
 801f898:	d1dd      	bne.n	801f856 <__gethex+0x26a>
 801f89a:	e7ee      	b.n	801f87a <__gethex+0x28e>
 801f89c:	08022296 	.word	0x08022296
 801f8a0:	0802222c 	.word	0x0802222c
 801f8a4:	080222bb 	.word	0x080222bb
 801f8a8:	1e6f      	subs	r7, r5, #1
 801f8aa:	f1b9 0f00 	cmp.w	r9, #0
 801f8ae:	d130      	bne.n	801f912 <__gethex+0x326>
 801f8b0:	b127      	cbz	r7, 801f8bc <__gethex+0x2d0>
 801f8b2:	4639      	mov	r1, r7
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	f7fe f944 	bl	801db42 <__any_on>
 801f8ba:	4681      	mov	r9, r0
 801f8bc:	117a      	asrs	r2, r7, #5
 801f8be:	2301      	movs	r3, #1
 801f8c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f8c4:	f007 071f 	and.w	r7, r7, #31
 801f8c8:	40bb      	lsls	r3, r7
 801f8ca:	4213      	tst	r3, r2
 801f8cc:	4629      	mov	r1, r5
 801f8ce:	4620      	mov	r0, r4
 801f8d0:	bf18      	it	ne
 801f8d2:	f049 0902 	orrne.w	r9, r9, #2
 801f8d6:	f7ff fe22 	bl	801f51e <rshift>
 801f8da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801f8de:	1b76      	subs	r6, r6, r5
 801f8e0:	2502      	movs	r5, #2
 801f8e2:	f1b9 0f00 	cmp.w	r9, #0
 801f8e6:	d047      	beq.n	801f978 <__gethex+0x38c>
 801f8e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f8ec:	2b02      	cmp	r3, #2
 801f8ee:	d015      	beq.n	801f91c <__gethex+0x330>
 801f8f0:	2b03      	cmp	r3, #3
 801f8f2:	d017      	beq.n	801f924 <__gethex+0x338>
 801f8f4:	2b01      	cmp	r3, #1
 801f8f6:	d109      	bne.n	801f90c <__gethex+0x320>
 801f8f8:	f019 0f02 	tst.w	r9, #2
 801f8fc:	d006      	beq.n	801f90c <__gethex+0x320>
 801f8fe:	f8da 3000 	ldr.w	r3, [sl]
 801f902:	ea49 0903 	orr.w	r9, r9, r3
 801f906:	f019 0f01 	tst.w	r9, #1
 801f90a:	d10e      	bne.n	801f92a <__gethex+0x33e>
 801f90c:	f045 0510 	orr.w	r5, r5, #16
 801f910:	e032      	b.n	801f978 <__gethex+0x38c>
 801f912:	f04f 0901 	mov.w	r9, #1
 801f916:	e7d1      	b.n	801f8bc <__gethex+0x2d0>
 801f918:	2501      	movs	r5, #1
 801f91a:	e7e2      	b.n	801f8e2 <__gethex+0x2f6>
 801f91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f91e:	f1c3 0301 	rsb	r3, r3, #1
 801f922:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f926:	2b00      	cmp	r3, #0
 801f928:	d0f0      	beq.n	801f90c <__gethex+0x320>
 801f92a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f92e:	f104 0314 	add.w	r3, r4, #20
 801f932:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f936:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f93a:	f04f 0c00 	mov.w	ip, #0
 801f93e:	4618      	mov	r0, r3
 801f940:	f853 2b04 	ldr.w	r2, [r3], #4
 801f944:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f948:	d01b      	beq.n	801f982 <__gethex+0x396>
 801f94a:	3201      	adds	r2, #1
 801f94c:	6002      	str	r2, [r0, #0]
 801f94e:	2d02      	cmp	r5, #2
 801f950:	f104 0314 	add.w	r3, r4, #20
 801f954:	d13c      	bne.n	801f9d0 <__gethex+0x3e4>
 801f956:	f8d8 2000 	ldr.w	r2, [r8]
 801f95a:	3a01      	subs	r2, #1
 801f95c:	42b2      	cmp	r2, r6
 801f95e:	d109      	bne.n	801f974 <__gethex+0x388>
 801f960:	1171      	asrs	r1, r6, #5
 801f962:	2201      	movs	r2, #1
 801f964:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f968:	f006 061f 	and.w	r6, r6, #31
 801f96c:	fa02 f606 	lsl.w	r6, r2, r6
 801f970:	421e      	tst	r6, r3
 801f972:	d13a      	bne.n	801f9ea <__gethex+0x3fe>
 801f974:	f045 0520 	orr.w	r5, r5, #32
 801f978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f97a:	601c      	str	r4, [r3, #0]
 801f97c:	9b02      	ldr	r3, [sp, #8]
 801f97e:	601f      	str	r7, [r3, #0]
 801f980:	e6b0      	b.n	801f6e4 <__gethex+0xf8>
 801f982:	4299      	cmp	r1, r3
 801f984:	f843 cc04 	str.w	ip, [r3, #-4]
 801f988:	d8d9      	bhi.n	801f93e <__gethex+0x352>
 801f98a:	68a3      	ldr	r3, [r4, #8]
 801f98c:	459b      	cmp	fp, r3
 801f98e:	db17      	blt.n	801f9c0 <__gethex+0x3d4>
 801f990:	6861      	ldr	r1, [r4, #4]
 801f992:	9801      	ldr	r0, [sp, #4]
 801f994:	3101      	adds	r1, #1
 801f996:	f7fd fc4b 	bl	801d230 <_Balloc>
 801f99a:	4681      	mov	r9, r0
 801f99c:	b918      	cbnz	r0, 801f9a6 <__gethex+0x3ba>
 801f99e:	4b1a      	ldr	r3, [pc, #104]	@ (801fa08 <__gethex+0x41c>)
 801f9a0:	4602      	mov	r2, r0
 801f9a2:	2184      	movs	r1, #132	@ 0x84
 801f9a4:	e6c5      	b.n	801f732 <__gethex+0x146>
 801f9a6:	6922      	ldr	r2, [r4, #16]
 801f9a8:	3202      	adds	r2, #2
 801f9aa:	f104 010c 	add.w	r1, r4, #12
 801f9ae:	0092      	lsls	r2, r2, #2
 801f9b0:	300c      	adds	r0, #12
 801f9b2:	f7fc fcb8 	bl	801c326 <memcpy>
 801f9b6:	4621      	mov	r1, r4
 801f9b8:	9801      	ldr	r0, [sp, #4]
 801f9ba:	f7fd fc79 	bl	801d2b0 <_Bfree>
 801f9be:	464c      	mov	r4, r9
 801f9c0:	6923      	ldr	r3, [r4, #16]
 801f9c2:	1c5a      	adds	r2, r3, #1
 801f9c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f9c8:	6122      	str	r2, [r4, #16]
 801f9ca:	2201      	movs	r2, #1
 801f9cc:	615a      	str	r2, [r3, #20]
 801f9ce:	e7be      	b.n	801f94e <__gethex+0x362>
 801f9d0:	6922      	ldr	r2, [r4, #16]
 801f9d2:	455a      	cmp	r2, fp
 801f9d4:	dd0b      	ble.n	801f9ee <__gethex+0x402>
 801f9d6:	2101      	movs	r1, #1
 801f9d8:	4620      	mov	r0, r4
 801f9da:	f7ff fda0 	bl	801f51e <rshift>
 801f9de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f9e2:	3701      	adds	r7, #1
 801f9e4:	42bb      	cmp	r3, r7
 801f9e6:	f6ff aee0 	blt.w	801f7aa <__gethex+0x1be>
 801f9ea:	2501      	movs	r5, #1
 801f9ec:	e7c2      	b.n	801f974 <__gethex+0x388>
 801f9ee:	f016 061f 	ands.w	r6, r6, #31
 801f9f2:	d0fa      	beq.n	801f9ea <__gethex+0x3fe>
 801f9f4:	4453      	add	r3, sl
 801f9f6:	f1c6 0620 	rsb	r6, r6, #32
 801f9fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801f9fe:	f7fd fd09 	bl	801d414 <__hi0bits>
 801fa02:	42b0      	cmp	r0, r6
 801fa04:	dbe7      	blt.n	801f9d6 <__gethex+0x3ea>
 801fa06:	e7f0      	b.n	801f9ea <__gethex+0x3fe>
 801fa08:	0802222c 	.word	0x0802222c

0801fa0c <L_shift>:
 801fa0c:	f1c2 0208 	rsb	r2, r2, #8
 801fa10:	0092      	lsls	r2, r2, #2
 801fa12:	b570      	push	{r4, r5, r6, lr}
 801fa14:	f1c2 0620 	rsb	r6, r2, #32
 801fa18:	6843      	ldr	r3, [r0, #4]
 801fa1a:	6804      	ldr	r4, [r0, #0]
 801fa1c:	fa03 f506 	lsl.w	r5, r3, r6
 801fa20:	432c      	orrs	r4, r5
 801fa22:	40d3      	lsrs	r3, r2
 801fa24:	6004      	str	r4, [r0, #0]
 801fa26:	f840 3f04 	str.w	r3, [r0, #4]!
 801fa2a:	4288      	cmp	r0, r1
 801fa2c:	d3f4      	bcc.n	801fa18 <L_shift+0xc>
 801fa2e:	bd70      	pop	{r4, r5, r6, pc}

0801fa30 <__match>:
 801fa30:	b530      	push	{r4, r5, lr}
 801fa32:	6803      	ldr	r3, [r0, #0]
 801fa34:	3301      	adds	r3, #1
 801fa36:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fa3a:	b914      	cbnz	r4, 801fa42 <__match+0x12>
 801fa3c:	6003      	str	r3, [r0, #0]
 801fa3e:	2001      	movs	r0, #1
 801fa40:	bd30      	pop	{r4, r5, pc}
 801fa42:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801fa4a:	2d19      	cmp	r5, #25
 801fa4c:	bf98      	it	ls
 801fa4e:	3220      	addls	r2, #32
 801fa50:	42a2      	cmp	r2, r4
 801fa52:	d0f0      	beq.n	801fa36 <__match+0x6>
 801fa54:	2000      	movs	r0, #0
 801fa56:	e7f3      	b.n	801fa40 <__match+0x10>

0801fa58 <__hexnan>:
 801fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa5c:	680b      	ldr	r3, [r1, #0]
 801fa5e:	6801      	ldr	r1, [r0, #0]
 801fa60:	115e      	asrs	r6, r3, #5
 801fa62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fa66:	f013 031f 	ands.w	r3, r3, #31
 801fa6a:	b087      	sub	sp, #28
 801fa6c:	bf18      	it	ne
 801fa6e:	3604      	addne	r6, #4
 801fa70:	2500      	movs	r5, #0
 801fa72:	1f37      	subs	r7, r6, #4
 801fa74:	4682      	mov	sl, r0
 801fa76:	4690      	mov	r8, r2
 801fa78:	9301      	str	r3, [sp, #4]
 801fa7a:	f846 5c04 	str.w	r5, [r6, #-4]
 801fa7e:	46b9      	mov	r9, r7
 801fa80:	463c      	mov	r4, r7
 801fa82:	9502      	str	r5, [sp, #8]
 801fa84:	46ab      	mov	fp, r5
 801fa86:	784a      	ldrb	r2, [r1, #1]
 801fa88:	1c4b      	adds	r3, r1, #1
 801fa8a:	9303      	str	r3, [sp, #12]
 801fa8c:	b342      	cbz	r2, 801fae0 <__hexnan+0x88>
 801fa8e:	4610      	mov	r0, r2
 801fa90:	9105      	str	r1, [sp, #20]
 801fa92:	9204      	str	r2, [sp, #16]
 801fa94:	f7ff fd95 	bl	801f5c2 <__hexdig_fun>
 801fa98:	2800      	cmp	r0, #0
 801fa9a:	d151      	bne.n	801fb40 <__hexnan+0xe8>
 801fa9c:	9a04      	ldr	r2, [sp, #16]
 801fa9e:	9905      	ldr	r1, [sp, #20]
 801faa0:	2a20      	cmp	r2, #32
 801faa2:	d818      	bhi.n	801fad6 <__hexnan+0x7e>
 801faa4:	9b02      	ldr	r3, [sp, #8]
 801faa6:	459b      	cmp	fp, r3
 801faa8:	dd13      	ble.n	801fad2 <__hexnan+0x7a>
 801faaa:	454c      	cmp	r4, r9
 801faac:	d206      	bcs.n	801fabc <__hexnan+0x64>
 801faae:	2d07      	cmp	r5, #7
 801fab0:	dc04      	bgt.n	801fabc <__hexnan+0x64>
 801fab2:	462a      	mov	r2, r5
 801fab4:	4649      	mov	r1, r9
 801fab6:	4620      	mov	r0, r4
 801fab8:	f7ff ffa8 	bl	801fa0c <L_shift>
 801fabc:	4544      	cmp	r4, r8
 801fabe:	d952      	bls.n	801fb66 <__hexnan+0x10e>
 801fac0:	2300      	movs	r3, #0
 801fac2:	f1a4 0904 	sub.w	r9, r4, #4
 801fac6:	f844 3c04 	str.w	r3, [r4, #-4]
 801faca:	f8cd b008 	str.w	fp, [sp, #8]
 801face:	464c      	mov	r4, r9
 801fad0:	461d      	mov	r5, r3
 801fad2:	9903      	ldr	r1, [sp, #12]
 801fad4:	e7d7      	b.n	801fa86 <__hexnan+0x2e>
 801fad6:	2a29      	cmp	r2, #41	@ 0x29
 801fad8:	d157      	bne.n	801fb8a <__hexnan+0x132>
 801fada:	3102      	adds	r1, #2
 801fadc:	f8ca 1000 	str.w	r1, [sl]
 801fae0:	f1bb 0f00 	cmp.w	fp, #0
 801fae4:	d051      	beq.n	801fb8a <__hexnan+0x132>
 801fae6:	454c      	cmp	r4, r9
 801fae8:	d206      	bcs.n	801faf8 <__hexnan+0xa0>
 801faea:	2d07      	cmp	r5, #7
 801faec:	dc04      	bgt.n	801faf8 <__hexnan+0xa0>
 801faee:	462a      	mov	r2, r5
 801faf0:	4649      	mov	r1, r9
 801faf2:	4620      	mov	r0, r4
 801faf4:	f7ff ff8a 	bl	801fa0c <L_shift>
 801faf8:	4544      	cmp	r4, r8
 801fafa:	d936      	bls.n	801fb6a <__hexnan+0x112>
 801fafc:	f1a8 0204 	sub.w	r2, r8, #4
 801fb00:	4623      	mov	r3, r4
 801fb02:	f853 1b04 	ldr.w	r1, [r3], #4
 801fb06:	f842 1f04 	str.w	r1, [r2, #4]!
 801fb0a:	429f      	cmp	r7, r3
 801fb0c:	d2f9      	bcs.n	801fb02 <__hexnan+0xaa>
 801fb0e:	1b3b      	subs	r3, r7, r4
 801fb10:	f023 0303 	bic.w	r3, r3, #3
 801fb14:	3304      	adds	r3, #4
 801fb16:	3401      	adds	r4, #1
 801fb18:	3e03      	subs	r6, #3
 801fb1a:	42b4      	cmp	r4, r6
 801fb1c:	bf88      	it	hi
 801fb1e:	2304      	movhi	r3, #4
 801fb20:	4443      	add	r3, r8
 801fb22:	2200      	movs	r2, #0
 801fb24:	f843 2b04 	str.w	r2, [r3], #4
 801fb28:	429f      	cmp	r7, r3
 801fb2a:	d2fb      	bcs.n	801fb24 <__hexnan+0xcc>
 801fb2c:	683b      	ldr	r3, [r7, #0]
 801fb2e:	b91b      	cbnz	r3, 801fb38 <__hexnan+0xe0>
 801fb30:	4547      	cmp	r7, r8
 801fb32:	d128      	bne.n	801fb86 <__hexnan+0x12e>
 801fb34:	2301      	movs	r3, #1
 801fb36:	603b      	str	r3, [r7, #0]
 801fb38:	2005      	movs	r0, #5
 801fb3a:	b007      	add	sp, #28
 801fb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb40:	3501      	adds	r5, #1
 801fb42:	2d08      	cmp	r5, #8
 801fb44:	f10b 0b01 	add.w	fp, fp, #1
 801fb48:	dd06      	ble.n	801fb58 <__hexnan+0x100>
 801fb4a:	4544      	cmp	r4, r8
 801fb4c:	d9c1      	bls.n	801fad2 <__hexnan+0x7a>
 801fb4e:	2300      	movs	r3, #0
 801fb50:	f844 3c04 	str.w	r3, [r4, #-4]
 801fb54:	2501      	movs	r5, #1
 801fb56:	3c04      	subs	r4, #4
 801fb58:	6822      	ldr	r2, [r4, #0]
 801fb5a:	f000 000f 	and.w	r0, r0, #15
 801fb5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fb62:	6020      	str	r0, [r4, #0]
 801fb64:	e7b5      	b.n	801fad2 <__hexnan+0x7a>
 801fb66:	2508      	movs	r5, #8
 801fb68:	e7b3      	b.n	801fad2 <__hexnan+0x7a>
 801fb6a:	9b01      	ldr	r3, [sp, #4]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d0dd      	beq.n	801fb2c <__hexnan+0xd4>
 801fb70:	f1c3 0320 	rsb	r3, r3, #32
 801fb74:	f04f 32ff 	mov.w	r2, #4294967295
 801fb78:	40da      	lsrs	r2, r3
 801fb7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fb7e:	4013      	ands	r3, r2
 801fb80:	f846 3c04 	str.w	r3, [r6, #-4]
 801fb84:	e7d2      	b.n	801fb2c <__hexnan+0xd4>
 801fb86:	3f04      	subs	r7, #4
 801fb88:	e7d0      	b.n	801fb2c <__hexnan+0xd4>
 801fb8a:	2004      	movs	r0, #4
 801fb8c:	e7d5      	b.n	801fb3a <__hexnan+0xe2>

0801fb8e <__ascii_mbtowc>:
 801fb8e:	b082      	sub	sp, #8
 801fb90:	b901      	cbnz	r1, 801fb94 <__ascii_mbtowc+0x6>
 801fb92:	a901      	add	r1, sp, #4
 801fb94:	b142      	cbz	r2, 801fba8 <__ascii_mbtowc+0x1a>
 801fb96:	b14b      	cbz	r3, 801fbac <__ascii_mbtowc+0x1e>
 801fb98:	7813      	ldrb	r3, [r2, #0]
 801fb9a:	600b      	str	r3, [r1, #0]
 801fb9c:	7812      	ldrb	r2, [r2, #0]
 801fb9e:	1e10      	subs	r0, r2, #0
 801fba0:	bf18      	it	ne
 801fba2:	2001      	movne	r0, #1
 801fba4:	b002      	add	sp, #8
 801fba6:	4770      	bx	lr
 801fba8:	4610      	mov	r0, r2
 801fbaa:	e7fb      	b.n	801fba4 <__ascii_mbtowc+0x16>
 801fbac:	f06f 0001 	mvn.w	r0, #1
 801fbb0:	e7f8      	b.n	801fba4 <__ascii_mbtowc+0x16>

0801fbb2 <_malloc_usable_size_r>:
 801fbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fbb6:	1f18      	subs	r0, r3, #4
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	bfbc      	itt	lt
 801fbbc:	580b      	ldrlt	r3, [r1, r0]
 801fbbe:	18c0      	addlt	r0, r0, r3
 801fbc0:	4770      	bx	lr
	...

0801fbc4 <_strtoul_l.isra.0>:
 801fbc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fbc8:	4e34      	ldr	r6, [pc, #208]	@ (801fc9c <_strtoul_l.isra.0+0xd8>)
 801fbca:	4686      	mov	lr, r0
 801fbcc:	460d      	mov	r5, r1
 801fbce:	4628      	mov	r0, r5
 801fbd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fbd4:	5d37      	ldrb	r7, [r6, r4]
 801fbd6:	f017 0708 	ands.w	r7, r7, #8
 801fbda:	d1f8      	bne.n	801fbce <_strtoul_l.isra.0+0xa>
 801fbdc:	2c2d      	cmp	r4, #45	@ 0x2d
 801fbde:	d110      	bne.n	801fc02 <_strtoul_l.isra.0+0x3e>
 801fbe0:	782c      	ldrb	r4, [r5, #0]
 801fbe2:	2701      	movs	r7, #1
 801fbe4:	1c85      	adds	r5, r0, #2
 801fbe6:	f033 0010 	bics.w	r0, r3, #16
 801fbea:	d115      	bne.n	801fc18 <_strtoul_l.isra.0+0x54>
 801fbec:	2c30      	cmp	r4, #48	@ 0x30
 801fbee:	d10d      	bne.n	801fc0c <_strtoul_l.isra.0+0x48>
 801fbf0:	7828      	ldrb	r0, [r5, #0]
 801fbf2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801fbf6:	2858      	cmp	r0, #88	@ 0x58
 801fbf8:	d108      	bne.n	801fc0c <_strtoul_l.isra.0+0x48>
 801fbfa:	786c      	ldrb	r4, [r5, #1]
 801fbfc:	3502      	adds	r5, #2
 801fbfe:	2310      	movs	r3, #16
 801fc00:	e00a      	b.n	801fc18 <_strtoul_l.isra.0+0x54>
 801fc02:	2c2b      	cmp	r4, #43	@ 0x2b
 801fc04:	bf04      	itt	eq
 801fc06:	782c      	ldrbeq	r4, [r5, #0]
 801fc08:	1c85      	addeq	r5, r0, #2
 801fc0a:	e7ec      	b.n	801fbe6 <_strtoul_l.isra.0+0x22>
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	d1f6      	bne.n	801fbfe <_strtoul_l.isra.0+0x3a>
 801fc10:	2c30      	cmp	r4, #48	@ 0x30
 801fc12:	bf14      	ite	ne
 801fc14:	230a      	movne	r3, #10
 801fc16:	2308      	moveq	r3, #8
 801fc18:	f04f 38ff 	mov.w	r8, #4294967295
 801fc1c:	2600      	movs	r6, #0
 801fc1e:	fbb8 f8f3 	udiv	r8, r8, r3
 801fc22:	fb03 f908 	mul.w	r9, r3, r8
 801fc26:	ea6f 0909 	mvn.w	r9, r9
 801fc2a:	4630      	mov	r0, r6
 801fc2c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801fc30:	f1bc 0f09 	cmp.w	ip, #9
 801fc34:	d810      	bhi.n	801fc58 <_strtoul_l.isra.0+0x94>
 801fc36:	4664      	mov	r4, ip
 801fc38:	42a3      	cmp	r3, r4
 801fc3a:	dd1e      	ble.n	801fc7a <_strtoul_l.isra.0+0xb6>
 801fc3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801fc40:	d007      	beq.n	801fc52 <_strtoul_l.isra.0+0x8e>
 801fc42:	4580      	cmp	r8, r0
 801fc44:	d316      	bcc.n	801fc74 <_strtoul_l.isra.0+0xb0>
 801fc46:	d101      	bne.n	801fc4c <_strtoul_l.isra.0+0x88>
 801fc48:	45a1      	cmp	r9, r4
 801fc4a:	db13      	blt.n	801fc74 <_strtoul_l.isra.0+0xb0>
 801fc4c:	fb00 4003 	mla	r0, r0, r3, r4
 801fc50:	2601      	movs	r6, #1
 801fc52:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fc56:	e7e9      	b.n	801fc2c <_strtoul_l.isra.0+0x68>
 801fc58:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801fc5c:	f1bc 0f19 	cmp.w	ip, #25
 801fc60:	d801      	bhi.n	801fc66 <_strtoul_l.isra.0+0xa2>
 801fc62:	3c37      	subs	r4, #55	@ 0x37
 801fc64:	e7e8      	b.n	801fc38 <_strtoul_l.isra.0+0x74>
 801fc66:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801fc6a:	f1bc 0f19 	cmp.w	ip, #25
 801fc6e:	d804      	bhi.n	801fc7a <_strtoul_l.isra.0+0xb6>
 801fc70:	3c57      	subs	r4, #87	@ 0x57
 801fc72:	e7e1      	b.n	801fc38 <_strtoul_l.isra.0+0x74>
 801fc74:	f04f 36ff 	mov.w	r6, #4294967295
 801fc78:	e7eb      	b.n	801fc52 <_strtoul_l.isra.0+0x8e>
 801fc7a:	1c73      	adds	r3, r6, #1
 801fc7c:	d106      	bne.n	801fc8c <_strtoul_l.isra.0+0xc8>
 801fc7e:	2322      	movs	r3, #34	@ 0x22
 801fc80:	f8ce 3000 	str.w	r3, [lr]
 801fc84:	4630      	mov	r0, r6
 801fc86:	b932      	cbnz	r2, 801fc96 <_strtoul_l.isra.0+0xd2>
 801fc88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fc8c:	b107      	cbz	r7, 801fc90 <_strtoul_l.isra.0+0xcc>
 801fc8e:	4240      	negs	r0, r0
 801fc90:	2a00      	cmp	r2, #0
 801fc92:	d0f9      	beq.n	801fc88 <_strtoul_l.isra.0+0xc4>
 801fc94:	b106      	cbz	r6, 801fc98 <_strtoul_l.isra.0+0xd4>
 801fc96:	1e69      	subs	r1, r5, #1
 801fc98:	6011      	str	r1, [r2, #0]
 801fc9a:	e7f5      	b.n	801fc88 <_strtoul_l.isra.0+0xc4>
 801fc9c:	0802273d 	.word	0x0802273d

0801fca0 <_strtoul_r>:
 801fca0:	f7ff bf90 	b.w	801fbc4 <_strtoul_l.isra.0>

0801fca4 <__ascii_wctomb>:
 801fca4:	4603      	mov	r3, r0
 801fca6:	4608      	mov	r0, r1
 801fca8:	b141      	cbz	r1, 801fcbc <__ascii_wctomb+0x18>
 801fcaa:	2aff      	cmp	r2, #255	@ 0xff
 801fcac:	d904      	bls.n	801fcb8 <__ascii_wctomb+0x14>
 801fcae:	228a      	movs	r2, #138	@ 0x8a
 801fcb0:	601a      	str	r2, [r3, #0]
 801fcb2:	f04f 30ff 	mov.w	r0, #4294967295
 801fcb6:	4770      	bx	lr
 801fcb8:	700a      	strb	r2, [r1, #0]
 801fcba:	2001      	movs	r0, #1
 801fcbc:	4770      	bx	lr

0801fcbe <_raise_r>:
 801fcbe:	291f      	cmp	r1, #31
 801fcc0:	b538      	push	{r3, r4, r5, lr}
 801fcc2:	4605      	mov	r5, r0
 801fcc4:	460c      	mov	r4, r1
 801fcc6:	d904      	bls.n	801fcd2 <_raise_r+0x14>
 801fcc8:	2316      	movs	r3, #22
 801fcca:	6003      	str	r3, [r0, #0]
 801fccc:	f04f 30ff 	mov.w	r0, #4294967295
 801fcd0:	bd38      	pop	{r3, r4, r5, pc}
 801fcd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fcd4:	b112      	cbz	r2, 801fcdc <_raise_r+0x1e>
 801fcd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fcda:	b94b      	cbnz	r3, 801fcf0 <_raise_r+0x32>
 801fcdc:	4628      	mov	r0, r5
 801fcde:	f000 f831 	bl	801fd44 <_getpid_r>
 801fce2:	4622      	mov	r2, r4
 801fce4:	4601      	mov	r1, r0
 801fce6:	4628      	mov	r0, r5
 801fce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fcec:	f000 b818 	b.w	801fd20 <_kill_r>
 801fcf0:	2b01      	cmp	r3, #1
 801fcf2:	d00a      	beq.n	801fd0a <_raise_r+0x4c>
 801fcf4:	1c59      	adds	r1, r3, #1
 801fcf6:	d103      	bne.n	801fd00 <_raise_r+0x42>
 801fcf8:	2316      	movs	r3, #22
 801fcfa:	6003      	str	r3, [r0, #0]
 801fcfc:	2001      	movs	r0, #1
 801fcfe:	e7e7      	b.n	801fcd0 <_raise_r+0x12>
 801fd00:	2100      	movs	r1, #0
 801fd02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fd06:	4620      	mov	r0, r4
 801fd08:	4798      	blx	r3
 801fd0a:	2000      	movs	r0, #0
 801fd0c:	e7e0      	b.n	801fcd0 <_raise_r+0x12>
	...

0801fd10 <raise>:
 801fd10:	4b02      	ldr	r3, [pc, #8]	@ (801fd1c <raise+0xc>)
 801fd12:	4601      	mov	r1, r0
 801fd14:	6818      	ldr	r0, [r3, #0]
 801fd16:	f7ff bfd2 	b.w	801fcbe <_raise_r>
 801fd1a:	bf00      	nop
 801fd1c:	20000164 	.word	0x20000164

0801fd20 <_kill_r>:
 801fd20:	b538      	push	{r3, r4, r5, lr}
 801fd22:	4d07      	ldr	r5, [pc, #28]	@ (801fd40 <_kill_r+0x20>)
 801fd24:	2300      	movs	r3, #0
 801fd26:	4604      	mov	r4, r0
 801fd28:	4608      	mov	r0, r1
 801fd2a:	4611      	mov	r1, r2
 801fd2c:	602b      	str	r3, [r5, #0]
 801fd2e:	f7eb faff 	bl	800b330 <_kill>
 801fd32:	1c43      	adds	r3, r0, #1
 801fd34:	d102      	bne.n	801fd3c <_kill_r+0x1c>
 801fd36:	682b      	ldr	r3, [r5, #0]
 801fd38:	b103      	cbz	r3, 801fd3c <_kill_r+0x1c>
 801fd3a:	6023      	str	r3, [r4, #0]
 801fd3c:	bd38      	pop	{r3, r4, r5, pc}
 801fd3e:	bf00      	nop
 801fd40:	2000c430 	.word	0x2000c430

0801fd44 <_getpid_r>:
 801fd44:	f7eb baec 	b.w	800b320 <_getpid>

0801fd48 <_init>:
 801fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd4a:	bf00      	nop
 801fd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd4e:	bc08      	pop	{r3}
 801fd50:	469e      	mov	lr, r3
 801fd52:	4770      	bx	lr

0801fd54 <_fini>:
 801fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd56:	bf00      	nop
 801fd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd5a:	bc08      	pop	{r3}
 801fd5c:	469e      	mov	lr, r3
 801fd5e:	4770      	bx	lr
