
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e120  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002888  0801e2b0  0801e2b0  0001f2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020b38  08020b38  0002231c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020b38  08020b38  00021b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020b40  08020b40  0002231c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020b40  08020b40  00021b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020b44  08020b44  00021b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08020b48  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002231c  2**0
                  CONTENTS
 10 .bss          0000aec0  2000031c  2000031c  0002231c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b1dc  2000b1dc  0002231c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002231c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000374c2  00000000  00000000  0002234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f51  00000000  00000000  0005980e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cf0  00000000  00000000  00061760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002299  00000000  00000000  00064450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029112  00000000  00000000  000666e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037586  00000000  00000000  0008f7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db614  00000000  00000000  000c6d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2395  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d8f4  00000000  00000000  001a23d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001afccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e298 	.word	0x0801e298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801e298 	.word	0x0801e298

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001030:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00e      	beq.n	8001058 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800103a:	2234      	movs	r2, #52	@ 0x34
 800103c:	2100      	movs	r1, #0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f01a f934 	bl	801b2ac <memset>

	fc->rate_gain = rate_gain;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	619a      	str	r2, [r3, #24]
 8001056:	e000      	b.n	800105a <attitude_controller_init+0x3a>
        return;
 8001058:	bf00      	nop

}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	eeb0 6a40 	vmov.f32	s12, s0
 800106a:	eef0 6a60 	vmov.f32	s13, s1
 800106e:	eeb0 7a41 	vmov.f32	s14, s2
 8001072:	eef0 7a61 	vmov.f32	s15, s3
 8001076:	ed87 6a04 	vstr	s12, [r7, #16]
 800107a:	edc7 6a05 	vstr	s13, [r7, #20]
 800107e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001082:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8b0 	bl	80021f0 <quatnormalize>
 8001090:	eeb0 6a40 	vmov.f32	s12, s0
 8001094:	eef0 6a60 	vmov.f32	s13, s1
 8001098:	eeb0 7a41 	vmov.f32	s14, s2
 800109c:	eef0 7a61 	vmov.f32	s15, s3
 80010a0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010a4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010a8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010ac:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 f891 	bl	80021f0 <quatnormalize>
 80010ce:	eeb0 6a40 	vmov.f32	s12, s0
 80010d2:	eef0 6a60 	vmov.f32	s13, s1
 80010d6:	eeb0 7a41 	vmov.f32	s14, s2
 80010da:	eef0 7a61 	vmov.f32	s15, s3
 80010de:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 80010e2:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 80010e6:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 80010ea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 80010ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f841 	bl	800217a <quatconj>
 80010f8:	eeb0 6a40 	vmov.f32	s12, s0
 80010fc:	eef0 6a60 	vmov.f32	s13, s1
 8001100:	eeb0 7a41 	vmov.f32	s14, s2
 8001104:	eef0 7a61 	vmov.f32	s15, s3
 8001108:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800110c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001110:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001114:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001118:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f91f 	bl	8002366 <quatmultiply>
 8001128:	eeb0 6a40 	vmov.f32	s12, s0
 800112c:	eef0 6a60 	vmov.f32	s13, s1
 8001130:	eeb0 7a41 	vmov.f32	s14, s2
 8001134:	eef0 7a61 	vmov.f32	s15, s3
 8001138:	ed87 6a08 	vstr	s12, [r7, #32]
 800113c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001140:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001144:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f84f 	bl	80021f0 <quatnormalize>
 8001152:	eeb0 6a40 	vmov.f32	s12, s0
 8001156:	eef0 6a60 	vmov.f32	s13, s1
 800115a:	eeb0 7a41 	vmov.f32	s14, s2
 800115e:	eef0 7a61 	vmov.f32	s15, s3
 8001162:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001166:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800116a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800116e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001172:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001174:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001176:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800117a:	ee06 0a10 	vmov	s12, r0
 800117e:	ee06 1a90 	vmov	s13, r1
 8001182:	ee07 2a10 	vmov	s14, r2
 8001186:	ee07 3a90 	vmov	s15, r3
}
 800118a:	eeb0 0a46 	vmov.f32	s0, s12
 800118e:	eef0 0a66 	vmov.f32	s1, s13
 8001192:	eeb0 1a47 	vmov.f32	s2, s14
 8001196:	eef0 1a67 	vmov.f32	s3, s15
 800119a:	3770      	adds	r7, #112	@ 0x70
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b0a7      	sub	sp, #156	@ 0x9c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	61f8      	str	r0, [r7, #28]
 80011a8:	eeb0 6a40 	vmov.f32	s12, s0
 80011ac:	eef0 6a60 	vmov.f32	s13, s1
 80011b0:	eeb0 7a41 	vmov.f32	s14, s2
 80011b4:	eef0 7a61 	vmov.f32	s15, s3
 80011b8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011bc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011c0:	ed87 3a00 	vstr	s6, [r7]
 80011c4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011c8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011cc:	ed87 7a05 	vstr	s14, [r7, #20]
 80011d0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 81b0 	beq.w	800153c <attitude_controller_angle_mode_update+0x39c>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d505      	bpl.n	8001200 <attitude_controller_angle_mode_update+0x60>
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fa:	eef1 7a67 	vneg.f32	s15, s15
 80011fe:	e00f      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	edd3 7a05 	vldr	s15, [r3, #20]
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dd03      	ble.n	800121c <attitude_controller_angle_mode_update+0x7c>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	e001      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	edd3 7a05 	vldr	s15, [r3, #20]
 800122a:	eef1 7a67 	vneg.f32	s15, s15
 800122e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d505      	bpl.n	8001248 <attitude_controller_angle_mode_update+0xa8>
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001242:	eef1 7a67 	vneg.f32	s15, s15
 8001246:	e00f      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	edd3 7a05 	vldr	s15, [r3, #20]
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd03      	ble.n	8001264 <attitude_controller_angle_mode_update+0xc4>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	e001      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eef1 7a67 	vneg.f32	s15, s15
 8001276:	ed97 7a00 	vldr	s14, [r7]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d505      	bpl.n	8001290 <attitude_controller_angle_mode_update+0xf0>
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	edd3 7a06 	vldr	s15, [r3, #24]
 800128a:	eef1 7a67 	vneg.f32	s15, s15
 800128e:	e00f      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	edd3 7a06 	vldr	s15, [r3, #24]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	dd03      	ble.n	80012ac <attitude_controller_angle_mode_update+0x10c>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	e001      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 80012ac:	edd7 7a00 	vldr	s15, [r7]
 80012b0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	461c      	mov	r4, r3
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 80012e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fab3 	bl	8002858 <angle2quat>
 80012f2:	eeb0 6a40 	vmov.f32	s12, s0
 80012f6:	eef0 6a60 	vmov.f32	s13, s1
 80012fa:	eeb0 7a41 	vmov.f32	s14, s2
 80012fe:	eef0 7a61 	vmov.f32	s15, s3
 8001302:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001306:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800130a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800130e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001312:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	673b      	str	r3, [r7, #112]	@ 0x70
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	677b      	str	r3, [r7, #116]	@ 0x74
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800132a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800132e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f001 f816 	bl	8002366 <quatmultiply>
 800133a:	eeb0 6a40 	vmov.f32	s12, s0
 800133e:	eef0 6a60 	vmov.f32	s13, s1
 8001342:	eeb0 7a41 	vmov.f32	s14, s2
 8001346:	eef0 7a61 	vmov.f32	s15, s3
 800134a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800134e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001352:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001356:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fbe0 	bl	8002b28 <quat_error>
 8001368:	eeb0 6a40 	vmov.f32	s12, s0
 800136c:	eef0 6a60 	vmov.f32	s13, s1
 8001370:	eeb0 7a41 	vmov.f32	s14, s2
 8001374:	eef0 7a61 	vmov.f32	s15, s3
 8001378:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800137c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 8001380:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 8001384:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 8001388:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 800138c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001390:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001394:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001398:	eeb0 0a46 	vmov.f32	s0, s12
 800139c:	eef0 0a66 	vmov.f32	s1, s13
 80013a0:	eeb0 1a47 	vmov.f32	s2, s14
 80013a4:	eef0 1a67 	vmov.f32	s3, s15
 80013a8:	f7ff fe5a 	bl	8001060 <quat_remove_yaw>
 80013ac:	eeb0 6a40 	vmov.f32	s12, s0
 80013b0:	eef0 6a60 	vmov.f32	s13, s1
 80013b4:	eeb0 7a41 	vmov.f32	s14, s2
 80013b8:	eef0 7a61 	vmov.f32	s15, s3
 80013bc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013c0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013c4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013cc:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013d0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013d4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013dc:	eeb0 0a46 	vmov.f32	s0, s12
 80013e0:	eef0 0a66 	vmov.f32	s1, s13
 80013e4:	eeb0 1a47 	vmov.f32	s2, s14
 80013e8:	eef0 1a67 	vmov.f32	s3, s15
 80013ec:	f001 f97e 	bl	80026ec <quat2rotvec>
 80013f0:	eef0 6a40 	vmov.f32	s13, s0
 80013f4:	eeb0 7a60 	vmov.f32	s14, s1
 80013f8:	eef0 7a41 	vmov.f32	s15, s2
 80013fc:	edc7 6a08 	vstr	s13, [r7, #32]
 8001400:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001404:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles3D rotvec_err = quat2rotvec(error_q);

    rotvec_err.z = 0.0f;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 800140e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	edd3 7a04 	vldr	s15, [r3, #16]
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 8001422:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	edd3 7a04 	vldr	s15, [r3, #16]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ed93 7a04 	vldr	s14, [r3, #16]
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edd3 7a06 	vldr	s15, [r3, #24]
 8001456:	eef1 7a67 	vneg.f32	s15, s15
 800145a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d505      	bpl.n	8001470 <attitude_controller_angle_mode_update+0x2d0>
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	edd3 7a06 	vldr	s15, [r3, #24]
 800146a:	eef1 7a67 	vneg.f32	s15, s15
 800146e:	e011      	b.n	8001494 <attitude_controller_angle_mode_update+0x2f4>
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	edd3 7a06 	vldr	s15, [r3, #24]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd03      	ble.n	800148e <attitude_controller_angle_mode_update+0x2ee>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	edd3 7a06 	vldr	s15, [r3, #24]
 800148c:	e002      	b.n	8001494 <attitude_controller_angle_mode_update+0x2f4>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a6:	eef1 7a67 	vneg.f32	s15, s15
 80014aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d505      	bpl.n	80014c0 <attitude_controller_angle_mode_update+0x320>
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ba:	eef1 7a67 	vneg.f32	s15, s15
 80014be:	e011      	b.n	80014e4 <attitude_controller_angle_mode_update+0x344>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd03      	ble.n	80014de <attitude_controller_angle_mode_update+0x33e>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014dc:	e002      	b.n	80014e4 <attitude_controller_angle_mode_update+0x344>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f6:	eef1 7a67 	vneg.f32	s15, s15
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d505      	bpl.n	8001510 <attitude_controller_angle_mode_update+0x370>
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	edd3 7a06 	vldr	s15, [r3, #24]
 800150a:	eef1 7a67 	vneg.f32	s15, s15
 800150e:	e011      	b.n	8001534 <attitude_controller_angle_mode_update+0x394>
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	edd3 7a06 	vldr	s15, [r3, #24]
 800151c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	dd03      	ble.n	800152e <attitude_controller_angle_mode_update+0x38e>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	edd3 7a06 	vldr	s15, [r3, #24]
 800152c:	e002      	b.n	8001534 <attitude_controller_angle_mode_update+0x394>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800153a:	e000      	b.n	800153e <attitude_controller_angle_mode_update+0x39e>
        return;
 800153c:	bf00      	nop

}
 800153e:	379c      	adds	r7, #156	@ 0x9c
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d015      	beq.n	8001584 <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e000      	b.n	8001586 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 8001584:	bf00      	nop
	}
}
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 8001594:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	460a      	mov	r2, r1
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	4053      	eors	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e014      	b.n	80015f4 <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da0a      	bge.n	80015e8 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b21b      	sxth	r3, r3
 80015da:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	e002      	b.n	80015ee <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	d9e7      	bls.n	80015ca <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 80015fa:	88fb      	ldrh	r3, [r7, #6]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e00d      	b.n	8001638 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffba 	bl	80015a2 <crc16_ccitt_add>
 800162e:	4603      	mov	r3, r0
 8001630:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ed      	bcc.n	800161c <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 8001640:	89fb      	ldrh	r3, [r7, #14]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	0000      	movs	r0, r0
 800164c:	0000      	movs	r0, r0
	...

08001650 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	ed87 0a02 	vstr	s0, [r7, #8]
 800165c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001660:	edd7 7a02 	vldr	s15, [r7, #8]
 8001664:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001710 <pt1_filter_init_lowpass+0xc0>
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d908      	bls.n	8001684 <pt1_filter_init_lowpass+0x34>
 8001672:	edd7 7a01 	vldr	s15, [r7, #4]
 8001676:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001710 <pt1_filter_init_lowpass+0xc0>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d804      	bhi.n	800168e <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e02b      	b.n	80016e6 <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 800168e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169a:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f7fe ff52 	bl	8000548 <__aeabi_f2d>
 80016a4:	a318      	add	r3, pc, #96	@ (adr r3, 8001708 <pt1_filter_init_lowpass+0xb8>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffa5 	bl	80005f8 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	4917      	ldr	r1, [pc, #92]	@ (8001714 <pt1_filter_init_lowpass+0xc4>)
 80016b8:	f7ff f8c8 	bl	800084c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa90 	bl	8000be8 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80016d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	54442d18 	.word	0x54442d18
 800170c:	401921fb 	.word	0x401921fb
 8001710:	34000000 	.word	0x34000000
 8001714:	3ff00000 	.word	0x3ff00000

08001718 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	ed93 7a03 	vldr	s14, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 7a03 	vldr	s15, [r3, #12]
 8001736:	ed97 6a00 	vldr	s12, [r7]
 800173a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	ee07 3a90 	vmov	s15, r3
}
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	ed87 0a02 	vstr	s0, [r7, #8]
 800178a:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edd7 0a01 	vldr	s1, [r7, #4]
 8001794:	ed97 0a02 	vldr	s0, [r7, #8]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff59 	bl	8001650 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3310      	adds	r3, #16
 80017a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff50 	bl	8001650 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f103 0410 	add.w	r4, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	ed97 0a00 	vldr	s0, [r7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff9b 	bl	8001718 <pt1_filter_apply_lowpass>
 80017e2:	eef0 7a40 	vmov.f32	s15, s0
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff ff94 	bl	8001718 <pt1_filter_apply_lowpass>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}

080017fe <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ffaa 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3310      	adds	r3, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffa5 	bl	8001762 <pt1_filter_reset>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <flight_control_loop_arm_esc>:
// https://articulatedrobotics.xyz/tools/rotation-calculator/
//static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };	// angle2quat();
static quaternion ground_default_position_q = { .w = 0.999698f, .x = 0.007852f, .y = 0.023297f, .z = 0.000183f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	f012 ff34 	bl	80146a0 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800184c:	2300      	movs	r3, #0
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	f012 fca3 	bl	801419c <xQueueGenericSend>
	#endif
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	4618      	mov	r0, r3
 8001872:	f012 ff15 	bl	80146a0 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	f012 fc84 	bl	801419c <xQueueGenericSend>
	#endif
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	4618      	mov	r0, r3
 80018b0:	f012 fef6 	bl	80146a0 <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018ba:	f343 0300 	sbfx	r3, r3, #0, #1
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018c8:	2300      	movs	r3, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	f012 fc65 	bl	801419c <xQueueGenericSend>
	#endif
	return flag;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 80018e4:	f240 4204 	movw	r2, #1028	@ 0x404
 80018e8:	2100      	movs	r1, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f019 fcde 	bl	801b2ac <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b10 <flight_control_loop_init+0x234>
 80018f6:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b10 <flight_control_loop_init+0x234>
 80018fa:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b10 <flight_control_loop_init+0x234>
 80018fe:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b14 <flight_control_loop_init+0x238>
 8001902:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8001b18 <flight_control_loop_init+0x23c>
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f954 	bl	8002bb4 <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4b83      	ldr	r3, [pc, #524]	@ (8001b1c <flight_control_loop_init+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	4b81      	ldr	r3, [pc, #516]	@ (8001b1c <flight_control_loop_init+0x240>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	4b80      	ldr	r3, [pc, #512]	@ (8001b1c <flight_control_loop_init+0x240>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	edd7 6a05 	vldr	s13, [r7, #20]
 8001924:	ed97 7a06 	vldr	s14, [r7, #24]
 8001928:	edd7 7a07 	vldr	s15, [r7, #28]
 800192c:	497c      	ldr	r1, [pc, #496]	@ (8001b20 <flight_control_loop_init+0x244>)
 800192e:	eeb0 0a66 	vmov.f32	s0, s13
 8001932:	eef0 0a47 	vmov.f32	s1, s14
 8001936:	eeb0 1a67 	vmov.f32	s2, s15
 800193a:	4610      	mov	r0, r2
 800193c:	f001 fb92 	bl	8003064 <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4b78      	ldr	r3, [pc, #480]	@ (8001b24 <flight_control_loop_init+0x248>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b76      	ldr	r3, [pc, #472]	@ (8001b24 <flight_control_loop_init+0x248>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b75      	ldr	r3, [pc, #468]	@ (8001b24 <flight_control_loop_init+0x248>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	edd7 6a02 	vldr	s13, [r7, #8]
 8001958:	ed97 7a03 	vldr	s14, [r7, #12]
 800195c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001960:	eeb0 0a66 	vmov.f32	s0, s13
 8001964:	eef0 0a47 	vmov.f32	s1, s14
 8001968:	eeb0 1a67 	vmov.f32	s2, s15
 800196c:	4610      	mov	r0, r2
 800196e:	f001 fb57 	bl	8003020 <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4b6c      	ldr	r3, [pc, #432]	@ (8001b28 <flight_control_loop_init+0x24c>)
 8001976:	ed93 6a00 	vldr	s12, [r3]
 800197a:	edd3 6a01 	vldr	s13, [r3, #4]
 800197e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001982:	edd3 7a03 	vldr	s15, [r3, #12]
 8001986:	eeb0 0a46 	vmov.f32	s0, s12
 800198a:	eef0 0a66 	vmov.f32	s1, s13
 800198e:	eeb0 1a47 	vmov.f32	s2, s14
 8001992:	eef0 1a67 	vmov.f32	s3, s15
 8001996:	4610      	mov	r0, r2
 8001998:	f001 f99c 	bl	8002cd4 <imu_set_leveled_attitude>

	attitude_controller_init(
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80019a2:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 8001b2c <flight_control_loop_init+0x250>
 80019a6:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8001b30 <flight_control_loop_init+0x254>
 80019aa:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001b30 <flight_control_loop_init+0x254>
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fb36 	bl	8001020 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019ba:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8001b34 <flight_control_loop_init+0x258>
 80019be:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019c2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b10 <flight_control_loop_init+0x234>
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 f932 	bl	8003c30 <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019d2:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019d6:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8001b3c <flight_control_loop_init+0x260>
 80019da:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019de:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8001b40 <flight_control_loop_init+0x264>
 80019e2:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8001b44 <flight_control_loop_init+0x268>
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f9b0 	bl	8003d4c <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019f2:	ed9f 2a51 	vldr	s4, [pc, #324]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019f6:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8001b3c <flight_control_loop_init+0x260>
 80019fa:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019fe:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a02:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001b44 <flight_control_loop_init+0x268>
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 f9d2 	bl	8003db0 <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a12:	ed9f 2a49 	vldr	s4, [pc, #292]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a16:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8001b3c <flight_control_loop_init+0x260>
 8001a1a:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a1e:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a22:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8001b44 <flight_control_loop_init+0x268>
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 f9f4 	bl	8003e14 <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a32:	ed9f 2a39 	vldr	s4, [pc, #228]	@ 8001b18 <flight_control_loop_init+0x23c>
 8001a36:	eddf 1a40 	vldr	s3, [pc, #256]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a3a:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 8001b30 <flight_control_loop_init+0x254>
 8001a3e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001a42:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fcf9 	bl	8004440 <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a54:	ed9f 2a30 	vldr	s4, [pc, #192]	@ 8001b18 <flight_control_loop_init+0x23c>
 8001a58:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a5c:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8001b30 <flight_control_loop_init+0x254>
 8001a60:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001a64:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fd45 	bl	80044fa <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a76:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 8001b18 <flight_control_loop_init+0x23c>
 8001a7a:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a7e:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8001b30 <flight_control_loop_init+0x254>
 8001a82:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001a86:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fd93 	bl	80045b8 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a98:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 8001b18 <flight_control_loop_init+0x23c>
 8001a9c:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001aa0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001aa4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001aa8:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001b34 <flight_control_loop_init+0x258>
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fde2 	bl	8004678 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f012 fb58 	bl	801416a <xQueueCreateMutex>
 8001aba:	4602      	mov	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f012 fb51 	bl	801416a <xQueueCreateMutex>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f012 fb4a 	bl	801416a <xQueueCreateMutex>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f012 fb43 	bl	801416a <xQueueCreateMutex>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001aec:	2001      	movs	r0, #1
 8001aee:	f012 fb3c 	bl	801416a <xQueueCreateMutex>
 8001af2:	4602      	mov	r2, r0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001afa:	2001      	movs	r0, #1
 8001afc:	f012 fb35 	bl	801416a <xQueueCreateMutex>
 8001b00:	4602      	mov	r2, r0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	447a0000 	.word	0x447a0000
 8001b14:	43160000 	.word	0x43160000
 8001b18:	42c80000 	.word	0x42c80000
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	20000030 	.word	0x20000030
 8001b28:	2000003c 	.word	0x2000003c
 8001b2c:	41278d36 	.word	0x41278d36
 8001b30:	3f5f66f3 	.word	0x3f5f66f3
 8001b34:	42200000 	.word	0x42200000
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40278d37 	.word	0x40278d37
 8001b40:	3fdf66f3 	.word	0x3fdf66f3
 8001b44:	40a78d36 	.word	0x40a78d36
 8001b48:	3d75c28f 	.word	0x3d75c28f

08001b4c <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b09b      	sub	sp, #108	@ 0x6c
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	4618      	mov	r0, r3
 8001b72:	f012 fd95 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b80:	f103 0408 	add.w	r4, r3, #8
 8001b84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001b8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	f002 fdef 	bl	8004778 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f012 faf9 	bl	801419c <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f012 fd73 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bc0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bc4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001bc8:	f001 fa9a 	bl	8003100 <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	f012 fae0 	bl	801419c <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001be2:	f04f 31ff 	mov.w	r1, #4294967295
 8001be6:	4618      	mov	r0, r3
 8001be8:	f012 fd5a 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001bf2:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001bf6:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001bfa:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001bfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001c02:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c06:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c0a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c0e:	eeb0 3a64 	vmov.f32	s6, s9
 8001c12:	eef0 2a45 	vmov.f32	s5, s10
 8001c16:	eeb0 2a65 	vmov.f32	s4, s11
 8001c1a:	eeb0 0a46 	vmov.f32	s0, s12
 8001c1e:	eef0 0a66 	vmov.f32	s1, s13
 8001c22:	eeb0 1a47 	vmov.f32	s2, s14
 8001c26:	eef0 1a67 	vmov.f32	s3, s15
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fab8 	bl	80011a0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	f107 021c 	add.w	r2, r7, #28
 8001c50:	f107 0120 	add.w	r1, r7, #32
 8001c54:	f7ff fc76 	bl	8001544 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	f012 fa9a 	bl	801419c <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	4618      	mov	r0, r3
 8001c86:	f012 fd0b 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001c8a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c8e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001db4 <flight_control_loop_tick+0x268>
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	dd1e      	ble.n	8001cda <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001ca2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ca6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001caa:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001cae:	ed97 6a08 	vldr	s12, [r7, #32]
 8001cb2:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cb6:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cba:	eef0 2a45 	vmov.f32	s5, s10
 8001cbe:	eeb0 2a65 	vmov.f32	s4, s11
 8001cc2:	eef0 1a46 	vmov.f32	s3, s12
 8001cc6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cca:	eef0 0a47 	vmov.f32	s1, s14
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 f8d0 	bl	8003e78 <rate_controller_update>
 8001cd8:	e005      	b.n	8001ce6 <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fa57 	bl	8004194 <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	f107 0210 	add.w	r2, r7, #16
 8001cf4:	f107 0114 	add.w	r1, r7, #20
 8001cf8:	f002 faa0 	bl	800423c <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001d02:	2300      	movs	r3, #0
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	f012 fa48 	bl	801419c <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295
 8001d16:	4618      	mov	r0, r3
 8001d18:	f012 fcc2 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fdbd 	bl	800189c <flight_control_loop_are_esc_armed>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d28:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d30:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d34:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d3e:	4618      	mov	r0, r3
 8001d40:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001db4 <flight_control_loop_tick+0x268>
 8001d44:	eef0 1a46 	vmov.f32	s3, s12
 8001d48:	eeb0 1a66 	vmov.f32	s2, s13
 8001d4c:	eef0 0a47 	vmov.f32	s1, s14
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	f001 fc72 	bl	800363c <motor_mixer_quad_x>
 8001d58:	e010      	b.n	8001d7c <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d5e:	e00a      	b.n	8001d76 <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d64:	33ec      	adds	r3, #236	@ 0xec
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d72:	3301      	adds	r3, #1
 8001d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	ddf1      	ble.n	8001d60 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001da2:	2300      	movs	r3, #0
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	f012 f9f8 	bl	801419c <xQueueGenericSend>
#endif

}
 8001dac:	bf00      	nop
 8001dae:	3764      	adds	r7, #100	@ 0x64
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	3d6147ae 	.word	0x3d6147ae

08001db8 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6178      	str	r0, [r7, #20]
 8001dc0:	eef0 6a40 	vmov.f32	s13, s0
 8001dc4:	eeb0 7a60 	vmov.f32	s14, s1
 8001dc8:	eef0 7a41 	vmov.f32	s15, s2
 8001dcc:	edc7 1a01 	vstr	s3, [r7, #4]
 8001dd0:	edc7 6a02 	vstr	s13, [r7, #8]
 8001dd4:	ed87 7a03 	vstr	s14, [r7, #12]
 8001dd8:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d501      	bpl.n	8001df2 <flight_control_loop_update_rc_control+0x3a>
 8001dee:	4b41      	ldr	r3, [pc, #260]	@ (8001ef4 <flight_control_loop_update_rc_control+0x13c>)
 8001df0:	e00c      	b.n	8001e0c <flight_control_loop_update_rc_control+0x54>
 8001df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd02      	ble.n	8001e0a <flight_control_loop_update_rc_control+0x52>
 8001e04:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e08:	e000      	b.n	8001e0c <flight_control_loop_update_rc_control+0x54>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e12:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d501      	bpl.n	8001e24 <flight_control_loop_update_rc_control+0x6c>
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <flight_control_loop_update_rc_control+0x13c>)
 8001e22:	e00c      	b.n	8001e3e <flight_control_loop_update_rc_control+0x86>
 8001e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	dd02      	ble.n	8001e3c <flight_control_loop_update_rc_control+0x84>
 8001e36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e3a:	e000      	b.n	8001e3e <flight_control_loop_update_rc_control+0x86>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e50:	d501      	bpl.n	8001e56 <flight_control_loop_update_rc_control+0x9e>
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <flight_control_loop_update_rc_control+0x13c>)
 8001e54:	e00c      	b.n	8001e70 <flight_control_loop_update_rc_control+0xb8>
 8001e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	dd02      	ble.n	8001e6e <flight_control_loop_update_rc_control+0xb6>
 8001e68:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e6c:	e000      	b.n	8001e70 <flight_control_loop_update_rc_control+0xb8>
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d502      	bpl.n	8001e86 <flight_control_loop_update_rc_control+0xce>
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e00c      	b.n	8001ea0 <flight_control_loop_update_rc_control+0xe8>
 8001e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	dd02      	ble.n	8001e9e <flight_control_loop_update_rc_control+0xe6>
 8001e98:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e9c:	e000      	b.n	8001ea0 <flight_control_loop_update_rc_control+0xe8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	4618      	mov	r0, r3
 8001eae:	f012 fbf7 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ec0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ec4:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ec8:	eeb0 1a66 	vmov.f32	s2, s13
 8001ecc:	eef0 0a47 	vmov.f32	s1, s14
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fc2b 	bl	8004730 <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f012 f959 	bl	801419c <xQueueGenericSend>
#endif
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	bf800000 	.word	0xbf800000

08001ef8 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	61f8      	str	r0, [r7, #28]
 8001f00:	eeb0 5a40 	vmov.f32	s10, s0
 8001f04:	eef0 5a60 	vmov.f32	s11, s1
 8001f08:	eeb0 6a41 	vmov.f32	s12, s2
 8001f0c:	eef0 6a61 	vmov.f32	s13, s3
 8001f10:	eeb0 7a42 	vmov.f32	s14, s4
 8001f14:	eef0 7a62 	vmov.f32	s15, s5
 8001f18:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f1c:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f20:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f24:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f28:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f2c:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f36:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f012 fbb0 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f46:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f4a:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f4e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f52:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5a:	eef0 1a45 	vmov.f32	s3, s10
 8001f5e:	eeb0 2a65 	vmov.f32	s4, s11
 8001f62:	eef0 2a46 	vmov.f32	s5, s12
 8001f66:	eeb0 0a66 	vmov.f32	s0, s13
 8001f6a:	eef0 0a47 	vmov.f32	s1, s14
 8001f6e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 f813 	bl	8002f9e <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	f012 f90a 	bl	801419c <xQueueGenericSend>
#endif
}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f012 fb7b 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e00d      	b.n	8001fcc <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	32ec      	adds	r2, #236	@ 0xec
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	440a      	add	r2, r1
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9ee      	bls.n	8001fb0 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f012 f8dd 	bl	801419c <xQueueGenericSend>
#endif
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8001fea:	b480      	push	{r7}
 8001fec:	b089      	sub	sp, #36	@ 0x24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ed97 7a07 	vldr	s14, [r7, #28]
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3304      	adds	r3, #4
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ed97 7a06 	vldr	s14, [r7, #24]
 8002028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202c:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3308      	adds	r3, #8
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ed97 7a05 	vldr	s14, [r7, #20]
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	edd7 7a07 	vldr	s15, [r7, #28]
 800204e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	330c      	adds	r3, #12
 8002056:	edd3 6a00 	vldr	s13, [r3]
 800205a:	edd7 7a06 	vldr	s15, [r7, #24]
 800205e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	3318      	adds	r3, #24
 800206a:	edd3 6a00 	vldr	s13, [r3]
 800206e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	ed93 7a01 	vldr	s14, [r3, #4]
 8002084:	edd7 7a07 	vldr	s15, [r7, #28]
 8002088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	330c      	adds	r3, #12
 8002090:	edd3 6a01 	vldr	s13, [r3, #4]
 8002094:	edd7 7a06 	vldr	s15, [r7, #24]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	3318      	adds	r3, #24
 80020a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80020a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80020be:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	330c      	adds	r3, #12
 80020ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020dc:	3318      	adds	r3, #24
 80020de:	edd3 6a02 	vldr	s13, [r3, #8]
 80020e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	@ 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 6a01 	vldr	s13, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a01 	vldr	s15, [r3, #4]
 8002134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edd3 7a02 	vldr	s15, [r3, #8]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edd3 6a03 	vldr	s13, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	edd3 7a03 	vldr	s15, [r3, #12]
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	eeb0 0a67 	vmov.f32	s0, s15
 8002168:	f015 fbfc 	bl	8017964 <sqrtf>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <quatconj>:

quaternion quatconj(quaternion* q) {
 800217a:	b490      	push	{r4, r7}
 800217c:	b08e      	sub	sp, #56	@ 0x38
 800217e:	af00      	add	r7, sp, #0
 8002180:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	edd3 7a01 	vldr	s15, [r3, #4]
 800218e:	eef1 7a67 	vneg.f32	s15, s15
 8002192:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	edd3 7a02 	vldr	s15, [r3, #8]
 800219c:	eef1 7a67 	vneg.f32	s15, s15
 80021a0:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021aa:	eef1 7a67 	vneg.f32	s15, s15
 80021ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 80021b2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c8:	ee06 0a10 	vmov	s12, r0
 80021cc:	ee06 1a90 	vmov	s13, r1
 80021d0:	ee07 2a10 	vmov	s14, r2
 80021d4:	ee07 3a90 	vmov	s15, r3
}
 80021d8:	eeb0 0a46 	vmov.f32	s0, s12
 80021dc:	eef0 0a66 	vmov.f32	s1, s13
 80021e0:	eeb0 1a47 	vmov.f32	s2, s14
 80021e4:	eef0 1a67 	vmov.f32	s3, s15
 80021e8:	3738      	adds	r7, #56	@ 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc90      	pop	{r4, r7}
 80021ee:	4770      	bx	lr

080021f0 <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b091      	sub	sp, #68	@ 0x44
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7ff ff89 	bl	8002110 <quatnorm>
 80021fe:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 8002202:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002206:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80022d0 <quatnormalize+0xe0>
 800220a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	d813      	bhi.n	800223c <quatnormalize+0x4c>
	    result.w = 1.0f;
 8002214:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002218:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 800222c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800223a:	e032      	b.n	80022a2 <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 800223c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002240:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002248:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	ed93 7a01 	vldr	s14, [r3, #4]
 8002264:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226c:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	ed93 7a02 	vldr	s14, [r3, #8]
 8002276:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	ed93 7a03 	vldr	s14, [r3, #12]
 8002288:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800228c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002290:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 8002294:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80022a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022aa:	ee06 0a10 	vmov	s12, r0
 80022ae:	ee06 1a90 	vmov	s13, r1
 80022b2:	ee07 2a10 	vmov	s14, r2
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eeb0 0a46 	vmov.f32	s0, s12
 80022be:	eef0 0a66 	vmov.f32	s1, s13
 80022c2:	eeb0 1a47 	vmov.f32	s2, s14
 80022c6:	eef0 1a67 	vmov.f32	s3, s15
 80022ca:	3744      	adds	r7, #68	@ 0x44
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	34000000 	.word	0x34000000

080022d4 <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 80022d4:	b490      	push	{r4, r7}
 80022d6:	b08e      	sub	sp, #56	@ 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6178      	str	r0, [r7, #20]
 80022dc:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80022f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	ed93 7a02 	vldr	s14, [r3, #8]
 800230a:	edd7 7a04 	vldr	s15, [r7, #16]
 800230e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002312:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	ed93 7a03 	vldr	s14, [r3, #12]
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002328:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800233a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800233c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233e:	ee06 0a10 	vmov	s12, r0
 8002342:	ee06 1a90 	vmov	s13, r1
 8002346:	ee07 2a10 	vmov	s14, r2
 800234a:	ee07 3a90 	vmov	s15, r3
}
 800234e:	eeb0 0a46 	vmov.f32	s0, s12
 8002352:	eef0 0a66 	vmov.f32	s1, s13
 8002356:	eeb0 1a47 	vmov.f32	s2, s14
 800235a:	eef0 1a67 	vmov.f32	s3, s15
 800235e:	3738      	adds	r7, #56	@ 0x38
 8002360:	46bd      	mov	sp, r7
 8002362:	bc90      	pop	{r4, r7}
 8002364:	4770      	bx	lr

08002366 <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 8002366:	b490      	push	{r4, r7}
 8002368:	b096      	sub	sp, #88	@ 0x58
 800236a:	af00      	add	r7, sp, #0
 800236c:	6178      	str	r0, [r7, #20]
 800236e:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 80023a0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80023a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80023b0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023bc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80023c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023cc:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80023d0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023dc:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 80023e0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80023e4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ec:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80023f0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002400:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002410:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241c:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 8002420:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002424:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002430:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002440:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002450:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 8002460:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002464:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002470:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002480:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800248c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002490:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 80024a0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b6:	ee06 0a10 	vmov	s12, r0
 80024ba:	ee06 1a90 	vmov	s13, r1
 80024be:	ee07 2a10 	vmov	s14, r2
 80024c2:	ee07 3a90 	vmov	s15, r3
}
 80024c6:	eeb0 0a46 	vmov.f32	s0, s12
 80024ca:	eef0 0a66 	vmov.f32	s1, s13
 80024ce:	eeb0 1a47 	vmov.f32	s2, s14
 80024d2:	eef0 1a67 	vmov.f32	s3, s15
 80024d6:	3758      	adds	r7, #88	@ 0x58
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc90      	pop	{r4, r7}
 80024dc:	4770      	bx	lr

080024de <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 80024de:	b580      	push	{r7, lr}
 80024e0:	b094      	sub	sp, #80	@ 0x50
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6178      	str	r0, [r7, #20]
 80024e6:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 8002500:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002504:	4619      	mov	r1, r3
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff2d 	bl	8002366 <quatmultiply>
 800250c:	eeb0 6a40 	vmov.f32	s12, s0
 8002510:	eef0 6a60 	vmov.f32	s13, s1
 8002514:	eeb0 7a41 	vmov.f32	s14, s2
 8002518:	eef0 7a61 	vmov.f32	s15, s3
 800251c:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8002520:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8002524:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8002528:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7ff fe24 	bl	800217a <quatconj>
 8002532:	eeb0 6a40 	vmov.f32	s12, s0
 8002536:	eef0 6a60 	vmov.f32	s13, s1
 800253a:	eeb0 7a41 	vmov.f32	s14, s2
 800253e:	eef0 7a61 	vmov.f32	s15, s3
 8002542:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8002546:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800254a:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800254e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 8002552:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff02 	bl	8002366 <quatmultiply>
 8002562:	eeb0 6a40 	vmov.f32	s12, s0
 8002566:	eef0 6a60 	vmov.f32	s13, s1
 800256a:	eeb0 7a41 	vmov.f32	s14, s2
 800256e:	eef0 7a61 	vmov.f32	s15, s3
 8002572:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8002576:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 800257a:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 800257e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 8002586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002588:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 800258a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258c:	623b      	str	r3, [r7, #32]
	return result;
 800258e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002592:	f107 0218 	add.w	r2, r7, #24
 8002596:	ca07      	ldmia	r2, {r0, r1, r2}
 8002598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800259c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800259e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025a2:	ee06 1a90 	vmov	s13, r1
 80025a6:	ee07 2a10 	vmov	s14, r2
 80025aa:	ee07 3a90 	vmov	s15, r3
}
 80025ae:	eeb0 0a66 	vmov.f32	s0, s13
 80025b2:	eef0 0a47 	vmov.f32	s1, s14
 80025b6:	eeb0 1a67 	vmov.f32	s2, s15
 80025ba:	3750      	adds	r7, #80	@ 0x50
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b090      	sub	sp, #64	@ 0x40
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 80025e0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80025f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80025f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002600:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002604:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002608:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800260c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	eef0 0a67 	vmov.f32	s1, s15
 8002624:	eeb0 0a66 	vmov.f32	s0, s13
 8002628:	f015 f942 	bl	80178b0 <atan2f>
 800262c:	eef0 7a40 	vmov.f32	s15, s0
 8002630:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 8002634:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002638:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8002644:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002650:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f015 f8fe 	bl	8017858 <asinf>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
 8002660:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 8002664:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002668:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800266c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002670:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002674:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002684:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002688:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800268c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002690:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002698:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800269c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a4:	eef0 0a67 	vmov.f32	s1, s15
 80026a8:	eeb0 0a66 	vmov.f32	s0, s13
 80026ac:	f015 f900 	bl	80178b0 <atan2f>
 80026b0:	eef0 7a40 	vmov.f32	s15, s0
 80026b4:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 80026b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026bc:	f107 0218 	add.w	r2, r7, #24
 80026c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026cc:	ee06 1a90 	vmov	s13, r1
 80026d0:	ee07 2a10 	vmov	s14, r2
 80026d4:	ee07 3a90 	vmov	s15, r3
}
 80026d8:	eeb0 0a66 	vmov.f32	s0, s13
 80026dc:	eef0 0a47 	vmov.f32	s1, s14
 80026e0:	eeb0 1a67 	vmov.f32	s2, s15
 80026e4:	3740      	adds	r7, #64	@ 0x40
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b090      	sub	sp, #64	@ 0x40
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	eeb0 6a40 	vmov.f32	s12, s0
 80026f6:	eef0 6a60 	vmov.f32	s13, s1
 80026fa:	eeb0 7a41 	vmov.f32	s14, s2
 80026fe:	eef0 7a61 	vmov.f32	s15, s3
 8002702:	ed87 6a04 	vstr	s12, [r7, #16]
 8002706:	edc7 6a05 	vstr	s13, [r7, #20]
 800270a:	ed87 7a06 	vstr	s14, [r7, #24]
 800270e:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd6a 	bl	80021f0 <quatnormalize>
 800271c:	eeb0 6a40 	vmov.f32	s12, s0
 8002720:	eef0 6a60 	vmov.f32	s13, s1
 8002724:	eeb0 7a41 	vmov.f32	s14, s2
 8002728:	eef0 7a61 	vmov.f32	s15, s3
 800272c:	ed87 6a04 	vstr	s12, [r7, #16]
 8002730:	edc7 6a05 	vstr	s13, [r7, #20]
 8002734:	ed87 7a06 	vstr	s14, [r7, #24]
 8002738:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 800273c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d517      	bpl.n	800277a <quat2rotvec+0x8e>
        q.w = -q.w;
 800274a:	edd7 7a04 	vldr	s15, [r7, #16]
 800274e:	eef1 7a67 	vneg.f32	s15, s15
 8002752:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 8002756:	edd7 7a05 	vldr	s15, [r7, #20]
 800275a:	eef1 7a67 	vneg.f32	s15, s15
 800275e:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 8002762:	edd7 7a06 	vldr	s15, [r7, #24]
 8002766:	eef1 7a67 	vneg.f32	s15, s15
 800276a:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 800276e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002772:	eef1 7a67 	vneg.f32	s15, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 800277a:	edd7 7a04 	vldr	s15, [r7, #16]
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	f015 f83d 	bl	8017800 <acosf>
 8002786:	eef0 7a40 	vmov.f32	s15, s0
 800278a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800278e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 8002792:	ed97 7a04 	vldr	s14, [r7, #16]
 8002796:	edd7 7a04 	vldr	s15, [r7, #16]
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a6:	eeb0 0a67 	vmov.f32	s0, s15
 80027aa:	f015 f8db 	bl	8017964 <sqrtf>
 80027ae:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 80027b2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027b6:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002854 <quat2rotvec+0x168>
 80027ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d809      	bhi.n	80027d8 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d6:	e023      	b.n	8002820 <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 80027d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80027dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 80027f0:	edd7 6a06 	vldr	s13, [r7, #24]
 80027f4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 8002808:	edd7 6a07 	vldr	s13, [r7, #28]
 800280c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002814:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 8002820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002824:	f107 0220 	add.w	r2, r7, #32
 8002828:	ca07      	ldmia	r2, {r0, r1, r2}
 800282a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800282e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002834:	ee06 1a90 	vmov	s13, r1
 8002838:	ee07 2a10 	vmov	s14, r2
 800283c:	ee07 3a90 	vmov	s15, r3
}
 8002840:	eeb0 0a66 	vmov.f32	s0, s13
 8002844:	eef0 0a47 	vmov.f32	s1, s14
 8002848:	eeb0 1a67 	vmov.f32	s2, s15
 800284c:	3740      	adds	r7, #64	@ 0x40
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	34000000 	.word	0x34000000

08002858 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b095      	sub	sp, #84	@ 0x54
 800285c:	af00      	add	r7, sp, #0
 800285e:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	edd3 7a02 	vldr	s15, [r3, #8]
 8002866:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	eeb0 0a67 	vmov.f32	s0, s15
 8002872:	f015 f969 	bl	8017b48 <cosf>
 8002876:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002880:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002888:	eeb0 0a67 	vmov.f32	s0, s15
 800288c:	f015 f9a8 	bl	8017be0 <sinf>
 8002890:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	edd3 7a01 	vldr	s15, [r3, #4]
 800289a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f015 f94f 	bl	8017b48 <cosf>
 80028aa:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80028b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	eeb0 0a67 	vmov.f32	s0, s15
 80028c0:	f015 f98e 	bl	8017be0 <sinf>
 80028c4:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	f015 f935 	bl	8017b48 <cosf>
 80028de:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f015 f974 	bl	8017be0 <sinf>
 80028f8:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 80028fc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002900:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800290c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002910:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002914:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002918:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800291c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 800292c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002930:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800293c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002940:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002944:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002948:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800294c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002958:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 800295c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002960:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002970:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002974:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002978:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800297c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 800298c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002990:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002998:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800299c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80029a4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80029a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029ac:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 80029bc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80029c0:	f107 0318 	add.w	r3, r7, #24
 80029c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d2:	ee06 0a10 	vmov	s12, r0
 80029d6:	ee06 1a90 	vmov	s13, r1
 80029da:	ee07 2a10 	vmov	s14, r2
 80029de:	ee07 3a90 	vmov	s15, r3
}
 80029e2:	eeb0 0a46 	vmov.f32	s0, s12
 80029e6:	eef0 0a66 	vmov.f32	s1, s13
 80029ea:	eeb0 1a47 	vmov.f32	s2, s14
 80029ee:	eef0 1a67 	vmov.f32	s3, s15
 80029f2:	3754      	adds	r7, #84	@ 0x54
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 80029f8:	b490      	push	{r4, r7}
 80029fa:	b08e      	sub	sp, #56	@ 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6178      	str	r0, [r7, #20]
 8002a00:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002a52:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	ee06 0a10 	vmov	s12, r0
 8002a6c:	ee06 1a90 	vmov	s13, r1
 8002a70:	ee07 2a10 	vmov	s14, r2
 8002a74:	ee07 3a90 	vmov	s15, r3
}
 8002a78:	eeb0 0a46 	vmov.f32	s0, s12
 8002a7c:	eef0 0a66 	vmov.f32	s1, s13
 8002a80:	eeb0 1a47 	vmov.f32	s2, s14
 8002a84:	eef0 1a67 	vmov.f32	s3, s15
 8002a88:	3738      	adds	r7, #56	@ 0x38
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc90      	pop	{r4, r7}
 8002a8e:	4770      	bx	lr

08002a90 <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 8002a90:	b490      	push	{r4, r7}
 8002a92:	b08e      	sub	sp, #56	@ 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6178      	str	r0, [r7, #20]
 8002a98:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abe:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002aea:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	ee06 0a10 	vmov	s12, r0
 8002b04:	ee06 1a90 	vmov	s13, r1
 8002b08:	ee07 2a10 	vmov	s14, r2
 8002b0c:	ee07 3a90 	vmov	s15, r3
}
 8002b10:	eeb0 0a46 	vmov.f32	s0, s12
 8002b14:	eef0 0a66 	vmov.f32	s1, s13
 8002b18:	eeb0 1a47 	vmov.f32	s2, s14
 8002b1c:	eef0 1a67 	vmov.f32	s3, s15
 8002b20:	3738      	adds	r7, #56	@ 0x38
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc90      	pop	{r4, r7}
 8002b26:	4770      	bx	lr

08002b28 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	@ 0x38
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6178      	str	r0, [r7, #20]
 8002b30:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff fb21 	bl	800217a <quatconj>
 8002b38:	eeb0 6a40 	vmov.f32	s12, s0
 8002b3c:	eef0 6a60 	vmov.f32	s13, s1
 8002b40:	eeb0 7a41 	vmov.f32	s14, s2
 8002b44:	eef0 7a61 	vmov.f32	s15, s3
 8002b48:	ed87 6a06 	vstr	s12, [r7, #24]
 8002b4c:	edc7 6a07 	vstr	s13, [r7, #28]
 8002b50:	ed87 7a08 	vstr	s14, [r7, #32]
 8002b54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6938      	ldr	r0, [r7, #16]
 8002b60:	f7ff fc01 	bl	8002366 <quatmultiply>
 8002b64:	eeb0 6a40 	vmov.f32	s12, s0
 8002b68:	eef0 6a60 	vmov.f32	s13, s1
 8002b6c:	eeb0 7a41 	vmov.f32	s14, s2
 8002b70:	eef0 7a61 	vmov.f32	s15, s3
 8002b74:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8002b78:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8002b7c:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8002b80:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8002b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	ee06 0a10 	vmov	s12, r0
 8002b90:	ee06 1a90 	vmov	s13, r1
 8002b94:	ee07 2a10 	vmov	s14, r2
 8002b98:	ee07 3a90 	vmov	s15, r3
}
 8002b9c:	eeb0 0a46 	vmov.f32	s0, s12
 8002ba0:	eef0 0a66 	vmov.f32	s1, s13
 8002ba4:	eeb0 1a47 	vmov.f32	s2, s14
 8002ba8:	eef0 1a67 	vmov.f32	s3, s15
 8002bac:	3738      	adds	r7, #56	@ 0x38
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08b      	sub	sp, #44	@ 0x2c
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6178      	str	r0, [r7, #20]
 8002bbc:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bc0:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bc4:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bc8:	edc7 1a01 	vstr	s3, [r7, #4]
 8002bcc:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 8002bd0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f018 fb68 	bl	801b2ac <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8002bdc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf4:	ed97 6a06 	vldr	s12, [r7, #24]
 8002bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c04:	eeb0 0a46 	vmov.f32	s0, s12
 8002c08:	eef0 0a66 	vmov.f32	s1, s13
 8002c0c:	eeb0 1a47 	vmov.f32	s2, s14
 8002c10:	eef0 1a67 	vmov.f32	s3, s15
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f000 f85d 	bl	8002cd4 <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8002c22:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c32:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c3c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c46:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3388      	adds	r3, #136	@ 0x88
 8002c4e:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c52:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fcfa 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3398      	adds	r3, #152	@ 0x98
 8002c60:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c64:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fcf1 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	33a8      	adds	r3, #168	@ 0xa8
 8002c72:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c76:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fce8 	bl	8001650 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	33b8      	adds	r3, #184	@ 0xb8
 8002c84:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c88:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fcdf 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	33c8      	adds	r3, #200	@ 0xc8
 8002c96:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c9a:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fcd6 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	33d8      	adds	r3, #216	@ 0xd8
 8002ca8:	edd7 0a01 	vldr	s1, [r7, #4]
 8002cac:	ed97 0a03 	vldr	s0, [r7, #12]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fccd 	bl	8001650 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3370      	adds	r3, #112	@ 0x70
 8002cba:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8002cd0 <imu_init+0x11c>
 8002cbe:	ed97 0a00 	vldr	s0, [r7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fa70 	bl	80031a8 <madgwick_filter_init>
}
 8002cc8:	bf00      	nop
 8002cca:	372c      	adds	r7, #44	@ 0x2c
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	3db2b8c2 	.word	0x3db2b8c2

08002cd4 <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08f      	sub	sp, #60	@ 0x3c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6178      	str	r0, [r7, #20]
 8002cdc:	eeb0 6a40 	vmov.f32	s12, s0
 8002ce0:	eef0 6a60 	vmov.f32	s13, s1
 8002ce4:	eeb0 7a41 	vmov.f32	s14, s2
 8002ce8:	eef0 7a61 	vmov.f32	s15, s3
 8002cec:	ed87 6a01 	vstr	s12, [r7, #4]
 8002cf0:	edc7 6a02 	vstr	s13, [r7, #8]
 8002cf4:	ed87 7a03 	vstr	s14, [r7, #12]
 8002cf8:	edc7 7a04 	vstr	s15, [r7, #16]
	quaternion q_ref = IMU_DEFAULT_LEVELD_ATTITUDE_Q;      // "leveled = identity"
 8002cfc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
	im->q_offset = quat_error(&q_ref, &leveld_attitude_q);
 8002d14:	697c      	ldr	r4, [r7, #20]
 8002d16:	1d3a      	adds	r2, r7, #4
 8002d18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff02 	bl	8002b28 <quat_error>
 8002d24:	eeb0 6a40 	vmov.f32	s12, s0
 8002d28:	eef0 6a60 	vmov.f32	s13, s1
 8002d2c:	eeb0 7a41 	vmov.f32	s14, s2
 8002d30:	eef0 7a61 	vmov.f32	s15, s3
 8002d34:	ed84 6a4d 	vstr	s12, [r4, #308]	@ 0x134
 8002d38:	edc4 6a4e 	vstr	s13, [r4, #312]	@ 0x138
 8002d3c:	ed84 7a4f 	vstr	s14, [r4, #316]	@ 0x13c
 8002d40:	edc4 7a50 	vstr	s15, [r4, #320]	@ 0x140
}
 8002d44:	bf00      	nop
 8002d46:	373c      	adds	r7, #60	@ 0x3c
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	eef0 6a40 	vmov.f32	s13, s0
 8002d58:	eeb0 7a60 	vmov.f32	s14, s1
 8002d5c:	eef0 7a41 	vmov.f32	s15, s2
 8002d60:	edc7 6a00 	vstr	s13, [r7]
 8002d64:	ed87 7a01 	vstr	s14, [r7, #4]
 8002d68:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	463a      	mov	r2, r7
 8002d72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 8002d78:	ed97 7a00 	vldr	s14, [r7]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8002d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 8002d8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8002d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 8002da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8002daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7fe fca7 	bl	8001718 <pt1_filter_apply_lowpass>
 8002dca:	eef0 7a40 	vmov.f32	s15, s0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002de0:	eeb0 0a67 	vmov.f32	s0, s15
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7fe fc97 	bl	8001718 <pt1_filter_apply_lowpass>
 8002dea:	eef0 7a40 	vmov.f32	s15, s0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002e00:	eeb0 0a67 	vmov.f32	s0, s15
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fe fc87 	bl	8001718 <pt1_filter_apply_lowpass>
 8002e0a:	eef0 7a40 	vmov.f32	s15, s0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	333c      	adds	r3, #60	@ 0x3c
 8002e1e:	68fc      	ldr	r4, [r7, #12]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7ff fb5b 	bl	80024de <quatrotate>
 8002e28:	eef0 6a40 	vmov.f32	s13, s0
 8002e2c:	eeb0 7a60 	vmov.f32	s14, s1
 8002e30:	eef0 7a41 	vmov.f32	s15, s2
 8002e34:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8002e38:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8002e3c:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	eef0 6a40 	vmov.f32	s13, s0
 8002e54:	eeb0 7a60 	vmov.f32	s14, s1
 8002e58:	eef0 7a41 	vmov.f32	s15, s2
 8002e5c:	edc7 6a00 	vstr	s13, [r7]
 8002e60:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e64:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	461c      	mov	r4, r3
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	33f4      	adds	r3, #244	@ 0xf4
 8002e80:	463a      	mov	r2, r7
 8002e82:	f102 0408 	add.w	r4, r2, #8
 8002e86:	463a      	mov	r2, r7
 8002e88:	1d11      	adds	r1, r2, #4
 8002e8a:	4638      	mov	r0, r7
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	462b      	mov	r3, r5
 8002e90:	4622      	mov	r2, r4
 8002e92:	f7ff f8aa 	bl	8001fea <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3318      	adds	r3, #24
 8002e9a:	463a      	mov	r2, r7
 8002e9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3388      	adds	r3, #136	@ 0x88
 8002ea6:	edd7 7a00 	vldr	s15, [r7]
 8002eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fc32 	bl	8001718 <pt1_filter_apply_lowpass>
 8002eb4:	eef0 7a40 	vmov.f32	s15, s0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3398      	adds	r3, #152	@ 0x98
 8002ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc24 	bl	8001718 <pt1_filter_apply_lowpass>
 8002ed0:	eef0 7a40 	vmov.f32	s15, s0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	33a8      	adds	r3, #168	@ 0xa8
 8002ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fc16 	bl	8001718 <pt1_filter_apply_lowpass>
 8002eec:	eef0 7a40 	vmov.f32	s15, s0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3330      	adds	r3, #48	@ 0x30
 8002f00:	68fc      	ldr	r4, [r7, #12]
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f7ff faea 	bl	80024de <quatrotate>
 8002f0a:	eef0 6a40 	vmov.f32	s13, s0
 8002f0e:	eeb0 7a60 	vmov.f32	s14, s1
 8002f12:	eef0 7a41 	vmov.f32	s15, s2
 8002f16:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8002f1a:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8002f1e:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdb0      	pop	{r4, r5, r7, pc}

08002f2a <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8002f2a:	b590      	push	{r4, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 8002f3e:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 8002f48:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 8002f52:	eef1 7a67 	vneg.f32	s15, s15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 8002f68:	eef0 2a45 	vmov.f32	s5, s10
 8002f6c:	eeb0 2a65 	vmov.f32	s4, s11
 8002f70:	eef0 1a46 	vmov.f32	s3, s12
 8002f74:	eeb0 1a67 	vmov.f32	s2, s15
 8002f78:	eef0 0a66 	vmov.f32	s1, s13
 8002f7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f80:	4610      	mov	r0, r2
 8002f82:	f000 f935 	bl	80031f0 <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8002f8e:	3370      	adds	r3, #112	@ 0x70
 8002f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}

08002f9e <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b088      	sub	sp, #32
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	61f8      	str	r0, [r7, #28]
 8002fa6:	eeb0 5a40 	vmov.f32	s10, s0
 8002faa:	eef0 5a60 	vmov.f32	s11, s1
 8002fae:	eeb0 6a41 	vmov.f32	s12, s2
 8002fb2:	eef0 6a61 	vmov.f32	s13, s3
 8002fb6:	eeb0 7a42 	vmov.f32	s14, s4
 8002fba:	eef0 7a62 	vmov.f32	s15, s5
 8002fbe:	ed87 5a04 	vstr	s10, [r7, #16]
 8002fc2:	edc7 5a05 	vstr	s11, [r7, #20]
 8002fc6:	ed87 6a06 	vstr	s12, [r7, #24]
 8002fca:	edc7 6a01 	vstr	s13, [r7, #4]
 8002fce:	ed87 7a02 	vstr	s14, [r7, #8]
 8002fd2:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 8002fd6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002fda:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fde:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8002fe6:	eef0 0a47 	vmov.f32	s1, s14
 8002fea:	eeb0 1a67 	vmov.f32	s2, s15
 8002fee:	69f8      	ldr	r0, [r7, #28]
 8002ff0:	f7ff ff2a 	bl	8002e48 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 8002ff4:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ff8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003000:	eeb0 0a66 	vmov.f32	s0, s13
 8003004:	eef0 0a47 	vmov.f32	s1, s14
 8003008:	eeb0 1a67 	vmov.f32	s2, s15
 800300c:	69f8      	ldr	r0, [r7, #28]
 800300e:	f7ff fe9d 	bl	8002d4c <imu_update_gyro>
	imu_update_madgwick(im);
 8003012:	69f8      	ldr	r0, [r7, #28]
 8003014:	f7ff ff89 	bl	8002f2a <imu_update_madgwick>
}
 8003018:	bf00      	nop
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	eef0 6a40 	vmov.f32	s13, s0
 800302c:	eeb0 7a60 	vmov.f32	s14, s1
 8003030:	eef0 7a41 	vmov.f32	s15, s2
 8003034:	edc7 6a00 	vstr	s13, [r7]
 8003038:	ed87 7a01 	vstr	s14, [r7, #4]
 800303c:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6178      	str	r0, [r7, #20]
 800306c:	eef0 6a40 	vmov.f32	s13, s0
 8003070:	eeb0 7a60 	vmov.f32	s14, s1
 8003074:	eef0 7a41 	vmov.f32	s15, s2
 8003078:	6079      	str	r1, [r7, #4]
 800307a:	edc7 6a02 	vstr	s13, [r7, #8]
 800307e:	ed87 7a03 	vstr	s14, [r7, #12]
 8003082:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e023      	b.n	80030ec <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e01a      	b.n	80030e0 <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	441a      	add	r2, r3
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	333c      	adds	r3, #60	@ 0x3c
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4403      	add	r3, r0
 80030d6:	3304      	adds	r3, #4
 80030d8:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3301      	adds	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d9e1      	bls.n	80030aa <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d9d8      	bls.n	80030a4 <imu_set_accel_bias+0x40>
		}
	}
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	3724      	adds	r7, #36	@ 0x24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 8003100:	b490      	push	{r4, r7}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4614      	mov	r4, r2
 800311a:	3360      	adds	r3, #96	@ 0x60
 800311c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800311e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4614      	mov	r4, r2
 800312e:	3348      	adds	r3, #72	@ 0x48
 8003130:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4614      	mov	r4, r2
 8003144:	3354      	adds	r3, #84	@ 0x54
 8003146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800314a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bc90      	pop	{r4, r7}
 8003156:	4770      	bx	lr

08003158 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	ca07      	ldmia	r2, {r0, r1, r2}
 800316e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 800317e:	b490      	push	{r4, r7}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4614      	mov	r4, r2
 8003194:	330c      	adds	r3, #12
 8003196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800319a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc90      	pop	{r4, r7}
 80031a6:	4770      	bx	lr

080031a8 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80031b4:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031be:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	615a      	str	r2, [r3, #20]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b0b1      	sub	sp, #196	@ 0xc4
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	61f8      	str	r0, [r7, #28]
 80031f8:	ed87 0a06 	vstr	s0, [r7, #24]
 80031fc:	edc7 0a05 	vstr	s1, [r7, #20]
 8003200:	ed87 1a04 	vstr	s2, [r7, #16]
 8003204:	edc7 1a03 	vstr	s3, [r7, #12]
 8003208:	ed87 2a02 	vstr	s4, [r7, #8]
 800320c:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8003216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 800321c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8003220:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 800322a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 8003252:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 800325e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003262:	2230      	movs	r2, #48	@ 0x30
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f018 f820 	bl	801b2ac <memset>

    struct quaternion gradient = {0.0f};
 800326c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 800328c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003290:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f81d 	bl	80022d4 <quatmultiply_scalar>
 800329a:	eeb0 6a40 	vmov.f32	s12, s0
 800329e:	eef0 6a60 	vmov.f32	s13, s1
 80032a2:	eeb0 7a41 	vmov.f32	s14, s2
 80032a6:	eef0 7a61 	vmov.f32	s15, s3
 80032aa:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80032ae:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 80032b2:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 80032b6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 80032ba:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80032be:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff f84e 	bl	8002366 <quatmultiply>
 80032ca:	eeb0 6a40 	vmov.f32	s12, s0
 80032ce:	eef0 6a60 	vmov.f32	s13, s1
 80032d2:	eeb0 7a41 	vmov.f32	s14, s2
 80032d6:	eef0 7a61 	vmov.f32	s15, s3
 80032da:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80032de:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 80032e2:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 80032e6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 80032ea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe ff7e 	bl	80021f0 <quatnormalize>
 80032f4:	eeb0 6a40 	vmov.f32	s12, s0
 80032f8:	eef0 6a60 	vmov.f32	s13, s1
 80032fc:	eeb0 7a41 	vmov.f32	s14, s2
 8003300:	eef0 7a61 	vmov.f32	s15, s3
 8003304:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 8003308:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 800330c:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 8003310:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 8003314:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003318:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800331c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003320:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 8003324:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003330:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003334:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 8003340:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8003344:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334c:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8003350:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003360:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003368:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 800336c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003370:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003378:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800337c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003380:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8003384:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003390:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003394:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800339c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 80033a0:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80033a4:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80033a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ac:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 80033b0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033b8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 80033bc:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80033c0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80033c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 80033cc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80033d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033d4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 80033d8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80033dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033e0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 80033e4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80033e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033ec:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 80033f0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033f8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 80033fc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003400:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003404:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 800340e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003412:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8003416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 800341e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003422:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8003426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8003434:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003438:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800343c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003440:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8003444:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003450:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8003454:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003460:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8003464:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003468:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800346c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003470:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8003474:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003480:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8003484:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003490:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8003494:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003498:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800349c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a0:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80034a4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80034a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b0:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80034b4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80034b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 80034c4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80034c8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80034cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d0:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80034d4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80034d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e0:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80034e4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 80034f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fe79 	bl	80021f0 <quatnormalize>
 80034fe:	eeb0 6a40 	vmov.f32	s12, s0
 8003502:	eef0 6a60 	vmov.f32	s13, s1
 8003506:	eeb0 7a41 	vmov.f32	s14, s2
 800350a:	eef0 7a61 	vmov.f32	s15, s3
 800350e:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8003512:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8003516:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 800351a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	edd3 7a05 	vldr	s15, [r3, #20]
 8003524:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003638 <madgwick_filter_apply+0x448>
 8003528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800352c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003530:	eeb0 0a67 	vmov.f32	s0, s15
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fecd 	bl	80022d4 <quatmultiply_scalar>
 800353a:	eeb0 6a40 	vmov.f32	s12, s0
 800353e:	eef0 6a60 	vmov.f32	s13, s1
 8003542:	eeb0 7a41 	vmov.f32	s14, s2
 8003546:	eef0 7a61 	vmov.f32	s15, s3
 800354a:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800354e:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8003552:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8003556:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 800355a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800355e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fa93 	bl	8002a90 <quatsub>
 800356a:	eeb0 6a40 	vmov.f32	s12, s0
 800356e:	eef0 6a60 	vmov.f32	s13, s1
 8003572:	eeb0 7a41 	vmov.f32	s14, s2
 8003576:	eef0 7a61 	vmov.f32	s15, s3
 800357a:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 800357e:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 8003582:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 8003586:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003590:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003598:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800359c:	eeb0 0a47 	vmov.f32	s0, s14
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fe97 	bl	80022d4 <quatmultiply_scalar>
 80035a6:	eeb0 6a40 	vmov.f32	s12, s0
 80035aa:	eef0 6a60 	vmov.f32	s13, s1
 80035ae:	eeb0 7a41 	vmov.f32	s14, s2
 80035b2:	eef0 7a61 	vmov.f32	s15, s3
 80035b6:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 80035ba:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 80035be:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 80035c2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 80035c6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80035ca:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fa11 	bl	80029f8 <quatadd>
 80035d6:	eeb0 6a40 	vmov.f32	s12, s0
 80035da:	eef0 6a60 	vmov.f32	s13, s1
 80035de:	eeb0 7a41 	vmov.f32	s14, s2
 80035e2:	eef0 7a61 	vmov.f32	s15, s3
 80035e6:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 80035ea:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 80035ee:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 80035f2:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 80035f6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fdf8 	bl	80021f0 <quatnormalize>
 8003600:	eeb0 6a40 	vmov.f32	s12, s0
 8003604:	eef0 6a60 	vmov.f32	s13, s1
 8003608:	eeb0 7a41 	vmov.f32	s14, s2
 800360c:	eef0 7a61 	vmov.f32	s15, s3
 8003610:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8003614:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 8003618:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 800361c:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	461c      	mov	r4, r3
 8003624:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800362a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800362e:	bf00      	nop
 8003630:	37c4      	adds	r7, #196	@ 0xc4
 8003632:	46bd      	mov	sp, r7
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	bf00      	nop
 8003638:	3f5db3d7 	.word	0x3f5db3d7

0800363c <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 800363c:	b480      	push	{r7}
 800363e:	b097      	sub	sp, #92	@ 0x5c
 8003640:	af00      	add	r7, sp, #0
 8003642:	ed87 0a05 	vstr	s0, [r7, #20]
 8003646:	edc7 0a04 	vstr	s1, [r7, #16]
 800364a:	ed87 1a03 	vstr	s2, [r7, #12]
 800364e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003652:	ed87 2a01 	vstr	s4, [r7, #4]
 8003656:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 8003658:	edd7 7a05 	vldr	s15, [r7, #20]
 800365c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d502      	bpl.n	800366c <motor_mixer_quad_x+0x30>
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e00c      	b.n	8003686 <motor_mixer_quad_x+0x4a>
 800366c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003670:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	dd02      	ble.n	8003684 <motor_mixer_quad_x+0x48>
 800367e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8003682:	e000      	b.n	8003686 <motor_mixer_quad_x+0x4a>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 8003688:	edd7 7a01 	vldr	s15, [r7, #4]
 800368c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d502      	bpl.n	800369c <motor_mixer_quad_x+0x60>
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e00c      	b.n	80036b6 <motor_mixer_quad_x+0x7a>
 800369c:	edd7 7a01 	vldr	s15, [r7, #4]
 80036a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	dd02      	ble.n	80036b4 <motor_mixer_quad_x+0x78>
 80036ae:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80036b2:	e000      	b.n	80036b6 <motor_mixer_quad_x+0x7a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 80036b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036bc:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003914 <motor_mixer_quad_x+0x2d8>
 80036c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 80036c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036cc:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003914 <motor_mixer_quad_x+0x2d8>
 80036d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 80036d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80036dc:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003914 <motor_mixer_quad_x+0x2d8>
 80036e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 80036e8:	2300      	movs	r3, #0
 80036ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80036ec:	e03a      	b.n	8003764 <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 80036ee:	498a      	ldr	r1, [pc, #552]	@ (8003918 <motor_mixer_quad_x+0x2dc>)
 80036f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	ed93 7a00 	vldr	s14, [r3]
 8003700:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003708:	edd7 7a05 	vldr	s15, [r7, #20]
 800370c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003710:	4981      	ldr	r1, [pc, #516]	@ (8003918 <motor_mixer_quad_x+0x2dc>)
 8003712:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3304      	adds	r3, #4
 8003720:	edd3 6a00 	vldr	s13, [r3]
 8003724:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003730:	4979      	ldr	r1, [pc, #484]	@ (8003918 <motor_mixer_quad_x+0x2dc>)
 8003732:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3308      	adds	r3, #8
 8003740:	edd3 6a00 	vldr	s13, [r3]
 8003744:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3358      	adds	r3, #88	@ 0x58
 8003756:	443b      	add	r3, r7
 8003758:	3b40      	subs	r3, #64	@ 0x40
 800375a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 800375e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003760:	3301      	adds	r3, #1
 8003762:	657b      	str	r3, [r7, #84]	@ 0x54
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	2b03      	cmp	r3, #3
 8003768:	ddc1      	ble.n	80036ee <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	653b      	str	r3, [r7, #80]	@ 0x50
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 8003772:	2301      	movs	r3, #1
 8003774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003776:	e02c      	b.n	80037d2 <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 8003778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3358      	adds	r3, #88	@ 0x58
 800377e:	443b      	add	r3, r7
 8003780:	3b40      	subs	r3, #64	@ 0x40
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	dd06      	ble.n	80037a2 <motor_mixer_quad_x+0x166>
 8003794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3358      	adds	r3, #88	@ 0x58
 800379a:	443b      	add	r3, r7
 800379c:	3b40      	subs	r3, #64	@ 0x40
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 80037a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	3358      	adds	r3, #88	@ 0x58
 80037a8:	443b      	add	r3, r7
 80037aa:	3b40      	subs	r3, #64	@ 0x40
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80037b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d506      	bpl.n	80037cc <motor_mixer_quad_x+0x190>
 80037be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	3358      	adds	r3, #88	@ 0x58
 80037c4:	443b      	add	r3, r7
 80037c6:	3b40      	subs	r3, #64	@ 0x40
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 80037cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ce:	3301      	adds	r3, #1
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	ddcf      	ble.n	8003778 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 80037d8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80037dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e8:	dd22      	ble.n	8003830 <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 80037ea:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80037ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037f6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 80037fa:	2300      	movs	r3, #0
 80037fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fe:	e014      	b.n	800382a <motor_mixer_quad_x+0x1ee>
 8003800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	3358      	adds	r3, #88	@ 0x58
 8003806:	443b      	add	r3, r7
 8003808:	3b40      	subs	r3, #64	@ 0x40
 800380a:	ed93 7a00 	vldr	s14, [r3]
 800380e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	3358      	adds	r3, #88	@ 0x58
 800381c:	443b      	add	r3, r7
 800381e:	3b40      	subs	r3, #64	@ 0x40
 8003820:	edc3 7a00 	vstr	s15, [r3]
 8003824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003826:	3301      	adds	r3, #1
 8003828:	647b      	str	r3, [r7, #68]	@ 0x44
 800382a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382c:	2b03      	cmp	r3, #3
 800382e:	dde7      	ble.n	8003800 <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 8003830:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d522      	bpl.n	8003884 <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 800383e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800391c <motor_mixer_quad_x+0x2e0>
 8003842:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 800384e:	2300      	movs	r3, #0
 8003850:	643b      	str	r3, [r7, #64]	@ 0x40
 8003852:	e014      	b.n	800387e <motor_mixer_quad_x+0x242>
 8003854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	3358      	adds	r3, #88	@ 0x58
 800385a:	443b      	add	r3, r7
 800385c:	3b40      	subs	r3, #64	@ 0x40
 800385e:	ed93 7a00 	vldr	s14, [r3]
 8003862:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	3358      	adds	r3, #88	@ 0x58
 8003870:	443b      	add	r3, r7
 8003872:	3b40      	subs	r3, #64	@ 0x40
 8003874:	edc3 7a00 	vstr	s15, [r3]
 8003878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387a:	3301      	adds	r3, #1
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
 800387e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003880:	2b03      	cmp	r3, #3
 8003882:	dde7      	ble.n	8003854 <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003884:	2300      	movs	r3, #0
 8003886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003888:	e03a      	b.n	8003900 <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 800388a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	3358      	adds	r3, #88	@ 0x58
 8003890:	443b      	add	r3, r7
 8003892:	3b40      	subs	r3, #64	@ 0x40
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ed97 7a01 	vldr	s14, [r7, #4]
 800389c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a4:	dd01      	ble.n	80038aa <motor_mixer_quad_x+0x26e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	e016      	b.n	80038d8 <motor_mixer_quad_x+0x29c>
 80038aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3358      	adds	r3, #88	@ 0x58
 80038b0:	443b      	add	r3, r7
 80038b2:	3b40      	subs	r3, #64	@ 0x40
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	dd02      	ble.n	80038cc <motor_mixer_quad_x+0x290>
 80038c6:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80038ca:	e005      	b.n	80038d8 <motor_mixer_quad_x+0x29c>
 80038cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3358      	adds	r3, #88	@ 0x58
 80038d2:	443b      	add	r3, r7
 80038d4:	3b40      	subs	r3, #64	@ 0x40
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	3258      	adds	r2, #88	@ 0x58
 80038de:	443a      	add	r2, r7
 80038e0:	3a40      	subs	r2, #64	@ 0x40
 80038e2:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 80038e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	3258      	adds	r2, #88	@ 0x58
 80038f2:	443a      	add	r2, r7
 80038f4:	3a40      	subs	r2, #64	@ 0x40
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80038fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fc:	3301      	adds	r3, #1
 80038fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003902:	2b03      	cmp	r3, #3
 8003904:	ddc1      	ble.n	800388a <motor_mixer_quad_x+0x24e>
    }
}
 8003906:	bf00      	nop
 8003908:	bf00      	nop
 800390a:	375c      	adds	r7, #92	@ 0x5c
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	3ceaaefa 	.word	0x3ceaaefa
 8003918:	08020264 	.word	0x08020264
 800391c:	00000000 	.word	0x00000000

08003920 <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6178      	str	r0, [r7, #20]
 8003928:	ed87 0a04 	vstr	s0, [r7, #16]
 800392c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003930:	ed87 1a02 	vstr	s2, [r7, #8]
 8003934:	edc7 1a01 	vstr	s3, [r7, #4]
 8003938:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <pid_init+0x74>)
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	61da      	str	r2, [r3, #28]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	bf800000 	.word	0xbf800000

08003998 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	61f8      	str	r0, [r7, #28]
 80039a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80039a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80039a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80039ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80039b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80039b4:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 80039b8:	ed97 2a02 	vldr	s4, [r7, #8]
 80039bc:	edd7 1a03 	vldr	s3, [r7, #12]
 80039c0:	ed97 1a04 	vldr	s2, [r7, #16]
 80039c4:	edd7 0a05 	vldr	s1, [r7, #20]
 80039c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80039cc:	69f8      	ldr	r0, [r7, #28]
 80039ce:	f7ff ffa7 	bl	8003920 <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 80039d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80039d6:	69f8      	ldr	r0, [r7, #28]
 80039d8:	f000 f8d4 	bl	8003b84 <pid_set_integral_limit>
}
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <pid_calculate>:

float pid_calculate(pid_t *pid, float setpoint, float process_value, float dt) {
 80039e4:	b480      	push	{r7}
 80039e6:	b08b      	sub	sp, #44	@ 0x2c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80039f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80039f4:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 80039f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80039fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a04:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 8003a2c:	edd7 7a00 	vldr	s15, [r7]
 8003a30:	eef0 7ae7 	vabs.f32	s15, s15
 8003a34:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 8003a44:	edd7 7a00 	vldr	s15, [r7]
 8003a48:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b80 <pid_calculate+0x19c>
 8003a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	dd5c      	ble.n	8003b10 <pid_calculate+0x12c>
        pid->integral += error * dt;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a5c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003a60:	edd7 7a00 	vldr	s15, [r7]
 8003a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003a78:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003b80 <pid_calculate+0x19c>
 8003a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a84:	dd24      	ble.n	8003ad0 <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	dd04      	ble.n	8003aa6 <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
 8003aa4:	e014      	b.n	8003ad0 <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	ed93 7a08 	vldr	s14, [r3, #32]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003ab2:	eef1 7a67 	vneg.f32	s15, s15
 8003ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	d507      	bpl.n	8003ad0 <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003ac6:	eef1 7a67 	vneg.f32	s15, s15
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	edd3 7a08 	vldr	s15, [r3, #32]
 8003adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	edd3 7a06 	vldr	s15, [r3, #24]
 8003aea:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003af2:	ed97 7a00 	vldr	s14, [r7]
 8003af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b04:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 8003b10:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b24:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3a:	dd03      	ble.n	8003b44 <pid_calculate+0x160>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e00c      	b.n	8003b5e <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	d502      	bpl.n	8003b5e <pid_calculate+0x17a>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	619a      	str	r2, [r3, #24]
    return output;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	ee07 3a90 	vmov	s15, r3
}
 8003b70:	eeb0 0a67 	vmov.f32	s0, s15
 8003b74:	372c      	adds	r7, #44	@ 0x2c
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	34000000 	.word	0x34000000

08003b84 <pid_set_integral_limit>:
void pid_set_min_output(pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(pid_t *pid, float val) {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 8003b90:	edd7 7a00 	vldr	s15, [r7]
 8003b94:	eef0 7ae7 	vabs.f32	s15, s15
 8003b98:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ba8:	ed97 7a00 	vldr	s14, [r7]
 8003bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d503      	bpl.n	8003bbe <pid_set_integral_limit+0x3a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 8003bbc:	e013      	b.n	8003be6 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	ed93 7a08 	vldr	s14, [r3, #32]
 8003bc4:	edd7 7a00 	vldr	s15, [r7]
 8003bc8:	eef1 7a67 	vneg.f32	s15, s15
 8003bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	d400      	bmi.n	8003bd8 <pid_set_integral_limit+0x54>
}
 8003bd6:	e006      	b.n	8003be6 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003bd8:	edd7 7a00 	vldr	s15, [r7]
 8003bdc:	eef1 7a67 	vneg.f32	s15, s15
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <pid_reset>:
float pid_get_Kp(pid_t *pid) { return pid->Kp; }
float pid_get_Ki(pid_t *pid) { return pid->Ki; }
float pid_get_Kd(pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(pid_t *pid) { return pid->integral; }

void pid_reset(pid_t *pid) {
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c40:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d076      	beq.n	8003d38 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8003c4a:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8003c4e:	2100      	movs	r1, #0
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f017 fb2b 	bl	801b2ac <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	33c4      	adds	r3, #196	@ 0xc4
 8003c60:	edd7 0a02 	vldr	s1, [r7, #8]
 8003c64:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd fd88 	bl	800177e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	33ec      	adds	r3, #236	@ 0xec
 8003c72:	edd7 0a02 	vldr	s1, [r7, #8]
 8003c76:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd fd7f 	bl	800177e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003c86:	edd7 0a02 	vldr	s1, [r7, #8]
 8003c8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fd75 	bl	800177e <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003c9a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003c9e:	ed97 0a00 	vldr	s0, [r7]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd fcd4 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003cae:	edd7 0a02 	vldr	s1, [r7, #8]
 8003cb2:	ed97 0a00 	vldr	s0, [r7]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fcca 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003cc2:	edd7 0a02 	vldr	s1, [r7, #8]
 8003cc6:	ed97 0a00 	vldr	s0, [r7]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fcc0 	bl	8001650 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3328      	adds	r3, #40	@ 0x28
 8003cd4:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 8003d40 <rate_controller_init+0x110>
 8003cd8:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8003d44 <rate_controller_init+0x114>
 8003cdc:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003d48 <rate_controller_init+0x118>
 8003ce0:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8003d40 <rate_controller_init+0x110>
 8003ce4:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003d40 <rate_controller_init+0x110>
 8003ce8:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003d40 <rate_controller_init+0x110>
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fe53 	bl	8003998 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3354      	adds	r3, #84	@ 0x54
 8003cf6:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8003d40 <rate_controller_init+0x110>
 8003cfa:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8003d44 <rate_controller_init+0x114>
 8003cfe:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8003d48 <rate_controller_init+0x118>
 8003d02:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8003d40 <rate_controller_init+0x110>
 8003d06:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8003d40 <rate_controller_init+0x110>
 8003d0a:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003d40 <rate_controller_init+0x110>
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fe42 	bl	8003998 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3380      	adds	r3, #128	@ 0x80
 8003d18:	eddf 2a09 	vldr	s5, [pc, #36]	@ 8003d40 <rate_controller_init+0x110>
 8003d1c:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8003d44 <rate_controller_init+0x114>
 8003d20:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8003d48 <rate_controller_init+0x118>
 8003d24:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8003d40 <rate_controller_init+0x110>
 8003d28:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003d40 <rate_controller_init+0x110>
 8003d2c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003d40 <rate_controller_init+0x110>
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fe31 	bl	8003998 <pid_init_with_integral_limit>
 8003d36:	e000      	b.n	8003d3a <rate_controller_init+0x10a>
        return;
 8003d38:	bf00      	nop
}
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	00000000 	.word	0x00000000
 8003d44:	410ba058 	.word	0x410ba058
 8003d48:	c10ba058 	.word	0xc10ba058

08003d4c <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6178      	str	r0, [r7, #20]
 8003d54:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d58:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d5c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d60:	edc7 1a01 	vstr	s3, [r7, #4]
 8003d64:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3328      	adds	r3, #40	@ 0x28
 8003d6c:	edd7 2a01 	vldr	s5, [r7, #4]
 8003d70:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003da4 <rate_controller_init_roll_pid+0x58>
 8003d74:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003da8 <rate_controller_init_roll_pid+0x5c>
 8003d78:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003dac <rate_controller_init_roll_pid+0x60>
 8003d7c:	edd7 0a03 	vldr	s1, [r7, #12]
 8003d80:	ed97 0a04 	vldr	s0, [r7, #16]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fe07 	bl	8003998 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	410ba058 	.word	0x410ba058
 8003da8:	c10ba058 	.word	0xc10ba058
 8003dac:	00000000 	.word	0x00000000

08003db0 <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6178      	str	r0, [r7, #20]
 8003db8:	ed87 0a04 	vstr	s0, [r7, #16]
 8003dbc:	edc7 0a03 	vstr	s1, [r7, #12]
 8003dc0:	ed87 1a02 	vstr	s2, [r7, #8]
 8003dc4:	edc7 1a01 	vstr	s3, [r7, #4]
 8003dc8:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3354      	adds	r3, #84	@ 0x54
 8003dd0:	edd7 2a01 	vldr	s5, [r7, #4]
 8003dd4:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003e08 <rate_controller_init_pitch_pid+0x58>
 8003dd8:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003e0c <rate_controller_init_pitch_pid+0x5c>
 8003ddc:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003e10 <rate_controller_init_pitch_pid+0x60>
 8003de0:	edd7 0a03 	vldr	s1, [r7, #12]
 8003de4:	ed97 0a04 	vldr	s0, [r7, #16]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fdd5 	bl	8003998 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	410ba058 	.word	0x410ba058
 8003e0c:	c10ba058 	.word	0xc10ba058
 8003e10:	00000000 	.word	0x00000000

08003e14 <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6178      	str	r0, [r7, #20]
 8003e1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e20:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e24:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e28:	edc7 1a01 	vstr	s3, [r7, #4]
 8003e2c:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3380      	adds	r3, #128	@ 0x80
 8003e34:	edd7 2a01 	vldr	s5, [r7, #4]
 8003e38:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003e6c <rate_controller_init_yaw_pid+0x58>
 8003e3c:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003e70 <rate_controller_init_yaw_pid+0x5c>
 8003e40:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003e74 <rate_controller_init_yaw_pid+0x60>
 8003e44:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e48:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fda3 	bl	8003998 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	410ba058 	.word	0x410ba058
 8003e70:	c10ba058 	.word	0xc10ba058
 8003e74:	00000000 	.word	0x00000000

08003e78 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b092      	sub	sp, #72	@ 0x48
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	61f8      	str	r0, [r7, #28]
 8003e80:	ed87 0a06 	vstr	s0, [r7, #24]
 8003e84:	edc7 0a05 	vstr	s1, [r7, #20]
 8003e88:	ed87 1a04 	vstr	s2, [r7, #16]
 8003e8c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003e90:	ed87 2a02 	vstr	s4, [r7, #8]
 8003e94:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 816c 	beq.w	8004178 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 8003eee:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003ef2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ef6:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004180 <rate_controller_update+0x308>
 8003efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f02:	f340 80e4 	ble.w	80040ce <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3328      	adds	r3, #40	@ 0x28
 8003f0a:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003f0e:	edd7 0a06 	vldr	s1, [r7, #24]
 8003f12:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fd64 	bl	80039e4 <pid_calculate>
 8003f1c:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3354      	adds	r3, #84	@ 0x54
 8003f24:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003f28:	edd7 0a05 	vldr	s1, [r7, #20]
 8003f2c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fd57 	bl	80039e4 <pid_calculate>
 8003f36:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3380      	adds	r3, #128	@ 0x80
 8003f3e:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003f42:	edd7 0a04 	vldr	s1, [r7, #16]
 8003f46:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd4a 	bl	80039e4 <pid_calculate>
 8003f50:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f66:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003f6a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003f6e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	edd3 6a04 	vldr	s13, [r3, #16]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f8c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003f90:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003f94:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	edd3 6a05 	vldr	s13, [r3, #20]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fb2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003fb6:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003fba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003fcc:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd fba1 	bl	8001718 <pt1_filter_apply_lowpass>
 8003fd6:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003fe0:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd fb97 	bl	8001718 <pt1_filter_apply_lowpass>
 8003fea:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003ff4:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd fb8d 	bl	8001718 <pt1_filter_apply_lowpass>
 8003ffe:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8004014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004018:	eeb0 0a67 	vmov.f32	s0, s15
 800401c:	4610      	mov	r0, r2
 800401e:	f7fd fbd1 	bl	80017c4 <pt2_filter_apply_lowpass>
 8004022:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8004038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403c:	eeb0 0a67 	vmov.f32	s0, s15
 8004040:	4610      	mov	r0, r2
 8004042:	f7fd fbbf 	bl	80017c4 <pt2_filter_apply_lowpass>
 8004046:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800405c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004060:	eeb0 0a67 	vmov.f32	s0, s15
 8004064:	4610      	mov	r0, r2
 8004066:	f7fd fbad 	bl	80017c4 <pt2_filter_apply_lowpass>
 800406a:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 800406e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004072:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800407a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 800407e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004082:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800408a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 800408e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004092:	edd7 7a08 	vldr	s15, [r7, #32]
 8004096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 800409e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80040a2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80040a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040aa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 80040ae:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80040b2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80040b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 80040be:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80040c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80040c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ca:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 80040ce:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80040d2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004184 <rate_controller_update+0x30c>
 80040d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	d501      	bpl.n	80040e4 <rate_controller_update+0x26c>
 80040e0:	4b29      	ldr	r3, [pc, #164]	@ (8004188 <rate_controller_update+0x310>)
 80040e2:	e00b      	b.n	80040fc <rate_controller_update+0x284>
 80040e4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80040e8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800418c <rate_controller_update+0x314>
 80040ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f4:	dd01      	ble.n	80040fa <rate_controller_update+0x282>
 80040f6:	4b26      	ldr	r3, [pc, #152]	@ (8004190 <rate_controller_update+0x318>)
 80040f8:	e000      	b.n	80040fc <rate_controller_update+0x284>
 80040fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fc:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 80040fe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004102:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004184 <rate_controller_update+0x30c>
 8004106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410e:	d501      	bpl.n	8004114 <rate_controller_update+0x29c>
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <rate_controller_update+0x310>)
 8004112:	e00b      	b.n	800412c <rate_controller_update+0x2b4>
 8004114:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004118:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800418c <rate_controller_update+0x314>
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	dd01      	ble.n	800412a <rate_controller_update+0x2b2>
 8004126:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <rate_controller_update+0x318>)
 8004128:	e000      	b.n	800412c <rate_controller_update+0x2b4>
 800412a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800412c:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800412e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004132:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004184 <rate_controller_update+0x30c>
 8004136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413e:	d501      	bpl.n	8004144 <rate_controller_update+0x2cc>
 8004140:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <rate_controller_update+0x310>)
 8004142:	e00b      	b.n	800415c <rate_controller_update+0x2e4>
 8004144:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004148:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800418c <rate_controller_update+0x314>
 800414c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004154:	dd01      	ble.n	800415a <rate_controller_update+0x2e2>
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <rate_controller_update+0x318>)
 8004158:	e000      	b.n	800415c <rate_controller_update+0x2e4>
 800415a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004162:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800416a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004172:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8004176:	e000      	b.n	800417a <rate_controller_update+0x302>
        return;
 8004178:	bf00      	nop
}
 800417a:	3748      	adds	r7, #72	@ 0x48
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	34000000 	.word	0x34000000
 8004184:	c10ba058 	.word	0xc10ba058
 8004188:	c10ba058 	.word	0xc10ba058
 800418c:	410ba058 	.word	0x410ba058
 8004190:	410ba058 	.word	0x410ba058

08004194 <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	33c4      	adds	r3, #196	@ 0xc4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fb2c 	bl	80017fe <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	33ec      	adds	r3, #236	@ 0xec
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fb27 	bl	80017fe <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd fb21 	bl	80017fe <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd facd 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fac7 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd fac1 	bl	8001762 <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3328      	adds	r3, #40	@ 0x28
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fd04 	bl	8003bf2 <pid_reset>
    pid_reset(&(fc->pid_pitch));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3354      	adds	r3, #84	@ 0x54
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fcff 	bl	8003bf2 <pid_reset>
    pid_reset(&(fc->pid_yaw));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3380      	adds	r3, #128	@ 0x80
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fcfa 	bl	8003bf2 <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d018      	beq.n	8004282 <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d006      	beq.n	8004284 <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e000      	b.n	8004284 <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 8004282:	bf00      	nop
    }
}
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
 8004294:	61f8      	str	r0, [r7, #28]
 8004296:	61b9      	str	r1, [r7, #24]
 8004298:	ed87 0a05 	vstr	s0, [r7, #20]
 800429c:	edc7 0a04 	vstr	s1, [r7, #16]
 80042a0:	ed87 1a03 	vstr	s2, [r7, #12]
 80042a4:	edc7 1a02 	vstr	s3, [r7, #8]
 80042a8:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 80042ac:	2230      	movs	r2, #48	@ 0x30
 80042ae:	2100      	movs	r1, #0
 80042b0:	69f8      	ldr	r0, [r7, #28]
 80042b2:	f016 fffb 	bl	801b2ac <memset>

	channel->enable_lpf = enable_lpf;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80042ca:	ed97 0a05 	vldr	s0, [r7, #20]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd f9be 	bl	8001650 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004304:	bf00      	nop
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 800432a:	edd7 7a03 	vldr	s15, [r7, #12]
 800432e:	eeb0 7ae7 	vabs.f32	s14, s15
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	edd3 7a08 	vldr	s15, [r3, #32]
 8004338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d503      	bpl.n	800434a <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e02b      	b.n	80043a2 <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 800434a:	edd7 7a03 	vldr	s15, [r7, #12]
 800434e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	dd12      	ble.n	800437e <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	edd3 7a08 	vldr	s15, [r3, #32]
 800435e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004362:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	edd3 7a08 	vldr	s15, [r3, #32]
 800436c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004378:	edc7 7a03 	vstr	s15, [r7, #12]
 800437c:	e011      	b.n	80043a2 <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	ed93 7a08 	vldr	s14, [r3, #32]
 8004384:	edd7 7a03 	vldr	s15, [r7, #12]
 8004388:	ee77 6a27 	vadd.f32	s13, s14, s15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800439a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800439e:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80043a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d01a      	beq.n	80043e8 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 80043b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043b6:	eeb0 7ae7 	vabs.f32	s14, s15
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80043c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c8:	eef0 0a67 	vmov.f32	s1, s15
 80043cc:	eeb0 0a47 	vmov.f32	s0, s14
 80043d0:	f013 fa70 	bl	80178b4 <powf>
 80043d4:	eef0 7a40 	vmov.f32	s15, s0
 80043d8:	edd7 0a03 	vldr	s1, [r7, #12]
 80043dc:	eeb0 0a67 	vmov.f32	s0, s15
 80043e0:	f013 fc4e 	bl	8017c80 <copysignf>
 80043e4:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80043ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	ed97 0a03 	vldr	s0, [r7, #12]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd f984 	bl	8001718 <pt1_filter_apply_lowpass>
 8004410:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	615a      	str	r2, [r3, #20]
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	ee07 3a90 	vmov	s15, r3
}
 8004432:	eeb0 0a67 	vmov.f32	s0, s15
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	61f8      	str	r0, [r7, #28]
 8004448:	61b9      	str	r1, [r7, #24]
 800444a:	ed87 0a05 	vstr	s0, [r7, #20]
 800444e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004452:	ed87 1a03 	vstr	s2, [r7, #12]
 8004456:	edc7 1a02 	vstr	s3, [r7, #8]
 800445a:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	ed97 2a01 	vldr	s4, [r7, #4]
 8004464:	edd7 1a02 	vldr	s3, [r7, #8]
 8004468:	ed97 1a03 	vldr	s2, [r7, #12]
 800446c:	edd7 0a04 	vldr	s1, [r7, #16]
 8004470:	ed97 0a05 	vldr	s0, [r7, #20]
 8004474:	69b9      	ldr	r1, [r7, #24]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff09 	bl	800428e <rc_channel_filter_init>
}
 800447c:	bf00      	nop
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8004490:	edd7 7a00 	vldr	s15, [r7]
 8004494:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	d501      	bpl.n	80044a6 <rc_attitude_control_update_roll+0x22>
 80044a2:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <rc_attitude_control_update_roll+0x54>)
 80044a4:	e00c      	b.n	80044c0 <rc_attitude_control_update_roll+0x3c>
 80044a6:	edd7 7a00 	vldr	s15, [r7]
 80044aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	dd02      	ble.n	80044be <rc_attitude_control_update_roll+0x3a>
 80044b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80044bc:	e000      	b.n	80044c0 <rc_attitude_control_update_roll+0x3c>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	ed97 0a00 	vldr	s0, [r7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff1f 	bl	800430c <rc_channel_filter_update>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	bf800000 	.word	0xbf800000

080044dc <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff9b 	bl	8004422 <rc_channel_filter_get_processed>
 80044ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80044f0:	eeb0 0a67 	vmov.f32	s0, s15
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b088      	sub	sp, #32
 80044fe:	af00      	add	r7, sp, #0
 8004500:	61f8      	str	r0, [r7, #28]
 8004502:	61b9      	str	r1, [r7, #24]
 8004504:	ed87 0a05 	vstr	s0, [r7, #20]
 8004508:	edc7 0a04 	vstr	s1, [r7, #16]
 800450c:	ed87 1a03 	vstr	s2, [r7, #12]
 8004510:	edc7 1a02 	vstr	s3, [r7, #8]
 8004514:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3330      	adds	r3, #48	@ 0x30
 800451c:	ed97 2a01 	vldr	s4, [r7, #4]
 8004520:	edd7 1a02 	vldr	s3, [r7, #8]
 8004524:	ed97 1a03 	vldr	s2, [r7, #12]
 8004528:	edd7 0a04 	vldr	s1, [r7, #16]
 800452c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004530:	69b9      	ldr	r1, [r7, #24]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff feab 	bl	800428e <rc_channel_filter_init>
}
 8004538:	bf00      	nop
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 800454c:	edd7 7a00 	vldr	s15, [r7]
 8004550:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	d501      	bpl.n	8004562 <rc_attitude_control_update_pitch+0x22>
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <rc_attitude_control_update_pitch+0x54>)
 8004560:	e00c      	b.n	800457c <rc_attitude_control_update_pitch+0x3c>
 8004562:	edd7 7a00 	vldr	s15, [r7]
 8004566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800456a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	dd02      	ble.n	800457a <rc_attitude_control_update_pitch+0x3a>
 8004574:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004578:	e000      	b.n	800457c <rc_attitude_control_update_pitch+0x3c>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3330      	adds	r3, #48	@ 0x30
 8004582:	ed97 0a00 	vldr	s0, [r7]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fec0 	bl	800430c <rc_channel_filter_update>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	bf800000 	.word	0xbf800000

08004598 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3330      	adds	r3, #48	@ 0x30
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff3c 	bl	8004422 <rc_channel_filter_get_processed>
 80045aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80045ae:	eeb0 0a67 	vmov.f32	s0, s15
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	61f8      	str	r0, [r7, #28]
 80045c0:	61b9      	str	r1, [r7, #24]
 80045c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80045c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80045ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80045ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80045d2:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3360      	adds	r3, #96	@ 0x60
 80045da:	ed97 2a01 	vldr	s4, [r7, #4]
 80045de:	edd7 1a02 	vldr	s3, [r7, #8]
 80045e2:	ed97 1a03 	vldr	s2, [r7, #12]
 80045e6:	edd7 0a04 	vldr	s1, [r7, #16]
 80045ea:	ed97 0a05 	vldr	s0, [r7, #20]
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fe4c 	bl	800428e <rc_channel_filter_init>
}
 80045f6:	bf00      	nop
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 800460c:	edd7 7a00 	vldr	s15, [r7]
 8004610:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	d501      	bpl.n	8004622 <rc_attitude_control_update_yaw+0x22>
 800461e:	4b0d      	ldr	r3, [pc, #52]	@ (8004654 <rc_attitude_control_update_yaw+0x54>)
 8004620:	e00c      	b.n	800463c <rc_attitude_control_update_yaw+0x3c>
 8004622:	edd7 7a00 	vldr	s15, [r7]
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	dd02      	ble.n	800463a <rc_attitude_control_update_yaw+0x3a>
 8004634:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004638:	e000      	b.n	800463c <rc_attitude_control_update_yaw+0x3c>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3360      	adds	r3, #96	@ 0x60
 8004642:	ed97 0a00 	vldr	s0, [r7]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fe60 	bl	800430c <rc_channel_filter_update>
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	bf800000 	.word	0xbf800000

08004658 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3360      	adds	r3, #96	@ 0x60
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fedc 	bl	8004422 <rc_channel_filter_get_processed>
 800466a:	eef0 7a40 	vmov.f32	s15, s0
}
 800466e:	eeb0 0a67 	vmov.f32	s0, s15
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	61f8      	str	r0, [r7, #28]
 8004680:	61b9      	str	r1, [r7, #24]
 8004682:	ed87 0a05 	vstr	s0, [r7, #20]
 8004686:	edc7 0a04 	vstr	s1, [r7, #16]
 800468a:	ed87 1a03 	vstr	s2, [r7, #12]
 800468e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004692:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3390      	adds	r3, #144	@ 0x90
 800469a:	ed97 2a01 	vldr	s4, [r7, #4]
 800469e:	edd7 1a02 	vldr	s3, [r7, #8]
 80046a2:	ed97 1a03 	vldr	s2, [r7, #12]
 80046a6:	edd7 0a04 	vldr	s1, [r7, #16]
 80046aa:	ed97 0a05 	vldr	s0, [r7, #20]
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fdec 	bl	800428e <rc_channel_filter_init>
}
 80046b6:	bf00      	nop
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 80046ca:	edd7 7a00 	vldr	s15, [r7]
 80046ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	d502      	bpl.n	80046de <rc_attitude_control_update_throttle+0x20>
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e00c      	b.n	80046f8 <rc_attitude_control_update_throttle+0x3a>
 80046de:	edd7 7a00 	vldr	s15, [r7]
 80046e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	dd02      	ble.n	80046f6 <rc_attitude_control_update_throttle+0x38>
 80046f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046f4:	e000      	b.n	80046f8 <rc_attitude_control_update_throttle+0x3a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3390      	adds	r3, #144	@ 0x90
 80046fe:	ed97 0a00 	vldr	s0, [r7]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fe02 	bl	800430c <rc_channel_filter_update>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3390      	adds	r3, #144	@ 0x90
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fe80 	bl	8004422 <rc_channel_filter_get_processed>
 8004722:	eef0 7a40 	vmov.f32	s15, s0
}
 8004726:	eeb0 0a67 	vmov.f32	s0, s15
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6178      	str	r0, [r7, #20]
 8004738:	ed87 0a04 	vstr	s0, [r7, #16]
 800473c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004740:	ed87 1a02 	vstr	s2, [r7, #8]
 8004744:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 8004748:	ed97 0a04 	vldr	s0, [r7, #16]
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f7ff fe99 	bl	8004484 <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 8004752:	ed97 0a03 	vldr	s0, [r7, #12]
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	f7ff fef2 	bl	8004540 <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 800475c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004760:	6978      	ldr	r0, [r7, #20]
 8004762:	f7ff ff4d 	bl	8004600 <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 8004766:	ed97 0a01 	vldr	s0, [r7, #4]
 800476a:	6978      	ldr	r0, [r7, #20]
 800476c:	f7ff ffa7 	bl	80046be <rc_attitude_control_update_throttle>

}
 8004770:	bf00      	nop
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	if (roll) {
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fea5 	bl	80044dc <rc_attitude_control_get_processed_roll>
 8004792:	eef0 7a40 	vmov.f32	s15, s0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff fef8 	bl	8004598 <rc_attitude_control_get_processed_pitch>
 80047a8:	eef0 7a40 	vmov.f32	s15, s0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff ff4d 	bl	8004658 <rc_attitude_control_get_processed_yaw>
 80047be:	eef0 7a40 	vmov.f32	s15, s0
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff ff9e 	bl	8004710 <rc_attitude_control_get_processed_throttle>
 80047d4:	eef0 7a40 	vmov.f32	s15, s0
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	edc3 7a00 	vstr	s15, [r3]
	}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	460a      	mov	r2, r1
 80047f2:	71fb      	strb	r3, [r7, #7]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 80047f8:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80047fc:	2100      	movs	r1, #0
 80047fe:	48a4      	ldr	r0, [pc, #656]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004800:	f016 fd54 	bl	801b2ac <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 8004804:	4ba2      	ldr	r3, [pc, #648]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004806:	4aa3      	ldr	r2, [pc, #652]	@ (8004a94 <mpu6500_basic_init+0x2ac>)
 8004808:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 800480a:	4ba1      	ldr	r3, [pc, #644]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800480c:	4aa2      	ldr	r2, [pc, #648]	@ (8004a98 <mpu6500_basic_init+0x2b0>)
 800480e:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 8004810:	4b9f      	ldr	r3, [pc, #636]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004812:	4aa2      	ldr	r2, [pc, #648]	@ (8004a9c <mpu6500_basic_init+0x2b4>)
 8004814:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 8004816:	4b9e      	ldr	r3, [pc, #632]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004818:	4aa1      	ldr	r2, [pc, #644]	@ (8004aa0 <mpu6500_basic_init+0x2b8>)
 800481a:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 800481c:	4b9c      	ldr	r3, [pc, #624]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800481e:	4aa1      	ldr	r2, [pc, #644]	@ (8004aa4 <mpu6500_basic_init+0x2bc>)
 8004820:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 8004822:	4b9b      	ldr	r3, [pc, #620]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004824:	4aa0      	ldr	r2, [pc, #640]	@ (8004aa8 <mpu6500_basic_init+0x2c0>)
 8004826:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 8004828:	4b99      	ldr	r3, [pc, #612]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800482a:	4aa0      	ldr	r2, [pc, #640]	@ (8004aac <mpu6500_basic_init+0x2c4>)
 800482c:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 800482e:	4b98      	ldr	r3, [pc, #608]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004830:	4a9f      	ldr	r2, [pc, #636]	@ (8004ab0 <mpu6500_basic_init+0x2c8>)
 8004832:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 8004834:	4b96      	ldr	r3, [pc, #600]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004836:	4a9f      	ldr	r2, [pc, #636]	@ (8004ab4 <mpu6500_basic_init+0x2cc>)
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 800483a:	4b95      	ldr	r3, [pc, #596]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800483c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ab8 <mpu6500_basic_init+0x2d0>)
 800483e:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 8004840:	4b93      	ldr	r3, [pc, #588]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004842:	4a9e      	ldr	r2, [pc, #632]	@ (8004abc <mpu6500_basic_init+0x2d4>)
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	4619      	mov	r1, r3
 800484a:	4891      	ldr	r0, [pc, #580]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800484c:	f000 fd86 	bl	800535c <mpu6500_set_interface>
 8004850:	4603      	mov	r3, r0
 8004852:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 800485a:	4899      	ldr	r0, [pc, #612]	@ (8004ac0 <mpu6500_basic_init+0x2d8>)
 800485c:	f000 fca2 	bl	80051a4 <mpu6500_interface_debug_print>
       
        return 1;
 8004860:	2301      	movs	r3, #1
 8004862:	e3ce      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 8004864:	79bb      	ldrb	r3, [r7, #6]
 8004866:	4619      	mov	r1, r3
 8004868:	4889      	ldr	r0, [pc, #548]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800486a:	f000 fd8d 	bl	8005388 <mpu6500_set_addr_pin>
 800486e:	4603      	mov	r3, r0
 8004870:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 8004878:	4892      	ldr	r0, [pc, #584]	@ (8004ac4 <mpu6500_basic_init+0x2dc>)
 800487a:	f000 fc93 	bl	80051a4 <mpu6500_interface_debug_print>
       
        return 1;
 800487e:	2301      	movs	r3, #1
 8004880:	e3bf      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 8004882:	4883      	ldr	r0, [pc, #524]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004884:	f000 fd96 	bl	80053b4 <mpu6500_init>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 8004892:	488d      	ldr	r0, [pc, #564]	@ (8004ac8 <mpu6500_basic_init+0x2e0>)
 8004894:	f000 fc86 	bl	80051a4 <mpu6500_interface_debug_print>
       
        return 1;
 8004898:	2301      	movs	r3, #1
 800489a:	e3b2      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 800489c:	2064      	movs	r0, #100	@ 0x64
 800489e:	f000 fc6b 	bl	8005178 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 80048a2:	2100      	movs	r1, #0
 80048a4:	487a      	ldr	r0, [pc, #488]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80048a6:	f001 ff61 	bl	800676c <mpu6500_set_sleep>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 80048b4:	4885      	ldr	r0, [pc, #532]	@ (8004acc <mpu6500_basic_init+0x2e4>)
 80048b6:	f000 fc75 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80048ba:	4875      	ldr	r0, [pc, #468]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80048bc:	f000 fea6 	bl	800560c <mpu6500_deinit>
       
        return 1;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e39e      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d110      	bne.n	80048ec <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 80048ca:	2101      	movs	r1, #1
 80048cc:	4870      	ldr	r0, [pc, #448]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80048ce:	f001 fe17 	bl	8006500 <mpu6500_set_disable_iic_slave>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 80048dc:	487c      	ldr	r0, [pc, #496]	@ (8004ad0 <mpu6500_basic_init+0x2e8>)
 80048de:	f000 fc61 	bl	80051a4 <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 80048e2:	486b      	ldr	r0, [pc, #428]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80048e4:	f000 fe92 	bl	800560c <mpu6500_deinit>
           
            return 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e38a      	b.n	8005002 <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 80048ec:	4868      	ldr	r0, [pc, #416]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80048ee:	f002 fae7 	bl	8006ec0 <mpu6500_set_fifo_1024kb>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 80048fc:	4875      	ldr	r0, [pc, #468]	@ (8004ad4 <mpu6500_basic_init+0x2ec>)
 80048fe:	f000 fc51 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004902:	4863      	ldr	r0, [pc, #396]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004904:	f000 fe82 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004908:	2301      	movs	r3, #1
 800490a:	e37a      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 800490c:	2101      	movs	r1, #1
 800490e:	4860      	ldr	r0, [pc, #384]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004910:	f001 fe44 	bl	800659c <mpu6500_set_clock_source>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 800491e:	486e      	ldr	r0, [pc, #440]	@ (8004ad8 <mpu6500_basic_init+0x2f0>)
 8004920:	f000 fc40 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004924:	485a      	ldr	r0, [pc, #360]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004926:	f000 fe71 	bl	800560c <mpu6500_deinit>
       
        return 1;
 800492a:	2301      	movs	r3, #1
 800492c:	e369      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 800492e:	2100      	movs	r1, #0
 8004930:	4857      	ldr	r0, [pc, #348]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004932:	f002 f811 	bl	8006958 <mpu6500_set_sample_rate_divider>
 8004936:	4603      	mov	r3, r0
 8004938:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 8004940:	4866      	ldr	r0, [pc, #408]	@ (8004adc <mpu6500_basic_init+0x2f4>)
 8004942:	f000 fc2f 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004946:	4852      	ldr	r0, [pc, #328]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004948:	f000 fe60 	bl	800560c <mpu6500_deinit>
       
        return 1;
 800494c:	2301      	movs	r3, #1
 800494e:	e358      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8004950:	2101      	movs	r1, #1
 8004952:	484f      	ldr	r0, [pc, #316]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004954:	f001 fe6c 	bl	8006630 <mpu6500_set_ptat>
 8004958:	4603      	mov	r3, r0
 800495a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 8004962:	485f      	ldr	r0, [pc, #380]	@ (8004ae0 <mpu6500_basic_init+0x2f8>)
 8004964:	f000 fc1e 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004968:	4849      	ldr	r0, [pc, #292]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800496a:	f000 fe4f 	bl	800560c <mpu6500_deinit>
       
        return 1;
 800496e:	2301      	movs	r3, #1
 8004970:	e347      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8004972:	2100      	movs	r1, #0
 8004974:	4846      	ldr	r0, [pc, #280]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004976:	f001 feab 	bl	80066d0 <mpu6500_set_cycle_wake_up>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 8004984:	4857      	ldr	r0, [pc, #348]	@ (8004ae4 <mpu6500_basic_init+0x2fc>)
 8004986:	f000 fc0d 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800498a:	4841      	ldr	r0, [pc, #260]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800498c:	f000 fe3e 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004990:	2301      	movs	r3, #1
 8004992:	e336      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 8004994:	2200      	movs	r2, #0
 8004996:	2105      	movs	r1, #5
 8004998:	483d      	ldr	r0, [pc, #244]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 800499a:	f001 ff83 	bl	80068a4 <mpu6500_set_standby_mode>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 80049a8:	484f      	ldr	r0, [pc, #316]	@ (8004ae8 <mpu6500_basic_init+0x300>)
 80049aa:	f000 fbfb 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049ae:	4838      	ldr	r0, [pc, #224]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80049b0:	f000 fe2c 	bl	800560c <mpu6500_deinit>
       
        return 1;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e324      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2104      	movs	r1, #4
 80049bc:	4834      	ldr	r0, [pc, #208]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80049be:	f001 ff71 	bl	80068a4 <mpu6500_set_standby_mode>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 80049cc:	4846      	ldr	r0, [pc, #280]	@ (8004ae8 <mpu6500_basic_init+0x300>)
 80049ce:	f000 fbe9 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049d2:	482f      	ldr	r0, [pc, #188]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80049d4:	f000 fe1a 	bl	800560c <mpu6500_deinit>
       
        return 1;
 80049d8:	2301      	movs	r3, #1
 80049da:	e312      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 80049dc:	2200      	movs	r2, #0
 80049de:	2103      	movs	r1, #3
 80049e0:	482b      	ldr	r0, [pc, #172]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80049e2:	f001 ff5f 	bl	80068a4 <mpu6500_set_standby_mode>
 80049e6:	4603      	mov	r3, r0
 80049e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 80049f0:	483d      	ldr	r0, [pc, #244]	@ (8004ae8 <mpu6500_basic_init+0x300>)
 80049f2:	f000 fbd7 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049f6:	4826      	ldr	r0, [pc, #152]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 80049f8:	f000 fe08 	bl	800560c <mpu6500_deinit>
       
        return 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e300      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8004a00:	2200      	movs	r2, #0
 8004a02:	2102      	movs	r1, #2
 8004a04:	4822      	ldr	r0, [pc, #136]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a06:	f001 ff4d 	bl	80068a4 <mpu6500_set_standby_mode>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a14:	4834      	ldr	r0, [pc, #208]	@ (8004ae8 <mpu6500_basic_init+0x300>)
 8004a16:	f000 fbc5 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a1a:	481d      	ldr	r0, [pc, #116]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a1c:	f000 fdf6 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e2ee      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8004a24:	2200      	movs	r2, #0
 8004a26:	2101      	movs	r1, #1
 8004a28:	4819      	ldr	r0, [pc, #100]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a2a:	f001 ff3b 	bl	80068a4 <mpu6500_set_standby_mode>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a38:	482b      	ldr	r0, [pc, #172]	@ (8004ae8 <mpu6500_basic_init+0x300>)
 8004a3a:	f000 fbb3 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a3e:	4814      	ldr	r0, [pc, #80]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a40:	f000 fde4 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e2dc      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4810      	ldr	r0, [pc, #64]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a4e:	f001 ff29 	bl	80068a4 <mpu6500_set_standby_mode>
 8004a52:	4603      	mov	r3, r0
 8004a54:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a5c:	4822      	ldr	r0, [pc, #136]	@ (8004ae8 <mpu6500_basic_init+0x300>)
 8004a5e:	f000 fba1 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a62:	480b      	ldr	r0, [pc, #44]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a64:	f000 fdd2 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e2ca      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2107      	movs	r1, #7
 8004a70:	4807      	ldr	r0, [pc, #28]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a72:	f002 f881 	bl	8006b78 <mpu6500_set_gyroscope_test>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d037      	beq.n	8004af0 <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004a80:	481a      	ldr	r0, [pc, #104]	@ (8004aec <mpu6500_basic_init+0x304>)
 8004a82:	f000 fb8f 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a86:	4802      	ldr	r0, [pc, #8]	@ (8004a90 <mpu6500_basic_init+0x2a8>)
 8004a88:	f000 fdc0 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e2b8      	b.n	8005002 <mpu6500_basic_init+0x81a>
 8004a90:	20000338 	.word	0x20000338
 8004a94:	08005051 	.word	0x08005051
 8004a98:	08005061 	.word	0x08005061
 8004a9c:	08005071 	.word	0x08005071
 8004aa0:	08005095 	.word	0x08005095
 8004aa4:	080050b9 	.word	0x080050b9
 8004aa8:	080050c9 	.word	0x080050c9
 8004aac:	080050d9 	.word	0x080050d9
 8004ab0:	08005129 	.word	0x08005129
 8004ab4:	08005179 	.word	0x08005179
 8004ab8:	080051a5 	.word	0x080051a5
 8004abc:	080051d5 	.word	0x080051d5
 8004ac0:	0801e2b0 	.word	0x0801e2b0
 8004ac4:	0801e2d0 	.word	0x0801e2d0
 8004ac8:	0801e2f0 	.word	0x0801e2f0
 8004acc:	0801e308 	.word	0x0801e308
 8004ad0:	0801e324 	.word	0x0801e324
 8004ad4:	0801e34c 	.word	0x0801e34c
 8004ad8:	0801e370 	.word	0x0801e370
 8004adc:	0801e394 	.word	0x0801e394
 8004ae0:	0801e3c0 	.word	0x0801e3c0
 8004ae4:	0801e3dc 	.word	0x0801e3dc
 8004ae8:	0801e400 	.word	0x0801e400
 8004aec:	0801e424 	.word	0x0801e424
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2106      	movs	r1, #6
 8004af4:	48b0      	ldr	r0, [pc, #704]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004af6:	f002 f83f 	bl	8006b78 <mpu6500_set_gyroscope_test>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004b04:	48ad      	ldr	r0, [pc, #692]	@ (8004dbc <mpu6500_basic_init+0x5d4>)
 8004b06:	f000 fb4d 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b0a:	48ab      	ldr	r0, [pc, #684]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b0c:	f000 fd7e 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e276      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004b14:	2200      	movs	r2, #0
 8004b16:	2105      	movs	r1, #5
 8004b18:	48a7      	ldr	r0, [pc, #668]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b1a:	f002 f82d 	bl	8006b78 <mpu6500_set_gyroscope_test>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004b28:	48a4      	ldr	r0, [pc, #656]	@ (8004dbc <mpu6500_basic_init+0x5d4>)
 8004b2a:	f000 fb3b 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b2e:	48a2      	ldr	r0, [pc, #648]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b30:	f000 fd6c 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e264      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2107      	movs	r1, #7
 8004b3c:	489e      	ldr	r0, [pc, #632]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b3e:	f002 f917 	bl	8006d70 <mpu6500_set_accelerometer_test>
 8004b42:	4603      	mov	r3, r0
 8004b44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004b4c:	489c      	ldr	r0, [pc, #624]	@ (8004dc0 <mpu6500_basic_init+0x5d8>)
 8004b4e:	f000 fb29 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b52:	4899      	ldr	r0, [pc, #612]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b54:	f000 fd5a 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e252      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2106      	movs	r1, #6
 8004b60:	4895      	ldr	r0, [pc, #596]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b62:	f002 f905 	bl	8006d70 <mpu6500_set_accelerometer_test>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004b70:	4893      	ldr	r0, [pc, #588]	@ (8004dc0 <mpu6500_basic_init+0x5d8>)
 8004b72:	f000 fb17 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b76:	4890      	ldr	r0, [pc, #576]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b78:	f000 fd48 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e240      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2105      	movs	r1, #5
 8004b84:	488c      	ldr	r0, [pc, #560]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b86:	f002 f8f3 	bl	8006d70 <mpu6500_set_accelerometer_test>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004b94:	488a      	ldr	r0, [pc, #552]	@ (8004dc0 <mpu6500_basic_init+0x5d8>)
 8004b96:	f000 fb05 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b9a:	4887      	ldr	r0, [pc, #540]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004b9c:	f000 fd36 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e22e      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4884      	ldr	r0, [pc, #528]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004ba8:	f001 fc0e 	bl	80063c8 <mpu6500_set_fifo>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8004bb6:	4883      	ldr	r0, [pc, #524]	@ (8004dc4 <mpu6500_basic_init+0x5dc>)
 8004bb8:	f000 faf4 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bbc:	487e      	ldr	r0, [pc, #504]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004bbe:	f000 fd25 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e21d      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2107      	movs	r1, #7
 8004bca:	487b      	ldr	r0, [pc, #492]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004bcc:	f002 fb4a 	bl	8007264 <mpu6500_set_fifo_enable>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004bda:	487b      	ldr	r0, [pc, #492]	@ (8004dc8 <mpu6500_basic_init+0x5e0>)
 8004bdc:	f000 fae2 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004be0:	4875      	ldr	r0, [pc, #468]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004be2:	f000 fd13 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e20b      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 8004bea:	2200      	movs	r2, #0
 8004bec:	2106      	movs	r1, #6
 8004bee:	4872      	ldr	r0, [pc, #456]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004bf0:	f002 fb38 	bl	8007264 <mpu6500_set_fifo_enable>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004bfe:	4872      	ldr	r0, [pc, #456]	@ (8004dc8 <mpu6500_basic_init+0x5e0>)
 8004c00:	f000 fad0 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c04:	486c      	ldr	r0, [pc, #432]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c06:	f000 fd01 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1f9      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2105      	movs	r1, #5
 8004c12:	4869      	ldr	r0, [pc, #420]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c14:	f002 fb26 	bl	8007264 <mpu6500_set_fifo_enable>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004c22:	4869      	ldr	r0, [pc, #420]	@ (8004dc8 <mpu6500_basic_init+0x5e0>)
 8004c24:	f000 fabe 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c28:	4863      	ldr	r0, [pc, #396]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c2a:	f000 fcef 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e1e7      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 8004c32:	2200      	movs	r2, #0
 8004c34:	2104      	movs	r1, #4
 8004c36:	4860      	ldr	r0, [pc, #384]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c38:	f002 fb14 	bl	8007264 <mpu6500_set_fifo_enable>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004c46:	4860      	ldr	r0, [pc, #384]	@ (8004dc8 <mpu6500_basic_init+0x5e0>)
 8004c48:	f000 faac 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c4c:	485a      	ldr	r0, [pc, #360]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c4e:	f000 fcdd 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e1d5      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 8004c56:	2200      	movs	r2, #0
 8004c58:	2103      	movs	r1, #3
 8004c5a:	4857      	ldr	r0, [pc, #348]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c5c:	f002 fb02 	bl	8007264 <mpu6500_set_fifo_enable>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004c6a:	4857      	ldr	r0, [pc, #348]	@ (8004dc8 <mpu6500_basic_init+0x5e0>)
 8004c6c:	f000 fa9a 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c70:	4851      	ldr	r0, [pc, #324]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c72:	f000 fccb 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1c3      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	484e      	ldr	r0, [pc, #312]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c7e:	f002 fb4b 	bl	8007318 <mpu6500_set_interrupt_level>
 8004c82:	4603      	mov	r3, r0
 8004c84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 8004c8c:	484f      	ldr	r0, [pc, #316]	@ (8004dcc <mpu6500_basic_init+0x5e4>)
 8004c8e:	f000 fa89 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c92:	4849      	ldr	r0, [pc, #292]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004c94:	f000 fcba 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e1b2      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4846      	ldr	r0, [pc, #280]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004ca0:	f002 fb88 	bl	80073b4 <mpu6500_set_interrupt_pin_type>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 8004cae:	4848      	ldr	r0, [pc, #288]	@ (8004dd0 <mpu6500_basic_init+0x5e8>)
 8004cb0:	f000 fa78 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cb4:	4840      	ldr	r0, [pc, #256]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004cb6:	f000 fca9 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e1a1      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2106      	movs	r1, #6
 8004cc2:	483d      	ldr	r0, [pc, #244]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004cc4:	f002 fd4c 	bl	8007760 <mpu6500_set_interrupt>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004cd2:	4840      	ldr	r0, [pc, #256]	@ (8004dd4 <mpu6500_basic_init+0x5ec>)
 8004cd4:	f000 fa66 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cd8:	4837      	ldr	r0, [pc, #220]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004cda:	f000 fc97 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e18f      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	4834      	ldr	r0, [pc, #208]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004ce8:	f002 fd3a 	bl	8007760 <mpu6500_set_interrupt>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004cf6:	4837      	ldr	r0, [pc, #220]	@ (8004dd4 <mpu6500_basic_init+0x5ec>)
 8004cf8:	f000 fa54 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cfc:	482e      	ldr	r0, [pc, #184]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004cfe:	f000 fc85 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e17d      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2101      	movs	r1, #1
 8004d0a:	482b      	ldr	r0, [pc, #172]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d0c:	f002 fd28 	bl	8007760 <mpu6500_set_interrupt>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d1a:	482e      	ldr	r0, [pc, #184]	@ (8004dd4 <mpu6500_basic_init+0x5ec>)
 8004d1c:	f000 fa42 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d20:	4825      	ldr	r0, [pc, #148]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d22:	f000 fc73 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e16b      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2103      	movs	r1, #3
 8004d2e:	4822      	ldr	r0, [pc, #136]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d30:	f002 fd16 	bl	8007760 <mpu6500_set_interrupt>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d3e:	4825      	ldr	r0, [pc, #148]	@ (8004dd4 <mpu6500_basic_init+0x5ec>)
 8004d40:	f000 fa30 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d44:	481c      	ldr	r0, [pc, #112]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d46:	f000 fc61 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e159      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2100      	movs	r1, #0
 8004d52:	4819      	ldr	r0, [pc, #100]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d54:	f002 fd04 	bl	8007760 <mpu6500_set_interrupt>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d62:	481c      	ldr	r0, [pc, #112]	@ (8004dd4 <mpu6500_basic_init+0x5ec>)
 8004d64:	f000 fa1e 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d68:	4813      	ldr	r0, [pc, #76]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d6a:	f000 fc4f 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e147      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 8004d72:	2101      	movs	r1, #1
 8004d74:	4810      	ldr	r0, [pc, #64]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d76:	f002 fb6b 	bl	8007450 <mpu6500_set_interrupt_latch>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 8004d84:	4814      	ldr	r0, [pc, #80]	@ (8004dd8 <mpu6500_basic_init+0x5f0>)
 8004d86:	f000 fa0d 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d8a:	480b      	ldr	r0, [pc, #44]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d8c:	f000 fc3e 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e136      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8004d94:	2101      	movs	r1, #1
 8004d96:	4808      	ldr	r0, [pc, #32]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004d98:	f002 fbaa 	bl	80074f0 <mpu6500_set_interrupt_read_clear>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01c      	beq.n	8004de0 <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 8004da6:	480d      	ldr	r0, [pc, #52]	@ (8004ddc <mpu6500_basic_init+0x5f4>)
 8004da8:	f000 f9fc 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004dac:	4802      	ldr	r0, [pc, #8]	@ (8004db8 <mpu6500_basic_init+0x5d0>)
 8004dae:	f000 fc2d 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e125      	b.n	8005002 <mpu6500_basic_init+0x81a>
 8004db6:	bf00      	nop
 8004db8:	20000338 	.word	0x20000338
 8004dbc:	0801e424 	.word	0x0801e424
 8004dc0:	0801e44c 	.word	0x0801e44c
 8004dc4:	0801e478 	.word	0x0801e478
 8004dc8:	0801e494 	.word	0x0801e494
 8004dcc:	0801e4b8 	.word	0x0801e4b8
 8004dd0:	0801e4e0 	.word	0x0801e4e0
 8004dd4:	0801e50c 	.word	0x0801e50c
 8004dd8:	0801e52c 	.word	0x0801e52c
 8004ddc:	0801e554 	.word	0x0801e554
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 8004de0:	2100      	movs	r1, #0
 8004de2:	488a      	ldr	r0, [pc, #552]	@ (800500c <mpu6500_basic_init+0x824>)
 8004de4:	f001 fde2 	bl	80069ac <mpu6500_set_extern_sync>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 8004df2:	4887      	ldr	r0, [pc, #540]	@ (8005010 <mpu6500_basic_init+0x828>)
 8004df4:	f000 f9d6 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004df8:	4884      	ldr	r0, [pc, #528]	@ (800500c <mpu6500_basic_init+0x824>)
 8004dfa:	f000 fc07 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0ff      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8004e02:	2100      	movs	r1, #0
 8004e04:	4881      	ldr	r0, [pc, #516]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e06:	f002 fc0f 	bl	8007628 <mpu6500_set_fsync_interrupt>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 8004e14:	487f      	ldr	r0, [pc, #508]	@ (8005014 <mpu6500_basic_init+0x82c>)
 8004e16:	f000 f9c5 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e1a:	487c      	ldr	r0, [pc, #496]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e1c:	f000 fbf6 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0ee      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004e24:	2101      	movs	r1, #1
 8004e26:	4879      	ldr	r0, [pc, #484]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e28:	f002 fbb0 	bl	800758c <mpu6500_set_fsync_interrupt_level>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 8004e36:	4878      	ldr	r0, [pc, #480]	@ (8005018 <mpu6500_basic_init+0x830>)
 8004e38:	f000 f9b4 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e3c:	4873      	ldr	r0, [pc, #460]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e3e:	f000 fbe5 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0dd      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 8004e46:	2100      	movs	r1, #0
 8004e48:	4870      	ldr	r0, [pc, #448]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e4a:	f001 fb0b 	bl	8006464 <mpu6500_set_iic_master>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 8004e58:	4870      	ldr	r0, [pc, #448]	@ (800501c <mpu6500_basic_init+0x834>)
 8004e5a:	f000 f9a3 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e5e:	486b      	ldr	r0, [pc, #428]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e60:	f000 fbd4 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0cc      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4868      	ldr	r0, [pc, #416]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e6c:	f002 fc2a 	bl	80076c4 <mpu6500_set_iic_bypass>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 8004e7a:	4869      	ldr	r0, [pc, #420]	@ (8005020 <mpu6500_basic_init+0x838>)
 8004e7c:	f000 f992 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e80:	4862      	ldr	r0, [pc, #392]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e82:	f000 fbc3 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e0bb      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	485f      	ldr	r0, [pc, #380]	@ (800500c <mpu6500_basic_init+0x824>)
 8004e8e:	f001 ffc9 	bl	8006e24 <mpu6500_set_accelerometer_range>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 8004e9c:	4861      	ldr	r0, [pc, #388]	@ (8005024 <mpu6500_basic_init+0x83c>)
 8004e9e:	f000 f981 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ea2:	485a      	ldr	r0, [pc, #360]	@ (800500c <mpu6500_basic_init+0x824>)
 8004ea4:	f000 fbb2 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0aa      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8004eac:	2103      	movs	r1, #3
 8004eae:	4857      	ldr	r0, [pc, #348]	@ (800500c <mpu6500_basic_init+0x824>)
 8004eb0:	f001 febc 	bl	8006c2c <mpu6500_set_gyroscope_range>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 8004ebe:	485a      	ldr	r0, [pc, #360]	@ (8005028 <mpu6500_basic_init+0x840>)
 8004ec0:	f000 f970 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ec4:	4851      	ldr	r0, [pc, #324]	@ (800500c <mpu6500_basic_init+0x824>)
 8004ec6:	f000 fba1 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e099      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	484e      	ldr	r0, [pc, #312]	@ (800500c <mpu6500_basic_init+0x824>)
 8004ed2:	f001 fc99 	bl	8006808 <mpu6500_set_gyro_standby>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 8004ee0:	4852      	ldr	r0, [pc, #328]	@ (800502c <mpu6500_basic_init+0x844>)
 8004ee2:	f000 f95f 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ee6:	4849      	ldr	r0, [pc, #292]	@ (800500c <mpu6500_basic_init+0x824>)
 8004ee8:	f000 fb90 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e088      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4846      	ldr	r0, [pc, #280]	@ (800500c <mpu6500_basic_init+0x824>)
 8004ef4:	f001 fdf2 	bl	8006adc <mpu6500_set_fifo_mode>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 8004f02:	484b      	ldr	r0, [pc, #300]	@ (8005030 <mpu6500_basic_init+0x848>)
 8004f04:	f000 f94e 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f08:	4840      	ldr	r0, [pc, #256]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f0a:	f000 fb7f 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e077      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8004f12:	2100      	movs	r1, #0
 8004f14:	483d      	ldr	r0, [pc, #244]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f16:	f001 fed7 	bl	8006cc8 <mpu6500_set_gyroscope_choice>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 8004f24:	4843      	ldr	r0, [pc, #268]	@ (8005034 <mpu6500_basic_init+0x84c>)
 8004f26:	f000 f93d 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f2a:	4838      	ldr	r0, [pc, #224]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f2c:	f000 fb6e 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e066      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 8004f34:	2100      	movs	r1, #0
 8004f36:	4835      	ldr	r0, [pc, #212]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f38:	f001 fd86 	bl	8006a48 <mpu6500_set_low_pass_filter>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 8004f46:	483c      	ldr	r0, [pc, #240]	@ (8005038 <mpu6500_basic_init+0x850>)
 8004f48:	f000 f92c 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f4c:	482f      	ldr	r0, [pc, #188]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f4e:	f000 fb5d 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e055      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8004f56:	2100      	movs	r1, #0
 8004f58:	482c      	ldr	r0, [pc, #176]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f5a:	f001 fff9 	bl	8006f50 <mpu6500_set_accelerometer_choice>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 8004f68:	4834      	ldr	r0, [pc, #208]	@ (800503c <mpu6500_basic_init+0x854>)
 8004f6a:	f000 f91b 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f6e:	4827      	ldr	r0, [pc, #156]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f70:	f000 fb4c 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e044      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4824      	ldr	r0, [pc, #144]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f7c:	f002 f842 	bl	8007004 <mpu6500_set_accelerometer_low_pass_filter>
 8004f80:	4603      	mov	r3, r0
 8004f82:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 8004f8a:	482d      	ldr	r0, [pc, #180]	@ (8005040 <mpu6500_basic_init+0x858>)
 8004f8c:	f000 f90a 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f90:	481e      	ldr	r0, [pc, #120]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f92:	f000 fb3b 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e033      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 8004f9a:	2108      	movs	r1, #8
 8004f9c:	481b      	ldr	r0, [pc, #108]	@ (800500c <mpu6500_basic_init+0x824>)
 8004f9e:	f002 f87b 	bl	8007098 <mpu6500_set_low_power_accel_output_rate>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 8004fac:	4825      	ldr	r0, [pc, #148]	@ (8005044 <mpu6500_basic_init+0x85c>)
 8004fae:	f000 f8f9 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fb2:	4816      	ldr	r0, [pc, #88]	@ (800500c <mpu6500_basic_init+0x824>)
 8004fb4:	f000 fb2a 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e022      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4813      	ldr	r0, [pc, #76]	@ (800500c <mpu6500_basic_init+0x824>)
 8004fc0:	f002 f8b4 	bl	800712c <mpu6500_set_wake_on_motion>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 8004fce:	481e      	ldr	r0, [pc, #120]	@ (8005048 <mpu6500_basic_init+0x860>)
 8004fd0:	f000 f8e8 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fd4:	480d      	ldr	r0, [pc, #52]	@ (800500c <mpu6500_basic_init+0x824>)
 8004fd6:	f000 fb19 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e011      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 8004fde:	2101      	movs	r1, #1
 8004fe0:	480a      	ldr	r0, [pc, #40]	@ (800500c <mpu6500_basic_init+0x824>)
 8004fe2:	f002 f8f1 	bl	80071c8 <mpu6500_set_accel_compare_with_previous_sample>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 8004ff0:	4816      	ldr	r0, [pc, #88]	@ (800504c <mpu6500_basic_init+0x864>)
 8004ff2:	f000 f8d7 	bl	80051a4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ff6:	4805      	ldr	r0, [pc, #20]	@ (800500c <mpu6500_basic_init+0x824>)
 8004ff8:	f000 fb08 	bl	800560c <mpu6500_deinit>
       
        return 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000338 	.word	0x20000338
 8005010:	0801e580 	.word	0x0801e580
 8005014:	0801e5a4 	.word	0x0801e5a4
 8005018:	0801e5cc 	.word	0x0801e5cc
 800501c:	0801e5f8 	.word	0x0801e5f8
 8005020:	0801e61c 	.word	0x0801e61c
 8005024:	0801e640 	.word	0x0801e640
 8005028:	0801e66c 	.word	0x0801e66c
 800502c:	0801e694 	.word	0x0801e694
 8005030:	0801e6b8 	.word	0x0801e6b8
 8005034:	0801e6d8 	.word	0x0801e6d8
 8005038:	0801e700 	.word	0x0801e700
 800503c:	0801e728 	.word	0x0801e728
 8005040:	0801e754 	.word	0x0801e754
 8005044:	0801e788 	.word	0x0801e788
 8005048:	0801e7bc 	.word	0x0801e7bc
 800504c:	0801e7e4 	.word	0x0801e7e4

08005050 <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
    return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
    return 0;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	603a      	str	r2, [r7, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	71fb      	strb	r3, [r7, #7]
 800507e:	460b      	mov	r3, r1
 8005080:	71bb      	strb	r3, [r7, #6]
 8005082:	4613      	mov	r3, r2
 8005084:	80bb      	strh	r3, [r7, #4]
    return 0;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	603a      	str	r2, [r7, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
 80050a2:	460b      	mov	r3, r1
 80050a4:	71bb      	strb	r3, [r7, #6]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80bb      	strh	r3, [r7, #4]
    return 0;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
    return 0;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
    return 0;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	71fb      	strb	r3, [r7, #7]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80050e8:	2200      	movs	r2, #0
 80050ea:	2110      	movs	r1, #16
 80050ec:	480c      	ldr	r0, [pc, #48]	@ (8005120 <mpu6500_interface_spi_read+0x48>)
 80050ee:	f006 f9e9 	bl	800b4c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 80050f2:	1df9      	adds	r1, r7, #7
 80050f4:	2364      	movs	r3, #100	@ 0x64
 80050f6:	2201      	movs	r2, #1
 80050f8:	480a      	ldr	r0, [pc, #40]	@ (8005124 <mpu6500_interface_spi_read+0x4c>)
 80050fa:	f008 f9a2 	bl	800d442 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 80050fe:	88ba      	ldrh	r2, [r7, #4]
 8005100:	2364      	movs	r3, #100	@ 0x64
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	4807      	ldr	r0, [pc, #28]	@ (8005124 <mpu6500_interface_spi_read+0x4c>)
 8005106:	f008 fae0 	bl	800d6ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800510a:	2201      	movs	r2, #1
 800510c:	2110      	movs	r1, #16
 800510e:	4804      	ldr	r0, [pc, #16]	@ (8005120 <mpu6500_interface_spi_read+0x48>)
 8005110:	f006 f9d8 	bl	800b4c4 <HAL_GPIO_WritePin>
    return 0;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40020000 	.word	0x40020000
 8005124:	200037dc 	.word	0x200037dc

08005128 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	71fb      	strb	r3, [r7, #7]
 8005134:	4613      	mov	r3, r2
 8005136:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005138:	2200      	movs	r2, #0
 800513a:	2110      	movs	r1, #16
 800513c:	480c      	ldr	r0, [pc, #48]	@ (8005170 <mpu6500_interface_spi_write+0x48>)
 800513e:	f006 f9c1 	bl	800b4c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8005142:	1df9      	adds	r1, r7, #7
 8005144:	2364      	movs	r3, #100	@ 0x64
 8005146:	2201      	movs	r2, #1
 8005148:	480a      	ldr	r0, [pc, #40]	@ (8005174 <mpu6500_interface_spi_write+0x4c>)
 800514a:	f008 f97a 	bl	800d442 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 800514e:	2364      	movs	r3, #100	@ 0x64
 8005150:	2201      	movs	r2, #1
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	4807      	ldr	r0, [pc, #28]	@ (8005174 <mpu6500_interface_spi_write+0x4c>)
 8005156:	f008 f974 	bl	800d442 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800515a:	2201      	movs	r2, #1
 800515c:	2110      	movs	r1, #16
 800515e:	4804      	ldr	r0, [pc, #16]	@ (8005170 <mpu6500_interface_spi_write+0x48>)
 8005160:	f006 f9b0 	bl	800b4c4 <HAL_GPIO_WritePin>
    return 0;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40020000 	.word	0x40020000
 8005174:	200037dc 	.word	0x200037dc

08005178 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(ms));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	4a05      	ldr	r2, [pc, #20]	@ (80051a0 <mpu6500_interface_delay_ms+0x28>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	099b      	lsrs	r3, r3, #6
 8005192:	4618      	mov	r0, r3
 8005194:	f00f fed8 	bl	8014f48 <vTaskDelay>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 80051a4:	b40f      	push	{r0, r1, r2, r3}
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 80051ac:	f107 0314 	add.w	r3, r7, #20
 80051b0:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 80051b2:	4b07      	ldr	r3, [pc, #28]	@ (80051d0 <mpu6500_interface_debug_print+0x2c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6939      	ldr	r1, [r7, #16]
 80051bc:	4618      	mov	r0, r3
 80051be:	f015 fa55 	bl	801a66c <vfiprintf>
    va_end(args);
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr
 80051d0:	200002cc 	.word	0x200002cc

080051d4 <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	71fb      	strb	r3, [r7, #7]
    switch (type)
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b06      	cmp	r3, #6
 80051e2:	d825      	bhi.n	8005230 <mpu6500_interface_receive_callback+0x5c>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <mpu6500_interface_receive_callback+0x18>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005221 	.word	0x08005221
 80051f4:	08005231 	.word	0x08005231
 80051f8:	08005219 	.word	0x08005219
 80051fc:	08005211 	.word	0x08005211
 8005200:	08005231 	.word	0x08005231
 8005204:	08005209 	.word	0x08005209
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 8005208:	480d      	ldr	r0, [pc, #52]	@ (8005240 <mpu6500_interface_receive_callback+0x6c>)
 800520a:	f7ff ffcb 	bl	80051a4 <mpu6500_interface_debug_print>
            
            break;
 800520e:	e013      	b.n	8005238 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 8005210:	480c      	ldr	r0, [pc, #48]	@ (8005244 <mpu6500_interface_receive_callback+0x70>)
 8005212:	f7ff ffc7 	bl	80051a4 <mpu6500_interface_debug_print>
            
            break;
 8005216:	e00f      	b.n	8005238 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 8005218:	480b      	ldr	r0, [pc, #44]	@ (8005248 <mpu6500_interface_receive_callback+0x74>)
 800521a:	f7ff ffc3 	bl	80051a4 <mpu6500_interface_debug_print>
            
            break;
 800521e:	e00b      	b.n	8005238 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 8005220:	480a      	ldr	r0, [pc, #40]	@ (800524c <mpu6500_interface_receive_callback+0x78>)
 8005222:	f7ff ffbf 	bl	80051a4 <mpu6500_interface_debug_print>
            
            break;
 8005226:	e007      	b.n	8005238 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 8005228:	4809      	ldr	r0, [pc, #36]	@ (8005250 <mpu6500_interface_receive_callback+0x7c>)
 800522a:	f7ff ffbb 	bl	80051a4 <mpu6500_interface_debug_print>
            
            break;
 800522e:	e003      	b.n	8005238 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 8005230:	4808      	ldr	r0, [pc, #32]	@ (8005254 <mpu6500_interface_receive_callback+0x80>)
 8005232:	f7ff ffb7 	bl	80051a4 <mpu6500_interface_debug_print>
            
            break;
 8005236:	bf00      	nop
        }
    }
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0801e820 	.word	0x0801e820
 8005244:	0801e838 	.word	0x0801e838
 8005248:	0801e858 	.word	0x0801e858
 800524c:	0801e874 	.word	0x0801e874
 8005250:	0801e888 	.word	0x0801e888
 8005254:	0801e8a4 	.word	0x0801e8a4

08005258 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	461a      	mov	r2, r3
 8005264:	460b      	mov	r3, r1
 8005266:	72fb      	strb	r3, [r7, #11]
 8005268:	4613      	mov	r3, r2
 800526a:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10e      	bne.n	8005294 <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	68dc      	ldr	r4, [r3, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	7818      	ldrb	r0, [r3, #0]
 800527e:	893b      	ldrh	r3, [r7, #8]
 8005280:	7af9      	ldrb	r1, [r7, #11]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	47a0      	blx	r4
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 800528c:	2301      	movs	r3, #1
 800528e:	e010      	b.n	80052b2 <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8005290:	2300      	movs	r3, #0
 8005292:	e00e      	b.n	80052b2 <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	7afa      	ldrb	r2, [r7, #11]
 800529a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800529e:	b2d0      	uxtb	r0, r2
 80052a0:	893a      	ldrh	r2, [r7, #8]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4798      	blx	r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 80052b0:	2300      	movs	r3, #0
        }
    }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}

080052ba <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80052ba:	b590      	push	{r4, r7, lr}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	461a      	mov	r2, r3
 80052c6:	460b      	mov	r3, r1
 80052c8:	72fb      	strb	r3, [r7, #11]
 80052ca:	4613      	mov	r3, r2
 80052cc:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10e      	bne.n	80052f6 <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	691c      	ldr	r4, [r3, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	7818      	ldrb	r0, [r3, #0]
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	7af9      	ldrb	r1, [r7, #11]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	47a0      	blx	r4
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 80052ee:	2301      	movs	r3, #1
 80052f0:	e010      	b.n	8005314 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 80052f2:	2300      	movs	r3, #0
 80052f4:	e00e      	b.n	8005314 <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	7afa      	ldrb	r2, [r7, #11]
 80052fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005300:	b2d0      	uxtb	r0, r2
 8005302:	893a      	ldrh	r2, [r7, #8]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4798      	blx	r3
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8005312:	2300      	movs	r3, #0
        }
    }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}

0800531c <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4798      	blx	r3
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 800533a:	2301      	movs	r3, #1
 800533c:	e00a      	b.n	8005354 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 800533e:	2300      	movs	r3, #0
 8005340:	e008      	b.n	8005354 <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	4798      	blx	r3
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8005352:	2300      	movs	r3, #0
        }
    }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 800536e:	2302      	movs	r3, #2
 8005370:	e004      	b.n	800537c <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800539a:	2302      	movs	r3, #2
 800539c:	e003      	b.n	80053a6 <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0fb      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 80053ce:	2303      	movs	r3, #3
 80053d0:	e0f5      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053de:	487a      	ldr	r0, [pc, #488]	@ (80055c8 <mpu6500_init+0x214>)
 80053e0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0eb      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	4876      	ldr	r0, [pc, #472]	@ (80055cc <mpu6500_init+0x218>)
 80053f4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0e1      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	4872      	ldr	r0, [pc, #456]	@ (80055d0 <mpu6500_init+0x21c>)
 8005408:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800540a:	2303      	movs	r3, #3
 800540c:	e0d7      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d105      	bne.n	8005422 <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	486e      	ldr	r0, [pc, #440]	@ (80055d4 <mpu6500_init+0x220>)
 800541c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800541e:	2303      	movs	r3, #3
 8005420:	e0cd      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542e:	486a      	ldr	r0, [pc, #424]	@ (80055d8 <mpu6500_init+0x224>)
 8005430:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005432:	2303      	movs	r3, #3
 8005434:	e0c3      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d105      	bne.n	800544a <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	4866      	ldr	r0, [pc, #408]	@ (80055dc <mpu6500_init+0x228>)
 8005444:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005446:	2303      	movs	r3, #3
 8005448:	e0b9      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d105      	bne.n	800545e <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	4862      	ldr	r0, [pc, #392]	@ (80055e0 <mpu6500_init+0x22c>)
 8005458:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800545a:	2303      	movs	r3, #3
 800545c:	e0af      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	485e      	ldr	r0, [pc, #376]	@ (80055e4 <mpu6500_init+0x230>)
 800546c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800546e:	2303      	movs	r3, #3
 8005470:	e0a5      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	485a      	ldr	r0, [pc, #360]	@ (80055e8 <mpu6500_init+0x234>)
 8005480:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005482:	2303      	movs	r3, #3
 8005484:	e09b      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	4856      	ldr	r0, [pc, #344]	@ (80055ec <mpu6500_init+0x238>)
 8005494:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005496:	2303      	movs	r3, #3
 8005498:	e091      	b.n	80055be <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4798      	blx	r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b8:	484d      	ldr	r0, [pc, #308]	@ (80055f0 <mpu6500_init+0x23c>)
 80054ba:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80054bc:	2301      	movs	r3, #1
 80054be:	e07e      	b.n	80055be <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	4798      	blx	r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	4847      	ldr	r0, [pc, #284]	@ (80055f4 <mpu6500_init+0x240>)
 80054d6:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80054d8:	2301      	movs	r3, #1
 80054da:	e070      	b.n	80055be <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 80054dc:	f107 020a 	add.w	r2, r7, #10
 80054e0:	2301      	movs	r3, #1
 80054e2:	2175      	movs	r1, #117	@ 0x75
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff feb7 	bl	8005258 <a_mpu6500_read>
 80054ea:	4603      	mov	r3, r0
 80054ec:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 80054ee:	7afb      	ldrb	r3, [r7, #11]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	483f      	ldr	r0, [pc, #252]	@ (80055f8 <mpu6500_init+0x244>)
 80054fa:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff0d 	bl	800531c <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 8005502:	2305      	movs	r3, #5
 8005504:	e05b      	b.n	80055be <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 8005506:	7abb      	ldrb	r3, [r7, #10]
 8005508:	2b70      	cmp	r3, #112	@ 0x70
 800550a:	d008      	beq.n	800551e <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	483a      	ldr	r0, [pc, #232]	@ (80055fc <mpu6500_init+0x248>)
 8005512:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff ff01 	bl	800531c <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 800551a:	2305      	movs	r3, #5
 800551c:	e04f      	b.n	80055be <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 800551e:	2380      	movs	r3, #128	@ 0x80
 8005520:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 8005522:	f107 020a 	add.w	r2, r7, #10
 8005526:	2301      	movs	r3, #1
 8005528:	216b      	movs	r1, #107	@ 0x6b
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff fec5 	bl	80052ba <a_mpu6500_write>
 8005530:	4603      	mov	r3, r0
 8005532:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553e:	4830      	ldr	r0, [pc, #192]	@ (8005600 <mpu6500_init+0x24c>)
 8005540:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff feea 	bl	800531c <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 8005548:	2304      	movs	r3, #4
 800554a:	e038      	b.n	80055be <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	200a      	movs	r0, #10
 8005552:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8005554:	2364      	movs	r3, #100	@ 0x64
 8005556:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005558:	e029      	b.n	80055ae <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 800555a:	f107 020a 	add.w	r2, r7, #10
 800555e:	2301      	movs	r3, #1
 8005560:	216b      	movs	r1, #107	@ 0x6b
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fe78 	bl	8005258 <a_mpu6500_read>
 8005568:	4603      	mov	r3, r0
 800556a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800556c:	7afb      	ldrb	r3, [r7, #11]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	4823      	ldr	r0, [pc, #140]	@ (8005604 <mpu6500_init+0x250>)
 8005578:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fece 	bl	800531c <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 8005580:	2304      	movs	r3, #4
 8005582:	e01c      	b.n	80055be <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8005584:	7abb      	ldrb	r3, [r7, #10]
 8005586:	b25b      	sxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	db09      	blt.n	80055a0 <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 800559c:	2300      	movs	r3, #0
 800559e:	e00e      	b.n	80055be <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	200a      	movs	r0, #10
 80055a6:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1d2      	bne.n	800555a <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	4813      	ldr	r0, [pc, #76]	@ (8005608 <mpu6500_init+0x254>)
 80055ba:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 80055bc:	2304      	movs	r3, #4
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	0801ee7c 	.word	0x0801ee7c
 80055cc:	0801ee98 	.word	0x0801ee98
 80055d0:	0801eeb8 	.word	0x0801eeb8
 80055d4:	0801eed4 	.word	0x0801eed4
 80055d8:	0801eef4 	.word	0x0801eef4
 80055dc:	0801ef10 	.word	0x0801ef10
 80055e0:	0801ef30 	.word	0x0801ef30
 80055e4:	0801ef4c 	.word	0x0801ef4c
 80055e8:	0801ef6c 	.word	0x0801ef6c
 80055ec:	0801ef88 	.word	0x0801ef88
 80055f0:	0801efac 	.word	0x0801efac
 80055f4:	0801efc8 	.word	0x0801efc8
 80055f8:	0801efe4 	.word	0x0801efe4
 80055fc:	0801f004 	.word	0x0801f004
 8005600:	0801f020 	.word	0x0801f020
 8005604:	0801f044 	.word	0x0801f044
 8005608:	0801f068 	.word	0x0801f068

0800560c <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 800561a:	2302      	movs	r3, #2
 800561c:	e031      	b.n	8005682 <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8005628:	2303      	movs	r3, #3
 800562a:	e02a      	b.n	8005682 <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 800562c:	234f      	movs	r3, #79	@ 0x4f
 800562e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8005630:	f107 020e 	add.w	r2, r7, #14
 8005634:	2301      	movs	r3, #1
 8005636:	216b      	movs	r1, #107	@ 0x6b
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fe3e 	bl	80052ba <a_mpu6500_write>
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564c:	480f      	ldr	r0, [pc, #60]	@ (800568c <mpu6500_deinit+0x80>)
 800564e:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 8005650:	2304      	movs	r3, #4
 8005652:	e016      	b.n	8005682 <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff fe61 	bl	800531c <a_mpu6500_deinit>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	4809      	ldr	r0, [pc, #36]	@ (8005690 <mpu6500_deinit+0x84>)
 800566a:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 800566c:	2301      	movs	r3, #1
 800566e:	e008      	b.n	8005682 <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	0801f020 	.word	0x0801f020
 8005690:	0801f080 	.word	0x0801f080

08005694 <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 80056a8:	2302      	movs	r3, #2
 80056aa:	f000 be88 	b.w	80063be <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d002      	beq.n	80056be <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 80056b8:	2303      	movs	r3, #3
 80056ba:	f000 be80 	b.w	80063be <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ca:	486a      	ldr	r0, [pc, #424]	@ (8005874 <mpu6500_read+0x1e0>)
 80056cc:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 80056ce:	2304      	movs	r3, #4
 80056d0:	f000 be75 	b.w	80063be <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	4865      	ldr	r0, [pc, #404]	@ (8005878 <mpu6500_read+0x1e4>)
 80056e4:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 80056e6:	2305      	movs	r3, #5
 80056e8:	f000 be69 	b.w	80063be <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 80056ec:	f107 0219 	add.w	r2, r7, #25
 80056f0:	2301      	movs	r3, #1
 80056f2:	216a      	movs	r1, #106	@ 0x6a
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff fdaf 	bl	8005258 <a_mpu6500_read>
 80056fa:	4603      	mov	r3, r0
 80056fc:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80056fe:	7f7b      	ldrb	r3, [r7, #29]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	485c      	ldr	r0, [pc, #368]	@ (800587c <mpu6500_read+0x1e8>)
 800570a:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 800570c:	2301      	movs	r3, #1
 800570e:	f000 be56 	b.w	80063be <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 8005712:	f107 0218 	add.w	r2, r7, #24
 8005716:	2301      	movs	r3, #1
 8005718:	211c      	movs	r1, #28
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fd9c 	bl	8005258 <a_mpu6500_read>
 8005720:	4603      	mov	r3, r0
 8005722:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8005724:	7f7b      	ldrb	r3, [r7, #29]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	4854      	ldr	r0, [pc, #336]	@ (8005880 <mpu6500_read+0x1ec>)
 8005730:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8005732:	2301      	movs	r3, #1
 8005734:	f000 be43 	b.w	80063be <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8005738:	f107 0217 	add.w	r2, r7, #23
 800573c:	2301      	movs	r3, #1
 800573e:	211b      	movs	r1, #27
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff fd89 	bl	8005258 <a_mpu6500_read>
 8005746:	4603      	mov	r3, r0
 8005748:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800574a:	7f7b      	ldrb	r3, [r7, #29]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	484b      	ldr	r0, [pc, #300]	@ (8005884 <mpu6500_read+0x1f0>)
 8005756:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8005758:	2301      	movs	r3, #1
 800575a:	f000 be30 	b.w	80063be <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 800575e:	7e3b      	ldrb	r3, [r7, #24]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	08db      	lsrs	r3, r3, #3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 800577a:	7e7b      	ldrb	r3, [r7, #25]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8436 	beq.w	8005ff2 <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8005786:	f107 0216 	add.w	r2, r7, #22
 800578a:	2301      	movs	r3, #1
 800578c:	2123      	movs	r1, #35	@ 0x23
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fd62 	bl	8005258 <a_mpu6500_read>
 8005794:	4603      	mov	r3, r0
 8005796:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8005798:	7f7b      	ldrb	r3, [r7, #29]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	4839      	ldr	r0, [pc, #228]	@ (8005888 <mpu6500_read+0x1f4>)
 80057a4:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80057a6:	2301      	movs	r3, #1
 80057a8:	f000 be09 	b.w	80063be <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 80057ac:	7dbb      	ldrb	r3, [r7, #22]
 80057ae:	2b78      	cmp	r3, #120	@ 0x78
 80057b0:	d006      	beq.n	80057c0 <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	4835      	ldr	r0, [pc, #212]	@ (800588c <mpu6500_read+0x1f8>)
 80057b8:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 80057ba:	2306      	movs	r3, #6
 80057bc:	f000 bdff 	b.w	80063be <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 80057c0:	f107 0214 	add.w	r2, r7, #20
 80057c4:	2302      	movs	r3, #2
 80057c6:	2172      	movs	r1, #114	@ 0x72
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff fd45 	bl	8005258 <a_mpu6500_read>
 80057ce:	4603      	mov	r3, r0
 80057d0:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80057d2:	7f7b      	ldrb	r3, [r7, #29]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	482c      	ldr	r0, [pc, #176]	@ (8005890 <mpu6500_read+0x1fc>)
 80057de:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80057e0:	2301      	movs	r3, #1
 80057e2:	f000 bdec 	b.w	80063be <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 80057e6:	7d3b      	ldrb	r3, [r7, #20]
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	b21a      	sxth	r2, r3
 80057ee:	7d7b      	ldrb	r3, [r7, #21]
 80057f0:	b21b      	sxth	r3, r3
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 80057f8:	8b7b      	ldrh	r3, [r7, #26]
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fe:	bf28      	it	cs
 8005800:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005804:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	461a      	mov	r2, r3
 8005816:	8b7b      	ldrh	r3, [r7, #26]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfa8      	it	ge
 800581c:	4613      	movge	r3, r2
 800581e:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 8005820:	8b7b      	ldrh	r3, [r7, #26]
 8005822:	4a1c      	ldr	r2, [pc, #112]	@ (8005894 <mpu6500_read+0x200>)
 8005824:	fba2 2303 	umull	r2, r3, r2, r3
 8005828:	08db      	lsrs	r3, r3, #3
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	0052      	lsls	r2, r2, #1
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8005836:	8b7b      	ldrh	r3, [r7, #26]
 8005838:	4a16      	ldr	r2, [pc, #88]	@ (8005894 <mpu6500_read+0x200>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	b29a      	uxth	r2, r3
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800584c:	8b7b      	ldrh	r3, [r7, #26]
 800584e:	2174      	movs	r1, #116	@ 0x74
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff fd01 	bl	8005258 <a_mpu6500_read>
 8005856:	4603      	mov	r3, r0
 8005858:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800585a:	7f7b      	ldrb	r3, [r7, #29]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d006      	beq.n	800586e <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	480c      	ldr	r0, [pc, #48]	@ (8005898 <mpu6500_read+0x204>)
 8005866:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8005868:	2301      	movs	r3, #1
 800586a:	f000 bda8 	b.w	80063be <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 800586e:	2300      	movs	r3, #0
 8005870:	83fb      	strh	r3, [r7, #30]
 8005872:	e3b6      	b.n	8005fe2 <mpu6500_read+0x94e>
 8005874:	0801f09c 	.word	0x0801f09c
 8005878:	0801eb6c 	.word	0x0801eb6c
 800587c:	0801ee34 	.word	0x0801ee34
 8005880:	0801edec 	.word	0x0801edec
 8005884:	0801ee10 	.word	0x0801ee10
 8005888:	0801f0b8 	.word	0x0801f0b8
 800588c:	0801f0dc 	.word	0x0801f0dc
 8005890:	0801ed70 	.word	0x0801ed70
 8005894:	aaaaaaab 	.word	0xaaaaaaab
 8005898:	0801ed94 	.word	0x0801ed94
 800589c:	46800000 	.word	0x46800000
 80058a0:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 80058a4:	8bfa      	ldrh	r2, [r7, #30]
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058b8:	b21b      	sxth	r3, r3
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 80058be:	8bfa      	ldrh	r2, [r7, #30]
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	3301      	adds	r3, #1
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d2:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 80058d4:	8bfa      	ldrh	r2, [r7, #30]
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	ea40 0201 	orr.w	r2, r0, r1
 80058e8:	b212      	sxth	r2, r2
 80058ea:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 80058ec:	8bfa      	ldrh	r2, [r7, #30]
 80058ee:	4613      	mov	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005900:	b21b      	sxth	r3, r3
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8005906:	8bfa      	ldrh	r2, [r7, #30]
 8005908:	4613      	mov	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	3303      	adds	r3, #3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800591a:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 800591c:	8bfa      	ldrh	r2, [r7, #30]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4413      	add	r3, r2
 800592c:	ea40 0201 	orr.w	r2, r0, r1
 8005930:	b212      	sxth	r2, r2
 8005932:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8005934:	8bfa      	ldrh	r2, [r7, #30]
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	3304      	adds	r3, #4
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005948:	b21b      	sxth	r3, r3
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 800594e:	8bfa      	ldrh	r2, [r7, #30]
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	3305      	adds	r3, #5
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005962:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8005964:	8bfa      	ldrh	r2, [r7, #30]
 8005966:	4613      	mov	r3, r2
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4413      	add	r3, r2
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	461a      	mov	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4413      	add	r3, r2
 8005974:	ea40 0201 	orr.w	r2, r0, r1
 8005978:	b212      	sxth	r2, r2
 800597a:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 800597c:	8bfa      	ldrh	r2, [r7, #30]
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	3306      	adds	r3, #6
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005990:	b21b      	sxth	r3, r3
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8005996:	8bfa      	ldrh	r2, [r7, #30]
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	3307      	adds	r3, #7
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059aa:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 80059ac:	8bfa      	ldrh	r2, [r7, #30]
 80059ae:	4613      	mov	r3, r2
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	4413      	add	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	461a      	mov	r2, r3
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4413      	add	r3, r2
 80059bc:	ea40 0201 	orr.w	r2, r0, r1
 80059c0:	b212      	sxth	r2, r2
 80059c2:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 80059c4:	8bfa      	ldrh	r2, [r7, #30]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	3308      	adds	r3, #8
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059d8:	b21b      	sxth	r3, r3
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 80059de:	8bfa      	ldrh	r2, [r7, #30]
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	3309      	adds	r3, #9
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f2:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 80059f4:	8bfa      	ldrh	r2, [r7, #30]
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	461a      	mov	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	ea40 0201 	orr.w	r2, r0, r1
 8005a08:	b212      	sxth	r2, r2
 8005a0a:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005a0c:	8bfa      	ldrh	r2, [r7, #30]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	330a      	adds	r3, #10
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a20:	b21b      	sxth	r3, r3
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8005a26:	8bfa      	ldrh	r2, [r7, #30]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	330b      	adds	r3, #11
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a3a:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005a3c:	8bfa      	ldrh	r2, [r7, #30]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	461a      	mov	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	ea40 0201 	orr.w	r2, r0, r1
 8005a50:	b212      	sxth	r2, r2
 8005a52:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 8005a54:	7e3b      	ldrb	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d154      	bne.n	8005b04 <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8005a5a:	8bfa      	ldrh	r2, [r7, #30]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	461a      	mov	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a76:	8bfa      	ldrh	r2, [r7, #30]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	461a      	mov	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 800589c <mpu6500_read+0x208>
 8005a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a8e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8005a92:	8bfa      	ldrh	r2, [r7, #30]
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aae:	8bfa      	ldrh	r2, [r7, #30]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 800589c <mpu6500_read+0x208>
 8005ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ac6:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8005aca:	8bfa      	ldrh	r2, [r7, #30]
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ae6:	8bfa      	ldrh	r2, [r7, #30]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	461a      	mov	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4413      	add	r3, r2
 8005af6:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 800589c <mpu6500_read+0x208>
 8005afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005afe:	edc3 7a02 	vstr	s15, [r3, #8]
 8005b02:	e103      	b.n	8005d0c <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8005b04:	7e3b      	ldrb	r3, [r7, #24]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d154      	bne.n	8005bb4 <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8005b0a:	8bfa      	ldrh	r2, [r7, #30]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b26:	8bfa      	ldrh	r2, [r7, #30]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 80058a0 <mpu6500_read+0x20c>
 8005b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b3e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8005b42:	8bfa      	ldrh	r2, [r7, #30]
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4413      	add	r3, r2
 8005b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b5e:	8bfa      	ldrh	r2, [r7, #30]
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 80058a0 <mpu6500_read+0x20c>
 8005b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b76:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8005b7a:	8bfa      	ldrh	r2, [r7, #30]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	4413      	add	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b96:	8bfa      	ldrh	r2, [r7, #30]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 80058a0 <mpu6500_read+0x20c>
 8005baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bae:	edc3 7a02 	vstr	s15, [r3, #8]
 8005bb2:	e0ab      	b.n	8005d0c <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8005bb4:	7e3b      	ldrb	r3, [r7, #24]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d154      	bne.n	8005c64 <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8005bba:	8bfa      	ldrh	r2, [r7, #30]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bd6:	8bfa      	ldrh	r2, [r7, #30]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8005f1c <mpu6500_read+0x888>
 8005bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bee:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8005bf2:	8bfa      	ldrh	r2, [r7, #30]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4413      	add	r3, r2
 8005c02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c0e:	8bfa      	ldrh	r2, [r7, #30]
 8005c10:	4613      	mov	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8005f1c <mpu6500_read+0x888>
 8005c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c26:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8005c2a:	8bfa      	ldrh	r2, [r7, #30]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4413      	add	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	461a      	mov	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c46:	8bfa      	ldrh	r2, [r7, #30]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8005f1c <mpu6500_read+0x888>
 8005c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c5e:	edc3 7a02 	vstr	s15, [r3, #8]
 8005c62:	e053      	b.n	8005d0c <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8005c64:	8bfa      	ldrh	r2, [r7, #30]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4413      	add	r3, r2
 8005c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c80:	8bfa      	ldrh	r2, [r7, #30]
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4413      	add	r3, r2
 8005c90:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8005f20 <mpu6500_read+0x88c>
 8005c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c98:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8005c9c:	8bfa      	ldrh	r2, [r7, #30]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4413      	add	r3, r2
 8005cac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb8:	8bfa      	ldrh	r2, [r7, #30]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8005f20 <mpu6500_read+0x88c>
 8005ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cd0:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8005cd4:	8bfa      	ldrh	r2, [r7, #30]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	461a      	mov	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf0:	8bfa      	ldrh	r2, [r7, #30]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4413      	add	r3, r2
 8005d00:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005f20 <mpu6500_read+0x88c>
 8005d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d08:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d154      	bne.n	8005dbc <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8005d12:	8bfa      	ldrh	r2, [r7, #30]
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	4413      	add	r3, r2
 8005d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d2e:	8bfa      	ldrh	r2, [r7, #30]
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	4413      	add	r3, r2
 8005d3e:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8005f24 <mpu6500_read+0x890>
 8005d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d46:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8005d4a:	8bfa      	ldrh	r2, [r7, #30]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	461a      	mov	r2, r3
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d66:	8bfa      	ldrh	r2, [r7, #30]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	461a      	mov	r2, r3
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	4413      	add	r3, r2
 8005d76:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005f24 <mpu6500_read+0x890>
 8005d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d7e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8005d82:	8bfa      	ldrh	r2, [r7, #30]
 8005d84:	4613      	mov	r3, r2
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	4413      	add	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d9e:	8bfa      	ldrh	r2, [r7, #30]
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	461a      	mov	r2, r3
 8005daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dac:	4413      	add	r3, r2
 8005dae:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005f24 <mpu6500_read+0x890>
 8005db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005db6:	edc3 7a02 	vstr	s15, [r3, #8]
 8005dba:	e10f      	b.n	8005fdc <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d154      	bne.n	8005e6c <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8005dc2:	8bfa      	ldrh	r2, [r7, #30]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	461a      	mov	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dde:	8bfa      	ldrh	r2, [r7, #30]
 8005de0:	4613      	mov	r3, r2
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	461a      	mov	r2, r3
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	4413      	add	r3, r2
 8005dee:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005f28 <mpu6500_read+0x894>
 8005df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005df6:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8005dfa:	8bfa      	ldrh	r2, [r7, #30]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	4413      	add	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	461a      	mov	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e16:	8bfa      	ldrh	r2, [r7, #30]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	461a      	mov	r2, r3
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	4413      	add	r3, r2
 8005e26:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005f28 <mpu6500_read+0x894>
 8005e2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e2e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8005e32:	8bfa      	ldrh	r2, [r7, #30]
 8005e34:	4613      	mov	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	4413      	add	r3, r2
 8005e42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e4e:	8bfa      	ldrh	r2, [r7, #30]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	4413      	add	r3, r2
 8005e5e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005f28 <mpu6500_read+0x894>
 8005e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e66:	edc3 7a02 	vstr	s15, [r3, #8]
 8005e6a:	e0b7      	b.n	8005fdc <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d160      	bne.n	8005f34 <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8005e72:	8bfa      	ldrh	r2, [r7, #30]
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8e:	8bfa      	ldrh	r2, [r7, #30]
 8005e90:	4613      	mov	r3, r2
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	4413      	add	r3, r2
 8005e9e:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8005f2c <mpu6500_read+0x898>
 8005ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ea6:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8005eaa:	8bfa      	ldrh	r2, [r7, #30]
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ec6:	8bfa      	ldrh	r2, [r7, #30]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	4413      	add	r3, r2
 8005ed6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8005f2c <mpu6500_read+0x898>
 8005eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ede:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8005ee2:	8bfa      	ldrh	r2, [r7, #30]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	461a      	mov	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005efe:	8bfa      	ldrh	r2, [r7, #30]
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	4413      	add	r3, r2
 8005f0e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005f2c <mpu6500_read+0x898>
 8005f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f16:	edc3 7a02 	vstr	s15, [r3, #8]
 8005f1a:	e05f      	b.n	8005fdc <mpu6500_read+0x948>
 8005f1c:	45800000 	.word	0x45800000
 8005f20:	45000000 	.word	0x45000000
 8005f24:	43030000 	.word	0x43030000
 8005f28:	42830000 	.word	0x42830000
 8005f2c:	42033333 	.word	0x42033333
 8005f30:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8005f34:	8bfa      	ldrh	r2, [r7, #30]
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	461a      	mov	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	4413      	add	r3, r2
 8005f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f50:	8bfa      	ldrh	r2, [r7, #30]
 8005f52:	4613      	mov	r3, r2
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	4413      	add	r3, r2
 8005f60:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 8005f30 <mpu6500_read+0x89c>
 8005f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f68:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8005f6c:	8bfa      	ldrh	r2, [r7, #30]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	461a      	mov	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f88:	8bfa      	ldrh	r2, [r7, #30]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	461a      	mov	r2, r3
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	4413      	add	r3, r2
 8005f98:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8005f30 <mpu6500_read+0x89c>
 8005f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fa0:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 8005fa4:	8bfa      	ldrh	r2, [r7, #30]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4413      	add	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	461a      	mov	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fc0:	8bfa      	ldrh	r2, [r7, #30]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	4413      	add	r3, r2
 8005fd0:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8005f30 <mpu6500_read+0x89c>
 8005fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fd8:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8005fdc:	8bfb      	ldrh	r3, [r7, #30]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	83fb      	strh	r3, [r7, #30]
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	8bfa      	ldrh	r2, [r7, #30]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	f4ff ac5b 	bcc.w	80058a4 <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e1e5      	b.n	80063be <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005ffe:	230e      	movs	r3, #14
 8006000:	213b      	movs	r1, #59	@ 0x3b
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff f928 	bl	8005258 <a_mpu6500_read>
 8006008:	4603      	mov	r3, r0
 800600a:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800600c:	7f7b      	ldrb	r3, [r7, #29]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	48b4      	ldr	r0, [pc, #720]	@ (80062e8 <mpu6500_read+0xc54>)
 8006018:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 800601a:	2301      	movs	r3, #1
 800601c:	e1cf      	b.n	80063be <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006024:	b21b      	sxth	r3, r3
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	b21a      	sxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006030:	b21b      	sxth	r3, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	b21a      	sxth	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006040:	b21b      	sxth	r3, r3
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	b21a      	sxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800604c:	b21b      	sxth	r3, r3
 800604e:	4313      	orrs	r3, r2
 8006050:	b21a      	sxth	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800605c:	b21b      	sxth	r3, r3
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	b21a      	sxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006068:	b21b      	sxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b21a      	sxth	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006078:	b21b      	sxth	r3, r3
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	b21a      	sxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006084:	b21b      	sxth	r3, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	b21a      	sxth	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006094:	b21b      	sxth	r3, r3
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	b21a      	sxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80060a0:	b21b      	sxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b21a      	sxth	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	b21a      	sxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80060bc:	b21b      	sxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b21a      	sxth	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 80060c6:	7e3b      	ldrb	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d12a      	bne.n	8006122 <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060da:	eddf 6a84 	vldr	s13, [pc, #528]	@ 80062ec <mpu6500_read+0xc58>
 80060de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060f6:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80062ec <mpu6500_read+0xc58>
 80060fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006112:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80062ec <mpu6500_read+0xc58>
 8006116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006120:	e085      	b.n	800622e <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8006122:	7e3b      	ldrb	r3, [r7, #24]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d12a      	bne.n	800617e <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006136:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80062f0 <mpu6500_read+0xc5c>
 800613a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006152:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80062f0 <mpu6500_read+0xc5c>
 8006156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800616e:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80062f0 <mpu6500_read+0xc5c>
 8006172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	edc3 7a02 	vstr	s15, [r3, #8]
 800617c:	e057      	b.n	800622e <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 800617e:	7e3b      	ldrb	r3, [r7, #24]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d12a      	bne.n	80061da <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006192:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80062f4 <mpu6500_read+0xc60>
 8006196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ae:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80062f4 <mpu6500_read+0xc60>
 80061b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ca:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80062f4 <mpu6500_read+0xc60>
 80061ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	edc3 7a02 	vstr	s15, [r3, #8]
 80061d8:	e029      	b.n	800622e <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061e8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80062f8 <mpu6500_read+0xc64>
 80061ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006204:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80062f8 <mpu6500_read+0xc64>
 8006208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006220:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80062f8 <mpu6500_read+0xc64>
 8006224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d12a      	bne.n	800628a <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006242:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80062fc <mpu6500_read+0xc68>
 8006246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800624a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624c:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800625e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80062fc <mpu6500_read+0xc68>
 8006262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800627a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80062fc <mpu6500_read+0xc68>
 800627e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	edc3 7a02 	vstr	s15, [r3, #8]
 8006288:	e098      	b.n	80063bc <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 800628a:	7dfb      	ldrb	r3, [r7, #23]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d13d      	bne.n	800630c <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800629e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8006300 <mpu6500_read+0xc6c>
 80062a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ba:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8006300 <mpu6500_read+0xc6c>
 80062be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062d6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8006300 <mpu6500_read+0xc6c>
 80062da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80062e4:	e06a      	b.n	80063bc <mpu6500_read+0xd28>
 80062e6:	bf00      	nop
 80062e8:	0801ed94 	.word	0x0801ed94
 80062ec:	46800000 	.word	0x46800000
 80062f0:	46000000 	.word	0x46000000
 80062f4:	45800000 	.word	0x45800000
 80062f8:	45000000 	.word	0x45000000
 80062fc:	43030000 	.word	0x43030000
 8006300:	42830000 	.word	0x42830000
 8006304:	42033333 	.word	0x42033333
 8006308:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d12a      	bne.n	8006368 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006320:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8006304 <mpu6500_read+0xc70>
 8006324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800633c:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8006304 <mpu6500_read+0xc70>
 8006340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006358:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 8006304 <mpu6500_read+0xc70>
 800635c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	edc3 7a02 	vstr	s15, [r3, #8]
 8006366:	e029      	b.n	80063bc <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006376:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8006308 <mpu6500_read+0xc74>
 800637a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006392:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8006308 <mpu6500_read+0xc74>
 8006396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ae:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 8006308 <mpu6500_read+0xc74>
 80063b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 80063bc:	2300      	movs	r3, #0
    }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop

080063c8 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 80063da:	2302      	movs	r3, #2
 80063dc:	e03a      	b.n	8006454 <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d001      	beq.n	80063ec <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 80063e8:	2303      	movs	r3, #3
 80063ea:	e033      	b.n	8006454 <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80063ec:	f107 020e 	add.w	r2, r7, #14
 80063f0:	2301      	movs	r3, #1
 80063f2:	216a      	movs	r1, #106	@ 0x6a
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fe ff2f 	bl	8005258 <a_mpu6500_read>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	4814      	ldr	r0, [pc, #80]	@ (800645c <mpu6500_set_fifo+0x94>)
 800640a:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 800640c:	2301      	movs	r3, #1
 800640e:	e021      	b.n	8006454 <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006416:	b2db      	uxtb	r3, r3
 8006418:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 800641a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800641e:	019b      	lsls	r3, r3, #6
 8006420:	b25a      	sxtb	r2, r3
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	b25b      	sxtb	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b25b      	sxtb	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800642e:	f107 020e 	add.w	r2, r7, #14
 8006432:	2301      	movs	r3, #1
 8006434:	216a      	movs	r1, #106	@ 0x6a
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fe ff3f 	bl	80052ba <a_mpu6500_write>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644a:	4805      	ldr	r0, [pc, #20]	@ (8006460 <mpu6500_set_fifo+0x98>)
 800644c:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	0801ee34 	.word	0x0801ee34
 8006460:	0801ee58 	.word	0x0801ee58

08006464 <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8006476:	2302      	movs	r3, #2
 8006478:	e03a      	b.n	80064f0 <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006480:	2b01      	cmp	r3, #1
 8006482:	d001      	beq.n	8006488 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8006484:	2303      	movs	r3, #3
 8006486:	e033      	b.n	80064f0 <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006488:	f107 020e 	add.w	r2, r7, #14
 800648c:	2301      	movs	r3, #1
 800648e:	216a      	movs	r1, #106	@ 0x6a
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fe fee1 	bl	8005258 <a_mpu6500_read>
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	4814      	ldr	r0, [pc, #80]	@ (80064f8 <mpu6500_set_iic_master+0x94>)
 80064a6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80064a8:	2301      	movs	r3, #1
 80064aa:	e021      	b.n	80064f0 <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	f023 0320 	bic.w	r3, r3, #32
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 80064b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ba:	015b      	lsls	r3, r3, #5
 80064bc:	b25a      	sxtb	r2, r3
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80064ca:	f107 020e 	add.w	r2, r7, #14
 80064ce:	2301      	movs	r3, #1
 80064d0:	216a      	movs	r1, #106	@ 0x6a
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fe fef1 	bl	80052ba <a_mpu6500_write>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	4805      	ldr	r0, [pc, #20]	@ (80064fc <mpu6500_set_iic_master+0x98>)
 80064e8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	0801ee34 	.word	0x0801ee34
 80064fc:	0801ee58 	.word	0x0801ee58

08006500 <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 8006512:	2302      	movs	r3, #2
 8006514:	e03a      	b.n	800658c <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800651c:	2b01      	cmp	r3, #1
 800651e:	d001      	beq.n	8006524 <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 8006520:	2303      	movs	r3, #3
 8006522:	e033      	b.n	800658c <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006524:	f107 020e 	add.w	r2, r7, #14
 8006528:	2301      	movs	r3, #1
 800652a:	216a      	movs	r1, #106	@ 0x6a
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fe fe93 	bl	8005258 <a_mpu6500_read>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	4814      	ldr	r0, [pc, #80]	@ (8006594 <mpu6500_set_disable_iic_slave+0x94>)
 8006542:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006544:	2301      	movs	r3, #1
 8006546:	e021      	b.n	800658c <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	b2db      	uxtb	r3, r3
 8006550:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8006552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	b25a      	sxtb	r2, r3
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	b25b      	sxtb	r3, r3
 800655e:	4313      	orrs	r3, r2
 8006560:	b25b      	sxtb	r3, r3
 8006562:	b2db      	uxtb	r3, r3
 8006564:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006566:	f107 020e 	add.w	r2, r7, #14
 800656a:	2301      	movs	r3, #1
 800656c:	216a      	movs	r1, #106	@ 0x6a
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fe fea3 	bl	80052ba <a_mpu6500_write>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	4805      	ldr	r0, [pc, #20]	@ (8006598 <mpu6500_set_disable_iic_slave+0x98>)
 8006584:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	0801ee34 	.word	0x0801ee34
 8006598:	0801ee58 	.word	0x0801ee58

0800659c <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 80065ae:	2302      	movs	r3, #2
 80065b0:	e035      	b.n	800661e <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d001      	beq.n	80065c0 <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 80065bc:	2303      	movs	r3, #3
 80065be:	e02e      	b.n	800661e <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80065c0:	f107 020e 	add.w	r2, r7, #14
 80065c4:	2301      	movs	r3, #1
 80065c6:	216b      	movs	r1, #107	@ 0x6b
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fe fe45 	bl	8005258 <a_mpu6500_read>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065dc:	4812      	ldr	r0, [pc, #72]	@ (8006628 <mpu6500_set_clock_source+0x8c>)
 80065de:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80065e0:	2301      	movs	r3, #1
 80065e2:	e01c      	b.n	800661e <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 80065ee:	7bba      	ldrb	r2, [r7, #14]
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80065f8:	f107 020e 	add.w	r2, r7, #14
 80065fc:	2301      	movs	r3, #1
 80065fe:	216b      	movs	r1, #107	@ 0x6b
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fe fe5a 	bl	80052ba <a_mpu6500_write>
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	4805      	ldr	r0, [pc, #20]	@ (800662c <mpu6500_set_clock_source+0x90>)
 8006616:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	0801f120 	.word	0x0801f120
 800662c:	0801f14c 	.word	0x0801f14c

08006630 <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8006642:	2302      	movs	r3, #2
 8006644:	e03c      	b.n	80066c0 <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800664c:	2b01      	cmp	r3, #1
 800664e:	d001      	beq.n	8006654 <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8006650:	2303      	movs	r3, #3
 8006652:	e035      	b.n	80066c0 <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006654:	f107 020e 	add.w	r2, r7, #14
 8006658:	2301      	movs	r3, #1
 800665a:	216b      	movs	r1, #107	@ 0x6b
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fe fdfb 	bl	8005258 <a_mpu6500_read>
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	4815      	ldr	r0, [pc, #84]	@ (80066c8 <mpu6500_set_ptat+0x98>)
 8006672:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006674:	2301      	movs	r3, #1
 8006676:	e023      	b.n	80066c0 <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	f023 0308 	bic.w	r3, r3, #8
 800667e:	b2db      	uxtb	r3, r3
 8006680:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <mpu6500_set_ptat+0x5c>
 8006688:	2208      	movs	r2, #8
 800668a:	e000      	b.n	800668e <mpu6500_set_ptat+0x5e>
 800668c:	2200      	movs	r2, #0
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	b25b      	sxtb	r3, r3
 8006692:	4313      	orrs	r3, r2
 8006694:	b25b      	sxtb	r3, r3
 8006696:	b2db      	uxtb	r3, r3
 8006698:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800669a:	f107 020e 	add.w	r2, r7, #14
 800669e:	2301      	movs	r3, #1
 80066a0:	216b      	movs	r1, #107	@ 0x6b
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fe fe09 	bl	80052ba <a_mpu6500_write>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	4805      	ldr	r0, [pc, #20]	@ (80066cc <mpu6500_set_ptat+0x9c>)
 80066b8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	0801f120 	.word	0x0801f120
 80066cc:	0801f14c 	.word	0x0801f14c

080066d0 <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 80066e2:	2302      	movs	r3, #2
 80066e4:	e03a      	b.n	800675c <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d001      	beq.n	80066f4 <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 80066f0:	2303      	movs	r3, #3
 80066f2:	e033      	b.n	800675c <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80066f4:	f107 020e 	add.w	r2, r7, #14
 80066f8:	2301      	movs	r3, #1
 80066fa:	216b      	movs	r1, #107	@ 0x6b
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7fe fdab 	bl	8005258 <a_mpu6500_read>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006710:	4814      	ldr	r0, [pc, #80]	@ (8006764 <mpu6500_set_cycle_wake_up+0x94>)
 8006712:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006714:	2301      	movs	r3, #1
 8006716:	e021      	b.n	800675c <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	f023 0320 	bic.w	r3, r3, #32
 800671e:	b2db      	uxtb	r3, r3
 8006720:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8006722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006726:	015b      	lsls	r3, r3, #5
 8006728:	b25a      	sxtb	r2, r3
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	b25b      	sxtb	r3, r3
 800672e:	4313      	orrs	r3, r2
 8006730:	b25b      	sxtb	r3, r3
 8006732:	b2db      	uxtb	r3, r3
 8006734:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006736:	f107 020e 	add.w	r2, r7, #14
 800673a:	2301      	movs	r3, #1
 800673c:	216b      	movs	r1, #107	@ 0x6b
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe fdbb 	bl	80052ba <a_mpu6500_write>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006752:	4805      	ldr	r0, [pc, #20]	@ (8006768 <mpu6500_set_cycle_wake_up+0x98>)
 8006754:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	0801f120 	.word	0x0801f120
 8006768:	0801f14c 	.word	0x0801f14c

0800676c <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 800677e:	2302      	movs	r3, #2
 8006780:	e03a      	b.n	80067f8 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 800678c:	2303      	movs	r3, #3
 800678e:	e033      	b.n	80067f8 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006790:	f107 020e 	add.w	r2, r7, #14
 8006794:	2301      	movs	r3, #1
 8006796:	216b      	movs	r1, #107	@ 0x6b
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fe fd5d 	bl	8005258 <a_mpu6500_read>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	4814      	ldr	r0, [pc, #80]	@ (8006800 <mpu6500_set_sleep+0x94>)
 80067ae:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067b0:	2301      	movs	r3, #1
 80067b2:	e021      	b.n	80067f8 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 80067be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067c2:	019b      	lsls	r3, r3, #6
 80067c4:	b25a      	sxtb	r2, r3
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	4313      	orrs	r3, r2
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80067d2:	f107 020e 	add.w	r2, r7, #14
 80067d6:	2301      	movs	r3, #1
 80067d8:	216b      	movs	r1, #107	@ 0x6b
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fe fd6d 	bl	80052ba <a_mpu6500_write>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	4805      	ldr	r0, [pc, #20]	@ (8006804 <mpu6500_set_sleep+0x98>)
 80067f0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	0801f120 	.word	0x0801f120
 8006804:	0801f14c 	.word	0x0801f14c

08006808 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 800681a:	2302      	movs	r3, #2
 800681c:	e03a      	b.n	8006894 <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006824:	2b01      	cmp	r3, #1
 8006826:	d001      	beq.n	800682c <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8006828:	2303      	movs	r3, #3
 800682a:	e033      	b.n	8006894 <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800682c:	f107 020e 	add.w	r2, r7, #14
 8006830:	2301      	movs	r3, #1
 8006832:	216b      	movs	r1, #107	@ 0x6b
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7fe fd0f 	bl	8005258 <a_mpu6500_read>
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	4814      	ldr	r0, [pc, #80]	@ (800689c <mpu6500_set_gyro_standby+0x94>)
 800684a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800684c:	2301      	movs	r3, #1
 800684e:	e021      	b.n	8006894 <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	f023 0310 	bic.w	r3, r3, #16
 8006856:	b2db      	uxtb	r3, r3
 8006858:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 800685a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	b25a      	sxtb	r2, r3
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	b25b      	sxtb	r3, r3
 8006866:	4313      	orrs	r3, r2
 8006868:	b25b      	sxtb	r3, r3
 800686a:	b2db      	uxtb	r3, r3
 800686c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800686e:	f107 020e 	add.w	r2, r7, #14
 8006872:	2301      	movs	r3, #1
 8006874:	216b      	movs	r1, #107	@ 0x6b
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe fd1f 	bl	80052ba <a_mpu6500_write>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	4805      	ldr	r0, [pc, #20]	@ (80068a0 <mpu6500_set_gyro_standby+0x98>)
 800688c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	0801f120 	.word	0x0801f120
 80068a0:	0801f14c 	.word	0x0801f14c

080068a4 <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
 80068b0:	4613      	mov	r3, r2
 80068b2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 80068ba:	2302      	movs	r3, #2
 80068bc:	e043      	b.n	8006946 <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d001      	beq.n	80068cc <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 80068c8:	2303      	movs	r3, #3
 80068ca:	e03c      	b.n	8006946 <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 80068cc:	f107 020e 	add.w	r2, r7, #14
 80068d0:	2301      	movs	r3, #1
 80068d2:	216c      	movs	r1, #108	@ 0x6c
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fe fcbf 	bl	8005258 <a_mpu6500_read>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	4819      	ldr	r0, [pc, #100]	@ (8006950 <mpu6500_set_standby_mode+0xac>)
 80068ea:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80068ec:	2301      	movs	r3, #1
 80068ee:	e02a      	b.n	8006946 <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2201      	movs	r2, #1
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	b25b      	sxtb	r3, r3
 80068fa:	43db      	mvns	r3, r3
 80068fc:	b25a      	sxtb	r2, r3
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	b25b      	sxtb	r3, r3
 8006902:	4013      	ands	r3, r2
 8006904:	b25b      	sxtb	r3, r3
 8006906:	b2db      	uxtb	r3, r3
 8006908:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 800690a:	78ba      	ldrb	r2, [r7, #2]
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	b25a      	sxtb	r2, r3
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	b25b      	sxtb	r3, r3
 8006918:	4313      	orrs	r3, r2
 800691a:	b25b      	sxtb	r3, r3
 800691c:	b2db      	uxtb	r3, r3
 800691e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8006920:	f107 020e 	add.w	r2, r7, #14
 8006924:	2301      	movs	r3, #1
 8006926:	216c      	movs	r1, #108	@ 0x6c
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fe fcc6 	bl	80052ba <a_mpu6500_write>
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	4805      	ldr	r0, [pc, #20]	@ (8006954 <mpu6500_set_standby_mode+0xb0>)
 800693e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	0801f178 	.word	0x0801f178
 8006954:	0801f1a4 	.word	0x0801f1a4

08006958 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 800696a:	2302      	movs	r3, #2
 800696c:	e018      	b.n	80069a0 <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006974:	2b01      	cmp	r3, #1
 8006976:	d001      	beq.n	800697c <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8006978:	2303      	movs	r3, #3
 800697a:	e011      	b.n	80069a0 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 800697c:	1cfa      	adds	r2, r7, #3
 800697e:	2301      	movs	r3, #1
 8006980:	2119      	movs	r1, #25
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fe fc99 	bl	80052ba <a_mpu6500_write>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	4804      	ldr	r0, [pc, #16]	@ (80069a8 <mpu6500_set_sample_rate_divider+0x50>)
 8006998:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	0801f264 	.word	0x0801f264

080069ac <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 80069be:	2302      	movs	r3, #2
 80069c0:	e03a      	b.n	8006a38 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d001      	beq.n	80069d0 <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 80069cc:	2303      	movs	r3, #3
 80069ce:	e033      	b.n	8006a38 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80069d0:	f107 020e 	add.w	r2, r7, #14
 80069d4:	2301      	movs	r3, #1
 80069d6:	211a      	movs	r1, #26
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fe fc3d 	bl	8005258 <a_mpu6500_read>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	4814      	ldr	r0, [pc, #80]	@ (8006a40 <mpu6500_set_extern_sync+0x94>)
 80069ee:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80069f0:	2301      	movs	r3, #1
 80069f2:	e021      	b.n	8006a38 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 80069fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	b25a      	sxtb	r2, r3
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	b25b      	sxtb	r3, r3
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006a12:	f107 020e 	add.w	r2, r7, #14
 8006a16:	2301      	movs	r3, #1
 8006a18:	211a      	movs	r1, #26
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fe fc4d 	bl	80052ba <a_mpu6500_write>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	4805      	ldr	r0, [pc, #20]	@ (8006a44 <mpu6500_set_extern_sync+0x98>)
 8006a30:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	0801f2ac 	.word	0x0801f2ac
 8006a44:	0801f2cc 	.word	0x0801f2cc

08006a48 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e035      	b.n	8006aca <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d001      	beq.n	8006a6c <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e02e      	b.n	8006aca <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006a6c:	f107 020e 	add.w	r2, r7, #14
 8006a70:	2301      	movs	r3, #1
 8006a72:	211a      	movs	r1, #26
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fe fbef 	bl	8005258 <a_mpu6500_read>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	4812      	ldr	r0, [pc, #72]	@ (8006ad4 <mpu6500_set_low_pass_filter+0x8c>)
 8006a8a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e01c      	b.n	8006aca <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	f023 0307 	bic.w	r3, r3, #7
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 8006a9a:	7bba      	ldrb	r2, [r7, #14]
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006aa4:	f107 020e 	add.w	r2, r7, #14
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	211a      	movs	r1, #26
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7fe fc04 	bl	80052ba <a_mpu6500_write>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	4805      	ldr	r0, [pc, #20]	@ (8006ad8 <mpu6500_set_low_pass_filter+0x90>)
 8006ac2:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	0801f2ac 	.word	0x0801f2ac
 8006ad8:	0801f2cc 	.word	0x0801f2cc

08006adc <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8006aee:	2302      	movs	r3, #2
 8006af0:	e03a      	b.n	8006b68 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d001      	beq.n	8006b00 <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8006afc:	2303      	movs	r3, #3
 8006afe:	e033      	b.n	8006b68 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006b00:	f107 020e 	add.w	r2, r7, #14
 8006b04:	2301      	movs	r3, #1
 8006b06:	211a      	movs	r1, #26
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7fe fba5 	bl	8005258 <a_mpu6500_read>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	4814      	ldr	r0, [pc, #80]	@ (8006b70 <mpu6500_set_fifo_mode+0x94>)
 8006b1e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b20:	2301      	movs	r3, #1
 8006b22:	e021      	b.n	8006b68 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8006b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b32:	019b      	lsls	r3, r3, #6
 8006b34:	b25a      	sxtb	r2, r3
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006b42:	f107 020e 	add.w	r2, r7, #14
 8006b46:	2301      	movs	r3, #1
 8006b48:	211a      	movs	r1, #26
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fe fbb5 	bl	80052ba <a_mpu6500_write>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5e:	4805      	ldr	r0, [pc, #20]	@ (8006b74 <mpu6500_set_fifo_mode+0x98>)
 8006b60:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	0801f2ac 	.word	0x0801f2ac
 8006b74:	0801f2cc 	.word	0x0801f2cc

08006b78 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
 8006b84:	4613      	mov	r3, r2
 8006b86:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e043      	b.n	8006c1a <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d001      	beq.n	8006ba0 <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e03c      	b.n	8006c1a <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006ba0:	f107 020e 	add.w	r2, r7, #14
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	211b      	movs	r1, #27
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fe fb55 	bl	8005258 <a_mpu6500_read>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	4819      	ldr	r0, [pc, #100]	@ (8006c24 <mpu6500_set_gyroscope_test+0xac>)
 8006bbe:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e02a      	b.n	8006c1a <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	b25a      	sxtb	r2, r3
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	b25b      	sxtb	r3, r3
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006bde:	78ba      	ldrb	r2, [r7, #2]
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	b25a      	sxtb	r2, r3
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b25b      	sxtb	r3, r3
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006bf4:	f107 020e 	add.w	r2, r7, #14
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	211b      	movs	r1, #27
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fe fb5c 	bl	80052ba <a_mpu6500_write>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	4805      	ldr	r0, [pc, #20]	@ (8006c28 <mpu6500_set_gyroscope_test+0xb0>)
 8006c12:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	0801f2ec 	.word	0x0801f2ec
 8006c28:	0801f314 	.word	0x0801f314

08006c2c <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e03a      	b.n	8006cb8 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d001      	beq.n	8006c50 <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e033      	b.n	8006cb8 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006c50:	f107 020e 	add.w	r2, r7, #14
 8006c54:	2301      	movs	r3, #1
 8006c56:	211b      	movs	r1, #27
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fe fafd 	bl	8005258 <a_mpu6500_read>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	4814      	ldr	r0, [pc, #80]	@ (8006cc0 <mpu6500_set_gyroscope_range+0x94>)
 8006c6e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006c70:	2301      	movs	r3, #1
 8006c72:	e021      	b.n	8006cb8 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	f023 0318 	bic.w	r3, r3, #24
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	b25a      	sxtb	r2, r3
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	b25b      	sxtb	r3, r3
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006c92:	f107 020e 	add.w	r2, r7, #14
 8006c96:	2301      	movs	r3, #1
 8006c98:	211b      	movs	r1, #27
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fe fb0d 	bl	80052ba <a_mpu6500_write>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	4805      	ldr	r0, [pc, #20]	@ (8006cc4 <mpu6500_set_gyroscope_range+0x98>)
 8006cb0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	0801f2ec 	.word	0x0801f2ec
 8006cc4:	0801f314 	.word	0x0801f314

08006cc8 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e03e      	b.n	8006d5c <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d001      	beq.n	8006cec <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e037      	b.n	8006d5c <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d905      	bls.n	8006cfe <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	481b      	ldr	r0, [pc, #108]	@ (8006d64 <mpu6500_set_gyroscope_choice+0x9c>)
 8006cf8:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	e02e      	b.n	8006d5c <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006cfe:	f107 020e 	add.w	r2, r7, #14
 8006d02:	2301      	movs	r3, #1
 8006d04:	211b      	movs	r1, #27
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fe faa6 	bl	8005258 <a_mpu6500_read>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	4813      	ldr	r0, [pc, #76]	@ (8006d68 <mpu6500_set_gyroscope_choice+0xa0>)
 8006d1c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e01c      	b.n	8006d5c <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 8006d2c:	7bba      	ldrb	r2, [r7, #14]
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006d36:	f107 020e 	add.w	r2, r7, #14
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	211b      	movs	r1, #27
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fe fabb 	bl	80052ba <a_mpu6500_write>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	4806      	ldr	r0, [pc, #24]	@ (8006d6c <mpu6500_set_gyroscope_choice+0xa4>)
 8006d54:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	0801f340 	.word	0x0801f340
 8006d68:	0801f2ec 	.word	0x0801f2ec
 8006d6c:	0801f314 	.word	0x0801f314

08006d70 <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006d86:	2302      	movs	r3, #2
 8006d88:	e043      	b.n	8006e12 <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006d94:	2303      	movs	r3, #3
 8006d96:	e03c      	b.n	8006e12 <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006d98:	f107 020e 	add.w	r2, r7, #14
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	211c      	movs	r1, #28
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fe fa59 	bl	8005258 <a_mpu6500_read>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	4819      	ldr	r0, [pc, #100]	@ (8006e1c <mpu6500_set_accelerometer_test+0xac>)
 8006db6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006db8:	2301      	movs	r3, #1
 8006dba:	e02a      	b.n	8006e12 <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	b25a      	sxtb	r2, r3
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	4013      	ands	r3, r2
 8006dd0:	b25b      	sxtb	r3, r3
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006dd6:	78ba      	ldrb	r2, [r7, #2]
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	b25a      	sxtb	r2, r3
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	b25b      	sxtb	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b25b      	sxtb	r3, r3
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006dec:	f107 020e 	add.w	r2, r7, #14
 8006df0:	2301      	movs	r3, #1
 8006df2:	211c      	movs	r1, #28
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fe fa60 	bl	80052ba <a_mpu6500_write>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	4805      	ldr	r0, [pc, #20]	@ (8006e20 <mpu6500_set_accelerometer_test+0xb0>)
 8006e0a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	0801ec9c 	.word	0x0801ec9c
 8006e20:	0801f358 	.word	0x0801f358

08006e24 <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006e36:	2302      	movs	r3, #2
 8006e38:	e03a      	b.n	8006eb0 <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d001      	beq.n	8006e48 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006e44:	2303      	movs	r3, #3
 8006e46:	e033      	b.n	8006eb0 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006e48:	f107 020e 	add.w	r2, r7, #14
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	211c      	movs	r1, #28
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fe fa01 	bl	8005258 <a_mpu6500_read>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	4814      	ldr	r0, [pc, #80]	@ (8006eb8 <mpu6500_set_accelerometer_range+0x94>)
 8006e66:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e021      	b.n	8006eb0 <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	f023 0318 	bic.w	r3, r3, #24
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	b25a      	sxtb	r2, r3
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	b25b      	sxtb	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006e8a:	f107 020e 	add.w	r2, r7, #14
 8006e8e:	2301      	movs	r3, #1
 8006e90:	211c      	movs	r1, #28
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fe fa11 	bl	80052ba <a_mpu6500_write>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	4805      	ldr	r0, [pc, #20]	@ (8006ebc <mpu6500_set_accelerometer_range+0x98>)
 8006ea8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0801ec9c 	.word	0x0801ec9c
 8006ebc:	0801f358 	.word	0x0801f358

08006ec0 <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e035      	b.n	8006f3e <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d001      	beq.n	8006ee0 <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 8006edc:	2303      	movs	r3, #3
 8006ede:	e02e      	b.n	8006f3e <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8006ee0:	f107 020e 	add.w	r2, r7, #14
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	211d      	movs	r1, #29
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe f9b5 	bl	8005258 <a_mpu6500_read>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	4812      	ldr	r0, [pc, #72]	@ (8006f48 <mpu6500_set_fifo_1024kb+0x88>)
 8006efe:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8006f00:	2301      	movs	r3, #1
 8006f02:	e01c      	b.n	8006f3e <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8006f18:	f107 020e 	add.w	r2, r7, #14
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	211d      	movs	r1, #29
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7fe f9ca 	bl	80052ba <a_mpu6500_write>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f34:	4805      	ldr	r0, [pc, #20]	@ (8006f4c <mpu6500_set_fifo_1024kb+0x8c>)
 8006f36:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	0801f388 	.word	0x0801f388
 8006f4c:	0801f3b8 	.word	0x0801f3b8

08006f50 <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8006f62:	2302      	movs	r3, #2
 8006f64:	e043      	b.n	8006fee <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d001      	beq.n	8006f74 <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8006f70:	2303      	movs	r3, #3
 8006f72:	e03c      	b.n	8006fee <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d905      	bls.n	8006f86 <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7e:	481e      	ldr	r0, [pc, #120]	@ (8006ff8 <mpu6500_set_accelerometer_choice+0xa8>)
 8006f80:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8006f82:	2304      	movs	r3, #4
 8006f84:	e033      	b.n	8006fee <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 8006f86:	f107 020e 	add.w	r2, r7, #14
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	211d      	movs	r1, #29
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fe f962 	bl	8005258 <a_mpu6500_read>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa2:	4816      	ldr	r0, [pc, #88]	@ (8006ffc <mpu6500_set_accelerometer_choice+0xac>)
 8006fa4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e021      	b.n	8006fee <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	f023 0308 	bic.w	r3, r3, #8
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 8006fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	b25a      	sxtb	r2, r3
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 8006fc8:	f107 020e 	add.w	r2, r7, #14
 8006fcc:	2301      	movs	r3, #1
 8006fce:	211d      	movs	r1, #29
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7fe f972 	bl	80052ba <a_mpu6500_write>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe4:	4806      	ldr	r0, [pc, #24]	@ (8007000 <mpu6500_set_accelerometer_choice+0xb0>)
 8006fe6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	0801f3e8 	.word	0x0801f3e8
 8006ffc:	0801f388 	.word	0x0801f388
 8007000:	0801f3b8 	.word	0x0801f3b8

08007004 <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 8007016:	2302      	movs	r3, #2
 8007018:	e035      	b.n	8007086 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007020:	2b01      	cmp	r3, #1
 8007022:	d001      	beq.n	8007028 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 8007024:	2303      	movs	r3, #3
 8007026:	e02e      	b.n	8007086 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8007028:	f107 020e 	add.w	r2, r7, #14
 800702c:	2301      	movs	r3, #1
 800702e:	211d      	movs	r1, #29
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe f911 	bl	8005258 <a_mpu6500_read>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	4812      	ldr	r0, [pc, #72]	@ (8007090 <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 8007046:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007048:	2301      	movs	r3, #1
 800704a:	e01c      	b.n	8007086 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	f023 0307 	bic.w	r3, r3, #7
 8007052:	b2db      	uxtb	r3, r3
 8007054:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 8007056:	7bba      	ldrb	r2, [r7, #14]
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	4313      	orrs	r3, r2
 800705c:	b2db      	uxtb	r3, r3
 800705e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8007060:	f107 020e 	add.w	r2, r7, #14
 8007064:	2301      	movs	r3, #1
 8007066:	211d      	movs	r1, #29
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7fe f926 	bl	80052ba <a_mpu6500_write>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	4805      	ldr	r0, [pc, #20]	@ (8007094 <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 800707e:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	0801f388 	.word	0x0801f388
 8007094:	0801f3b8 	.word	0x0801f3b8

08007098 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 80070aa:	2302      	movs	r3, #2
 80070ac:	e035      	b.n	800711a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d001      	beq.n	80070bc <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 80070b8:	2303      	movs	r3, #3
 80070ba:	e02e      	b.n	800711a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 80070bc:	f107 020e 	add.w	r2, r7, #14
 80070c0:	2301      	movs	r3, #1
 80070c2:	211e      	movs	r1, #30
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fe f8c7 	bl	8005258 <a_mpu6500_read>
 80070ca:	4603      	mov	r3, r0
 80070cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	4812      	ldr	r0, [pc, #72]	@ (8007124 <mpu6500_set_low_power_accel_output_rate+0x8c>)
 80070da:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80070dc:	2301      	movs	r3, #1
 80070de:	e01c      	b.n	800711a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f023 030f 	bic.w	r3, r3, #15
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 80070ea:	7bba      	ldrb	r2, [r7, #14]
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 80070f4:	f107 020e 	add.w	r2, r7, #14
 80070f8:	2301      	movs	r3, #1
 80070fa:	211e      	movs	r1, #30
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fe f8dc 	bl	80052ba <a_mpu6500_write>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007110:	4805      	ldr	r0, [pc, #20]	@ (8007128 <mpu6500_set_low_power_accel_output_rate+0x90>)
 8007112:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	0801f400 	.word	0x0801f400
 8007128:	0801f42c 	.word	0x0801f42c

0800712c <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 800713e:	2302      	movs	r3, #2
 8007140:	e03a      	b.n	80071b8 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007148:	2b01      	cmp	r3, #1
 800714a:	d001      	beq.n	8007150 <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 800714c:	2303      	movs	r3, #3
 800714e:	e033      	b.n	80071b8 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007150:	f107 020e 	add.w	r2, r7, #14
 8007154:	2301      	movs	r3, #1
 8007156:	2169      	movs	r1, #105	@ 0x69
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fe f87d 	bl	8005258 <a_mpu6500_read>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	4814      	ldr	r0, [pc, #80]	@ (80071c0 <mpu6500_set_wake_on_motion+0x94>)
 800716e:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007170:	2301      	movs	r3, #1
 8007172:	e021      	b.n	80071b8 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800717a:	b2db      	uxtb	r3, r3
 800717c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 800717e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007182:	01db      	lsls	r3, r3, #7
 8007184:	b25a      	sxtb	r2, r3
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	b25b      	sxtb	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b25b      	sxtb	r3, r3
 800718e:	b2db      	uxtb	r3, r3
 8007190:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8007192:	f107 020e 	add.w	r2, r7, #14
 8007196:	2301      	movs	r3, #1
 8007198:	2169      	movs	r1, #105	@ 0x69
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fe f88d 	bl	80052ba <a_mpu6500_write>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	4805      	ldr	r0, [pc, #20]	@ (80071c4 <mpu6500_set_wake_on_motion+0x98>)
 80071b0:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	0801f45c 	.word	0x0801f45c
 80071c4:	0801f488 	.word	0x0801f488

080071c8 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 80071da:	2302      	movs	r3, #2
 80071dc:	e03a      	b.n	8007254 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d001      	beq.n	80071ec <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 80071e8:	2303      	movs	r3, #3
 80071ea:	e033      	b.n	8007254 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80071ec:	f107 020e 	add.w	r2, r7, #14
 80071f0:	2301      	movs	r3, #1
 80071f2:	2169      	movs	r1, #105	@ 0x69
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fe f82f 	bl	8005258 <a_mpu6500_read>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007208:	4814      	ldr	r0, [pc, #80]	@ (800725c <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 800720a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800720c:	2301      	movs	r3, #1
 800720e:	e021      	b.n	8007254 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007216:	b2db      	uxtb	r3, r3
 8007218:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 800721a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800721e:	019b      	lsls	r3, r3, #6
 8007220:	b25a      	sxtb	r2, r3
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	b25b      	sxtb	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b25b      	sxtb	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800722e:	f107 020e 	add.w	r2, r7, #14
 8007232:	2301      	movs	r3, #1
 8007234:	2169      	movs	r1, #105	@ 0x69
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fe f83f 	bl	80052ba <a_mpu6500_write>
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	4805      	ldr	r0, [pc, #20]	@ (8007260 <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 800724c:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	0801f45c 	.word	0x0801f45c
 8007260:	0801f488 	.word	0x0801f488

08007264 <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
 8007270:	4613      	mov	r3, r2
 8007272:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 800727a:	2302      	movs	r3, #2
 800727c:	e043      	b.n	8007306 <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8007288:	2303      	movs	r3, #3
 800728a:	e03c      	b.n	8007306 <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 800728c:	f107 020e 	add.w	r2, r7, #14
 8007290:	2301      	movs	r3, #1
 8007292:	2123      	movs	r1, #35	@ 0x23
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fd ffdf 	bl	8005258 <a_mpu6500_read>
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	4819      	ldr	r0, [pc, #100]	@ (8007310 <mpu6500_set_fifo_enable+0xac>)
 80072aa:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80072ac:	2301      	movs	r3, #1
 80072ae:	e02a      	b.n	8007306 <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	2201      	movs	r2, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	43db      	mvns	r3, r3
 80072bc:	b25a      	sxtb	r2, r3
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	4013      	ands	r3, r2
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 80072ca:	78ba      	ldrb	r2, [r7, #2]
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	b25a      	sxtb	r2, r3
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	4313      	orrs	r3, r2
 80072da:	b25b      	sxtb	r3, r3
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 80072e0:	f107 020e 	add.w	r2, r7, #14
 80072e4:	2301      	movs	r3, #1
 80072e6:	2123      	movs	r1, #35	@ 0x23
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fd ffe6 	bl	80052ba <a_mpu6500_write>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fc:	4805      	ldr	r0, [pc, #20]	@ (8007314 <mpu6500_set_fifo_enable+0xb0>)
 80072fe:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	0801f4b4 	.word	0x0801f4b4
 8007314:	0801f4e0 	.word	0x0801f4e0

08007318 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 800732a:	2302      	movs	r3, #2
 800732c:	e03a      	b.n	80073a4 <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007334:	2b01      	cmp	r3, #1
 8007336:	d001      	beq.n	800733c <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007338:	2303      	movs	r3, #3
 800733a:	e033      	b.n	80073a4 <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800733c:	f107 020e 	add.w	r2, r7, #14
 8007340:	2301      	movs	r3, #1
 8007342:	2137      	movs	r1, #55	@ 0x37
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fd ff87 	bl	8005258 <a_mpu6500_read>
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	4814      	ldr	r0, [pc, #80]	@ (80073ac <mpu6500_set_interrupt_level+0x94>)
 800735a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800735c:	2301      	movs	r3, #1
 800735e:	e021      	b.n	80073a4 <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007366:	b2db      	uxtb	r3, r3
 8007368:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 800736a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800736e:	01db      	lsls	r3, r3, #7
 8007370:	b25a      	sxtb	r2, r3
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	b25b      	sxtb	r3, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	b25b      	sxtb	r3, r3
 800737a:	b2db      	uxtb	r3, r3
 800737c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800737e:	f107 020e 	add.w	r2, r7, #14
 8007382:	2301      	movs	r3, #1
 8007384:	2137      	movs	r1, #55	@ 0x37
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fd ff97 	bl	80052ba <a_mpu6500_write>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	4805      	ldr	r0, [pc, #20]	@ (80073b0 <mpu6500_set_interrupt_level+0x98>)
 800739c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	0801f50c 	.word	0x0801f50c
 80073b0:	0801f534 	.word	0x0801f534

080073b4 <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 80073c6:	2302      	movs	r3, #2
 80073c8:	e03a      	b.n	8007440 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 80073d4:	2303      	movs	r3, #3
 80073d6:	e033      	b.n	8007440 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80073d8:	f107 020e 	add.w	r2, r7, #14
 80073dc:	2301      	movs	r3, #1
 80073de:	2137      	movs	r1, #55	@ 0x37
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fd ff39 	bl	8005258 <a_mpu6500_read>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f4:	4814      	ldr	r0, [pc, #80]	@ (8007448 <mpu6500_set_interrupt_pin_type+0x94>)
 80073f6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80073f8:	2301      	movs	r3, #1
 80073fa:	e021      	b.n	8007440 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007402:	b2db      	uxtb	r3, r3
 8007404:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8007406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800740a:	019b      	lsls	r3, r3, #6
 800740c:	b25a      	sxtb	r2, r3
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	b25b      	sxtb	r3, r3
 8007412:	4313      	orrs	r3, r2
 8007414:	b25b      	sxtb	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800741a:	f107 020e 	add.w	r2, r7, #14
 800741e:	2301      	movs	r3, #1
 8007420:	2137      	movs	r1, #55	@ 0x37
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fd ff49 	bl	80052ba <a_mpu6500_write>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	4805      	ldr	r0, [pc, #20]	@ (800744c <mpu6500_set_interrupt_pin_type+0x98>)
 8007438:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	0801f50c 	.word	0x0801f50c
 800744c:	0801f534 	.word	0x0801f534

08007450 <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 8007462:	2302      	movs	r3, #2
 8007464:	e03c      	b.n	80074e0 <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8007470:	2303      	movs	r3, #3
 8007472:	e035      	b.n	80074e0 <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007474:	f107 020e 	add.w	r2, r7, #14
 8007478:	2301      	movs	r3, #1
 800747a:	2137      	movs	r1, #55	@ 0x37
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fd feeb 	bl	8005258 <a_mpu6500_read>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	4815      	ldr	r0, [pc, #84]	@ (80074e8 <mpu6500_set_interrupt_latch+0x98>)
 8007492:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007494:	2301      	movs	r3, #1
 8007496:	e023      	b.n	80074e0 <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	f023 0320 	bic.w	r3, r3, #32
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <mpu6500_set_interrupt_latch+0x5c>
 80074a8:	2220      	movs	r2, #32
 80074aa:	e000      	b.n	80074ae <mpu6500_set_interrupt_latch+0x5e>
 80074ac:	2200      	movs	r2, #0
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	b25b      	sxtb	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80074ba:	f107 020e 	add.w	r2, r7, #14
 80074be:	2301      	movs	r3, #1
 80074c0:	2137      	movs	r1, #55	@ 0x37
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fd fef9 	bl	80052ba <a_mpu6500_write>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d6:	4805      	ldr	r0, [pc, #20]	@ (80074ec <mpu6500_set_interrupt_latch+0x9c>)
 80074d8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	0801f50c 	.word	0x0801f50c
 80074ec:	0801f534 	.word	0x0801f534

080074f0 <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 8007502:	2302      	movs	r3, #2
 8007504:	e03a      	b.n	800757c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800750c:	2b01      	cmp	r3, #1
 800750e:	d001      	beq.n	8007514 <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 8007510:	2303      	movs	r3, #3
 8007512:	e033      	b.n	800757c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007514:	f107 020e 	add.w	r2, r7, #14
 8007518:	2301      	movs	r3, #1
 800751a:	2137      	movs	r1, #55	@ 0x37
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7fd fe9b 	bl	8005258 <a_mpu6500_read>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	4814      	ldr	r0, [pc, #80]	@ (8007584 <mpu6500_set_interrupt_read_clear+0x94>)
 8007532:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007534:	2301      	movs	r3, #1
 8007536:	e021      	b.n	800757c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	f023 0310 	bic.w	r3, r3, #16
 800753e:	b2db      	uxtb	r3, r3
 8007540:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 8007542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	b25a      	sxtb	r2, r3
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	b25b      	sxtb	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b25b      	sxtb	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007556:	f107 020e 	add.w	r2, r7, #14
 800755a:	2301      	movs	r3, #1
 800755c:	2137      	movs	r1, #55	@ 0x37
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fd feab 	bl	80052ba <a_mpu6500_write>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007572:	4805      	ldr	r0, [pc, #20]	@ (8007588 <mpu6500_set_interrupt_read_clear+0x98>)
 8007574:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	0801f50c 	.word	0x0801f50c
 8007588:	0801f534 	.word	0x0801f534

0800758c <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 800759e:	2302      	movs	r3, #2
 80075a0:	e03a      	b.n	8007618 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d001      	beq.n	80075b0 <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 80075ac:	2303      	movs	r3, #3
 80075ae:	e033      	b.n	8007618 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80075b0:	f107 020e 	add.w	r2, r7, #14
 80075b4:	2301      	movs	r3, #1
 80075b6:	2137      	movs	r1, #55	@ 0x37
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fd fe4d 	bl	8005258 <a_mpu6500_read>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	4814      	ldr	r0, [pc, #80]	@ (8007620 <mpu6500_set_fsync_interrupt_level+0x94>)
 80075ce:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80075d0:	2301      	movs	r3, #1
 80075d2:	e021      	b.n	8007618 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f023 0308 	bic.w	r3, r3, #8
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 80075de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	b25a      	sxtb	r2, r3
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b25b      	sxtb	r3, r3
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80075f2:	f107 020e 	add.w	r2, r7, #14
 80075f6:	2301      	movs	r3, #1
 80075f8:	2137      	movs	r1, #55	@ 0x37
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fd fe5d 	bl	80052ba <a_mpu6500_write>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760e:	4805      	ldr	r0, [pc, #20]	@ (8007624 <mpu6500_set_fsync_interrupt_level+0x98>)
 8007610:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	0801f50c 	.word	0x0801f50c
 8007624:	0801f534 	.word	0x0801f534

08007628 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 800763a:	2302      	movs	r3, #2
 800763c:	e03a      	b.n	80076b4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007644:	2b01      	cmp	r3, #1
 8007646:	d001      	beq.n	800764c <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8007648:	2303      	movs	r3, #3
 800764a:	e033      	b.n	80076b4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800764c:	f107 020e 	add.w	r2, r7, #14
 8007650:	2301      	movs	r3, #1
 8007652:	2137      	movs	r1, #55	@ 0x37
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fd fdff 	bl	8005258 <a_mpu6500_read>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	4814      	ldr	r0, [pc, #80]	@ (80076bc <mpu6500_set_fsync_interrupt+0x94>)
 800766a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800766c:	2301      	movs	r3, #1
 800766e:	e021      	b.n	80076b4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	f023 0304 	bic.w	r3, r3, #4
 8007676:	b2db      	uxtb	r3, r3
 8007678:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 800767a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	b25a      	sxtb	r2, r3
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	b25b      	sxtb	r3, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	b25b      	sxtb	r3, r3
 800768a:	b2db      	uxtb	r3, r3
 800768c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800768e:	f107 020e 	add.w	r2, r7, #14
 8007692:	2301      	movs	r3, #1
 8007694:	2137      	movs	r1, #55	@ 0x37
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fd fe0f 	bl	80052ba <a_mpu6500_write>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	4805      	ldr	r0, [pc, #20]	@ (80076c0 <mpu6500_set_fsync_interrupt+0x98>)
 80076ac:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	0801f50c 	.word	0x0801f50c
 80076c0:	0801f534 	.word	0x0801f534

080076c4 <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 80076d6:	2302      	movs	r3, #2
 80076d8:	e03a      	b.n	8007750 <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d001      	beq.n	80076e8 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 80076e4:	2303      	movs	r3, #3
 80076e6:	e033      	b.n	8007750 <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 80076e8:	f107 020e 	add.w	r2, r7, #14
 80076ec:	2301      	movs	r3, #1
 80076ee:	2137      	movs	r1, #55	@ 0x37
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fd fdb1 	bl	8005258 <a_mpu6500_read>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007704:	4814      	ldr	r0, [pc, #80]	@ (8007758 <mpu6500_set_iic_bypass+0x94>)
 8007706:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007708:	2301      	movs	r3, #1
 800770a:	e021      	b.n	8007750 <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	f023 0302 	bic.w	r3, r3, #2
 8007712:	b2db      	uxtb	r3, r3
 8007714:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8007716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	b25a      	sxtb	r2, r3
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	b25b      	sxtb	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b25b      	sxtb	r3, r3
 8007726:	b2db      	uxtb	r3, r3
 8007728:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800772a:	f107 020e 	add.w	r2, r7, #14
 800772e:	2301      	movs	r3, #1
 8007730:	2137      	movs	r1, #55	@ 0x37
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fd fdc1 	bl	80052ba <a_mpu6500_write>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	4805      	ldr	r0, [pc, #20]	@ (800775c <mpu6500_set_iic_bypass+0x98>)
 8007748:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	0801f50c 	.word	0x0801f50c
 800775c:	0801f534 	.word	0x0801f534

08007760 <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
 800776c:	4613      	mov	r3, r2
 800776e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8007776:	2302      	movs	r3, #2
 8007778:	e043      	b.n	8007802 <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007780:	2b01      	cmp	r3, #1
 8007782:	d001      	beq.n	8007788 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8007784:	2303      	movs	r3, #3
 8007786:	e03c      	b.n	8007802 <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8007788:	f107 020e 	add.w	r2, r7, #14
 800778c:	2301      	movs	r3, #1
 800778e:	2138      	movs	r1, #56	@ 0x38
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7fd fd61 	bl	8005258 <a_mpu6500_read>
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	4819      	ldr	r0, [pc, #100]	@ (800780c <mpu6500_set_interrupt+0xac>)
 80077a6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077a8:	2301      	movs	r3, #1
 80077aa:	e02a      	b.n	8007802 <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2201      	movs	r2, #1
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	43db      	mvns	r3, r3
 80077b8:	b25a      	sxtb	r2, r3
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	b25b      	sxtb	r3, r3
 80077be:	4013      	ands	r3, r2
 80077c0:	b25b      	sxtb	r3, r3
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 80077c6:	78ba      	ldrb	r2, [r7, #2]
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	b25a      	sxtb	r2, r3
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	b25b      	sxtb	r3, r3
 80077d4:	4313      	orrs	r3, r2
 80077d6:	b25b      	sxtb	r3, r3
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 80077dc:	f107 020e 	add.w	r2, r7, #14
 80077e0:	2301      	movs	r3, #1
 80077e2:	2138      	movs	r1, #56	@ 0x38
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fd fd68 	bl	80052ba <a_mpu6500_write>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	4805      	ldr	r0, [pc, #20]	@ (8007810 <mpu6500_set_interrupt+0xb0>)
 80077fa:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	0801f55c 	.word	0x0801f55c
 8007810:	0801f584 	.word	0x0801f584

08007814 <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007826:	2302      	movs	r3, #2
 8007828:	e022      	b.n	8007870 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007830:	2b01      	cmp	r3, #1
 8007832:	d001      	beq.n	8007838 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007834:	2303      	movs	r3, #3
 8007836:	e01b      	b.n	8007870 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800783c:	121b      	asrs	r3, r3, #8
 800783e:	b21b      	sxth	r3, r3
 8007840:	b2db      	uxtb	r3, r3
 8007842:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007844:	887b      	ldrh	r3, [r7, #2]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 800784a:	f107 020c 	add.w	r2, r7, #12
 800784e:	2302      	movs	r3, #2
 8007850:	2177      	movs	r1, #119	@ 0x77
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fd fd31 	bl	80052ba <a_mpu6500_write>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007866:	4804      	ldr	r0, [pc, #16]	@ (8007878 <mpu6500_set_accelerometer_x_offset+0x64>)
 8007868:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	0801f6b0 	.word	0x0801f6b0

0800787c <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 800788e:	2302      	movs	r3, #2
 8007890:	e022      	b.n	80078d8 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007898:	2b01      	cmp	r3, #1
 800789a:	d001      	beq.n	80078a0 <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 800789c:	2303      	movs	r3, #3
 800789e:	e01b      	b.n	80078d8 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80078a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078a4:	121b      	asrs	r3, r3, #8
 80078a6:	b21b      	sxth	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 80078b2:	f107 020c 	add.w	r2, r7, #12
 80078b6:	2302      	movs	r3, #2
 80078b8:	217a      	movs	r1, #122	@ 0x7a
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fd fcfd 	bl	80052ba <a_mpu6500_write>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ce:	4804      	ldr	r0, [pc, #16]	@ (80078e0 <mpu6500_set_accelerometer_y_offset+0x64>)
 80078d0:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	0801f6f8 	.word	0x0801f6f8

080078e4 <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 80078f6:	2302      	movs	r3, #2
 80078f8:	e022      	b.n	8007940 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007900:	2b01      	cmp	r3, #1
 8007902:	d001      	beq.n	8007908 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007904:	2303      	movs	r3, #3
 8007906:	e01b      	b.n	8007940 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007908:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800790c:	121b      	asrs	r3, r3, #8
 800790e:	b21b      	sxth	r3, r3
 8007910:	b2db      	uxtb	r3, r3
 8007912:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007914:	887b      	ldrh	r3, [r7, #2]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 800791a:	f107 020c 	add.w	r2, r7, #12
 800791e:	2302      	movs	r3, #2
 8007920:	217d      	movs	r1, #125	@ 0x7d
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fd fcc9 	bl	80052ba <a_mpu6500_write>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	4804      	ldr	r0, [pc, #16]	@ (8007948 <mpu6500_set_accelerometer_z_offset+0x64>)
 8007938:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	0801f740 	.word	0x0801f740

0800794c <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	ed87 0a02 	vstr	s0, [r7, #8]
 8007958:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 8007960:	2302      	movs	r3, #2
 8007962:	e014      	b.n	800798e <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 800796e:	2303      	movs	r3, #3
 8007970:	e00d      	b.n	800798e <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 8007972:	ed97 7a02 	vldr	s14, [r7, #8]
 8007976:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800799c <mpu6500_accelerometer_offset_convert_to_register+0x50>
 800797a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800797e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007982:	ee17 3a90 	vmov	r3, s15
 8007986:	b21a      	sxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	3f7ae148 	.word	0x3f7ae148

080079a0 <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 80079b2:	2302      	movs	r3, #2
 80079b4:	e022      	b.n	80079fc <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d001      	beq.n	80079c4 <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 80079c0:	2303      	movs	r3, #3
 80079c2:	e01b      	b.n	80079fc <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80079c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079c8:	121b      	asrs	r3, r3, #8
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 80079d6:	f107 020c 	add.w	r2, r7, #12
 80079da:	2302      	movs	r3, #2
 80079dc:	2113      	movs	r1, #19
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fd fc6b 	bl	80052ba <a_mpu6500_write>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f2:	4804      	ldr	r0, [pc, #16]	@ (8007a04 <mpu6500_set_gyro_x_offset+0x64>)
 80079f4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	0801f788 	.word	0x0801f788

08007a08 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e022      	b.n	8007a64 <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d001      	beq.n	8007a2c <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e01b      	b.n	8007a64 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007a2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a30:	121b      	asrs	r3, r3, #8
 8007a32:	b21b      	sxth	r3, r3
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 8007a3e:	f107 020c 	add.w	r2, r7, #12
 8007a42:	2302      	movs	r3, #2
 8007a44:	2115      	movs	r1, #21
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fd fc37 	bl	80052ba <a_mpu6500_write>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5a:	4804      	ldr	r0, [pc, #16]	@ (8007a6c <mpu6500_set_gyro_y_offset+0x64>)
 8007a5c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	0801f7d0 	.word	0x0801f7d0

08007a70 <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007a82:	2302      	movs	r3, #2
 8007a84:	e022      	b.n	8007acc <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d001      	beq.n	8007a94 <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007a90:	2303      	movs	r3, #3
 8007a92:	e01b      	b.n	8007acc <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007a94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a98:	121b      	asrs	r3, r3, #8
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007aa0:	887b      	ldrh	r3, [r7, #2]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 8007aa6:	f107 020c 	add.w	r2, r7, #12
 8007aaa:	2302      	movs	r3, #2
 8007aac:	2117      	movs	r1, #23
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fd fc03 	bl	80052ba <a_mpu6500_write>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	4804      	ldr	r0, [pc, #16]	@ (8007ad4 <mpu6500_set_gyro_z_offset+0x64>)
 8007ac4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	0801f818 	.word	0x0801f818

08007ad8 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	ed87 0a02 	vstr	s0, [r7, #8]
 8007ae4:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 8007aec:	2302      	movs	r3, #2
 8007aee:	e014      	b.n	8007b1a <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d001      	beq.n	8007afe <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 8007afa:	2303      	movs	r3, #3
 8007afc:	e00d      	b.n	8007b1a <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 8007afe:	ed97 7a02 	vldr	s14, [r7, #8]
 8007b02:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007b28 <mpu6500_gyro_offset_convert_to_register+0x50>
 8007b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b0e:	ee17 3a90 	vmov	r3, s15
 8007b12:	b21a      	sxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	3cf9db23 	.word	0x3cf9db23

08007b2c <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <ring_buffer_init+0x1e>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <ring_buffer_init+0x1e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d801      	bhi.n	8007b4e <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e00c      	b.n	8007b68 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	601a      	str	r2, [r3, #0]
	rb->size = size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6852      	ldr	r2, [r2, #4]
 8007b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b96:	fb01 f202 	mul.w	r2, r1, r2
 8007b9a:	1a9b      	subs	r3, r3, r2
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6852      	ldr	r2, [r2, #4]
 8007bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc8:	fb01 f202 	mul.w	r2, r1, r2
 8007bcc:	1a9b      	subs	r3, r3, r2
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d310      	bcc.n	8007c10 <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	e00b      	b.n	8007c1c <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	e005      	b.n	8007c1c <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	3b01      	subs	r3, #1
	}
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d305      	bcc.n	8007c48 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	e004      	b.n	8007c52 <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
	}
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	4413      	add	r3, r2
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4413      	add	r3, r2
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff ff64 	bl	8007b74 <ring_buffer_free_space>
 8007cac:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	bf28      	it	cs
 8007cb6:	4613      	movcs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ff8d 	bl	8007bda <ring_buffer_linear_free_space>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d904      	bls.n	8007cd2 <ring_buffer_enqueue_arr+0x38>
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ff86 	bl	8007bda <ring_buffer_linear_free_space>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	e000      	b.n	8007cd4 <ring_buffer_enqueue_arr+0x3a>
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	4413      	add	r3, r2
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f013 fbd0 	bl	801b48a <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cfa:	fb01 f202 	mul.w	r2, r1, r2
 8007cfe:	1a9a      	subs	r2, r3, r2
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d018      	beq.n	8007d44 <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	18d0      	adds	r0, r2, r3
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4619      	mov	r1, r3
 8007d26:	f013 fbb0 	bl	801b48a <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	4413      	add	r3, r2
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	6852      	ldr	r2, [r2, #4]
 8007d36:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d3a:	fb01 f202 	mul.w	r2, r1, r2
 8007d3e:	1a9a      	subs	r2, r3, r2
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 8007d44:	69bb      	ldr	r3, [r7, #24]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08a      	sub	sp, #40	@ 0x28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff ff24 	bl	8007ba8 <ring_buffer_used_space>
 8007d60:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e048      	b.n	8007dfe <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	bf28      	it	cs
 8007d74:	4613      	movcs	r3, r2
 8007d76:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff ff55 	bl	8007c28 <ring_buffer_linear_used_space>
 8007d7e:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bf28      	it	cs
 8007d88:	4613      	movcs	r3, r2
 8007d8a:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	68b8      	ldr	r0, [r7, #8]
 8007d9c:	f013 fb75 	bl	801b48a <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	4413      	add	r3, r2
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	6852      	ldr	r2, [r2, #4]
 8007dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007db0:	fb01 f202 	mul.w	r2, r1, r2
 8007db4:	1a9a      	subs	r2, r3, r2
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d91c      	bls.n	8007dfc <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 8007dc2:	6a3a      	ldr	r2, [r7, #32]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	18d0      	adds	r0, r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	f013 fb54 	bl	801b48a <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	6852      	ldr	r2, [r2, #4]
 8007dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8007df2:	fb01 f202 	mul.w	r2, r1, r2
 8007df6:	1a9a      	subs	r2, r3, r2
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	@ 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fec9 	bl	8007ba8 <ring_buffer_used_space>
 8007e16:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	bf28      	it	cs
 8007e20:	4613      	movcs	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6852      	ldr	r2, [r2, #4]
 8007e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e34:	fb01 f202 	mul.w	r2, r1, r2
 8007e38:	1a9a      	subs	r2, r3, r2
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]
}
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	60da      	str	r2, [r3, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007e6e:	2300      	movs	r3, #0
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <MX_DMA_Init+0x4c>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	4a0f      	ldr	r2, [pc, #60]	@ (8007eb4 <MX_DMA_Init+0x4c>)
 8007e78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <MX_DMA_Init+0x4c>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2105      	movs	r1, #5
 8007e8e:	203a      	movs	r0, #58	@ 0x3a
 8007e90:	f002 fbe8 	bl	800a664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007e94:	203a      	movs	r0, #58	@ 0x3a
 8007e96:	f002 fc01 	bl	800a69c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2105      	movs	r1, #5
 8007e9e:	2046      	movs	r0, #70	@ 0x46
 8007ea0:	f002 fbe0 	bl	800a664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007ea4:	2046      	movs	r0, #70	@ 0x46
 8007ea6:	f002 fbf9 	bl	800a69c <HAL_NVIC_EnableIRQ>

}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40023800 	.word	0x40023800

08007eb8 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 8007ec4:	edd7 7a00 	vldr	s15, [r7]
 8007ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007f30 <arr_from_freqf+0x78>
 8007ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed4:	d501      	bpl.n	8007eda <arr_from_freqf+0x22>
 8007ed6:	4b17      	ldr	r3, [pc, #92]	@ (8007f34 <arr_from_freqf+0x7c>)
 8007ed8:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	ee07 3a90 	vmov	s15, r3
 8007ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ee4:	edd7 7a00 	vldr	s15, [r7]
 8007ee8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007eec:	ee16 0a90 	vmov	r0, s13
 8007ef0:	f7f8 fb2a 	bl	8000548 <__aeabi_f2d>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	4b0d      	ldr	r3, [pc, #52]	@ (8007f38 <arr_from_freqf+0x80>)
 8007f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f06:	f7f8 f9c1 	bl	800028c <__adddf3>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4619      	mov	r1, r3
 8007f12:	f7f8 fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8007f16:	4603      	mov	r3, r0
 8007f18:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <arr_from_freqf+0x6c>
 8007f20:	2301      	movs	r3, #1
 8007f22:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	3b01      	subs	r3, #1
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	3a83126f 	.word	0x3a83126f
 8007f34:	3a83126f 	.word	0x3a83126f
 8007f38:	3fe00000 	.word	0x3fe00000

08007f3c <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 8007f48:	edd7 7a00 	vldr	s15, [r7]
 8007f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f54:	d502      	bpl.n	8007f5c <ccr_from_duty+0x20>
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 8007f5c:	edd7 7a00 	vldr	s15, [r7]
 8007f60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	dd02      	ble.n	8007f74 <ccr_from_duty+0x38>
 8007f6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007f72:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f84:	edd7 7a00 	vldr	s15, [r7]
 8007f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f98:	ee17 3a90 	vmov	r3, s15
 8007f9c:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d901      	bls.n	8007faa <ccr_from_duty+0x6e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]
    return ccr;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b09c      	sub	sp, #112	@ 0x70
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6178      	str	r0, [r7, #20]
 8007fc0:	6139      	str	r1, [r7, #16]
 8007fc2:	60fa      	str	r2, [r7, #12]
 8007fc4:	60bb      	str	r3, [r7, #8]
 8007fc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8007fca:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <pwm_init+0x22>
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <pwm_init+0x26>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0de      	b.n	800819c <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4a70      	ldr	r2, [pc, #448]	@ (80081a4 <pwm_init+0x1ec>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d801      	bhi.n	8007fea <pwm_init+0x32>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e0d8      	b.n	800819c <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8007ff4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	609a      	str	r2, [r3, #8]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	611a      	str	r2, [r3, #16]
 8008004:	615a      	str	r2, [r3, #20]
 8008006:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008008:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	605a      	str	r2, [r3, #4]
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 8008032:	edd7 7a01 	vldr	s15, [r7, #4]
 8008036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803e:	d801      	bhi.n	8008044 <pwm_init+0x8c>
 8008040:	4b59      	ldr	r3, [pc, #356]	@ (80081a8 <pwm_init+0x1f0>)
 8008042:	e000      	b.n	8008046 <pwm_init+0x8e>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 800804a:	edd7 7a00 	vldr	s15, [r7]
 800804e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008056:	d502      	bpl.n	800805e <pwm_init+0xa6>
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e00c      	b.n	8008078 <pwm_init+0xc0>
 800805e:	edd7 7a00 	vldr	s15, [r7]
 8008062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806e:	dd02      	ble.n	8008076 <pwm_init+0xbe>
 8008070:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008074:	e000      	b.n	8008078 <pwm_init+0xc0>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4a4b      	ldr	r2, [pc, #300]	@ (80081ac <pwm_init+0x1f4>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	0c9b      	lsrs	r3, r3, #18
 8008086:	3b01      	subs	r3, #1
 8008088:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 800808a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008090:	d301      	bcc.n	8008096 <pwm_init+0xde>
 8008092:	2301      	movs	r3, #1
 8008094:	e082      	b.n	800819c <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f006 f893 	bl	800e1c2 <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080a0:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2200      	movs	r2, #0
 80080a6:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80080ae:	eeb0 0a67 	vmov.f32	s0, s15
 80080b2:	483f      	ldr	r0, [pc, #252]	@ (80081b0 <pwm_init+0x1f8>)
 80080b4:	f7ff ff00 	bl	8007eb8 <arr_from_freqf>
 80080b8:	4602      	mov	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2200      	movs	r2, #0
 80080c2:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2280      	movs	r2, #128	@ 0x80
 80080c8:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 80080ca:	6938      	ldr	r0, [r7, #16]
 80080cc:	f005 ff02 	bl	800ded4 <HAL_TIM_Base_Init>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 80080d6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <pwm_init+0x12c>
 80080de:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80080e2:	e05b      	b.n	800819c <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 80080ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80080ee:	4619      	mov	r1, r3
 80080f0:	6938      	ldr	r0, [r7, #16]
 80080f2:	f006 fb49 	bl	800e788 <HAL_TIM_ConfigClockSource>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 80080fc:	6938      	ldr	r0, [r7, #16]
 80080fe:	f006 f811 	bl	800e124 <HAL_TIM_PWM_Init>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008108:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <pwm_init+0x15e>
 8008110:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008114:	e042      	b.n	800819c <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008116:	2300      	movs	r3, #0
 8008118:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800811a:	2300      	movs	r3, #0
 800811c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 800811e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008122:	4619      	mov	r1, r3
 8008124:	6938      	ldr	r0, [r7, #16]
 8008126:	f006 ff3b 	bl	800efa0 <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 800812a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <pwm_init+0x180>
 8008132:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008136:	e031      	b.n	800819c <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 8008138:	f107 0318 	add.w	r3, r7, #24
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	611a      	str	r2, [r3, #16]
 8008148:	615a      	str	r2, [r3, #20]
 800814a:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 800814c:	2360      	movs	r3, #96	@ 0x60
 800814e:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008150:	2300      	movs	r3, #0
 8008152:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8008154:	2300      	movs	r3, #0
 8008156:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008162:	eeb0 0a67 	vmov.f32	s0, s15
 8008166:	4610      	mov	r0, r2
 8008168:	f7ff fee8 	bl	8007f3c <ccr_from_duty>
 800816c:	4603      	mov	r3, r0
 800816e:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 8008170:	f107 0318 	add.w	r3, r7, #24
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4619      	mov	r1, r3
 8008178:	6938      	ldr	r0, [r7, #16]
 800817a:	f006 fa43 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 800817e:	4603      	mov	r3, r0
 8008180:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008184:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <pwm_init+0x1da>
 800818c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008190:	e004      	b.n	800819c <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	6938      	ldr	r0, [r7, #16]
 8008196:	f006 f87d 	bl	800e294 <HAL_TIM_PWM_Start>
 800819a:	4603      	mov	r3, r0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3770      	adds	r7, #112	@ 0x70
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	000f423f 	.word	0x000f423f
 80081a8:	42480000 	.word	0x42480000
 80081ac:	431bde83 	.word	0x431bde83
 80081b0:	000f4240 	.word	0x000f4240

080081b4 <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d04a      	beq.n	800825c <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 80081c6:	edd7 7a00 	vldr	s15, [r7]
 80081ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d2:	d502      	bpl.n	80081da <pwm_set_duty+0x26>
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	e00c      	b.n	80081f4 <pwm_set_duty+0x40>
 80081da:	edd7 7a00 	vldr	s15, [r7]
 80081de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ea:	dd02      	ble.n	80081f2 <pwm_set_duty+0x3e>
 80081ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80081f0:	e000      	b.n	80081f4 <pwm_set_duty+0x40>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008200:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	edd3 7a04 	vldr	s15, [r3, #16]
 8008208:	eeb0 0a67 	vmov.f32	s0, s15
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fe95 	bl	8007f3c <ccr_from_duty>
 8008212:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d105      	bne.n	8008228 <pwm_set_duty+0x74>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	635a      	str	r2, [r3, #52]	@ 0x34
 8008226:	e01a      	b.n	800825e <pwm_set_duty+0xaa>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b04      	cmp	r3, #4
 800822e:	d105      	bne.n	800823c <pwm_set_duty+0x88>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6393      	str	r3, [r2, #56]	@ 0x38
 800823a:	e010      	b.n	800825e <pwm_set_duty+0xaa>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d105      	bne.n	8008250 <pwm_set_duty+0x9c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800824e:	e006      	b.n	800825e <pwm_set_duty+0xaa>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6413      	str	r3, [r2, #64]	@ 0x40
 800825a:	e000      	b.n	800825e <pwm_set_duty+0xaa>
    if (!esc) return;
 800825c:	bf00      	nop
}
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 8008264:	b480      	push	{r7}
 8008266:	b089      	sub	sp, #36	@ 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	ed87 0a03 	vstr	s0, [r7, #12]
 800826e:	edc7 0a02 	vstr	s1, [r7, #8]
 8008272:	ed87 1a01 	vstr	s2, [r7, #4]
 8008276:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 800827a:	edd7 7a00 	vldr	s15, [r7]
 800827e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008286:	d502      	bpl.n	800828e <esc_pwm_throttle_to_duty_cycle+0x2a>
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 800828e:	edd7 7a00 	vldr	s15, [r7]
 8008292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800829a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829e:	dd02      	ble.n	80082a6 <esc_pwm_throttle_to_duty_cycle+0x42>
 80082a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80082a4:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 80082a6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8008328 <esc_pwm_throttle_to_duty_cycle+0xc4>
 80082aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80082ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 80082b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80082ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80082be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082c2:	edd7 7a00 	vldr	s15, [r7]
 80082c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80082ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082d2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 80082d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80082da:	ed97 7a06 	vldr	s14, [r7, #24]
 80082de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 80082e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80082ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f2:	d502      	bpl.n	80082fa <esc_pwm_throttle_to_duty_cycle+0x96>
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 80082fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80082fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830a:	dd02      	ble.n	8008312 <esc_pwm_throttle_to_duty_cycle+0xae>
 800830c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008310:	61fb      	str	r3, [r7, #28]

    return duty;
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	ee07 3a90 	vmov	s15, r3
}
 8008318:	eeb0 0a67 	vmov.f32	s0, s15
 800831c:	3724      	adds	r7, #36	@ 0x24
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	49742400 	.word	0x49742400

0800832c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	app_main_start(NULL);
 8008330:	2000      	movs	r0, #0
 8008332:	f000 ff0f 	bl	8009154 <app_main_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008336:	4a05      	ldr	r2, [pc, #20]	@ (800834c <MX_FREERTOS_Init+0x20>)
 8008338:	2100      	movs	r1, #0
 800833a:	4805      	ldr	r0, [pc, #20]	@ (8008350 <MX_FREERTOS_Init+0x24>)
 800833c:	f00b fc20 	bl	8013b80 <osThreadNew>
 8008340:	4603      	mov	r3, r0
 8008342:	4a04      	ldr	r2, [pc, #16]	@ (8008354 <MX_FREERTOS_Init+0x28>)
 8008344:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8008346:	bf00      	nop
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	08020294 	.word	0x08020294
 8008350:	08008359 	.word	0x08008359
 8008354:	20000778 	.word	0x20000778

08008358 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8008360:	f00e fd5a 	bl	8016e18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000));
 8008364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008368:	f00b fc9c 	bl	8013ca4 <osDelay>
 800836c:	e7fa      	b.n	8008364 <StartDefaultTask+0xc>
	...

08008370 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	@ 0x28
 8008374:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008376:	f107 0314 	add.w	r3, r7, #20
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	605a      	str	r2, [r3, #4]
 8008380:	609a      	str	r2, [r3, #8]
 8008382:	60da      	str	r2, [r3, #12]
 8008384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008386:	2300      	movs	r3, #0
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	4b26      	ldr	r3, [pc, #152]	@ (8008424 <MX_GPIO_Init+0xb4>)
 800838c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838e:	4a25      	ldr	r2, [pc, #148]	@ (8008424 <MX_GPIO_Init+0xb4>)
 8008390:	f043 0304 	orr.w	r3, r3, #4
 8008394:	6313      	str	r3, [r2, #48]	@ 0x30
 8008396:	4b23      	ldr	r3, [pc, #140]	@ (8008424 <MX_GPIO_Init+0xb4>)
 8008398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80083b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80083be:	2300      	movs	r3, #0
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	4b18      	ldr	r3, [pc, #96]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c6:	4a17      	ldr	r2, [pc, #92]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083c8:	f043 0301 	orr.w	r3, r3, #1
 80083cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80083ce:	4b15      	ldr	r3, [pc, #84]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	60bb      	str	r3, [r7, #8]
 80083d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80083da:	2300      	movs	r3, #0
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e2:	4a10      	ldr	r2, [pc, #64]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80083ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008424 <MX_GPIO_Init+0xb4>)
 80083ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2110      	movs	r1, #16
 80083fa:	480b      	ldr	r0, [pc, #44]	@ (8008428 <MX_GPIO_Init+0xb8>)
 80083fc:	f003 f862 	bl	800b4c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008400:	2310      	movs	r3, #16
 8008402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008404:	2301      	movs	r3, #1
 8008406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840c:	2300      	movs	r3, #0
 800840e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008410:	f107 0314 	add.w	r3, r7, #20
 8008414:	4619      	mov	r1, r3
 8008416:	4804      	ldr	r0, [pc, #16]	@ (8008428 <MX_GPIO_Init+0xb8>)
 8008418:	f002 fdbc 	bl	800af94 <HAL_GPIO_Init>

}
 800841c:	bf00      	nop
 800841e:	3728      	adds	r7, #40	@ 0x28
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40023800 	.word	0x40023800
 8008428:	40020000 	.word	0x40020000

0800842c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d103      	bne.n	800844a <_write+0x1e>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
        usart1_send_data(err_header, sizeof(err_header) - 1);
 8008442:	2107      	movs	r1, #7
 8008444:	4807      	ldr	r0, [pc, #28]	@ (8008464 <_write+0x38>)
 8008446:	f001 feb3 	bl	800a1b0 <usart1_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = usart1_send_data(data, len);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4619      	mov	r1, r3
 800844e:	68b8      	ldr	r0, [r7, #8]
 8008450:	f001 feae 	bl	800a1b0 <usart1_send_data>
 8008454:	4603      	mov	r3, r0
 8008456:	617b      	str	r3, [r7, #20]
    return sent_size;
 8008458:	697b      	ldr	r3, [r7, #20]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	2000004c 	.word	0x2000004c

08008468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800846c:	f001 ffb8 	bl	800a3e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008470:	f000 f818 	bl	80084a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008474:	f7ff ff7c 	bl	8008370 <MX_GPIO_Init>
  MX_DMA_Init();
 8008478:	f7ff fcf6 	bl	8007e68 <MX_DMA_Init>
  MX_SPI1_Init();
 800847c:	f000 ff70 	bl	8009360 <MX_SPI1_Init>
  MX_TIM4_Init();
 8008480:	f001 fa4e 	bl	8009920 <MX_TIM4_Init>
  MX_TIM2_Init();
 8008484:	f001 f9b6 	bl	80097f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8008488:	f001 fb32 	bl	8009af0 <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800848c:	f00b fb2e 	bl	8013aec <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8008490:	f7ff ff4c 	bl	800832c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008494:	f00b fb4e 	bl	8013b34 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 8008498:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800849c:	f001 ffe2 	bl	800a464 <HAL_Delay>
 80084a0:	e7fa      	b.n	8008498 <main+0x30>
	...

080084a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b094      	sub	sp, #80	@ 0x50
 80084a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084aa:	f107 0320 	add.w	r3, r7, #32
 80084ae:	2230      	movs	r2, #48	@ 0x30
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f012 fefa 	bl	801b2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084b8:	f107 030c 	add.w	r3, r7, #12
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	609a      	str	r2, [r3, #8]
 80084c4:	60da      	str	r2, [r3, #12]
 80084c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80084c8:	2300      	movs	r3, #0
 80084ca:	60bb      	str	r3, [r7, #8]
 80084cc:	4b28      	ldr	r3, [pc, #160]	@ (8008570 <SystemClock_Config+0xcc>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d0:	4a27      	ldr	r2, [pc, #156]	@ (8008570 <SystemClock_Config+0xcc>)
 80084d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80084d8:	4b25      	ldr	r3, [pc, #148]	@ (8008570 <SystemClock_Config+0xcc>)
 80084da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084e0:	60bb      	str	r3, [r7, #8]
 80084e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80084e4:	2300      	movs	r3, #0
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	4b22      	ldr	r3, [pc, #136]	@ (8008574 <SystemClock_Config+0xd0>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a21      	ldr	r2, [pc, #132]	@ (8008574 <SystemClock_Config+0xd0>)
 80084ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4b1f      	ldr	r3, [pc, #124]	@ (8008574 <SystemClock_Config+0xd0>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008500:	2301      	movs	r3, #1
 8008502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800850a:	2302      	movs	r3, #2
 800850c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800850e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008514:	2304      	movs	r3, #4
 8008516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008518:	23a8      	movs	r3, #168	@ 0xa8
 800851a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800851c:	2302      	movs	r3, #2
 800851e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008520:	2307      	movs	r3, #7
 8008522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008524:	f107 0320 	add.w	r3, r7, #32
 8008528:	4618      	mov	r0, r3
 800852a:	f004 fa37 	bl	800c99c <HAL_RCC_OscConfig>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008534:	f000 f832 	bl	800859c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008538:	230f      	movs	r3, #15
 800853a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800853c:	2302      	movs	r3, #2
 800853e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008544:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800854a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800854e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008550:	f107 030c 	add.w	r3, r7, #12
 8008554:	2105      	movs	r1, #5
 8008556:	4618      	mov	r0, r3
 8008558:	f004 fc98 	bl	800ce8c <HAL_RCC_ClockConfig>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008562:	f000 f81b 	bl	800859c <Error_Handler>
  }
}
 8008566:	bf00      	nop
 8008568:	3750      	adds	r7, #80	@ 0x50
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40023800 	.word	0x40023800
 8008574:	40007000 	.word	0x40007000

08008578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a04      	ldr	r2, [pc, #16]	@ (8008598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d101      	bne.n	800858e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800858a:	f001 ff4b 	bl	800a424 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40010000 	.word	0x40010000

0800859c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80085a0:	b672      	cpsid	i
}
 80085a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <Error_Handler+0x8>

080085a8 <ctrl_timer_cb>:


#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

static void ctrl_timer_cb(TimerHandle_t arg)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <ctrl_timer_cb+0x40>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f107 020c 	add.w	r2, r7, #12
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f00d fb46 	bl	8015c50 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <ctrl_timer_cb+0x38>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <ctrl_timer_cb+0x38>
 80085d0:	4b06      	ldr	r3, [pc, #24]	@ (80085ec <ctrl_timer_cb+0x44>)
 80085d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	2000148c 	.word	0x2000148c
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 80085fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <write_motor_timer_cb+0x40>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f107 020c 	add.w	r2, r7, #12
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f00d fb22 	bl	8015c50 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <write_motor_timer_cb+0x38>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <write_motor_timer_cb+0x38>
 8008618:	4b06      	ldr	r3, [pc, #24]	@ (8008634 <write_motor_timer_cb+0x44>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20001490 	.word	0x20001490
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <init_imu>:

static void init_imu(){
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 800863e:	2168      	movs	r1, #104	@ 0x68
 8008640:	2001      	movs	r0, #1
 8008642:	f7fc f8d1 	bl	80047e8 <mpu6500_basic_init>
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d14e      	bne.n	80086ee <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008650:	1d3b      	adds	r3, r7, #4
 8008652:	4619      	mov	r1, r3
 8008654:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80086fc <init_imu+0xc4>
 8008658:	4829      	ldr	r0, [pc, #164]	@ (8008700 <init_imu+0xc8>)
 800865a:	f7ff fa3d 	bl	8007ad8 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 800865e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008662:	4619      	mov	r1, r3
 8008664:	4826      	ldr	r0, [pc, #152]	@ (8008700 <init_imu+0xc8>)
 8008666:	f7ff f99b 	bl	80079a0 <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800866a:	1d3b      	adds	r3, r7, #4
 800866c:	4619      	mov	r1, r3
 800866e:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80086fc <init_imu+0xc4>
 8008672:	4823      	ldr	r0, [pc, #140]	@ (8008700 <init_imu+0xc8>)
 8008674:	f7ff fa30 	bl	8007ad8 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800867c:	4619      	mov	r1, r3
 800867e:	4820      	ldr	r0, [pc, #128]	@ (8008700 <init_imu+0xc8>)
 8008680:	f7ff f9c2 	bl	8007a08 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	4619      	mov	r1, r3
 8008688:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80086fc <init_imu+0xc4>
 800868c:	481c      	ldr	r0, [pc, #112]	@ (8008700 <init_imu+0xc8>)
 800868e:	f7ff fa23 	bl	8007ad8 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8008692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008696:	4619      	mov	r1, r3
 8008698:	4819      	ldr	r0, [pc, #100]	@ (8008700 <init_imu+0xc8>)
 800869a:	f7ff f9e9 	bl	8007a70 <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800869e:	1d3b      	adds	r3, r7, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80086fc <init_imu+0xc4>
 80086a6:	4816      	ldr	r0, [pc, #88]	@ (8008700 <init_imu+0xc8>)
 80086a8:	f7ff f950 	bl	800794c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 80086ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80086b0:	4619      	mov	r1, r3
 80086b2:	4813      	ldr	r0, [pc, #76]	@ (8008700 <init_imu+0xc8>)
 80086b4:	f7ff f8ae 	bl	8007814 <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80086b8:	1d3b      	adds	r3, r7, #4
 80086ba:	4619      	mov	r1, r3
 80086bc:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80086fc <init_imu+0xc4>
 80086c0:	480f      	ldr	r0, [pc, #60]	@ (8008700 <init_imu+0xc8>)
 80086c2:	f7ff f943 	bl	800794c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 80086c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80086ca:	4619      	mov	r1, r3
 80086cc:	480c      	ldr	r0, [pc, #48]	@ (8008700 <init_imu+0xc8>)
 80086ce:	f7ff f8d5 	bl	800787c <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	4619      	mov	r1, r3
 80086d6:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80086fc <init_imu+0xc4>
 80086da:	4809      	ldr	r0, [pc, #36]	@ (8008700 <init_imu+0xc8>)
 80086dc:	f7ff f936 	bl	800794c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 80086e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80086e4:	4619      	mov	r1, r3
 80086e6:	4806      	ldr	r0, [pc, #24]	@ (8008700 <init_imu+0xc8>)
 80086e8:	f7ff f8fc 	bl	80078e4 <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 80086ec:	e002      	b.n	80086f4 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 80086ee:	4805      	ldr	r0, [pc, #20]	@ (8008704 <init_imu+0xcc>)
 80086f0:	f012 fc22 	bl	801af38 <iprintf>
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	00000000 	.word	0x00000000
 8008700:	20000338 	.word	0x20000338
 8008704:	08020104 	.word	0x08020104

08008708 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b095      	sub	sp, #84	@ 0x54
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 8008710:	f00d f8b4 	bl	801587c <xTaskGetCurrentTaskHandle>
 8008714:	4603      	mov	r3, r0
 8008716:	4a4d      	ldr	r2, [pc, #308]	@ (800884c <flight_controller_main+0x144>)
 8008718:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 800871a:	4b4d      	ldr	r3, [pc, #308]	@ (8008850 <flight_controller_main+0x148>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <flight_controller_main+0x30>
        	tmr = xTimerCreate(
 8008722:	4b4c      	ldr	r3, [pc, #304]	@ (8008854 <flight_controller_main+0x14c>)
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	2201      	movs	r2, #1
 800872a:	2101      	movs	r1, #1
 800872c:	484a      	ldr	r0, [pc, #296]	@ (8008858 <flight_controller_main+0x150>)
 800872e:	f00d fbc3 	bl	8015eb8 <xTimerCreate>
 8008732:	4603      	mov	r3, r0
 8008734:	4a46      	ldr	r2, [pc, #280]	@ (8008850 <flight_controller_main+0x148>)
 8008736:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 8008738:	4b45      	ldr	r3, [pc, #276]	@ (8008850 <flight_controller_main+0x148>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <flight_controller_main+0x50>
            xTimerStart(tmr, 0);
 8008740:	4b43      	ldr	r3, [pc, #268]	@ (8008850 <flight_controller_main+0x148>)
 8008742:	681c      	ldr	r4, [r3, #0]
 8008744:	f00c fd52 	bl	80151ec <xTaskGetTickCount>
 8008748:	4602      	mov	r2, r0
 800874a:	2300      	movs	r3, #0
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	2300      	movs	r3, #0
 8008750:	2101      	movs	r1, #1
 8008752:	4620      	mov	r0, r4
 8008754:	f00d fc0e 	bl	8015f74 <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008758:	f04f 31ff 	mov.w	r1, #4294967295
 800875c:	2001      	movs	r0, #1
 800875e:	f00d fa2b 	bl	8015bb8 <ulTaskNotifyTake>

        len = 1;
 8008762:	2301      	movs	r3, #1
 8008764:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 8008768:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800876c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008770:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008774:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	f107 0320 	add.w	r3, r7, #32
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4603      	mov	r3, r0
 8008782:	4836      	ldr	r0, [pc, #216]	@ (800885c <flight_controller_main+0x154>)
 8008784:	f7fc ff86 	bl	8005694 <mpu6500_read>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d006      	beq.n	800879c <flight_controller_main+0x94>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 800878e:	4834      	ldr	r0, [pc, #208]	@ (8008860 <flight_controller_main+0x158>)
 8008790:	f012 fc42 	bl	801b018 <puts>
            flight_control_loop_disarm_esc(&fcl);
 8008794:	4833      	ldr	r0, [pc, #204]	@ (8008864 <flight_controller_main+0x15c>)
 8008796:	f7f9 f862 	bl	800185e <flight_control_loop_disarm_esc>
 800879a:	e052      	b.n	8008842 <flight_controller_main+0x13a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 800879c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80087a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008868 <flight_controller_main+0x160>
 80087a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087a8:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 80087ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80087b0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008868 <flight_controller_main+0x160>
 80087b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087b8:	eef1 7a67 	vneg.f32	s15, s15
 80087bc:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 80087c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80087c4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008868 <flight_controller_main+0x160>
 80087c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087cc:	eef1 7a67 	vneg.f32	s15, s15
 80087d0:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 80087d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80087d8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800886c <flight_controller_main+0x164>
 80087dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087e0:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 80087e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80087e8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800886c <flight_controller_main+0x164>
 80087ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087f0:	eef1 7a67 	vneg.f32	s15, s15
 80087f4:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 80087f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80087fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800886c <flight_controller_main+0x164>
 8008800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008804:	eef1 7a67 	vneg.f32	s15, s15
 8008808:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 800880c:	ed97 5a02 	vldr	s10, [r7, #8]
 8008810:	edd7 5a03 	vldr	s11, [r7, #12]
 8008814:	ed97 6a04 	vldr	s12, [r7, #16]
 8008818:	edd7 6a05 	vldr	s13, [r7, #20]
 800881c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008820:	edd7 7a07 	vldr	s15, [r7, #28]
 8008824:	eef0 1a45 	vmov.f32	s3, s10
 8008828:	eeb0 2a65 	vmov.f32	s4, s11
 800882c:	eef0 2a46 	vmov.f32	s5, s12
 8008830:	eeb0 0a66 	vmov.f32	s0, s13
 8008834:	eef0 0a47 	vmov.f32	s1, s14
 8008838:	eeb0 1a67 	vmov.f32	s2, s15
 800883c:	4809      	ldr	r0, [pc, #36]	@ (8008864 <flight_controller_main+0x15c>)
 800883e:	f7f9 fb5b 	bl	8001ef8 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 8008842:	4808      	ldr	r0, [pc, #32]	@ (8008864 <flight_controller_main+0x15c>)
 8008844:	f7f9 f982 	bl	8001b4c <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008848:	e786      	b.n	8008758 <flight_controller_main+0x50>
 800884a:	bf00      	nop
 800884c:	2000148c 	.word	0x2000148c
 8008850:	200037d4 	.word	0x200037d4
 8008854:	080085a9 	.word	0x080085a9
 8008858:	08020124 	.word	0x08020124
 800885c:	20000338 	.word	0x20000338
 8008860:	08020138 	.word	0x08020138
 8008864:	20001024 	.word	0x20001024
 8008868:	411ce80a 	.word	0x411ce80a
 800886c:	3c8efa35 	.word	0x3c8efa35

08008870 <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b091      	sub	sp, #68	@ 0x44
 8008874:	af02      	add	r7, sp, #8
 8008876:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 8008878:	f00d f800 	bl	801587c <xTaskGetCurrentTaskHandle>
 800887c:	4603      	mov	r3, r0
 800887e:	4a54      	ldr	r2, [pc, #336]	@ (80089d0 <write_motor_main+0x160>)
 8008880:	6013      	str	r3, [r2, #0]

    float duty_cycle;
    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 8008882:	4b54      	ldr	r3, [pc, #336]	@ (80089d4 <write_motor_main+0x164>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <write_motor_main+0x30>
        s_writeMotorTimer = xTimerCreate(
 800888a:	4b53      	ldr	r3, [pc, #332]	@ (80089d8 <write_motor_main+0x168>)
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	2300      	movs	r3, #0
 8008890:	2201      	movs	r2, #1
 8008892:	2102      	movs	r1, #2
 8008894:	4851      	ldr	r0, [pc, #324]	@ (80089dc <write_motor_main+0x16c>)
 8008896:	f00d fb0f 	bl	8015eb8 <xTimerCreate>
 800889a:	4603      	mov	r3, r0
 800889c:	4a4d      	ldr	r2, [pc, #308]	@ (80089d4 <write_motor_main+0x164>)
 800889e:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 80088a0:	4b4c      	ldr	r3, [pc, #304]	@ (80089d4 <write_motor_main+0x164>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <write_motor_main+0x50>
        xTimerStart(s_writeMotorTimer, 0);
 80088a8:	4b4a      	ldr	r3, [pc, #296]	@ (80089d4 <write_motor_main+0x164>)
 80088aa:	681c      	ldr	r4, [r3, #0]
 80088ac:	f00c fc9e 	bl	80151ec <xTaskGetTickCount>
 80088b0:	4602      	mov	r2, r0
 80088b2:	2300      	movs	r3, #0
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	2101      	movs	r1, #1
 80088ba:	4620      	mov	r0, r4
 80088bc:	f00d fb5a 	bl	8015f74 <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 80088c0:	2001      	movs	r0, #1
 80088c2:	f00b fc52 	bl	801416a <xQueueCreateMutex>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4a45      	ldr	r2, [pc, #276]	@ (80089e0 <write_motor_main+0x170>)
 80088ca:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 80088cc:	2210      	movs	r2, #16
 80088ce:	2100      	movs	r1, #0
 80088d0:	4844      	ldr	r0, [pc, #272]	@ (80089e4 <write_motor_main+0x174>)
 80088d2:	f012 fceb 	bl	801b2ac <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 80088d6:	4b42      	ldr	r3, [pc, #264]	@ (80089e0 <write_motor_main+0x170>)
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	2300      	movs	r3, #0
 80088dc:	2200      	movs	r2, #0
 80088de:	2100      	movs	r1, #0
 80088e0:	f00b fc5c 	bl	801419c <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80088e4:	f04f 31ff 	mov.w	r1, #4294967295
 80088e8:	2001      	movs	r0, #1
 80088ea:	f00d f965 	bl	8015bb8 <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 80088ee:	4b3c      	ldr	r3, [pc, #240]	@ (80089e0 <write_motor_main+0x170>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f04f 31ff 	mov.w	r1, #4294967295
 80088f6:	4618      	mov	r0, r3
 80088f8:	f00b fed2 	bl	80146a0 <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 80088fc:	4939      	ldr	r1, [pc, #228]	@ (80089e4 <write_motor_main+0x174>)
 80088fe:	483a      	ldr	r0, [pc, #232]	@ (80089e8 <write_motor_main+0x178>)
 8008900:	f7f9 fb46 	bl	8001f90 <flight_control_loop_get_motors_throttle>
				for(int i=0; i<4; i++){
					g_motors_throttle[i] = target_throttle;
				}
		#endif

        for (size_t i = 0; i < 4; i++) {
 8008904:	2300      	movs	r3, #0
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
 8008908:	e057      	b.n	80089ba <write_motor_main+0x14a>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 800890a:	4a36      	ldr	r2, [pc, #216]	@ (80089e4 <write_motor_main+0x174>)
 800890c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	edd3 7a00 	vldr	s15, [r3]
 8008916:	eef0 1a67 	vmov.f32	s3, s15
 800891a:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 80089ec <write_motor_main+0x17c>
 800891e:	eddf 0a34 	vldr	s1, [pc, #208]	@ 80089f0 <write_motor_main+0x180>
 8008922:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 80089f4 <write_motor_main+0x184>
 8008926:	f7ff fc9d 	bl	8008264 <esc_pwm_throttle_to_duty_cycle>
 800892a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800892e:	2300      	movs	r3, #0
 8008930:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008932:	f3ef 8310 	mrs	r3, PRIMASK
 8008936:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800893a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800893c:	b672      	cpsid	i
}
 800893e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8008940:	f3bf 8f4f 	dsb	sy
}
 8008944:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008946:	f3bf 8f6f 	isb	sy
}
 800894a:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 800894c:	6a3b      	ldr	r3, [r7, #32]
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800894e:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	2b01      	cmp	r3, #1
 8008954:	d001      	beq.n	800895a <write_motor_main+0xea>
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	e000      	b.n	800895c <write_motor_main+0xec>
 800895a:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	2301      	movs	r3, #1
 8008960:	633b      	str	r3, [r7, #48]	@ 0x30
 8008962:	e00d      	b.n	8008980 <write_motor_main+0x110>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 8008964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4a22      	ldr	r2, [pc, #136]	@ (80089f8 <write_motor_main+0x188>)
 8008970:	4413      	add	r3, r2
 8008972:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff fc1c 	bl	80081b4 <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800897c:	2300      	movs	r3, #0
 800897e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ee      	bne.n	8008964 <write_motor_main+0xf4>
 8008986:	f107 030c 	add.w	r3, r7, #12
 800898a:	61bb      	str	r3, [r7, #24]
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8008992:	f3bf 8f5f 	dmb	sy
}
 8008996:	bf00      	nop
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f383 8810 	msr	PRIMASK, r3
}
 80089a2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80089a4:	f3bf 8f4f 	dsb	sy
}
 80089a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089aa:	f3bf 8f6f 	isb	sy
}
 80089ae:	bf00      	nop
}
 80089b0:	bf00      	nop
}
 80089b2:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 80089b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b6:	3301      	adds	r3, #1
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d9a4      	bls.n	800890a <write_motor_main+0x9a>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <write_motor_main+0x170>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	f00b fbe7 	bl	801419c <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80089ce:	e789      	b.n	80088e4 <write_motor_main+0x74>
 80089d0:	20001490 	.word	0x20001490
 80089d4:	200037d8 	.word	0x200037d8
 80089d8:	080085f1 	.word	0x080085f1
 80089dc:	0802014c 	.word	0x0802014c
 80089e0:	20001428 	.word	0x20001428
 80089e4:	2000142c 	.word	0x2000142c
 80089e8:	20001024 	.word	0x20001024
 80089ec:	44fa0000 	.word	0x44fa0000
 80089f0:	447a0000 	.word	0x447a0000
 80089f4:	43c80000 	.word	0x43c80000
 80089f8:	2000143c 	.word	0x2000143c

080089fc <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d804      	bhi.n	8008a22 <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
        return 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e029      	b.n	8008a76 <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	1c59      	adds	r1, r3, #1
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	6011      	str	r1, [r2, #0]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4413      	add	r3, r2
 8008a30:	7bfa      	ldrb	r2, [r7, #15]
 8008a32:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d91b      	bls.n	8008a74 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3b02      	subs	r3, #2
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	4413      	add	r3, r2
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b0d      	cmp	r3, #13
 8008a4a:	d113      	bne.n	8008a74 <line_buffer_add_char+0x78>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b0a      	cmp	r3, #10
 8008a5a:	d10b      	bne.n	8008a74 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3b02      	subs	r3, #2
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	4413      	add	r3, r2
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
	...

08008a84 <rc_control_main>:

static void rc_control_main(void *arg)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b0ec      	sub	sp, #432	@ 0x1b0
 8008a88:	af06      	add	r7, sp, #24
 8008a8a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008a8e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008a92:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 8008a94:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008a98:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    float temp_target_throttle = 0;
 8008aa8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008aac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 8008ab6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008aba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	6053      	str	r3, [r2, #4]
 8008ac6:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 8008ac8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008acc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	6053      	str	r3, [r2, #4]
 8008ad8:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    float temp_arm_flag = 0;
 8008ae2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008ae6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 8008af0:	f04f 0300 	mov.w	r3, #0
 8008af4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    float temp_disarm_flag = 0;
 8008af8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008afc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

    int errors = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    int current_message_corrupted = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 8008b12:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008b16:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
      while (usart1_data_available_for_read() > 0)
 8008b24:	e078      	b.n	8008c18 <rc_control_main+0x194>
      {
          recv_data = usart1_recv_data((char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 8008b26:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8008b2a:	2140      	movs	r1, #64	@ 0x40
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fb93 	bl	800a258 <usart1_recv_data>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
          for(int i=0; i<recv_data; i++){
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008b3e:	e065      	b.n	8008c0c <rc_control_main+0x188>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 8008b40:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8008b44:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008b48:	4413      	add	r3, r2
 8008b4a:	7818      	ldrb	r0, [r3, #0]
 8008b4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008b50:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b58:	f7ff ff50 	bl	80089fc <line_buffer_add_char>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d04f      	beq.n	8008c02 <rc_control_main+0x17e>

				  int temp_str_len = strlen(linebuf);
 8008b62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7f7 fb82 	bl	8000270 <strlen>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
				  temp_str_len -= 6;
 8008b72:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8008b76:	3b06      	subs	r3, #6
 8008b78:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
				  crc_calculated = crc16_ccitt_init();
 8008b7c:	f7f8 fd08 	bl	8001590 <crc16_ccitt_init>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 8008b86:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8008b8a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008b8e:	f8b7 3176 	ldrh.w	r3, [r7, #374]	@ 0x176
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f8 fd38 	bl	8001608 <crc16_ccitt_add_arr>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%x",
 8008b9e:	f107 0114 	add.w	r1, r7, #20
 8008ba2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008ba6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8008baa:	f107 0308 	add.w	r3, r7, #8
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	f107 030c 	add.w	r3, r7, #12
 8008bb4:	9303      	str	r3, [sp, #12]
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	f107 0314 	add.w	r3, r7, #20
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	3304      	adds	r3, #4
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	495c      	ldr	r1, [pc, #368]	@ (8008d40 <rc_control_main+0x2bc>)
 8008bd0:	f012 fa4c 	bl	801b06c <siscanf>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b07      	cmp	r3, #7
 8008bd8:	d103      	bne.n	8008be2 <rc_control_main+0x15e>
						  &temp_target_attitude.z,
						  &temp_arm_flag,
						  &temp_disarm_flag,
						  &crc_received
						  ) == 7) {
					  current_message_corrupted = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8008be0:	e002      	b.n	8008be8 <rc_control_main+0x164>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 8008be8:	f8b7 2176 	ldrh.w	r2, [r7, #374]	@ 0x176
 8008bec:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008bf0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d003      	beq.n	8008c02 <rc_control_main+0x17e>
					  current_message_corrupted = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
					  continue;
 8008c00:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 8008c02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008c06:	3301      	adds	r3, #1
 8008c08:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008c0c:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8008c10:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008c14:	429a      	cmp	r2, r3
 8008c16:	db93      	blt.n	8008b40 <rc_control_main+0xbc>
      while (usart1_data_available_for_read() > 0)
 8008c18:	f001 fb72 	bl	800a300 <usart1_data_available_for_read>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d181      	bne.n	8008b26 <rc_control_main+0xa2>
			  }
          }
      }


      if(current_message_corrupted == 0){
 8008c22:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d123      	bne.n	8008c72 <rc_control_main+0x1ee>
    	  errors = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

          target_attitude = temp_target_attitude;
 8008c30:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c34:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 8008c38:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c3c:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8008c40:	460b      	mov	r3, r1
 8008c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 8008c48:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
          disarm_flag = (temp_disarm_flag);
 8008c56:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c5a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
          target_throttle = temp_target_throttle;
 8008c64:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
      }

      errors += current_message_corrupted;
 8008c72:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8008c76:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 8008c80:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c8c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008d44 <rc_control_main+0x2c0>
 8008c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c98:	db20      	blt.n	8008cdc <rc_control_main+0x258>
    	  target_attitude.x = 0.0f;
 8008c9a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c9e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 8008ca8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008cac:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 8008cb6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008cba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008cbe:	f04f 0200 	mov.w	r2, #0
 8008cc2:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    	  disarm_flag = 1.0f;
 8008ccc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008cd0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    	  arm_flag = 0.0f;
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
      }


      if (arm_flag > 0.5f){
 8008cdc:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8008ce0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cec:	dd02      	ble.n	8008cf4 <rc_control_main+0x270>
    	  flight_control_loop_arm_esc(&fcl);
 8008cee:	4816      	ldr	r0, [pc, #88]	@ (8008d48 <rc_control_main+0x2c4>)
 8008cf0:	f7f8 fd96 	bl	8001820 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 8008cf4:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8008cf8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d04:	dd02      	ble.n	8008d0c <rc_control_main+0x288>
    	  flight_control_loop_disarm_esc(&fcl);
 8008d06:	4810      	ldr	r0, [pc, #64]	@ (8008d48 <rc_control_main+0x2c4>)
 8008d08:	f7f8 fda9 	bl	800185e <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 8008d0c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d10:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008d14:	edd3 6a00 	vldr	s13, [r3]
 8008d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d20:	edd7 1a65 	vldr	s3, [r7, #404]	@ 0x194
 8008d24:	eeb0 0a66 	vmov.f32	s0, s13
 8008d28:	eef0 0a47 	vmov.f32	s1, s14
 8008d2c:	eeb0 1a67 	vmov.f32	s2, s15
 8008d30:	4805      	ldr	r0, [pc, #20]	@ (8008d48 <rc_control_main+0x2c4>)
 8008d32:	f7f9 f841 	bl	8001db8 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 8008d36:	200a      	movs	r0, #10
 8008d38:	f00c f906 	bl	8014f48 <vTaskDelay>
	  current_message_corrupted = 1;
 8008d3c:	e6ef      	b.n	8008b1e <rc_control_main+0x9a>
 8008d3e:	bf00      	nop
 8008d40:	0802015c 	.word	0x0802015c
 8008d44:	42480000 	.word	0x42480000
 8008d48:	20001024 	.word	0x20001024

08008d4c <print_telemetry_data>:
  }

}


static void print_telemetry_data(void *arg){
 8008d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d50:	b0aa      	sub	sp, #168	@ 0xa8
 8008d52:	af06      	add	r7, sp, #24
 8008d54:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 8008d56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	605a      	str	r2, [r3, #4]
 8008d60:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8008d62:	f04f 0300 	mov.w	r3, #0
 8008d66:	633b      	str	r3, [r7, #48]	@ 0x30

    for (;;)
    {
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 8008d68:	4baa      	ldr	r3, [pc, #680]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008d6a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8008d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d72:	4618      	mov	r0, r3
 8008d74:	f00b fc94 	bl	80146a0 <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 8008d78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	48a5      	ldr	r0, [pc, #660]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008d80:	f7fa f9ea 	bl	8003158 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 8008d84:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008d88:	4619      	mov	r1, r3
 8008d8a:	48a2      	ldr	r0, [pc, #648]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008d8c:	f7fa f9f7 	bl	800317e <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8008d90:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8008d94:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8008d98:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008d9c:	489d      	ldr	r0, [pc, #628]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008d9e:	f7fa f9af 	bl	8003100 <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 8008da2:	4b9c      	ldr	r3, [pc, #624]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008da4:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8008da8:	2300      	movs	r3, #0
 8008daa:	2200      	movs	r2, #0
 8008dac:	2100      	movs	r1, #0
 8008dae:	f00b f9f5 	bl	801419c <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 8008db2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008db6:	4619      	mov	r1, r3
 8008db8:	4896      	ldr	r0, [pc, #600]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008dba:	f7f9 f8e9 	bl	8001f90 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 8008dbe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f9 fbfc 	bl	80025c0 <quat2angle>
 8008dc8:	eef0 6a40 	vmov.f32	s13, s0
 8008dcc:	eeb0 7a60 	vmov.f32	s14, s1
 8008dd0:	eef0 7a41 	vmov.f32	s15, s2
 8008dd4:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8008dd8:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8008ddc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 8008de0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008de4:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8009018 <print_telemetry_data+0x2cc>
 8008de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dec:	ee17 0a90 	vmov	r0, s15
 8008df0:	f7f7 fbaa 	bl	8000548 <__aeabi_f2d>
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8008dfc:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8009018 <print_telemetry_data+0x2cc>
 8008e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e04:	ee17 0a90 	vmov	r0, s15
 8008e08:	f7f7 fb9e 	bl	8000548 <__aeabi_f2d>
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	460d      	mov	r5, r1
 8008e10:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008e14:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009018 <print_telemetry_data+0x2cc>
 8008e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e1c:	ee17 0a90 	vmov	r0, s15
 8008e20:	f7f7 fb92 	bl	8000548 <__aeabi_f2d>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e2c:	e9cd 4500 	strd	r4, r5, [sp]
 8008e30:	4642      	mov	r2, r8
 8008e32:	464b      	mov	r3, r9
 8008e34:	4879      	ldr	r0, [pc, #484]	@ (800901c <print_telemetry_data+0x2d0>)
 8008e36:	f012 f87f 	bl	801af38 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
 8008e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f7 fb82 	bl	8000548 <__aeabi_f2d>
 8008e44:	4680      	mov	r8, r0
 8008e46:	4689      	mov	r9, r1
 8008e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f7 fb7b 	bl	8000548 <__aeabi_f2d>
 8008e52:	4604      	mov	r4, r0
 8008e54:	460d      	mov	r5, r1
 8008e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7f7 fb74 	bl	8000548 <__aeabi_f2d>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e68:	e9cd 4500 	strd	r4, r5, [sp]
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	464b      	mov	r3, r9
 8008e70:	486a      	ldr	r0, [pc, #424]	@ (800901c <print_telemetry_data+0x2d0>)
 8008e72:	f012 f861 	bl	801af38 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
 8008e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f7 fb65 	bl	8000548 <__aeabi_f2d>
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4689      	mov	r9, r1
 8008e82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7f7 fb5f 	bl	8000548 <__aeabi_f2d>
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f7 fb58 	bl	8000548 <__aeabi_f2d>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ea0:	e9cd 4500 	strd	r4, r5, [sp]
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	485c      	ldr	r0, [pc, #368]	@ (800901c <print_telemetry_data+0x2d0>)
 8008eaa:	f012 f845 	bl	801af38 <iprintf>
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);
 8008eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f7 fb49 	bl	8000548 <__aeabi_f2d>
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	468b      	mov	fp, r1
 8008eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f7 fb43 	bl	8000548 <__aeabi_f2d>
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7f7 fb3d 	bl	8000548 <__aeabi_f2d>
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7f7 fb37 	bl	8000548 <__aeabi_f2d>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ee2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008ee6:	e9cd 4500 	strd	r4, r5, [sp]
 8008eea:	4652      	mov	r2, sl
 8008eec:	465b      	mov	r3, fp
 8008eee:	484c      	ldr	r0, [pc, #304]	@ (8009020 <print_telemetry_data+0x2d4>)
 8008ef0:	f012 f822 	bl	801af38 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 8008ef4:	4b47      	ldr	r3, [pc, #284]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008ef6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8008efa:	f04f 31ff 	mov.w	r1, #4294967295
 8008efe:	4618      	mov	r0, r3
 8008f00:	f00b fbce 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8008f04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008f08:	f103 0008 	add.w	r0, r3, #8
 8008f0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008f16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	4841      	ldr	r0, [pc, #260]	@ (8009024 <print_telemetry_data+0x2d8>)
 8008f20:	f7fb fc2a 	bl	8004778 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 8008f24:	4b3b      	ldr	r3, [pc, #236]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008f26:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2100      	movs	r1, #0
 8008f30:	f00b f934 	bl	801419c <xQueueGenericSend>
#endif
	//	printf("%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z);
	printf("%.3f;", target_throttle);
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f7 fb06 	bl	8000548 <__aeabi_f2d>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4839      	ldr	r0, [pc, #228]	@ (8009028 <print_telemetry_data+0x2dc>)
 8008f42:	f011 fff9 	bl	801af38 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 8008f46:	4b33      	ldr	r3, [pc, #204]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008f48:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8008f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f50:	4618      	mov	r0, r3
 8008f52:	f00b fba5 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8008f5c:	f04f 0300 	mov.w	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8008f62:	f04f 0300 	mov.w	r3, #0
 8008f66:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8008f68:	f107 0318 	add.w	r3, r7, #24
 8008f6c:	f107 021c 	add.w	r2, r7, #28
 8008f70:	f107 0120 	add.w	r1, r7, #32
 8008f74:	482d      	ldr	r0, [pc, #180]	@ (800902c <print_telemetry_data+0x2e0>)
 8008f76:	f7f8 fae5 	bl	8001544 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8008f7a:	4b26      	ldr	r3, [pc, #152]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008f7c:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8008f80:	2300      	movs	r3, #0
 8008f82:	2200      	movs	r2, #0
 8008f84:	2100      	movs	r1, #0
 8008f86:	f00b f909 	bl	801419c <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8008f8a:	4b22      	ldr	r3, [pc, #136]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008f8c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8008f90:	f04f 31ff 	mov.w	r1, #4294967295
 8008f94:	4618      	mov	r0, r3
 8008f96:	f00b fb83 	bl	80146a0 <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8008fa6:	f04f 0300 	mov.w	r3, #0
 8008faa:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	f107 0210 	add.w	r2, r7, #16
 8008fb4:	f107 0114 	add.w	r1, r7, #20
 8008fb8:	481d      	ldr	r0, [pc, #116]	@ (8009030 <print_telemetry_data+0x2e4>)
 8008fba:	f7fb f93f 	bl	800423c <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8008fbe:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <print_telemetry_data+0x2c8>)
 8008fc0:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f00b f8e7 	bl	801419c <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", pid_roll_output, pid_pitch_output, pid_yaw_output);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f7 fab9 	bl	8000548 <__aeabi_f2d>
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	4689      	mov	r9, r1
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f7 fab3 	bl	8000548 <__aeabi_f2d>
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7f7 faad 	bl	8000548 <__aeabi_f2d>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ff6:	e9cd 4500 	strd	r4, r5, [sp]
 8008ffa:	4642      	mov	r2, r8
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	4807      	ldr	r0, [pc, #28]	@ (800901c <print_telemetry_data+0x2d0>)
 8009000:	f011 ff9a 	bl	801af38 <iprintf>
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)write_h) * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)rc_h)     * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)telem_h)  * sizeof(StackType_t)));


    printf("\n");
 8009004:	200a      	movs	r0, #10
 8009006:	f011 ffa9 	bl	801af5c <putchar>
    vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 800900a:	2032      	movs	r0, #50	@ 0x32
 800900c:	f00b ff9c 	bl	8014f48 <vTaskDelay>
    {
 8009010:	bf00      	nop
 8009012:	e6a9      	b.n	8008d68 <print_telemetry_data+0x1c>
 8009014:	20001024 	.word	0x20001024
 8009018:	42652ee1 	.word	0x42652ee1
 800901c:	08020174 	.word	0x08020174
 8009020:	08020184 	.word	0x08020184
 8009024:	20001314 	.word	0x20001314
 8009028:	0802019c 	.word	0x0802019c
 800902c:	200012e0 	.word	0x200012e0
 8009030:	20001168 	.word	0x20001168

08009034 <app_init>:
    }
}


void app_init(){
 8009034:	b580      	push	{r7, lr}
 8009036:	b08a      	sub	sp, #40	@ 0x28
 8009038:	af00      	add	r7, sp, #0
    init_imu();
 800903a:	f7ff fafd 	bl	8008638 <init_imu>
    flight_control_loop_init(&fcl);
 800903e:	483a      	ldr	r0, [pc, #232]	@ (8009128 <app_init+0xf4>)
 8009040:	f7f8 fc4c 	bl	80018dc <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 8009044:	4838      	ldr	r0, [pc, #224]	@ (8009128 <app_init+0xf4>)
 8009046:	f7f8 fc0a 	bl	800185e <flight_control_loop_disarm_esc>

    float duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 800904a:	eddf 1a38 	vldr	s3, [pc, #224]	@ 800912c <app_init+0xf8>
 800904e:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8009130 <app_init+0xfc>
 8009052:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8009134 <app_init+0x100>
 8009056:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8009138 <app_init+0x104>
 800905a:	f7ff f903 	bl	8008264 <esc_pwm_throttle_to_duty_cycle>
 800905e:	ed87 0a08 	vstr	s0, [r7, #32]
 8009062:	2300      	movs	r3, #0
 8009064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009066:	f3ef 8310 	mrs	r3, PRIMASK
 800906a:	61bb      	str	r3, [r7, #24]
  return(result);
 800906c:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800906e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009070:	b672      	cpsid	i
}
 8009072:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009074:	f3bf 8f4f 	dsb	sy
}
 8009078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800907a:	f3bf 8f6f 	isb	sy
}
 800907e:	bf00      	nop
    return old;
 8009080:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009082:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d001      	beq.n	800908e <app_init+0x5a>
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	e000      	b.n	8009090 <app_init+0x5c>
 800908e:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	2301      	movs	r3, #1
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
 8009096:	e029      	b.n	80090ec <app_init+0xb8>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009098:	edd7 0a08 	vldr	s1, [r7, #32]
 800909c:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8009138 <app_init+0x104>
 80090a0:	4b26      	ldr	r3, [pc, #152]	@ (800913c <app_init+0x108>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	4926      	ldr	r1, [pc, #152]	@ (8009140 <app_init+0x10c>)
 80090a6:	4827      	ldr	r0, [pc, #156]	@ (8009144 <app_init+0x110>)
 80090a8:	f7fe ff86 	bl	8007fb8 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80090ac:	edd7 0a08 	vldr	s1, [r7, #32]
 80090b0:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8009138 <app_init+0x104>
 80090b4:	4b21      	ldr	r3, [pc, #132]	@ (800913c <app_init+0x108>)
 80090b6:	2204      	movs	r2, #4
 80090b8:	4921      	ldr	r1, [pc, #132]	@ (8009140 <app_init+0x10c>)
 80090ba:	4823      	ldr	r0, [pc, #140]	@ (8009148 <app_init+0x114>)
 80090bc:	f7fe ff7c 	bl	8007fb8 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80090c0:	edd7 0a08 	vldr	s1, [r7, #32]
 80090c4:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009138 <app_init+0x104>
 80090c8:	4b1c      	ldr	r3, [pc, #112]	@ (800913c <app_init+0x108>)
 80090ca:	2208      	movs	r2, #8
 80090cc:	491c      	ldr	r1, [pc, #112]	@ (8009140 <app_init+0x10c>)
 80090ce:	481f      	ldr	r0, [pc, #124]	@ (800914c <app_init+0x118>)
 80090d0:	f7fe ff72 	bl	8007fb8 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80090d4:	edd7 0a08 	vldr	s1, [r7, #32]
 80090d8:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8009138 <app_init+0x104>
 80090dc:	4b17      	ldr	r3, [pc, #92]	@ (800913c <app_init+0x108>)
 80090de:	220c      	movs	r2, #12
 80090e0:	4917      	ldr	r1, [pc, #92]	@ (8009140 <app_init+0x10c>)
 80090e2:	481b      	ldr	r0, [pc, #108]	@ (8009150 <app_init+0x11c>)
 80090e4:	f7fe ff68 	bl	8007fb8 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80090e8:	2300      	movs	r3, #0
 80090ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1d2      	bne.n	8009098 <app_init+0x64>
 80090f2:	463b      	mov	r3, r7
 80090f4:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 80090fc:	f3bf 8f5f 	dmb	sy
}
 8009100:	bf00      	nop
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f383 8810 	msr	PRIMASK, r3
}
 800910c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800910e:	f3bf 8f4f 	dsb	sy
}
 8009112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009114:	f3bf 8f6f 	isb	sy
}
 8009118:	bf00      	nop
}
 800911a:	bf00      	nop
}
 800911c:	bf00      	nop
	}
}
 800911e:	bf00      	nop
 8009120:	3728      	adds	r7, #40	@ 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20001024 	.word	0x20001024
 800912c:	00000000 	.word	0x00000000
 8009130:	44fa0000 	.word	0x44fa0000
 8009134:	447a0000 	.word	0x447a0000
 8009138:	43c80000 	.word	0x43c80000
 800913c:	0501bd00 	.word	0x0501bd00
 8009140:	20003880 	.word	0x20003880
 8009144:	2000143c 	.word	0x2000143c
 8009148:	20001450 	.word	0x20001450
 800914c:	20001464 	.word	0x20001464
 8009150:	20001478 	.word	0x20001478

08009154 <app_main_start>:


void app_main_start(void *argument)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b0aa      	sub	sp, #168	@ 0xa8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	app_init();
 800915c:	f7ff ff6a 	bl	8009034 <app_init>
    //   original 13  -> normal
    //   original 5   -> below normal
    //
    // If you need finer spacing, use osPriorityHigh1..7, osPriorityAboveNormal1..7 (if available).

    flight_attr = (osThreadAttr_t){
 8009160:	4b67      	ldr	r3, [pc, #412]	@ (8009300 <app_main_start+0x1ac>)
 8009162:	4618      	mov	r0, r3
 8009164:	2324      	movs	r3, #36	@ 0x24
 8009166:	461a      	mov	r2, r3
 8009168:	2100      	movs	r1, #0
 800916a:	f012 f89f 	bl	801b2ac <memset>
 800916e:	4b64      	ldr	r3, [pc, #400]	@ (8009300 <app_main_start+0x1ac>)
 8009170:	4a64      	ldr	r2, [pc, #400]	@ (8009304 <app_main_start+0x1b0>)
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	4b62      	ldr	r3, [pc, #392]	@ (8009300 <app_main_start+0x1ac>)
 8009176:	4a64      	ldr	r2, [pc, #400]	@ (8009308 <app_main_start+0x1b4>)
 8009178:	609a      	str	r2, [r3, #8]
 800917a:	4b61      	ldr	r3, [pc, #388]	@ (8009300 <app_main_start+0x1ac>)
 800917c:	22a8      	movs	r2, #168	@ 0xa8
 800917e:	60da      	str	r2, [r3, #12]
 8009180:	4b5f      	ldr	r3, [pc, #380]	@ (8009300 <app_main_start+0x1ac>)
 8009182:	4a62      	ldr	r2, [pc, #392]	@ (800930c <app_main_start+0x1b8>)
 8009184:	611a      	str	r2, [r3, #16]
 8009186:	4b5e      	ldr	r3, [pc, #376]	@ (8009300 <app_main_start+0x1ac>)
 8009188:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800918c:	615a      	str	r2, [r3, #20]
 800918e:	4b5c      	ldr	r3, [pc, #368]	@ (8009300 <app_main_start+0x1ac>)
 8009190:	2230      	movs	r2, #48	@ 0x30
 8009192:	619a      	str	r2, [r3, #24]
        .stack_mem  = flight_stack,
        .stack_size = sizeof(flight_stack),
		.cb_mem = &flight_h_taskControlBlock,
		.cb_size = sizeof(flight_h_taskControlBlock)
    };
    flight_h = osThreadNew(flight_controller_main, NULL, &flight_attr);
 8009194:	4a5a      	ldr	r2, [pc, #360]	@ (8009300 <app_main_start+0x1ac>)
 8009196:	2100      	movs	r1, #0
 8009198:	485d      	ldr	r0, [pc, #372]	@ (8009310 <app_main_start+0x1bc>)
 800919a:	f00a fcf1 	bl	8013b80 <osThreadNew>
 800919e:	4603      	mov	r3, r0
 80091a0:	4a5c      	ldr	r2, [pc, #368]	@ (8009314 <app_main_start+0x1c0>)
 80091a2:	6013      	str	r3, [r2, #0]
    configASSERT(flight_h != NULL);
 80091a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009314 <app_main_start+0x1c0>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10c      	bne.n	80091c6 <app_main_start+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <app_main_start+0x6e>

    write_attr = (osThreadAttr_t){
 80091c6:	4b54      	ldr	r3, [pc, #336]	@ (8009318 <app_main_start+0x1c4>)
 80091c8:	4618      	mov	r0, r3
 80091ca:	2324      	movs	r3, #36	@ 0x24
 80091cc:	461a      	mov	r2, r3
 80091ce:	2100      	movs	r1, #0
 80091d0:	f012 f86c 	bl	801b2ac <memset>
 80091d4:	4b50      	ldr	r3, [pc, #320]	@ (8009318 <app_main_start+0x1c4>)
 80091d6:	4a51      	ldr	r2, [pc, #324]	@ (800931c <app_main_start+0x1c8>)
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	4b4f      	ldr	r3, [pc, #316]	@ (8009318 <app_main_start+0x1c4>)
 80091dc:	4a50      	ldr	r2, [pc, #320]	@ (8009320 <app_main_start+0x1cc>)
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009318 <app_main_start+0x1c4>)
 80091e2:	22a8      	movs	r2, #168	@ 0xa8
 80091e4:	60da      	str	r2, [r3, #12]
 80091e6:	4b4c      	ldr	r3, [pc, #304]	@ (8009318 <app_main_start+0x1c4>)
 80091e8:	4a4e      	ldr	r2, [pc, #312]	@ (8009324 <app_main_start+0x1d0>)
 80091ea:	611a      	str	r2, [r3, #16]
 80091ec:	4b4a      	ldr	r3, [pc, #296]	@ (8009318 <app_main_start+0x1c4>)
 80091ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091f2:	615a      	str	r2, [r3, #20]
 80091f4:	4b48      	ldr	r3, [pc, #288]	@ (8009318 <app_main_start+0x1c4>)
 80091f6:	2220      	movs	r2, #32
 80091f8:	619a      	str	r2, [r3, #24]
        .stack_mem  = write_stack,
        .stack_size = sizeof(write_stack),
		.cb_mem = &write_h_taskControlBlock,
		.cb_size = sizeof(write_h_taskControlBlock)
    };
    write_h = osThreadNew(write_motor_main, NULL, &write_attr);
 80091fa:	4a47      	ldr	r2, [pc, #284]	@ (8009318 <app_main_start+0x1c4>)
 80091fc:	2100      	movs	r1, #0
 80091fe:	484a      	ldr	r0, [pc, #296]	@ (8009328 <app_main_start+0x1d4>)
 8009200:	f00a fcbe 	bl	8013b80 <osThreadNew>
 8009204:	4603      	mov	r3, r0
 8009206:	4a49      	ldr	r2, [pc, #292]	@ (800932c <app_main_start+0x1d8>)
 8009208:	6013      	str	r3, [r2, #0]
    configASSERT(write_h != NULL);
 800920a:	4b48      	ldr	r3, [pc, #288]	@ (800932c <app_main_start+0x1d8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10c      	bne.n	800922c <app_main_start+0xd8>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <app_main_start+0xd4>

    rc_attr = (osThreadAttr_t){
 800922c:	4b40      	ldr	r3, [pc, #256]	@ (8009330 <app_main_start+0x1dc>)
 800922e:	4618      	mov	r0, r3
 8009230:	2324      	movs	r3, #36	@ 0x24
 8009232:	461a      	mov	r2, r3
 8009234:	2100      	movs	r1, #0
 8009236:	f012 f839 	bl	801b2ac <memset>
 800923a:	4b3d      	ldr	r3, [pc, #244]	@ (8009330 <app_main_start+0x1dc>)
 800923c:	4a3d      	ldr	r2, [pc, #244]	@ (8009334 <app_main_start+0x1e0>)
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	4b3b      	ldr	r3, [pc, #236]	@ (8009330 <app_main_start+0x1dc>)
 8009242:	4a3d      	ldr	r2, [pc, #244]	@ (8009338 <app_main_start+0x1e4>)
 8009244:	609a      	str	r2, [r3, #8]
 8009246:	4b3a      	ldr	r3, [pc, #232]	@ (8009330 <app_main_start+0x1dc>)
 8009248:	22a8      	movs	r2, #168	@ 0xa8
 800924a:	60da      	str	r2, [r3, #12]
 800924c:	4b38      	ldr	r3, [pc, #224]	@ (8009330 <app_main_start+0x1dc>)
 800924e:	4a3b      	ldr	r2, [pc, #236]	@ (800933c <app_main_start+0x1e8>)
 8009250:	611a      	str	r2, [r3, #16]
 8009252:	4b37      	ldr	r3, [pc, #220]	@ (8009330 <app_main_start+0x1dc>)
 8009254:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009258:	615a      	str	r2, [r3, #20]
 800925a:	4b35      	ldr	r3, [pc, #212]	@ (8009330 <app_main_start+0x1dc>)
 800925c:	2218      	movs	r2, #24
 800925e:	619a      	str	r2, [r3, #24]
        .stack_mem  = rc_stack,
        .stack_size = sizeof(rc_stack),
		.cb_mem = &rc_h_taskControlBlock,
		.cb_size = sizeof(rc_h_taskControlBlock)
    };
    rc_h = osThreadNew(rc_control_main, NULL, &rc_attr);
 8009260:	4a33      	ldr	r2, [pc, #204]	@ (8009330 <app_main_start+0x1dc>)
 8009262:	2100      	movs	r1, #0
 8009264:	4836      	ldr	r0, [pc, #216]	@ (8009340 <app_main_start+0x1ec>)
 8009266:	f00a fc8b 	bl	8013b80 <osThreadNew>
 800926a:	4603      	mov	r3, r0
 800926c:	4a35      	ldr	r2, [pc, #212]	@ (8009344 <app_main_start+0x1f0>)
 800926e:	6013      	str	r3, [r2, #0]
    configASSERT(rc_h != NULL);
 8009270:	4b34      	ldr	r3, [pc, #208]	@ (8009344 <app_main_start+0x1f0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10c      	bne.n	8009292 <app_main_start+0x13e>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <app_main_start+0x13a>

    telem_attr = (osThreadAttr_t){
 8009292:	4b2d      	ldr	r3, [pc, #180]	@ (8009348 <app_main_start+0x1f4>)
 8009294:	4618      	mov	r0, r3
 8009296:	2324      	movs	r3, #36	@ 0x24
 8009298:	461a      	mov	r2, r3
 800929a:	2100      	movs	r1, #0
 800929c:	f012 f806 	bl	801b2ac <memset>
 80092a0:	4b29      	ldr	r3, [pc, #164]	@ (8009348 <app_main_start+0x1f4>)
 80092a2:	4a2a      	ldr	r2, [pc, #168]	@ (800934c <app_main_start+0x1f8>)
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	4b28      	ldr	r3, [pc, #160]	@ (8009348 <app_main_start+0x1f4>)
 80092a8:	4a29      	ldr	r2, [pc, #164]	@ (8009350 <app_main_start+0x1fc>)
 80092aa:	609a      	str	r2, [r3, #8]
 80092ac:	4b26      	ldr	r3, [pc, #152]	@ (8009348 <app_main_start+0x1f4>)
 80092ae:	22a8      	movs	r2, #168	@ 0xa8
 80092b0:	60da      	str	r2, [r3, #12]
 80092b2:	4b25      	ldr	r3, [pc, #148]	@ (8009348 <app_main_start+0x1f4>)
 80092b4:	4a27      	ldr	r2, [pc, #156]	@ (8009354 <app_main_start+0x200>)
 80092b6:	611a      	str	r2, [r3, #16]
 80092b8:	4b23      	ldr	r3, [pc, #140]	@ (8009348 <app_main_start+0x1f4>)
 80092ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092be:	615a      	str	r2, [r3, #20]
 80092c0:	4b21      	ldr	r3, [pc, #132]	@ (8009348 <app_main_start+0x1f4>)
 80092c2:	2210      	movs	r2, #16
 80092c4:	619a      	str	r2, [r3, #24]
        .stack_mem  = telem_stack,
        .stack_size = sizeof(telem_stack),
		.cb_mem = &telem_h_taskControlBlock,
		.cb_size = sizeof(telem_h_taskControlBlock)
    };
    telem_h = osThreadNew(print_telemetry_data, NULL, &telem_attr);
 80092c6:	4a20      	ldr	r2, [pc, #128]	@ (8009348 <app_main_start+0x1f4>)
 80092c8:	2100      	movs	r1, #0
 80092ca:	4823      	ldr	r0, [pc, #140]	@ (8009358 <app_main_start+0x204>)
 80092cc:	f00a fc58 	bl	8013b80 <osThreadNew>
 80092d0:	4603      	mov	r3, r0
 80092d2:	4a22      	ldr	r2, [pc, #136]	@ (800935c <app_main_start+0x208>)
 80092d4:	6013      	str	r3, [r2, #0]
    configASSERT(telem_h != NULL);
 80092d6:	4b21      	ldr	r3, [pc, #132]	@ (800935c <app_main_start+0x208>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10c      	bne.n	80092f8 <app_main_start+0x1a4>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <app_main_start+0x1a0>

//    for (;;) {
//        vTaskDelay(pdMS_TO_TICKS(1000));
//    }
}
 80092f8:	bf00      	nop
 80092fa:	37a8      	adds	r7, #168	@ 0xa8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20003494 	.word	0x20003494
 8009304:	080201a4 	.word	0x080201a4
 8009308:	20003524 	.word	0x20003524
 800930c:	20001494 	.word	0x20001494
 8009310:	08008709 	.word	0x08008709
 8009314:	200037c4 	.word	0x200037c4
 8009318:	200034b8 	.word	0x200034b8
 800931c:	080201bc 	.word	0x080201bc
 8009320:	200035cc 	.word	0x200035cc
 8009324:	20001c94 	.word	0x20001c94
 8009328:	08008871 	.word	0x08008871
 800932c:	200037c8 	.word	0x200037c8
 8009330:	200034dc 	.word	0x200034dc
 8009334:	080201d0 	.word	0x080201d0
 8009338:	20003674 	.word	0x20003674
 800933c:	20002494 	.word	0x20002494
 8009340:	08008a85 	.word	0x08008a85
 8009344:	200037cc 	.word	0x200037cc
 8009348:	20003500 	.word	0x20003500
 800934c:	080201e0 	.word	0x080201e0
 8009350:	2000371c 	.word	0x2000371c
 8009354:	20002c94 	.word	0x20002c94
 8009358:	08008d4d 	.word	0x08008d4d
 800935c:	200037d0 	.word	0x200037d0

08009360 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009364:	4b17      	ldr	r3, [pc, #92]	@ (80093c4 <MX_SPI1_Init+0x64>)
 8009366:	4a18      	ldr	r2, [pc, #96]	@ (80093c8 <MX_SPI1_Init+0x68>)
 8009368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800936a:	4b16      	ldr	r3, [pc, #88]	@ (80093c4 <MX_SPI1_Init+0x64>)
 800936c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009372:	4b14      	ldr	r3, [pc, #80]	@ (80093c4 <MX_SPI1_Init+0x64>)
 8009374:	2200      	movs	r2, #0
 8009376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009378:	4b12      	ldr	r3, [pc, #72]	@ (80093c4 <MX_SPI1_Init+0x64>)
 800937a:	2200      	movs	r2, #0
 800937c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800937e:	4b11      	ldr	r3, [pc, #68]	@ (80093c4 <MX_SPI1_Init+0x64>)
 8009380:	2202      	movs	r2, #2
 8009382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009384:	4b0f      	ldr	r3, [pc, #60]	@ (80093c4 <MX_SPI1_Init+0x64>)
 8009386:	2201      	movs	r2, #1
 8009388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800938a:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <MX_SPI1_Init+0x64>)
 800938c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009392:	4b0c      	ldr	r3, [pc, #48]	@ (80093c4 <MX_SPI1_Init+0x64>)
 8009394:	2220      	movs	r2, #32
 8009396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009398:	4b0a      	ldr	r3, [pc, #40]	@ (80093c4 <MX_SPI1_Init+0x64>)
 800939a:	2200      	movs	r2, #0
 800939c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800939e:	4b09      	ldr	r3, [pc, #36]	@ (80093c4 <MX_SPI1_Init+0x64>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093a4:	4b07      	ldr	r3, [pc, #28]	@ (80093c4 <MX_SPI1_Init+0x64>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80093aa:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <MX_SPI1_Init+0x64>)
 80093ac:	220a      	movs	r2, #10
 80093ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80093b0:	4804      	ldr	r0, [pc, #16]	@ (80093c4 <MX_SPI1_Init+0x64>)
 80093b2:	f003 ffbd 	bl	800d330 <HAL_SPI_Init>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80093bc:	f7ff f8ee 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80093c0:	bf00      	nop
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	200037dc 	.word	0x200037dc
 80093c8:	40013000 	.word	0x40013000

080093cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	@ 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	605a      	str	r2, [r3, #4]
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a19      	ldr	r2, [pc, #100]	@ (8009450 <HAL_SPI_MspInit+0x84>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d12b      	bne.n	8009446 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80093ee:	2300      	movs	r3, #0
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	4b18      	ldr	r3, [pc, #96]	@ (8009454 <HAL_SPI_MspInit+0x88>)
 80093f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f6:	4a17      	ldr	r2, [pc, #92]	@ (8009454 <HAL_SPI_MspInit+0x88>)
 80093f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80093fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80093fe:	4b15      	ldr	r3, [pc, #84]	@ (8009454 <HAL_SPI_MspInit+0x88>)
 8009400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	4b11      	ldr	r3, [pc, #68]	@ (8009454 <HAL_SPI_MspInit+0x88>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009412:	4a10      	ldr	r2, [pc, #64]	@ (8009454 <HAL_SPI_MspInit+0x88>)
 8009414:	f043 0301 	orr.w	r3, r3, #1
 8009418:	6313      	str	r3, [r2, #48]	@ 0x30
 800941a:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <HAL_SPI_MspInit+0x88>)
 800941c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009426:	23e0      	movs	r3, #224	@ 0xe0
 8009428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800942a:	2302      	movs	r3, #2
 800942c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800942e:	2300      	movs	r3, #0
 8009430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009432:	2303      	movs	r3, #3
 8009434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009436:	2305      	movs	r3, #5
 8009438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800943a:	f107 0314 	add.w	r3, r7, #20
 800943e:	4619      	mov	r1, r3
 8009440:	4805      	ldr	r0, [pc, #20]	@ (8009458 <HAL_SPI_MspInit+0x8c>)
 8009442:	f001 fda7 	bl	800af94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009446:	bf00      	nop
 8009448:	3728      	adds	r7, #40	@ 0x28
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	40013000 	.word	0x40013000
 8009454:	40023800 	.word	0x40023800
 8009458:	40020000 	.word	0x40020000

0800945c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	4b12      	ldr	r3, [pc, #72]	@ (80094b0 <HAL_MspInit+0x54>)
 8009468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946a:	4a11      	ldr	r2, [pc, #68]	@ (80094b0 <HAL_MspInit+0x54>)
 800946c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009470:	6453      	str	r3, [r2, #68]	@ 0x44
 8009472:	4b0f      	ldr	r3, [pc, #60]	@ (80094b0 <HAL_MspInit+0x54>)
 8009474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800947a:	607b      	str	r3, [r7, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800947e:	2300      	movs	r3, #0
 8009480:	603b      	str	r3, [r7, #0]
 8009482:	4b0b      	ldr	r3, [pc, #44]	@ (80094b0 <HAL_MspInit+0x54>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	4a0a      	ldr	r2, [pc, #40]	@ (80094b0 <HAL_MspInit+0x54>)
 8009488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800948c:	6413      	str	r3, [r2, #64]	@ 0x40
 800948e:	4b08      	ldr	r3, [pc, #32]	@ (80094b0 <HAL_MspInit+0x54>)
 8009490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800949a:	2200      	movs	r2, #0
 800949c:	210f      	movs	r1, #15
 800949e:	f06f 0001 	mvn.w	r0, #1
 80094a2:	f001 f8df 	bl	800a664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40023800 	.word	0x40023800

080094b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08c      	sub	sp, #48	@ 0x30
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80094c4:	2300      	movs	r3, #0
 80094c6:	60bb      	str	r3, [r7, #8]
 80094c8:	4b2f      	ldr	r3, [pc, #188]	@ (8009588 <HAL_InitTick+0xd4>)
 80094ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094cc:	4a2e      	ldr	r2, [pc, #184]	@ (8009588 <HAL_InitTick+0xd4>)
 80094ce:	f043 0301 	orr.w	r3, r3, #1
 80094d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80094d4:	4b2c      	ldr	r3, [pc, #176]	@ (8009588 <HAL_InitTick+0xd4>)
 80094d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	60bb      	str	r3, [r7, #8]
 80094de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80094e0:	f107 020c 	add.w	r2, r7, #12
 80094e4:	f107 0310 	add.w	r3, r7, #16
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f003 feee 	bl	800d2cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80094f0:	f003 fed8 	bl	800d2a4 <HAL_RCC_GetPCLK2Freq>
 80094f4:	4603      	mov	r3, r0
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80094fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fc:	4a23      	ldr	r2, [pc, #140]	@ (800958c <HAL_InitTick+0xd8>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	0c9b      	lsrs	r3, r3, #18
 8009504:	3b01      	subs	r3, #1
 8009506:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009508:	4b21      	ldr	r3, [pc, #132]	@ (8009590 <HAL_InitTick+0xdc>)
 800950a:	4a22      	ldr	r2, [pc, #136]	@ (8009594 <HAL_InitTick+0xe0>)
 800950c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800950e:	4b20      	ldr	r3, [pc, #128]	@ (8009590 <HAL_InitTick+0xdc>)
 8009510:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009514:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009516:	4a1e      	ldr	r2, [pc, #120]	@ (8009590 <HAL_InitTick+0xdc>)
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800951c:	4b1c      	ldr	r3, [pc, #112]	@ (8009590 <HAL_InitTick+0xdc>)
 800951e:	2200      	movs	r2, #0
 8009520:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009522:	4b1b      	ldr	r3, [pc, #108]	@ (8009590 <HAL_InitTick+0xdc>)
 8009524:	2200      	movs	r2, #0
 8009526:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009528:	4b19      	ldr	r3, [pc, #100]	@ (8009590 <HAL_InitTick+0xdc>)
 800952a:	2200      	movs	r2, #0
 800952c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800952e:	4818      	ldr	r0, [pc, #96]	@ (8009590 <HAL_InitTick+0xdc>)
 8009530:	f004 fcd0 	bl	800ded4 <HAL_TIM_Base_Init>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800953a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800953e:	2b00      	cmp	r3, #0
 8009540:	d11b      	bne.n	800957a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8009542:	4813      	ldr	r0, [pc, #76]	@ (8009590 <HAL_InitTick+0xdc>)
 8009544:	f004 fd7e 	bl	800e044 <HAL_TIM_Base_Start_IT>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800954e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009552:	2b00      	cmp	r3, #0
 8009554:	d111      	bne.n	800957a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009556:	2019      	movs	r0, #25
 8009558:	f001 f8a0 	bl	800a69c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b0f      	cmp	r3, #15
 8009560:	d808      	bhi.n	8009574 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8009562:	2200      	movs	r2, #0
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	2019      	movs	r0, #25
 8009568:	f001 f87c 	bl	800a664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800956c:	4a0a      	ldr	r2, [pc, #40]	@ (8009598 <HAL_InitTick+0xe4>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	e002      	b.n	800957a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800957a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800957e:	4618      	mov	r0, r3
 8009580:	3730      	adds	r7, #48	@ 0x30
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	40023800 	.word	0x40023800
 800958c:	431bde83 	.word	0x431bde83
 8009590:	20003834 	.word	0x20003834
 8009594:	40010000 	.word	0x40010000
 8009598:	20000058 	.word	0x20000058

0800959c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80095a0:	bf00      	nop
 80095a2:	e7fd      	b.n	80095a0 <NMI_Handler+0x4>

080095a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80095a8:	bf00      	nop
 80095aa:	e7fd      	b.n	80095a8 <HardFault_Handler+0x4>

080095ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <MemManage_Handler+0x4>

080095b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80095b8:	bf00      	nop
 80095ba:	e7fd      	b.n	80095b8 <BusFault_Handler+0x4>

080095bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <UsageFault_Handler+0x4>

080095c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80095c8:	bf00      	nop
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
	...

080095d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095d8:	4802      	ldr	r0, [pc, #8]	@ (80095e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80095da:	f004 ff23 	bl	800e424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20003834 	.word	0x20003834

080095e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80095ec:	4802      	ldr	r0, [pc, #8]	@ (80095f8 <TIM4_IRQHandler+0x10>)
 80095ee:	f004 ff19 	bl	800e424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80095f2:	bf00      	nop
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200038c8 	.word	0x200038c8

080095fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009602:	480e      	ldr	r0, [pc, #56]	@ (800963c <USART1_IRQHandler+0x40>)
 8009604:	f005 fe74 	bl	800f2f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8009608:	4b0c      	ldr	r3, [pc, #48]	@ (800963c <USART1_IRQHandler+0x40>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b10      	cmp	r3, #16
 8009614:	d10d      	bne.n	8009632 <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
 800961a:	4b08      	ldr	r3, [pc, #32]	@ (800963c <USART1_IRQHandler+0x40>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	4b06      	ldr	r3, [pc, #24]	@ (800963c <USART1_IRQHandler+0x40>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	607b      	str	r3, [r7, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 800962c:	4803      	ldr	r0, [pc, #12]	@ (800963c <USART1_IRQHandler+0x40>)
 800962e:	f000 fc0d 	bl	8009e4c <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200049b8 	.word	0x200049b8

08009640 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009644:	4802      	ldr	r0, [pc, #8]	@ (8009650 <DMA2_Stream2_IRQHandler+0x10>)
 8009646:	f001 fa3b 	bl	800aac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800964a:	bf00      	nop
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20004a00 	.word	0x20004a00

08009654 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009658:	4802      	ldr	r0, [pc, #8]	@ (8009664 <OTG_FS_IRQHandler+0x10>)
 800965a:	f002 f890 	bl	800b77e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800965e:	bf00      	nop
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	2000a98c 	.word	0x2000a98c

08009668 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800966c:	4802      	ldr	r0, [pc, #8]	@ (8009678 <DMA2_Stream7_IRQHandler+0x10>)
 800966e:	f001 fa27 	bl	800aac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20004a60 	.word	0x20004a60

0800967c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  return 1;
 8009680:	2301      	movs	r3, #1
}
 8009682:	4618      	mov	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <_kill>:

int _kill(int pid, int sig)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009696:	f011 fecb 	bl	801b430 <__errno>
 800969a:	4603      	mov	r3, r0
 800969c:	2216      	movs	r2, #22
 800969e:	601a      	str	r2, [r3, #0]
  return -1;
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <_exit>:

void _exit (int status)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80096b4:	f04f 31ff 	mov.w	r1, #4294967295
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff ffe7 	bl	800968c <_kill>
  while (1) {}    /* Make sure we hang here */
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <_exit+0x12>

080096c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	e00a      	b.n	80096ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80096d4:	f3af 8000 	nop.w
 80096d8:	4601      	mov	r1, r0
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	60ba      	str	r2, [r7, #8]
 80096e0:	b2ca      	uxtb	r2, r1
 80096e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	3301      	adds	r3, #1
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	dbf0      	blt.n	80096d4 <_read+0x12>
  }

  return len;
 80096f2:	687b      	ldr	r3, [r7, #4]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009724:	605a      	str	r2, [r3, #4]
  return 0;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <_isatty>:

int _isatty(int file)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800973c:	2301      	movs	r3, #1
}
 800973e:	4618      	mov	r0, r3
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800976c:	4a14      	ldr	r2, [pc, #80]	@ (80097c0 <_sbrk+0x5c>)
 800976e:	4b15      	ldr	r3, [pc, #84]	@ (80097c4 <_sbrk+0x60>)
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009778:	4b13      	ldr	r3, [pc, #76]	@ (80097c8 <_sbrk+0x64>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009780:	4b11      	ldr	r3, [pc, #68]	@ (80097c8 <_sbrk+0x64>)
 8009782:	4a12      	ldr	r2, [pc, #72]	@ (80097cc <_sbrk+0x68>)
 8009784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009786:	4b10      	ldr	r3, [pc, #64]	@ (80097c8 <_sbrk+0x64>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4413      	add	r3, r2
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	429a      	cmp	r2, r3
 8009792:	d207      	bcs.n	80097a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009794:	f011 fe4c 	bl	801b430 <__errno>
 8009798:	4603      	mov	r3, r0
 800979a:	220c      	movs	r2, #12
 800979c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800979e:	f04f 33ff 	mov.w	r3, #4294967295
 80097a2:	e009      	b.n	80097b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80097a4:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <_sbrk+0x64>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80097aa:	4b07      	ldr	r3, [pc, #28]	@ (80097c8 <_sbrk+0x64>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4413      	add	r3, r2
 80097b2:	4a05      	ldr	r2, [pc, #20]	@ (80097c8 <_sbrk+0x64>)
 80097b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20020000 	.word	0x20020000
 80097c4:	00000400 	.word	0x00000400
 80097c8:	2000387c 	.word	0x2000387c
 80097cc:	2000b1e0 	.word	0x2000b1e0

080097d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80097d4:	4b06      	ldr	r3, [pc, #24]	@ (80097f0 <SystemInit+0x20>)
 80097d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097da:	4a05      	ldr	r2, [pc, #20]	@ (80097f0 <SystemInit+0x20>)
 80097dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80097e4:	bf00      	nop
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	e000ed00 	.word	0xe000ed00

080097f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08e      	sub	sp, #56	@ 0x38
 80097f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80097fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	605a      	str	r2, [r3, #4]
 8009804:	609a      	str	r2, [r3, #8]
 8009806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009808:	f107 0320 	add.w	r3, r7, #32
 800980c:	2200      	movs	r2, #0
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009812:	1d3b      	adds	r3, r7, #4
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	609a      	str	r2, [r3, #8]
 800981c:	60da      	str	r2, [r3, #12]
 800981e:	611a      	str	r2, [r3, #16]
 8009820:	615a      	str	r2, [r3, #20]
 8009822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009824:	4b3d      	ldr	r3, [pc, #244]	@ (800991c <MX_TIM2_Init+0x128>)
 8009826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800982a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800982c:	4b3b      	ldr	r3, [pc, #236]	@ (800991c <MX_TIM2_Init+0x128>)
 800982e:	2200      	movs	r2, #0
 8009830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009832:	4b3a      	ldr	r3, [pc, #232]	@ (800991c <MX_TIM2_Init+0x128>)
 8009834:	2200      	movs	r2, #0
 8009836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8009838:	4b38      	ldr	r3, [pc, #224]	@ (800991c <MX_TIM2_Init+0x128>)
 800983a:	2200      	movs	r2, #0
 800983c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800983e:	4b37      	ldr	r3, [pc, #220]	@ (800991c <MX_TIM2_Init+0x128>)
 8009840:	2200      	movs	r2, #0
 8009842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009844:	4b35      	ldr	r3, [pc, #212]	@ (800991c <MX_TIM2_Init+0x128>)
 8009846:	2280      	movs	r2, #128	@ 0x80
 8009848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800984a:	4834      	ldr	r0, [pc, #208]	@ (800991c <MX_TIM2_Init+0x128>)
 800984c:	f004 fb42 	bl	800ded4 <HAL_TIM_Base_Init>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8009856:	f7fe fea1 	bl	800859c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800985a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800985e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009860:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009864:	4619      	mov	r1, r3
 8009866:	482d      	ldr	r0, [pc, #180]	@ (800991c <MX_TIM2_Init+0x128>)
 8009868:	f004 ff8e 	bl	800e788 <HAL_TIM_ConfigClockSource>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8009872:	f7fe fe93 	bl	800859c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009876:	4829      	ldr	r0, [pc, #164]	@ (800991c <MX_TIM2_Init+0x128>)
 8009878:	f004 fc54 	bl	800e124 <HAL_TIM_PWM_Init>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8009882:	f7fe fe8b 	bl	800859c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009886:	2300      	movs	r3, #0
 8009888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800988a:	2300      	movs	r3, #0
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800988e:	f107 0320 	add.w	r3, r7, #32
 8009892:	4619      	mov	r1, r3
 8009894:	4821      	ldr	r0, [pc, #132]	@ (800991c <MX_TIM2_Init+0x128>)
 8009896:	f005 fb83 	bl	800efa0 <HAL_TIMEx_MasterConfigSynchronization>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80098a0:	f7fe fe7c 	bl	800859c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098a4:	2360      	movs	r3, #96	@ 0x60
 80098a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098b4:	1d3b      	adds	r3, r7, #4
 80098b6:	2200      	movs	r2, #0
 80098b8:	4619      	mov	r1, r3
 80098ba:	4818      	ldr	r0, [pc, #96]	@ (800991c <MX_TIM2_Init+0x128>)
 80098bc:	f004 fea2 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80098c6:	f7fe fe69 	bl	800859c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80098ca:	1d3b      	adds	r3, r7, #4
 80098cc:	2204      	movs	r2, #4
 80098ce:	4619      	mov	r1, r3
 80098d0:	4812      	ldr	r0, [pc, #72]	@ (800991c <MX_TIM2_Init+0x128>)
 80098d2:	f004 fe97 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80098dc:	f7fe fe5e 	bl	800859c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80098e0:	1d3b      	adds	r3, r7, #4
 80098e2:	2208      	movs	r2, #8
 80098e4:	4619      	mov	r1, r3
 80098e6:	480d      	ldr	r0, [pc, #52]	@ (800991c <MX_TIM2_Init+0x128>)
 80098e8:	f004 fe8c 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80098f2:	f7fe fe53 	bl	800859c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80098f6:	1d3b      	adds	r3, r7, #4
 80098f8:	220c      	movs	r2, #12
 80098fa:	4619      	mov	r1, r3
 80098fc:	4807      	ldr	r0, [pc, #28]	@ (800991c <MX_TIM2_Init+0x128>)
 80098fe:	f004 fe81 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8009908:	f7fe fe48 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800990c:	4803      	ldr	r0, [pc, #12]	@ (800991c <MX_TIM2_Init+0x128>)
 800990e:	f000 f897 	bl	8009a40 <HAL_TIM_MspPostInit>

}
 8009912:	bf00      	nop
 8009914:	3738      	adds	r7, #56	@ 0x38
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20003880 	.word	0x20003880

08009920 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	609a      	str	r2, [r3, #8]
 8009932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009934:	463b      	mov	r3, r7
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800993c:	4b20      	ldr	r3, [pc, #128]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 800993e:	4a21      	ldr	r2, [pc, #132]	@ (80099c4 <MX_TIM4_Init+0xa4>)
 8009940:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8009942:	4b1f      	ldr	r3, [pc, #124]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 8009944:	2253      	movs	r2, #83	@ 0x53
 8009946:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009948:	4b1d      	ldr	r3, [pc, #116]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 800994a:	2200      	movs	r2, #0
 800994c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800994e:	4b1c      	ldr	r3, [pc, #112]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 8009950:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009954:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009956:	4b1a      	ldr	r3, [pc, #104]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 8009958:	2200      	movs	r2, #0
 800995a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800995c:	4b18      	ldr	r3, [pc, #96]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 800995e:	2200      	movs	r2, #0
 8009960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009962:	4817      	ldr	r0, [pc, #92]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 8009964:	f004 fab6 	bl	800ded4 <HAL_TIM_Base_Init>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800996e:	f7fe fe15 	bl	800859c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	4619      	mov	r1, r3
 800997e:	4810      	ldr	r0, [pc, #64]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 8009980:	f004 ff02 	bl	800e788 <HAL_TIM_ConfigClockSource>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800998a:	f7fe fe07 	bl	800859c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800998e:	2300      	movs	r3, #0
 8009990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009996:	463b      	mov	r3, r7
 8009998:	4619      	mov	r1, r3
 800999a:	4809      	ldr	r0, [pc, #36]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 800999c:	f005 fb00 	bl	800efa0 <HAL_TIMEx_MasterConfigSynchronization>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80099a6:	f7fe fdf9 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80099aa:	4805      	ldr	r0, [pc, #20]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 80099ac:	f004 fb4a 	bl	800e044 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80099b0:	4803      	ldr	r0, [pc, #12]	@ (80099c0 <MX_TIM4_Init+0xa0>)
 80099b2:	f004 fadf 	bl	800df74 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80099b6:	bf00      	nop
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	200038c8 	.word	0x200038c8
 80099c4:	40000800 	.word	0x40000800

080099c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d8:	d10e      	bne.n	80099f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
 80099de:	4b16      	ldr	r3, [pc, #88]	@ (8009a38 <HAL_TIM_Base_MspInit+0x70>)
 80099e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e2:	4a15      	ldr	r2, [pc, #84]	@ (8009a38 <HAL_TIM_Base_MspInit+0x70>)
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80099ea:	4b13      	ldr	r3, [pc, #76]	@ (8009a38 <HAL_TIM_Base_MspInit+0x70>)
 80099ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80099f6:	e01a      	b.n	8009a2e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a0f      	ldr	r2, [pc, #60]	@ (8009a3c <HAL_TIM_Base_MspInit+0x74>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d115      	bne.n	8009a2e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009a02:	2300      	movs	r3, #0
 8009a04:	60bb      	str	r3, [r7, #8]
 8009a06:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <HAL_TIM_Base_MspInit+0x70>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8009a38 <HAL_TIM_Base_MspInit+0x70>)
 8009a0c:	f043 0304 	orr.w	r3, r3, #4
 8009a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a12:	4b09      	ldr	r3, [pc, #36]	@ (8009a38 <HAL_TIM_Base_MspInit+0x70>)
 8009a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	60bb      	str	r3, [r7, #8]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2105      	movs	r1, #5
 8009a22:	201e      	movs	r0, #30
 8009a24:	f000 fe1e 	bl	800a664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009a28:	201e      	movs	r0, #30
 8009a2a:	f000 fe37 	bl	800a69c <HAL_NVIC_EnableIRQ>
}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	40000800 	.word	0x40000800

08009a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08a      	sub	sp, #40	@ 0x28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a48:	f107 0314 	add.w	r3, r7, #20
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	609a      	str	r2, [r3, #8]
 8009a54:	60da      	str	r2, [r3, #12]
 8009a56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a60:	d13c      	bne.n	8009adc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a62:	2300      	movs	r3, #0
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae4 <HAL_TIM_MspPostInit+0xa4>)
 8009a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae4 <HAL_TIM_MspPostInit+0xa4>)
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a72:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae4 <HAL_TIM_MspPostInit+0xa4>)
 8009a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	4b18      	ldr	r3, [pc, #96]	@ (8009ae4 <HAL_TIM_MspPostInit+0xa4>)
 8009a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a86:	4a17      	ldr	r2, [pc, #92]	@ (8009ae4 <HAL_TIM_MspPostInit+0xa4>)
 8009a88:	f043 0302 	orr.w	r3, r3, #2
 8009a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <HAL_TIM_MspPostInit+0xa4>)
 8009a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8009a9a:	f248 030c 	movw	r3, #32780	@ 0x800c
 8009a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009aac:	2301      	movs	r3, #1
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ab0:	f107 0314 	add.w	r3, r7, #20
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	480c      	ldr	r0, [pc, #48]	@ (8009ae8 <HAL_TIM_MspPostInit+0xa8>)
 8009ab8:	f001 fa6c 	bl	800af94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009abc:	2308      	movs	r3, #8
 8009abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009acc:	2301      	movs	r3, #1
 8009ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ad0:	f107 0314 	add.w	r3, r7, #20
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4805      	ldr	r0, [pc, #20]	@ (8009aec <HAL_TIM_MspPostInit+0xac>)
 8009ad8:	f001 fa5c 	bl	800af94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009adc:	bf00      	nop
 8009ade:	3728      	adds	r7, #40	@ 0x28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	40020000 	.word	0x40020000
 8009aec:	40020400 	.word	0x40020400

08009af0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	ring_buffer_init(&usart1_tx_ring_buffer, usart1_tx_buffer, USART1_TX_BUFFER_SIZE);
 8009af6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009afa:	4929      	ldr	r1, [pc, #164]	@ (8009ba0 <MX_USART1_UART_Init+0xb0>)
 8009afc:	4829      	ldr	r0, [pc, #164]	@ (8009ba4 <MX_USART1_UART_Init+0xb4>)
 8009afe:	f7fe f815 	bl	8007b2c <ring_buffer_init>
	ring_buffer_init(&usart1_rx_ring_buffer, usart1_rx_buffer, USART1_RX_BUFFER_SIZE);
 8009b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b06:	4928      	ldr	r1, [pc, #160]	@ (8009ba8 <MX_USART1_UART_Init+0xb8>)
 8009b08:	4828      	ldr	r0, [pc, #160]	@ (8009bac <MX_USART1_UART_Init+0xbc>)
 8009b0a:	f7fe f80f 	bl	8007b2c <ring_buffer_init>
	usart1_last_tx_size = 0;
 8009b0e:	4b28      	ldr	r3, [pc, #160]	@ (8009bb0 <MX_USART1_UART_Init+0xc0>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009b14:	4b27      	ldr	r3, [pc, #156]	@ (8009bb4 <MX_USART1_UART_Init+0xc4>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009b1a:	4b27      	ldr	r3, [pc, #156]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b1c:	4a27      	ldr	r2, [pc, #156]	@ (8009bbc <MX_USART1_UART_Init+0xcc>)
 8009b1e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009b20:	4b25      	ldr	r3, [pc, #148]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b22:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009b26:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009b28:	4b23      	ldr	r3, [pc, #140]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009b2e:	4b22      	ldr	r3, [pc, #136]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009b34:	4b20      	ldr	r3, [pc, #128]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b3c:	220c      	movs	r2, #12
 8009b3e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b40:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8009b46:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009b4e:	481a      	ldr	r0, [pc, #104]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b50:	f005 fab6 	bl	800f0c0 <HAL_UART_Init>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8009b5a:	f7fe fd1f 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 8009b5e:	4813      	ldr	r0, [pc, #76]	@ (8009bac <MX_USART1_UART_Init+0xbc>)
 8009b60:	f7fe f83b 	bl	8007bda <ring_buffer_linear_free_space>
 8009b64:	4603      	mov	r3, r0
 8009b66:	80fb      	strh	r3, [r7, #6]
  uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 8009b68:	4810      	ldr	r0, [pc, #64]	@ (8009bac <MX_USART1_UART_Init+0xbc>)
 8009b6a:	f7fe f878 	bl	8007c5e <ring_buffer_write_ptr>
 8009b6e:	6038      	str	r0, [r7, #0]
//   usart1_last_rx_len = rx_buffer_remaining_free;
//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

  HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 8009b70:	2280      	movs	r2, #128	@ 0x80
 8009b72:	4913      	ldr	r1, [pc, #76]	@ (8009bc0 <MX_USART1_UART_Init+0xd0>)
 8009b74:	4810      	ldr	r0, [pc, #64]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b76:	f005 fb95 	bl	800f2a4 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 8009b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb4 <MX_USART1_UART_Init+0xc4>)
 8009b7c:	2280      	movs	r2, #128	@ 0x80
 8009b7e:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 8009b80:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <MX_USART1_UART_Init+0xd4>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8009b86:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb8 <MX_USART1_UART_Init+0xc8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 0210 	orr.w	r2, r2, #16
 8009b94:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20004110 	.word	0x20004110
 8009ba4:	20004910 	.word	0x20004910
 8009ba8:	20003910 	.word	0x20003910
 8009bac:	20004920 	.word	0x20004920
 8009bb0:	20004930 	.word	0x20004930
 8009bb4:	20004932 	.word	0x20004932
 8009bb8:	200049b8 	.word	0x200049b8
 8009bbc:	40011000 	.word	0x40011000
 8009bc0:	20004934 	.word	0x20004934
 8009bc4:	200049b4 	.word	0x200049b4

08009bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08a      	sub	sp, #40	@ 0x28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd0:	f107 0314 	add.w	r3, r7, #20
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	609a      	str	r2, [r3, #8]
 8009bdc:	60da      	str	r2, [r3, #12]
 8009bde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a4c      	ldr	r2, [pc, #304]	@ (8009d18 <HAL_UART_MspInit+0x150>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f040 8092 	bne.w	8009d10 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
 8009bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8009d1c <HAL_UART_MspInit+0x154>)
 8009bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf4:	4a49      	ldr	r2, [pc, #292]	@ (8009d1c <HAL_UART_MspInit+0x154>)
 8009bf6:	f043 0310 	orr.w	r3, r3, #16
 8009bfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8009bfc:	4b47      	ldr	r3, [pc, #284]	@ (8009d1c <HAL_UART_MspInit+0x154>)
 8009bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c00:	f003 0310 	and.w	r3, r3, #16
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	4b43      	ldr	r3, [pc, #268]	@ (8009d1c <HAL_UART_MspInit+0x154>)
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	4a42      	ldr	r2, [pc, #264]	@ (8009d1c <HAL_UART_MspInit+0x154>)
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c18:	4b40      	ldr	r3, [pc, #256]	@ (8009d1c <HAL_UART_MspInit+0x154>)
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009c24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c32:	2303      	movs	r3, #3
 8009c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c36:	2307      	movs	r3, #7
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c3a:	f107 0314 	add.w	r3, r7, #20
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4837      	ldr	r0, [pc, #220]	@ (8009d20 <HAL_UART_MspInit+0x158>)
 8009c42:	f001 f9a7 	bl	800af94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009c46:	4b37      	ldr	r3, [pc, #220]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c48:	4a37      	ldr	r2, [pc, #220]	@ (8009d28 <HAL_UART_MspInit+0x160>)
 8009c4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009c4c:	4b35      	ldr	r3, [pc, #212]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009c52:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009c54:	4b33      	ldr	r3, [pc, #204]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c5a:	4b32      	ldr	r3, [pc, #200]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009c60:	4b30      	ldr	r3, [pc, #192]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c66:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c68:	4b2e      	ldr	r3, [pc, #184]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009c74:	4b2b      	ldr	r3, [pc, #172]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009c7c:	4b29      	ldr	r3, [pc, #164]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c82:	4b28      	ldr	r3, [pc, #160]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009c88:	4826      	ldr	r0, [pc, #152]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c8a:	f000 fd23 	bl	800a6d4 <HAL_DMA_Init>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8009c94:	f7fe fc82 	bl	800859c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a22      	ldr	r2, [pc, #136]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009c9e:	4a21      	ldr	r2, [pc, #132]	@ (8009d24 <HAL_UART_MspInit+0x15c>)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009ca4:	4b21      	ldr	r3, [pc, #132]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009ca6:	4a22      	ldr	r2, [pc, #136]	@ (8009d30 <HAL_UART_MspInit+0x168>)
 8009ca8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009caa:	4b20      	ldr	r3, [pc, #128]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cb4:	2240      	movs	r2, #64	@ 0x40
 8009cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009cc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009cc6:	4b19      	ldr	r3, [pc, #100]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ccc:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009cd2:	4b16      	ldr	r3, [pc, #88]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009cd8:	4b14      	ldr	r3, [pc, #80]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009cde:	4b13      	ldr	r3, [pc, #76]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009ce4:	4811      	ldr	r0, [pc, #68]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009ce6:	f000 fcf5 	bl	800a6d4 <HAL_DMA_Init>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8009cf0:	f7fe fc54 	bl	800859c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8009d2c <HAL_UART_MspInit+0x164>)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8009d00:	2200      	movs	r2, #0
 8009d02:	2105      	movs	r1, #5
 8009d04:	2025      	movs	r0, #37	@ 0x25
 8009d06:	f000 fcad 	bl	800a664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009d0a:	2025      	movs	r0, #37	@ 0x25
 8009d0c:	f000 fcc6 	bl	800a69c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009d10:	bf00      	nop
 8009d12:	3728      	adds	r7, #40	@ 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	40011000 	.word	0x40011000
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	40020000 	.word	0x40020000
 8009d24:	20004a00 	.word	0x20004a00
 8009d28:	40026440 	.word	0x40026440
 8009d2c:	20004a60 	.word	0x20004a60
 8009d30:	400264b8 	.word	0x400264b8

08009d34 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a15      	ldr	r2, [pc, #84]	@ (8009d98 <HAL_UART_MspDeInit+0x64>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d123      	bne.n	8009d8e <HAL_UART_MspDeInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8009d46:	4b15      	ldr	r3, [pc, #84]	@ (8009d9c <HAL_UART_MspDeInit+0x68>)
 8009d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d4a:	4a14      	ldr	r2, [pc, #80]	@ (8009d9c <HAL_UART_MspDeInit+0x68>)
 8009d4c:	f023 0310 	bic.w	r3, r3, #16
 8009d50:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8009d52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009d56:	4812      	ldr	r0, [pc, #72]	@ (8009da0 <HAL_UART_MspDeInit+0x6c>)
 8009d58:	f001 fab8 	bl	800b2cc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fd65 	bl	800a830 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fd60 	bl	800a830 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009d70:	2025      	movs	r0, #37	@ 0x25
 8009d72:	f000 fca1 	bl	800a6b8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
	usart1_last_tx_size = 0;
 8009d76:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <HAL_UART_MspDeInit+0x70>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009da8 <HAL_UART_MspDeInit+0x74>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	801a      	strh	r2, [r3, #0]
	ring_buffer_clear(&usart1_tx_ring_buffer);
 8009d82:	480a      	ldr	r0, [pc, #40]	@ (8009dac <HAL_UART_MspDeInit+0x78>)
 8009d84:	f7fe f85f 	bl	8007e46 <ring_buffer_clear>
	ring_buffer_clear(&usart1_rx_ring_buffer);
 8009d88:	4809      	ldr	r0, [pc, #36]	@ (8009db0 <HAL_UART_MspDeInit+0x7c>)
 8009d8a:	f7fe f85c 	bl	8007e46 <ring_buffer_clear>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	40011000 	.word	0x40011000
 8009d9c:	40023800 	.word	0x40023800
 8009da0:	40020000 	.word	0x40020000
 8009da4:	20004930 	.word	0x20004930
 8009da8:	20004932 	.word	0x20004932
 8009dac:	20004910 	.word	0x20004910
 8009db0:	20004920 	.word	0x20004920

08009db4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a19      	ldr	r2, [pc, #100]	@ (8009e28 <HAL_UART_TxCpltCallback+0x74>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d12b      	bne.n	8009e1e <HAL_UART_TxCpltCallback+0x6a>
    {

    	if(huart1.gState == HAL_UART_STATE_READY)
 8009dc6:	4b19      	ldr	r3, [pc, #100]	@ (8009e2c <HAL_UART_TxCpltCallback+0x78>)
 8009dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d125      	bne.n	8009e1e <HAL_UART_TxCpltCallback+0x6a>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&usart1_tx_ring_buffer, usart1_last_tx_size);
 8009dd2:	4b17      	ldr	r3, [pc, #92]	@ (8009e30 <HAL_UART_TxCpltCallback+0x7c>)
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4816      	ldr	r0, [pc, #88]	@ (8009e34 <HAL_UART_TxCpltCallback+0x80>)
 8009ddc:	f7fe f813 	bl	8007e06 <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 8009de0:	4814      	ldr	r0, [pc, #80]	@ (8009e34 <HAL_UART_TxCpltCallback+0x80>)
 8009de2:	f7fd ff21 	bl	8007c28 <ring_buffer_linear_used_space>
 8009de6:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	2b80      	cmp	r3, #128	@ 0x80
 8009dec:	bf28      	it	cs
 8009dee:	2380      	movcs	r3, #128	@ 0x80
 8009df0:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 8009df2:	4810      	ldr	r0, [pc, #64]	@ (8009e34 <HAL_UART_TxCpltCallback+0x80>)
 8009df4:	f7fd ff42 	bl	8007c7c <ring_buffer_read_ptr>
 8009df8:	60f8      	str	r0, [r7, #12]
			usart1_last_tx_size = frame_size;
 8009dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8009e30 <HAL_UART_TxCpltCallback+0x7c>)
 8009dfc:	8a7b      	ldrh	r3, [r7, #18]
 8009dfe:	8013      	strh	r3, [r2, #0]

			if (frame_size > 0)
 8009e00:	8a7b      	ldrh	r3, [r7, #18]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <HAL_UART_TxCpltCallback+0x6a>
			{
		        if (HAL_UART_Transmit_DMA(huart, next_chunk, frame_size) != HAL_OK) {
 8009e06:	8a7b      	ldrh	r3, [r7, #18]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68f9      	ldr	r1, [r7, #12]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f005 f9d9 	bl	800f1c4 <HAL_UART_Transmit_DMA>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <HAL_UART_TxCpltCallback+0x6a>
		            usart1_last_tx_size = 0;
 8009e18:	4b05      	ldr	r3, [pc, #20]	@ (8009e30 <HAL_UART_TxCpltCallback+0x7c>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
    }
}
 8009e1e:	bf00      	nop
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40011000 	.word	0x40011000
 8009e2c:	200049b8 	.word	0x200049b8
 8009e30:	20004930 	.word	0x20004930
 8009e34:	20004910 	.word	0x20004910

08009e38 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a26      	ldr	r2, [pc, #152]	@ (8009ef4 <HAL_UART_IDLECallback+0xa8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d147      	bne.n	8009eee <HAL_UART_IDLECallback+0xa2>

    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009e6a:	617b      	str	r3, [r7, #20]

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009e6c:	4b22      	ldr	r3, [pc, #136]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d038      	beq.n	8009eec <HAL_UART_IDLECallback+0xa0>

    if (dma_pos > usart1_dma_last_pos) {
 8009e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	4293      	cmp	r3, r2
 8009e86:	dd12      	ble.n	8009eae <HAL_UART_IDLECallback+0x62>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 8009e88:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	461a      	mov	r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	1a9b      	subs	r3, r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 8009e96:	4b18      	ldr	r3, [pc, #96]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e9e:	4b17      	ldr	r3, [pc, #92]	@ (8009efc <HAL_UART_IDLECallback+0xb0>)
 8009ea0:	4413      	add	r3, r2
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4816      	ldr	r0, [pc, #88]	@ (8009f00 <HAL_UART_IDLECallback+0xb4>)
 8009ea8:	f7fd fef7 	bl	8007c9a <ring_buffer_enqueue_arr>
 8009eac:	e019      	b.n	8009ee2 <HAL_UART_IDLECallback+0x96>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 8009eae:	4b12      	ldr	r3, [pc, #72]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009eb8:	613b      	str	r3, [r7, #16]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 8009eba:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8009efc <HAL_UART_IDLECallback+0xb0>)
 8009ec4:	4413      	add	r3, r2
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	480d      	ldr	r0, [pc, #52]	@ (8009f00 <HAL_UART_IDLECallback+0xb4>)
 8009ecc:	f7fd fee5 	bl	8007c9a <ring_buffer_enqueue_arr>
        if (dma_pos) {
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <HAL_UART_IDLECallback+0x96>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4908      	ldr	r1, [pc, #32]	@ (8009efc <HAL_UART_IDLECallback+0xb0>)
 8009edc:	4808      	ldr	r0, [pc, #32]	@ (8009f00 <HAL_UART_IDLECallback+0xb4>)
 8009ede:	f7fd fedc 	bl	8007c9a <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <HAL_UART_IDLECallback+0xac>)
 8009ee8:	801a      	strh	r2, [r3, #0]
 8009eea:	e000      	b.n	8009eee <HAL_UART_IDLECallback+0xa2>
    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009eec:	bf00      	nop
    }
}
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40011000 	.word	0x40011000
 8009ef8:	200049b4 	.word	0x200049b4
 8009efc:	20004934 	.word	0x20004934
 8009f00:	20004920 	.word	0x20004920

08009f04 <usart1_read_dma_buffer>:


void usart1_read_dma_buffer()
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08c      	sub	sp, #48	@ 0x30
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f12:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f14:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f18:	b672      	cpsid	i
}
 8009f1a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009f1c:	f3bf 8f4f 	dsb	sy
}
 8009f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f22:	f3bf 8f6f 	isb	sy
}
 8009f26:	bf00      	nop
    return old;
 8009f28:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009f2a:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d001      	beq.n	8009f36 <usart1_read_dma_buffer+0x32>
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	e000      	b.n	8009f38 <usart1_read_dma_buffer+0x34>
 8009f36:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009f38:	603b      	str	r3, [r7, #0]
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f3e:	e049      	b.n	8009fd4 <usart1_read_dma_buffer+0xd0>
	{
    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
 8009f40:	4b33      	ldr	r3, [pc, #204]	@ (800a010 <usart1_read_dma_buffer+0x10c>)
 8009f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009f4c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009f4e:	4b31      	ldr	r3, [pc, #196]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d101      	bne.n	8009f60 <usart1_read_dma_buffer+0x5c>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e03d      	b.n	8009fdc <usart1_read_dma_buffer+0xd8>

    if (dma_pos > usart1_dma_last_pos) {
 8009f60:	4b2c      	ldr	r3, [pc, #176]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	dd12      	ble.n	8009f94 <usart1_read_dma_buffer+0x90>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 8009f6e:	4b29      	ldr	r3, [pc, #164]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	461a      	mov	r2, r3
 8009f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f78:	1a9b      	subs	r3, r3, r2
 8009f7a:	623b      	str	r3, [r7, #32]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 8009f7c:	4b25      	ldr	r3, [pc, #148]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009f84:	4b24      	ldr	r3, [pc, #144]	@ (800a018 <usart1_read_dma_buffer+0x114>)
 8009f86:	4413      	add	r3, r2
 8009f88:	6a3a      	ldr	r2, [r7, #32]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4823      	ldr	r0, [pc, #140]	@ (800a01c <usart1_read_dma_buffer+0x118>)
 8009f8e:	f7fd fe84 	bl	8007c9a <ring_buffer_enqueue_arr>
 8009f92:	e019      	b.n	8009fc8 <usart1_read_dma_buffer+0xc4>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 8009f94:	4b1f      	ldr	r3, [pc, #124]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 8009fa0:	4b1c      	ldr	r3, [pc, #112]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009fa8:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <usart1_read_dma_buffer+0x114>)
 8009faa:	4413      	add	r3, r2
 8009fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fae:	4619      	mov	r1, r3
 8009fb0:	481a      	ldr	r0, [pc, #104]	@ (800a01c <usart1_read_dma_buffer+0x118>)
 8009fb2:	f7fd fe72 	bl	8007c9a <ring_buffer_enqueue_arr>
        if (dma_pos) {
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <usart1_read_dma_buffer+0xc4>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	4915      	ldr	r1, [pc, #84]	@ (800a018 <usart1_read_dma_buffer+0x114>)
 8009fc2:	4816      	ldr	r0, [pc, #88]	@ (800a01c <usart1_read_dma_buffer+0x118>)
 8009fc4:	f7fd fe69 	bl	8007c9a <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 8009fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	4b11      	ldr	r3, [pc, #68]	@ (800a014 <usart1_read_dma_buffer+0x110>)
 8009fce:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1b2      	bne.n	8009f40 <usart1_read_dma_buffer+0x3c>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	463a      	mov	r2, r7
 8009fde:	60fa      	str	r2, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	6812      	ldr	r2, [r2, #0]
 8009fe4:	60ba      	str	r2, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8009fe6:	f3bf 8f5f 	dmb	sy
}
 8009fea:	bf00      	nop
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f382 8810 	msr	PRIMASK, r2
}
 8009ff6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009ff8:	f3bf 8f4f 	dsb	sy
}
 8009ffc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009ffe:	f3bf 8f6f 	isb	sy
}
 800a002:	bf00      	nop
}
 800a004:	bf00      	nop
}
 800a006:	bf00      	nop
 800a008:	2b01      	cmp	r3, #1
	}
}
 800a00a:	3730      	adds	r7, #48	@ 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	200049b8 	.word	0x200049b8
 800a014:	200049b4 	.word	0x200049b4
 800a018:	20004934 	.word	0x20004934
 800a01c:	20004920 	.word	0x20004920

0800a020 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a04      	ldr	r2, [pc, #16]	@ (800a040 <HAL_UART_ErrorCallback+0x20>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d101      	bne.n	800a036 <HAL_UART_ErrorCallback+0x16>
    {
        // Handle TX/RX recovery here
        //usart1_recover();
        usart1_restart();
 800a032:	f000 f877 	bl	800a124 <usart1_restart>
    }
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	40011000 	.word	0x40011000

0800a044 <usart1_start_tx_if_idle>:


void usart1_start_tx_if_idle(int force_state)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	@ 0x38
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	2300      	movs	r3, #0
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a050:	f3ef 8310 	mrs	r3, PRIMASK
 800a054:	623b      	str	r3, [r7, #32]
  return(result);
 800a056:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a05a:	b672      	cpsid	i
}
 800a05c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a05e:	f3bf 8f4f 	dsb	sy
}
 800a062:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a064:	f3bf 8f6f 	isb	sy
}
 800a068:	bf00      	nop
    return old;
 800a06a:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a06c:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	2b01      	cmp	r3, #1
 800a072:	d001      	beq.n	800a078 <usart1_start_tx_if_idle+0x34>
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	e000      	b.n	800a07a <usart1_start_tx_if_idle+0x36>
 800a078:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a07a:	60bb      	str	r3, [r7, #8]
 800a07c:	2301      	movs	r3, #1
 800a07e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a080:	e02c      	b.n	800a0dc <usart1_start_tx_if_idle+0x98>
	{
		if (((huart1.gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&usart1_tx_ring_buffer) > 0)
 800a082:	4b25      	ldr	r3, [pc, #148]	@ (800a118 <usart1_start_tx_if_idle+0xd4>)
 800a084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	d002      	beq.n	800a094 <usart1_start_tx_if_idle+0x50>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d021      	beq.n	800a0d8 <usart1_start_tx_if_idle+0x94>
 800a094:	4821      	ldr	r0, [pc, #132]	@ (800a11c <usart1_start_tx_if_idle+0xd8>)
 800a096:	f7fd fd87 	bl	8007ba8 <ring_buffer_used_space>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01b      	beq.n	800a0d8 <usart1_start_tx_if_idle+0x94>
		{

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800a0a0:	481e      	ldr	r0, [pc, #120]	@ (800a11c <usart1_start_tx_if_idle+0xd8>)
 800a0a2:	f7fd fdc1 	bl	8007c28 <ring_buffer_linear_used_space>
 800a0a6:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	2b80      	cmp	r3, #128	@ 0x80
 800a0ac:	bf28      	it	cs
 800a0ae:	2380      	movcs	r3, #128	@ 0x80
 800a0b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800a0b2:	481a      	ldr	r0, [pc, #104]	@ (800a11c <usart1_start_tx_if_idle+0xd8>)
 800a0b4:	f7fd fde2 	bl	8007c7c <ring_buffer_read_ptr>
 800a0b8:	62b8      	str	r0, [r7, #40]	@ 0x28

			usart1_last_tx_size = frame_size;
 800a0ba:	4a19      	ldr	r2, [pc, #100]	@ (800a120 <usart1_start_tx_if_idle+0xdc>)
 800a0bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0be:	8013      	strh	r3, [r2, #0]

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(&huart1, data, frame_size) != HAL_OK) {
 800a0c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0c6:	4814      	ldr	r0, [pc, #80]	@ (800a118 <usart1_start_tx_if_idle+0xd4>)
 800a0c8:	f005 f87c 	bl	800f1c4 <HAL_UART_Transmit_DMA>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <usart1_start_tx_if_idle+0x94>
				//ENTER_CRITICAL();
				usart1_last_tx_size = 0;
 800a0d2:	4b13      	ldr	r3, [pc, #76]	@ (800a120 <usart1_start_tx_if_idle+0xdc>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1cf      	bne.n	800a082 <usart1_start_tx_if_idle+0x3e>
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a0ee:	f3bf 8f5f 	dmb	sy
}
 800a0f2:	bf00      	nop
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f383 8810 	msr	PRIMASK, r3
}
 800a0fe:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a100:	f3bf 8f4f 	dsb	sy
}
 800a104:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a106:	f3bf 8f6f 	isb	sy
}
 800a10a:	bf00      	nop
}
 800a10c:	bf00      	nop
}
 800a10e:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800a110:	bf00      	nop
 800a112:	3738      	adds	r7, #56	@ 0x38
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	200049b8 	.word	0x200049b8
 800a11c:	20004910 	.word	0x20004910
 800a120:	20004930 	.word	0x20004930

0800a124 <usart1_restart>:
  usart1_dma_last_pos = 0;
}


void usart1_restart(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
    // 1. Deinit UART (also unlinks DMA internally)
    HAL_UART_DeInit(&huart1);
 800a12a:	481b      	ldr	r0, [pc, #108]	@ (800a198 <usart1_restart+0x74>)
 800a12c:	f005 f818 	bl	800f160 <HAL_UART_DeInit>

    // 2. Deinit DMA streams manually
    HAL_DMA_DeInit(huart1.hdmarx);
 800a130:	4b19      	ldr	r3, [pc, #100]	@ (800a198 <usart1_restart+0x74>)
 800a132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fb7b 	bl	800a830 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart1.hdmatx);
 800a13a:	4b17      	ldr	r3, [pc, #92]	@ (800a198 <usart1_restart+0x74>)
 800a13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fb76 	bl	800a830 <HAL_DMA_DeInit>

    // 3. Reset USART1 peripheral
    __HAL_RCC_USART1_FORCE_RESET();
 800a144:	4b15      	ldr	r3, [pc, #84]	@ (800a19c <usart1_restart+0x78>)
 800a146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a148:	4a14      	ldr	r2, [pc, #80]	@ (800a19c <usart1_restart+0x78>)
 800a14a:	f043 0310 	orr.w	r3, r3, #16
 800a14e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_USART1_RELEASE_RESET();
 800a150:	4b12      	ldr	r3, [pc, #72]	@ (800a19c <usart1_restart+0x78>)
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	4a11      	ldr	r2, [pc, #68]	@ (800a19c <usart1_restart+0x78>)
 800a156:	f023 0310 	bic.w	r3, r3, #16
 800a15a:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. Reinit USART1 and DMA
    MX_USART1_UART_Init();  // Reinitializes UART and links DMA
 800a15c:	f7ff fcc8 	bl	8009af0 <MX_USART1_UART_Init>
    //MX_DMA_Init();          // Only needed if you have a custom DMA init function

    // 5. Restart RX DMA if needed
    uint16_t space = ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800a160:	480f      	ldr	r0, [pc, #60]	@ (800a1a0 <usart1_restart+0x7c>)
 800a162:	f7fd fd3a 	bl	8007bda <ring_buffer_linear_free_space>
 800a166:	4603      	mov	r3, r0
 800a168:	80fb      	strh	r3, [r7, #6]
    uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800a16a:	480d      	ldr	r0, [pc, #52]	@ (800a1a0 <usart1_restart+0x7c>)
 800a16c:	f7fd fd77 	bl	8007c5e <ring_buffer_write_ptr>
 800a170:	6038      	str	r0, [r7, #0]
    // usart1_last_rx_len = space;
    // HAL_UART_Receive_DMA(&huart1, write_ptr, space);

      HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800a172:	2280      	movs	r2, #128	@ 0x80
 800a174:	490b      	ldr	r1, [pc, #44]	@ (800a1a4 <usart1_restart+0x80>)
 800a176:	4808      	ldr	r0, [pc, #32]	@ (800a198 <usart1_restart+0x74>)
 800a178:	f005 f894 	bl	800f2a4 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <usart1_restart+0x84>)
 800a17e:	2280      	movs	r2, #128	@ 0x80
 800a180:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <usart1_restart+0x88>)
 800a184:	2200      	movs	r2, #0
 800a186:	801a      	strh	r2, [r3, #0]

    usart1_start_tx_if_idle(1);
 800a188:	2001      	movs	r0, #1
 800a18a:	f7ff ff5b 	bl	800a044 <usart1_start_tx_if_idle>
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	200049b8 	.word	0x200049b8
 800a19c:	40023800 	.word	0x40023800
 800a1a0:	20004920 	.word	0x20004920
 800a1a4:	20004934 	.word	0x20004934
 800a1a8:	20004932 	.word	0x20004932
 800a1ac:	200049b4 	.word	0x200049b4

0800a1b0 <usart1_send_data>:




size_t usart1_send_data(char* data, size_t len)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08c      	sub	sp, #48	@ 0x30
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <usart1_send_data+0x16>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <usart1_send_data+0x1a>
        return 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e040      	b.n	800a24c <usart1_send_data+0x9c>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d2:	623b      	str	r3, [r7, #32]
  return(result);
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a1d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1d8:	b672      	cpsid	i
}
 800a1da:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a1dc:	f3bf 8f4f 	dsb	sy
}
 800a1e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a1e2:	f3bf 8f6f 	isb	sy
}
 800a1e6:	bf00      	nop
    return old;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a1ea:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d001      	beq.n	800a1f6 <usart1_send_data+0x46>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	e000      	b.n	800a1f8 <usart1_send_data+0x48>
 800a1f6:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a1f8:	60bb      	str	r3, [r7, #8]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1fe:	e007      	b.n	800a210 <usart1_send_data+0x60>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&usart1_tx_ring_buffer, (uint8_t*)data, len);
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	4813      	ldr	r0, [pc, #76]	@ (800a254 <usart1_send_data+0xa4>)
 800a206:	f7fd fd48 	bl	8007c9a <ring_buffer_enqueue_arr>
 800a20a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a20c:	2300      	movs	r3, #0
 800a20e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1f4      	bne.n	800a200 <usart1_send_data+0x50>
 800a216:	f107 0308 	add.w	r3, r7, #8
 800a21a:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a222:	f3bf 8f5f 	dmb	sy
}
 800a226:	bf00      	nop
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f383 8810 	msr	PRIMASK, r3
}
 800a232:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a234:	f3bf 8f4f 	dsb	sy
}
 800a238:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a23a:	f3bf 8f6f 	isb	sy
}
 800a23e:	bf00      	nop
}
 800a240:	bf00      	nop
}
 800a242:	bf00      	nop
    }

    usart1_start_tx_if_idle(0);
 800a244:	2000      	movs	r0, #0
 800a246:	f7ff fefd 	bl	800a044 <usart1_start_tx_if_idle>

    return bytes_written;
 800a24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3730      	adds	r7, #48	@ 0x30
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20004910 	.word	0x20004910

0800a258 <usart1_recv_data>:

size_t usart1_recv_data(char* out_buf, size_t max_len)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08c      	sub	sp, #48	@ 0x30
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <usart1_recv_data+0x16>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <usart1_recv_data+0x1a>
        return 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	e03f      	b.n	800a2f2 <usart1_recv_data+0x9a>
 800a272:	2300      	movs	r3, #0
 800a274:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a276:	f3ef 8310 	mrs	r3, PRIMASK
 800a27a:	623b      	str	r3, [r7, #32]
  return(result);
 800a27c:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a27e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a280:	b672      	cpsid	i
}
 800a282:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a284:	f3bf 8f4f 	dsb	sy
}
 800a288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a28a:	f3bf 8f6f 	isb	sy
}
 800a28e:	bf00      	nop
    return old;
 800a290:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a292:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a296:	2b01      	cmp	r3, #1
 800a298:	d001      	beq.n	800a29e <usart1_recv_data+0x46>
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	e000      	b.n	800a2a0 <usart1_recv_data+0x48>
 800a29e:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a2a0:	60bb      	str	r3, [r7, #8]
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2a6:	e009      	b.n	800a2bc <usart1_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 800a2a8:	f7ff fe2c 	bl	8009f04 <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&usart1_rx_ring_buffer, (uint8_t*)out_buf, max_len);
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4812      	ldr	r0, [pc, #72]	@ (800a2fc <usart1_recv_data+0xa4>)
 800a2b2:	f7fd fd4c 	bl	8007d4e <ring_buffer_dequeue_arr>
 800a2b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1f2      	bne.n	800a2a8 <usart1_recv_data+0x50>
 800a2c2:	f107 0308 	add.w	r3, r7, #8
 800a2c6:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a2ce:	f3bf 8f5f 	dmb	sy
}
 800a2d2:	bf00      	nop
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f383 8810 	msr	PRIMASK, r3
}
 800a2de:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a2e0:	f3bf 8f4f 	dsb	sy
}
 800a2e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a2e6:	f3bf 8f6f 	isb	sy
}
 800a2ea:	bf00      	nop
}
 800a2ec:	bf00      	nop
}
 800a2ee:	bf00      	nop
    }

    return bytes_read;
 800a2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3730      	adds	r7, #48	@ 0x30
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20004920 	.word	0x20004920

0800a300 <usart1_data_available_for_read>:

size_t usart1_data_available_for_read()
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	@ 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	2300      	movs	r3, #0
 800a308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a30a:	f3ef 8310 	mrs	r3, PRIMASK
 800a30e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a310:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a314:	b672      	cpsid	i
}
 800a316:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a318:	f3bf 8f4f 	dsb	sy
}
 800a31c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a31e:	f3bf 8f6f 	isb	sy
}
 800a322:	bf00      	nop
    return old;
 800a324:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a326:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d001      	beq.n	800a332 <usart1_data_available_for_read+0x32>
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	e000      	b.n	800a334 <usart1_data_available_for_read+0x34>
 800a332:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	2301      	movs	r3, #1
 800a338:	623b      	str	r3, [r7, #32]
 800a33a:	e007      	b.n	800a34c <usart1_data_available_for_read+0x4c>
    {
        usart1_read_dma_buffer();
 800a33c:	f7ff fde2 	bl	8009f04 <usart1_read_dma_buffer>
    	used = ring_buffer_used_space(&usart1_rx_ring_buffer);
 800a340:	4811      	ldr	r0, [pc, #68]	@ (800a388 <usart1_data_available_for_read+0x88>)
 800a342:	f7fd fc31 	bl	8007ba8 <ring_buffer_used_space>
 800a346:	6278      	str	r0, [r7, #36]	@ 0x24
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a348:	2300      	movs	r3, #0
 800a34a:	623b      	str	r3, [r7, #32]
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f4      	bne.n	800a33c <usart1_data_available_for_read+0x3c>
 800a352:	463b      	mov	r3, r7
 800a354:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800a35c:	f3bf 8f5f 	dmb	sy
}
 800a360:	bf00      	nop
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f383 8810 	msr	PRIMASK, r3
}
 800a36c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a36e:	f3bf 8f4f 	dsb	sy
}
 800a372:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a374:	f3bf 8f6f 	isb	sy
}
 800a378:	bf00      	nop
}
 800a37a:	bf00      	nop
}
 800a37c:	bf00      	nop
    }

    return used;
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a380:	4618      	mov	r0, r3
 800a382:	3728      	adds	r7, #40	@ 0x28
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20004920 	.word	0x20004920

0800a38c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a38c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a3c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a390:	f7ff fa1e 	bl	80097d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a394:	480c      	ldr	r0, [pc, #48]	@ (800a3c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a396:	490d      	ldr	r1, [pc, #52]	@ (800a3cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a398:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a39a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a39c:	e002      	b.n	800a3a4 <LoopCopyDataInit>

0800a39e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a39e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a3a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a3a2:	3304      	adds	r3, #4

0800a3a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a3a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a3a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3a8:	d3f9      	bcc.n	800a39e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3aa:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a3ac:	4c0a      	ldr	r4, [pc, #40]	@ (800a3d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a3ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3b0:	e001      	b.n	800a3b6 <LoopFillZerobss>

0800a3b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3b4:	3204      	adds	r2, #4

0800a3b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3b8:	d3fb      	bcc.n	800a3b2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a3ba:	f011 f83f 	bl	801b43c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a3be:	f7fe f853 	bl	8008468 <main>
  bx  lr    
 800a3c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a3c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a3c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3cc:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800a3d0:	08020b48 	.word	0x08020b48
  ldr r2, =_sbss
 800a3d4:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800a3d8:	2000b1dc 	.word	0x2000b1dc

0800a3dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a3dc:	e7fe      	b.n	800a3dc <ADC_IRQHandler>
	...

0800a3e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a420 <HAL_Init+0x40>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a420 <HAL_Init+0x40>)
 800a3ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a3ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a420 <HAL_Init+0x40>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a420 <HAL_Init+0x40>)
 800a3f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a3fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a3fc:	4b08      	ldr	r3, [pc, #32]	@ (800a420 <HAL_Init+0x40>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a07      	ldr	r2, [pc, #28]	@ (800a420 <HAL_Init+0x40>)
 800a402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a408:	2003      	movs	r0, #3
 800a40a:	f000 f920 	bl	800a64e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a40e:	200f      	movs	r0, #15
 800a410:	f7ff f850 	bl	80094b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a414:	f7ff f822 	bl	800945c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	40023c00 	.word	0x40023c00

0800a424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a428:	4b06      	ldr	r3, [pc, #24]	@ (800a444 <HAL_IncTick+0x20>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	461a      	mov	r2, r3
 800a42e:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <HAL_IncTick+0x24>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4413      	add	r3, r2
 800a434:	4a04      	ldr	r2, [pc, #16]	@ (800a448 <HAL_IncTick+0x24>)
 800a436:	6013      	str	r3, [r2, #0]
}
 800a438:	bf00      	nop
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	2000005c 	.word	0x2000005c
 800a448:	20004ac0 	.word	0x20004ac0

0800a44c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a44c:	b480      	push	{r7}
 800a44e:	af00      	add	r7, sp, #0
  return uwTick;
 800a450:	4b03      	ldr	r3, [pc, #12]	@ (800a460 <HAL_GetTick+0x14>)
 800a452:	681b      	ldr	r3, [r3, #0]
}
 800a454:	4618      	mov	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20004ac0 	.word	0x20004ac0

0800a464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a46c:	f7ff ffee 	bl	800a44c <HAL_GetTick>
 800a470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d005      	beq.n	800a48a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a47e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <HAL_Delay+0x44>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a48a:	bf00      	nop
 800a48c:	f7ff ffde 	bl	800a44c <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d8f7      	bhi.n	800a48c <HAL_Delay+0x28>
  {
  }
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	2000005c 	.word	0x2000005c

0800a4ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f0 <__NVIC_SetPriorityGrouping+0x44>)
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a4d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a4d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4de:	4a04      	ldr	r2, [pc, #16]	@ (800a4f0 <__NVIC_SetPriorityGrouping+0x44>)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	60d3      	str	r3, [r2, #12]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	e000ed00 	.word	0xe000ed00

0800a4f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4f8:	4b04      	ldr	r3, [pc, #16]	@ (800a50c <__NVIC_GetPriorityGrouping+0x18>)
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	0a1b      	lsrs	r3, r3, #8
 800a4fe:	f003 0307 	and.w	r3, r3, #7
}
 800a502:	4618      	mov	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	e000ed00 	.word	0xe000ed00

0800a510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	db0b      	blt.n	800a53a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	f003 021f 	and.w	r2, r3, #31
 800a528:	4907      	ldr	r1, [pc, #28]	@ (800a548 <__NVIC_EnableIRQ+0x38>)
 800a52a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a52e:	095b      	lsrs	r3, r3, #5
 800a530:	2001      	movs	r0, #1
 800a532:	fa00 f202 	lsl.w	r2, r0, r2
 800a536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	e000e100 	.word	0xe000e100

0800a54c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	db12      	blt.n	800a584 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	f003 021f 	and.w	r2, r3, #31
 800a564:	490a      	ldr	r1, [pc, #40]	@ (800a590 <__NVIC_DisableIRQ+0x44>)
 800a566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a56a:	095b      	lsrs	r3, r3, #5
 800a56c:	2001      	movs	r0, #1
 800a56e:	fa00 f202 	lsl.w	r2, r0, r2
 800a572:	3320      	adds	r3, #32
 800a574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a578:	f3bf 8f4f 	dsb	sy
}
 800a57c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a57e:	f3bf 8f6f 	isb	sy
}
 800a582:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	e000e100 	.word	0xe000e100

0800a594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	6039      	str	r1, [r7, #0]
 800a59e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	db0a      	blt.n	800a5be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	490c      	ldr	r1, [pc, #48]	@ (800a5e0 <__NVIC_SetPriority+0x4c>)
 800a5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5b2:	0112      	lsls	r2, r2, #4
 800a5b4:	b2d2      	uxtb	r2, r2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a5bc:	e00a      	b.n	800a5d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	4908      	ldr	r1, [pc, #32]	@ (800a5e4 <__NVIC_SetPriority+0x50>)
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	3b04      	subs	r3, #4
 800a5cc:	0112      	lsls	r2, r2, #4
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	761a      	strb	r2, [r3, #24]
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	e000e100 	.word	0xe000e100
 800a5e4:	e000ed00 	.word	0xe000ed00

0800a5e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b089      	sub	sp, #36	@ 0x24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f1c3 0307 	rsb	r3, r3, #7
 800a602:	2b04      	cmp	r3, #4
 800a604:	bf28      	it	cs
 800a606:	2304      	movcs	r3, #4
 800a608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	3304      	adds	r3, #4
 800a60e:	2b06      	cmp	r3, #6
 800a610:	d902      	bls.n	800a618 <NVIC_EncodePriority+0x30>
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	3b03      	subs	r3, #3
 800a616:	e000      	b.n	800a61a <NVIC_EncodePriority+0x32>
 800a618:	2300      	movs	r3, #0
 800a61a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a61c:	f04f 32ff 	mov.w	r2, #4294967295
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	43da      	mvns	r2, r3
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	401a      	ands	r2, r3
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a630:	f04f 31ff 	mov.w	r1, #4294967295
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	fa01 f303 	lsl.w	r3, r1, r3
 800a63a:	43d9      	mvns	r1, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a640:	4313      	orrs	r3, r2
         );
}
 800a642:	4618      	mov	r0, r3
 800a644:	3724      	adds	r7, #36	@ 0x24
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff ff28 	bl	800a4ac <__NVIC_SetPriorityGrouping>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a676:	f7ff ff3d 	bl	800a4f4 <__NVIC_GetPriorityGrouping>
 800a67a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	6978      	ldr	r0, [r7, #20]
 800a682:	f7ff ffb1 	bl	800a5e8 <NVIC_EncodePriority>
 800a686:	4602      	mov	r2, r0
 800a688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a68c:	4611      	mov	r1, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff ff80 	bl	800a594 <__NVIC_SetPriority>
}
 800a694:	bf00      	nop
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff ff30 	bl	800a510 <__NVIC_EnableIRQ>
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a6c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff ff40 	bl	800a54c <__NVIC_DisableIRQ>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a6e0:	f7ff feb4 	bl	800a44c <HAL_GetTick>
 800a6e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e099      	b.n	800a824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f022 0201 	bic.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a710:	e00f      	b.n	800a732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a712:	f7ff fe9b 	bl	800a44c <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	2b05      	cmp	r3, #5
 800a71e:	d908      	bls.n	800a732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2203      	movs	r2, #3
 800a72a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e078      	b.n	800a824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e8      	bne.n	800a712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	4b38      	ldr	r3, [pc, #224]	@ (800a82c <HAL_DMA_Init+0x158>)
 800a74c:	4013      	ands	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a75e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a76a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a788:	2b04      	cmp	r3, #4
 800a78a:	d107      	bne.n	800a79c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a794:	4313      	orrs	r3, r2
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	4313      	orrs	r3, r2
 800a79a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f023 0307 	bic.w	r3, r3, #7
 800a7b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d117      	bne.n	800a7f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00e      	beq.n	800a7f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fb5f 	bl	800ae9c <DMA_CheckFifoParam>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d008      	beq.n	800a7f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2240      	movs	r2, #64	@ 0x40
 800a7e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e016      	b.n	800a824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fb16 	bl	800ae30 <DMA_CalcBaseAndBitshift>
 800a804:	4603      	mov	r3, r0
 800a806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a80c:	223f      	movs	r2, #63	@ 0x3f
 800a80e:	409a      	lsls	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	f010803f 	.word	0xf010803f

0800a830 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e050      	b.n	800a8e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d101      	bne.n	800a852 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800a84e:	2302      	movs	r3, #2
 800a850:	e048      	b.n	800a8e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0201 	bic.w	r2, r2, #1
 800a860:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2200      	movs	r2, #0
 800a868:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2200      	movs	r2, #0
 800a870:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2200      	movs	r2, #0
 800a878:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2200      	movs	r2, #0
 800a880:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2200      	movs	r2, #0
 800a888:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2221      	movs	r2, #33	@ 0x21
 800a890:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 facc 	bl	800ae30 <DMA_CalcBaseAndBitshift>
 800a898:	4603      	mov	r3, r0
 800a89a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c4:	223f      	movs	r2, #63	@ 0x3f
 800a8c6:	409a      	lsls	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a902:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_DMA_Start_IT+0x26>
 800a90e:	2302      	movs	r3, #2
 800a910:	e040      	b.n	800a994 <HAL_DMA_Start_IT+0xa8>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b01      	cmp	r3, #1
 800a924:	d12f      	bne.n	800a986 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2202      	movs	r2, #2
 800a92a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	68b9      	ldr	r1, [r7, #8]
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fa4a 	bl	800add4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a944:	223f      	movs	r2, #63	@ 0x3f
 800a946:	409a      	lsls	r2, r3
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0216 	orr.w	r2, r2, #22
 800a95a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d007      	beq.n	800a974 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0208 	orr.w	r2, r2, #8
 800a972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	e005      	b.n	800a992 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a98e:	2302      	movs	r3, #2
 800a990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a9aa:	f7ff fd4f 	bl	800a44c <HAL_GetTick>
 800a9ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d008      	beq.n	800a9ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2280      	movs	r2, #128	@ 0x80
 800a9c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e052      	b.n	800aa74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 0216 	bic.w	r2, r2, #22
 800a9dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	695a      	ldr	r2, [r3, #20]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a9ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d103      	bne.n	800a9fe <HAL_DMA_Abort+0x62>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d007      	beq.n	800aa0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f022 0208 	bic.w	r2, r2, #8
 800aa0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0201 	bic.w	r2, r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa1e:	e013      	b.n	800aa48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa20:	f7ff fd14 	bl	800a44c <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b05      	cmp	r3, #5
 800aa2c:	d90c      	bls.n	800aa48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2220      	movs	r2, #32
 800aa32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2203      	movs	r2, #3
 800aa38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e015      	b.n	800aa74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e4      	bne.n	800aa20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa5a:	223f      	movs	r2, #63	@ 0x3f
 800aa5c:	409a      	lsls	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d004      	beq.n	800aa9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2280      	movs	r2, #128	@ 0x80
 800aa94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e00c      	b.n	800aab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2205      	movs	r2, #5
 800aa9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 0201 	bic.w	r2, r2, #1
 800aab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aacc:	4b8e      	ldr	r3, [pc, #568]	@ (800ad08 <HAL_DMA_IRQHandler+0x248>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a8e      	ldr	r2, [pc, #568]	@ (800ad0c <HAL_DMA_IRQHandler+0x24c>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	0a9b      	lsrs	r3, r3, #10
 800aad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaea:	2208      	movs	r2, #8
 800aaec:	409a      	lsls	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d01a      	beq.n	800ab2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d013      	beq.n	800ab2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0204 	bic.w	r2, r2, #4
 800ab12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab18:	2208      	movs	r2, #8
 800ab1a:	409a      	lsls	r2, r3
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab24:	f043 0201 	orr.w	r2, r3, #1
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab30:	2201      	movs	r2, #1
 800ab32:	409a      	lsls	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4013      	ands	r3, r2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d012      	beq.n	800ab62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00b      	beq.n	800ab62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab4e:	2201      	movs	r2, #1
 800ab50:	409a      	lsls	r2, r3
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5a:	f043 0202 	orr.w	r2, r3, #2
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab66:	2204      	movs	r2, #4
 800ab68:	409a      	lsls	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d012      	beq.n	800ab98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab84:	2204      	movs	r2, #4
 800ab86:	409a      	lsls	r2, r3
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab90:	f043 0204 	orr.w	r2, r3, #4
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab9c:	2210      	movs	r2, #16
 800ab9e:	409a      	lsls	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4013      	ands	r3, r2
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d043      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0308 	and.w	r3, r3, #8
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d03c      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abba:	2210      	movs	r2, #16
 800abbc:	409a      	lsls	r2, r3
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d018      	beq.n	800ac02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d108      	bne.n	800abf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d024      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	4798      	blx	r3
 800abee:	e01f      	b.n	800ac30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d01b      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
 800ac00:	e016      	b.n	800ac30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d107      	bne.n	800ac20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 0208 	bic.w	r2, r2, #8
 800ac1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac34:	2220      	movs	r2, #32
 800ac36:	409a      	lsls	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 808f 	beq.w	800ad60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 8087 	beq.w	800ad60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac56:	2220      	movs	r2, #32
 800ac58:	409a      	lsls	r2, r3
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	d136      	bne.n	800acd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0216 	bic.w	r2, r2, #22
 800ac78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	695a      	ldr	r2, [r3, #20]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d103      	bne.n	800ac9a <HAL_DMA_IRQHandler+0x1da>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 0208 	bic.w	r2, r2, #8
 800aca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acae:	223f      	movs	r2, #63	@ 0x3f
 800acb0:	409a      	lsls	r2, r3
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acca:	2b00      	cmp	r3, #0
 800accc:	d07e      	beq.n	800adcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
        }
        return;
 800acd6:	e079      	b.n	800adcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01d      	beq.n	800ad22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10d      	bne.n	800ad10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d031      	beq.n	800ad60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
 800ad04:	e02c      	b.n	800ad60 <HAL_DMA_IRQHandler+0x2a0>
 800ad06:	bf00      	nop
 800ad08:	20000054 	.word	0x20000054
 800ad0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d023      	beq.n	800ad60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	4798      	blx	r3
 800ad20:	e01e      	b.n	800ad60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10f      	bne.n	800ad50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0210 	bic.w	r2, r2, #16
 800ad3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d032      	beq.n	800adce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d022      	beq.n	800adba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2205      	movs	r2, #5
 800ad78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0201 	bic.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	60bb      	str	r3, [r7, #8]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d307      	bcc.n	800ada8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f2      	bne.n	800ad8c <HAL_DMA_IRQHandler+0x2cc>
 800ada6:	e000      	b.n	800adaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ada8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4798      	blx	r3
 800adca:	e000      	b.n	800adce <HAL_DMA_IRQHandler+0x30e>
        return;
 800adcc:	bf00      	nop
    }
  }
}
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800adf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	2b40      	cmp	r3, #64	@ 0x40
 800ae00:	d108      	bne.n	800ae14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ae12:	e007      	b.n	800ae24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	60da      	str	r2, [r3, #12]
}
 800ae24:	bf00      	nop
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	3b10      	subs	r3, #16
 800ae40:	4a14      	ldr	r2, [pc, #80]	@ (800ae94 <DMA_CalcBaseAndBitshift+0x64>)
 800ae42:	fba2 2303 	umull	r2, r3, r2, r3
 800ae46:	091b      	lsrs	r3, r3, #4
 800ae48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ae4a:	4a13      	ldr	r2, [pc, #76]	@ (800ae98 <DMA_CalcBaseAndBitshift+0x68>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d909      	bls.n	800ae72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ae66:	f023 0303 	bic.w	r3, r3, #3
 800ae6a:	1d1a      	adds	r2, r3, #4
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	659a      	str	r2, [r3, #88]	@ 0x58
 800ae70:	e007      	b.n	800ae82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	aaaaaaab 	.word	0xaaaaaaab
 800ae98:	080202d0 	.word	0x080202d0

0800ae9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d11f      	bne.n	800aef6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d856      	bhi.n	800af6a <DMA_CheckFifoParam+0xce>
 800aebc:	a201      	add	r2, pc, #4	@ (adr r2, 800aec4 <DMA_CheckFifoParam+0x28>)
 800aebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec2:	bf00      	nop
 800aec4:	0800aed5 	.word	0x0800aed5
 800aec8:	0800aee7 	.word	0x0800aee7
 800aecc:	0800aed5 	.word	0x0800aed5
 800aed0:	0800af6b 	.word	0x0800af6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d046      	beq.n	800af6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aee4:	e043      	b.n	800af6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800aeee:	d140      	bne.n	800af72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aef4:	e03d      	b.n	800af72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aefe:	d121      	bne.n	800af44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d837      	bhi.n	800af76 <DMA_CheckFifoParam+0xda>
 800af06:	a201      	add	r2, pc, #4	@ (adr r2, 800af0c <DMA_CheckFifoParam+0x70>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af23 	.word	0x0800af23
 800af14:	0800af1d 	.word	0x0800af1d
 800af18:	0800af35 	.word	0x0800af35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	73fb      	strb	r3, [r7, #15]
      break;
 800af20:	e030      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d025      	beq.n	800af7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af32:	e022      	b.n	800af7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800af3c:	d11f      	bne.n	800af7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800af42:	e01c      	b.n	800af7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d903      	bls.n	800af52 <DMA_CheckFifoParam+0xb6>
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d003      	beq.n	800af58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800af50:	e018      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	73fb      	strb	r3, [r7, #15]
      break;
 800af56:	e015      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00e      	beq.n	800af82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	73fb      	strb	r3, [r7, #15]
      break;
 800af68:	e00b      	b.n	800af82 <DMA_CheckFifoParam+0xe6>
      break;
 800af6a:	bf00      	nop
 800af6c:	e00a      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      break;
 800af6e:	bf00      	nop
 800af70:	e008      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      break;
 800af72:	bf00      	nop
 800af74:	e006      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      break;
 800af76:	bf00      	nop
 800af78:	e004      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      break;
 800af7a:	bf00      	nop
 800af7c:	e002      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      break;   
 800af7e:	bf00      	nop
 800af80:	e000      	b.n	800af84 <DMA_CheckFifoParam+0xe8>
      break;
 800af82:	bf00      	nop
    }
  } 
  
  return status; 
 800af84:	7bfb      	ldrb	r3, [r7, #15]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop

0800af94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af94:	b480      	push	{r7}
 800af96:	b089      	sub	sp, #36	@ 0x24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
 800afae:	e16b      	b.n	800b288 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800afb0:	2201      	movs	r2, #1
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	fa02 f303 	lsl.w	r3, r2, r3
 800afb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	4013      	ands	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	429a      	cmp	r2, r3
 800afca:	f040 815a 	bne.w	800b282 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d005      	beq.n	800afe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d130      	bne.n	800b048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	2203      	movs	r2, #3
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	43db      	mvns	r3, r3
 800aff8:	69ba      	ldr	r2, [r7, #24]
 800affa:	4013      	ands	r3, r2
 800affc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	fa02 f303 	lsl.w	r3, r2, r3
 800b00a:	69ba      	ldr	r2, [r7, #24]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b01c:	2201      	movs	r2, #1
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	fa02 f303 	lsl.w	r3, r2, r3
 800b024:	43db      	mvns	r3, r3
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	4013      	ands	r3, r2
 800b02a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	091b      	lsrs	r3, r3, #4
 800b032:	f003 0201 	and.w	r2, r3, #1
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	fa02 f303 	lsl.w	r3, r2, r3
 800b03c:	69ba      	ldr	r2, [r7, #24]
 800b03e:	4313      	orrs	r3, r2
 800b040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	f003 0303 	and.w	r3, r3, #3
 800b050:	2b03      	cmp	r3, #3
 800b052:	d017      	beq.n	800b084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	2203      	movs	r2, #3
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	43db      	mvns	r3, r3
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	4013      	ands	r3, r2
 800b06a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	fa02 f303 	lsl.w	r3, r2, r3
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f003 0303 	and.w	r3, r3, #3
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d123      	bne.n	800b0d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	08da      	lsrs	r2, r3, #3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3208      	adds	r2, #8
 800b098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	220f      	movs	r2, #15
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	691a      	ldr	r2, [r3, #16]
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	f003 0307 	and.w	r3, r3, #7
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	08da      	lsrs	r2, r3, #3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3208      	adds	r2, #8
 800b0d2:	69b9      	ldr	r1, [r7, #24]
 800b0d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e8:	43db      	mvns	r3, r3
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	f003 0203 	and.w	r2, r3, #3
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	4313      	orrs	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 80b4 	beq.w	800b282 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	4b60      	ldr	r3, [pc, #384]	@ (800b2a0 <HAL_GPIO_Init+0x30c>)
 800b120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b122:	4a5f      	ldr	r2, [pc, #380]	@ (800b2a0 <HAL_GPIO_Init+0x30c>)
 800b124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b128:	6453      	str	r3, [r2, #68]	@ 0x44
 800b12a:	4b5d      	ldr	r3, [pc, #372]	@ (800b2a0 <HAL_GPIO_Init+0x30c>)
 800b12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b12e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b136:	4a5b      	ldr	r2, [pc, #364]	@ (800b2a4 <HAL_GPIO_Init+0x310>)
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	089b      	lsrs	r3, r3, #2
 800b13c:	3302      	adds	r3, #2
 800b13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	220f      	movs	r2, #15
 800b14e:	fa02 f303 	lsl.w	r3, r2, r3
 800b152:	43db      	mvns	r3, r3
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	4013      	ands	r3, r2
 800b158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a52      	ldr	r2, [pc, #328]	@ (800b2a8 <HAL_GPIO_Init+0x314>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d02b      	beq.n	800b1ba <HAL_GPIO_Init+0x226>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a51      	ldr	r2, [pc, #324]	@ (800b2ac <HAL_GPIO_Init+0x318>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d025      	beq.n	800b1b6 <HAL_GPIO_Init+0x222>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a50      	ldr	r2, [pc, #320]	@ (800b2b0 <HAL_GPIO_Init+0x31c>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d01f      	beq.n	800b1b2 <HAL_GPIO_Init+0x21e>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a4f      	ldr	r2, [pc, #316]	@ (800b2b4 <HAL_GPIO_Init+0x320>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d019      	beq.n	800b1ae <HAL_GPIO_Init+0x21a>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a4e      	ldr	r2, [pc, #312]	@ (800b2b8 <HAL_GPIO_Init+0x324>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d013      	beq.n	800b1aa <HAL_GPIO_Init+0x216>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a4d      	ldr	r2, [pc, #308]	@ (800b2bc <HAL_GPIO_Init+0x328>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d00d      	beq.n	800b1a6 <HAL_GPIO_Init+0x212>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a4c      	ldr	r2, [pc, #304]	@ (800b2c0 <HAL_GPIO_Init+0x32c>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d007      	beq.n	800b1a2 <HAL_GPIO_Init+0x20e>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a4b      	ldr	r2, [pc, #300]	@ (800b2c4 <HAL_GPIO_Init+0x330>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d101      	bne.n	800b19e <HAL_GPIO_Init+0x20a>
 800b19a:	2307      	movs	r3, #7
 800b19c:	e00e      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b19e:	2308      	movs	r3, #8
 800b1a0:	e00c      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1a2:	2306      	movs	r3, #6
 800b1a4:	e00a      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1a6:	2305      	movs	r3, #5
 800b1a8:	e008      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1aa:	2304      	movs	r3, #4
 800b1ac:	e006      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e004      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1b2:	2302      	movs	r3, #2
 800b1b4:	e002      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e000      	b.n	800b1bc <HAL_GPIO_Init+0x228>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	69fa      	ldr	r2, [r7, #28]
 800b1be:	f002 0203 	and.w	r2, r2, #3
 800b1c2:	0092      	lsls	r2, r2, #2
 800b1c4:	4093      	lsls	r3, r2
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b1cc:	4935      	ldr	r1, [pc, #212]	@ (800b2a4 <HAL_GPIO_Init+0x310>)
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	089b      	lsrs	r3, r3, #2
 800b1d2:	3302      	adds	r3, #2
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b1da:	4b3b      	ldr	r3, [pc, #236]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	43db      	mvns	r3, r3
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b1fe:	4a32      	ldr	r2, [pc, #200]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b204:	4b30      	ldr	r3, [pc, #192]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	43db      	mvns	r3, r3
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	4013      	ands	r3, r2
 800b212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	4313      	orrs	r3, r2
 800b226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b228:	4a27      	ldr	r2, [pc, #156]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b22e:	4b26      	ldr	r3, [pc, #152]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	43db      	mvns	r3, r3
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	4013      	ands	r3, r2
 800b23c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	4313      	orrs	r3, r2
 800b250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b252:	4a1d      	ldr	r2, [pc, #116]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b258:	4b1b      	ldr	r3, [pc, #108]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	43db      	mvns	r3, r3
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	4013      	ands	r3, r2
 800b266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4313      	orrs	r3, r2
 800b27a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b27c:	4a12      	ldr	r2, [pc, #72]	@ (800b2c8 <HAL_GPIO_Init+0x334>)
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	3301      	adds	r3, #1
 800b286:	61fb      	str	r3, [r7, #28]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2b0f      	cmp	r3, #15
 800b28c:	f67f ae90 	bls.w	800afb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	3724      	adds	r7, #36	@ 0x24
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40023800 	.word	0x40023800
 800b2a4:	40013800 	.word	0x40013800
 800b2a8:	40020000 	.word	0x40020000
 800b2ac:	40020400 	.word	0x40020400
 800b2b0:	40020800 	.word	0x40020800
 800b2b4:	40020c00 	.word	0x40020c00
 800b2b8:	40021000 	.word	0x40021000
 800b2bc:	40021400 	.word	0x40021400
 800b2c0:	40021800 	.word	0x40021800
 800b2c4:	40021c00 	.word	0x40021c00
 800b2c8:	40013c00 	.word	0x40013c00

0800b2cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e0cd      	b.n	800b484 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	f040 80bd 	bne.w	800b47e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b304:	4a65      	ldr	r2, [pc, #404]	@ (800b49c <HAL_GPIO_DeInit+0x1d0>)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	089b      	lsrs	r3, r3, #2
 800b30a:	3302      	adds	r3, #2
 800b30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b310:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	220f      	movs	r2, #15
 800b31c:	fa02 f303 	lsl.w	r3, r2, r3
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	4013      	ands	r3, r2
 800b324:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a5d      	ldr	r2, [pc, #372]	@ (800b4a0 <HAL_GPIO_DeInit+0x1d4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d02b      	beq.n	800b386 <HAL_GPIO_DeInit+0xba>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a5c      	ldr	r2, [pc, #368]	@ (800b4a4 <HAL_GPIO_DeInit+0x1d8>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d025      	beq.n	800b382 <HAL_GPIO_DeInit+0xb6>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a5b      	ldr	r2, [pc, #364]	@ (800b4a8 <HAL_GPIO_DeInit+0x1dc>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d01f      	beq.n	800b37e <HAL_GPIO_DeInit+0xb2>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a5a      	ldr	r2, [pc, #360]	@ (800b4ac <HAL_GPIO_DeInit+0x1e0>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d019      	beq.n	800b37a <HAL_GPIO_DeInit+0xae>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a59      	ldr	r2, [pc, #356]	@ (800b4b0 <HAL_GPIO_DeInit+0x1e4>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d013      	beq.n	800b376 <HAL_GPIO_DeInit+0xaa>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a58      	ldr	r2, [pc, #352]	@ (800b4b4 <HAL_GPIO_DeInit+0x1e8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00d      	beq.n	800b372 <HAL_GPIO_DeInit+0xa6>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a57      	ldr	r2, [pc, #348]	@ (800b4b8 <HAL_GPIO_DeInit+0x1ec>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d007      	beq.n	800b36e <HAL_GPIO_DeInit+0xa2>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a56      	ldr	r2, [pc, #344]	@ (800b4bc <HAL_GPIO_DeInit+0x1f0>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d101      	bne.n	800b36a <HAL_GPIO_DeInit+0x9e>
 800b366:	2307      	movs	r3, #7
 800b368:	e00e      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b36a:	2308      	movs	r3, #8
 800b36c:	e00c      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b36e:	2306      	movs	r3, #6
 800b370:	e00a      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b372:	2305      	movs	r3, #5
 800b374:	e008      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b376:	2304      	movs	r3, #4
 800b378:	e006      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b37a:	2303      	movs	r3, #3
 800b37c:	e004      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b37e:	2302      	movs	r3, #2
 800b380:	e002      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <HAL_GPIO_DeInit+0xbc>
 800b386:	2300      	movs	r3, #0
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	f002 0203 	and.w	r2, r2, #3
 800b38e:	0092      	lsls	r2, r2, #2
 800b390:	4093      	lsls	r3, r2
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d132      	bne.n	800b3fe <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b398:	4b49      	ldr	r3, [pc, #292]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	43db      	mvns	r3, r3
 800b3a0:	4947      	ldr	r1, [pc, #284]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b3a6:	4b46      	ldr	r3, [pc, #280]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	43db      	mvns	r3, r3
 800b3ae:	4944      	ldr	r1, [pc, #272]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b3b4:	4b42      	ldr	r3, [pc, #264]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	43db      	mvns	r3, r3
 800b3bc:	4940      	ldr	r1, [pc, #256]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b3c2:	4b3f      	ldr	r3, [pc, #252]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	493d      	ldr	r1, [pc, #244]	@ (800b4c0 <HAL_GPIO_DeInit+0x1f4>)
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	220f      	movs	r2, #15
 800b3da:	fa02 f303 	lsl.w	r3, r2, r3
 800b3de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b3e0:	4a2e      	ldr	r2, [pc, #184]	@ (800b49c <HAL_GPIO_DeInit+0x1d0>)
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	089b      	lsrs	r3, r3, #2
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	43da      	mvns	r2, r3
 800b3f0:	482a      	ldr	r0, [pc, #168]	@ (800b49c <HAL_GPIO_DeInit+0x1d0>)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	089b      	lsrs	r3, r3, #2
 800b3f6:	400a      	ands	r2, r1
 800b3f8:	3302      	adds	r3, #2
 800b3fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	2103      	movs	r1, #3
 800b408:	fa01 f303 	lsl.w	r3, r1, r3
 800b40c:	43db      	mvns	r3, r3
 800b40e:	401a      	ands	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	08da      	lsrs	r2, r3, #3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3208      	adds	r2, #8
 800b41c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f003 0307 	and.w	r3, r3, #7
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	220f      	movs	r2, #15
 800b42a:	fa02 f303 	lsl.w	r3, r2, r3
 800b42e:	43db      	mvns	r3, r3
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	08d2      	lsrs	r2, r2, #3
 800b434:	4019      	ands	r1, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3208      	adds	r2, #8
 800b43a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68da      	ldr	r2, [r3, #12]
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	2103      	movs	r1, #3
 800b448:	fa01 f303 	lsl.w	r3, r1, r3
 800b44c:	43db      	mvns	r3, r3
 800b44e:	401a      	ands	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	2101      	movs	r1, #1
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	fa01 f303 	lsl.w	r3, r1, r3
 800b460:	43db      	mvns	r3, r3
 800b462:	401a      	ands	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	2103      	movs	r1, #3
 800b472:	fa01 f303 	lsl.w	r3, r1, r3
 800b476:	43db      	mvns	r3, r3
 800b478:	401a      	ands	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	3301      	adds	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b0f      	cmp	r3, #15
 800b488:	f67f af2e 	bls.w	800b2e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	371c      	adds	r7, #28
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	40013800 	.word	0x40013800
 800b4a0:	40020000 	.word	0x40020000
 800b4a4:	40020400 	.word	0x40020400
 800b4a8:	40020800 	.word	0x40020800
 800b4ac:	40020c00 	.word	0x40020c00
 800b4b0:	40021000 	.word	0x40021000
 800b4b4:	40021400 	.word	0x40021400
 800b4b8:	40021800 	.word	0x40021800
 800b4bc:	40021c00 	.word	0x40021c00
 800b4c0:	40013c00 	.word	0x40013c00

0800b4c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	807b      	strh	r3, [r7, #2]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b4d4:	787b      	ldrb	r3, [r7, #1]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b4da:	887a      	ldrh	r2, [r7, #2]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b4e0:	e003      	b.n	800b4ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b4e2:	887b      	ldrh	r3, [r7, #2]
 800b4e4:	041a      	lsls	r2, r3, #16
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	619a      	str	r2, [r3, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b086      	sub	sp, #24
 800b4fa:	af02      	add	r7, sp, #8
 800b4fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e101      	b.n	800b70c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f00b fe58 	bl	80171d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2203      	movs	r2, #3
 800b52c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b536:	d102      	bne.n	800b53e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f005 f8cb 	bl	80106de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	7c1a      	ldrb	r2, [r3, #16]
 800b550:	f88d 2000 	strb.w	r2, [sp]
 800b554:	3304      	adds	r3, #4
 800b556:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b558:	f004 ffaa 	bl	80104b0 <USB_CoreInit>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d005      	beq.n	800b56e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2202      	movs	r2, #2
 800b566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e0ce      	b.n	800b70c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2100      	movs	r1, #0
 800b574:	4618      	mov	r0, r3
 800b576:	f005 f8c3 	bl	8010700 <USB_SetCurrentMode>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d005      	beq.n	800b58c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e0bf      	b.n	800b70c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]
 800b590:	e04a      	b.n	800b628 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b592:	7bfa      	ldrb	r2, [r7, #15]
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	4613      	mov	r3, r2
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	440b      	add	r3, r1
 800b5a0:	3315      	adds	r3, #21
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b5a6:	7bfa      	ldrb	r2, [r7, #15]
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3314      	adds	r3, #20
 800b5b6:	7bfa      	ldrb	r2, [r7, #15]
 800b5b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b5ba:	7bfa      	ldrb	r2, [r7, #15]
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	b298      	uxth	r0, r3
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	440b      	add	r3, r1
 800b5cc:	332e      	adds	r3, #46	@ 0x2e
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b5d2:	7bfa      	ldrb	r2, [r7, #15]
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	00db      	lsls	r3, r3, #3
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	3318      	adds	r3, #24
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b5e6:	7bfa      	ldrb	r2, [r7, #15]
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	00db      	lsls	r3, r3, #3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	331c      	adds	r3, #28
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b5fa:	7bfa      	ldrb	r2, [r7, #15]
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	4613      	mov	r3, r2
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	440b      	add	r3, r1
 800b608:	3320      	adds	r3, #32
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b60e:	7bfa      	ldrb	r2, [r7, #15]
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4613      	mov	r3, r2
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	440b      	add	r3, r1
 800b61c:	3324      	adds	r3, #36	@ 0x24
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b622:	7bfb      	ldrb	r3, [r7, #15]
 800b624:	3301      	adds	r3, #1
 800b626:	73fb      	strb	r3, [r7, #15]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	791b      	ldrb	r3, [r3, #4]
 800b62c:	7bfa      	ldrb	r2, [r7, #15]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d3af      	bcc.n	800b592 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]
 800b636:	e044      	b.n	800b6c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b638:	7bfa      	ldrb	r2, [r7, #15]
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	4613      	mov	r3, r2
 800b63e:	00db      	lsls	r3, r3, #3
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	440b      	add	r3, r1
 800b646:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b64e:	7bfa      	ldrb	r2, [r7, #15]
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	4613      	mov	r3, r2
 800b654:	00db      	lsls	r3, r3, #3
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b660:	7bfa      	ldrb	r2, [r7, #15]
 800b662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b664:	7bfa      	ldrb	r2, [r7, #15]
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	4613      	mov	r3, r2
 800b66a:	00db      	lsls	r3, r3, #3
 800b66c:	4413      	add	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	440b      	add	r3, r1
 800b672:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b67a:	7bfa      	ldrb	r2, [r7, #15]
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4613      	mov	r3, r2
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	4413      	add	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	440b      	add	r3, r1
 800b688:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b690:	7bfa      	ldrb	r2, [r7, #15]
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	4613      	mov	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	440b      	add	r3, r1
 800b69e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b6a6:	7bfa      	ldrb	r2, [r7, #15]
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	4413      	add	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	73fb      	strb	r3, [r7, #15]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	791b      	ldrb	r3, [r3, #4]
 800b6c6:	7bfa      	ldrb	r2, [r7, #15]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d3b5      	bcc.n	800b638 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7c1a      	ldrb	r2, [r3, #16]
 800b6d4:	f88d 2000 	strb.w	r2, [sp]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6dc:	f005 f85c 	bl	8010798 <USB_DevInit>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e00c      	b.n	800b70c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f006 f8a6 	bl	8011856 <USB_DevDisconnect>

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d101      	bne.n	800b730 <HAL_PCD_Start+0x1c>
 800b72c:	2302      	movs	r3, #2
 800b72e:	e022      	b.n	800b776 <HAL_PCD_Start+0x62>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d105      	bne.n	800b758 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b750:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f004 ffad 	bl	80106bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f006 f854 	bl	8011814 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b77e:	b590      	push	{r4, r7, lr}
 800b780:	b08d      	sub	sp, #52	@ 0x34
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4618      	mov	r0, r3
 800b796:	f006 f912 	bl	80119be <USB_GetMode>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f040 848c 	bne.w	800c0ba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f006 f876 	bl	8011898 <USB_ReadInterrupts>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8482 	beq.w	800c0b8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	0a1b      	lsrs	r3, r3, #8
 800b7be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f006 f863 	bl	8011898 <USB_ReadInterrupts>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d107      	bne.n	800b7ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	695a      	ldr	r2, [r3, #20]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f002 0202 	and.w	r2, r2, #2
 800b7ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f006 f851 	bl	8011898 <USB_ReadInterrupts>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f003 0310 	and.w	r3, r3, #16
 800b7fc:	2b10      	cmp	r3, #16
 800b7fe:	d161      	bne.n	800b8c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f022 0210 	bic.w	r2, r2, #16
 800b80e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b810:	6a3b      	ldr	r3, [r7, #32]
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	f003 020f 	and.w	r2, r3, #15
 800b81c:	4613      	mov	r3, r2
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	4413      	add	r3, r2
 800b82c:	3304      	adds	r3, #4
 800b82e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b83a:	d124      	bne.n	800b886 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b842:	4013      	ands	r3, r2
 800b844:	2b00      	cmp	r3, #0
 800b846:	d035      	beq.n	800b8b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	091b      	lsrs	r3, r3, #4
 800b850:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b856:	b29b      	uxth	r3, r3
 800b858:	461a      	mov	r2, r3
 800b85a:	6a38      	ldr	r0, [r7, #32]
 800b85c:	f005 fe88 	bl	8011570 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	68da      	ldr	r2, [r3, #12]
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	091b      	lsrs	r3, r3, #4
 800b868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b86c:	441a      	add	r2, r3
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	695a      	ldr	r2, [r3, #20]
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	091b      	lsrs	r3, r3, #4
 800b87a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b87e:	441a      	add	r2, r3
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	615a      	str	r2, [r3, #20]
 800b884:	e016      	b.n	800b8b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b88c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b890:	d110      	bne.n	800b8b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b898:	2208      	movs	r2, #8
 800b89a:	4619      	mov	r1, r3
 800b89c:	6a38      	ldr	r0, [r7, #32]
 800b89e:	f005 fe67 	bl	8011570 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	695a      	ldr	r2, [r3, #20]
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	091b      	lsrs	r3, r3, #4
 800b8aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8ae:	441a      	add	r2, r3
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699a      	ldr	r2, [r3, #24]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0210 	orr.w	r2, r2, #16
 800b8c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f005 ffe5 	bl	8011898 <USB_ReadInterrupts>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b8d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b8d8:	f040 80a7 	bne.w	800ba2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f005 ffea 	bl	80118be <USB_ReadDevAllOutEpInterrupt>
 800b8ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b8ec:	e099      	b.n	800ba22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 808e 	beq.w	800ba16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b900:	b2d2      	uxtb	r2, r2
 800b902:	4611      	mov	r1, r2
 800b904:	4618      	mov	r0, r3
 800b906:	f006 f80e 	bl	8011926 <USB_ReadDevOutEPInterrupt>
 800b90a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00c      	beq.n	800b930 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b922:	461a      	mov	r2, r3
 800b924:	2301      	movs	r3, #1
 800b926:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fea4 	bl	800c678 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f003 0308 	and.w	r3, r3, #8
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00c      	beq.n	800b954 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b946:	461a      	mov	r2, r3
 800b948:	2308      	movs	r3, #8
 800b94a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b94c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 ff7a 	bl	800c848 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	f003 0310 	and.w	r3, r3, #16
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d008      	beq.n	800b970 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	015a      	lsls	r2, r3, #5
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	4413      	add	r3, r2
 800b966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b96a:	461a      	mov	r2, r3
 800b96c:	2310      	movs	r3, #16
 800b96e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d030      	beq.n	800b9dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b982:	2b80      	cmp	r3, #128	@ 0x80
 800b984:	d109      	bne.n	800b99a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b998:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b99a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b99c:	4613      	mov	r3, r2
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	4413      	add	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	78db      	ldrb	r3, [r3, #3]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d108      	bne.n	800b9ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f00b fd0d 	bl	80173e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	015a      	lsls	r2, r3, #5
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2302      	movs	r3, #2
 800b9da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f003 0320 	and.w	r3, r3, #32
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ba02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	3301      	adds	r3, #1
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	085b      	lsrs	r3, r3, #1
 800ba20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f47f af62 	bne.w	800b8ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f005 ff32 	bl	8011898 <USB_ReadInterrupts>
 800ba34:	4603      	mov	r3, r0
 800ba36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba3e:	f040 80db 	bne.w	800bbf8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f005 ff53 	bl	80118f2 <USB_ReadDevAllInEpInterrupt>
 800ba4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800ba52:	e0cd      	b.n	800bbf0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ba54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 80c2 	beq.w	800bbe4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba66:	b2d2      	uxtb	r2, r2
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f005 ff79 	bl	8011962 <USB_ReadDevInEPInterrupt>
 800ba70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d057      	beq.n	800bb2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	f003 030f 	and.w	r3, r3, #15
 800ba82:	2201      	movs	r2, #1
 800ba84:	fa02 f303 	lsl.w	r3, r2, r3
 800ba88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	43db      	mvns	r3, r3
 800ba96:	69f9      	ldr	r1, [r7, #28]
 800ba98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800baa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baac:	461a      	mov	r2, r3
 800baae:	2301      	movs	r3, #1
 800bab0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	799b      	ldrb	r3, [r3, #6]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d132      	bne.n	800bb20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800baba:	6879      	ldr	r1, [r7, #4]
 800babc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800babe:	4613      	mov	r3, r2
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	440b      	add	r3, r1
 800bac8:	3320      	adds	r3, #32
 800baca:	6819      	ldr	r1, [r3, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad0:	4613      	mov	r3, r2
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	4413      	add	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4403      	add	r3, r0
 800bada:	331c      	adds	r3, #28
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4419      	add	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bae4:	4613      	mov	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4403      	add	r3, r0
 800baee:	3320      	adds	r3, #32
 800baf0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d113      	bne.n	800bb20 <HAL_PCD_IRQHandler+0x3a2>
 800baf8:	6879      	ldr	r1, [r7, #4]
 800bafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bafc:	4613      	mov	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	440b      	add	r3, r1
 800bb06:	3324      	adds	r3, #36	@ 0x24
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d108      	bne.n	800bb20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	f005 ff80 	bl	8011a20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f00b fbd7 	bl	80172da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d008      	beq.n	800bb48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb42:	461a      	mov	r2, r3
 800bb44:	2308      	movs	r3, #8
 800bb46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f003 0310 	and.w	r3, r3, #16
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d008      	beq.n	800bb64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb5e:	461a      	mov	r2, r3
 800bb60:	2310      	movs	r3, #16
 800bb62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d008      	beq.n	800bb80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	2340      	movs	r3, #64	@ 0x40
 800bb7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f003 0302 	and.w	r3, r3, #2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d023      	beq.n	800bbd2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800bb8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb8c:	6a38      	ldr	r0, [r7, #32]
 800bb8e:	f004 ff67 	bl	8010a60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bb92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb94:	4613      	mov	r3, r2
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	3310      	adds	r3, #16
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	4413      	add	r3, r2
 800bba2:	3304      	adds	r3, #4
 800bba4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	78db      	ldrb	r3, [r3, #3]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d108      	bne.n	800bbc0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f00b fc24 	bl	8017408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	015a      	lsls	r2, r3, #5
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbcc:	461a      	mov	r2, r3
 800bbce:	2302      	movs	r3, #2
 800bbd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bbdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fcbd 	bl	800c55e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbec:	085b      	lsrs	r3, r3, #1
 800bbee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f47f af2e 	bne.w	800ba54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f005 fe4b 	bl	8011898 <USB_ReadInterrupts>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc0c:	d122      	bne.n	800bc54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	69fa      	ldr	r2, [r7, #28]
 800bc18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc1c:	f023 0301 	bic.w	r3, r3, #1
 800bc20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d108      	bne.n	800bc3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bc34:	2100      	movs	r1, #0
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fea4 	bl	800c984 <HAL_PCDEx_LPM_Callback>
 800bc3c:	e002      	b.n	800bc44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f00b fbc2 	bl	80173c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bc52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f005 fe1d 	bl	8011898 <USB_ReadInterrupts>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc68:	d112      	bne.n	800bc90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d102      	bne.n	800bc80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f00b fb7e 	bl	801737c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	695a      	ldr	r2, [r3, #20]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bc8e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f005 fdff 	bl	8011898 <USB_ReadInterrupts>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bca4:	f040 80b7 	bne.w	800be16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	69fa      	ldr	r2, [r7, #28]
 800bcb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcb6:	f023 0301 	bic.w	r3, r3, #1
 800bcba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2110      	movs	r1, #16
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f004 fecc 	bl	8010a60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bccc:	e046      	b.n	800bd5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bce0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcf2:	0151      	lsls	r1, r2, #5
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	440a      	add	r2, r1
 800bcf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd26:	0151      	lsls	r1, r2, #5
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	440a      	add	r2, r1
 800bd2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd38:	015a      	lsls	r2, r3, #5
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd46:	0151      	lsls	r1, r2, #5
 800bd48:	69fa      	ldr	r2, [r7, #28]
 800bd4a:	440a      	add	r2, r1
 800bd4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd58:	3301      	adds	r3, #1
 800bd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	791b      	ldrb	r3, [r3, #4]
 800bd60:	461a      	mov	r2, r3
 800bd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d3b2      	bcc.n	800bcce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd6e:	69db      	ldr	r3, [r3, #28]
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bd7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7bdb      	ldrb	r3, [r3, #15]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d016      	beq.n	800bdb2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd94:	f043 030b 	orr.w	r3, r3, #11
 800bd98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bda2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bda4:	69fa      	ldr	r2, [r7, #28]
 800bda6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdaa:	f043 030b 	orr.w	r3, r3, #11
 800bdae:	6453      	str	r3, [r2, #68]	@ 0x44
 800bdb0:	e015      	b.n	800bdde <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	69fa      	ldr	r2, [r7, #28]
 800bdbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bdc4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800bdc8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdd8:	f043 030b 	orr.w	r3, r3, #11
 800bddc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69fa      	ldr	r2, [r7, #28]
 800bde8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bdf0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be00:	461a      	mov	r2, r3
 800be02:	f005 fe0d 	bl	8011a20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	695a      	ldr	r2, [r3, #20]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800be14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f005 fd3c 	bl	8011898 <USB_ReadInterrupts>
 800be20:	4603      	mov	r3, r0
 800be22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be2a:	d123      	bne.n	800be74 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4618      	mov	r0, r3
 800be32:	f005 fdd2 	bl	80119da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f004 fe89 	bl	8010b52 <USB_GetDevSpeed>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681c      	ldr	r4, [r3, #0]
 800be4c:	f001 fa0a 	bl	800d264 <HAL_RCC_GetHCLKFreq>
 800be50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800be56:	461a      	mov	r2, r3
 800be58:	4620      	mov	r0, r4
 800be5a:	f004 fb8d 	bl	8010578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f00b fa63 	bl	801732a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	695a      	ldr	r2, [r3, #20]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800be72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4618      	mov	r0, r3
 800be7a:	f005 fd0d 	bl	8011898 <USB_ReadInterrupts>
 800be7e:	4603      	mov	r3, r0
 800be80:	f003 0308 	and.w	r3, r3, #8
 800be84:	2b08      	cmp	r3, #8
 800be86:	d10a      	bne.n	800be9e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f00b fa40 	bl	801730e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	695a      	ldr	r2, [r3, #20]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f002 0208 	and.w	r2, r2, #8
 800be9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f005 fcf8 	bl	8011898 <USB_ReadInterrupts>
 800bea8:	4603      	mov	r3, r0
 800beaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beae:	2b80      	cmp	r3, #128	@ 0x80
 800beb0:	d123      	bne.n	800befa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800beba:	6a3b      	ldr	r3, [r7, #32]
 800bebc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bebe:	2301      	movs	r3, #1
 800bec0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bec2:	e014      	b.n	800beee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec8:	4613      	mov	r3, r2
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d105      	bne.n	800bee8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fb0a 	bl	800c4fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beea:	3301      	adds	r3, #1
 800beec:	627b      	str	r3, [r7, #36]	@ 0x24
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	791b      	ldrb	r3, [r3, #4]
 800bef2:	461a      	mov	r2, r3
 800bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d3e4      	bcc.n	800bec4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4618      	mov	r0, r3
 800bf00:	f005 fcca 	bl	8011898 <USB_ReadInterrupts>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf0e:	d13c      	bne.n	800bf8a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf10:	2301      	movs	r3, #1
 800bf12:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf14:	e02b      	b.n	800bf6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	015a      	lsls	r2, r3, #5
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	4413      	add	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	440b      	add	r3, r1
 800bf34:	3318      	adds	r3, #24
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d115      	bne.n	800bf68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bf3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	da12      	bge.n	800bf68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf46:	4613      	mov	r3, r2
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	3317      	adds	r3, #23
 800bf52:	2201      	movs	r2, #1
 800bf54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 faca 	bl	800c4fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	791b      	ldrb	r3, [r3, #4]
 800bf72:	461a      	mov	r2, r3
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d3cd      	bcc.n	800bf16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	695a      	ldr	r2, [r3, #20]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bf88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f005 fc82 	bl	8011898 <USB_ReadInterrupts>
 800bf94:	4603      	mov	r3, r0
 800bf96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf9e:	d156      	bne.n	800c04e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfa4:	e045      	b.n	800c032 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bfb6:	6879      	ldr	r1, [r7, #4]
 800bfb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfba:	4613      	mov	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	440b      	add	r3, r1
 800bfc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d12e      	bne.n	800c02c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bfce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da2b      	bge.n	800c02c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bfe0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d121      	bne.n	800c02c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfec:	4613      	mov	r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	440b      	add	r3, r1
 800bff6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bffa:	2201      	movs	r2, #1
 800bffc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10a      	bne.n	800c02c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	69fa      	ldr	r2, [r7, #28]
 800c020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c024:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c028:	6053      	str	r3, [r2, #4]
            break;
 800c02a:	e008      	b.n	800c03e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02e:	3301      	adds	r3, #1
 800c030:	627b      	str	r3, [r7, #36]	@ 0x24
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	791b      	ldrb	r3, [r3, #4]
 800c036:	461a      	mov	r2, r3
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d3b3      	bcc.n	800bfa6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	695a      	ldr	r2, [r3, #20]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c04c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4618      	mov	r0, r3
 800c054:	f005 fc20 	bl	8011898 <USB_ReadInterrupts>
 800c058:	4603      	mov	r3, r0
 800c05a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c05e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c062:	d10a      	bne.n	800c07a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f00b f9e1 	bl	801742c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	695a      	ldr	r2, [r3, #20]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4618      	mov	r0, r3
 800c080:	f005 fc0a 	bl	8011898 <USB_ReadInterrupts>
 800c084:	4603      	mov	r3, r0
 800c086:	f003 0304 	and.w	r3, r3, #4
 800c08a:	2b04      	cmp	r3, #4
 800c08c:	d115      	bne.n	800c0ba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f00b f9d1 	bl	8017448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6859      	ldr	r1, [r3, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
 800c0b6:	e000      	b.n	800c0ba <HAL_PCD_IRQHandler+0x93c>
      return;
 800c0b8:	bf00      	nop
    }
  }
}
 800c0ba:	3734      	adds	r7, #52	@ 0x34
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd90      	pop	{r4, r7, pc}

0800c0c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d101      	bne.n	800c0da <HAL_PCD_SetAddress+0x1a>
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e012      	b.n	800c100 <HAL_PCD_SetAddress+0x40>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	78fa      	ldrb	r2, [r7, #3]
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f005 fb69 	bl	80117c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	4608      	mov	r0, r1
 800c112:	4611      	mov	r1, r2
 800c114:	461a      	mov	r2, r3
 800c116:	4603      	mov	r3, r0
 800c118:	70fb      	strb	r3, [r7, #3]
 800c11a:	460b      	mov	r3, r1
 800c11c:	803b      	strh	r3, [r7, #0]
 800c11e:	4613      	mov	r3, r2
 800c120:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	da0f      	bge.n	800c14e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	f003 020f 	and.w	r2, r3, #15
 800c134:	4613      	mov	r3, r2
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	4413      	add	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	3310      	adds	r3, #16
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	4413      	add	r3, r2
 800c142:	3304      	adds	r3, #4
 800c144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2201      	movs	r2, #1
 800c14a:	705a      	strb	r2, [r3, #1]
 800c14c:	e00f      	b.n	800c16e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	f003 020f 	and.w	r2, r3, #15
 800c154:	4613      	mov	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	4413      	add	r3, r2
 800c164:	3304      	adds	r3, #4
 800c166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	f003 030f 	and.w	r3, r3, #15
 800c174:	b2da      	uxtb	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c17a:	883b      	ldrh	r3, [r7, #0]
 800c17c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	78ba      	ldrb	r2, [r7, #2]
 800c188:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	785b      	ldrb	r3, [r3, #1]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c19c:	78bb      	ldrb	r3, [r7, #2]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d102      	bne.n	800c1a8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d101      	bne.n	800c1b6 <HAL_PCD_EP_Open+0xae>
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e00e      	b.n	800c1d4 <HAL_PCD_EP_Open+0xcc>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68f9      	ldr	r1, [r7, #12]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f004 fce9 	bl	8010b9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c1e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da0f      	bge.n	800c210 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	f003 020f 	and.w	r2, r3, #15
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	3310      	adds	r3, #16
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	4413      	add	r3, r2
 800c204:	3304      	adds	r3, #4
 800c206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2201      	movs	r2, #1
 800c20c:	705a      	strb	r2, [r3, #1]
 800c20e:	e00f      	b.n	800c230 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	f003 020f 	and.w	r2, r3, #15
 800c216:	4613      	mov	r3, r2
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	4413      	add	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	4413      	add	r3, r2
 800c226:	3304      	adds	r3, #4
 800c228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	f003 030f 	and.w	r3, r3, #15
 800c236:	b2da      	uxtb	r2, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <HAL_PCD_EP_Close+0x6e>
 800c246:	2302      	movs	r3, #2
 800c248:	e00e      	b.n	800c268 <HAL_PCD_EP_Close+0x8c>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68f9      	ldr	r1, [r7, #12]
 800c258:	4618      	mov	r0, r3
 800c25a:	f004 fd27 	bl	8010cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	607a      	str	r2, [r7, #4]
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	460b      	mov	r3, r1
 800c27e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c280:	7afb      	ldrb	r3, [r7, #11]
 800c282:	f003 020f 	and.w	r2, r3, #15
 800c286:	4613      	mov	r3, r2
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	4413      	add	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	4413      	add	r3, r2
 800c296:	3304      	adds	r3, #4
 800c298:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	f003 030f 	and.w	r3, r3, #15
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	799b      	ldrb	r3, [r3, #6]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d102      	bne.n	800c2cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	799b      	ldrb	r3, [r3, #6]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	6979      	ldr	r1, [r7, #20]
 800c2d8:	f004 fdc4 	bl	8010e64 <USB_EPStartXfer>

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b083      	sub	sp, #12
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	f003 020f 	and.w	r2, r3, #15
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	4413      	add	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c308:	681b      	ldr	r3, [r3, #0]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b086      	sub	sp, #24
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
 800c322:	460b      	mov	r3, r1
 800c324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c326:	7afb      	ldrb	r3, [r7, #11]
 800c328:	f003 020f 	and.w	r2, r3, #15
 800c32c:	4613      	mov	r3, r2
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	3310      	adds	r3, #16
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	4413      	add	r3, r2
 800c33a:	3304      	adds	r3, #4
 800c33c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2200      	movs	r2, #0
 800c34e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2201      	movs	r2, #1
 800c354:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c356:	7afb      	ldrb	r3, [r7, #11]
 800c358:	f003 030f 	and.w	r3, r3, #15
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	799b      	ldrb	r3, [r3, #6]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d102      	bne.n	800c370 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6818      	ldr	r0, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	799b      	ldrb	r3, [r3, #6]
 800c378:	461a      	mov	r2, r3
 800c37a:	6979      	ldr	r1, [r7, #20]
 800c37c:	f004 fd72 	bl	8010e64 <USB_EPStartXfer>

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	460b      	mov	r3, r1
 800c394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c396:	78fb      	ldrb	r3, [r7, #3]
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7912      	ldrb	r2, [r2, #4]
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d901      	bls.n	800c3a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e04f      	b.n	800c448 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c3a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da0f      	bge.n	800c3d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	f003 020f 	and.w	r2, r3, #15
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	00db      	lsls	r3, r3, #3
 800c3ba:	4413      	add	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	3310      	adds	r3, #16
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	705a      	strb	r2, [r3, #1]
 800c3ce:	e00d      	b.n	800c3ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c3f2:	78fb      	ldrb	r3, [r7, #3]
 800c3f4:	f003 030f 	and.w	r3, r3, #15
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c404:	2b01      	cmp	r3, #1
 800c406:	d101      	bne.n	800c40c <HAL_PCD_EP_SetStall+0x82>
 800c408:	2302      	movs	r3, #2
 800c40a:	e01d      	b.n	800c448 <HAL_PCD_EP_SetStall+0xbe>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68f9      	ldr	r1, [r7, #12]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f005 f900 	bl	8011620 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c420:	78fb      	ldrb	r3, [r7, #3]
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	2b00      	cmp	r3, #0
 800c428:	d109      	bne.n	800c43e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	7999      	ldrb	r1, [r3, #6]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c438:	461a      	mov	r2, r3
 800c43a:	f005 faf1 	bl	8011a20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c45c:	78fb      	ldrb	r3, [r7, #3]
 800c45e:	f003 030f 	and.w	r3, r3, #15
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	7912      	ldrb	r2, [r2, #4]
 800c466:	4293      	cmp	r3, r2
 800c468:	d901      	bls.n	800c46e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e042      	b.n	800c4f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c46e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c472:	2b00      	cmp	r3, #0
 800c474:	da0f      	bge.n	800c496 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	f003 020f 	and.w	r2, r3, #15
 800c47c:	4613      	mov	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	3310      	adds	r3, #16
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	4413      	add	r3, r2
 800c48a:	3304      	adds	r3, #4
 800c48c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2201      	movs	r2, #1
 800c492:	705a      	strb	r2, [r3, #1]
 800c494:	e00f      	b.n	800c4b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c496:	78fb      	ldrb	r3, [r7, #3]
 800c498:	f003 020f 	and.w	r2, r3, #15
 800c49c:	4613      	mov	r3, r2
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d101      	bne.n	800c4d6 <HAL_PCD_EP_ClrStall+0x86>
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	e00e      	b.n	800c4f4 <HAL_PCD_EP_ClrStall+0xa4>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68f9      	ldr	r1, [r7, #12]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f005 f909 	bl	80116fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	da0c      	bge.n	800c52a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	f003 020f 	and.w	r2, r3, #15
 800c516:	4613      	mov	r3, r2
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	4413      	add	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	3310      	adds	r3, #16
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	4413      	add	r3, r2
 800c524:	3304      	adds	r3, #4
 800c526:	60fb      	str	r3, [r7, #12]
 800c528:	e00c      	b.n	800c544 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	f003 020f 	and.w	r2, r3, #15
 800c530:	4613      	mov	r3, r2
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	4413      	add	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	3304      	adds	r3, #4
 800c542:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68f9      	ldr	r1, [r7, #12]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f004 ff28 	bl	80113a0 <USB_EPStopXfer>
 800c550:	4603      	mov	r3, r0
 800c552:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c554:	7afb      	ldrb	r3, [r7, #11]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b08a      	sub	sp, #40	@ 0x28
 800c562:	af02      	add	r7, sp, #8
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	4413      	add	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	3310      	adds	r3, #16
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	4413      	add	r3, r2
 800c582:	3304      	adds	r3, #4
 800c584:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	695a      	ldr	r2, [r3, #20]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d901      	bls.n	800c596 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e06b      	b.n	800c66e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	691a      	ldr	r2, [r3, #16]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	69fa      	ldr	r2, [r7, #28]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d902      	bls.n	800c5b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	3303      	adds	r3, #3
 800c5b6:	089b      	lsrs	r3, r3, #2
 800c5b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c5ba:	e02a      	b.n	800c612 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	69fa      	ldr	r2, [r7, #28]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d902      	bls.n	800c5d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	3303      	adds	r3, #3
 800c5dc:	089b      	lsrs	r3, r3, #2
 800c5de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68d9      	ldr	r1, [r3, #12]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6978      	ldr	r0, [r7, #20]
 800c5f6:	f004 ff7d 	bl	80114f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	441a      	add	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	695a      	ldr	r2, [r3, #20]
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	441a      	add	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c622:	69ba      	ldr	r2, [r7, #24]
 800c624:	429a      	cmp	r2, r3
 800c626:	d809      	bhi.n	800c63c <PCD_WriteEmptyTxFifo+0xde>
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	695a      	ldr	r2, [r3, #20]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c630:	429a      	cmp	r2, r3
 800c632:	d203      	bcs.n	800c63c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1bf      	bne.n	800c5bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	691a      	ldr	r2, [r3, #16]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	429a      	cmp	r2, r3
 800c646:	d811      	bhi.n	800c66c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f003 030f 	and.w	r3, r3, #15
 800c64e:	2201      	movs	r2, #1
 800c650:	fa02 f303 	lsl.w	r3, r2, r3
 800c654:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c65c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	43db      	mvns	r3, r3
 800c662:	6939      	ldr	r1, [r7, #16]
 800c664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c668:	4013      	ands	r3, r2
 800c66a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
	...

0800c678 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b088      	sub	sp, #32
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	333c      	adds	r3, #60	@ 0x3c
 800c690:	3304      	adds	r3, #4
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	015a      	lsls	r2, r3, #5
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	799b      	ldrb	r3, [r3, #6]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d17b      	bne.n	800c7a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d015      	beq.n	800c6e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	4a61      	ldr	r2, [pc, #388]	@ (800c840 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	f240 80b9 	bls.w	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80b3 	beq.w	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6e0:	6093      	str	r3, [r2, #8]
 800c6e2:	e0a7      	b.n	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	f003 0320 	and.w	r3, r3, #32
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d009      	beq.n	800c702 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	6093      	str	r3, [r2, #8]
 800c700:	e098      	b.n	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f040 8093 	bne.w	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	4a4b      	ldr	r2, [pc, #300]	@ (800c840 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d90f      	bls.n	800c736 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00a      	beq.n	800c736 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c72c:	461a      	mov	r2, r3
 800c72e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c732:	6093      	str	r3, [r2, #8]
 800c734:	e07e      	b.n	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4613      	mov	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	4413      	add	r3, r2
 800c748:	3304      	adds	r3, #4
 800c74a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	0159      	lsls	r1, r3, #5
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	440b      	add	r3, r1
 800c758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d114      	bne.n	800c798 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d109      	bne.n	800c78a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6818      	ldr	r0, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c780:	461a      	mov	r2, r3
 800c782:	2101      	movs	r1, #1
 800c784:	f005 f94c 	bl	8011a20 <USB_EP0_OutStart>
 800c788:	e006      	b.n	800c798 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	68da      	ldr	r2, [r3, #12]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	441a      	add	r2, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f00a fd80 	bl	80172a4 <HAL_PCD_DataOutStageCallback>
 800c7a4:	e046      	b.n	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	4a26      	ldr	r2, [pc, #152]	@ (800c844 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d124      	bne.n	800c7f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00a      	beq.n	800c7ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	015a      	lsls	r2, r3, #5
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	4413      	add	r3, r2
 800c7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7ca:	6093      	str	r3, [r2, #8]
 800c7cc:	e032      	b.n	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	f003 0320 	and.w	r3, r3, #32
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d008      	beq.n	800c7ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	2320      	movs	r3, #32
 800c7e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f00a fd57 	bl	80172a4 <HAL_PCD_DataOutStageCallback>
 800c7f6:	e01d      	b.n	800c834 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d114      	bne.n	800c828 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	4613      	mov	r3, r2
 800c804:	00db      	lsls	r3, r3, #3
 800c806:	4413      	add	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	440b      	add	r3, r1
 800c80c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d108      	bne.n	800c828 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c820:	461a      	mov	r2, r3
 800c822:	2100      	movs	r1, #0
 800c824:	f005 f8fc 	bl	8011a20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f00a fd38 	bl	80172a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	4f54300a 	.word	0x4f54300a
 800c844:	4f54310a 	.word	0x4f54310a

0800c848 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	333c      	adds	r3, #60	@ 0x3c
 800c860:	3304      	adds	r3, #4
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4a15      	ldr	r2, [pc, #84]	@ (800c8d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d90e      	bls.n	800c89c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c884:	2b00      	cmp	r3, #0
 800c886:	d009      	beq.n	800c89c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c894:	461a      	mov	r2, r3
 800c896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c89a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f00a fcef 	bl	8017280 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4a0a      	ldr	r2, [pc, #40]	@ (800c8d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d90c      	bls.n	800c8c4 <PCD_EP_OutSetupPacket_int+0x7c>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	799b      	ldrb	r3, [r3, #6]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d108      	bne.n	800c8c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6818      	ldr	r0, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c8bc:	461a      	mov	r2, r3
 800c8be:	2101      	movs	r1, #1
 800c8c0:	f005 f8ae 	bl	8011a20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	4f54300a 	.word	0x4f54300a

0800c8d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d107      	bne.n	800c902 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c8f2:	883b      	ldrh	r3, [r7, #0]
 800c8f4:	0419      	lsls	r1, r3, #16
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	629a      	str	r2, [r3, #40]	@ 0x28
 800c900:	e028      	b.n	800c954 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c908:	0c1b      	lsrs	r3, r3, #16
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4413      	add	r3, r2
 800c90e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c910:	2300      	movs	r3, #0
 800c912:	73fb      	strb	r3, [r7, #15]
 800c914:	e00d      	b.n	800c932 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	3340      	adds	r3, #64	@ 0x40
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	0c1b      	lsrs	r3, r3, #16
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	4413      	add	r3, r2
 800c92a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c92c:	7bfb      	ldrb	r3, [r7, #15]
 800c92e:	3301      	adds	r3, #1
 800c930:	73fb      	strb	r3, [r7, #15]
 800c932:	7bfa      	ldrb	r2, [r7, #15]
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	3b01      	subs	r3, #1
 800c938:	429a      	cmp	r2, r3
 800c93a:	d3ec      	bcc.n	800c916 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c93c:	883b      	ldrh	r3, [r7, #0]
 800c93e:	0418      	lsls	r0, r3, #16
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6819      	ldr	r1, [r3, #0]
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	3b01      	subs	r3, #1
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	4302      	orrs	r2, r0
 800c94c:	3340      	adds	r3, #64	@ 0x40
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	440b      	add	r3, r1
 800c952:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	460b      	mov	r3, r1
 800c96c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	887a      	ldrh	r2, [r7, #2]
 800c974:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e267      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d075      	beq.n	800caa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c9ba:	4b88      	ldr	r3, [pc, #544]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f003 030c 	and.w	r3, r3, #12
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	d00c      	beq.n	800c9e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9c6:	4b85      	ldr	r3, [pc, #532]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c9ce:	2b08      	cmp	r3, #8
 800c9d0:	d112      	bne.n	800c9f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9d2:	4b82      	ldr	r3, [pc, #520]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c9de:	d10b      	bne.n	800c9f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9e0:	4b7e      	ldr	r3, [pc, #504]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d05b      	beq.n	800caa4 <HAL_RCC_OscConfig+0x108>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d157      	bne.n	800caa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e242      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca00:	d106      	bne.n	800ca10 <HAL_RCC_OscConfig+0x74>
 800ca02:	4b76      	ldr	r3, [pc, #472]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a75      	ldr	r2, [pc, #468]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca0c:	6013      	str	r3, [r2, #0]
 800ca0e:	e01d      	b.n	800ca4c <HAL_RCC_OscConfig+0xb0>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca18:	d10c      	bne.n	800ca34 <HAL_RCC_OscConfig+0x98>
 800ca1a:	4b70      	ldr	r3, [pc, #448]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a6f      	ldr	r2, [pc, #444]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	4b6d      	ldr	r3, [pc, #436]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a6c      	ldr	r2, [pc, #432]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca30:	6013      	str	r3, [r2, #0]
 800ca32:	e00b      	b.n	800ca4c <HAL_RCC_OscConfig+0xb0>
 800ca34:	4b69      	ldr	r3, [pc, #420]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a68      	ldr	r2, [pc, #416]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	4b66      	ldr	r3, [pc, #408]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a65      	ldr	r2, [pc, #404]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d013      	beq.n	800ca7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca54:	f7fd fcfa 	bl	800a44c <HAL_GetTick>
 800ca58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca5a:	e008      	b.n	800ca6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca5c:	f7fd fcf6 	bl	800a44c <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b64      	cmp	r3, #100	@ 0x64
 800ca68:	d901      	bls.n	800ca6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e207      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca6e:	4b5b      	ldr	r3, [pc, #364]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0f0      	beq.n	800ca5c <HAL_RCC_OscConfig+0xc0>
 800ca7a:	e014      	b.n	800caa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca7c:	f7fd fce6 	bl	800a44c <HAL_GetTick>
 800ca80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca82:	e008      	b.n	800ca96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca84:	f7fd fce2 	bl	800a44c <HAL_GetTick>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	2b64      	cmp	r3, #100	@ 0x64
 800ca90:	d901      	bls.n	800ca96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e1f3      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca96:	4b51      	ldr	r3, [pc, #324]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1f0      	bne.n	800ca84 <HAL_RCC_OscConfig+0xe8>
 800caa2:	e000      	b.n	800caa6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800caa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 0302 	and.w	r3, r3, #2
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d063      	beq.n	800cb7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800cab2:	4b4a      	ldr	r3, [pc, #296]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f003 030c 	and.w	r3, r3, #12
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00b      	beq.n	800cad6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cabe:	4b47      	ldr	r3, [pc, #284]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800cac6:	2b08      	cmp	r3, #8
 800cac8:	d11c      	bne.n	800cb04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800caca:	4b44      	ldr	r3, [pc, #272]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d116      	bne.n	800cb04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cad6:	4b41      	ldr	r3, [pc, #260]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0302 	and.w	r3, r3, #2
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d005      	beq.n	800caee <HAL_RCC_OscConfig+0x152>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d001      	beq.n	800caee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e1c7      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caee:	4b3b      	ldr	r3, [pc, #236]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	4937      	ldr	r1, [pc, #220]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb02:	e03a      	b.n	800cb7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d020      	beq.n	800cb4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb0c:	4b34      	ldr	r3, [pc, #208]	@ (800cbe0 <HAL_RCC_OscConfig+0x244>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb12:	f7fd fc9b 	bl	800a44c <HAL_GetTick>
 800cb16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb18:	e008      	b.n	800cb2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb1a:	f7fd fc97 	bl	800a44c <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d901      	bls.n	800cb2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e1a8      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb2c:	4b2b      	ldr	r3, [pc, #172]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0f0      	beq.n	800cb1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb38:	4b28      	ldr	r3, [pc, #160]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	4925      	ldr	r1, [pc, #148]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	600b      	str	r3, [r1, #0]
 800cb4c:	e015      	b.n	800cb7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb4e:	4b24      	ldr	r3, [pc, #144]	@ (800cbe0 <HAL_RCC_OscConfig+0x244>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb54:	f7fd fc7a 	bl	800a44c <HAL_GetTick>
 800cb58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb5a:	e008      	b.n	800cb6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb5c:	f7fd fc76 	bl	800a44c <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d901      	bls.n	800cb6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e187      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb6e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 0302 	and.w	r3, r3, #2
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1f0      	bne.n	800cb5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0308 	and.w	r3, r3, #8
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d036      	beq.n	800cbf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d016      	beq.n	800cbbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb8e:	4b15      	ldr	r3, [pc, #84]	@ (800cbe4 <HAL_RCC_OscConfig+0x248>)
 800cb90:	2201      	movs	r2, #1
 800cb92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb94:	f7fd fc5a 	bl	800a44c <HAL_GetTick>
 800cb98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb9a:	e008      	b.n	800cbae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb9c:	f7fd fc56 	bl	800a44c <HAL_GetTick>
 800cba0:	4602      	mov	r2, r0
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d901      	bls.n	800cbae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e167      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbae:	4b0b      	ldr	r3, [pc, #44]	@ (800cbdc <HAL_RCC_OscConfig+0x240>)
 800cbb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbb2:	f003 0302 	and.w	r3, r3, #2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d0f0      	beq.n	800cb9c <HAL_RCC_OscConfig+0x200>
 800cbba:	e01b      	b.n	800cbf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbbc:	4b09      	ldr	r3, [pc, #36]	@ (800cbe4 <HAL_RCC_OscConfig+0x248>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cbc2:	f7fd fc43 	bl	800a44c <HAL_GetTick>
 800cbc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbc8:	e00e      	b.n	800cbe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbca:	f7fd fc3f 	bl	800a44c <HAL_GetTick>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d907      	bls.n	800cbe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e150      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
 800cbdc:	40023800 	.word	0x40023800
 800cbe0:	42470000 	.word	0x42470000
 800cbe4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbe8:	4b88      	ldr	r3, [pc, #544]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cbea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbec:	f003 0302 	and.w	r3, r3, #2
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1ea      	bne.n	800cbca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0304 	and.w	r3, r3, #4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 8097 	beq.w	800cd30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc02:	2300      	movs	r3, #0
 800cc04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc06:	4b81      	ldr	r3, [pc, #516]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10f      	bne.n	800cc32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc12:	2300      	movs	r3, #0
 800cc14:	60bb      	str	r3, [r7, #8]
 800cc16:	4b7d      	ldr	r3, [pc, #500]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc1a:	4a7c      	ldr	r2, [pc, #496]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cc20:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc22:	4b7a      	ldr	r3, [pc, #488]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc2a:	60bb      	str	r3, [r7, #8]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc32:	4b77      	ldr	r3, [pc, #476]	@ (800ce10 <HAL_RCC_OscConfig+0x474>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d118      	bne.n	800cc70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc3e:	4b74      	ldr	r3, [pc, #464]	@ (800ce10 <HAL_RCC_OscConfig+0x474>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a73      	ldr	r2, [pc, #460]	@ (800ce10 <HAL_RCC_OscConfig+0x474>)
 800cc44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc4a:	f7fd fbff 	bl	800a44c <HAL_GetTick>
 800cc4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc50:	e008      	b.n	800cc64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc52:	f7fd fbfb 	bl	800a44c <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d901      	bls.n	800cc64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e10c      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc64:	4b6a      	ldr	r3, [pc, #424]	@ (800ce10 <HAL_RCC_OscConfig+0x474>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0f0      	beq.n	800cc52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d106      	bne.n	800cc86 <HAL_RCC_OscConfig+0x2ea>
 800cc78:	4b64      	ldr	r3, [pc, #400]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc7c:	4a63      	ldr	r2, [pc, #396]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc7e:	f043 0301 	orr.w	r3, r3, #1
 800cc82:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc84:	e01c      	b.n	800ccc0 <HAL_RCC_OscConfig+0x324>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	d10c      	bne.n	800cca8 <HAL_RCC_OscConfig+0x30c>
 800cc8e:	4b5f      	ldr	r3, [pc, #380]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc92:	4a5e      	ldr	r2, [pc, #376]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc94:	f043 0304 	orr.w	r3, r3, #4
 800cc98:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc9a:	4b5c      	ldr	r3, [pc, #368]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9e:	4a5b      	ldr	r2, [pc, #364]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cca0:	f043 0301 	orr.w	r3, r3, #1
 800cca4:	6713      	str	r3, [r2, #112]	@ 0x70
 800cca6:	e00b      	b.n	800ccc0 <HAL_RCC_OscConfig+0x324>
 800cca8:	4b58      	ldr	r3, [pc, #352]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800ccaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccac:	4a57      	ldr	r2, [pc, #348]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800ccae:	f023 0301 	bic.w	r3, r3, #1
 800ccb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccb4:	4b55      	ldr	r3, [pc, #340]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800ccb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccb8:	4a54      	ldr	r2, [pc, #336]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800ccba:	f023 0304 	bic.w	r3, r3, #4
 800ccbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d015      	beq.n	800ccf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc8:	f7fd fbc0 	bl	800a44c <HAL_GetTick>
 800cccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccce:	e00a      	b.n	800cce6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccd0:	f7fd fbbc 	bl	800a44c <HAL_GetTick>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d901      	bls.n	800cce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cce2:	2303      	movs	r3, #3
 800cce4:	e0cb      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cce6:	4b49      	ldr	r3, [pc, #292]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccea:	f003 0302 	and.w	r3, r3, #2
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d0ee      	beq.n	800ccd0 <HAL_RCC_OscConfig+0x334>
 800ccf2:	e014      	b.n	800cd1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ccf4:	f7fd fbaa 	bl	800a44c <HAL_GetTick>
 800ccf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ccfa:	e00a      	b.n	800cd12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccfc:	f7fd fba6 	bl	800a44c <HAL_GetTick>
 800cd00:	4602      	mov	r2, r0
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d901      	bls.n	800cd12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e0b5      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd12:	4b3e      	ldr	r3, [pc, #248]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cd14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1ee      	bne.n	800ccfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d105      	bne.n	800cd30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd24:	4b39      	ldr	r3, [pc, #228]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd28:	4a38      	ldr	r2, [pc, #224]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cd2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 80a1 	beq.w	800ce7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd3a:	4b34      	ldr	r3, [pc, #208]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f003 030c 	and.w	r3, r3, #12
 800cd42:	2b08      	cmp	r3, #8
 800cd44:	d05c      	beq.n	800ce00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d141      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd4e:	4b31      	ldr	r3, [pc, #196]	@ (800ce14 <HAL_RCC_OscConfig+0x478>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd54:	f7fd fb7a 	bl	800a44c <HAL_GetTick>
 800cd58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd5a:	e008      	b.n	800cd6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd5c:	f7fd fb76 	bl	800a44c <HAL_GetTick>
 800cd60:	4602      	mov	r2, r0
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d901      	bls.n	800cd6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e087      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd6e:	4b27      	ldr	r3, [pc, #156]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1f0      	bne.n	800cd5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	69da      	ldr	r2, [r3, #28]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd88:	019b      	lsls	r3, r3, #6
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd90:	085b      	lsrs	r3, r3, #1
 800cd92:	3b01      	subs	r3, #1
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9c:	061b      	lsls	r3, r3, #24
 800cd9e:	491b      	ldr	r1, [pc, #108]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cda0:	4313      	orrs	r3, r2
 800cda2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cda4:	4b1b      	ldr	r3, [pc, #108]	@ (800ce14 <HAL_RCC_OscConfig+0x478>)
 800cda6:	2201      	movs	r2, #1
 800cda8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdaa:	f7fd fb4f 	bl	800a44c <HAL_GetTick>
 800cdae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdb0:	e008      	b.n	800cdc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdb2:	f7fd fb4b 	bl	800a44c <HAL_GetTick>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d901      	bls.n	800cdc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e05c      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdc4:	4b11      	ldr	r3, [pc, #68]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0f0      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x416>
 800cdd0:	e054      	b.n	800ce7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdd2:	4b10      	ldr	r3, [pc, #64]	@ (800ce14 <HAL_RCC_OscConfig+0x478>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdd8:	f7fd fb38 	bl	800a44c <HAL_GetTick>
 800cddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdde:	e008      	b.n	800cdf2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cde0:	f7fd fb34 	bl	800a44c <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d901      	bls.n	800cdf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e045      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdf2:	4b06      	ldr	r3, [pc, #24]	@ (800ce0c <HAL_RCC_OscConfig+0x470>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f0      	bne.n	800cde0 <HAL_RCC_OscConfig+0x444>
 800cdfe:	e03d      	b.n	800ce7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d107      	bne.n	800ce18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e038      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
 800ce0c:	40023800 	.word	0x40023800
 800ce10:	40007000 	.word	0x40007000
 800ce14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ce18:	4b1b      	ldr	r3, [pc, #108]	@ (800ce88 <HAL_RCC_OscConfig+0x4ec>)
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d028      	beq.n	800ce78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d121      	bne.n	800ce78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d11a      	bne.n	800ce78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ce48:	4013      	ands	r3, r2
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ce4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d111      	bne.n	800ce78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5e:	085b      	lsrs	r3, r3, #1
 800ce60:	3b01      	subs	r3, #1
 800ce62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d107      	bne.n	800ce78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d001      	beq.n	800ce7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e000      	b.n	800ce7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	40023800 	.word	0x40023800

0800ce8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e0cc      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cea0:	4b68      	ldr	r3, [pc, #416]	@ (800d044 <HAL_RCC_ClockConfig+0x1b8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0307 	and.w	r3, r3, #7
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d90c      	bls.n	800cec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ceae:	4b65      	ldr	r3, [pc, #404]	@ (800d044 <HAL_RCC_ClockConfig+0x1b8>)
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	b2d2      	uxtb	r2, r2
 800ceb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ceb6:	4b63      	ldr	r3, [pc, #396]	@ (800d044 <HAL_RCC_ClockConfig+0x1b8>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0307 	and.w	r3, r3, #7
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d001      	beq.n	800cec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e0b8      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0302 	and.w	r3, r3, #2
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d020      	beq.n	800cf16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0304 	and.w	r3, r3, #4
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d005      	beq.n	800ceec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cee0:	4b59      	ldr	r3, [pc, #356]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	4a58      	ldr	r2, [pc, #352]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cee6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ceea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f003 0308 	and.w	r3, r3, #8
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d005      	beq.n	800cf04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cef8:	4b53      	ldr	r3, [pc, #332]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	4a52      	ldr	r2, [pc, #328]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cefe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800cf02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf04:	4b50      	ldr	r3, [pc, #320]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	494d      	ldr	r1, [pc, #308]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d044      	beq.n	800cfac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d107      	bne.n	800cf3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf2a:	4b47      	ldr	r3, [pc, #284]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d119      	bne.n	800cf6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e07f      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d003      	beq.n	800cf4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cf46:	2b03      	cmp	r3, #3
 800cf48:	d107      	bne.n	800cf5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf4a:	4b3f      	ldr	r3, [pc, #252]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d109      	bne.n	800cf6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	e06f      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf5a:	4b3b      	ldr	r3, [pc, #236]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e067      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cf6a:	4b37      	ldr	r3, [pc, #220]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	f023 0203 	bic.w	r2, r3, #3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	4934      	ldr	r1, [pc, #208]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cf7c:	f7fd fa66 	bl	800a44c <HAL_GetTick>
 800cf80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf82:	e00a      	b.n	800cf9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf84:	f7fd fa62 	bl	800a44c <HAL_GetTick>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d901      	bls.n	800cf9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf96:	2303      	movs	r3, #3
 800cf98:	e04f      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf9a:	4b2b      	ldr	r3, [pc, #172]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	f003 020c 	and.w	r2, r3, #12
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d1eb      	bne.n	800cf84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfac:	4b25      	ldr	r3, [pc, #148]	@ (800d044 <HAL_RCC_ClockConfig+0x1b8>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 0307 	and.w	r3, r3, #7
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d20c      	bcs.n	800cfd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfba:	4b22      	ldr	r3, [pc, #136]	@ (800d044 <HAL_RCC_ClockConfig+0x1b8>)
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	b2d2      	uxtb	r2, r2
 800cfc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfc2:	4b20      	ldr	r3, [pc, #128]	@ (800d044 <HAL_RCC_ClockConfig+0x1b8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 0307 	and.w	r3, r3, #7
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d001      	beq.n	800cfd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e032      	b.n	800d03a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 0304 	and.w	r3, r3, #4
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d008      	beq.n	800cff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cfe0:	4b19      	ldr	r3, [pc, #100]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	4916      	ldr	r1, [pc, #88]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0308 	and.w	r3, r3, #8
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cffe:	4b12      	ldr	r3, [pc, #72]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	490e      	ldr	r1, [pc, #56]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d012:	f000 f821 	bl	800d058 <HAL_RCC_GetSysClockFreq>
 800d016:	4602      	mov	r2, r0
 800d018:	4b0b      	ldr	r3, [pc, #44]	@ (800d048 <HAL_RCC_ClockConfig+0x1bc>)
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	091b      	lsrs	r3, r3, #4
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	490a      	ldr	r1, [pc, #40]	@ (800d04c <HAL_RCC_ClockConfig+0x1c0>)
 800d024:	5ccb      	ldrb	r3, [r1, r3]
 800d026:	fa22 f303 	lsr.w	r3, r2, r3
 800d02a:	4a09      	ldr	r2, [pc, #36]	@ (800d050 <HAL_RCC_ClockConfig+0x1c4>)
 800d02c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800d02e:	4b09      	ldr	r3, [pc, #36]	@ (800d054 <HAL_RCC_ClockConfig+0x1c8>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f7fc fa3e 	bl	80094b4 <HAL_InitTick>

  return HAL_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	40023c00 	.word	0x40023c00
 800d048:	40023800 	.word	0x40023800
 800d04c:	080202b8 	.word	0x080202b8
 800d050:	20000054 	.word	0x20000054
 800d054:	20000058 	.word	0x20000058

0800d058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d05c:	b094      	sub	sp, #80	@ 0x50
 800d05e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d060:	2300      	movs	r3, #0
 800d062:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800d064:	2300      	movs	r3, #0
 800d066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d070:	4b79      	ldr	r3, [pc, #484]	@ (800d258 <HAL_RCC_GetSysClockFreq+0x200>)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	f003 030c 	and.w	r3, r3, #12
 800d078:	2b08      	cmp	r3, #8
 800d07a:	d00d      	beq.n	800d098 <HAL_RCC_GetSysClockFreq+0x40>
 800d07c:	2b08      	cmp	r3, #8
 800d07e:	f200 80e1 	bhi.w	800d244 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <HAL_RCC_GetSysClockFreq+0x34>
 800d086:	2b04      	cmp	r3, #4
 800d088:	d003      	beq.n	800d092 <HAL_RCC_GetSysClockFreq+0x3a>
 800d08a:	e0db      	b.n	800d244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d08c:	4b73      	ldr	r3, [pc, #460]	@ (800d25c <HAL_RCC_GetSysClockFreq+0x204>)
 800d08e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d090:	e0db      	b.n	800d24a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d092:	4b73      	ldr	r3, [pc, #460]	@ (800d260 <HAL_RCC_GetSysClockFreq+0x208>)
 800d094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d096:	e0d8      	b.n	800d24a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d098:	4b6f      	ldr	r3, [pc, #444]	@ (800d258 <HAL_RCC_GetSysClockFreq+0x200>)
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d0a2:	4b6d      	ldr	r3, [pc, #436]	@ (800d258 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d063      	beq.n	800d176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0ae:	4b6a      	ldr	r3, [pc, #424]	@ (800d258 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	099b      	lsrs	r3, r3, #6
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d0ca:	4622      	mov	r2, r4
 800d0cc:	462b      	mov	r3, r5
 800d0ce:	f04f 0000 	mov.w	r0, #0
 800d0d2:	f04f 0100 	mov.w	r1, #0
 800d0d6:	0159      	lsls	r1, r3, #5
 800d0d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d0dc:	0150      	lsls	r0, r2, #5
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	1a51      	subs	r1, r2, r1
 800d0e6:	6139      	str	r1, [r7, #16]
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	eb63 0301 	sbc.w	r3, r3, r1
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	f04f 0200 	mov.w	r2, #0
 800d0f4:	f04f 0300 	mov.w	r3, #0
 800d0f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d0fc:	4659      	mov	r1, fp
 800d0fe:	018b      	lsls	r3, r1, #6
 800d100:	4651      	mov	r1, sl
 800d102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d106:	4651      	mov	r1, sl
 800d108:	018a      	lsls	r2, r1, #6
 800d10a:	4651      	mov	r1, sl
 800d10c:	ebb2 0801 	subs.w	r8, r2, r1
 800d110:	4659      	mov	r1, fp
 800d112:	eb63 0901 	sbc.w	r9, r3, r1
 800d116:	f04f 0200 	mov.w	r2, #0
 800d11a:	f04f 0300 	mov.w	r3, #0
 800d11e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d12a:	4690      	mov	r8, r2
 800d12c:	4699      	mov	r9, r3
 800d12e:	4623      	mov	r3, r4
 800d130:	eb18 0303 	adds.w	r3, r8, r3
 800d134:	60bb      	str	r3, [r7, #8]
 800d136:	462b      	mov	r3, r5
 800d138:	eb49 0303 	adc.w	r3, r9, r3
 800d13c:	60fb      	str	r3, [r7, #12]
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	f04f 0300 	mov.w	r3, #0
 800d146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d14a:	4629      	mov	r1, r5
 800d14c:	024b      	lsls	r3, r1, #9
 800d14e:	4621      	mov	r1, r4
 800d150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d154:	4621      	mov	r1, r4
 800d156:	024a      	lsls	r2, r1, #9
 800d158:	4610      	mov	r0, r2
 800d15a:	4619      	mov	r1, r3
 800d15c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d15e:	2200      	movs	r2, #0
 800d160:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d168:	f7f3 fd8e 	bl	8000c88 <__aeabi_uldivmod>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4613      	mov	r3, r2
 800d172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d174:	e058      	b.n	800d228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d176:	4b38      	ldr	r3, [pc, #224]	@ (800d258 <HAL_RCC_GetSysClockFreq+0x200>)
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	099b      	lsrs	r3, r3, #6
 800d17c:	2200      	movs	r2, #0
 800d17e:	4618      	mov	r0, r3
 800d180:	4611      	mov	r1, r2
 800d182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d186:	623b      	str	r3, [r7, #32]
 800d188:	2300      	movs	r3, #0
 800d18a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d18c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d190:	4642      	mov	r2, r8
 800d192:	464b      	mov	r3, r9
 800d194:	f04f 0000 	mov.w	r0, #0
 800d198:	f04f 0100 	mov.w	r1, #0
 800d19c:	0159      	lsls	r1, r3, #5
 800d19e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d1a2:	0150      	lsls	r0, r2, #5
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4641      	mov	r1, r8
 800d1aa:	ebb2 0a01 	subs.w	sl, r2, r1
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	eb63 0b01 	sbc.w	fp, r3, r1
 800d1b4:	f04f 0200 	mov.w	r2, #0
 800d1b8:	f04f 0300 	mov.w	r3, #0
 800d1bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d1c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d1c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d1c8:	ebb2 040a 	subs.w	r4, r2, sl
 800d1cc:	eb63 050b 	sbc.w	r5, r3, fp
 800d1d0:	f04f 0200 	mov.w	r2, #0
 800d1d4:	f04f 0300 	mov.w	r3, #0
 800d1d8:	00eb      	lsls	r3, r5, #3
 800d1da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1de:	00e2      	lsls	r2, r4, #3
 800d1e0:	4614      	mov	r4, r2
 800d1e2:	461d      	mov	r5, r3
 800d1e4:	4643      	mov	r3, r8
 800d1e6:	18e3      	adds	r3, r4, r3
 800d1e8:	603b      	str	r3, [r7, #0]
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	eb45 0303 	adc.w	r3, r5, r3
 800d1f0:	607b      	str	r3, [r7, #4]
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	f04f 0300 	mov.w	r3, #0
 800d1fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d1fe:	4629      	mov	r1, r5
 800d200:	028b      	lsls	r3, r1, #10
 800d202:	4621      	mov	r1, r4
 800d204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d208:	4621      	mov	r1, r4
 800d20a:	028a      	lsls	r2, r1, #10
 800d20c:	4610      	mov	r0, r2
 800d20e:	4619      	mov	r1, r3
 800d210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d212:	2200      	movs	r2, #0
 800d214:	61bb      	str	r3, [r7, #24]
 800d216:	61fa      	str	r2, [r7, #28]
 800d218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d21c:	f7f3 fd34 	bl	8000c88 <__aeabi_uldivmod>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	4613      	mov	r3, r2
 800d226:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d228:	4b0b      	ldr	r3, [pc, #44]	@ (800d258 <HAL_RCC_GetSysClockFreq+0x200>)
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	0c1b      	lsrs	r3, r3, #16
 800d22e:	f003 0303 	and.w	r3, r3, #3
 800d232:	3301      	adds	r3, #1
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800d238:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d242:	e002      	b.n	800d24a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d244:	4b05      	ldr	r3, [pc, #20]	@ (800d25c <HAL_RCC_GetSysClockFreq+0x204>)
 800d246:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d24a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3750      	adds	r7, #80	@ 0x50
 800d250:	46bd      	mov	sp, r7
 800d252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d256:	bf00      	nop
 800d258:	40023800 	.word	0x40023800
 800d25c:	00f42400 	.word	0x00f42400
 800d260:	007a1200 	.word	0x007a1200

0800d264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d264:	b480      	push	{r7}
 800d266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d268:	4b03      	ldr	r3, [pc, #12]	@ (800d278 <HAL_RCC_GetHCLKFreq+0x14>)
 800d26a:	681b      	ldr	r3, [r3, #0]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	20000054 	.word	0x20000054

0800d27c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d280:	f7ff fff0 	bl	800d264 <HAL_RCC_GetHCLKFreq>
 800d284:	4602      	mov	r2, r0
 800d286:	4b05      	ldr	r3, [pc, #20]	@ (800d29c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	0a9b      	lsrs	r3, r3, #10
 800d28c:	f003 0307 	and.w	r3, r3, #7
 800d290:	4903      	ldr	r1, [pc, #12]	@ (800d2a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d292:	5ccb      	ldrb	r3, [r1, r3]
 800d294:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d298:	4618      	mov	r0, r3
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	40023800 	.word	0x40023800
 800d2a0:	080202c8 	.word	0x080202c8

0800d2a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d2a8:	f7ff ffdc 	bl	800d264 <HAL_RCC_GetHCLKFreq>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	4b05      	ldr	r3, [pc, #20]	@ (800d2c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	0b5b      	lsrs	r3, r3, #13
 800d2b4:	f003 0307 	and.w	r3, r3, #7
 800d2b8:	4903      	ldr	r1, [pc, #12]	@ (800d2c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2ba:	5ccb      	ldrb	r3, [r1, r3]
 800d2bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	40023800 	.word	0x40023800
 800d2c8:	080202c8 	.word	0x080202c8

0800d2cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	220f      	movs	r2, #15
 800d2da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d2dc:	4b12      	ldr	r3, [pc, #72]	@ (800d328 <HAL_RCC_GetClockConfig+0x5c>)
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f003 0203 	and.w	r2, r3, #3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d2e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d328 <HAL_RCC_GetClockConfig+0x5c>)
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d328 <HAL_RCC_GetClockConfig+0x5c>)
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d300:	4b09      	ldr	r3, [pc, #36]	@ (800d328 <HAL_RCC_GetClockConfig+0x5c>)
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	08db      	lsrs	r3, r3, #3
 800d306:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d30e:	4b07      	ldr	r3, [pc, #28]	@ (800d32c <HAL_RCC_GetClockConfig+0x60>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0207 	and.w	r2, r3, #7
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	601a      	str	r2, [r3, #0]
}
 800d31a:	bf00      	nop
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	40023800 	.word	0x40023800
 800d32c:	40023c00 	.word	0x40023c00

0800d330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e07b      	b.n	800d43a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d346:	2b00      	cmp	r3, #0
 800d348:	d108      	bne.n	800d35c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d352:	d009      	beq.n	800d368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	61da      	str	r2, [r3, #28]
 800d35a:	e005      	b.n	800d368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d106      	bne.n	800d388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7fc f822 	bl	80093cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d39e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d3b0:	431a      	orrs	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3ba:	431a      	orrs	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	f003 0302 	and.w	r3, r3, #2
 800d3c4:	431a      	orrs	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	695b      	ldr	r3, [r3, #20]
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	699b      	ldr	r3, [r3, #24]
 800d3d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d3d8:	431a      	orrs	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a1b      	ldr	r3, [r3, #32]
 800d3e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3ec:	ea42 0103 	orr.w	r1, r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	0c1b      	lsrs	r3, r3, #16
 800d406:	f003 0104 	and.w	r1, r3, #4
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d40e:	f003 0210 	and.w	r2, r3, #16
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	69da      	ldr	r2, [r3, #28]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d428:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b088      	sub	sp, #32
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	603b      	str	r3, [r7, #0]
 800d44e:	4613      	mov	r3, r2
 800d450:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d452:	f7fc fffb 	bl	800a44c <HAL_GetTick>
 800d456:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d458:	88fb      	ldrh	r3, [r7, #6]
 800d45a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b01      	cmp	r3, #1
 800d466:	d001      	beq.n	800d46c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d468:	2302      	movs	r3, #2
 800d46a:	e12a      	b.n	800d6c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d002      	beq.n	800d478 <HAL_SPI_Transmit+0x36>
 800d472:	88fb      	ldrh	r3, [r7, #6]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	e122      	b.n	800d6c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d482:	2b01      	cmp	r3, #1
 800d484:	d101      	bne.n	800d48a <HAL_SPI_Transmit+0x48>
 800d486:	2302      	movs	r3, #2
 800d488:	e11b      	b.n	800d6c2 <HAL_SPI_Transmit+0x280>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2203      	movs	r2, #3
 800d496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2200      	movs	r2, #0
 800d49e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	88fa      	ldrh	r2, [r7, #6]
 800d4aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	88fa      	ldrh	r2, [r7, #6]
 800d4b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4d8:	d10f      	bne.n	800d4fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d4e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d4f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d504:	2b40      	cmp	r3, #64	@ 0x40
 800d506:	d007      	beq.n	800d518 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d520:	d152      	bne.n	800d5c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d002      	beq.n	800d530 <HAL_SPI_Transmit+0xee>
 800d52a:	8b7b      	ldrh	r3, [r7, #26]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d145      	bne.n	800d5bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d534:	881a      	ldrh	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d540:	1c9a      	adds	r2, r3, #2
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	3b01      	subs	r3, #1
 800d54e:	b29a      	uxth	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d554:	e032      	b.n	800d5bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f003 0302 	and.w	r3, r3, #2
 800d560:	2b02      	cmp	r3, #2
 800d562:	d112      	bne.n	800d58a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d568:	881a      	ldrh	r2, [r3, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d574:	1c9a      	adds	r2, r3, #2
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d57e:	b29b      	uxth	r3, r3
 800d580:	3b01      	subs	r3, #1
 800d582:	b29a      	uxth	r2, r3
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d588:	e018      	b.n	800d5bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d58a:	f7fc ff5f 	bl	800a44c <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	683a      	ldr	r2, [r7, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d803      	bhi.n	800d5a2 <HAL_SPI_Transmit+0x160>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a0:	d102      	bne.n	800d5a8 <HAL_SPI_Transmit+0x166>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d109      	bne.n	800d5bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e082      	b.n	800d6c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1c7      	bne.n	800d556 <HAL_SPI_Transmit+0x114>
 800d5c6:	e053      	b.n	800d670 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <HAL_SPI_Transmit+0x194>
 800d5d0:	8b7b      	ldrh	r3, [r7, #26]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d147      	bne.n	800d666 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	330c      	adds	r3, #12
 800d5e0:	7812      	ldrb	r2, [r2, #0]
 800d5e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d5fc:	e033      	b.n	800d666 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d113      	bne.n	800d634 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	330c      	adds	r3, #12
 800d616:	7812      	ldrb	r2, [r2, #0]
 800d618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3b01      	subs	r3, #1
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d632:	e018      	b.n	800d666 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d634:	f7fc ff0a 	bl	800a44c <HAL_GetTick>
 800d638:	4602      	mov	r2, r0
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	429a      	cmp	r2, r3
 800d642:	d803      	bhi.n	800d64c <HAL_SPI_Transmit+0x20a>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64a:	d102      	bne.n	800d652 <HAL_SPI_Transmit+0x210>
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d109      	bne.n	800d666 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d662:	2303      	movs	r3, #3
 800d664:	e02d      	b.n	800d6c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1c6      	bne.n	800d5fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f000 fbd9 	bl	800de2c <SPI_EndRxTxTransaction>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2220      	movs	r2, #32
 800d684:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10a      	bne.n	800d6a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	617b      	str	r3, [r7, #20]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	617b      	str	r3, [r7, #20]
 800d6a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e000      	b.n	800d6c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
  }
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b088      	sub	sp, #32
 800d6ce:	af02      	add	r7, sp, #8
 800d6d0:	60f8      	str	r0, [r7, #12]
 800d6d2:	60b9      	str	r1, [r7, #8]
 800d6d4:	603b      	str	r3, [r7, #0]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d001      	beq.n	800d6ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	e104      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6f2:	d112      	bne.n	800d71a <HAL_SPI_Receive+0x50>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10e      	bne.n	800d71a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2204      	movs	r2, #4
 800d700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d704:	88fa      	ldrh	r2, [r7, #6]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4613      	mov	r3, r2
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 f8f3 	bl	800d8fc <HAL_SPI_TransmitReceive>
 800d716:	4603      	mov	r3, r0
 800d718:	e0ec      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d71a:	f7fc fe97 	bl	800a44c <HAL_GetTick>
 800d71e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <HAL_SPI_Receive+0x62>
 800d726:	88fb      	ldrh	r3, [r7, #6]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e0e1      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <HAL_SPI_Receive+0x74>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e0da      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2204      	movs	r2, #4
 800d74a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	88fa      	ldrh	r2, [r7, #6]
 800d75e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	88fa      	ldrh	r2, [r7, #6]
 800d764:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d78c:	d10f      	bne.n	800d7ae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d79c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d7ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b8:	2b40      	cmp	r3, #64	@ 0x40
 800d7ba:	d007      	beq.n	800d7cc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d7ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d170      	bne.n	800d8b6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d7d4:	e035      	b.n	800d842 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d115      	bne.n	800d810 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f103 020c 	add.w	r2, r3, #12
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7f0:	7812      	ldrb	r2, [r2, #0]
 800d7f2:	b2d2      	uxtb	r2, r2
 800d7f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7fa:	1c5a      	adds	r2, r3, #1
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d804:	b29b      	uxth	r3, r3
 800d806:	3b01      	subs	r3, #1
 800d808:	b29a      	uxth	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d80e:	e018      	b.n	800d842 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d810:	f7fc fe1c 	bl	800a44c <HAL_GetTick>
 800d814:	4602      	mov	r2, r0
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d803      	bhi.n	800d828 <HAL_SPI_Receive+0x15e>
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d826:	d102      	bne.n	800d82e <HAL_SPI_Receive+0x164>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d109      	bne.n	800d842 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d83e:	2303      	movs	r3, #3
 800d840:	e058      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d846:	b29b      	uxth	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1c4      	bne.n	800d7d6 <HAL_SPI_Receive+0x10c>
 800d84c:	e038      	b.n	800d8c0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d113      	bne.n	800d884 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68da      	ldr	r2, [r3, #12]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d866:	b292      	uxth	r2, r2
 800d868:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d86e:	1c9a      	adds	r2, r3, #2
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d878:	b29b      	uxth	r3, r3
 800d87a:	3b01      	subs	r3, #1
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d882:	e018      	b.n	800d8b6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d884:	f7fc fde2 	bl	800a44c <HAL_GetTick>
 800d888:	4602      	mov	r2, r0
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d803      	bhi.n	800d89c <HAL_SPI_Receive+0x1d2>
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89a:	d102      	bne.n	800d8a2 <HAL_SPI_Receive+0x1d8>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d109      	bne.n	800d8b6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	e01e      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1c6      	bne.n	800d84e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f000 fa4b 	bl	800dd60 <SPI_EndRxTransaction>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2220      	movs	r2, #32
 800d8d4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
  }
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08a      	sub	sp, #40	@ 0x28
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d90a:	2301      	movs	r3, #1
 800d90c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d90e:	f7fc fd9d 	bl	800a44c <HAL_GetTick>
 800d912:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d91a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d922:	887b      	ldrh	r3, [r7, #2]
 800d924:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d926:	7ffb      	ldrb	r3, [r7, #31]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d00c      	beq.n	800d946 <HAL_SPI_TransmitReceive+0x4a>
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d932:	d106      	bne.n	800d942 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <HAL_SPI_TransmitReceive+0x46>
 800d93c:	7ffb      	ldrb	r3, [r7, #31]
 800d93e:	2b04      	cmp	r3, #4
 800d940:	d001      	beq.n	800d946 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800d942:	2302      	movs	r3, #2
 800d944:	e17f      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d005      	beq.n	800d958 <HAL_SPI_TransmitReceive+0x5c>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <HAL_SPI_TransmitReceive+0x5c>
 800d952:	887b      	ldrh	r3, [r7, #2]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800d958:	2301      	movs	r3, #1
 800d95a:	e174      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d962:	2b01      	cmp	r3, #1
 800d964:	d101      	bne.n	800d96a <HAL_SPI_TransmitReceive+0x6e>
 800d966:	2302      	movs	r3, #2
 800d968:	e16d      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	d003      	beq.n	800d986 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2205      	movs	r2, #5
 800d982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	887a      	ldrh	r2, [r7, #2]
 800d996:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	887a      	ldrh	r2, [r7, #2]
 800d99c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	887a      	ldrh	r2, [r7, #2]
 800d9a8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	887a      	ldrh	r2, [r7, #2]
 800d9ae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c6:	2b40      	cmp	r3, #64	@ 0x40
 800d9c8:	d007      	beq.n	800d9da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d9d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9e2:	d17e      	bne.n	800dae2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <HAL_SPI_TransmitReceive+0xf6>
 800d9ec:	8afb      	ldrh	r3, [r7, #22]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d16c      	bne.n	800dacc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9f6:	881a      	ldrh	r2, [r3, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da02:	1c9a      	adds	r2, r3, #2
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	3b01      	subs	r3, #1
 800da10:	b29a      	uxth	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da16:	e059      	b.n	800dacc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f003 0302 	and.w	r3, r3, #2
 800da22:	2b02      	cmp	r3, #2
 800da24:	d11b      	bne.n	800da5e <HAL_SPI_TransmitReceive+0x162>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d016      	beq.n	800da5e <HAL_SPI_TransmitReceive+0x162>
 800da30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da32:	2b01      	cmp	r3, #1
 800da34:	d113      	bne.n	800da5e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da3a:	881a      	ldrh	r2, [r3, #0]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da46:	1c9a      	adds	r2, r3, #2
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da50:	b29b      	uxth	r3, r3
 800da52:	3b01      	subs	r3, #1
 800da54:	b29a      	uxth	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d119      	bne.n	800daa0 <HAL_SPI_TransmitReceive+0x1a4>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da70:	b29b      	uxth	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d014      	beq.n	800daa0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68da      	ldr	r2, [r3, #12]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da80:	b292      	uxth	r2, r2
 800da82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da88:	1c9a      	adds	r2, r3, #2
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da92:	b29b      	uxth	r3, r3
 800da94:	3b01      	subs	r3, #1
 800da96:	b29a      	uxth	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800da9c:	2301      	movs	r3, #1
 800da9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800daa0:	f7fc fcd4 	bl	800a44c <HAL_GetTick>
 800daa4:	4602      	mov	r2, r0
 800daa6:	6a3b      	ldr	r3, [r7, #32]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daac:	429a      	cmp	r2, r3
 800daae:	d80d      	bhi.n	800dacc <HAL_SPI_TransmitReceive+0x1d0>
 800dab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab6:	d009      	beq.n	800dacc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800dac8:	2303      	movs	r3, #3
 800daca:	e0bc      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1a0      	bne.n	800da18 <HAL_SPI_TransmitReceive+0x11c>
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dada:	b29b      	uxth	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d19b      	bne.n	800da18 <HAL_SPI_TransmitReceive+0x11c>
 800dae0:	e082      	b.n	800dbe8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <HAL_SPI_TransmitReceive+0x1f4>
 800daea:	8afb      	ldrh	r3, [r7, #22]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d171      	bne.n	800dbd4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	330c      	adds	r3, #12
 800dafa:	7812      	ldrb	r2, [r2, #0]
 800dafc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3b01      	subs	r3, #1
 800db10:	b29a      	uxth	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db16:	e05d      	b.n	800dbd4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f003 0302 	and.w	r3, r3, #2
 800db22:	2b02      	cmp	r3, #2
 800db24:	d11c      	bne.n	800db60 <HAL_SPI_TransmitReceive+0x264>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d017      	beq.n	800db60 <HAL_SPI_TransmitReceive+0x264>
 800db30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db32:	2b01      	cmp	r3, #1
 800db34:	d114      	bne.n	800db60 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	330c      	adds	r3, #12
 800db40:	7812      	ldrb	r2, [r2, #0]
 800db42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800db52:	b29b      	uxth	r3, r3
 800db54:	3b01      	subs	r3, #1
 800db56:	b29a      	uxth	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d119      	bne.n	800dba2 <HAL_SPI_TransmitReceive+0x2a6>
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db72:	b29b      	uxth	r3, r3
 800db74:	2b00      	cmp	r3, #0
 800db76:	d014      	beq.n	800dba2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db82:	b2d2      	uxtb	r2, r2
 800db84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db8a:	1c5a      	adds	r2, r3, #1
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db94:	b29b      	uxth	r3, r3
 800db96:	3b01      	subs	r3, #1
 800db98:	b29a      	uxth	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800db9e:	2301      	movs	r3, #1
 800dba0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dba2:	f7fc fc53 	bl	800a44c <HAL_GetTick>
 800dba6:	4602      	mov	r2, r0
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	1ad3      	subs	r3, r2, r3
 800dbac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d803      	bhi.n	800dbba <HAL_SPI_TransmitReceive+0x2be>
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb8:	d102      	bne.n	800dbc0 <HAL_SPI_TransmitReceive+0x2c4>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d109      	bne.n	800dbd4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	e038      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d19c      	bne.n	800db18 <HAL_SPI_TransmitReceive+0x21c>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d197      	bne.n	800db18 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dbe8:	6a3a      	ldr	r2, [r7, #32]
 800dbea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f000 f91d 	bl	800de2c <SPI_EndRxTxTransaction>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d008      	beq.n	800dc0a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2220      	movs	r2, #32
 800dbfc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	e01d      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10a      	bne.n	800dc28 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dc12:	2300      	movs	r3, #0
 800dc14:	613b      	str	r3, [r7, #16]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	613b      	str	r3, [r7, #16]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	613b      	str	r3, [r7, #16]
 800dc26:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e000      	b.n	800dc46 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800dc44:	2300      	movs	r3, #0
  }
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3728      	adds	r7, #40	@ 0x28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
	...

0800dc50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	603b      	str	r3, [r7, #0]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dc60:	f7fc fbf4 	bl	800a44c <HAL_GetTick>
 800dc64:	4602      	mov	r2, r0
 800dc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc68:	1a9b      	subs	r3, r3, r2
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dc70:	f7fc fbec 	bl	800a44c <HAL_GetTick>
 800dc74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dc76:	4b39      	ldr	r3, [pc, #228]	@ (800dd5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	015b      	lsls	r3, r3, #5
 800dc7c:	0d1b      	lsrs	r3, r3, #20
 800dc7e:	69fa      	ldr	r2, [r7, #28]
 800dc80:	fb02 f303 	mul.w	r3, r2, r3
 800dc84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dc86:	e054      	b.n	800dd32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8e:	d050      	beq.n	800dd32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dc90:	f7fc fbdc 	bl	800a44c <HAL_GetTick>
 800dc94:	4602      	mov	r2, r0
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	69fa      	ldr	r2, [r7, #28]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d902      	bls.n	800dca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d13d      	bne.n	800dd22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dcb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dcbe:	d111      	bne.n	800dce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dcc8:	d004      	beq.n	800dcd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcd2:	d107      	bne.n	800dce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcec:	d10f      	bne.n	800dd0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dd0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	e017      	b.n	800dd52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	689a      	ldr	r2, [r3, #8]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	bf0c      	ite	eq
 800dd42:	2301      	moveq	r3, #1
 800dd44:	2300      	movne	r3, #0
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	461a      	mov	r2, r3
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d19b      	bne.n	800dc88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20000054 	.word	0x20000054

0800dd60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af02      	add	r7, sp, #8
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd74:	d111      	bne.n	800dd9a <SPI_EndRxTransaction+0x3a>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd7e:	d004      	beq.n	800dd8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd88:	d107      	bne.n	800dd9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dda2:	d12a      	bne.n	800ddfa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddac:	d012      	beq.n	800ddd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	2180      	movs	r1, #128	@ 0x80
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff ff49 	bl	800dc50 <SPI_WaitFlagStateUntilTimeout>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d02d      	beq.n	800de20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddc8:	f043 0220 	orr.w	r2, r3, #32
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	e026      	b.n	800de22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2200      	movs	r2, #0
 800dddc:	2101      	movs	r1, #1
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7ff ff36 	bl	800dc50 <SPI_WaitFlagStateUntilTimeout>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d01a      	beq.n	800de20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddee:	f043 0220 	orr.w	r2, r3, #32
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e013      	b.n	800de22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2200      	movs	r2, #0
 800de02:	2101      	movs	r1, #1
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f7ff ff23 	bl	800dc50 <SPI_WaitFlagStateUntilTimeout>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d007      	beq.n	800de20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de14:	f043 0220 	orr.w	r2, r3, #32
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800de1c:	2303      	movs	r3, #3
 800de1e:	e000      	b.n	800de22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af02      	add	r7, sp, #8
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2201      	movs	r2, #1
 800de40:	2102      	movs	r1, #2
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7ff ff04 	bl	800dc50 <SPI_WaitFlagStateUntilTimeout>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d007      	beq.n	800de5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de52:	f043 0220 	orr.w	r2, r3, #32
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800de5a:	2303      	movs	r3, #3
 800de5c:	e032      	b.n	800dec4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800de5e:	4b1b      	ldr	r3, [pc, #108]	@ (800decc <SPI_EndRxTxTransaction+0xa0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a1b      	ldr	r2, [pc, #108]	@ (800ded0 <SPI_EndRxTxTransaction+0xa4>)
 800de64:	fba2 2303 	umull	r2, r3, r2, r3
 800de68:	0d5b      	lsrs	r3, r3, #21
 800de6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800de6e:	fb02 f303 	mul.w	r3, r2, r3
 800de72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de7c:	d112      	bne.n	800dea4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2200      	movs	r2, #0
 800de86:	2180      	movs	r1, #128	@ 0x80
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7ff fee1 	bl	800dc50 <SPI_WaitFlagStateUntilTimeout>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d016      	beq.n	800dec2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de98:	f043 0220 	orr.w	r2, r3, #32
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e00f      	b.n	800dec4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00a      	beq.n	800dec0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	3b01      	subs	r3, #1
 800deae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deba:	2b80      	cmp	r3, #128	@ 0x80
 800debc:	d0f2      	beq.n	800dea4 <SPI_EndRxTxTransaction+0x78>
 800debe:	e000      	b.n	800dec2 <SPI_EndRxTxTransaction+0x96>
        break;
 800dec0:	bf00      	nop
  }

  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3718      	adds	r7, #24
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	20000054 	.word	0x20000054
 800ded0:	165e9f81 	.word	0x165e9f81

0800ded4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e041      	b.n	800df6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deec:	b2db      	uxtb	r3, r3
 800deee:	2b00      	cmp	r3, #0
 800def0:	d106      	bne.n	800df00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7fb fd64 	bl	80099c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2202      	movs	r2, #2
 800df04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	3304      	adds	r3, #4
 800df10:	4619      	mov	r1, r3
 800df12:	4610      	mov	r0, r2
 800df14:	f000 fd28 	bl	800e968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2201      	movs	r2, #1
 800df3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
	...

0800df74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b01      	cmp	r3, #1
 800df86:	d001      	beq.n	800df8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	e046      	b.n	800e01a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2202      	movs	r2, #2
 800df90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a23      	ldr	r2, [pc, #140]	@ (800e028 <HAL_TIM_Base_Start+0xb4>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d022      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfa6:	d01d      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a1f      	ldr	r2, [pc, #124]	@ (800e02c <HAL_TIM_Base_Start+0xb8>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d018      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a1e      	ldr	r2, [pc, #120]	@ (800e030 <HAL_TIM_Base_Start+0xbc>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d013      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a1c      	ldr	r2, [pc, #112]	@ (800e034 <HAL_TIM_Base_Start+0xc0>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d00e      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a1b      	ldr	r2, [pc, #108]	@ (800e038 <HAL_TIM_Base_Start+0xc4>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d009      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a19      	ldr	r2, [pc, #100]	@ (800e03c <HAL_TIM_Base_Start+0xc8>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d004      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x70>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a18      	ldr	r2, [pc, #96]	@ (800e040 <HAL_TIM_Base_Start+0xcc>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d111      	bne.n	800e008 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f003 0307 	and.w	r3, r3, #7
 800dfee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b06      	cmp	r3, #6
 800dff4:	d010      	beq.n	800e018 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f042 0201 	orr.w	r2, r2, #1
 800e004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e006:	e007      	b.n	800e018 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f042 0201 	orr.w	r2, r2, #1
 800e016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	40010000 	.word	0x40010000
 800e02c:	40000400 	.word	0x40000400
 800e030:	40000800 	.word	0x40000800
 800e034:	40000c00 	.word	0x40000c00
 800e038:	40010400 	.word	0x40010400
 800e03c:	40014000 	.word	0x40014000
 800e040:	40001800 	.word	0x40001800

0800e044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b01      	cmp	r3, #1
 800e056:	d001      	beq.n	800e05c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e058:	2301      	movs	r3, #1
 800e05a:	e04e      	b.n	800e0fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2202      	movs	r2, #2
 800e060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68da      	ldr	r2, [r3, #12]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f042 0201 	orr.w	r2, r2, #1
 800e072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a23      	ldr	r2, [pc, #140]	@ (800e108 <HAL_TIM_Base_Start_IT+0xc4>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d022      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e086:	d01d      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a1f      	ldr	r2, [pc, #124]	@ (800e10c <HAL_TIM_Base_Start_IT+0xc8>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d018      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a1e      	ldr	r2, [pc, #120]	@ (800e110 <HAL_TIM_Base_Start_IT+0xcc>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d013      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a1c      	ldr	r2, [pc, #112]	@ (800e114 <HAL_TIM_Base_Start_IT+0xd0>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d00e      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a1b      	ldr	r2, [pc, #108]	@ (800e118 <HAL_TIM_Base_Start_IT+0xd4>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d009      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a19      	ldr	r2, [pc, #100]	@ (800e11c <HAL_TIM_Base_Start_IT+0xd8>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d004      	beq.n	800e0c4 <HAL_TIM_Base_Start_IT+0x80>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a18      	ldr	r2, [pc, #96]	@ (800e120 <HAL_TIM_Base_Start_IT+0xdc>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d111      	bne.n	800e0e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	f003 0307 	and.w	r3, r3, #7
 800e0ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b06      	cmp	r3, #6
 800e0d4:	d010      	beq.n	800e0f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f042 0201 	orr.w	r2, r2, #1
 800e0e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0e6:	e007      	b.n	800e0f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f042 0201 	orr.w	r2, r2, #1
 800e0f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	40010000 	.word	0x40010000
 800e10c:	40000400 	.word	0x40000400
 800e110:	40000800 	.word	0x40000800
 800e114:	40000c00 	.word	0x40000c00
 800e118:	40010400 	.word	0x40010400
 800e11c:	40014000 	.word	0x40014000
 800e120:	40001800 	.word	0x40001800

0800e124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e041      	b.n	800e1ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f88d 	bl	800e26a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2202      	movs	r2, #2
 800e154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3304      	adds	r3, #4
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f000 fc00 	bl	800e968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	6a1a      	ldr	r2, [r3, #32]
 800e1d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e1dc:	4013      	ands	r3, r2
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10f      	bne.n	800e202 <HAL_TIM_PWM_DeInit+0x40>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	6a1a      	ldr	r2, [r3, #32]
 800e1e8:	f240 4344 	movw	r3, #1092	@ 0x444
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d107      	bne.n	800e202 <HAL_TIM_PWM_DeInit+0x40>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f022 0201 	bic.w	r2, r2, #1
 800e200:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f83b 	bl	800e27e <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b083      	sub	sp, #12
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e272:	bf00      	nop
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800e286:	bf00      	nop
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
	...

0800e294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d109      	bne.n	800e2b8 <HAL_TIM_PWM_Start+0x24>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	bf14      	ite	ne
 800e2b0:	2301      	movne	r3, #1
 800e2b2:	2300      	moveq	r3, #0
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	e022      	b.n	800e2fe <HAL_TIM_PWM_Start+0x6a>
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d109      	bne.n	800e2d2 <HAL_TIM_PWM_Start+0x3e>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	bf14      	ite	ne
 800e2ca:	2301      	movne	r3, #1
 800e2cc:	2300      	moveq	r3, #0
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	e015      	b.n	800e2fe <HAL_TIM_PWM_Start+0x6a>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	2b08      	cmp	r3, #8
 800e2d6:	d109      	bne.n	800e2ec <HAL_TIM_PWM_Start+0x58>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	bf14      	ite	ne
 800e2e4:	2301      	movne	r3, #1
 800e2e6:	2300      	moveq	r3, #0
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	e008      	b.n	800e2fe <HAL_TIM_PWM_Start+0x6a>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	bf14      	ite	ne
 800e2f8:	2301      	movne	r3, #1
 800e2fa:	2300      	moveq	r3, #0
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	e07c      	b.n	800e400 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d104      	bne.n	800e316 <HAL_TIM_PWM_Start+0x82>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2202      	movs	r2, #2
 800e310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e314:	e013      	b.n	800e33e <HAL_TIM_PWM_Start+0xaa>
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	2b04      	cmp	r3, #4
 800e31a:	d104      	bne.n	800e326 <HAL_TIM_PWM_Start+0x92>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2202      	movs	r2, #2
 800e320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e324:	e00b      	b.n	800e33e <HAL_TIM_PWM_Start+0xaa>
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	2b08      	cmp	r3, #8
 800e32a:	d104      	bne.n	800e336 <HAL_TIM_PWM_Start+0xa2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2202      	movs	r2, #2
 800e330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e334:	e003      	b.n	800e33e <HAL_TIM_PWM_Start+0xaa>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2202      	movs	r2, #2
 800e33a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2201      	movs	r2, #1
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fe04 	bl	800ef54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a2d      	ldr	r2, [pc, #180]	@ (800e408 <HAL_TIM_PWM_Start+0x174>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d004      	beq.n	800e360 <HAL_TIM_PWM_Start+0xcc>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a2c      	ldr	r2, [pc, #176]	@ (800e40c <HAL_TIM_PWM_Start+0x178>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d101      	bne.n	800e364 <HAL_TIM_PWM_Start+0xd0>
 800e360:	2301      	movs	r3, #1
 800e362:	e000      	b.n	800e366 <HAL_TIM_PWM_Start+0xd2>
 800e364:	2300      	movs	r3, #0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d007      	beq.n	800e37a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e378:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a22      	ldr	r2, [pc, #136]	@ (800e408 <HAL_TIM_PWM_Start+0x174>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d022      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e38c:	d01d      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a1f      	ldr	r2, [pc, #124]	@ (800e410 <HAL_TIM_PWM_Start+0x17c>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d018      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a1d      	ldr	r2, [pc, #116]	@ (800e414 <HAL_TIM_PWM_Start+0x180>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d013      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a1c      	ldr	r2, [pc, #112]	@ (800e418 <HAL_TIM_PWM_Start+0x184>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d00e      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a16      	ldr	r2, [pc, #88]	@ (800e40c <HAL_TIM_PWM_Start+0x178>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d009      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a18      	ldr	r2, [pc, #96]	@ (800e41c <HAL_TIM_PWM_Start+0x188>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d004      	beq.n	800e3ca <HAL_TIM_PWM_Start+0x136>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a16      	ldr	r2, [pc, #88]	@ (800e420 <HAL_TIM_PWM_Start+0x18c>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d111      	bne.n	800e3ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	f003 0307 	and.w	r3, r3, #7
 800e3d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b06      	cmp	r3, #6
 800e3da:	d010      	beq.n	800e3fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f042 0201 	orr.w	r2, r2, #1
 800e3ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ec:	e007      	b.n	800e3fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f042 0201 	orr.w	r2, r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	40010000 	.word	0x40010000
 800e40c:	40010400 	.word	0x40010400
 800e410:	40000400 	.word	0x40000400
 800e414:	40000800 	.word	0x40000800
 800e418:	40000c00 	.word	0x40000c00
 800e41c:	40014000 	.word	0x40014000
 800e420:	40001800 	.word	0x40001800

0800e424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	f003 0302 	and.w	r3, r3, #2
 800e442:	2b00      	cmp	r3, #0
 800e444:	d020      	beq.n	800e488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f003 0302 	and.w	r3, r3, #2
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d01b      	beq.n	800e488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f06f 0202 	mvn.w	r2, #2
 800e458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	f003 0303 	and.w	r3, r3, #3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa5b 	bl	800e92a <HAL_TIM_IC_CaptureCallback>
 800e474:	e005      	b.n	800e482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fa4d 	bl	800e916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fa5e 	bl	800e93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f003 0304 	and.w	r3, r3, #4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d020      	beq.n	800e4d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f003 0304 	and.w	r3, r3, #4
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d01b      	beq.n	800e4d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f06f 0204 	mvn.w	r2, #4
 800e4a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2202      	movs	r2, #2
 800e4aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d003      	beq.n	800e4c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fa35 	bl	800e92a <HAL_TIM_IC_CaptureCallback>
 800e4c0:	e005      	b.n	800e4ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fa27 	bl	800e916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fa38 	bl	800e93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	f003 0308 	and.w	r3, r3, #8
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d020      	beq.n	800e520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01b      	beq.n	800e520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f06f 0208 	mvn.w	r2, #8
 800e4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2204      	movs	r2, #4
 800e4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	f003 0303 	and.w	r3, r3, #3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fa0f 	bl	800e92a <HAL_TIM_IC_CaptureCallback>
 800e50c:	e005      	b.n	800e51a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fa01 	bl	800e916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fa12 	bl	800e93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f003 0310 	and.w	r3, r3, #16
 800e526:	2b00      	cmp	r3, #0
 800e528:	d020      	beq.n	800e56c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f003 0310 	and.w	r3, r3, #16
 800e530:	2b00      	cmp	r3, #0
 800e532:	d01b      	beq.n	800e56c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f06f 0210 	mvn.w	r2, #16
 800e53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2208      	movs	r2, #8
 800e542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	69db      	ldr	r3, [r3, #28]
 800e54a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f9e9 	bl	800e92a <HAL_TIM_IC_CaptureCallback>
 800e558:	e005      	b.n	800e566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f9db 	bl	800e916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f9ec 	bl	800e93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00c      	beq.n	800e590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f003 0301 	and.w	r3, r3, #1
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f06f 0201 	mvn.w	r2, #1
 800e588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7f9 fff4 	bl	8008578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00c      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d007      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fd7c 	bl	800f0ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00c      	beq.n	800e5d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d007      	beq.n	800e5d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f9bd 	bl	800e952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f003 0320 	and.w	r3, r3, #32
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00c      	beq.n	800e5fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f003 0320 	and.w	r3, r3, #32
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f06f 0220 	mvn.w	r2, #32
 800e5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fd4e 	bl	800f098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d101      	bne.n	800e622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e61e:	2302      	movs	r3, #2
 800e620:	e0ae      	b.n	800e780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b0c      	cmp	r3, #12
 800e62e:	f200 809f 	bhi.w	800e770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e632:	a201      	add	r2, pc, #4	@ (adr r2, 800e638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e638:	0800e66d 	.word	0x0800e66d
 800e63c:	0800e771 	.word	0x0800e771
 800e640:	0800e771 	.word	0x0800e771
 800e644:	0800e771 	.word	0x0800e771
 800e648:	0800e6ad 	.word	0x0800e6ad
 800e64c:	0800e771 	.word	0x0800e771
 800e650:	0800e771 	.word	0x0800e771
 800e654:	0800e771 	.word	0x0800e771
 800e658:	0800e6ef 	.word	0x0800e6ef
 800e65c:	0800e771 	.word	0x0800e771
 800e660:	0800e771 	.word	0x0800e771
 800e664:	0800e771 	.word	0x0800e771
 800e668:	0800e72f 	.word	0x0800e72f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68b9      	ldr	r1, [r7, #8]
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fa24 	bl	800eac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	699a      	ldr	r2, [r3, #24]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f042 0208 	orr.w	r2, r2, #8
 800e686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	699a      	ldr	r2, [r3, #24]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f022 0204 	bic.w	r2, r2, #4
 800e696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6999      	ldr	r1, [r3, #24]
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	691a      	ldr	r2, [r3, #16]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	619a      	str	r2, [r3, #24]
      break;
 800e6aa:	e064      	b.n	800e776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	68b9      	ldr	r1, [r7, #8]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 fa74 	bl	800eba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	699a      	ldr	r2, [r3, #24]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	699a      	ldr	r2, [r3, #24]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6999      	ldr	r1, [r3, #24]
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	021a      	lsls	r2, r3, #8
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	430a      	orrs	r2, r1
 800e6ea:	619a      	str	r2, [r3, #24]
      break;
 800e6ec:	e043      	b.n	800e776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68b9      	ldr	r1, [r7, #8]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fac9 	bl	800ec8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	69da      	ldr	r2, [r3, #28]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f042 0208 	orr.w	r2, r2, #8
 800e708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	69da      	ldr	r2, [r3, #28]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f022 0204 	bic.w	r2, r2, #4
 800e718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	69d9      	ldr	r1, [r3, #28]
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	691a      	ldr	r2, [r3, #16]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	430a      	orrs	r2, r1
 800e72a:	61da      	str	r2, [r3, #28]
      break;
 800e72c:	e023      	b.n	800e776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68b9      	ldr	r1, [r7, #8]
 800e734:	4618      	mov	r0, r3
 800e736:	f000 fb1d 	bl	800ed74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	69da      	ldr	r2, [r3, #28]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	69da      	ldr	r2, [r3, #28]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	69d9      	ldr	r1, [r3, #28]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	021a      	lsls	r2, r3, #8
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	61da      	str	r2, [r3, #28]
      break;
 800e76e:	e002      	b.n	800e776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e770:	2301      	movs	r3, #1
 800e772:	75fb      	strb	r3, [r7, #23]
      break;
 800e774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3718      	adds	r7, #24
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e792:	2300      	movs	r3, #0
 800e794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d101      	bne.n	800e7a4 <HAL_TIM_ConfigClockSource+0x1c>
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	e0b4      	b.n	800e90e <HAL_TIM_ConfigClockSource+0x186>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2202      	movs	r2, #2
 800e7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e7c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e7dc:	d03e      	beq.n	800e85c <HAL_TIM_ConfigClockSource+0xd4>
 800e7de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e7e2:	f200 8087 	bhi.w	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e7e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7ea:	f000 8086 	beq.w	800e8fa <HAL_TIM_ConfigClockSource+0x172>
 800e7ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7f2:	d87f      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e7f4:	2b70      	cmp	r3, #112	@ 0x70
 800e7f6:	d01a      	beq.n	800e82e <HAL_TIM_ConfigClockSource+0xa6>
 800e7f8:	2b70      	cmp	r3, #112	@ 0x70
 800e7fa:	d87b      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e7fc:	2b60      	cmp	r3, #96	@ 0x60
 800e7fe:	d050      	beq.n	800e8a2 <HAL_TIM_ConfigClockSource+0x11a>
 800e800:	2b60      	cmp	r3, #96	@ 0x60
 800e802:	d877      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e804:	2b50      	cmp	r3, #80	@ 0x50
 800e806:	d03c      	beq.n	800e882 <HAL_TIM_ConfigClockSource+0xfa>
 800e808:	2b50      	cmp	r3, #80	@ 0x50
 800e80a:	d873      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e80c:	2b40      	cmp	r3, #64	@ 0x40
 800e80e:	d058      	beq.n	800e8c2 <HAL_TIM_ConfigClockSource+0x13a>
 800e810:	2b40      	cmp	r3, #64	@ 0x40
 800e812:	d86f      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e814:	2b30      	cmp	r3, #48	@ 0x30
 800e816:	d064      	beq.n	800e8e2 <HAL_TIM_ConfigClockSource+0x15a>
 800e818:	2b30      	cmp	r3, #48	@ 0x30
 800e81a:	d86b      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e81c:	2b20      	cmp	r3, #32
 800e81e:	d060      	beq.n	800e8e2 <HAL_TIM_ConfigClockSource+0x15a>
 800e820:	2b20      	cmp	r3, #32
 800e822:	d867      	bhi.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
 800e824:	2b00      	cmp	r3, #0
 800e826:	d05c      	beq.n	800e8e2 <HAL_TIM_ConfigClockSource+0x15a>
 800e828:	2b10      	cmp	r3, #16
 800e82a:	d05a      	beq.n	800e8e2 <HAL_TIM_ConfigClockSource+0x15a>
 800e82c:	e062      	b.n	800e8f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e83e:	f000 fb69 	bl	800ef14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	609a      	str	r2, [r3, #8]
      break;
 800e85a:	e04f      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e86c:	f000 fb52 	bl	800ef14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	689a      	ldr	r2, [r3, #8]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e87e:	609a      	str	r2, [r3, #8]
      break;
 800e880:	e03c      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e88e:	461a      	mov	r2, r3
 800e890:	f000 fac6 	bl	800ee20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2150      	movs	r1, #80	@ 0x50
 800e89a:	4618      	mov	r0, r3
 800e89c:	f000 fb1f 	bl	800eede <TIM_ITRx_SetConfig>
      break;
 800e8a0:	e02c      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	f000 fae5 	bl	800ee7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2160      	movs	r1, #96	@ 0x60
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 fb0f 	bl	800eede <TIM_ITRx_SetConfig>
      break;
 800e8c0:	e01c      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	f000 faa6 	bl	800ee20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2140      	movs	r1, #64	@ 0x40
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 faff 	bl	800eede <TIM_ITRx_SetConfig>
      break;
 800e8e0:	e00c      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	4610      	mov	r0, r2
 800e8ee:	f000 faf6 	bl	800eede <TIM_ITRx_SetConfig>
      break;
 800e8f2:	e003      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e8f8:	e000      	b.n	800e8fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e8fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e916:	b480      	push	{r7}
 800e918:	b083      	sub	sp, #12
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e91e:	bf00      	nop
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr

0800e92a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e92a:	b480      	push	{r7}
 800e92c:	b083      	sub	sp, #12
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e932:	bf00      	nop
 800e934:	370c      	adds	r7, #12
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e93e:	b480      	push	{r7}
 800e940:	b083      	sub	sp, #12
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e946:	bf00      	nop
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e952:	b480      	push	{r7}
 800e954:	b083      	sub	sp, #12
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e95a:	bf00      	nop
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
	...

0800e968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	4a46      	ldr	r2, [pc, #280]	@ (800ea94 <TIM_Base_SetConfig+0x12c>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d013      	beq.n	800e9a8 <TIM_Base_SetConfig+0x40>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e986:	d00f      	beq.n	800e9a8 <TIM_Base_SetConfig+0x40>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	4a43      	ldr	r2, [pc, #268]	@ (800ea98 <TIM_Base_SetConfig+0x130>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d00b      	beq.n	800e9a8 <TIM_Base_SetConfig+0x40>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4a42      	ldr	r2, [pc, #264]	@ (800ea9c <TIM_Base_SetConfig+0x134>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d007      	beq.n	800e9a8 <TIM_Base_SetConfig+0x40>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4a41      	ldr	r2, [pc, #260]	@ (800eaa0 <TIM_Base_SetConfig+0x138>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d003      	beq.n	800e9a8 <TIM_Base_SetConfig+0x40>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4a40      	ldr	r2, [pc, #256]	@ (800eaa4 <TIM_Base_SetConfig+0x13c>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d108      	bne.n	800e9ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4a35      	ldr	r2, [pc, #212]	@ (800ea94 <TIM_Base_SetConfig+0x12c>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d02b      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9c8:	d027      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a32      	ldr	r2, [pc, #200]	@ (800ea98 <TIM_Base_SetConfig+0x130>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d023      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a31      	ldr	r2, [pc, #196]	@ (800ea9c <TIM_Base_SetConfig+0x134>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d01f      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4a30      	ldr	r2, [pc, #192]	@ (800eaa0 <TIM_Base_SetConfig+0x138>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d01b      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4a2f      	ldr	r2, [pc, #188]	@ (800eaa4 <TIM_Base_SetConfig+0x13c>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d017      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4a2e      	ldr	r2, [pc, #184]	@ (800eaa8 <TIM_Base_SetConfig+0x140>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d013      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a2d      	ldr	r2, [pc, #180]	@ (800eaac <TIM_Base_SetConfig+0x144>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d00f      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4a2c      	ldr	r2, [pc, #176]	@ (800eab0 <TIM_Base_SetConfig+0x148>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d00b      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a2b      	ldr	r2, [pc, #172]	@ (800eab4 <TIM_Base_SetConfig+0x14c>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d007      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a2a      	ldr	r2, [pc, #168]	@ (800eab8 <TIM_Base_SetConfig+0x150>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d003      	beq.n	800ea1a <TIM_Base_SetConfig+0xb2>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a29      	ldr	r2, [pc, #164]	@ (800eabc <TIM_Base_SetConfig+0x154>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d108      	bne.n	800ea2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	695b      	ldr	r3, [r3, #20]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	689a      	ldr	r2, [r3, #8]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a10      	ldr	r2, [pc, #64]	@ (800ea94 <TIM_Base_SetConfig+0x12c>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d003      	beq.n	800ea60 <TIM_Base_SetConfig+0xf8>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a12      	ldr	r2, [pc, #72]	@ (800eaa4 <TIM_Base_SetConfig+0x13c>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d103      	bne.n	800ea68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	691a      	ldr	r2, [r3, #16]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d105      	bne.n	800ea86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	f023 0201 	bic.w	r2, r3, #1
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	611a      	str	r2, [r3, #16]
  }
}
 800ea86:	bf00      	nop
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	40010000 	.word	0x40010000
 800ea98:	40000400 	.word	0x40000400
 800ea9c:	40000800 	.word	0x40000800
 800eaa0:	40000c00 	.word	0x40000c00
 800eaa4:	40010400 	.word	0x40010400
 800eaa8:	40014000 	.word	0x40014000
 800eaac:	40014400 	.word	0x40014400
 800eab0:	40014800 	.word	0x40014800
 800eab4:	40001800 	.word	0x40001800
 800eab8:	40001c00 	.word	0x40001c00
 800eabc:	40002000 	.word	0x40002000

0800eac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b087      	sub	sp, #28
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	f023 0201 	bic.w	r2, r3, #1
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	699b      	ldr	r3, [r3, #24]
 800eae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eaee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f023 0303 	bic.w	r3, r3, #3
 800eaf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f023 0302 	bic.w	r3, r3, #2
 800eb08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	697a      	ldr	r2, [r7, #20]
 800eb10:	4313      	orrs	r3, r2
 800eb12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a20      	ldr	r2, [pc, #128]	@ (800eb98 <TIM_OC1_SetConfig+0xd8>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d003      	beq.n	800eb24 <TIM_OC1_SetConfig+0x64>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a1f      	ldr	r2, [pc, #124]	@ (800eb9c <TIM_OC1_SetConfig+0xdc>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d10c      	bne.n	800eb3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	f023 0308 	bic.w	r3, r3, #8
 800eb2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	697a      	ldr	r2, [r7, #20]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f023 0304 	bic.w	r3, r3, #4
 800eb3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4a15      	ldr	r2, [pc, #84]	@ (800eb98 <TIM_OC1_SetConfig+0xd8>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d003      	beq.n	800eb4e <TIM_OC1_SetConfig+0x8e>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a14      	ldr	r2, [pc, #80]	@ (800eb9c <TIM_OC1_SetConfig+0xdc>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d111      	bne.n	800eb72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eb5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	693a      	ldr	r2, [r7, #16]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	699b      	ldr	r3, [r3, #24]
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	685a      	ldr	r2, [r3, #4]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	697a      	ldr	r2, [r7, #20]
 800eb8a:	621a      	str	r2, [r3, #32]
}
 800eb8c:	bf00      	nop
 800eb8e:	371c      	adds	r7, #28
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	40010000 	.word	0x40010000
 800eb9c:	40010400 	.word	0x40010400

0800eba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b087      	sub	sp, #28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	f023 0210 	bic.w	r2, r3, #16
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ebce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	021b      	lsls	r3, r3, #8
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	f023 0320 	bic.w	r3, r3, #32
 800ebea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	011b      	lsls	r3, r3, #4
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a22      	ldr	r2, [pc, #136]	@ (800ec84 <TIM_OC2_SetConfig+0xe4>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d003      	beq.n	800ec08 <TIM_OC2_SetConfig+0x68>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4a21      	ldr	r2, [pc, #132]	@ (800ec88 <TIM_OC2_SetConfig+0xe8>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d10d      	bne.n	800ec24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ec0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	011b      	lsls	r3, r3, #4
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a17      	ldr	r2, [pc, #92]	@ (800ec84 <TIM_OC2_SetConfig+0xe4>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d003      	beq.n	800ec34 <TIM_OC2_SetConfig+0x94>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a16      	ldr	r2, [pc, #88]	@ (800ec88 <TIM_OC2_SetConfig+0xe8>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d113      	bne.n	800ec5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	695b      	ldr	r3, [r3, #20]
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	693a      	ldr	r2, [r7, #16]
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	621a      	str	r2, [r3, #32]
}
 800ec76:	bf00      	nop
 800ec78:	371c      	adds	r7, #28
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop
 800ec84:	40010000 	.word	0x40010000
 800ec88:	40010400 	.word	0x40010400

0800ec8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a1b      	ldr	r3, [r3, #32]
 800eca0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	69db      	ldr	r3, [r3, #28]
 800ecb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f023 0303 	bic.w	r3, r3, #3
 800ecc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ecd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	021b      	lsls	r3, r3, #8
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4a21      	ldr	r2, [pc, #132]	@ (800ed6c <TIM_OC3_SetConfig+0xe0>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d003      	beq.n	800ecf2 <TIM_OC3_SetConfig+0x66>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4a20      	ldr	r2, [pc, #128]	@ (800ed70 <TIM_OC3_SetConfig+0xe4>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d10d      	bne.n	800ed0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ecf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	021b      	lsls	r3, r3, #8
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ed0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a16      	ldr	r2, [pc, #88]	@ (800ed6c <TIM_OC3_SetConfig+0xe0>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d003      	beq.n	800ed1e <TIM_OC3_SetConfig+0x92>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a15      	ldr	r2, [pc, #84]	@ (800ed70 <TIM_OC3_SetConfig+0xe4>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d113      	bne.n	800ed46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ed24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	695b      	ldr	r3, [r3, #20]
 800ed32:	011b      	lsls	r3, r3, #4
 800ed34:	693a      	ldr	r2, [r7, #16]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	011b      	lsls	r3, r3, #4
 800ed40:	693a      	ldr	r2, [r7, #16]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	621a      	str	r2, [r3, #32]
}
 800ed60:	bf00      	nop
 800ed62:	371c      	adds	r7, #28
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	40010000 	.word	0x40010000
 800ed70:	40010400 	.word	0x40010400

0800ed74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b087      	sub	sp, #28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a1b      	ldr	r3, [r3, #32]
 800ed82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	69db      	ldr	r3, [r3, #28]
 800ed9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eda2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	021b      	lsls	r3, r3, #8
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800edbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	031b      	lsls	r3, r3, #12
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	4313      	orrs	r3, r2
 800edca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a12      	ldr	r2, [pc, #72]	@ (800ee18 <TIM_OC4_SetConfig+0xa4>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d003      	beq.n	800eddc <TIM_OC4_SetConfig+0x68>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a11      	ldr	r2, [pc, #68]	@ (800ee1c <TIM_OC4_SetConfig+0xa8>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d109      	bne.n	800edf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ede2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	019b      	lsls	r3, r3, #6
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	4313      	orrs	r3, r2
 800edee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	621a      	str	r2, [r3, #32]
}
 800ee0a:	bf00      	nop
 800ee0c:	371c      	adds	r7, #28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	40010000 	.word	0x40010000
 800ee1c:	40010400 	.word	0x40010400

0800ee20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b087      	sub	sp, #28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	6a1b      	ldr	r3, [r3, #32]
 800ee36:	f023 0201 	bic.w	r2, r3, #1
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	699b      	ldr	r3, [r3, #24]
 800ee42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	011b      	lsls	r3, r3, #4
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	f023 030a 	bic.w	r3, r3, #10
 800ee5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	621a      	str	r2, [r3, #32]
}
 800ee72:	bf00      	nop
 800ee74:	371c      	adds	r7, #28
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr

0800ee7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee7e:	b480      	push	{r7}
 800ee80:	b087      	sub	sp, #28
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	60f8      	str	r0, [r7, #12]
 800ee86:	60b9      	str	r1, [r7, #8]
 800ee88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	6a1b      	ldr	r3, [r3, #32]
 800ee8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6a1b      	ldr	r3, [r3, #32]
 800ee94:	f023 0210 	bic.w	r2, r3, #16
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	699b      	ldr	r3, [r3, #24]
 800eea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	031b      	lsls	r3, r3, #12
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800eeba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	693a      	ldr	r2, [r7, #16]
 800eeca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	621a      	str	r2, [r3, #32]
}
 800eed2:	bf00      	nop
 800eed4:	371c      	adds	r7, #28
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr

0800eede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eede:	b480      	push	{r7}
 800eee0:	b085      	sub	sp, #20
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
 800eee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	f043 0307 	orr.w	r3, r3, #7
 800ef00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	609a      	str	r2, [r3, #8]
}
 800ef08:	bf00      	nop
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ef2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	021a      	lsls	r2, r3, #8
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	431a      	orrs	r2, r3
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	609a      	str	r2, [r3, #8]
}
 800ef48:	bf00      	nop
 800ef4a:	371c      	adds	r7, #28
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b087      	sub	sp, #28
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	f003 031f 	and.w	r3, r3, #31
 800ef66:	2201      	movs	r2, #1
 800ef68:	fa02 f303 	lsl.w	r3, r2, r3
 800ef6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6a1a      	ldr	r2, [r3, #32]
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	43db      	mvns	r3, r3
 800ef76:	401a      	ands	r2, r3
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6a1a      	ldr	r2, [r3, #32]
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	f003 031f 	and.w	r3, r3, #31
 800ef86:	6879      	ldr	r1, [r7, #4]
 800ef88:	fa01 f303 	lsl.w	r3, r1, r3
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	621a      	str	r2, [r3, #32]
}
 800ef92:	bf00      	nop
 800ef94:	371c      	adds	r7, #28
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
	...

0800efa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d101      	bne.n	800efb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800efb4:	2302      	movs	r3, #2
 800efb6:	e05a      	b.n	800f06e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2202      	movs	r2, #2
 800efc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a21      	ldr	r2, [pc, #132]	@ (800f07c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d022      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f004:	d01d      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a1d      	ldr	r2, [pc, #116]	@ (800f080 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d018      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a1b      	ldr	r2, [pc, #108]	@ (800f084 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d013      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a1a      	ldr	r2, [pc, #104]	@ (800f088 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d00e      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a18      	ldr	r2, [pc, #96]	@ (800f08c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d009      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a17      	ldr	r2, [pc, #92]	@ (800f090 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d004      	beq.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a15      	ldr	r2, [pc, #84]	@ (800f094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d10c      	bne.n	800f05c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	4313      	orrs	r3, r2
 800f052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68ba      	ldr	r2, [r7, #8]
 800f05a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3714      	adds	r7, #20
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	40010000 	.word	0x40010000
 800f080:	40000400 	.word	0x40000400
 800f084:	40000800 	.word	0x40000800
 800f088:	40000c00 	.word	0x40000c00
 800f08c:	40010400 	.word	0x40010400
 800f090:	40014000 	.word	0x40014000
 800f094:	40001800 	.word	0x40001800

0800f098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0a0:	bf00      	nop
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e042      	b.n	800f158 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d106      	bne.n	800f0ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7fa fd6e 	bl	8009bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2224      	movs	r2, #36	@ 0x24
 800f0f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68da      	ldr	r2, [r3, #12]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 ff5f 	bl	800ffc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	691a      	ldr	r2, [r3, #16]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	695a      	ldr	r2, [r3, #20]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68da      	ldr	r2, [r3, #12]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2220      	movs	r2, #32
 800f144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2220      	movs	r2, #32
 800f14c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d101      	bne.n	800f172 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	e024      	b.n	800f1bc <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2224      	movs	r2, #36	@ 0x24
 800f176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68da      	ldr	r2, [r3, #12]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f188:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7fa fdd2 	bl	8009d34 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08c      	sub	sp, #48	@ 0x30
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b20      	cmp	r3, #32
 800f1dc:	d156      	bne.n	800f28c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <HAL_UART_Transmit_DMA+0x26>
 800f1e4:	88fb      	ldrh	r3, [r7, #6]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d101      	bne.n	800f1ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e04f      	b.n	800f28e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	88fa      	ldrh	r2, [r7, #6]
 800f1f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	88fa      	ldrh	r2, [r7, #6]
 800f1fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2221      	movs	r2, #33	@ 0x21
 800f20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f212:	4a21      	ldr	r2, [pc, #132]	@ (800f298 <HAL_UART_Transmit_DMA+0xd4>)
 800f214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f21a:	4a20      	ldr	r2, [pc, #128]	@ (800f29c <HAL_UART_Transmit_DMA+0xd8>)
 800f21c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f222:	4a1f      	ldr	r2, [pc, #124]	@ (800f2a0 <HAL_UART_Transmit_DMA+0xdc>)
 800f224:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f22a:	2200      	movs	r2, #0
 800f22c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f22e:	f107 0308 	add.w	r3, r7, #8
 800f232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23a:	6819      	ldr	r1, [r3, #0]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	3304      	adds	r3, #4
 800f242:	461a      	mov	r2, r3
 800f244:	88fb      	ldrh	r3, [r7, #6]
 800f246:	f7fb fb51 	bl	800a8ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f252:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3314      	adds	r3, #20
 800f25a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	e853 3f00 	ldrex	r3, [r3]
 800f262:	617b      	str	r3, [r7, #20]
   return(result);
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f26a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	3314      	adds	r3, #20
 800f272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f274:	627a      	str	r2, [r7, #36]	@ 0x24
 800f276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f278:	6a39      	ldr	r1, [r7, #32]
 800f27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f27c:	e841 2300 	strex	r3, r2, [r1]
 800f280:	61fb      	str	r3, [r7, #28]
   return(result);
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1e5      	bne.n	800f254 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	e000      	b.n	800f28e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800f28c:	2302      	movs	r3, #2
  }
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3730      	adds	r7, #48	@ 0x30
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	0800f855 	.word	0x0800f855
 800f29c:	0800f8ef 	.word	0x0800f8ef
 800f2a0:	0800fa73 	.word	0x0800fa73

0800f2a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b20      	cmp	r3, #32
 800f2bc:	d112      	bne.n	800f2e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <HAL_UART_Receive_DMA+0x26>
 800f2c4:	88fb      	ldrh	r3, [r7, #6]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e00b      	b.n	800f2e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f2d4:	88fb      	ldrh	r3, [r7, #6]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	68b9      	ldr	r1, [r7, #8]
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f000 fc14 	bl	800fb08 <UART_Start_Receive_DMA>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	e000      	b.n	800f2e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f2e4:	2302      	movs	r3, #2
  }
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b0ba      	sub	sp, #232	@ 0xe8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	695b      	ldr	r3, [r3, #20]
 800f312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f316:	2300      	movs	r3, #0
 800f318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f31c:	2300      	movs	r3, #0
 800f31e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f326:	f003 030f 	and.w	r3, r3, #15
 800f32a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f32e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f332:	2b00      	cmp	r3, #0
 800f334:	d10f      	bne.n	800f356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f33a:	f003 0320 	and.w	r3, r3, #32
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <HAL_UART_IRQHandler+0x66>
 800f342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f346:	f003 0320 	and.w	r3, r3, #32
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d003      	beq.n	800f356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fd7b 	bl	800fe4a <UART_Receive_IT>
      return;
 800f354:	e25b      	b.n	800f80e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 80de 	beq.w	800f51c <HAL_UART_IRQHandler+0x22c>
 800f360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d106      	bne.n	800f37a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f370:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 80d1 	beq.w	800f51c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00b      	beq.n	800f39e <HAL_UART_IRQHandler+0xae>
 800f386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f38a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d005      	beq.n	800f39e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f396:	f043 0201 	orr.w	r2, r3, #1
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3a2:	f003 0304 	and.w	r3, r3, #4
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00b      	beq.n	800f3c2 <HAL_UART_IRQHandler+0xd2>
 800f3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d005      	beq.n	800f3c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3ba:	f043 0202 	orr.w	r2, r3, #2
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <HAL_UART_IRQHandler+0xf6>
 800f3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d005      	beq.n	800f3e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3de:	f043 0204 	orr.w	r2, r3, #4
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3ea:	f003 0308 	and.w	r3, r3, #8
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d011      	beq.n	800f416 <HAL_UART_IRQHandler+0x126>
 800f3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3f6:	f003 0320 	and.w	r3, r3, #32
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d105      	bne.n	800f40a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f3fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f402:	f003 0301 	and.w	r3, r3, #1
 800f406:	2b00      	cmp	r3, #0
 800f408:	d005      	beq.n	800f416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f40e:	f043 0208 	orr.w	r2, r3, #8
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 81f2 	beq.w	800f804 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f424:	f003 0320 	and.w	r3, r3, #32
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d008      	beq.n	800f43e <HAL_UART_IRQHandler+0x14e>
 800f42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f430:	f003 0320 	and.w	r3, r3, #32
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fd06 	bl	800fe4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	695b      	ldr	r3, [r3, #20]
 800f444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f448:	2b40      	cmp	r3, #64	@ 0x40
 800f44a:	bf0c      	ite	eq
 800f44c:	2301      	moveq	r3, #1
 800f44e:	2300      	movne	r3, #0
 800f450:	b2db      	uxtb	r3, r3
 800f452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f45a:	f003 0308 	and.w	r3, r3, #8
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d103      	bne.n	800f46a <HAL_UART_IRQHandler+0x17a>
 800f462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f466:	2b00      	cmp	r3, #0
 800f468:	d04f      	beq.n	800f50a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 fc0e 	bl	800fc8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f47a:	2b40      	cmp	r3, #64	@ 0x40
 800f47c:	d141      	bne.n	800f502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	3314      	adds	r3, #20
 800f484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f49c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3314      	adds	r3, #20
 800f4a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f4aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f4ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f4b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f4ba:	e841 2300 	strex	r3, r2, [r1]
 800f4be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f4c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1d9      	bne.n	800f47e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d013      	beq.n	800f4fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4d6:	4a7e      	ldr	r2, [pc, #504]	@ (800f6d0 <HAL_UART_IRQHandler+0x3e0>)
 800f4d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fb facc 	bl	800aa7c <HAL_DMA_Abort_IT>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d016      	beq.n	800f518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4f8:	e00e      	b.n	800f518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7fa fd90 	bl	800a020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f500:	e00a      	b.n	800f518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7fa fd8c 	bl	800a020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f508:	e006      	b.n	800f518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7fa fd88 	bl	800a020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f516:	e175      	b.n	800f804 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f518:	bf00      	nop
    return;
 800f51a:	e173      	b.n	800f804 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f520:	2b01      	cmp	r3, #1
 800f522:	f040 814f 	bne.w	800f7c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f52a:	f003 0310 	and.w	r3, r3, #16
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f000 8148 	beq.w	800f7c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f538:	f003 0310 	and.w	r3, r3, #16
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f000 8141 	beq.w	800f7c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f542:	2300      	movs	r3, #0
 800f544:	60bb      	str	r3, [r7, #8]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60bb      	str	r3, [r7, #8]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	60bb      	str	r3, [r7, #8]
 800f556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f562:	2b40      	cmp	r3, #64	@ 0x40
 800f564:	f040 80b6 	bne.w	800f6d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f000 8145 	beq.w	800f808 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f586:	429a      	cmp	r2, r3
 800f588:	f080 813e 	bcs.w	800f808 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f592:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f59e:	f000 8088 	beq.w	800f6b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	330c      	adds	r3, #12
 800f5a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f5b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f5bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f5c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	330c      	adds	r3, #12
 800f5ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f5ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f5d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f5da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f5de:	e841 2300 	strex	r3, r2, [r1]
 800f5e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f5e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1d9      	bne.n	800f5a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	3314      	adds	r3, #20
 800f5f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f5f8:	e853 3f00 	ldrex	r3, [r3]
 800f5fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f5fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f600:	f023 0301 	bic.w	r3, r3, #1
 800f604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3314      	adds	r3, #20
 800f60e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f612:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f616:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f618:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f61a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f61e:	e841 2300 	strex	r3, r2, [r1]
 800f622:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1e1      	bne.n	800f5ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3314      	adds	r3, #20
 800f630:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f634:	e853 3f00 	ldrex	r3, [r3]
 800f638:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f63a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f63c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3314      	adds	r3, #20
 800f64a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f64e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f650:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f652:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f654:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f656:	e841 2300 	strex	r3, r2, [r1]
 800f65a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f65c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1e3      	bne.n	800f62a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2220      	movs	r2, #32
 800f666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	330c      	adds	r3, #12
 800f676:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f67a:	e853 3f00 	ldrex	r3, [r3]
 800f67e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f682:	f023 0310 	bic.w	r3, r3, #16
 800f686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	330c      	adds	r3, #12
 800f690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f694:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f696:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f698:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f69a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f69c:	e841 2300 	strex	r3, r2, [r1]
 800f6a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f6a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1e3      	bne.n	800f670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fb f975 	bl	800a99c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2202      	movs	r2, #2
 800f6b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 f8b7 	bl	800f83c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f6ce:	e09b      	b.n	800f808 <HAL_UART_IRQHandler+0x518>
 800f6d0:	0800fd53 	.word	0x0800fd53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 808e 	beq.w	800f80c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f6f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 8089 	beq.w	800f80c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	330c      	adds	r3, #12
 800f700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f704:	e853 3f00 	ldrex	r3, [r3]
 800f708:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f70c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f710:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	330c      	adds	r3, #12
 800f71a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f71e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f720:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e3      	bne.n	800f6fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	3314      	adds	r3, #20
 800f738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f73c:	e853 3f00 	ldrex	r3, [r3]
 800f740:	623b      	str	r3, [r7, #32]
   return(result);
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	f023 0301 	bic.w	r3, r3, #1
 800f748:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	3314      	adds	r3, #20
 800f752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f756:	633a      	str	r2, [r7, #48]	@ 0x30
 800f758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f75c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f75e:	e841 2300 	strex	r3, r2, [r1]
 800f762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1e3      	bne.n	800f732 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2220      	movs	r2, #32
 800f76e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2200      	movs	r2, #0
 800f776:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	330c      	adds	r3, #12
 800f77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	e853 3f00 	ldrex	r3, [r3]
 800f786:	60fb      	str	r3, [r7, #12]
   return(result);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f023 0310 	bic.w	r3, r3, #16
 800f78e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	330c      	adds	r3, #12
 800f798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f79c:	61fa      	str	r2, [r7, #28]
 800f79e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a0:	69b9      	ldr	r1, [r7, #24]
 800f7a2:	69fa      	ldr	r2, [r7, #28]
 800f7a4:	e841 2300 	strex	r3, r2, [r1]
 800f7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d1e3      	bne.n	800f778 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2202      	movs	r2, #2
 800f7b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f7b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f83d 	bl	800f83c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f7c2:	e023      	b.n	800f80c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d009      	beq.n	800f7e4 <HAL_UART_IRQHandler+0x4f4>
 800f7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d003      	beq.n	800f7e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 facc 	bl	800fd7a <UART_Transmit_IT>
    return;
 800f7e2:	e014      	b.n	800f80e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00e      	beq.n	800f80e <HAL_UART_IRQHandler+0x51e>
 800f7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d008      	beq.n	800f80e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fb0c 	bl	800fe1a <UART_EndTransmit_IT>
    return;
 800f802:	e004      	b.n	800f80e <HAL_UART_IRQHandler+0x51e>
    return;
 800f804:	bf00      	nop
 800f806:	e002      	b.n	800f80e <HAL_UART_IRQHandler+0x51e>
      return;
 800f808:	bf00      	nop
 800f80a:	e000      	b.n	800f80e <HAL_UART_IRQHandler+0x51e>
      return;
 800f80c:	bf00      	nop
  }
}
 800f80e:	37e8      	adds	r7, #232	@ 0xe8
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f81c:	bf00      	nop
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	460b      	mov	r3, r1
 800f846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f848:	bf00      	nop
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b090      	sub	sp, #64	@ 0x40
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d137      	bne.n	800f8e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f872:	2200      	movs	r2, #0
 800f874:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	3314      	adds	r3, #20
 800f87c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	e853 3f00 	ldrex	r3, [r3]
 800f884:	623b      	str	r3, [r7, #32]
   return(result);
 800f886:	6a3b      	ldr	r3, [r7, #32]
 800f888:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f88c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	3314      	adds	r3, #20
 800f894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f896:	633a      	str	r2, [r7, #48]	@ 0x30
 800f898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f89c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f89e:	e841 2300 	strex	r3, r2, [r1]
 800f8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1e5      	bne.n	800f876 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	330c      	adds	r3, #12
 800f8b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	e853 3f00 	ldrex	r3, [r3]
 800f8b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	330c      	adds	r3, #12
 800f8c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8ca:	61fa      	str	r2, [r7, #28]
 800f8cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ce:	69b9      	ldr	r1, [r7, #24]
 800f8d0:	69fa      	ldr	r2, [r7, #28]
 800f8d2:	e841 2300 	strex	r3, r2, [r1]
 800f8d6:	617b      	str	r3, [r7, #20]
   return(result);
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1e5      	bne.n	800f8aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f8de:	e002      	b.n	800f8e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f8e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f8e2:	f7fa fa67 	bl	8009db4 <HAL_UART_TxCpltCallback>
}
 800f8e6:	bf00      	nop
 800f8e8:	3740      	adds	r7, #64	@ 0x40
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b084      	sub	sp, #16
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f8fc:	68f8      	ldr	r0, [r7, #12]
 800f8fe:	f7ff ff89 	bl	800f814 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f902:	bf00      	nop
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b09c      	sub	sp, #112	@ 0x70
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f916:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f922:	2b00      	cmp	r3, #0
 800f924:	d172      	bne.n	800fa0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f928:	2200      	movs	r2, #0
 800f92a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f92c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	330c      	adds	r3, #12
 800f932:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f936:	e853 3f00 	ldrex	r3, [r3]
 800f93a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f93c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f93e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f942:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	330c      	adds	r3, #12
 800f94a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f94c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f94e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f950:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f954:	e841 2300 	strex	r3, r2, [r1]
 800f958:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1e5      	bne.n	800f92c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3314      	adds	r3, #20
 800f966:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96a:	e853 3f00 	ldrex	r3, [r3]
 800f96e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f972:	f023 0301 	bic.w	r3, r3, #1
 800f976:	667b      	str	r3, [r7, #100]	@ 0x64
 800f978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	3314      	adds	r3, #20
 800f97e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f980:	647a      	str	r2, [r7, #68]	@ 0x44
 800f982:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f984:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f988:	e841 2300 	strex	r3, r2, [r1]
 800f98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f98e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1e5      	bne.n	800f960 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3314      	adds	r3, #20
 800f99a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99e:	e853 3f00 	ldrex	r3, [r3]
 800f9a2:	623b      	str	r3, [r7, #32]
   return(result);
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800f9ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3314      	adds	r3, #20
 800f9b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f9b4:	633a      	str	r2, [r7, #48]	@ 0x30
 800f9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9bc:	e841 2300 	strex	r3, r2, [r1]
 800f9c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1e5      	bne.n	800f994 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9ca:	2220      	movs	r2, #32
 800f9cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d119      	bne.n	800fa0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	330c      	adds	r3, #12
 800f9de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	e853 3f00 	ldrex	r3, [r3]
 800f9e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f023 0310 	bic.w	r3, r3, #16
 800f9ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	330c      	adds	r3, #12
 800f9f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f9f8:	61fa      	str	r2, [r7, #28]
 800f9fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9fc:	69b9      	ldr	r1, [r7, #24]
 800f9fe:	69fa      	ldr	r2, [r7, #28]
 800fa00:	e841 2300 	strex	r3, r2, [r1]
 800fa04:	617b      	str	r3, [r7, #20]
   return(result);
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1e5      	bne.n	800f9d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa0e:	2200      	movs	r2, #0
 800fa10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d106      	bne.n	800fa28 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fa22:	f7ff ff0b 	bl	800f83c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa26:	e002      	b.n	800fa2e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800fa28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fa2a:	f7fa fa05 	bl	8009e38 <HAL_UART_RxCpltCallback>
}
 800fa2e:	bf00      	nop
 800fa30:	3770      	adds	r7, #112	@ 0x70
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b084      	sub	sp, #16
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2201      	movs	r2, #1
 800fa48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d108      	bne.n	800fa64 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fa56:	085b      	lsrs	r3, r3, #1
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff feed 	bl	800f83c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa62:	e002      	b.n	800fa6a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7ff fedf 	bl	800f828 <HAL_UART_RxHalfCpltCallback>
}
 800fa6a:	bf00      	nop
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa8e:	2b80      	cmp	r3, #128	@ 0x80
 800fa90:	bf0c      	ite	eq
 800fa92:	2301      	moveq	r3, #1
 800fa94:	2300      	movne	r3, #0
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b21      	cmp	r3, #33	@ 0x21
 800faa4:	d108      	bne.n	800fab8 <UART_DMAError+0x46>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d005      	beq.n	800fab8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	2200      	movs	r2, #0
 800fab0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800fab2:	68b8      	ldr	r0, [r7, #8]
 800fab4:	f000 f8c2 	bl	800fc3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fac2:	2b40      	cmp	r3, #64	@ 0x40
 800fac4:	bf0c      	ite	eq
 800fac6:	2301      	moveq	r3, #1
 800fac8:	2300      	movne	r3, #0
 800faca:	b2db      	uxtb	r3, r3
 800facc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b22      	cmp	r3, #34	@ 0x22
 800fad8:	d108      	bne.n	800faec <UART_DMAError+0x7a>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d005      	beq.n	800faec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2200      	movs	r2, #0
 800fae4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800fae6:	68b8      	ldr	r0, [r7, #8]
 800fae8:	f000 f8d0 	bl	800fc8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faf0:	f043 0210 	orr.w	r2, r3, #16
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800faf8:	68b8      	ldr	r0, [r7, #8]
 800fafa:	f7fa fa91 	bl	800a020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fafe:	bf00      	nop
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b098      	sub	sp, #96	@ 0x60
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4613      	mov	r3, r2
 800fb14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fb16:	68ba      	ldr	r2, [r7, #8]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	88fa      	ldrh	r2, [r7, #6]
 800fb20:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2200      	movs	r2, #0
 800fb26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2222      	movs	r2, #34	@ 0x22
 800fb2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb34:	4a3e      	ldr	r2, [pc, #248]	@ (800fc30 <UART_Start_Receive_DMA+0x128>)
 800fb36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb3c:	4a3d      	ldr	r2, [pc, #244]	@ (800fc34 <UART_Start_Receive_DMA+0x12c>)
 800fb3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb44:	4a3c      	ldr	r2, [pc, #240]	@ (800fc38 <UART_Start_Receive_DMA+0x130>)
 800fb46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fb50:	f107 0308 	add.w	r3, r7, #8
 800fb54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	3304      	adds	r3, #4
 800fb60:	4619      	mov	r1, r3
 800fb62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	88fb      	ldrh	r3, [r7, #6]
 800fb68:	f7fa fec0 	bl	800a8ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	613b      	str	r3, [r7, #16]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	613b      	str	r3, [r7, #16]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	613b      	str	r3, [r7, #16]
 800fb80:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d019      	beq.n	800fbbe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	330c      	adds	r3, #12
 800fb90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb94:	e853 3f00 	ldrex	r3, [r3]
 800fb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	330c      	adds	r3, #12
 800fba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fbaa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800fbac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fbb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fbb2:	e841 2300 	strex	r3, r2, [r1]
 800fbb6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fbb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e5      	bne.n	800fb8a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3314      	adds	r3, #20
 800fbc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc8:	e853 3f00 	ldrex	r3, [r3]
 800fbcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd0:	f043 0301 	orr.w	r3, r3, #1
 800fbd4:	657b      	str	r3, [r7, #84]	@ 0x54
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	3314      	adds	r3, #20
 800fbdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fbde:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fbe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fbe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fbe6:	e841 2300 	strex	r3, r2, [r1]
 800fbea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1e5      	bne.n	800fbbe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	3314      	adds	r3, #20
 800fbf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	e853 3f00 	ldrex	r3, [r3]
 800fc00:	617b      	str	r3, [r7, #20]
   return(result);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc08:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	3314      	adds	r3, #20
 800fc10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc12:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc16:	6a39      	ldr	r1, [r7, #32]
 800fc18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc1a:	e841 2300 	strex	r3, r2, [r1]
 800fc1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1e5      	bne.n	800fbf2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3760      	adds	r7, #96	@ 0x60
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	0800f90b 	.word	0x0800f90b
 800fc34:	0800fa37 	.word	0x0800fa37
 800fc38:	0800fa73 	.word	0x0800fa73

0800fc3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b089      	sub	sp, #36	@ 0x24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	330c      	adds	r3, #12
 800fc4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	e853 3f00 	ldrex	r3, [r3]
 800fc52:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fc5a:	61fb      	str	r3, [r7, #28]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	330c      	adds	r3, #12
 800fc62:	69fa      	ldr	r2, [r7, #28]
 800fc64:	61ba      	str	r2, [r7, #24]
 800fc66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc68:	6979      	ldr	r1, [r7, #20]
 800fc6a:	69ba      	ldr	r2, [r7, #24]
 800fc6c:	e841 2300 	strex	r3, r2, [r1]
 800fc70:	613b      	str	r3, [r7, #16]
   return(result);
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1e5      	bne.n	800fc44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2220      	movs	r2, #32
 800fc7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800fc80:	bf00      	nop
 800fc82:	3724      	adds	r7, #36	@ 0x24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b095      	sub	sp, #84	@ 0x54
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	330c      	adds	r3, #12
 800fc9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc9e:	e853 3f00 	ldrex	r3, [r3]
 800fca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	330c      	adds	r3, #12
 800fcb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fcb4:	643a      	str	r2, [r7, #64]	@ 0x40
 800fcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fcba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fcbc:	e841 2300 	strex	r3, r2, [r1]
 800fcc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d1e5      	bne.n	800fc94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3314      	adds	r3, #20
 800fcce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd0:	6a3b      	ldr	r3, [r7, #32]
 800fcd2:	e853 3f00 	ldrex	r3, [r3]
 800fcd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	f023 0301 	bic.w	r3, r3, #1
 800fcde:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3314      	adds	r3, #20
 800fce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fcea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fcee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcf0:	e841 2300 	strex	r3, r2, [r1]
 800fcf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1e5      	bne.n	800fcc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d119      	bne.n	800fd38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	330c      	adds	r3, #12
 800fd0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	e853 3f00 	ldrex	r3, [r3]
 800fd12:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	f023 0310 	bic.w	r3, r3, #16
 800fd1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	330c      	adds	r3, #12
 800fd22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd24:	61ba      	str	r2, [r7, #24]
 800fd26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd28:	6979      	ldr	r1, [r7, #20]
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	e841 2300 	strex	r3, r2, [r1]
 800fd30:	613b      	str	r3, [r7, #16]
   return(result);
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1e5      	bne.n	800fd04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2220      	movs	r2, #32
 800fd3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fd46:	bf00      	nop
 800fd48:	3754      	adds	r7, #84	@ 0x54
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr

0800fd52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b084      	sub	sp, #16
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f7fa f957 	bl	800a020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd72:	bf00      	nop
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fd7a:	b480      	push	{r7}
 800fd7c:	b085      	sub	sp, #20
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b21      	cmp	r3, #33	@ 0x21
 800fd8c:	d13e      	bne.n	800fe0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd96:	d114      	bne.n	800fdc2 <UART_Transmit_IT+0x48>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d110      	bne.n	800fdc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6a1b      	ldr	r3, [r3, #32]
 800fda4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fdb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6a1b      	ldr	r3, [r3, #32]
 800fdba:	1c9a      	adds	r2, r3, #2
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	621a      	str	r2, [r3, #32]
 800fdc0:	e008      	b.n	800fdd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a1b      	ldr	r3, [r3, #32]
 800fdc6:	1c59      	adds	r1, r3, #1
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	6211      	str	r1, [r2, #32]
 800fdcc:	781a      	ldrb	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	3b01      	subs	r3, #1
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	4619      	mov	r1, r3
 800fde2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10f      	bne.n	800fe08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68da      	ldr	r2, [r3, #12]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fdf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	68da      	ldr	r2, [r3, #12]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	e000      	b.n	800fe0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fe0c:	2302      	movs	r3, #2
  }
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3714      	adds	r7, #20
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr

0800fe1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	68da      	ldr	r2, [r3, #12]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2220      	movs	r2, #32
 800fe36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7f9 ffba 	bl	8009db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3708      	adds	r7, #8
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b08c      	sub	sp, #48	@ 0x30
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b22      	cmp	r3, #34	@ 0x22
 800fe5c:	f040 80ae 	bne.w	800ffbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe68:	d117      	bne.n	800fe9a <UART_Receive_IT+0x50>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d113      	bne.n	800fe9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe92:	1c9a      	adds	r2, r3, #2
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe98:	e026      	b.n	800fee8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800fea0:	2300      	movs	r3, #0
 800fea2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800feac:	d007      	beq.n	800febe <UART_Receive_IT+0x74>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10a      	bne.n	800fecc <UART_Receive_IT+0x82>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d106      	bne.n	800fecc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	b2da      	uxtb	r2, r3
 800fec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fec8:	701a      	strb	r2, [r3, #0]
 800feca:	e008      	b.n	800fede <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fedc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fee2:	1c5a      	adds	r2, r3, #1
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800feec:	b29b      	uxth	r3, r3
 800feee:	3b01      	subs	r3, #1
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	4619      	mov	r1, r3
 800fef6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d15d      	bne.n	800ffb8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	68da      	ldr	r2, [r3, #12]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f022 0220 	bic.w	r2, r2, #32
 800ff0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	68da      	ldr	r2, [r3, #12]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ff1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	695a      	ldr	r2, [r3, #20]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f022 0201 	bic.w	r2, r2, #1
 800ff2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2220      	movs	r2, #32
 800ff30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d135      	bne.n	800ffae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	330c      	adds	r3, #12
 800ff4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	e853 3f00 	ldrex	r3, [r3]
 800ff56:	613b      	str	r3, [r7, #16]
   return(result);
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f023 0310 	bic.w	r3, r3, #16
 800ff5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	330c      	adds	r3, #12
 800ff66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff68:	623a      	str	r2, [r7, #32]
 800ff6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff6c:	69f9      	ldr	r1, [r7, #28]
 800ff6e:	6a3a      	ldr	r2, [r7, #32]
 800ff70:	e841 2300 	strex	r3, r2, [r1]
 800ff74:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1e5      	bne.n	800ff48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f003 0310 	and.w	r3, r3, #16
 800ff86:	2b10      	cmp	r3, #16
 800ff88:	d10a      	bne.n	800ffa0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60fb      	str	r3, [r7, #12]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	60fb      	str	r3, [r7, #12]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	60fb      	str	r3, [r7, #12]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7ff fc48 	bl	800f83c <HAL_UARTEx_RxEventCallback>
 800ffac:	e002      	b.n	800ffb4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7f9 ff42 	bl	8009e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	e002      	b.n	800ffbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	e000      	b.n	800ffbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ffbc:	2302      	movs	r3, #2
  }
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3730      	adds	r7, #48	@ 0x30
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffcc:	b0c0      	sub	sp, #256	@ 0x100
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ffe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffe4:	68d9      	ldr	r1, [r3, #12]
 800ffe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	ea40 0301 	orr.w	r3, r0, r1
 800fff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fff6:	689a      	ldr	r2, [r3, #8]
 800fff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	431a      	orrs	r2, r3
 8010000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010004:	695b      	ldr	r3, [r3, #20]
 8010006:	431a      	orrs	r2, r3
 8010008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801000c:	69db      	ldr	r3, [r3, #28]
 801000e:	4313      	orrs	r3, r2
 8010010:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010020:	f021 010c 	bic.w	r1, r1, #12
 8010024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801002e:	430b      	orrs	r3, r1
 8010030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	695b      	ldr	r3, [r3, #20]
 801003a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801003e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010042:	6999      	ldr	r1, [r3, #24]
 8010044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	ea40 0301 	orr.w	r3, r0, r1
 801004e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	4b8f      	ldr	r3, [pc, #572]	@ (8010294 <UART_SetConfig+0x2cc>)
 8010058:	429a      	cmp	r2, r3
 801005a:	d005      	beq.n	8010068 <UART_SetConfig+0xa0>
 801005c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	4b8d      	ldr	r3, [pc, #564]	@ (8010298 <UART_SetConfig+0x2d0>)
 8010064:	429a      	cmp	r2, r3
 8010066:	d104      	bne.n	8010072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010068:	f7fd f91c 	bl	800d2a4 <HAL_RCC_GetPCLK2Freq>
 801006c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010070:	e003      	b.n	801007a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010072:	f7fd f903 	bl	800d27c <HAL_RCC_GetPCLK1Freq>
 8010076:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801007a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801007e:	69db      	ldr	r3, [r3, #28]
 8010080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010084:	f040 810c 	bne.w	80102a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801008c:	2200      	movs	r2, #0
 801008e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010092:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801009a:	4622      	mov	r2, r4
 801009c:	462b      	mov	r3, r5
 801009e:	1891      	adds	r1, r2, r2
 80100a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80100a2:	415b      	adcs	r3, r3
 80100a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80100a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80100aa:	4621      	mov	r1, r4
 80100ac:	eb12 0801 	adds.w	r8, r2, r1
 80100b0:	4629      	mov	r1, r5
 80100b2:	eb43 0901 	adc.w	r9, r3, r1
 80100b6:	f04f 0200 	mov.w	r2, #0
 80100ba:	f04f 0300 	mov.w	r3, #0
 80100be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80100c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80100c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80100ca:	4690      	mov	r8, r2
 80100cc:	4699      	mov	r9, r3
 80100ce:	4623      	mov	r3, r4
 80100d0:	eb18 0303 	adds.w	r3, r8, r3
 80100d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80100d8:	462b      	mov	r3, r5
 80100da:	eb49 0303 	adc.w	r3, r9, r3
 80100de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80100e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80100ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80100f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80100f6:	460b      	mov	r3, r1
 80100f8:	18db      	adds	r3, r3, r3
 80100fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80100fc:	4613      	mov	r3, r2
 80100fe:	eb42 0303 	adc.w	r3, r2, r3
 8010102:	657b      	str	r3, [r7, #84]	@ 0x54
 8010104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801010c:	f7f0 fdbc 	bl	8000c88 <__aeabi_uldivmod>
 8010110:	4602      	mov	r2, r0
 8010112:	460b      	mov	r3, r1
 8010114:	4b61      	ldr	r3, [pc, #388]	@ (801029c <UART_SetConfig+0x2d4>)
 8010116:	fba3 2302 	umull	r2, r3, r3, r2
 801011a:	095b      	lsrs	r3, r3, #5
 801011c:	011c      	lsls	r4, r3, #4
 801011e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010122:	2200      	movs	r2, #0
 8010124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010128:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801012c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010130:	4642      	mov	r2, r8
 8010132:	464b      	mov	r3, r9
 8010134:	1891      	adds	r1, r2, r2
 8010136:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010138:	415b      	adcs	r3, r3
 801013a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801013c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010140:	4641      	mov	r1, r8
 8010142:	eb12 0a01 	adds.w	sl, r2, r1
 8010146:	4649      	mov	r1, r9
 8010148:	eb43 0b01 	adc.w	fp, r3, r1
 801014c:	f04f 0200 	mov.w	r2, #0
 8010150:	f04f 0300 	mov.w	r3, #0
 8010154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801015c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010160:	4692      	mov	sl, r2
 8010162:	469b      	mov	fp, r3
 8010164:	4643      	mov	r3, r8
 8010166:	eb1a 0303 	adds.w	r3, sl, r3
 801016a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801016e:	464b      	mov	r3, r9
 8010170:	eb4b 0303 	adc.w	r3, fp, r3
 8010174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010184:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801018c:	460b      	mov	r3, r1
 801018e:	18db      	adds	r3, r3, r3
 8010190:	643b      	str	r3, [r7, #64]	@ 0x40
 8010192:	4613      	mov	r3, r2
 8010194:	eb42 0303 	adc.w	r3, r2, r3
 8010198:	647b      	str	r3, [r7, #68]	@ 0x44
 801019a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801019e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80101a2:	f7f0 fd71 	bl	8000c88 <__aeabi_uldivmod>
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	4611      	mov	r1, r2
 80101ac:	4b3b      	ldr	r3, [pc, #236]	@ (801029c <UART_SetConfig+0x2d4>)
 80101ae:	fba3 2301 	umull	r2, r3, r3, r1
 80101b2:	095b      	lsrs	r3, r3, #5
 80101b4:	2264      	movs	r2, #100	@ 0x64
 80101b6:	fb02 f303 	mul.w	r3, r2, r3
 80101ba:	1acb      	subs	r3, r1, r3
 80101bc:	00db      	lsls	r3, r3, #3
 80101be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80101c2:	4b36      	ldr	r3, [pc, #216]	@ (801029c <UART_SetConfig+0x2d4>)
 80101c4:	fba3 2302 	umull	r2, r3, r3, r2
 80101c8:	095b      	lsrs	r3, r3, #5
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80101d0:	441c      	add	r4, r3
 80101d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80101d6:	2200      	movs	r2, #0
 80101d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80101dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80101e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80101e4:	4642      	mov	r2, r8
 80101e6:	464b      	mov	r3, r9
 80101e8:	1891      	adds	r1, r2, r2
 80101ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80101ec:	415b      	adcs	r3, r3
 80101ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80101f4:	4641      	mov	r1, r8
 80101f6:	1851      	adds	r1, r2, r1
 80101f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80101fa:	4649      	mov	r1, r9
 80101fc:	414b      	adcs	r3, r1
 80101fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8010200:	f04f 0200 	mov.w	r2, #0
 8010204:	f04f 0300 	mov.w	r3, #0
 8010208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801020c:	4659      	mov	r1, fp
 801020e:	00cb      	lsls	r3, r1, #3
 8010210:	4651      	mov	r1, sl
 8010212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010216:	4651      	mov	r1, sl
 8010218:	00ca      	lsls	r2, r1, #3
 801021a:	4610      	mov	r0, r2
 801021c:	4619      	mov	r1, r3
 801021e:	4603      	mov	r3, r0
 8010220:	4642      	mov	r2, r8
 8010222:	189b      	adds	r3, r3, r2
 8010224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010228:	464b      	mov	r3, r9
 801022a:	460a      	mov	r2, r1
 801022c:	eb42 0303 	adc.w	r3, r2, r3
 8010230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010240:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010248:	460b      	mov	r3, r1
 801024a:	18db      	adds	r3, r3, r3
 801024c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801024e:	4613      	mov	r3, r2
 8010250:	eb42 0303 	adc.w	r3, r2, r3
 8010254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801025a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801025e:	f7f0 fd13 	bl	8000c88 <__aeabi_uldivmod>
 8010262:	4602      	mov	r2, r0
 8010264:	460b      	mov	r3, r1
 8010266:	4b0d      	ldr	r3, [pc, #52]	@ (801029c <UART_SetConfig+0x2d4>)
 8010268:	fba3 1302 	umull	r1, r3, r3, r2
 801026c:	095b      	lsrs	r3, r3, #5
 801026e:	2164      	movs	r1, #100	@ 0x64
 8010270:	fb01 f303 	mul.w	r3, r1, r3
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	00db      	lsls	r3, r3, #3
 8010278:	3332      	adds	r3, #50	@ 0x32
 801027a:	4a08      	ldr	r2, [pc, #32]	@ (801029c <UART_SetConfig+0x2d4>)
 801027c:	fba2 2303 	umull	r2, r3, r2, r3
 8010280:	095b      	lsrs	r3, r3, #5
 8010282:	f003 0207 	and.w	r2, r3, #7
 8010286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4422      	add	r2, r4
 801028e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010290:	e106      	b.n	80104a0 <UART_SetConfig+0x4d8>
 8010292:	bf00      	nop
 8010294:	40011000 	.word	0x40011000
 8010298:	40011400 	.word	0x40011400
 801029c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80102a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102a4:	2200      	movs	r2, #0
 80102a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80102aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80102ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80102b2:	4642      	mov	r2, r8
 80102b4:	464b      	mov	r3, r9
 80102b6:	1891      	adds	r1, r2, r2
 80102b8:	6239      	str	r1, [r7, #32]
 80102ba:	415b      	adcs	r3, r3
 80102bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80102be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80102c2:	4641      	mov	r1, r8
 80102c4:	1854      	adds	r4, r2, r1
 80102c6:	4649      	mov	r1, r9
 80102c8:	eb43 0501 	adc.w	r5, r3, r1
 80102cc:	f04f 0200 	mov.w	r2, #0
 80102d0:	f04f 0300 	mov.w	r3, #0
 80102d4:	00eb      	lsls	r3, r5, #3
 80102d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80102da:	00e2      	lsls	r2, r4, #3
 80102dc:	4614      	mov	r4, r2
 80102de:	461d      	mov	r5, r3
 80102e0:	4643      	mov	r3, r8
 80102e2:	18e3      	adds	r3, r4, r3
 80102e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80102e8:	464b      	mov	r3, r9
 80102ea:	eb45 0303 	adc.w	r3, r5, r3
 80102ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80102f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	2200      	movs	r2, #0
 80102fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80102fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010302:	f04f 0200 	mov.w	r2, #0
 8010306:	f04f 0300 	mov.w	r3, #0
 801030a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801030e:	4629      	mov	r1, r5
 8010310:	008b      	lsls	r3, r1, #2
 8010312:	4621      	mov	r1, r4
 8010314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010318:	4621      	mov	r1, r4
 801031a:	008a      	lsls	r2, r1, #2
 801031c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010320:	f7f0 fcb2 	bl	8000c88 <__aeabi_uldivmod>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	4b60      	ldr	r3, [pc, #384]	@ (80104ac <UART_SetConfig+0x4e4>)
 801032a:	fba3 2302 	umull	r2, r3, r3, r2
 801032e:	095b      	lsrs	r3, r3, #5
 8010330:	011c      	lsls	r4, r3, #4
 8010332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010336:	2200      	movs	r2, #0
 8010338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801033c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010344:	4642      	mov	r2, r8
 8010346:	464b      	mov	r3, r9
 8010348:	1891      	adds	r1, r2, r2
 801034a:	61b9      	str	r1, [r7, #24]
 801034c:	415b      	adcs	r3, r3
 801034e:	61fb      	str	r3, [r7, #28]
 8010350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010354:	4641      	mov	r1, r8
 8010356:	1851      	adds	r1, r2, r1
 8010358:	6139      	str	r1, [r7, #16]
 801035a:	4649      	mov	r1, r9
 801035c:	414b      	adcs	r3, r1
 801035e:	617b      	str	r3, [r7, #20]
 8010360:	f04f 0200 	mov.w	r2, #0
 8010364:	f04f 0300 	mov.w	r3, #0
 8010368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801036c:	4659      	mov	r1, fp
 801036e:	00cb      	lsls	r3, r1, #3
 8010370:	4651      	mov	r1, sl
 8010372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010376:	4651      	mov	r1, sl
 8010378:	00ca      	lsls	r2, r1, #3
 801037a:	4610      	mov	r0, r2
 801037c:	4619      	mov	r1, r3
 801037e:	4603      	mov	r3, r0
 8010380:	4642      	mov	r2, r8
 8010382:	189b      	adds	r3, r3, r2
 8010384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010388:	464b      	mov	r3, r9
 801038a:	460a      	mov	r2, r1
 801038c:	eb42 0303 	adc.w	r3, r2, r3
 8010390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801039e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80103a0:	f04f 0200 	mov.w	r2, #0
 80103a4:	f04f 0300 	mov.w	r3, #0
 80103a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80103ac:	4649      	mov	r1, r9
 80103ae:	008b      	lsls	r3, r1, #2
 80103b0:	4641      	mov	r1, r8
 80103b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80103b6:	4641      	mov	r1, r8
 80103b8:	008a      	lsls	r2, r1, #2
 80103ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80103be:	f7f0 fc63 	bl	8000c88 <__aeabi_uldivmod>
 80103c2:	4602      	mov	r2, r0
 80103c4:	460b      	mov	r3, r1
 80103c6:	4611      	mov	r1, r2
 80103c8:	4b38      	ldr	r3, [pc, #224]	@ (80104ac <UART_SetConfig+0x4e4>)
 80103ca:	fba3 2301 	umull	r2, r3, r3, r1
 80103ce:	095b      	lsrs	r3, r3, #5
 80103d0:	2264      	movs	r2, #100	@ 0x64
 80103d2:	fb02 f303 	mul.w	r3, r2, r3
 80103d6:	1acb      	subs	r3, r1, r3
 80103d8:	011b      	lsls	r3, r3, #4
 80103da:	3332      	adds	r3, #50	@ 0x32
 80103dc:	4a33      	ldr	r2, [pc, #204]	@ (80104ac <UART_SetConfig+0x4e4>)
 80103de:	fba2 2303 	umull	r2, r3, r2, r3
 80103e2:	095b      	lsrs	r3, r3, #5
 80103e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103e8:	441c      	add	r4, r3
 80103ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103ee:	2200      	movs	r2, #0
 80103f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80103f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80103f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80103f8:	4642      	mov	r2, r8
 80103fa:	464b      	mov	r3, r9
 80103fc:	1891      	adds	r1, r2, r2
 80103fe:	60b9      	str	r1, [r7, #8]
 8010400:	415b      	adcs	r3, r3
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010408:	4641      	mov	r1, r8
 801040a:	1851      	adds	r1, r2, r1
 801040c:	6039      	str	r1, [r7, #0]
 801040e:	4649      	mov	r1, r9
 8010410:	414b      	adcs	r3, r1
 8010412:	607b      	str	r3, [r7, #4]
 8010414:	f04f 0200 	mov.w	r2, #0
 8010418:	f04f 0300 	mov.w	r3, #0
 801041c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010420:	4659      	mov	r1, fp
 8010422:	00cb      	lsls	r3, r1, #3
 8010424:	4651      	mov	r1, sl
 8010426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801042a:	4651      	mov	r1, sl
 801042c:	00ca      	lsls	r2, r1, #3
 801042e:	4610      	mov	r0, r2
 8010430:	4619      	mov	r1, r3
 8010432:	4603      	mov	r3, r0
 8010434:	4642      	mov	r2, r8
 8010436:	189b      	adds	r3, r3, r2
 8010438:	66bb      	str	r3, [r7, #104]	@ 0x68
 801043a:	464b      	mov	r3, r9
 801043c:	460a      	mov	r2, r1
 801043e:	eb42 0303 	adc.w	r3, r2, r3
 8010442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	663b      	str	r3, [r7, #96]	@ 0x60
 801044e:	667a      	str	r2, [r7, #100]	@ 0x64
 8010450:	f04f 0200 	mov.w	r2, #0
 8010454:	f04f 0300 	mov.w	r3, #0
 8010458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801045c:	4649      	mov	r1, r9
 801045e:	008b      	lsls	r3, r1, #2
 8010460:	4641      	mov	r1, r8
 8010462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010466:	4641      	mov	r1, r8
 8010468:	008a      	lsls	r2, r1, #2
 801046a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801046e:	f7f0 fc0b 	bl	8000c88 <__aeabi_uldivmod>
 8010472:	4602      	mov	r2, r0
 8010474:	460b      	mov	r3, r1
 8010476:	4b0d      	ldr	r3, [pc, #52]	@ (80104ac <UART_SetConfig+0x4e4>)
 8010478:	fba3 1302 	umull	r1, r3, r3, r2
 801047c:	095b      	lsrs	r3, r3, #5
 801047e:	2164      	movs	r1, #100	@ 0x64
 8010480:	fb01 f303 	mul.w	r3, r1, r3
 8010484:	1ad3      	subs	r3, r2, r3
 8010486:	011b      	lsls	r3, r3, #4
 8010488:	3332      	adds	r3, #50	@ 0x32
 801048a:	4a08      	ldr	r2, [pc, #32]	@ (80104ac <UART_SetConfig+0x4e4>)
 801048c:	fba2 2303 	umull	r2, r3, r2, r3
 8010490:	095b      	lsrs	r3, r3, #5
 8010492:	f003 020f 	and.w	r2, r3, #15
 8010496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4422      	add	r2, r4
 801049e:	609a      	str	r2, [r3, #8]
}
 80104a0:	bf00      	nop
 80104a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80104a6:	46bd      	mov	sp, r7
 80104a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80104ac:	51eb851f 	.word	0x51eb851f

080104b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80104b0:	b084      	sub	sp, #16
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b084      	sub	sp, #16
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	f107 001c 	add.w	r0, r7, #28
 80104be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80104c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d123      	bne.n	8010512 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80104de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68db      	ldr	r3, [r3, #12]
 80104ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80104f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d105      	bne.n	8010506 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f001 fae8 	bl	8011adc <USB_CoreReset>
 801050c:	4603      	mov	r3, r0
 801050e:	73fb      	strb	r3, [r7, #15]
 8010510:	e01b      	b.n	801054a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f001 fadc 	bl	8011adc <USB_CoreReset>
 8010524:	4603      	mov	r3, r0
 8010526:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010528:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801052c:	2b00      	cmp	r3, #0
 801052e:	d106      	bne.n	801053e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010534:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	639a      	str	r2, [r3, #56]	@ 0x38
 801053c:	e005      	b.n	801054a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010542:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801054a:	7fbb      	ldrb	r3, [r7, #30]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d10b      	bne.n	8010568 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	689b      	ldr	r3, [r3, #8]
 8010554:	f043 0206 	orr.w	r2, r3, #6
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	f043 0220 	orr.w	r2, r3, #32
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010568:	7bfb      	ldrb	r3, [r7, #15]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010574:	b004      	add	sp, #16
 8010576:	4770      	bx	lr

08010578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	4613      	mov	r3, r2
 8010584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010586:	79fb      	ldrb	r3, [r7, #7]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d165      	bne.n	8010658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	4a41      	ldr	r2, [pc, #260]	@ (8010694 <USB_SetTurnaroundTime+0x11c>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d906      	bls.n	80105a2 <USB_SetTurnaroundTime+0x2a>
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	4a40      	ldr	r2, [pc, #256]	@ (8010698 <USB_SetTurnaroundTime+0x120>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d202      	bcs.n	80105a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801059c:	230f      	movs	r3, #15
 801059e:	617b      	str	r3, [r7, #20]
 80105a0:	e062      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	4a3c      	ldr	r2, [pc, #240]	@ (8010698 <USB_SetTurnaroundTime+0x120>)
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d306      	bcc.n	80105b8 <USB_SetTurnaroundTime+0x40>
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	4a3b      	ldr	r2, [pc, #236]	@ (801069c <USB_SetTurnaroundTime+0x124>)
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d202      	bcs.n	80105b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80105b2:	230e      	movs	r3, #14
 80105b4:	617b      	str	r3, [r7, #20]
 80105b6:	e057      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	4a38      	ldr	r2, [pc, #224]	@ (801069c <USB_SetTurnaroundTime+0x124>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d306      	bcc.n	80105ce <USB_SetTurnaroundTime+0x56>
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	4a37      	ldr	r2, [pc, #220]	@ (80106a0 <USB_SetTurnaroundTime+0x128>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d202      	bcs.n	80105ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80105c8:	230d      	movs	r3, #13
 80105ca:	617b      	str	r3, [r7, #20]
 80105cc:	e04c      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	4a33      	ldr	r2, [pc, #204]	@ (80106a0 <USB_SetTurnaroundTime+0x128>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d306      	bcc.n	80105e4 <USB_SetTurnaroundTime+0x6c>
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	4a32      	ldr	r2, [pc, #200]	@ (80106a4 <USB_SetTurnaroundTime+0x12c>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d802      	bhi.n	80105e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80105de:	230c      	movs	r3, #12
 80105e0:	617b      	str	r3, [r7, #20]
 80105e2:	e041      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	4a2f      	ldr	r2, [pc, #188]	@ (80106a4 <USB_SetTurnaroundTime+0x12c>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d906      	bls.n	80105fa <USB_SetTurnaroundTime+0x82>
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	4a2e      	ldr	r2, [pc, #184]	@ (80106a8 <USB_SetTurnaroundTime+0x130>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d802      	bhi.n	80105fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80105f4:	230b      	movs	r3, #11
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	e036      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	4a2a      	ldr	r2, [pc, #168]	@ (80106a8 <USB_SetTurnaroundTime+0x130>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d906      	bls.n	8010610 <USB_SetTurnaroundTime+0x98>
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	4a29      	ldr	r2, [pc, #164]	@ (80106ac <USB_SetTurnaroundTime+0x134>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d802      	bhi.n	8010610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801060a:	230a      	movs	r3, #10
 801060c:	617b      	str	r3, [r7, #20]
 801060e:	e02b      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	4a26      	ldr	r2, [pc, #152]	@ (80106ac <USB_SetTurnaroundTime+0x134>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d906      	bls.n	8010626 <USB_SetTurnaroundTime+0xae>
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	4a25      	ldr	r2, [pc, #148]	@ (80106b0 <USB_SetTurnaroundTime+0x138>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d202      	bcs.n	8010626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010620:	2309      	movs	r3, #9
 8010622:	617b      	str	r3, [r7, #20]
 8010624:	e020      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	4a21      	ldr	r2, [pc, #132]	@ (80106b0 <USB_SetTurnaroundTime+0x138>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d306      	bcc.n	801063c <USB_SetTurnaroundTime+0xc4>
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	4a20      	ldr	r2, [pc, #128]	@ (80106b4 <USB_SetTurnaroundTime+0x13c>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d802      	bhi.n	801063c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010636:	2308      	movs	r3, #8
 8010638:	617b      	str	r3, [r7, #20]
 801063a:	e015      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	4a1d      	ldr	r2, [pc, #116]	@ (80106b4 <USB_SetTurnaroundTime+0x13c>)
 8010640:	4293      	cmp	r3, r2
 8010642:	d906      	bls.n	8010652 <USB_SetTurnaroundTime+0xda>
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	4a1c      	ldr	r2, [pc, #112]	@ (80106b8 <USB_SetTurnaroundTime+0x140>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d202      	bcs.n	8010652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801064c:	2307      	movs	r3, #7
 801064e:	617b      	str	r3, [r7, #20]
 8010650:	e00a      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010652:	2306      	movs	r3, #6
 8010654:	617b      	str	r3, [r7, #20]
 8010656:	e007      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010658:	79fb      	ldrb	r3, [r7, #7]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d102      	bne.n	8010664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801065e:	2309      	movs	r3, #9
 8010660:	617b      	str	r3, [r7, #20]
 8010662:	e001      	b.n	8010668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010664:	2309      	movs	r3, #9
 8010666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	68da      	ldr	r2, [r3, #12]
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	029b      	lsls	r3, r3, #10
 801067c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010680:	431a      	orrs	r2, r3
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	371c      	adds	r7, #28
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr
 8010694:	00d8acbf 	.word	0x00d8acbf
 8010698:	00e4e1c0 	.word	0x00e4e1c0
 801069c:	00f42400 	.word	0x00f42400
 80106a0:	01067380 	.word	0x01067380
 80106a4:	011a499f 	.word	0x011a499f
 80106a8:	01312cff 	.word	0x01312cff
 80106ac:	014ca43f 	.word	0x014ca43f
 80106b0:	016e3600 	.word	0x016e3600
 80106b4:	01a6ab1f 	.word	0x01a6ab1f
 80106b8:	01e84800 	.word	0x01e84800

080106bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	f043 0201 	orr.w	r2, r3, #1
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80106de:	b480      	push	{r7}
 80106e0:	b083      	sub	sp, #12
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	689b      	ldr	r3, [r3, #8]
 80106ea:	f023 0201 	bic.w	r2, r3, #1
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	460b      	mov	r3, r1
 801070a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801070c:	2300      	movs	r3, #0
 801070e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801071c:	78fb      	ldrb	r3, [r7, #3]
 801071e:	2b01      	cmp	r3, #1
 8010720:	d115      	bne.n	801074e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801072e:	200a      	movs	r0, #10
 8010730:	f7f9 fe98 	bl	800a464 <HAL_Delay>
      ms += 10U;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	330a      	adds	r3, #10
 8010738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f001 f93f 	bl	80119be <USB_GetMode>
 8010740:	4603      	mov	r3, r0
 8010742:	2b01      	cmp	r3, #1
 8010744:	d01e      	beq.n	8010784 <USB_SetCurrentMode+0x84>
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2bc7      	cmp	r3, #199	@ 0xc7
 801074a:	d9f0      	bls.n	801072e <USB_SetCurrentMode+0x2e>
 801074c:	e01a      	b.n	8010784 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801074e:	78fb      	ldrb	r3, [r7, #3]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d115      	bne.n	8010780 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010760:	200a      	movs	r0, #10
 8010762:	f7f9 fe7f 	bl	800a464 <HAL_Delay>
      ms += 10U;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	330a      	adds	r3, #10
 801076a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f001 f926 	bl	80119be <USB_GetMode>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d005      	beq.n	8010784 <USB_SetCurrentMode+0x84>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2bc7      	cmp	r3, #199	@ 0xc7
 801077c:	d9f0      	bls.n	8010760 <USB_SetCurrentMode+0x60>
 801077e:	e001      	b.n	8010784 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	e005      	b.n	8010790 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2bc8      	cmp	r3, #200	@ 0xc8
 8010788:	d101      	bne.n	801078e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	e000      	b.n	8010790 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010798:	b084      	sub	sp, #16
 801079a:	b580      	push	{r7, lr}
 801079c:	b086      	sub	sp, #24
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
 80107a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80107a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80107aa:	2300      	movs	r3, #0
 80107ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80107b2:	2300      	movs	r3, #0
 80107b4:	613b      	str	r3, [r7, #16]
 80107b6:	e009      	b.n	80107cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	3340      	adds	r3, #64	@ 0x40
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	4413      	add	r3, r2
 80107c2:	2200      	movs	r2, #0
 80107c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	3301      	adds	r3, #1
 80107ca:	613b      	str	r3, [r7, #16]
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	2b0e      	cmp	r3, #14
 80107d0:	d9f2      	bls.n	80107b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80107d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d11c      	bne.n	8010814 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107e8:	f043 0302 	orr.w	r3, r3, #2
 80107ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801080a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	639a      	str	r2, [r3, #56]	@ 0x38
 8010812:	e00b      	b.n	801082c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010818:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010824:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010832:	461a      	mov	r2, r3
 8010834:	2300      	movs	r3, #0
 8010836:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010838:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801083c:	2b01      	cmp	r3, #1
 801083e:	d10d      	bne.n	801085c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010844:	2b00      	cmp	r3, #0
 8010846:	d104      	bne.n	8010852 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010848:	2100      	movs	r1, #0
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 f968 	bl	8010b20 <USB_SetDevSpeed>
 8010850:	e008      	b.n	8010864 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010852:	2101      	movs	r1, #1
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 f963 	bl	8010b20 <USB_SetDevSpeed>
 801085a:	e003      	b.n	8010864 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801085c:	2103      	movs	r1, #3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 f95e 	bl	8010b20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010864:	2110      	movs	r1, #16
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f8fa 	bl	8010a60 <USB_FlushTxFifo>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8010872:	2301      	movs	r3, #1
 8010874:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 f924 	bl	8010ac4 <USB_FlushRxFifo>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801088c:	461a      	mov	r2, r3
 801088e:	2300      	movs	r3, #0
 8010890:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010898:	461a      	mov	r2, r3
 801089a:	2300      	movs	r3, #0
 801089c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108a4:	461a      	mov	r2, r3
 80108a6:	2300      	movs	r3, #0
 80108a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108aa:	2300      	movs	r3, #0
 80108ac:	613b      	str	r3, [r7, #16]
 80108ae:	e043      	b.n	8010938 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	015a      	lsls	r2, r3, #5
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4413      	add	r3, r2
 80108b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80108c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108c6:	d118      	bne.n	80108fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d10a      	bne.n	80108e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	015a      	lsls	r2, r3, #5
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	4413      	add	r3, r2
 80108d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108da:	461a      	mov	r2, r3
 80108dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	e013      	b.n	801090c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	015a      	lsls	r2, r3, #5
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	4413      	add	r3, r2
 80108ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108f0:	461a      	mov	r2, r3
 80108f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80108f6:	6013      	str	r3, [r2, #0]
 80108f8:	e008      	b.n	801090c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	015a      	lsls	r2, r3, #5
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	4413      	add	r3, r2
 8010902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010906:	461a      	mov	r2, r3
 8010908:	2300      	movs	r3, #0
 801090a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	015a      	lsls	r2, r3, #5
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	4413      	add	r3, r2
 8010914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010918:	461a      	mov	r2, r3
 801091a:	2300      	movs	r3, #0
 801091c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	015a      	lsls	r2, r3, #5
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	4413      	add	r3, r2
 8010926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801092a:	461a      	mov	r2, r3
 801092c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010930:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	3301      	adds	r3, #1
 8010936:	613b      	str	r3, [r7, #16]
 8010938:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801093c:	461a      	mov	r2, r3
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	4293      	cmp	r3, r2
 8010942:	d3b5      	bcc.n	80108b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010944:	2300      	movs	r3, #0
 8010946:	613b      	str	r3, [r7, #16]
 8010948:	e043      	b.n	80109d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	015a      	lsls	r2, r3, #5
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	4413      	add	r3, r2
 8010952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801095c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010960:	d118      	bne.n	8010994 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d10a      	bne.n	801097e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	015a      	lsls	r2, r3, #5
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	4413      	add	r3, r2
 8010970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010974:	461a      	mov	r2, r3
 8010976:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801097a:	6013      	str	r3, [r2, #0]
 801097c:	e013      	b.n	80109a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	015a      	lsls	r2, r3, #5
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	4413      	add	r3, r2
 8010986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801098a:	461a      	mov	r2, r3
 801098c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010990:	6013      	str	r3, [r2, #0]
 8010992:	e008      	b.n	80109a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	015a      	lsls	r2, r3, #5
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	4413      	add	r3, r2
 801099c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109a0:	461a      	mov	r2, r3
 80109a2:	2300      	movs	r3, #0
 80109a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	015a      	lsls	r2, r3, #5
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4413      	add	r3, r2
 80109ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109b2:	461a      	mov	r2, r3
 80109b4:	2300      	movs	r3, #0
 80109b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	015a      	lsls	r2, r3, #5
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	4413      	add	r3, r2
 80109c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109c4:	461a      	mov	r2, r3
 80109c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80109ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	3301      	adds	r3, #1
 80109d0:	613b      	str	r3, [r7, #16]
 80109d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80109d6:	461a      	mov	r2, r3
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	4293      	cmp	r3, r2
 80109dc:	d3b5      	bcc.n	801094a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109e4:	691b      	ldr	r3, [r3, #16]
 80109e6:	68fa      	ldr	r2, [r7, #12]
 80109e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80109ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80109f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80109fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010a00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d105      	bne.n	8010a14 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	f043 0210 	orr.w	r2, r3, #16
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	699a      	ldr	r2, [r3, #24]
 8010a18:	4b10      	ldr	r3, [pc, #64]	@ (8010a5c <USB_DevInit+0x2c4>)
 8010a1a:	4313      	orrs	r3, r2
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010a20:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d005      	beq.n	8010a34 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	699b      	ldr	r3, [r3, #24]
 8010a2c:	f043 0208 	orr.w	r2, r3, #8
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010a34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d107      	bne.n	8010a4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	699b      	ldr	r3, [r3, #24]
 8010a40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010a44:	f043 0304 	orr.w	r3, r3, #4
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3718      	adds	r7, #24
 8010a52:	46bd      	mov	sp, r7
 8010a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a58:	b004      	add	sp, #16
 8010a5a:	4770      	bx	lr
 8010a5c:	803c3800 	.word	0x803c3800

08010a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	3301      	adds	r3, #1
 8010a72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a7a:	d901      	bls.n	8010a80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e01b      	b.n	8010ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	daf2      	bge.n	8010a6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	019b      	lsls	r3, r3, #6
 8010a90:	f043 0220 	orr.w	r2, r3, #32
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010aa4:	d901      	bls.n	8010aaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	e006      	b.n	8010ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	f003 0320 	and.w	r3, r3, #32
 8010ab2:	2b20      	cmp	r3, #32
 8010ab4:	d0f0      	beq.n	8010a98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010ab6:	2300      	movs	r3, #0
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3714      	adds	r7, #20
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010adc:	d901      	bls.n	8010ae2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010ade:	2303      	movs	r3, #3
 8010ae0:	e018      	b.n	8010b14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	daf2      	bge.n	8010ad0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010aea:	2300      	movs	r3, #0
 8010aec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2210      	movs	r2, #16
 8010af2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	3301      	adds	r3, #1
 8010af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b00:	d901      	bls.n	8010b06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010b02:	2303      	movs	r3, #3
 8010b04:	e006      	b.n	8010b14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	f003 0310 	and.w	r3, r3, #16
 8010b0e:	2b10      	cmp	r3, #16
 8010b10:	d0f0      	beq.n	8010af4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010b12:	2300      	movs	r3, #0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3714      	adds	r7, #20
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b085      	sub	sp, #20
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	460b      	mov	r3, r1
 8010b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	78fb      	ldrb	r3, [r7, #3]
 8010b3a:	68f9      	ldr	r1, [r7, #12]
 8010b3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b40:	4313      	orrs	r3, r2
 8010b42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010b44:	2300      	movs	r3, #0
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b087      	sub	sp, #28
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	f003 0306 	and.w	r3, r3, #6
 8010b6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d102      	bne.n	8010b78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010b72:	2300      	movs	r3, #0
 8010b74:	75fb      	strb	r3, [r7, #23]
 8010b76:	e00a      	b.n	8010b8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d002      	beq.n	8010b84 <USB_GetDevSpeed+0x32>
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2b06      	cmp	r3, #6
 8010b82:	d102      	bne.n	8010b8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010b84:	2302      	movs	r3, #2
 8010b86:	75fb      	strb	r3, [r7, #23]
 8010b88:	e001      	b.n	8010b8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010b8a:	230f      	movs	r3, #15
 8010b8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	371c      	adds	r7, #28
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	785b      	ldrb	r3, [r3, #1]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d13a      	bne.n	8010c2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bbe:	69da      	ldr	r2, [r3, #28]
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f003 030f 	and.w	r3, r3, #15
 8010bc8:	2101      	movs	r1, #1
 8010bca:	fa01 f303 	lsl.w	r3, r1, r3
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	68f9      	ldr	r1, [r7, #12]
 8010bd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	015a      	lsls	r2, r3, #5
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	4413      	add	r3, r2
 8010be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d155      	bne.n	8010c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	015a      	lsls	r2, r3, #5
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	689b      	ldr	r3, [r3, #8]
 8010c02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	791b      	ldrb	r3, [r3, #4]
 8010c0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010c0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	059b      	lsls	r3, r3, #22
 8010c12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010c14:	4313      	orrs	r3, r2
 8010c16:	68ba      	ldr	r2, [r7, #8]
 8010c18:	0151      	lsls	r1, r2, #5
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	440a      	add	r2, r1
 8010c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c2a:	6013      	str	r3, [r2, #0]
 8010c2c:	e036      	b.n	8010c9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c34:	69da      	ldr	r2, [r3, #28]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	f003 030f 	and.w	r3, r3, #15
 8010c3e:	2101      	movs	r1, #1
 8010c40:	fa01 f303 	lsl.w	r3, r1, r3
 8010c44:	041b      	lsls	r3, r3, #16
 8010c46:	68f9      	ldr	r1, [r7, #12]
 8010c48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	015a      	lsls	r2, r3, #5
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	4413      	add	r3, r2
 8010c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d11a      	bne.n	8010c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	015a      	lsls	r2, r3, #5
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	689b      	ldr	r3, [r3, #8]
 8010c78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	791b      	ldrb	r3, [r3, #4]
 8010c80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010c82:	430b      	orrs	r3, r1
 8010c84:	4313      	orrs	r3, r2
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	0151      	lsls	r1, r2, #5
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	440a      	add	r2, r1
 8010c8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010c9c:	2300      	movs	r3, #0
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
	...

08010cac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	785b      	ldrb	r3, [r3, #1]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d161      	bne.n	8010d8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	015a      	lsls	r2, r3, #5
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	4413      	add	r3, r2
 8010cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cde:	d11f      	bne.n	8010d20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	015a      	lsls	r2, r3, #5
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68ba      	ldr	r2, [r7, #8]
 8010cf0:	0151      	lsls	r1, r2, #5
 8010cf2:	68fa      	ldr	r2, [r7, #12]
 8010cf4:	440a      	add	r2, r1
 8010cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010cfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	015a      	lsls	r2, r3, #5
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	4413      	add	r3, r2
 8010d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	68ba      	ldr	r2, [r7, #8]
 8010d10:	0151      	lsls	r1, r2, #5
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	440a      	add	r2, r1
 8010d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	f003 030f 	and.w	r3, r3, #15
 8010d30:	2101      	movs	r1, #1
 8010d32:	fa01 f303 	lsl.w	r3, r1, r3
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	43db      	mvns	r3, r3
 8010d3a:	68f9      	ldr	r1, [r7, #12]
 8010d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d40:	4013      	ands	r3, r2
 8010d42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d4a:	69da      	ldr	r2, [r3, #28]
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	f003 030f 	and.w	r3, r3, #15
 8010d54:	2101      	movs	r1, #1
 8010d56:	fa01 f303 	lsl.w	r3, r1, r3
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	43db      	mvns	r3, r3
 8010d5e:	68f9      	ldr	r1, [r7, #12]
 8010d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d64:	4013      	ands	r3, r2
 8010d66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	015a      	lsls	r2, r3, #5
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	4413      	add	r3, r2
 8010d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	0159      	lsls	r1, r3, #5
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	440b      	add	r3, r1
 8010d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d82:	4619      	mov	r1, r3
 8010d84:	4b35      	ldr	r3, [pc, #212]	@ (8010e5c <USB_DeactivateEndpoint+0x1b0>)
 8010d86:	4013      	ands	r3, r2
 8010d88:	600b      	str	r3, [r1, #0]
 8010d8a:	e060      	b.n	8010e4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	015a      	lsls	r2, r3, #5
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	4413      	add	r3, r2
 8010d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010da2:	d11f      	bne.n	8010de4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	015a      	lsls	r2, r3, #5
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	4413      	add	r3, r2
 8010dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	0151      	lsls	r1, r2, #5
 8010db6:	68fa      	ldr	r2, [r7, #12]
 8010db8:	440a      	add	r2, r1
 8010dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010dbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010dc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	015a      	lsls	r2, r3, #5
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	4413      	add	r3, r2
 8010dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	0151      	lsls	r1, r2, #5
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	440a      	add	r2, r1
 8010dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010dde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010de2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	f003 030f 	and.w	r3, r3, #15
 8010df4:	2101      	movs	r1, #1
 8010df6:	fa01 f303 	lsl.w	r3, r1, r3
 8010dfa:	041b      	lsls	r3, r3, #16
 8010dfc:	43db      	mvns	r3, r3
 8010dfe:	68f9      	ldr	r1, [r7, #12]
 8010e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010e04:	4013      	ands	r3, r2
 8010e06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e0e:	69da      	ldr	r2, [r3, #28]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	f003 030f 	and.w	r3, r3, #15
 8010e18:	2101      	movs	r1, #1
 8010e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010e1e:	041b      	lsls	r3, r3, #16
 8010e20:	43db      	mvns	r3, r3
 8010e22:	68f9      	ldr	r1, [r7, #12]
 8010e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010e28:	4013      	ands	r3, r2
 8010e2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	015a      	lsls	r2, r3, #5
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	0159      	lsls	r1, r3, #5
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	440b      	add	r3, r1
 8010e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e46:	4619      	mov	r1, r3
 8010e48:	4b05      	ldr	r3, [pc, #20]	@ (8010e60 <USB_DeactivateEndpoint+0x1b4>)
 8010e4a:	4013      	ands	r3, r2
 8010e4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010e4e:	2300      	movs	r3, #0
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	ec337800 	.word	0xec337800
 8010e60:	eff37800 	.word	0xeff37800

08010e64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b08a      	sub	sp, #40	@ 0x28
 8010e68:	af02      	add	r7, sp, #8
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	4613      	mov	r3, r2
 8010e70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	785b      	ldrb	r3, [r3, #1]
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	f040 817f 	bne.w	8011184 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d132      	bne.n	8010ef4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	015a      	lsls	r2, r3, #5
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	4413      	add	r3, r2
 8010e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	69ba      	ldr	r2, [r7, #24]
 8010e9e:	0151      	lsls	r1, r2, #5
 8010ea0:	69fa      	ldr	r2, [r7, #28]
 8010ea2:	440a      	add	r2, r1
 8010ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ea8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010eac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010eb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	015a      	lsls	r2, r3, #5
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	4413      	add	r3, r2
 8010eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	69ba      	ldr	r2, [r7, #24]
 8010ec2:	0151      	lsls	r1, r2, #5
 8010ec4:	69fa      	ldr	r2, [r7, #28]
 8010ec6:	440a      	add	r2, r1
 8010ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ecc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	015a      	lsls	r2, r3, #5
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	4413      	add	r3, r2
 8010eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ede:	691b      	ldr	r3, [r3, #16]
 8010ee0:	69ba      	ldr	r2, [r7, #24]
 8010ee2:	0151      	lsls	r1, r2, #5
 8010ee4:	69fa      	ldr	r2, [r7, #28]
 8010ee6:	440a      	add	r2, r1
 8010ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010eec:	0cdb      	lsrs	r3, r3, #19
 8010eee:	04db      	lsls	r3, r3, #19
 8010ef0:	6113      	str	r3, [r2, #16]
 8010ef2:	e097      	b.n	8011024 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	015a      	lsls	r2, r3, #5
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	4413      	add	r3, r2
 8010efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	69ba      	ldr	r2, [r7, #24]
 8010f04:	0151      	lsls	r1, r2, #5
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	440a      	add	r2, r1
 8010f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f0e:	0cdb      	lsrs	r3, r3, #19
 8010f10:	04db      	lsls	r3, r3, #19
 8010f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	015a      	lsls	r2, r3, #5
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	4413      	add	r3, r2
 8010f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	69ba      	ldr	r2, [r7, #24]
 8010f24:	0151      	lsls	r1, r2, #5
 8010f26:	69fa      	ldr	r2, [r7, #28]
 8010f28:	440a      	add	r2, r1
 8010f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010f32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010f36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d11a      	bne.n	8010f74 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	691a      	ldr	r2, [r3, #16]
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d903      	bls.n	8010f52 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	689a      	ldr	r2, [r3, #8]
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	015a      	lsls	r2, r3, #5
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	4413      	add	r3, r2
 8010f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	69ba      	ldr	r2, [r7, #24]
 8010f62:	0151      	lsls	r1, r2, #5
 8010f64:	69fa      	ldr	r2, [r7, #28]
 8010f66:	440a      	add	r2, r1
 8010f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010f70:	6113      	str	r3, [r2, #16]
 8010f72:	e044      	b.n	8010ffe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	691a      	ldr	r2, [r3, #16]
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	4413      	add	r3, r2
 8010f7e:	1e5a      	subs	r2, r3, #1
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f88:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	015a      	lsls	r2, r3, #5
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	4413      	add	r3, r2
 8010f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f96:	691a      	ldr	r2, [r3, #16]
 8010f98:	8afb      	ldrh	r3, [r7, #22]
 8010f9a:	04d9      	lsls	r1, r3, #19
 8010f9c:	4ba4      	ldr	r3, [pc, #656]	@ (8011230 <USB_EPStartXfer+0x3cc>)
 8010f9e:	400b      	ands	r3, r1
 8010fa0:	69b9      	ldr	r1, [r7, #24]
 8010fa2:	0148      	lsls	r0, r1, #5
 8010fa4:	69f9      	ldr	r1, [r7, #28]
 8010fa6:	4401      	add	r1, r0
 8010fa8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010fac:	4313      	orrs	r3, r2
 8010fae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	791b      	ldrb	r3, [r3, #4]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d122      	bne.n	8010ffe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	015a      	lsls	r2, r3, #5
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	69ba      	ldr	r2, [r7, #24]
 8010fc8:	0151      	lsls	r1, r2, #5
 8010fca:	69fa      	ldr	r2, [r7, #28]
 8010fcc:	440a      	add	r2, r1
 8010fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010fd2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010fd6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	015a      	lsls	r2, r3, #5
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	4413      	add	r3, r2
 8010fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fe4:	691a      	ldr	r2, [r3, #16]
 8010fe6:	8afb      	ldrh	r3, [r7, #22]
 8010fe8:	075b      	lsls	r3, r3, #29
 8010fea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010fee:	69b9      	ldr	r1, [r7, #24]
 8010ff0:	0148      	lsls	r0, r1, #5
 8010ff2:	69f9      	ldr	r1, [r7, #28]
 8010ff4:	4401      	add	r1, r0
 8010ff6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	015a      	lsls	r2, r3, #5
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	4413      	add	r3, r2
 8011006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801100a:	691a      	ldr	r2, [r3, #16]
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011014:	69b9      	ldr	r1, [r7, #24]
 8011016:	0148      	lsls	r0, r1, #5
 8011018:	69f9      	ldr	r1, [r7, #28]
 801101a:	4401      	add	r1, r0
 801101c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011020:	4313      	orrs	r3, r2
 8011022:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011024:	79fb      	ldrb	r3, [r7, #7]
 8011026:	2b01      	cmp	r3, #1
 8011028:	d14b      	bne.n	80110c2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	69db      	ldr	r3, [r3, #28]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d009      	beq.n	8011046 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	015a      	lsls	r2, r3, #5
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	4413      	add	r3, r2
 801103a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801103e:	461a      	mov	r2, r3
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	69db      	ldr	r3, [r3, #28]
 8011044:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	791b      	ldrb	r3, [r3, #4]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d128      	bne.n	80110a0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801105a:	2b00      	cmp	r3, #0
 801105c:	d110      	bne.n	8011080 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	015a      	lsls	r2, r3, #5
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	4413      	add	r3, r2
 8011066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	0151      	lsls	r1, r2, #5
 8011070:	69fa      	ldr	r2, [r7, #28]
 8011072:	440a      	add	r2, r1
 8011074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011078:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801107c:	6013      	str	r3, [r2, #0]
 801107e:	e00f      	b.n	80110a0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	015a      	lsls	r2, r3, #5
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	4413      	add	r3, r2
 8011088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	69ba      	ldr	r2, [r7, #24]
 8011090:	0151      	lsls	r1, r2, #5
 8011092:	69fa      	ldr	r2, [r7, #28]
 8011094:	440a      	add	r2, r1
 8011096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801109a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801109e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	015a      	lsls	r2, r3, #5
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	4413      	add	r3, r2
 80110a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	69ba      	ldr	r2, [r7, #24]
 80110b0:	0151      	lsls	r1, r2, #5
 80110b2:	69fa      	ldr	r2, [r7, #28]
 80110b4:	440a      	add	r2, r1
 80110b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80110be:	6013      	str	r3, [r2, #0]
 80110c0:	e166      	b.n	8011390 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	015a      	lsls	r2, r3, #5
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	4413      	add	r3, r2
 80110ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	69ba      	ldr	r2, [r7, #24]
 80110d2:	0151      	lsls	r1, r2, #5
 80110d4:	69fa      	ldr	r2, [r7, #28]
 80110d6:	440a      	add	r2, r1
 80110d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80110e0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	791b      	ldrb	r3, [r3, #4]
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d015      	beq.n	8011116 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f000 814e 	beq.w	8011390 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f003 030f 	and.w	r3, r3, #15
 8011104:	2101      	movs	r1, #1
 8011106:	fa01 f303 	lsl.w	r3, r1, r3
 801110a:	69f9      	ldr	r1, [r7, #28]
 801110c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011110:	4313      	orrs	r3, r2
 8011112:	634b      	str	r3, [r1, #52]	@ 0x34
 8011114:	e13c      	b.n	8011390 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011116:	69fb      	ldr	r3, [r7, #28]
 8011118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011122:	2b00      	cmp	r3, #0
 8011124:	d110      	bne.n	8011148 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	015a      	lsls	r2, r3, #5
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	4413      	add	r3, r2
 801112e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	69ba      	ldr	r2, [r7, #24]
 8011136:	0151      	lsls	r1, r2, #5
 8011138:	69fa      	ldr	r2, [r7, #28]
 801113a:	440a      	add	r2, r1
 801113c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011140:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011144:	6013      	str	r3, [r2, #0]
 8011146:	e00f      	b.n	8011168 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011148:	69bb      	ldr	r3, [r7, #24]
 801114a:	015a      	lsls	r2, r3, #5
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	4413      	add	r3, r2
 8011150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	69ba      	ldr	r2, [r7, #24]
 8011158:	0151      	lsls	r1, r2, #5
 801115a:	69fa      	ldr	r2, [r7, #28]
 801115c:	440a      	add	r2, r1
 801115e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011166:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	68d9      	ldr	r1, [r3, #12]
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	781a      	ldrb	r2, [r3, #0]
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	691b      	ldr	r3, [r3, #16]
 8011174:	b298      	uxth	r0, r3
 8011176:	79fb      	ldrb	r3, [r7, #7]
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	4603      	mov	r3, r0
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f000 f9b9 	bl	80114f4 <USB_WritePacket>
 8011182:	e105      	b.n	8011390 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	015a      	lsls	r2, r3, #5
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	4413      	add	r3, r2
 801118c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	69ba      	ldr	r2, [r7, #24]
 8011194:	0151      	lsls	r1, r2, #5
 8011196:	69fa      	ldr	r2, [r7, #28]
 8011198:	440a      	add	r2, r1
 801119a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801119e:	0cdb      	lsrs	r3, r3, #19
 80111a0:	04db      	lsls	r3, r3, #19
 80111a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	015a      	lsls	r2, r3, #5
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	4413      	add	r3, r2
 80111ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111b0:	691b      	ldr	r3, [r3, #16]
 80111b2:	69ba      	ldr	r2, [r7, #24]
 80111b4:	0151      	lsls	r1, r2, #5
 80111b6:	69fa      	ldr	r2, [r7, #28]
 80111b8:	440a      	add	r2, r1
 80111ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80111c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80111c6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d132      	bne.n	8011234 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	691b      	ldr	r3, [r3, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d003      	beq.n	80111de <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	689a      	ldr	r2, [r3, #8]
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	689a      	ldr	r2, [r3, #8]
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80111e6:	69bb      	ldr	r3, [r7, #24]
 80111e8:	015a      	lsls	r2, r3, #5
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	4413      	add	r3, r2
 80111ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111f2:	691a      	ldr	r2, [r3, #16]
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	6a1b      	ldr	r3, [r3, #32]
 80111f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80111fc:	69b9      	ldr	r1, [r7, #24]
 80111fe:	0148      	lsls	r0, r1, #5
 8011200:	69f9      	ldr	r1, [r7, #28]
 8011202:	4401      	add	r1, r0
 8011204:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011208:	4313      	orrs	r3, r2
 801120a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	015a      	lsls	r2, r3, #5
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	4413      	add	r3, r2
 8011214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011218:	691b      	ldr	r3, [r3, #16]
 801121a:	69ba      	ldr	r2, [r7, #24]
 801121c:	0151      	lsls	r1, r2, #5
 801121e:	69fa      	ldr	r2, [r7, #28]
 8011220:	440a      	add	r2, r1
 8011222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011226:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801122a:	6113      	str	r3, [r2, #16]
 801122c:	e062      	b.n	80112f4 <USB_EPStartXfer+0x490>
 801122e:	bf00      	nop
 8011230:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	691b      	ldr	r3, [r3, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d123      	bne.n	8011284 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	015a      	lsls	r2, r3, #5
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	4413      	add	r3, r2
 8011244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011248:	691a      	ldr	r2, [r3, #16]
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011252:	69b9      	ldr	r1, [r7, #24]
 8011254:	0148      	lsls	r0, r1, #5
 8011256:	69f9      	ldr	r1, [r7, #28]
 8011258:	4401      	add	r1, r0
 801125a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801125e:	4313      	orrs	r3, r2
 8011260:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	015a      	lsls	r2, r3, #5
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	4413      	add	r3, r2
 801126a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801126e:	691b      	ldr	r3, [r3, #16]
 8011270:	69ba      	ldr	r2, [r7, #24]
 8011272:	0151      	lsls	r1, r2, #5
 8011274:	69fa      	ldr	r2, [r7, #28]
 8011276:	440a      	add	r2, r1
 8011278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801127c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011280:	6113      	str	r3, [r2, #16]
 8011282:	e037      	b.n	80112f4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	691a      	ldr	r2, [r3, #16]
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	4413      	add	r3, r2
 801128e:	1e5a      	subs	r2, r3, #1
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	689b      	ldr	r3, [r3, #8]
 8011294:	fbb2 f3f3 	udiv	r3, r2, r3
 8011298:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	8afa      	ldrh	r2, [r7, #22]
 80112a0:	fb03 f202 	mul.w	r2, r3, r2
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	015a      	lsls	r2, r3, #5
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	4413      	add	r3, r2
 80112b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112b4:	691a      	ldr	r2, [r3, #16]
 80112b6:	8afb      	ldrh	r3, [r7, #22]
 80112b8:	04d9      	lsls	r1, r3, #19
 80112ba:	4b38      	ldr	r3, [pc, #224]	@ (801139c <USB_EPStartXfer+0x538>)
 80112bc:	400b      	ands	r3, r1
 80112be:	69b9      	ldr	r1, [r7, #24]
 80112c0:	0148      	lsls	r0, r1, #5
 80112c2:	69f9      	ldr	r1, [r7, #28]
 80112c4:	4401      	add	r1, r0
 80112c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80112ca:	4313      	orrs	r3, r2
 80112cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	015a      	lsls	r2, r3, #5
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	4413      	add	r3, r2
 80112d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112da:	691a      	ldr	r2, [r3, #16]
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	6a1b      	ldr	r3, [r3, #32]
 80112e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80112e4:	69b9      	ldr	r1, [r7, #24]
 80112e6:	0148      	lsls	r0, r1, #5
 80112e8:	69f9      	ldr	r1, [r7, #28]
 80112ea:	4401      	add	r1, r0
 80112ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80112f0:	4313      	orrs	r3, r2
 80112f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80112f4:	79fb      	ldrb	r3, [r7, #7]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d10d      	bne.n	8011316 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d009      	beq.n	8011316 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	68d9      	ldr	r1, [r3, #12]
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	015a      	lsls	r2, r3, #5
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	4413      	add	r3, r2
 801130e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011312:	460a      	mov	r2, r1
 8011314:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	791b      	ldrb	r3, [r3, #4]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d128      	bne.n	8011370 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801132a:	2b00      	cmp	r3, #0
 801132c:	d110      	bne.n	8011350 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801132e:	69bb      	ldr	r3, [r7, #24]
 8011330:	015a      	lsls	r2, r3, #5
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	4413      	add	r3, r2
 8011336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	69ba      	ldr	r2, [r7, #24]
 801133e:	0151      	lsls	r1, r2, #5
 8011340:	69fa      	ldr	r2, [r7, #28]
 8011342:	440a      	add	r2, r1
 8011344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011348:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801134c:	6013      	str	r3, [r2, #0]
 801134e:	e00f      	b.n	8011370 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	015a      	lsls	r2, r3, #5
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	4413      	add	r3, r2
 8011358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	69ba      	ldr	r2, [r7, #24]
 8011360:	0151      	lsls	r1, r2, #5
 8011362:	69fa      	ldr	r2, [r7, #28]
 8011364:	440a      	add	r2, r1
 8011366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801136a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801136e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	015a      	lsls	r2, r3, #5
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	4413      	add	r3, r2
 8011378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	69ba      	ldr	r2, [r7, #24]
 8011380:	0151      	lsls	r1, r2, #5
 8011382:	69fa      	ldr	r2, [r7, #28]
 8011384:	440a      	add	r2, r1
 8011386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801138a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801138e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011390:	2300      	movs	r3, #0
}
 8011392:	4618      	mov	r0, r3
 8011394:	3720      	adds	r7, #32
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	1ff80000 	.word	0x1ff80000

080113a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b087      	sub	sp, #28
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80113aa:	2300      	movs	r3, #0
 80113ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	785b      	ldrb	r3, [r3, #1]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d14a      	bne.n	8011454 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	015a      	lsls	r2, r3, #5
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	4413      	add	r3, r2
 80113c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113d6:	f040 8086 	bne.w	80114e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	015a      	lsls	r2, r3, #5
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	4413      	add	r3, r2
 80113e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	683a      	ldr	r2, [r7, #0]
 80113ec:	7812      	ldrb	r2, [r2, #0]
 80113ee:	0151      	lsls	r1, r2, #5
 80113f0:	693a      	ldr	r2, [r7, #16]
 80113f2:	440a      	add	r2, r1
 80113f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80113fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	015a      	lsls	r2, r3, #5
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	4413      	add	r3, r2
 8011408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	683a      	ldr	r2, [r7, #0]
 8011410:	7812      	ldrb	r2, [r2, #0]
 8011412:	0151      	lsls	r1, r2, #5
 8011414:	693a      	ldr	r2, [r7, #16]
 8011416:	440a      	add	r2, r1
 8011418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801141c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011420:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	3301      	adds	r3, #1
 8011426:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801142e:	4293      	cmp	r3, r2
 8011430:	d902      	bls.n	8011438 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	75fb      	strb	r3, [r7, #23]
          break;
 8011436:	e056      	b.n	80114e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	015a      	lsls	r2, r3, #5
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	4413      	add	r3, r2
 8011442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801144c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011450:	d0e7      	beq.n	8011422 <USB_EPStopXfer+0x82>
 8011452:	e048      	b.n	80114e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	015a      	lsls	r2, r3, #5
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	4413      	add	r3, r2
 801145e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801146c:	d13b      	bne.n	80114e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	015a      	lsls	r2, r3, #5
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	4413      	add	r3, r2
 8011478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	7812      	ldrb	r2, [r2, #0]
 8011482:	0151      	lsls	r1, r2, #5
 8011484:	693a      	ldr	r2, [r7, #16]
 8011486:	440a      	add	r2, r1
 8011488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801148c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011490:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	015a      	lsls	r2, r3, #5
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	4413      	add	r3, r2
 801149c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	683a      	ldr	r2, [r7, #0]
 80114a4:	7812      	ldrb	r2, [r2, #0]
 80114a6:	0151      	lsls	r1, r2, #5
 80114a8:	693a      	ldr	r2, [r7, #16]
 80114aa:	440a      	add	r2, r1
 80114ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	3301      	adds	r3, #1
 80114ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80114c2:	4293      	cmp	r3, r2
 80114c4:	d902      	bls.n	80114cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	75fb      	strb	r3, [r7, #23]
          break;
 80114ca:	e00c      	b.n	80114e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	015a      	lsls	r2, r3, #5
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	4413      	add	r3, r2
 80114d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80114e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80114e4:	d0e7      	beq.n	80114b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80114e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	371c      	adds	r7, #28
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b089      	sub	sp, #36	@ 0x24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	4611      	mov	r1, r2
 8011500:	461a      	mov	r2, r3
 8011502:	460b      	mov	r3, r1
 8011504:	71fb      	strb	r3, [r7, #7]
 8011506:	4613      	mov	r3, r2
 8011508:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011516:	2b00      	cmp	r3, #0
 8011518:	d123      	bne.n	8011562 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801151a:	88bb      	ldrh	r3, [r7, #4]
 801151c:	3303      	adds	r3, #3
 801151e:	089b      	lsrs	r3, r3, #2
 8011520:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011522:	2300      	movs	r3, #0
 8011524:	61bb      	str	r3, [r7, #24]
 8011526:	e018      	b.n	801155a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011528:	79fb      	ldrb	r3, [r7, #7]
 801152a:	031a      	lsls	r2, r3, #12
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	4413      	add	r3, r2
 8011530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011534:	461a      	mov	r2, r3
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	3301      	adds	r3, #1
 8011540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	3301      	adds	r3, #1
 8011546:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	3301      	adds	r3, #1
 801154c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801154e:	69fb      	ldr	r3, [r7, #28]
 8011550:	3301      	adds	r3, #1
 8011552:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	3301      	adds	r3, #1
 8011558:	61bb      	str	r3, [r7, #24]
 801155a:	69ba      	ldr	r2, [r7, #24]
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	429a      	cmp	r2, r3
 8011560:	d3e2      	bcc.n	8011528 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011562:	2300      	movs	r3, #0
}
 8011564:	4618      	mov	r0, r3
 8011566:	3724      	adds	r7, #36	@ 0x24
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011570:	b480      	push	{r7}
 8011572:	b08b      	sub	sp, #44	@ 0x2c
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	4613      	mov	r3, r2
 801157c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011586:	88fb      	ldrh	r3, [r7, #6]
 8011588:	089b      	lsrs	r3, r3, #2
 801158a:	b29b      	uxth	r3, r3
 801158c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801158e:	88fb      	ldrh	r3, [r7, #6]
 8011590:	f003 0303 	and.w	r3, r3, #3
 8011594:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011596:	2300      	movs	r3, #0
 8011598:	623b      	str	r3, [r7, #32]
 801159a:	e014      	b.n	80115c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80115a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115aa:	3301      	adds	r3, #1
 80115ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	3301      	adds	r3, #1
 80115b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80115b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b6:	3301      	adds	r3, #1
 80115b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80115ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115bc:	3301      	adds	r3, #1
 80115be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80115c0:	6a3b      	ldr	r3, [r7, #32]
 80115c2:	3301      	adds	r3, #1
 80115c4:	623b      	str	r3, [r7, #32]
 80115c6:	6a3a      	ldr	r2, [r7, #32]
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d3e6      	bcc.n	801159c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80115ce:	8bfb      	ldrh	r3, [r7, #30]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d01e      	beq.n	8011612 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80115d4:	2300      	movs	r3, #0
 80115d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80115de:	461a      	mov	r2, r3
 80115e0:	f107 0310 	add.w	r3, r7, #16
 80115e4:	6812      	ldr	r2, [r2, #0]
 80115e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80115e8:	693a      	ldr	r2, [r7, #16]
 80115ea:	6a3b      	ldr	r3, [r7, #32]
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	00db      	lsls	r3, r3, #3
 80115f0:	fa22 f303 	lsr.w	r3, r2, r3
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f8:	701a      	strb	r2, [r3, #0]
      i++;
 80115fa:	6a3b      	ldr	r3, [r7, #32]
 80115fc:	3301      	adds	r3, #1
 80115fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8011600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011602:	3301      	adds	r3, #1
 8011604:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011606:	8bfb      	ldrh	r3, [r7, #30]
 8011608:	3b01      	subs	r3, #1
 801160a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801160c:	8bfb      	ldrh	r3, [r7, #30]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d1ea      	bne.n	80115e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011614:	4618      	mov	r0, r3
 8011616:	372c      	adds	r7, #44	@ 0x2c
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	785b      	ldrb	r3, [r3, #1]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d12c      	bne.n	8011696 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	015a      	lsls	r2, r3, #5
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	4413      	add	r3, r2
 8011644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	db12      	blt.n	8011674 <USB_EPSetStall+0x54>
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00f      	beq.n	8011674 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	015a      	lsls	r2, r3, #5
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	4413      	add	r3, r2
 801165c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	68ba      	ldr	r2, [r7, #8]
 8011664:	0151      	lsls	r1, r2, #5
 8011666:	68fa      	ldr	r2, [r7, #12]
 8011668:	440a      	add	r2, r1
 801166a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801166e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011672:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	015a      	lsls	r2, r3, #5
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	4413      	add	r3, r2
 801167c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	0151      	lsls	r1, r2, #5
 8011686:	68fa      	ldr	r2, [r7, #12]
 8011688:	440a      	add	r2, r1
 801168a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801168e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011692:	6013      	str	r3, [r2, #0]
 8011694:	e02b      	b.n	80116ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	015a      	lsls	r2, r3, #5
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	4413      	add	r3, r2
 801169e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	db12      	blt.n	80116ce <USB_EPSetStall+0xae>
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00f      	beq.n	80116ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	015a      	lsls	r2, r3, #5
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	4413      	add	r3, r2
 80116b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	68ba      	ldr	r2, [r7, #8]
 80116be:	0151      	lsls	r1, r2, #5
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	440a      	add	r2, r1
 80116c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80116cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	015a      	lsls	r2, r3, #5
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	4413      	add	r3, r2
 80116d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	0151      	lsls	r1, r2, #5
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	440a      	add	r2, r1
 80116e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80116ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3714      	adds	r7, #20
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b085      	sub	sp, #20
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	785b      	ldrb	r3, [r3, #1]
 8011714:	2b01      	cmp	r3, #1
 8011716:	d128      	bne.n	801176a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	015a      	lsls	r2, r3, #5
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	4413      	add	r3, r2
 8011720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	0151      	lsls	r1, r2, #5
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	440a      	add	r2, r1
 801172e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011732:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011736:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	791b      	ldrb	r3, [r3, #4]
 801173c:	2b03      	cmp	r3, #3
 801173e:	d003      	beq.n	8011748 <USB_EPClearStall+0x4c>
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	791b      	ldrb	r3, [r3, #4]
 8011744:	2b02      	cmp	r3, #2
 8011746:	d138      	bne.n	80117ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	015a      	lsls	r2, r3, #5
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	4413      	add	r3, r2
 8011750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	0151      	lsls	r1, r2, #5
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	440a      	add	r2, r1
 801175e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011766:	6013      	str	r3, [r2, #0]
 8011768:	e027      	b.n	80117ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	015a      	lsls	r2, r3, #5
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	4413      	add	r3, r2
 8011772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	0151      	lsls	r1, r2, #5
 801177c:	68fa      	ldr	r2, [r7, #12]
 801177e:	440a      	add	r2, r1
 8011780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011784:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011788:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	791b      	ldrb	r3, [r3, #4]
 801178e:	2b03      	cmp	r3, #3
 8011790:	d003      	beq.n	801179a <USB_EPClearStall+0x9e>
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	791b      	ldrb	r3, [r3, #4]
 8011796:	2b02      	cmp	r3, #2
 8011798:	d10f      	bne.n	80117ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	015a      	lsls	r2, r3, #5
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	4413      	add	r3, r2
 80117a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	0151      	lsls	r1, r2, #5
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	440a      	add	r2, r1
 80117b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80117b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80117b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80117ba:	2300      	movs	r3, #0
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3714      	adds	r7, #20
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	460b      	mov	r3, r1
 80117d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68fa      	ldr	r2, [r7, #12]
 80117e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80117e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80117ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	78fb      	ldrb	r3, [r7, #3]
 80117f6:	011b      	lsls	r3, r3, #4
 80117f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80117fc:	68f9      	ldr	r1, [r7, #12]
 80117fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011802:	4313      	orrs	r3, r2
 8011804:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68fa      	ldr	r2, [r7, #12]
 801182a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801182e:	f023 0303 	bic.w	r3, r3, #3
 8011832:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011842:	f023 0302 	bic.w	r3, r3, #2
 8011846:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011848:	2300      	movs	r3, #0
}
 801184a:	4618      	mov	r0, r3
 801184c:	3714      	adds	r7, #20
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr

08011856 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011856:	b480      	push	{r7}
 8011858:	b085      	sub	sp, #20
 801185a:	af00      	add	r7, sp, #0
 801185c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	68fa      	ldr	r2, [r7, #12]
 801186c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011870:	f023 0303 	bic.w	r3, r3, #3
 8011874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	68fa      	ldr	r2, [r7, #12]
 8011880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011884:	f043 0302 	orr.w	r3, r3, #2
 8011888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801188a:	2300      	movs	r3, #0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3714      	adds	r7, #20
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	695b      	ldr	r3, [r3, #20]
 80118a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	699b      	ldr	r3, [r3, #24]
 80118aa:	68fa      	ldr	r2, [r7, #12]
 80118ac:	4013      	ands	r3, r2
 80118ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80118b0:	68fb      	ldr	r3, [r7, #12]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3714      	adds	r7, #20
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80118be:	b480      	push	{r7}
 80118c0:	b085      	sub	sp, #20
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118d0:	699b      	ldr	r3, [r3, #24]
 80118d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118da:	69db      	ldr	r3, [r3, #28]
 80118dc:	68ba      	ldr	r2, [r7, #8]
 80118de:	4013      	ands	r3, r2
 80118e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	0c1b      	lsrs	r3, r3, #16
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3714      	adds	r7, #20
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80118f2:	b480      	push	{r7}
 80118f4:	b085      	sub	sp, #20
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011904:	699b      	ldr	r3, [r3, #24]
 8011906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801190e:	69db      	ldr	r3, [r3, #28]
 8011910:	68ba      	ldr	r2, [r7, #8]
 8011912:	4013      	ands	r3, r2
 8011914:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	b29b      	uxth	r3, r3
}
 801191a:	4618      	mov	r0, r3
 801191c:	3714      	adds	r7, #20
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011926:	b480      	push	{r7}
 8011928:	b085      	sub	sp, #20
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
 801192e:	460b      	mov	r3, r1
 8011930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011936:	78fb      	ldrb	r3, [r7, #3]
 8011938:	015a      	lsls	r2, r3, #5
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	4413      	add	r3, r2
 801193e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801194c:	695b      	ldr	r3, [r3, #20]
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	4013      	ands	r3, r2
 8011952:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011954:	68bb      	ldr	r3, [r7, #8]
}
 8011956:	4618      	mov	r0, r3
 8011958:	3714      	adds	r7, #20
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011962:	b480      	push	{r7}
 8011964:	b087      	sub	sp, #28
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	460b      	mov	r3, r1
 801196c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011984:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011986:	78fb      	ldrb	r3, [r7, #3]
 8011988:	f003 030f 	and.w	r3, r3, #15
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	fa22 f303 	lsr.w	r3, r2, r3
 8011992:	01db      	lsls	r3, r3, #7
 8011994:	b2db      	uxtb	r3, r3
 8011996:	693a      	ldr	r2, [r7, #16]
 8011998:	4313      	orrs	r3, r2
 801199a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801199c:	78fb      	ldrb	r3, [r7, #3]
 801199e:	015a      	lsls	r2, r3, #5
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	4413      	add	r3, r2
 80119a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	693a      	ldr	r2, [r7, #16]
 80119ac:	4013      	ands	r3, r2
 80119ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80119b0:	68bb      	ldr	r3, [r7, #8]
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	371c      	adds	r7, #28
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80119be:	b480      	push	{r7}
 80119c0:	b083      	sub	sp, #12
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	695b      	ldr	r3, [r3, #20]
 80119ca:	f003 0301 	and.w	r3, r3, #1
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	370c      	adds	r7, #12
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80119da:	b480      	push	{r7}
 80119dc:	b085      	sub	sp, #20
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80119f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80119f8:	f023 0307 	bic.w	r3, r3, #7
 80119fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	333c      	adds	r3, #60	@ 0x3c
 8011a36:	3304      	adds	r3, #4
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	4a26      	ldr	r2, [pc, #152]	@ (8011ad8 <USB_EP0_OutStart+0xb8>)
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d90a      	bls.n	8011a5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a54:	d101      	bne.n	8011a5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011a56:	2300      	movs	r3, #0
 8011a58:	e037      	b.n	8011aca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a60:	461a      	mov	r2, r3
 8011a62:	2300      	movs	r3, #0
 8011a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a6c:	691b      	ldr	r3, [r3, #16]
 8011a6e:	697a      	ldr	r2, [r7, #20]
 8011a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a80:	691b      	ldr	r3, [r3, #16]
 8011a82:	697a      	ldr	r2, [r7, #20]
 8011a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a88:	f043 0318 	orr.w	r3, r3, #24
 8011a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a94:	691b      	ldr	r3, [r3, #16]
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011aa0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011aa2:	7afb      	ldrb	r3, [r7, #11]
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	d10f      	bne.n	8011ac8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011aae:	461a      	mov	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	697a      	ldr	r2, [r7, #20]
 8011abe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ac2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	371c      	adds	r7, #28
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	4f54300a 	.word	0x4f54300a

08011adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b085      	sub	sp, #20
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	3301      	adds	r3, #1
 8011aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011af4:	d901      	bls.n	8011afa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011af6:	2303      	movs	r3, #3
 8011af8:	e01b      	b.n	8011b32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	691b      	ldr	r3, [r3, #16]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	daf2      	bge.n	8011ae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011b02:	2300      	movs	r3, #0
 8011b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	691b      	ldr	r3, [r3, #16]
 8011b0a:	f043 0201 	orr.w	r2, r3, #1
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	3301      	adds	r3, #1
 8011b16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b1e:	d901      	bls.n	8011b24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011b20:	2303      	movs	r3, #3
 8011b22:	e006      	b.n	8011b32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	691b      	ldr	r3, [r3, #16]
 8011b28:	f003 0301 	and.w	r3, r3, #1
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d0f0      	beq.n	8011b12 <USB_CoreReset+0x36>

  return HAL_OK;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3714      	adds	r7, #20
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr
	...

08011b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	460b      	mov	r3, r1
 8011b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011b4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011b50:	f005 fe12 	bl	8017778 <USBD_static_malloc>
 8011b54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d109      	bne.n	8011b70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	32b0      	adds	r2, #176	@ 0xb0
 8011b66:	2100      	movs	r1, #0
 8011b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011b6c:	2302      	movs	r3, #2
 8011b6e:	e0d4      	b.n	8011d1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011b70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011b74:	2100      	movs	r1, #0
 8011b76:	68f8      	ldr	r0, [r7, #12]
 8011b78:	f009 fb98 	bl	801b2ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	32b0      	adds	r2, #176	@ 0xb0
 8011b86:	68f9      	ldr	r1, [r7, #12]
 8011b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	32b0      	adds	r2, #176	@ 0xb0
 8011b96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	7c1b      	ldrb	r3, [r3, #16]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d138      	bne.n	8011c1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8011d24 <USBD_CDC_Init+0x1e4>)
 8011baa:	7819      	ldrb	r1, [r3, #0]
 8011bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bb0:	2202      	movs	r2, #2
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f005 fcbd 	bl	8017532 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8011d24 <USBD_CDC_Init+0x1e4>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	f003 020f 	and.w	r2, r3, #15
 8011bc0:	6879      	ldr	r1, [r7, #4]
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4413      	add	r3, r2
 8011bc8:	009b      	lsls	r3, r3, #2
 8011bca:	440b      	add	r3, r1
 8011bcc:	3324      	adds	r3, #36	@ 0x24
 8011bce:	2201      	movs	r2, #1
 8011bd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011bd2:	4b55      	ldr	r3, [pc, #340]	@ (8011d28 <USBD_CDC_Init+0x1e8>)
 8011bd4:	7819      	ldrb	r1, [r3, #0]
 8011bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bda:	2202      	movs	r2, #2
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f005 fca8 	bl	8017532 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011be2:	4b51      	ldr	r3, [pc, #324]	@ (8011d28 <USBD_CDC_Init+0x1e8>)
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	f003 020f 	and.w	r2, r3, #15
 8011bea:	6879      	ldr	r1, [r7, #4]
 8011bec:	4613      	mov	r3, r2
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	4413      	add	r3, r2
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8011d2c <USBD_CDC_Init+0x1ec>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f003 020f 	and.w	r2, r3, #15
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	4413      	add	r3, r2
 8011c0e:	009b      	lsls	r3, r3, #2
 8011c10:	440b      	add	r3, r1
 8011c12:	3326      	adds	r3, #38	@ 0x26
 8011c14:	2210      	movs	r2, #16
 8011c16:	801a      	strh	r2, [r3, #0]
 8011c18:	e035      	b.n	8011c86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011c1a:	4b42      	ldr	r3, [pc, #264]	@ (8011d24 <USBD_CDC_Init+0x1e4>)
 8011c1c:	7819      	ldrb	r1, [r3, #0]
 8011c1e:	2340      	movs	r3, #64	@ 0x40
 8011c20:	2202      	movs	r2, #2
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f005 fc85 	bl	8017532 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011c28:	4b3e      	ldr	r3, [pc, #248]	@ (8011d24 <USBD_CDC_Init+0x1e4>)
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	f003 020f 	and.w	r2, r3, #15
 8011c30:	6879      	ldr	r1, [r7, #4]
 8011c32:	4613      	mov	r3, r2
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	4413      	add	r3, r2
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	440b      	add	r3, r1
 8011c3c:	3324      	adds	r3, #36	@ 0x24
 8011c3e:	2201      	movs	r2, #1
 8011c40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011c42:	4b39      	ldr	r3, [pc, #228]	@ (8011d28 <USBD_CDC_Init+0x1e8>)
 8011c44:	7819      	ldrb	r1, [r3, #0]
 8011c46:	2340      	movs	r3, #64	@ 0x40
 8011c48:	2202      	movs	r2, #2
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f005 fc71 	bl	8017532 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011c50:	4b35      	ldr	r3, [pc, #212]	@ (8011d28 <USBD_CDC_Init+0x1e8>)
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	f003 020f 	and.w	r2, r3, #15
 8011c58:	6879      	ldr	r1, [r7, #4]
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	4413      	add	r3, r2
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	440b      	add	r3, r1
 8011c64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011c68:	2201      	movs	r2, #1
 8011c6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8011d2c <USBD_CDC_Init+0x1ec>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 020f 	and.w	r2, r3, #15
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	4613      	mov	r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	4413      	add	r3, r2
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	440b      	add	r3, r1
 8011c80:	3326      	adds	r3, #38	@ 0x26
 8011c82:	2210      	movs	r2, #16
 8011c84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011c86:	4b29      	ldr	r3, [pc, #164]	@ (8011d2c <USBD_CDC_Init+0x1ec>)
 8011c88:	7819      	ldrb	r1, [r3, #0]
 8011c8a:	2308      	movs	r3, #8
 8011c8c:	2203      	movs	r2, #3
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f005 fc4f 	bl	8017532 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011c94:	4b25      	ldr	r3, [pc, #148]	@ (8011d2c <USBD_CDC_Init+0x1ec>)
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	f003 020f 	and.w	r2, r3, #15
 8011c9c:	6879      	ldr	r1, [r7, #4]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	4413      	add	r3, r2
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	440b      	add	r3, r1
 8011ca8:	3324      	adds	r3, #36	@ 0x24
 8011caa:	2201      	movs	r2, #1
 8011cac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	33b0      	adds	r3, #176	@ 0xb0
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d101      	bne.n	8011ce8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011ce4:	2302      	movs	r3, #2
 8011ce6:	e018      	b.n	8011d1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	7c1b      	ldrb	r3, [r3, #16]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10a      	bne.n	8011d06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8011d28 <USBD_CDC_Init+0x1e8>)
 8011cf2:	7819      	ldrb	r1, [r3, #0]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011cfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f005 fd06 	bl	8017710 <USBD_LL_PrepareReceive>
 8011d04:	e008      	b.n	8011d18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d06:	4b08      	ldr	r3, [pc, #32]	@ (8011d28 <USBD_CDC_Init+0x1e8>)
 8011d08:	7819      	ldrb	r1, [r3, #0]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d10:	2340      	movs	r3, #64	@ 0x40
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f005 fcfc 	bl	8017710 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011d18:	2300      	movs	r3, #0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	200000e7 	.word	0x200000e7
 8011d28:	200000e8 	.word	0x200000e8
 8011d2c:	200000e9 	.word	0x200000e9

08011d30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	460b      	mov	r3, r1
 8011d3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8011e28 <USBD_CDC_DeInit+0xf8>)
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	4619      	mov	r1, r3
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f005 fc1b 	bl	801757e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011d48:	4b37      	ldr	r3, [pc, #220]	@ (8011e28 <USBD_CDC_DeInit+0xf8>)
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	f003 020f 	and.w	r2, r3, #15
 8011d50:	6879      	ldr	r1, [r7, #4]
 8011d52:	4613      	mov	r3, r2
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	4413      	add	r3, r2
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	440b      	add	r3, r1
 8011d5c:	3324      	adds	r3, #36	@ 0x24
 8011d5e:	2200      	movs	r2, #0
 8011d60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011d62:	4b32      	ldr	r3, [pc, #200]	@ (8011e2c <USBD_CDC_DeInit+0xfc>)
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	4619      	mov	r1, r3
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f005 fc08 	bl	801757e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8011e2c <USBD_CDC_DeInit+0xfc>)
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	f003 020f 	and.w	r2, r3, #15
 8011d76:	6879      	ldr	r1, [r7, #4]
 8011d78:	4613      	mov	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4413      	add	r3, r2
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	440b      	add	r3, r1
 8011d82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011d86:	2200      	movs	r2, #0
 8011d88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011d8a:	4b29      	ldr	r3, [pc, #164]	@ (8011e30 <USBD_CDC_DeInit+0x100>)
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	4619      	mov	r1, r3
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f005 fbf4 	bl	801757e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011d96:	4b26      	ldr	r3, [pc, #152]	@ (8011e30 <USBD_CDC_DeInit+0x100>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	f003 020f 	and.w	r2, r3, #15
 8011d9e:	6879      	ldr	r1, [r7, #4]
 8011da0:	4613      	mov	r3, r2
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	4413      	add	r3, r2
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	440b      	add	r3, r1
 8011daa:	3324      	adds	r3, #36	@ 0x24
 8011dac:	2200      	movs	r2, #0
 8011dae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011db0:	4b1f      	ldr	r3, [pc, #124]	@ (8011e30 <USBD_CDC_DeInit+0x100>)
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	f003 020f 	and.w	r2, r3, #15
 8011db8:	6879      	ldr	r1, [r7, #4]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4413      	add	r3, r2
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3326      	adds	r3, #38	@ 0x26
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	32b0      	adds	r2, #176	@ 0xb0
 8011dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d01f      	beq.n	8011e1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	33b0      	adds	r3, #176	@ 0xb0
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	4413      	add	r3, r2
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	32b0      	adds	r2, #176	@ 0xb0
 8011dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f005 fcc8 	bl	8017794 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	32b0      	adds	r2, #176	@ 0xb0
 8011e0e:	2100      	movs	r1, #0
 8011e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2200      	movs	r2, #0
 8011e18:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3708      	adds	r7, #8
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	200000e7 	.word	0x200000e7
 8011e2c:	200000e8 	.word	0x200000e8
 8011e30:	200000e9 	.word	0x200000e9

08011e34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b086      	sub	sp, #24
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	32b0      	adds	r2, #176	@ 0xb0
 8011e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011e52:	2300      	movs	r3, #0
 8011e54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e56:	2300      	movs	r3, #0
 8011e58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011e60:	2303      	movs	r3, #3
 8011e62:	e0bf      	b.n	8011fe4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d050      	beq.n	8011f12 <USBD_CDC_Setup+0xde>
 8011e70:	2b20      	cmp	r3, #32
 8011e72:	f040 80af 	bne.w	8011fd4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	88db      	ldrh	r3, [r3, #6]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d03a      	beq.n	8011ef4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	b25b      	sxtb	r3, r3
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	da1b      	bge.n	8011ec0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	33b0      	adds	r3, #176	@ 0xb0
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	4413      	add	r3, r2
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	689b      	ldr	r3, [r3, #8]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011e9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011ea0:	683a      	ldr	r2, [r7, #0]
 8011ea2:	88d2      	ldrh	r2, [r2, #6]
 8011ea4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	88db      	ldrh	r3, [r3, #6]
 8011eaa:	2b07      	cmp	r3, #7
 8011eac:	bf28      	it	cs
 8011eae:	2307      	movcs	r3, #7
 8011eb0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	89fa      	ldrh	r2, [r7, #14]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f001 fd53 	bl	8013964 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011ebe:	e090      	b.n	8011fe2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	785a      	ldrb	r2, [r3, #1]
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	88db      	ldrh	r3, [r3, #6]
 8011ece:	2b3f      	cmp	r3, #63	@ 0x3f
 8011ed0:	d803      	bhi.n	8011eda <USBD_CDC_Setup+0xa6>
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	88db      	ldrh	r3, [r3, #6]
 8011ed6:	b2da      	uxtb	r2, r3
 8011ed8:	e000      	b.n	8011edc <USBD_CDC_Setup+0xa8>
 8011eda:	2240      	movs	r2, #64	@ 0x40
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011ee2:	6939      	ldr	r1, [r7, #16]
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011eea:	461a      	mov	r2, r3
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f001 fd65 	bl	80139bc <USBD_CtlPrepareRx>
      break;
 8011ef2:	e076      	b.n	8011fe2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	33b0      	adds	r3, #176	@ 0xb0
 8011efe:	009b      	lsls	r3, r3, #2
 8011f00:	4413      	add	r3, r2
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	689b      	ldr	r3, [r3, #8]
 8011f06:	683a      	ldr	r2, [r7, #0]
 8011f08:	7850      	ldrb	r0, [r2, #1]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	4798      	blx	r3
      break;
 8011f10:	e067      	b.n	8011fe2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	785b      	ldrb	r3, [r3, #1]
 8011f16:	2b0b      	cmp	r3, #11
 8011f18:	d851      	bhi.n	8011fbe <USBD_CDC_Setup+0x18a>
 8011f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8011f20 <USBD_CDC_Setup+0xec>)
 8011f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f20:	08011f51 	.word	0x08011f51
 8011f24:	08011fcd 	.word	0x08011fcd
 8011f28:	08011fbf 	.word	0x08011fbf
 8011f2c:	08011fbf 	.word	0x08011fbf
 8011f30:	08011fbf 	.word	0x08011fbf
 8011f34:	08011fbf 	.word	0x08011fbf
 8011f38:	08011fbf 	.word	0x08011fbf
 8011f3c:	08011fbf 	.word	0x08011fbf
 8011f40:	08011fbf 	.word	0x08011fbf
 8011f44:	08011fbf 	.word	0x08011fbf
 8011f48:	08011f7b 	.word	0x08011f7b
 8011f4c:	08011fa5 	.word	0x08011fa5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	2b03      	cmp	r3, #3
 8011f5a:	d107      	bne.n	8011f6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011f5c:	f107 030a 	add.w	r3, r7, #10
 8011f60:	2202      	movs	r2, #2
 8011f62:	4619      	mov	r1, r3
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f001 fcfd 	bl	8013964 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f6a:	e032      	b.n	8011fd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f001 fc7b 	bl	801386a <USBD_CtlError>
            ret = USBD_FAIL;
 8011f74:	2303      	movs	r3, #3
 8011f76:	75fb      	strb	r3, [r7, #23]
          break;
 8011f78:	e02b      	b.n	8011fd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b03      	cmp	r3, #3
 8011f84:	d107      	bne.n	8011f96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011f86:	f107 030d 	add.w	r3, r7, #13
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f001 fce8 	bl	8013964 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f94:	e01d      	b.n	8011fd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011f96:	6839      	ldr	r1, [r7, #0]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f001 fc66 	bl	801386a <USBD_CtlError>
            ret = USBD_FAIL;
 8011f9e:	2303      	movs	r3, #3
 8011fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8011fa2:	e016      	b.n	8011fd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	2b03      	cmp	r3, #3
 8011fae:	d00f      	beq.n	8011fd0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011fb0:	6839      	ldr	r1, [r7, #0]
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f001 fc59 	bl	801386a <USBD_CtlError>
            ret = USBD_FAIL;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011fbc:	e008      	b.n	8011fd0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f001 fc52 	bl	801386a <USBD_CtlError>
          ret = USBD_FAIL;
 8011fc6:	2303      	movs	r3, #3
 8011fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8011fca:	e002      	b.n	8011fd2 <USBD_CDC_Setup+0x19e>
          break;
 8011fcc:	bf00      	nop
 8011fce:	e008      	b.n	8011fe2 <USBD_CDC_Setup+0x1ae>
          break;
 8011fd0:	bf00      	nop
      }
      break;
 8011fd2:	e006      	b.n	8011fe2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011fd4:	6839      	ldr	r1, [r7, #0]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f001 fc47 	bl	801386a <USBD_CtlError>
      ret = USBD_FAIL;
 8011fdc:	2303      	movs	r3, #3
 8011fde:	75fb      	strb	r3, [r7, #23]
      break;
 8011fe0:	bf00      	nop
  }

  return (uint8_t)ret;
 8011fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3718      	adds	r7, #24
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ffe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	32b0      	adds	r2, #176	@ 0xb0
 801200a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d101      	bne.n	8012016 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012012:	2303      	movs	r3, #3
 8012014:	e065      	b.n	80120e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	32b0      	adds	r2, #176	@ 0xb0
 8012020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012024:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012026:	78fb      	ldrb	r3, [r7, #3]
 8012028:	f003 020f 	and.w	r2, r3, #15
 801202c:	6879      	ldr	r1, [r7, #4]
 801202e:	4613      	mov	r3, r2
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	4413      	add	r3, r2
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	440b      	add	r3, r1
 8012038:	3318      	adds	r3, #24
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d02f      	beq.n	80120a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012040:	78fb      	ldrb	r3, [r7, #3]
 8012042:	f003 020f 	and.w	r2, r3, #15
 8012046:	6879      	ldr	r1, [r7, #4]
 8012048:	4613      	mov	r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4413      	add	r3, r2
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	440b      	add	r3, r1
 8012052:	3318      	adds	r3, #24
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	78fb      	ldrb	r3, [r7, #3]
 8012058:	f003 010f 	and.w	r1, r3, #15
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	460b      	mov	r3, r1
 8012060:	00db      	lsls	r3, r3, #3
 8012062:	440b      	add	r3, r1
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4403      	add	r3, r0
 8012068:	331c      	adds	r3, #28
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	fbb2 f1f3 	udiv	r1, r2, r3
 8012070:	fb01 f303 	mul.w	r3, r1, r3
 8012074:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012076:	2b00      	cmp	r3, #0
 8012078:	d112      	bne.n	80120a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801207a:	78fb      	ldrb	r3, [r7, #3]
 801207c:	f003 020f 	and.w	r2, r3, #15
 8012080:	6879      	ldr	r1, [r7, #4]
 8012082:	4613      	mov	r3, r2
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	4413      	add	r3, r2
 8012088:	009b      	lsls	r3, r3, #2
 801208a:	440b      	add	r3, r1
 801208c:	3318      	adds	r3, #24
 801208e:	2200      	movs	r2, #0
 8012090:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012092:	78f9      	ldrb	r1, [r7, #3]
 8012094:	2300      	movs	r3, #0
 8012096:	2200      	movs	r2, #0
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f005 fb18 	bl	80176ce <USBD_LL_Transmit>
 801209e:	e01f      	b.n	80120e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2200      	movs	r2, #0
 80120a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	33b0      	adds	r3, #176	@ 0xb0
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	4413      	add	r3, r2
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	691b      	ldr	r3, [r3, #16]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d010      	beq.n	80120e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	33b0      	adds	r3, #176	@ 0xb0
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	4413      	add	r3, r2
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	691b      	ldr	r3, [r3, #16]
 80120d0:	68ba      	ldr	r2, [r7, #8]
 80120d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80120d6:	68ba      	ldr	r2, [r7, #8]
 80120d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80120dc:	78fa      	ldrb	r2, [r7, #3]
 80120de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80120e0:	2300      	movs	r3, #0
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3710      	adds	r7, #16
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b084      	sub	sp, #16
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
 80120f2:	460b      	mov	r3, r1
 80120f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	32b0      	adds	r2, #176	@ 0xb0
 8012100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012104:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	32b0      	adds	r2, #176	@ 0xb0
 8012110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d101      	bne.n	801211c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012118:	2303      	movs	r3, #3
 801211a:	e01a      	b.n	8012152 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801211c:	78fb      	ldrb	r3, [r7, #3]
 801211e:	4619      	mov	r1, r3
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f005 fb16 	bl	8017752 <USBD_LL_GetRxDataSize>
 8012126:	4602      	mov	r2, r0
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	33b0      	adds	r3, #176	@ 0xb0
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4413      	add	r3, r2
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012146:	68fa      	ldr	r2, [r7, #12]
 8012148:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801214c:	4611      	mov	r1, r2
 801214e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012150:	2300      	movs	r3, #0
}
 8012152:	4618      	mov	r0, r3
 8012154:	3710      	adds	r7, #16
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b084      	sub	sp, #16
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	32b0      	adds	r2, #176	@ 0xb0
 801216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012170:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d101      	bne.n	801217c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012178:	2303      	movs	r3, #3
 801217a:	e024      	b.n	80121c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	33b0      	adds	r3, #176	@ 0xb0
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	4413      	add	r3, r2
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d019      	beq.n	80121c4 <USBD_CDC_EP0_RxReady+0x6a>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012196:	2bff      	cmp	r3, #255	@ 0xff
 8012198:	d014      	beq.n	80121c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	33b0      	adds	r3, #176	@ 0xb0
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	4413      	add	r3, r2
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80121b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80121b4:	68fa      	ldr	r2, [r7, #12]
 80121b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80121ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	22ff      	movs	r2, #255	@ 0xff
 80121c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80121c4:	2300      	movs	r3, #0
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3710      	adds	r7, #16
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
	...

080121d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80121d8:	2182      	movs	r1, #130	@ 0x82
 80121da:	4818      	ldr	r0, [pc, #96]	@ (801223c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80121dc:	f000 fd0f 	bl	8012bfe <USBD_GetEpDesc>
 80121e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80121e2:	2101      	movs	r1, #1
 80121e4:	4815      	ldr	r0, [pc, #84]	@ (801223c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80121e6:	f000 fd0a 	bl	8012bfe <USBD_GetEpDesc>
 80121ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80121ec:	2181      	movs	r1, #129	@ 0x81
 80121ee:	4813      	ldr	r0, [pc, #76]	@ (801223c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80121f0:	f000 fd05 	bl	8012bfe <USBD_GetEpDesc>
 80121f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d002      	beq.n	8012202 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	2210      	movs	r2, #16
 8012200:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d006      	beq.n	8012216 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	2200      	movs	r2, #0
 801220c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012210:	711a      	strb	r2, [r3, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d006      	beq.n	801222a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2200      	movs	r2, #0
 8012220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012224:	711a      	strb	r2, [r3, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2243      	movs	r2, #67	@ 0x43
 801222e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012230:	4b02      	ldr	r3, [pc, #8]	@ (801223c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012232:	4618      	mov	r0, r3
 8012234:	3718      	adds	r7, #24
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	200000a4 	.word	0x200000a4

08012240 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012248:	2182      	movs	r1, #130	@ 0x82
 801224a:	4818      	ldr	r0, [pc, #96]	@ (80122ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 801224c:	f000 fcd7 	bl	8012bfe <USBD_GetEpDesc>
 8012250:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012252:	2101      	movs	r1, #1
 8012254:	4815      	ldr	r0, [pc, #84]	@ (80122ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012256:	f000 fcd2 	bl	8012bfe <USBD_GetEpDesc>
 801225a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801225c:	2181      	movs	r1, #129	@ 0x81
 801225e:	4813      	ldr	r0, [pc, #76]	@ (80122ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012260:	f000 fccd 	bl	8012bfe <USBD_GetEpDesc>
 8012264:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2210      	movs	r2, #16
 8012270:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d006      	beq.n	8012286 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	2200      	movs	r2, #0
 801227c:	711a      	strb	r2, [r3, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	f042 0202 	orr.w	r2, r2, #2
 8012284:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d006      	beq.n	801229a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2200      	movs	r2, #0
 8012290:	711a      	strb	r2, [r3, #4]
 8012292:	2200      	movs	r2, #0
 8012294:	f042 0202 	orr.w	r2, r2, #2
 8012298:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2243      	movs	r2, #67	@ 0x43
 801229e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80122a0:	4b02      	ldr	r3, [pc, #8]	@ (80122ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	200000a4 	.word	0x200000a4

080122b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80122b8:	2182      	movs	r1, #130	@ 0x82
 80122ba:	4818      	ldr	r0, [pc, #96]	@ (801231c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80122bc:	f000 fc9f 	bl	8012bfe <USBD_GetEpDesc>
 80122c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80122c2:	2101      	movs	r1, #1
 80122c4:	4815      	ldr	r0, [pc, #84]	@ (801231c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80122c6:	f000 fc9a 	bl	8012bfe <USBD_GetEpDesc>
 80122ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80122cc:	2181      	movs	r1, #129	@ 0x81
 80122ce:	4813      	ldr	r0, [pc, #76]	@ (801231c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80122d0:	f000 fc95 	bl	8012bfe <USBD_GetEpDesc>
 80122d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d002      	beq.n	80122e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	2210      	movs	r2, #16
 80122e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d006      	beq.n	80122f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80122f0:	711a      	strb	r2, [r3, #4]
 80122f2:	2200      	movs	r2, #0
 80122f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d006      	beq.n	801230a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	2200      	movs	r2, #0
 8012300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012304:	711a      	strb	r2, [r3, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2243      	movs	r2, #67	@ 0x43
 801230e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012310:	4b02      	ldr	r3, [pc, #8]	@ (801231c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012312:	4618      	mov	r0, r3
 8012314:	3718      	adds	r7, #24
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	200000a4 	.word	0x200000a4

08012320 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	220a      	movs	r2, #10
 801232c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801232e:	4b03      	ldr	r3, [pc, #12]	@ (801233c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012330:	4618      	mov	r0, r3
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr
 801233c:	20000060 	.word	0x20000060

08012340 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d101      	bne.n	8012354 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012350:	2303      	movs	r3, #3
 8012352:	e009      	b.n	8012368 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	33b0      	adds	r3, #176	@ 0xb0
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	4413      	add	r3, r2
 8012362:	683a      	ldr	r2, [r7, #0]
 8012364:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012366:	2300      	movs	r3, #0
}
 8012368:	4618      	mov	r0, r3
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012374:	b480      	push	{r7}
 8012376:	b087      	sub	sp, #28
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	32b0      	adds	r2, #176	@ 0xb0
 801238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801238e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012396:	2303      	movs	r3, #3
 8012398:	e008      	b.n	80123ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80123aa:	2300      	movs	r3, #0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	371c      	adds	r7, #28
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b085      	sub	sp, #20
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	32b0      	adds	r2, #176	@ 0xb0
 80123cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d101      	bne.n	80123dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80123d8:	2303      	movs	r3, #3
 80123da:	e004      	b.n	80123e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	683a      	ldr	r2, [r7, #0]
 80123e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
	...

080123f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	32b0      	adds	r2, #176	@ 0xb0
 8012406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801240a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	32b0      	adds	r2, #176	@ 0xb0
 8012416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d101      	bne.n	8012422 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801241e:	2303      	movs	r3, #3
 8012420:	e018      	b.n	8012454 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	7c1b      	ldrb	r3, [r3, #16]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10a      	bne.n	8012440 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801242a:	4b0c      	ldr	r3, [pc, #48]	@ (801245c <USBD_CDC_ReceivePacket+0x68>)
 801242c:	7819      	ldrb	r1, [r3, #0]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f005 f969 	bl	8017710 <USBD_LL_PrepareReceive>
 801243e:	e008      	b.n	8012452 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012440:	4b06      	ldr	r3, [pc, #24]	@ (801245c <USBD_CDC_ReceivePacket+0x68>)
 8012442:	7819      	ldrb	r1, [r3, #0]
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801244a:	2340      	movs	r3, #64	@ 0x40
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f005 f95f 	bl	8017710 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012452:	2300      	movs	r3, #0
}
 8012454:	4618      	mov	r0, r3
 8012456:	3710      	adds	r7, #16
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}
 801245c:	200000e8 	.word	0x200000e8

08012460 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b086      	sub	sp, #24
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	4613      	mov	r3, r2
 801246c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d101      	bne.n	8012478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012474:	2303      	movs	r3, #3
 8012476:	e01f      	b.n	80124b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2200      	movs	r2, #0
 801247c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2200      	movs	r2, #0
 8012484:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2200      	movs	r2, #0
 801248c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d003      	beq.n	801249e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	68ba      	ldr	r2, [r7, #8]
 801249a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2201      	movs	r2, #1
 80124a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	79fa      	ldrb	r2, [r7, #7]
 80124aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f004 ffd9 	bl	8017464 <USBD_LL_Init>
 80124b2:	4603      	mov	r3, r0
 80124b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80124b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3718      	adds	r7, #24
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80124ca:	2300      	movs	r3, #0
 80124cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d101      	bne.n	80124d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80124d4:	2303      	movs	r3, #3
 80124d6:	e025      	b.n	8012524 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	683a      	ldr	r2, [r7, #0]
 80124dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	32ae      	adds	r2, #174	@ 0xae
 80124ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d00f      	beq.n	8012514 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	32ae      	adds	r2, #174	@ 0xae
 80124fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012504:	f107 020e 	add.w	r2, r7, #14
 8012508:	4610      	mov	r0, r2
 801250a:	4798      	blx	r3
 801250c:	4602      	mov	r2, r0
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012522:	2300      	movs	r3, #0
}
 8012524:	4618      	mov	r0, r3
 8012526:	3710      	adds	r7, #16
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f004 ffe1 	bl	80174fc <USBD_LL_Start>
 801253a:	4603      	mov	r3, r0
}
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801254c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr

0801255a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b084      	sub	sp, #16
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
 8012562:	460b      	mov	r3, r1
 8012564:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012570:	2b00      	cmp	r3, #0
 8012572:	d009      	beq.n	8012588 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	78fa      	ldrb	r2, [r7, #3]
 801257e:	4611      	mov	r1, r2
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	4798      	blx	r3
 8012584:	4603      	mov	r3, r0
 8012586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012588:	7bfb      	ldrb	r3, [r7, #15]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b084      	sub	sp, #16
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
 801259a:	460b      	mov	r3, r1
 801259c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801259e:	2300      	movs	r3, #0
 80125a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	78fa      	ldrb	r2, [r7, #3]
 80125ac:	4611      	mov	r1, r2
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	4798      	blx	r3
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d001      	beq.n	80125bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80125b8:	2303      	movs	r3, #3
 80125ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80125bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3710      	adds	r7, #16
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b084      	sub	sp, #16
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
 80125ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80125d6:	6839      	ldr	r1, [r7, #0]
 80125d8:	4618      	mov	r0, r3
 80125da:	f001 f90c 	bl	80137f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2201      	movs	r2, #1
 80125e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80125ec:	461a      	mov	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80125fa:	f003 031f 	and.w	r3, r3, #31
 80125fe:	2b02      	cmp	r3, #2
 8012600:	d01a      	beq.n	8012638 <USBD_LL_SetupStage+0x72>
 8012602:	2b02      	cmp	r3, #2
 8012604:	d822      	bhi.n	801264c <USBD_LL_SetupStage+0x86>
 8012606:	2b00      	cmp	r3, #0
 8012608:	d002      	beq.n	8012610 <USBD_LL_SetupStage+0x4a>
 801260a:	2b01      	cmp	r3, #1
 801260c:	d00a      	beq.n	8012624 <USBD_LL_SetupStage+0x5e>
 801260e:	e01d      	b.n	801264c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012616:	4619      	mov	r1, r3
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f000 fb63 	bl	8012ce4 <USBD_StdDevReq>
 801261e:	4603      	mov	r3, r0
 8012620:	73fb      	strb	r3, [r7, #15]
      break;
 8012622:	e020      	b.n	8012666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801262a:	4619      	mov	r1, r3
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f000 fbcb 	bl	8012dc8 <USBD_StdItfReq>
 8012632:	4603      	mov	r3, r0
 8012634:	73fb      	strb	r3, [r7, #15]
      break;
 8012636:	e016      	b.n	8012666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801263e:	4619      	mov	r1, r3
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 fc2d 	bl	8012ea0 <USBD_StdEPReq>
 8012646:	4603      	mov	r3, r0
 8012648:	73fb      	strb	r3, [r7, #15]
      break;
 801264a:	e00c      	b.n	8012666 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012652:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012656:	b2db      	uxtb	r3, r3
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f004 ffae 	bl	80175bc <USBD_LL_StallEP>
 8012660:	4603      	mov	r3, r0
 8012662:	73fb      	strb	r3, [r7, #15]
      break;
 8012664:	bf00      	nop
  }

  return ret;
 8012666:	7bfb      	ldrb	r3, [r7, #15]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b086      	sub	sp, #24
 8012674:	af00      	add	r7, sp, #0
 8012676:	60f8      	str	r0, [r7, #12]
 8012678:	460b      	mov	r3, r1
 801267a:	607a      	str	r2, [r7, #4]
 801267c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801267e:	2300      	movs	r3, #0
 8012680:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012682:	7afb      	ldrb	r3, [r7, #11]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d16e      	bne.n	8012766 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801268e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012696:	2b03      	cmp	r3, #3
 8012698:	f040 8098 	bne.w	80127cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	689a      	ldr	r2, [r3, #8]
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d913      	bls.n	80126d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	689a      	ldr	r2, [r3, #8]
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	1ad2      	subs	r2, r2, r3
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	68da      	ldr	r2, [r3, #12]
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	4293      	cmp	r3, r2
 80126c0:	bf28      	it	cs
 80126c2:	4613      	movcs	r3, r2
 80126c4:	461a      	mov	r2, r3
 80126c6:	6879      	ldr	r1, [r7, #4]
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f001 f994 	bl	80139f6 <USBD_CtlContinueRx>
 80126ce:	e07d      	b.n	80127cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80126d6:	f003 031f 	and.w	r3, r3, #31
 80126da:	2b02      	cmp	r3, #2
 80126dc:	d014      	beq.n	8012708 <USBD_LL_DataOutStage+0x98>
 80126de:	2b02      	cmp	r3, #2
 80126e0:	d81d      	bhi.n	801271e <USBD_LL_DataOutStage+0xae>
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d002      	beq.n	80126ec <USBD_LL_DataOutStage+0x7c>
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d003      	beq.n	80126f2 <USBD_LL_DataOutStage+0x82>
 80126ea:	e018      	b.n	801271e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80126ec:	2300      	movs	r3, #0
 80126ee:	75bb      	strb	r3, [r7, #22]
            break;
 80126f0:	e018      	b.n	8012724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	4619      	mov	r1, r3
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f000 fa64 	bl	8012bca <USBD_CoreFindIF>
 8012702:	4603      	mov	r3, r0
 8012704:	75bb      	strb	r3, [r7, #22]
            break;
 8012706:	e00d      	b.n	8012724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801270e:	b2db      	uxtb	r3, r3
 8012710:	4619      	mov	r1, r3
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f000 fa66 	bl	8012be4 <USBD_CoreFindEP>
 8012718:	4603      	mov	r3, r0
 801271a:	75bb      	strb	r3, [r7, #22]
            break;
 801271c:	e002      	b.n	8012724 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801271e:	2300      	movs	r3, #0
 8012720:	75bb      	strb	r3, [r7, #22]
            break;
 8012722:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012724:	7dbb      	ldrb	r3, [r7, #22]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d119      	bne.n	801275e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b03      	cmp	r3, #3
 8012734:	d113      	bne.n	801275e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012736:	7dba      	ldrb	r2, [r7, #22]
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	32ae      	adds	r2, #174	@ 0xae
 801273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012740:	691b      	ldr	r3, [r3, #16]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d00b      	beq.n	801275e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012746:	7dba      	ldrb	r2, [r7, #22]
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801274e:	7dba      	ldrb	r2, [r7, #22]
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	32ae      	adds	r2, #174	@ 0xae
 8012754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012758:	691b      	ldr	r3, [r3, #16]
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801275e:	68f8      	ldr	r0, [r7, #12]
 8012760:	f001 f95a 	bl	8013a18 <USBD_CtlSendStatus>
 8012764:	e032      	b.n	80127cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012766:	7afb      	ldrb	r3, [r7, #11]
 8012768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801276c:	b2db      	uxtb	r3, r3
 801276e:	4619      	mov	r1, r3
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f000 fa37 	bl	8012be4 <USBD_CoreFindEP>
 8012776:	4603      	mov	r3, r0
 8012778:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801277a:	7dbb      	ldrb	r3, [r7, #22]
 801277c:	2bff      	cmp	r3, #255	@ 0xff
 801277e:	d025      	beq.n	80127cc <USBD_LL_DataOutStage+0x15c>
 8012780:	7dbb      	ldrb	r3, [r7, #22]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d122      	bne.n	80127cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801278c:	b2db      	uxtb	r3, r3
 801278e:	2b03      	cmp	r3, #3
 8012790:	d117      	bne.n	80127c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012792:	7dba      	ldrb	r2, [r7, #22]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	32ae      	adds	r2, #174	@ 0xae
 8012798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801279c:	699b      	ldr	r3, [r3, #24]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00f      	beq.n	80127c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80127a2:	7dba      	ldrb	r2, [r7, #22]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80127aa:	7dba      	ldrb	r2, [r7, #22]
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	32ae      	adds	r2, #174	@ 0xae
 80127b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127b4:	699b      	ldr	r3, [r3, #24]
 80127b6:	7afa      	ldrb	r2, [r7, #11]
 80127b8:	4611      	mov	r1, r2
 80127ba:	68f8      	ldr	r0, [r7, #12]
 80127bc:	4798      	blx	r3
 80127be:	4603      	mov	r3, r0
 80127c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80127c2:	7dfb      	ldrb	r3, [r7, #23]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80127c8:	7dfb      	ldrb	r3, [r7, #23]
 80127ca:	e000      	b.n	80127ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80127cc:	2300      	movs	r3, #0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3718      	adds	r7, #24
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b086      	sub	sp, #24
 80127da:	af00      	add	r7, sp, #0
 80127dc:	60f8      	str	r0, [r7, #12]
 80127de:	460b      	mov	r3, r1
 80127e0:	607a      	str	r2, [r7, #4]
 80127e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80127e4:	7afb      	ldrb	r3, [r7, #11]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d16f      	bne.n	80128ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	3314      	adds	r3, #20
 80127ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80127f6:	2b02      	cmp	r3, #2
 80127f8:	d15a      	bne.n	80128b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	689a      	ldr	r2, [r3, #8]
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	429a      	cmp	r2, r3
 8012804:	d914      	bls.n	8012830 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	689a      	ldr	r2, [r3, #8]
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	1ad2      	subs	r2, r2, r3
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	461a      	mov	r2, r3
 801281a:	6879      	ldr	r1, [r7, #4]
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f001 f8bc 	bl	801399a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012822:	2300      	movs	r3, #0
 8012824:	2200      	movs	r2, #0
 8012826:	2100      	movs	r1, #0
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	f004 ff71 	bl	8017710 <USBD_LL_PrepareReceive>
 801282e:	e03f      	b.n	80128b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	68da      	ldr	r2, [r3, #12]
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	429a      	cmp	r2, r3
 801283a:	d11c      	bne.n	8012876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012844:	429a      	cmp	r2, r3
 8012846:	d316      	bcc.n	8012876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	685a      	ldr	r2, [r3, #4]
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012852:	429a      	cmp	r2, r3
 8012854:	d20f      	bcs.n	8012876 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012856:	2200      	movs	r2, #0
 8012858:	2100      	movs	r1, #0
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f001 f89d 	bl	801399a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2200      	movs	r2, #0
 8012864:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012868:	2300      	movs	r3, #0
 801286a:	2200      	movs	r2, #0
 801286c:	2100      	movs	r1, #0
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f004 ff4e 	bl	8017710 <USBD_LL_PrepareReceive>
 8012874:	e01c      	b.n	80128b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801287c:	b2db      	uxtb	r3, r3
 801287e:	2b03      	cmp	r3, #3
 8012880:	d10f      	bne.n	80128a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d009      	beq.n	80128a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	2200      	movs	r2, #0
 8012892:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80128a2:	2180      	movs	r1, #128	@ 0x80
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f004 fe89 	bl	80175bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f001 f8c7 	bl	8013a3e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d03a      	beq.n	8012930 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f7ff fe42 	bl	8012544 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2200      	movs	r2, #0
 80128c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80128c8:	e032      	b.n	8012930 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80128ca:	7afb      	ldrb	r3, [r7, #11]
 80128cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	4619      	mov	r1, r3
 80128d4:	68f8      	ldr	r0, [r7, #12]
 80128d6:	f000 f985 	bl	8012be4 <USBD_CoreFindEP>
 80128da:	4603      	mov	r3, r0
 80128dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80128de:	7dfb      	ldrb	r3, [r7, #23]
 80128e0:	2bff      	cmp	r3, #255	@ 0xff
 80128e2:	d025      	beq.n	8012930 <USBD_LL_DataInStage+0x15a>
 80128e4:	7dfb      	ldrb	r3, [r7, #23]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d122      	bne.n	8012930 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	2b03      	cmp	r3, #3
 80128f4:	d11c      	bne.n	8012930 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80128f6:	7dfa      	ldrb	r2, [r7, #23]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	32ae      	adds	r2, #174	@ 0xae
 80128fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012900:	695b      	ldr	r3, [r3, #20]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d014      	beq.n	8012930 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012906:	7dfa      	ldrb	r2, [r7, #23]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801290e:	7dfa      	ldrb	r2, [r7, #23]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	32ae      	adds	r2, #174	@ 0xae
 8012914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012918:	695b      	ldr	r3, [r3, #20]
 801291a:	7afa      	ldrb	r2, [r7, #11]
 801291c:	4611      	mov	r1, r2
 801291e:	68f8      	ldr	r0, [r7, #12]
 8012920:	4798      	blx	r3
 8012922:	4603      	mov	r3, r0
 8012924:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012926:	7dbb      	ldrb	r3, [r7, #22]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d001      	beq.n	8012930 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801292c:	7dbb      	ldrb	r3, [r7, #22]
 801292e:	e000      	b.n	8012932 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3718      	adds	r7, #24
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801293a:	b580      	push	{r7, lr}
 801293c:	b084      	sub	sp, #16
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012942:	2300      	movs	r3, #0
 8012944:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2201      	movs	r2, #1
 801294a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2200      	movs	r2, #0
 8012960:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012972:	2b00      	cmp	r3, #0
 8012974:	d014      	beq.n	80129a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d00e      	beq.n	80129a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	6852      	ldr	r2, [r2, #4]
 801298e:	b2d2      	uxtb	r2, r2
 8012990:	4611      	mov	r1, r2
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	4798      	blx	r3
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d001      	beq.n	80129a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801299c:	2303      	movs	r3, #3
 801299e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80129a0:	2340      	movs	r3, #64	@ 0x40
 80129a2:	2200      	movs	r2, #0
 80129a4:	2100      	movs	r1, #0
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f004 fdc3 	bl	8017532 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2201      	movs	r2, #1
 80129b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2240      	movs	r2, #64	@ 0x40
 80129b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80129bc:	2340      	movs	r3, #64	@ 0x40
 80129be:	2200      	movs	r2, #0
 80129c0:	2180      	movs	r1, #128	@ 0x80
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f004 fdb5 	bl	8017532 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2201      	movs	r2, #1
 80129cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2240      	movs	r2, #64	@ 0x40
 80129d2:	621a      	str	r2, [r3, #32]

  return ret;
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80129de:	b480      	push	{r7}
 80129e0:	b083      	sub	sp, #12
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
 80129e6:	460b      	mov	r3, r1
 80129e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	78fa      	ldrb	r2, [r7, #3]
 80129ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	370c      	adds	r7, #12
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr

080129fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80129fe:	b480      	push	{r7}
 8012a00:	b083      	sub	sp, #12
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	2b04      	cmp	r3, #4
 8012a10:	d006      	beq.n	8012a20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a18:	b2da      	uxtb	r2, r3
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2204      	movs	r2, #4
 8012a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012a28:	2300      	movs	r3, #0
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	370c      	adds	r7, #12
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a34:	4770      	bx	lr

08012a36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012a36:	b480      	push	{r7}
 8012a38:	b083      	sub	sp, #12
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a44:	b2db      	uxtb	r3, r3
 8012a46:	2b04      	cmp	r3, #4
 8012a48:	d106      	bne.n	8012a58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b082      	sub	sp, #8
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	2b03      	cmp	r3, #3
 8012a78:	d110      	bne.n	8012a9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d00b      	beq.n	8012a9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a8a:	69db      	ldr	r3, [r3, #28]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d005      	beq.n	8012a9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a96:	69db      	ldr	r3, [r3, #28]
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012a9c:	2300      	movs	r3, #0
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b082      	sub	sp, #8
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
 8012aae:	460b      	mov	r3, r1
 8012ab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	32ae      	adds	r2, #174	@ 0xae
 8012abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d101      	bne.n	8012ac8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012ac4:	2303      	movs	r3, #3
 8012ac6:	e01c      	b.n	8012b02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b03      	cmp	r3, #3
 8012ad2:	d115      	bne.n	8012b00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	32ae      	adds	r2, #174	@ 0xae
 8012ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ae2:	6a1b      	ldr	r3, [r3, #32]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d00b      	beq.n	8012b00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	32ae      	adds	r2, #174	@ 0xae
 8012af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af6:	6a1b      	ldr	r3, [r3, #32]
 8012af8:	78fa      	ldrb	r2, [r7, #3]
 8012afa:	4611      	mov	r1, r2
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012b00:	2300      	movs	r3, #0
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b082      	sub	sp, #8
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
 8012b12:	460b      	mov	r3, r1
 8012b14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	32ae      	adds	r2, #174	@ 0xae
 8012b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d101      	bne.n	8012b2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012b28:	2303      	movs	r3, #3
 8012b2a:	e01c      	b.n	8012b66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	2b03      	cmp	r3, #3
 8012b36:	d115      	bne.n	8012b64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	32ae      	adds	r2, #174	@ 0xae
 8012b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d00b      	beq.n	8012b64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	32ae      	adds	r2, #174	@ 0xae
 8012b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b5c:	78fa      	ldrb	r2, [r7, #3]
 8012b5e:	4611      	mov	r1, r2
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012b64:	2300      	movs	r3, #0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012b6e:	b480      	push	{r7}
 8012b70:	b083      	sub	sp, #12
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012b76:	2300      	movs	r3, #0
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	370c      	adds	r7, #12
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2201      	movs	r2, #1
 8012b94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00e      	beq.n	8012bc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	6852      	ldr	r2, [r2, #4]
 8012bae:	b2d2      	uxtb	r2, r2
 8012bb0:	4611      	mov	r1, r2
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	4798      	blx	r3
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d001      	beq.n	8012bc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012bbc:	2303      	movs	r3, #3
 8012bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}

08012bca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012bca:	b480      	push	{r7}
 8012bcc:	b083      	sub	sp, #12
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
 8012bd2:	460b      	mov	r3, r1
 8012bd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012bd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	370c      	adds	r7, #12
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr

08012be4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	460b      	mov	r3, r1
 8012bee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012bf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	370c      	adds	r7, #12
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr

08012bfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012bfe:	b580      	push	{r7, lr}
 8012c00:	b086      	sub	sp, #24
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	6078      	str	r0, [r7, #4]
 8012c06:	460b      	mov	r3, r1
 8012c08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012c12:	2300      	movs	r3, #0
 8012c14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	885b      	ldrh	r3, [r3, #2]
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	7812      	ldrb	r2, [r2, #0]
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d91f      	bls.n	8012c64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012c2a:	e013      	b.n	8012c54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012c2c:	f107 030a 	add.w	r3, r7, #10
 8012c30:	4619      	mov	r1, r3
 8012c32:	6978      	ldr	r0, [r7, #20]
 8012c34:	f000 f81b 	bl	8012c6e <USBD_GetNextDesc>
 8012c38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	785b      	ldrb	r3, [r3, #1]
 8012c3e:	2b05      	cmp	r3, #5
 8012c40:	d108      	bne.n	8012c54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	789b      	ldrb	r3, [r3, #2]
 8012c4a:	78fa      	ldrb	r2, [r7, #3]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d008      	beq.n	8012c62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012c50:	2300      	movs	r3, #0
 8012c52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	885b      	ldrh	r3, [r3, #2]
 8012c58:	b29a      	uxth	r2, r3
 8012c5a:	897b      	ldrh	r3, [r7, #10]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d8e5      	bhi.n	8012c2c <USBD_GetEpDesc+0x2e>
 8012c60:	e000      	b.n	8012c64 <USBD_GetEpDesc+0x66>
          break;
 8012c62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012c64:	693b      	ldr	r3, [r7, #16]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3718      	adds	r7, #24
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012c6e:	b480      	push	{r7}
 8012c70:	b085      	sub	sp, #20
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	6078      	str	r0, [r7, #4]
 8012c76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	7812      	ldrb	r2, [r2, #0]
 8012c84:	4413      	add	r3, r2
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	461a      	mov	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4413      	add	r3, r2
 8012c96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012c98:	68fb      	ldr	r3, [r7, #12]
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3714      	adds	r7, #20
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca4:	4770      	bx	lr

08012ca6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012ca6:	b480      	push	{r7}
 8012ca8:	b087      	sub	sp, #28
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	3301      	adds	r3, #1
 8012cbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012cc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012cc8:	021b      	lsls	r3, r3, #8
 8012cca:	b21a      	sxth	r2, r3
 8012ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012cd0:	4313      	orrs	r3, r2
 8012cd2:	b21b      	sxth	r3, r3
 8012cd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	371c      	adds	r7, #28
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012cfa:	2b40      	cmp	r3, #64	@ 0x40
 8012cfc:	d005      	beq.n	8012d0a <USBD_StdDevReq+0x26>
 8012cfe:	2b40      	cmp	r3, #64	@ 0x40
 8012d00:	d857      	bhi.n	8012db2 <USBD_StdDevReq+0xce>
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d00f      	beq.n	8012d26 <USBD_StdDevReq+0x42>
 8012d06:	2b20      	cmp	r3, #32
 8012d08:	d153      	bne.n	8012db2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	32ae      	adds	r2, #174	@ 0xae
 8012d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	6839      	ldr	r1, [r7, #0]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	4798      	blx	r3
 8012d20:	4603      	mov	r3, r0
 8012d22:	73fb      	strb	r3, [r7, #15]
      break;
 8012d24:	e04a      	b.n	8012dbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	785b      	ldrb	r3, [r3, #1]
 8012d2a:	2b09      	cmp	r3, #9
 8012d2c:	d83b      	bhi.n	8012da6 <USBD_StdDevReq+0xc2>
 8012d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8012d34 <USBD_StdDevReq+0x50>)
 8012d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d34:	08012d89 	.word	0x08012d89
 8012d38:	08012d9d 	.word	0x08012d9d
 8012d3c:	08012da7 	.word	0x08012da7
 8012d40:	08012d93 	.word	0x08012d93
 8012d44:	08012da7 	.word	0x08012da7
 8012d48:	08012d67 	.word	0x08012d67
 8012d4c:	08012d5d 	.word	0x08012d5d
 8012d50:	08012da7 	.word	0x08012da7
 8012d54:	08012d7f 	.word	0x08012d7f
 8012d58:	08012d71 	.word	0x08012d71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012d5c:	6839      	ldr	r1, [r7, #0]
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f000 fa3c 	bl	80131dc <USBD_GetDescriptor>
          break;
 8012d64:	e024      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012d66:	6839      	ldr	r1, [r7, #0]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 fba1 	bl	80134b0 <USBD_SetAddress>
          break;
 8012d6e:	e01f      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012d70:	6839      	ldr	r1, [r7, #0]
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 fbe0 	bl	8013538 <USBD_SetConfig>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8012d7c:	e018      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012d7e:	6839      	ldr	r1, [r7, #0]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 fc83 	bl	801368c <USBD_GetConfig>
          break;
 8012d86:	e013      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 fcb4 	bl	80136f8 <USBD_GetStatus>
          break;
 8012d90:	e00e      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 fce3 	bl	8013760 <USBD_SetFeature>
          break;
 8012d9a:	e009      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012d9c:	6839      	ldr	r1, [r7, #0]
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f000 fd07 	bl	80137b2 <USBD_ClrFeature>
          break;
 8012da4:	e004      	b.n	8012db0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012da6:	6839      	ldr	r1, [r7, #0]
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 fd5e 	bl	801386a <USBD_CtlError>
          break;
 8012dae:	bf00      	nop
      }
      break;
 8012db0:	e004      	b.n	8012dbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012db2:	6839      	ldr	r1, [r7, #0]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 fd58 	bl	801386a <USBD_CtlError>
      break;
 8012dba:	bf00      	nop
  }

  return ret;
 8012dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3710      	adds	r7, #16
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop

08012dc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012dde:	2b40      	cmp	r3, #64	@ 0x40
 8012de0:	d005      	beq.n	8012dee <USBD_StdItfReq+0x26>
 8012de2:	2b40      	cmp	r3, #64	@ 0x40
 8012de4:	d852      	bhi.n	8012e8c <USBD_StdItfReq+0xc4>
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d001      	beq.n	8012dee <USBD_StdItfReq+0x26>
 8012dea:	2b20      	cmp	r3, #32
 8012dec:	d14e      	bne.n	8012e8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	3b01      	subs	r3, #1
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	d840      	bhi.n	8012e7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	889b      	ldrh	r3, [r3, #4]
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d836      	bhi.n	8012e74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	889b      	ldrh	r3, [r3, #4]
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7ff fedb 	bl	8012bca <USBD_CoreFindIF>
 8012e14:	4603      	mov	r3, r0
 8012e16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e18:	7bbb      	ldrb	r3, [r7, #14]
 8012e1a:	2bff      	cmp	r3, #255	@ 0xff
 8012e1c:	d01d      	beq.n	8012e5a <USBD_StdItfReq+0x92>
 8012e1e:	7bbb      	ldrb	r3, [r7, #14]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d11a      	bne.n	8012e5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012e24:	7bba      	ldrb	r2, [r7, #14]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	32ae      	adds	r2, #174	@ 0xae
 8012e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00f      	beq.n	8012e54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012e34:	7bba      	ldrb	r2, [r7, #14]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012e3c:	7bba      	ldrb	r2, [r7, #14]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	32ae      	adds	r2, #174	@ 0xae
 8012e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e46:	689b      	ldr	r3, [r3, #8]
 8012e48:	6839      	ldr	r1, [r7, #0]
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	4798      	blx	r3
 8012e4e:	4603      	mov	r3, r0
 8012e50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012e52:	e004      	b.n	8012e5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012e54:	2303      	movs	r3, #3
 8012e56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012e58:	e001      	b.n	8012e5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	88db      	ldrh	r3, [r3, #6]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d110      	bne.n	8012e88 <USBD_StdItfReq+0xc0>
 8012e66:	7bfb      	ldrb	r3, [r7, #15]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d10d      	bne.n	8012e88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 fdd3 	bl	8013a18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012e72:	e009      	b.n	8012e88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012e74:	6839      	ldr	r1, [r7, #0]
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 fcf7 	bl	801386a <USBD_CtlError>
          break;
 8012e7c:	e004      	b.n	8012e88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012e7e:	6839      	ldr	r1, [r7, #0]
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f000 fcf2 	bl	801386a <USBD_CtlError>
          break;
 8012e86:	e000      	b.n	8012e8a <USBD_StdItfReq+0xc2>
          break;
 8012e88:	bf00      	nop
      }
      break;
 8012e8a:	e004      	b.n	8012e96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012e8c:	6839      	ldr	r1, [r7, #0]
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 fceb 	bl	801386a <USBD_CtlError>
      break;
 8012e94:	bf00      	nop
  }

  return ret;
 8012e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3710      	adds	r7, #16
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	889b      	ldrh	r3, [r3, #4]
 8012eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012ebc:	2b40      	cmp	r3, #64	@ 0x40
 8012ebe:	d007      	beq.n	8012ed0 <USBD_StdEPReq+0x30>
 8012ec0:	2b40      	cmp	r3, #64	@ 0x40
 8012ec2:	f200 817f 	bhi.w	80131c4 <USBD_StdEPReq+0x324>
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d02a      	beq.n	8012f20 <USBD_StdEPReq+0x80>
 8012eca:	2b20      	cmp	r3, #32
 8012ecc:	f040 817a 	bne.w	80131c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012ed0:	7bbb      	ldrb	r3, [r7, #14]
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ff fe85 	bl	8012be4 <USBD_CoreFindEP>
 8012eda:	4603      	mov	r3, r0
 8012edc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ede:	7b7b      	ldrb	r3, [r7, #13]
 8012ee0:	2bff      	cmp	r3, #255	@ 0xff
 8012ee2:	f000 8174 	beq.w	80131ce <USBD_StdEPReq+0x32e>
 8012ee6:	7b7b      	ldrb	r3, [r7, #13]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	f040 8170 	bne.w	80131ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012eee:	7b7a      	ldrb	r2, [r7, #13]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012ef6:	7b7a      	ldrb	r2, [r7, #13]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	32ae      	adds	r2, #174	@ 0xae
 8012efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 8163 	beq.w	80131ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012f08:	7b7a      	ldrb	r2, [r7, #13]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	32ae      	adds	r2, #174	@ 0xae
 8012f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f12:	689b      	ldr	r3, [r3, #8]
 8012f14:	6839      	ldr	r1, [r7, #0]
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	4798      	blx	r3
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012f1e:	e156      	b.n	80131ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	785b      	ldrb	r3, [r3, #1]
 8012f24:	2b03      	cmp	r3, #3
 8012f26:	d008      	beq.n	8012f3a <USBD_StdEPReq+0x9a>
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	f300 8145 	bgt.w	80131b8 <USBD_StdEPReq+0x318>
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f000 809b 	beq.w	801306a <USBD_StdEPReq+0x1ca>
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d03c      	beq.n	8012fb2 <USBD_StdEPReq+0x112>
 8012f38:	e13e      	b.n	80131b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b02      	cmp	r3, #2
 8012f44:	d002      	beq.n	8012f4c <USBD_StdEPReq+0xac>
 8012f46:	2b03      	cmp	r3, #3
 8012f48:	d016      	beq.n	8012f78 <USBD_StdEPReq+0xd8>
 8012f4a:	e02c      	b.n	8012fa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f4c:	7bbb      	ldrb	r3, [r7, #14]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00d      	beq.n	8012f6e <USBD_StdEPReq+0xce>
 8012f52:	7bbb      	ldrb	r3, [r7, #14]
 8012f54:	2b80      	cmp	r3, #128	@ 0x80
 8012f56:	d00a      	beq.n	8012f6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f58:	7bbb      	ldrb	r3, [r7, #14]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f004 fb2d 	bl	80175bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f62:	2180      	movs	r1, #128	@ 0x80
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f004 fb29 	bl	80175bc <USBD_LL_StallEP>
 8012f6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f6c:	e020      	b.n	8012fb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012f6e:	6839      	ldr	r1, [r7, #0]
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f000 fc7a 	bl	801386a <USBD_CtlError>
              break;
 8012f76:	e01b      	b.n	8012fb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	885b      	ldrh	r3, [r3, #2]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d10e      	bne.n	8012f9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012f80:	7bbb      	ldrb	r3, [r7, #14]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d00b      	beq.n	8012f9e <USBD_StdEPReq+0xfe>
 8012f86:	7bbb      	ldrb	r3, [r7, #14]
 8012f88:	2b80      	cmp	r3, #128	@ 0x80
 8012f8a:	d008      	beq.n	8012f9e <USBD_StdEPReq+0xfe>
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	88db      	ldrh	r3, [r3, #6]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d104      	bne.n	8012f9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f94:	7bbb      	ldrb	r3, [r7, #14]
 8012f96:	4619      	mov	r1, r3
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f004 fb0f 	bl	80175bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 fd3a 	bl	8013a18 <USBD_CtlSendStatus>

              break;
 8012fa4:	e004      	b.n	8012fb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012fa6:	6839      	ldr	r1, [r7, #0]
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f000 fc5e 	bl	801386a <USBD_CtlError>
              break;
 8012fae:	bf00      	nop
          }
          break;
 8012fb0:	e107      	b.n	80131c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fb8:	b2db      	uxtb	r3, r3
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d002      	beq.n	8012fc4 <USBD_StdEPReq+0x124>
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d016      	beq.n	8012ff0 <USBD_StdEPReq+0x150>
 8012fc2:	e04b      	b.n	801305c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012fc4:	7bbb      	ldrb	r3, [r7, #14]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00d      	beq.n	8012fe6 <USBD_StdEPReq+0x146>
 8012fca:	7bbb      	ldrb	r3, [r7, #14]
 8012fcc:	2b80      	cmp	r3, #128	@ 0x80
 8012fce:	d00a      	beq.n	8012fe6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012fd0:	7bbb      	ldrb	r3, [r7, #14]
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f004 faf1 	bl	80175bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fda:	2180      	movs	r1, #128	@ 0x80
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f004 faed 	bl	80175bc <USBD_LL_StallEP>
 8012fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012fe4:	e040      	b.n	8013068 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012fe6:	6839      	ldr	r1, [r7, #0]
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 fc3e 	bl	801386a <USBD_CtlError>
              break;
 8012fee:	e03b      	b.n	8013068 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	885b      	ldrh	r3, [r3, #2]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d136      	bne.n	8013066 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012ff8:	7bbb      	ldrb	r3, [r7, #14]
 8012ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d004      	beq.n	801300c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013002:	7bbb      	ldrb	r3, [r7, #14]
 8013004:	4619      	mov	r1, r3
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f004 faf7 	bl	80175fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 fd03 	bl	8013a18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013012:	7bbb      	ldrb	r3, [r7, #14]
 8013014:	4619      	mov	r1, r3
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7ff fde4 	bl	8012be4 <USBD_CoreFindEP>
 801301c:	4603      	mov	r3, r0
 801301e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013020:	7b7b      	ldrb	r3, [r7, #13]
 8013022:	2bff      	cmp	r3, #255	@ 0xff
 8013024:	d01f      	beq.n	8013066 <USBD_StdEPReq+0x1c6>
 8013026:	7b7b      	ldrb	r3, [r7, #13]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d11c      	bne.n	8013066 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801302c:	7b7a      	ldrb	r2, [r7, #13]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013034:	7b7a      	ldrb	r2, [r7, #13]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	32ae      	adds	r2, #174	@ 0xae
 801303a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801303e:	689b      	ldr	r3, [r3, #8]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d010      	beq.n	8013066 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013044:	7b7a      	ldrb	r2, [r7, #13]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	32ae      	adds	r2, #174	@ 0xae
 801304a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	6839      	ldr	r1, [r7, #0]
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	4798      	blx	r3
 8013056:	4603      	mov	r3, r0
 8013058:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801305a:	e004      	b.n	8013066 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801305c:	6839      	ldr	r1, [r7, #0]
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fc03 	bl	801386a <USBD_CtlError>
              break;
 8013064:	e000      	b.n	8013068 <USBD_StdEPReq+0x1c8>
              break;
 8013066:	bf00      	nop
          }
          break;
 8013068:	e0ab      	b.n	80131c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013070:	b2db      	uxtb	r3, r3
 8013072:	2b02      	cmp	r3, #2
 8013074:	d002      	beq.n	801307c <USBD_StdEPReq+0x1dc>
 8013076:	2b03      	cmp	r3, #3
 8013078:	d032      	beq.n	80130e0 <USBD_StdEPReq+0x240>
 801307a:	e097      	b.n	80131ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801307c:	7bbb      	ldrb	r3, [r7, #14]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d007      	beq.n	8013092 <USBD_StdEPReq+0x1f2>
 8013082:	7bbb      	ldrb	r3, [r7, #14]
 8013084:	2b80      	cmp	r3, #128	@ 0x80
 8013086:	d004      	beq.n	8013092 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013088:	6839      	ldr	r1, [r7, #0]
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 fbed 	bl	801386a <USBD_CtlError>
                break;
 8013090:	e091      	b.n	80131b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013096:	2b00      	cmp	r3, #0
 8013098:	da0b      	bge.n	80130b2 <USBD_StdEPReq+0x212>
 801309a:	7bbb      	ldrb	r3, [r7, #14]
 801309c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130a0:	4613      	mov	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4413      	add	r3, r2
 80130a6:	009b      	lsls	r3, r3, #2
 80130a8:	3310      	adds	r3, #16
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	4413      	add	r3, r2
 80130ae:	3304      	adds	r3, #4
 80130b0:	e00b      	b.n	80130ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80130b2:	7bbb      	ldrb	r3, [r7, #14]
 80130b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130b8:	4613      	mov	r3, r2
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	4413      	add	r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	4413      	add	r3, r2
 80130c8:	3304      	adds	r3, #4
 80130ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	2200      	movs	r2, #0
 80130d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	2202      	movs	r2, #2
 80130d6:	4619      	mov	r1, r3
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fc43 	bl	8013964 <USBD_CtlSendData>
              break;
 80130de:	e06a      	b.n	80131b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80130e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	da11      	bge.n	801310c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80130e8:	7bbb      	ldrb	r3, [r7, #14]
 80130ea:	f003 020f 	and.w	r2, r3, #15
 80130ee:	6879      	ldr	r1, [r7, #4]
 80130f0:	4613      	mov	r3, r2
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	4413      	add	r3, r2
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	440b      	add	r3, r1
 80130fa:	3324      	adds	r3, #36	@ 0x24
 80130fc:	881b      	ldrh	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d117      	bne.n	8013132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013102:	6839      	ldr	r1, [r7, #0]
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 fbb0 	bl	801386a <USBD_CtlError>
                  break;
 801310a:	e054      	b.n	80131b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801310c:	7bbb      	ldrb	r3, [r7, #14]
 801310e:	f003 020f 	and.w	r2, r3, #15
 8013112:	6879      	ldr	r1, [r7, #4]
 8013114:	4613      	mov	r3, r2
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	4413      	add	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	440b      	add	r3, r1
 801311e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013122:	881b      	ldrh	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d104      	bne.n	8013132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013128:	6839      	ldr	r1, [r7, #0]
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 fb9d 	bl	801386a <USBD_CtlError>
                  break;
 8013130:	e041      	b.n	80131b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013136:	2b00      	cmp	r3, #0
 8013138:	da0b      	bge.n	8013152 <USBD_StdEPReq+0x2b2>
 801313a:	7bbb      	ldrb	r3, [r7, #14]
 801313c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013140:	4613      	mov	r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	3310      	adds	r3, #16
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	4413      	add	r3, r2
 801314e:	3304      	adds	r3, #4
 8013150:	e00b      	b.n	801316a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013152:	7bbb      	ldrb	r3, [r7, #14]
 8013154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013158:	4613      	mov	r3, r2
 801315a:	009b      	lsls	r3, r3, #2
 801315c:	4413      	add	r3, r2
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	4413      	add	r3, r2
 8013168:	3304      	adds	r3, #4
 801316a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801316c:	7bbb      	ldrb	r3, [r7, #14]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d002      	beq.n	8013178 <USBD_StdEPReq+0x2d8>
 8013172:	7bbb      	ldrb	r3, [r7, #14]
 8013174:	2b80      	cmp	r3, #128	@ 0x80
 8013176:	d103      	bne.n	8013180 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	2200      	movs	r2, #0
 801317c:	601a      	str	r2, [r3, #0]
 801317e:	e00e      	b.n	801319e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013180:	7bbb      	ldrb	r3, [r7, #14]
 8013182:	4619      	mov	r1, r3
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f004 fa57 	bl	8017638 <USBD_LL_IsStallEP>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d003      	beq.n	8013198 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	2201      	movs	r2, #1
 8013194:	601a      	str	r2, [r3, #0]
 8013196:	e002      	b.n	801319e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	2200      	movs	r2, #0
 801319c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	2202      	movs	r2, #2
 80131a2:	4619      	mov	r1, r3
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 fbdd 	bl	8013964 <USBD_CtlSendData>
              break;
 80131aa:	e004      	b.n	80131b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80131ac:	6839      	ldr	r1, [r7, #0]
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 fb5b 	bl	801386a <USBD_CtlError>
              break;
 80131b4:	bf00      	nop
          }
          break;
 80131b6:	e004      	b.n	80131c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80131b8:	6839      	ldr	r1, [r7, #0]
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 fb55 	bl	801386a <USBD_CtlError>
          break;
 80131c0:	bf00      	nop
      }
      break;
 80131c2:	e005      	b.n	80131d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80131c4:	6839      	ldr	r1, [r7, #0]
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 fb4f 	bl	801386a <USBD_CtlError>
      break;
 80131cc:	e000      	b.n	80131d0 <USBD_StdEPReq+0x330>
      break;
 80131ce:	bf00      	nop
  }

  return ret;
 80131d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3710      	adds	r7, #16
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
	...

080131dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80131e6:	2300      	movs	r3, #0
 80131e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80131ee:	2300      	movs	r3, #0
 80131f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	885b      	ldrh	r3, [r3, #2]
 80131f6:	0a1b      	lsrs	r3, r3, #8
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	3b01      	subs	r3, #1
 80131fc:	2b06      	cmp	r3, #6
 80131fe:	f200 8128 	bhi.w	8013452 <USBD_GetDescriptor+0x276>
 8013202:	a201      	add	r2, pc, #4	@ (adr r2, 8013208 <USBD_GetDescriptor+0x2c>)
 8013204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013208:	08013225 	.word	0x08013225
 801320c:	0801323d 	.word	0x0801323d
 8013210:	0801327d 	.word	0x0801327d
 8013214:	08013453 	.word	0x08013453
 8013218:	08013453 	.word	0x08013453
 801321c:	080133f3 	.word	0x080133f3
 8013220:	0801341f 	.word	0x0801341f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	7c12      	ldrb	r2, [r2, #16]
 8013230:	f107 0108 	add.w	r1, r7, #8
 8013234:	4610      	mov	r0, r2
 8013236:	4798      	blx	r3
 8013238:	60f8      	str	r0, [r7, #12]
      break;
 801323a:	e112      	b.n	8013462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	7c1b      	ldrb	r3, [r3, #16]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10d      	bne.n	8013260 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801324c:	f107 0208 	add.w	r2, r7, #8
 8013250:	4610      	mov	r0, r2
 8013252:	4798      	blx	r3
 8013254:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	3301      	adds	r3, #1
 801325a:	2202      	movs	r2, #2
 801325c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801325e:	e100      	b.n	8013462 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013268:	f107 0208 	add.w	r2, r7, #8
 801326c:	4610      	mov	r0, r2
 801326e:	4798      	blx	r3
 8013270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	3301      	adds	r3, #1
 8013276:	2202      	movs	r2, #2
 8013278:	701a      	strb	r2, [r3, #0]
      break;
 801327a:	e0f2      	b.n	8013462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	885b      	ldrh	r3, [r3, #2]
 8013280:	b2db      	uxtb	r3, r3
 8013282:	2b05      	cmp	r3, #5
 8013284:	f200 80ac 	bhi.w	80133e0 <USBD_GetDescriptor+0x204>
 8013288:	a201      	add	r2, pc, #4	@ (adr r2, 8013290 <USBD_GetDescriptor+0xb4>)
 801328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801328e:	bf00      	nop
 8013290:	080132a9 	.word	0x080132a9
 8013294:	080132dd 	.word	0x080132dd
 8013298:	08013311 	.word	0x08013311
 801329c:	08013345 	.word	0x08013345
 80132a0:	08013379 	.word	0x08013379
 80132a4:	080133ad 	.word	0x080133ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00b      	beq.n	80132cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	7c12      	ldrb	r2, [r2, #16]
 80132c0:	f107 0108 	add.w	r1, r7, #8
 80132c4:	4610      	mov	r0, r2
 80132c6:	4798      	blx	r3
 80132c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132ca:	e091      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132cc:	6839      	ldr	r1, [r7, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f000 facb 	bl	801386a <USBD_CtlError>
            err++;
 80132d4:	7afb      	ldrb	r3, [r7, #11]
 80132d6:	3301      	adds	r3, #1
 80132d8:	72fb      	strb	r3, [r7, #11]
          break;
 80132da:	e089      	b.n	80133f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d00b      	beq.n	8013300 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	7c12      	ldrb	r2, [r2, #16]
 80132f4:	f107 0108 	add.w	r1, r7, #8
 80132f8:	4610      	mov	r0, r2
 80132fa:	4798      	blx	r3
 80132fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132fe:	e077      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013300:	6839      	ldr	r1, [r7, #0]
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 fab1 	bl	801386a <USBD_CtlError>
            err++;
 8013308:	7afb      	ldrb	r3, [r7, #11]
 801330a:	3301      	adds	r3, #1
 801330c:	72fb      	strb	r3, [r7, #11]
          break;
 801330e:	e06f      	b.n	80133f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d00b      	beq.n	8013334 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013322:	68db      	ldr	r3, [r3, #12]
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	7c12      	ldrb	r2, [r2, #16]
 8013328:	f107 0108 	add.w	r1, r7, #8
 801332c:	4610      	mov	r0, r2
 801332e:	4798      	blx	r3
 8013330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013332:	e05d      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013334:	6839      	ldr	r1, [r7, #0]
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f000 fa97 	bl	801386a <USBD_CtlError>
            err++;
 801333c:	7afb      	ldrb	r3, [r7, #11]
 801333e:	3301      	adds	r3, #1
 8013340:	72fb      	strb	r3, [r7, #11]
          break;
 8013342:	e055      	b.n	80133f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00b      	beq.n	8013368 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013356:	691b      	ldr	r3, [r3, #16]
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	7c12      	ldrb	r2, [r2, #16]
 801335c:	f107 0108 	add.w	r1, r7, #8
 8013360:	4610      	mov	r0, r2
 8013362:	4798      	blx	r3
 8013364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013366:	e043      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013368:	6839      	ldr	r1, [r7, #0]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f000 fa7d 	bl	801386a <USBD_CtlError>
            err++;
 8013370:	7afb      	ldrb	r3, [r7, #11]
 8013372:	3301      	adds	r3, #1
 8013374:	72fb      	strb	r3, [r7, #11]
          break;
 8013376:	e03b      	b.n	80133f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801337e:	695b      	ldr	r3, [r3, #20]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d00b      	beq.n	801339c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801338a:	695b      	ldr	r3, [r3, #20]
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	7c12      	ldrb	r2, [r2, #16]
 8013390:	f107 0108 	add.w	r1, r7, #8
 8013394:	4610      	mov	r0, r2
 8013396:	4798      	blx	r3
 8013398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801339a:	e029      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801339c:	6839      	ldr	r1, [r7, #0]
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f000 fa63 	bl	801386a <USBD_CtlError>
            err++;
 80133a4:	7afb      	ldrb	r3, [r7, #11]
 80133a6:	3301      	adds	r3, #1
 80133a8:	72fb      	strb	r3, [r7, #11]
          break;
 80133aa:	e021      	b.n	80133f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80133b2:	699b      	ldr	r3, [r3, #24]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d00b      	beq.n	80133d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80133be:	699b      	ldr	r3, [r3, #24]
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	7c12      	ldrb	r2, [r2, #16]
 80133c4:	f107 0108 	add.w	r1, r7, #8
 80133c8:	4610      	mov	r0, r2
 80133ca:	4798      	blx	r3
 80133cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133ce:	e00f      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 fa49 	bl	801386a <USBD_CtlError>
            err++;
 80133d8:	7afb      	ldrb	r3, [r7, #11]
 80133da:	3301      	adds	r3, #1
 80133dc:	72fb      	strb	r3, [r7, #11]
          break;
 80133de:	e007      	b.n	80133f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80133e0:	6839      	ldr	r1, [r7, #0]
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 fa41 	bl	801386a <USBD_CtlError>
          err++;
 80133e8:	7afb      	ldrb	r3, [r7, #11]
 80133ea:	3301      	adds	r3, #1
 80133ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80133ee:	bf00      	nop
      }
      break;
 80133f0:	e037      	b.n	8013462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	7c1b      	ldrb	r3, [r3, #16]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d109      	bne.n	801340e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013402:	f107 0208 	add.w	r2, r7, #8
 8013406:	4610      	mov	r0, r2
 8013408:	4798      	blx	r3
 801340a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801340c:	e029      	b.n	8013462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801340e:	6839      	ldr	r1, [r7, #0]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 fa2a 	bl	801386a <USBD_CtlError>
        err++;
 8013416:	7afb      	ldrb	r3, [r7, #11]
 8013418:	3301      	adds	r3, #1
 801341a:	72fb      	strb	r3, [r7, #11]
      break;
 801341c:	e021      	b.n	8013462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	7c1b      	ldrb	r3, [r3, #16]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d10d      	bne.n	8013442 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801342e:	f107 0208 	add.w	r2, r7, #8
 8013432:	4610      	mov	r0, r2
 8013434:	4798      	blx	r3
 8013436:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	3301      	adds	r3, #1
 801343c:	2207      	movs	r2, #7
 801343e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013440:	e00f      	b.n	8013462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013442:	6839      	ldr	r1, [r7, #0]
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f000 fa10 	bl	801386a <USBD_CtlError>
        err++;
 801344a:	7afb      	ldrb	r3, [r7, #11]
 801344c:	3301      	adds	r3, #1
 801344e:	72fb      	strb	r3, [r7, #11]
      break;
 8013450:	e007      	b.n	8013462 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8013452:	6839      	ldr	r1, [r7, #0]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 fa08 	bl	801386a <USBD_CtlError>
      err++;
 801345a:	7afb      	ldrb	r3, [r7, #11]
 801345c:	3301      	adds	r3, #1
 801345e:	72fb      	strb	r3, [r7, #11]
      break;
 8013460:	bf00      	nop
  }

  if (err != 0U)
 8013462:	7afb      	ldrb	r3, [r7, #11]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d11e      	bne.n	80134a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	88db      	ldrh	r3, [r3, #6]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d016      	beq.n	801349e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013470:	893b      	ldrh	r3, [r7, #8]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d00e      	beq.n	8013494 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	88da      	ldrh	r2, [r3, #6]
 801347a:	893b      	ldrh	r3, [r7, #8]
 801347c:	4293      	cmp	r3, r2
 801347e:	bf28      	it	cs
 8013480:	4613      	movcs	r3, r2
 8013482:	b29b      	uxth	r3, r3
 8013484:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013486:	893b      	ldrh	r3, [r7, #8]
 8013488:	461a      	mov	r2, r3
 801348a:	68f9      	ldr	r1, [r7, #12]
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f000 fa69 	bl	8013964 <USBD_CtlSendData>
 8013492:	e009      	b.n	80134a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013494:	6839      	ldr	r1, [r7, #0]
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 f9e7 	bl	801386a <USBD_CtlError>
 801349c:	e004      	b.n	80134a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f000 faba 	bl	8013a18 <USBD_CtlSendStatus>
 80134a4:	e000      	b.n	80134a8 <USBD_GetDescriptor+0x2cc>
    return;
 80134a6:	bf00      	nop
  }
}
 80134a8:	3710      	adds	r7, #16
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop

080134b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	889b      	ldrh	r3, [r3, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d131      	bne.n	8013526 <USBD_SetAddress+0x76>
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	88db      	ldrh	r3, [r3, #6]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d12d      	bne.n	8013526 <USBD_SetAddress+0x76>
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	885b      	ldrh	r3, [r3, #2]
 80134ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80134d0:	d829      	bhi.n	8013526 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	885b      	ldrh	r3, [r3, #2]
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134e4:	b2db      	uxtb	r3, r3
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d104      	bne.n	80134f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80134ea:	6839      	ldr	r1, [r7, #0]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f000 f9bc 	bl	801386a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f2:	e01d      	b.n	8013530 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	7bfa      	ldrb	r2, [r7, #15]
 80134f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80134fc:	7bfb      	ldrb	r3, [r7, #15]
 80134fe:	4619      	mov	r1, r3
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f004 f8c5 	bl	8017690 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 fa86 	bl	8013a18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801350c:	7bfb      	ldrb	r3, [r7, #15]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d004      	beq.n	801351c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2202      	movs	r2, #2
 8013516:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801351a:	e009      	b.n	8013530 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2201      	movs	r2, #1
 8013520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013524:	e004      	b.n	8013530 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013526:	6839      	ldr	r1, [r7, #0]
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f000 f99e 	bl	801386a <USBD_CtlError>
  }
}
 801352e:	bf00      	nop
 8013530:	bf00      	nop
 8013532:	3710      	adds	r7, #16
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}

08013538 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013542:	2300      	movs	r3, #0
 8013544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	885b      	ldrh	r3, [r3, #2]
 801354a:	b2da      	uxtb	r2, r3
 801354c:	4b4e      	ldr	r3, [pc, #312]	@ (8013688 <USBD_SetConfig+0x150>)
 801354e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013550:	4b4d      	ldr	r3, [pc, #308]	@ (8013688 <USBD_SetConfig+0x150>)
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d905      	bls.n	8013564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013558:	6839      	ldr	r1, [r7, #0]
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 f985 	bl	801386a <USBD_CtlError>
    return USBD_FAIL;
 8013560:	2303      	movs	r3, #3
 8013562:	e08c      	b.n	801367e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801356a:	b2db      	uxtb	r3, r3
 801356c:	2b02      	cmp	r3, #2
 801356e:	d002      	beq.n	8013576 <USBD_SetConfig+0x3e>
 8013570:	2b03      	cmp	r3, #3
 8013572:	d029      	beq.n	80135c8 <USBD_SetConfig+0x90>
 8013574:	e075      	b.n	8013662 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013576:	4b44      	ldr	r3, [pc, #272]	@ (8013688 <USBD_SetConfig+0x150>)
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d020      	beq.n	80135c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801357e:	4b42      	ldr	r3, [pc, #264]	@ (8013688 <USBD_SetConfig+0x150>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	461a      	mov	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013588:	4b3f      	ldr	r3, [pc, #252]	@ (8013688 <USBD_SetConfig+0x150>)
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	4619      	mov	r1, r3
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7fe ffe3 	bl	801255a <USBD_SetClassConfig>
 8013594:	4603      	mov	r3, r0
 8013596:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013598:	7bfb      	ldrb	r3, [r7, #15]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d008      	beq.n	80135b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801359e:	6839      	ldr	r1, [r7, #0]
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f000 f962 	bl	801386a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2202      	movs	r2, #2
 80135aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80135ae:	e065      	b.n	801367c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f000 fa31 	bl	8013a18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2203      	movs	r2, #3
 80135ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80135be:	e05d      	b.n	801367c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f000 fa29 	bl	8013a18 <USBD_CtlSendStatus>
      break;
 80135c6:	e059      	b.n	801367c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80135c8:	4b2f      	ldr	r3, [pc, #188]	@ (8013688 <USBD_SetConfig+0x150>)
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d112      	bne.n	80135f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2202      	movs	r2, #2
 80135d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80135d8:	4b2b      	ldr	r3, [pc, #172]	@ (8013688 <USBD_SetConfig+0x150>)
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	461a      	mov	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80135e2:	4b29      	ldr	r3, [pc, #164]	@ (8013688 <USBD_SetConfig+0x150>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	4619      	mov	r1, r3
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7fe ffd2 	bl	8012592 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f000 fa12 	bl	8013a18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80135f4:	e042      	b.n	801367c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80135f6:	4b24      	ldr	r3, [pc, #144]	@ (8013688 <USBD_SetConfig+0x150>)
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	461a      	mov	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	429a      	cmp	r2, r3
 8013602:	d02a      	beq.n	801365a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	b2db      	uxtb	r3, r3
 801360a:	4619      	mov	r1, r3
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7fe ffc0 	bl	8012592 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013612:	4b1d      	ldr	r3, [pc, #116]	@ (8013688 <USBD_SetConfig+0x150>)
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	461a      	mov	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801361c:	4b1a      	ldr	r3, [pc, #104]	@ (8013688 <USBD_SetConfig+0x150>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	4619      	mov	r1, r3
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f7fe ff99 	bl	801255a <USBD_SetClassConfig>
 8013628:	4603      	mov	r3, r0
 801362a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801362c:	7bfb      	ldrb	r3, [r7, #15]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00f      	beq.n	8013652 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013632:	6839      	ldr	r1, [r7, #0]
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f000 f918 	bl	801386a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	b2db      	uxtb	r3, r3
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f7fe ffa5 	bl	8012592 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2202      	movs	r2, #2
 801364c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013650:	e014      	b.n	801367c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 f9e0 	bl	8013a18 <USBD_CtlSendStatus>
      break;
 8013658:	e010      	b.n	801367c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 f9dc 	bl	8013a18 <USBD_CtlSendStatus>
      break;
 8013660:	e00c      	b.n	801367c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013662:	6839      	ldr	r1, [r7, #0]
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f900 	bl	801386a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801366a:	4b07      	ldr	r3, [pc, #28]	@ (8013688 <USBD_SetConfig+0x150>)
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	4619      	mov	r1, r3
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7fe ff8e 	bl	8012592 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013676:	2303      	movs	r3, #3
 8013678:	73fb      	strb	r3, [r7, #15]
      break;
 801367a:	bf00      	nop
  }

  return ret;
 801367c:	7bfb      	ldrb	r3, [r7, #15]
}
 801367e:	4618      	mov	r0, r3
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	20004ac4 	.word	0x20004ac4

0801368c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	88db      	ldrh	r3, [r3, #6]
 801369a:	2b01      	cmp	r3, #1
 801369c:	d004      	beq.n	80136a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801369e:	6839      	ldr	r1, [r7, #0]
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f000 f8e2 	bl	801386a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80136a6:	e023      	b.n	80136f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	2b02      	cmp	r3, #2
 80136b2:	dc02      	bgt.n	80136ba <USBD_GetConfig+0x2e>
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	dc03      	bgt.n	80136c0 <USBD_GetConfig+0x34>
 80136b8:	e015      	b.n	80136e6 <USBD_GetConfig+0x5a>
 80136ba:	2b03      	cmp	r3, #3
 80136bc:	d00b      	beq.n	80136d6 <USBD_GetConfig+0x4a>
 80136be:	e012      	b.n	80136e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2200      	movs	r2, #0
 80136c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	3308      	adds	r3, #8
 80136ca:	2201      	movs	r2, #1
 80136cc:	4619      	mov	r1, r3
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f000 f948 	bl	8013964 <USBD_CtlSendData>
        break;
 80136d4:	e00c      	b.n	80136f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	3304      	adds	r3, #4
 80136da:	2201      	movs	r2, #1
 80136dc:	4619      	mov	r1, r3
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 f940 	bl	8013964 <USBD_CtlSendData>
        break;
 80136e4:	e004      	b.n	80136f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80136e6:	6839      	ldr	r1, [r7, #0]
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f000 f8be 	bl	801386a <USBD_CtlError>
        break;
 80136ee:	bf00      	nop
}
 80136f0:	bf00      	nop
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013708:	b2db      	uxtb	r3, r3
 801370a:	3b01      	subs	r3, #1
 801370c:	2b02      	cmp	r3, #2
 801370e:	d81e      	bhi.n	801374e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	88db      	ldrh	r3, [r3, #6]
 8013714:	2b02      	cmp	r3, #2
 8013716:	d004      	beq.n	8013722 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013718:	6839      	ldr	r1, [r7, #0]
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f000 f8a5 	bl	801386a <USBD_CtlError>
        break;
 8013720:	e01a      	b.n	8013758 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2201      	movs	r2, #1
 8013726:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801372e:	2b00      	cmp	r3, #0
 8013730:	d005      	beq.n	801373e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	f043 0202 	orr.w	r2, r3, #2
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	330c      	adds	r3, #12
 8013742:	2202      	movs	r2, #2
 8013744:	4619      	mov	r1, r3
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f90c 	bl	8013964 <USBD_CtlSendData>
      break;
 801374c:	e004      	b.n	8013758 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801374e:	6839      	ldr	r1, [r7, #0]
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f000 f88a 	bl	801386a <USBD_CtlError>
      break;
 8013756:	bf00      	nop
  }
}
 8013758:	bf00      	nop
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	885b      	ldrh	r3, [r3, #2]
 801376e:	2b01      	cmp	r3, #1
 8013770:	d107      	bne.n	8013782 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2201      	movs	r2, #1
 8013776:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f000 f94c 	bl	8013a18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013780:	e013      	b.n	80137aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	885b      	ldrh	r3, [r3, #2]
 8013786:	2b02      	cmp	r3, #2
 8013788:	d10b      	bne.n	80137a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	889b      	ldrh	r3, [r3, #4]
 801378e:	0a1b      	lsrs	r3, r3, #8
 8013790:	b29b      	uxth	r3, r3
 8013792:	b2da      	uxtb	r2, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 f93c 	bl	8013a18 <USBD_CtlSendStatus>
}
 80137a0:	e003      	b.n	80137aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80137a2:	6839      	ldr	r1, [r7, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f000 f860 	bl	801386a <USBD_CtlError>
}
 80137aa:	bf00      	nop
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137b2:	b580      	push	{r7, lr}
 80137b4:	b082      	sub	sp, #8
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
 80137ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	3b01      	subs	r3, #1
 80137c6:	2b02      	cmp	r3, #2
 80137c8:	d80b      	bhi.n	80137e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	885b      	ldrh	r3, [r3, #2]
 80137ce:	2b01      	cmp	r3, #1
 80137d0:	d10c      	bne.n	80137ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2200      	movs	r2, #0
 80137d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f000 f91c 	bl	8013a18 <USBD_CtlSendStatus>
      }
      break;
 80137e0:	e004      	b.n	80137ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80137e2:	6839      	ldr	r1, [r7, #0]
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f000 f840 	bl	801386a <USBD_CtlError>
      break;
 80137ea:	e000      	b.n	80137ee <USBD_ClrFeature+0x3c>
      break;
 80137ec:	bf00      	nop
  }
}
 80137ee:	bf00      	nop
 80137f0:	3708      	adds	r7, #8
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}

080137f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80137f6:	b580      	push	{r7, lr}
 80137f8:	b084      	sub	sp, #16
 80137fa:	af00      	add	r7, sp, #0
 80137fc:	6078      	str	r0, [r7, #4]
 80137fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	781a      	ldrb	r2, [r3, #0]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	3301      	adds	r3, #1
 8013810:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	781a      	ldrb	r2, [r3, #0]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	3301      	adds	r3, #1
 801381e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f7ff fa40 	bl	8012ca6 <SWAPBYTE>
 8013826:	4603      	mov	r3, r0
 8013828:	461a      	mov	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	3301      	adds	r3, #1
 8013832:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	3301      	adds	r3, #1
 8013838:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801383a:	68f8      	ldr	r0, [r7, #12]
 801383c:	f7ff fa33 	bl	8012ca6 <SWAPBYTE>
 8013840:	4603      	mov	r3, r0
 8013842:	461a      	mov	r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	3301      	adds	r3, #1
 801384c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	3301      	adds	r3, #1
 8013852:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013854:	68f8      	ldr	r0, [r7, #12]
 8013856:	f7ff fa26 	bl	8012ca6 <SWAPBYTE>
 801385a:	4603      	mov	r3, r0
 801385c:	461a      	mov	r2, r3
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	80da      	strh	r2, [r3, #6]
}
 8013862:	bf00      	nop
 8013864:	3710      	adds	r7, #16
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801386a:	b580      	push	{r7, lr}
 801386c:	b082      	sub	sp, #8
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013874:	2180      	movs	r1, #128	@ 0x80
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f003 fea0 	bl	80175bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801387c:	2100      	movs	r1, #0
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f003 fe9c 	bl	80175bc <USBD_LL_StallEP>
}
 8013884:	bf00      	nop
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}

0801388c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b086      	sub	sp, #24
 8013890:	af00      	add	r7, sp, #0
 8013892:	60f8      	str	r0, [r7, #12]
 8013894:	60b9      	str	r1, [r7, #8]
 8013896:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013898:	2300      	movs	r3, #0
 801389a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d042      	beq.n	8013928 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80138a6:	6938      	ldr	r0, [r7, #16]
 80138a8:	f000 f842 	bl	8013930 <USBD_GetLen>
 80138ac:	4603      	mov	r3, r0
 80138ae:	3301      	adds	r3, #1
 80138b0:	005b      	lsls	r3, r3, #1
 80138b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138b6:	d808      	bhi.n	80138ca <USBD_GetString+0x3e>
 80138b8:	6938      	ldr	r0, [r7, #16]
 80138ba:	f000 f839 	bl	8013930 <USBD_GetLen>
 80138be:	4603      	mov	r3, r0
 80138c0:	3301      	adds	r3, #1
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	005b      	lsls	r3, r3, #1
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	e001      	b.n	80138ce <USBD_GetString+0x42>
 80138ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80138d2:	7dfb      	ldrb	r3, [r7, #23]
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	4413      	add	r3, r2
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	7812      	ldrb	r2, [r2, #0]
 80138dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80138de:	7dfb      	ldrb	r3, [r7, #23]
 80138e0:	3301      	adds	r3, #1
 80138e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80138e4:	7dfb      	ldrb	r3, [r7, #23]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	4413      	add	r3, r2
 80138ea:	2203      	movs	r2, #3
 80138ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80138ee:	7dfb      	ldrb	r3, [r7, #23]
 80138f0:	3301      	adds	r3, #1
 80138f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80138f4:	e013      	b.n	801391e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80138f6:	7dfb      	ldrb	r3, [r7, #23]
 80138f8:	68ba      	ldr	r2, [r7, #8]
 80138fa:	4413      	add	r3, r2
 80138fc:	693a      	ldr	r2, [r7, #16]
 80138fe:	7812      	ldrb	r2, [r2, #0]
 8013900:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	3301      	adds	r3, #1
 8013906:	613b      	str	r3, [r7, #16]
    idx++;
 8013908:	7dfb      	ldrb	r3, [r7, #23]
 801390a:	3301      	adds	r3, #1
 801390c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801390e:	7dfb      	ldrb	r3, [r7, #23]
 8013910:	68ba      	ldr	r2, [r7, #8]
 8013912:	4413      	add	r3, r2
 8013914:	2200      	movs	r2, #0
 8013916:	701a      	strb	r2, [r3, #0]
    idx++;
 8013918:	7dfb      	ldrb	r3, [r7, #23]
 801391a:	3301      	adds	r3, #1
 801391c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d1e7      	bne.n	80138f6 <USBD_GetString+0x6a>
 8013926:	e000      	b.n	801392a <USBD_GetString+0x9e>
    return;
 8013928:	bf00      	nop
  }
}
 801392a:	3718      	adds	r7, #24
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013930:	b480      	push	{r7}
 8013932:	b085      	sub	sp, #20
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013938:	2300      	movs	r3, #0
 801393a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013940:	e005      	b.n	801394e <USBD_GetLen+0x1e>
  {
    len++;
 8013942:	7bfb      	ldrb	r3, [r7, #15]
 8013944:	3301      	adds	r3, #1
 8013946:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	3301      	adds	r3, #1
 801394c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d1f5      	bne.n	8013942 <USBD_GetLen+0x12>
  }

  return len;
 8013956:	7bfb      	ldrb	r3, [r7, #15]
}
 8013958:	4618      	mov	r0, r3
 801395a:	3714      	adds	r7, #20
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b084      	sub	sp, #16
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2202      	movs	r2, #2
 8013974:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	68ba      	ldr	r2, [r7, #8]
 8013988:	2100      	movs	r1, #0
 801398a:	68f8      	ldr	r0, [r7, #12]
 801398c:	f003 fe9f 	bl	80176ce <USBD_LL_Transmit>

  return USBD_OK;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3710      	adds	r7, #16
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801399a:	b580      	push	{r7, lr}
 801399c:	b084      	sub	sp, #16
 801399e:	af00      	add	r7, sp, #0
 80139a0:	60f8      	str	r0, [r7, #12]
 80139a2:	60b9      	str	r1, [r7, #8]
 80139a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	68ba      	ldr	r2, [r7, #8]
 80139aa:	2100      	movs	r1, #0
 80139ac:	68f8      	ldr	r0, [r7, #12]
 80139ae:	f003 fe8e 	bl	80176ce <USBD_LL_Transmit>

  return USBD_OK;
 80139b2:	2300      	movs	r3, #0
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2203      	movs	r2, #3
 80139cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	68ba      	ldr	r2, [r7, #8]
 80139e4:	2100      	movs	r1, #0
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f003 fe92 	bl	8017710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b084      	sub	sp, #16
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	60f8      	str	r0, [r7, #12]
 80139fe:	60b9      	str	r1, [r7, #8]
 8013a00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	68ba      	ldr	r2, [r7, #8]
 8013a06:	2100      	movs	r1, #0
 8013a08:	68f8      	ldr	r0, [r7, #12]
 8013a0a:	f003 fe81 	bl	8017710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a0e:	2300      	movs	r3, #0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2204      	movs	r2, #4
 8013a24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013a28:	2300      	movs	r3, #0
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f003 fe4d 	bl	80176ce <USBD_LL_Transmit>

  return USBD_OK;
 8013a34:	2300      	movs	r3, #0
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3708      	adds	r7, #8
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b082      	sub	sp, #8
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2205      	movs	r2, #5
 8013a4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a4e:	2300      	movs	r3, #0
 8013a50:	2200      	movs	r2, #0
 8013a52:	2100      	movs	r1, #0
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f003 fe5b 	bl	8017710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a5a:	2300      	movs	r3, #0
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}

08013a64 <__NVIC_SetPriority>:
{
 8013a64:	b480      	push	{r7}
 8013a66:	b083      	sub	sp, #12
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	6039      	str	r1, [r7, #0]
 8013a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	db0a      	blt.n	8013a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	b2da      	uxtb	r2, r3
 8013a7c:	490c      	ldr	r1, [pc, #48]	@ (8013ab0 <__NVIC_SetPriority+0x4c>)
 8013a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a82:	0112      	lsls	r2, r2, #4
 8013a84:	b2d2      	uxtb	r2, r2
 8013a86:	440b      	add	r3, r1
 8013a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013a8c:	e00a      	b.n	8013aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	4908      	ldr	r1, [pc, #32]	@ (8013ab4 <__NVIC_SetPriority+0x50>)
 8013a94:	79fb      	ldrb	r3, [r7, #7]
 8013a96:	f003 030f 	and.w	r3, r3, #15
 8013a9a:	3b04      	subs	r3, #4
 8013a9c:	0112      	lsls	r2, r2, #4
 8013a9e:	b2d2      	uxtb	r2, r2
 8013aa0:	440b      	add	r3, r1
 8013aa2:	761a      	strb	r2, [r3, #24]
}
 8013aa4:	bf00      	nop
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	e000e100 	.word	0xe000e100
 8013ab4:	e000ed00 	.word	0xe000ed00

08013ab8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013abc:	4b05      	ldr	r3, [pc, #20]	@ (8013ad4 <SysTick_Handler+0x1c>)
 8013abe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013ac0:	f001 feec 	bl	801589c <xTaskGetSchedulerState>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d001      	beq.n	8013ace <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013aca:	f002 ff25 	bl	8016918 <xPortSysTickHandler>
  }
}
 8013ace:	bf00      	nop
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	e000e010 	.word	0xe000e010

08013ad8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013adc:	2100      	movs	r1, #0
 8013ade:	f06f 0004 	mvn.w	r0, #4
 8013ae2:	f7ff ffbf 	bl	8013a64 <__NVIC_SetPriority>
#endif
}
 8013ae6:	bf00      	nop
 8013ae8:	bd80      	pop	{r7, pc}
	...

08013aec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013aec:	b480      	push	{r7}
 8013aee:	b083      	sub	sp, #12
 8013af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013af2:	f3ef 8305 	mrs	r3, IPSR
 8013af6:	603b      	str	r3, [r7, #0]
  return(result);
 8013af8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d003      	beq.n	8013b06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013afe:	f06f 0305 	mvn.w	r3, #5
 8013b02:	607b      	str	r3, [r7, #4]
 8013b04:	e00c      	b.n	8013b20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013b06:	4b0a      	ldr	r3, [pc, #40]	@ (8013b30 <osKernelInitialize+0x44>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d105      	bne.n	8013b1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013b0e:	4b08      	ldr	r3, [pc, #32]	@ (8013b30 <osKernelInitialize+0x44>)
 8013b10:	2201      	movs	r2, #1
 8013b12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013b14:	2300      	movs	r3, #0
 8013b16:	607b      	str	r3, [r7, #4]
 8013b18:	e002      	b.n	8013b20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013b20:	687b      	ldr	r3, [r7, #4]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	20004ac8 	.word	0x20004ac8

08013b34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b3a:	f3ef 8305 	mrs	r3, IPSR
 8013b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8013b40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d003      	beq.n	8013b4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8013b46:	f06f 0305 	mvn.w	r3, #5
 8013b4a:	607b      	str	r3, [r7, #4]
 8013b4c:	e010      	b.n	8013b70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8013b7c <osKernelStart+0x48>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2b01      	cmp	r3, #1
 8013b54:	d109      	bne.n	8013b6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013b56:	f7ff ffbf 	bl	8013ad8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013b5a:	4b08      	ldr	r3, [pc, #32]	@ (8013b7c <osKernelStart+0x48>)
 8013b5c:	2202      	movs	r2, #2
 8013b5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013b60:	f001 fa28 	bl	8014fb4 <vTaskStartScheduler>
      stat = osOK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	607b      	str	r3, [r7, #4]
 8013b68:	e002      	b.n	8013b70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013b70:	687b      	ldr	r3, [r7, #4]
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3708      	adds	r7, #8
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	20004ac8 	.word	0x20004ac8

08013b80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b08e      	sub	sp, #56	@ 0x38
 8013b84:	af04      	add	r7, sp, #16
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b90:	f3ef 8305 	mrs	r3, IPSR
 8013b94:	617b      	str	r3, [r7, #20]
  return(result);
 8013b96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d17e      	bne.n	8013c9a <osThreadNew+0x11a>
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d07b      	beq.n	8013c9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013ba2:	2380      	movs	r3, #128	@ 0x80
 8013ba4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013ba6:	2318      	movs	r3, #24
 8013ba8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013baa:	2300      	movs	r3, #0
 8013bac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013bae:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d045      	beq.n	8013c46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d002      	beq.n	8013bc8 <osThreadNew+0x48>
        name = attr->name;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	699b      	ldr	r3, [r3, #24]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d002      	beq.n	8013bd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	699b      	ldr	r3, [r3, #24]
 8013bd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d008      	beq.n	8013bee <osThreadNew+0x6e>
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	2b38      	cmp	r3, #56	@ 0x38
 8013be0:	d805      	bhi.n	8013bee <osThreadNew+0x6e>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	f003 0301 	and.w	r3, r3, #1
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d001      	beq.n	8013bf2 <osThreadNew+0x72>
        return (NULL);
 8013bee:	2300      	movs	r3, #0
 8013bf0:	e054      	b.n	8013c9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	695b      	ldr	r3, [r3, #20]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d003      	beq.n	8013c02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	695b      	ldr	r3, [r3, #20]
 8013bfe:	089b      	lsrs	r3, r3, #2
 8013c00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00e      	beq.n	8013c28 <osThreadNew+0xa8>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	2ba7      	cmp	r3, #167	@ 0xa7
 8013c10:	d90a      	bls.n	8013c28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d006      	beq.n	8013c28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	695b      	ldr	r3, [r3, #20]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <osThreadNew+0xa8>
        mem = 1;
 8013c22:	2301      	movs	r3, #1
 8013c24:	61bb      	str	r3, [r7, #24]
 8013c26:	e010      	b.n	8013c4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	689b      	ldr	r3, [r3, #8]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d10c      	bne.n	8013c4a <osThreadNew+0xca>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d108      	bne.n	8013c4a <osThreadNew+0xca>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	691b      	ldr	r3, [r3, #16]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d104      	bne.n	8013c4a <osThreadNew+0xca>
          mem = 0;
 8013c40:	2300      	movs	r3, #0
 8013c42:	61bb      	str	r3, [r7, #24]
 8013c44:	e001      	b.n	8013c4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d110      	bne.n	8013c72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013c58:	9202      	str	r2, [sp, #8]
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	9300      	str	r3, [sp, #0]
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	6a3a      	ldr	r2, [r7, #32]
 8013c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c66:	68f8      	ldr	r0, [r7, #12]
 8013c68:	f000 ffb0 	bl	8014bcc <xTaskCreateStatic>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	613b      	str	r3, [r7, #16]
 8013c70:	e013      	b.n	8013c9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d110      	bne.n	8013c9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	f107 0310 	add.w	r3, r7, #16
 8013c80:	9301      	str	r3, [sp, #4]
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c8a:	68f8      	ldr	r0, [r7, #12]
 8013c8c:	f000 fffe 	bl	8014c8c <xTaskCreate>
 8013c90:	4603      	mov	r3, r0
 8013c92:	2b01      	cmp	r3, #1
 8013c94:	d001      	beq.n	8013c9a <osThreadNew+0x11a>
            hTask = NULL;
 8013c96:	2300      	movs	r3, #0
 8013c98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013c9a:	693b      	ldr	r3, [r7, #16]
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3728      	adds	r7, #40	@ 0x28
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b084      	sub	sp, #16
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cac:	f3ef 8305 	mrs	r3, IPSR
 8013cb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8013cb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d003      	beq.n	8013cc0 <osDelay+0x1c>
    stat = osErrorISR;
 8013cb8:	f06f 0305 	mvn.w	r3, #5
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	e007      	b.n	8013cd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d002      	beq.n	8013cd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f001 f93c 	bl	8014f48 <vTaskDelay>
    }
  }

  return (stat);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
	...

08013cdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013cdc:	b480      	push	{r7}
 8013cde:	b085      	sub	sp, #20
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	4a07      	ldr	r2, [pc, #28]	@ (8013d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8013cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	4a06      	ldr	r2, [pc, #24]	@ (8013d0c <vApplicationGetIdleTaskMemory+0x30>)
 8013cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2280      	movs	r2, #128	@ 0x80
 8013cf8:	601a      	str	r2, [r3, #0]
}
 8013cfa:	bf00      	nop
 8013cfc:	3714      	adds	r7, #20
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr
 8013d06:	bf00      	nop
 8013d08:	20004acc 	.word	0x20004acc
 8013d0c:	20004b74 	.word	0x20004b74

08013d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013d10:	b480      	push	{r7}
 8013d12:	b085      	sub	sp, #20
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	4a07      	ldr	r2, [pc, #28]	@ (8013d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8013d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	4a06      	ldr	r2, [pc, #24]	@ (8013d40 <vApplicationGetTimerTaskMemory+0x30>)
 8013d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013d2e:	601a      	str	r2, [r3, #0]
}
 8013d30:	bf00      	nop
 8013d32:	3714      	adds	r7, #20
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr
 8013d3c:	20004d74 	.word	0x20004d74
 8013d40:	20004e1c 	.word	0x20004e1c

08013d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f103 0208 	add.w	r2, r3, #8
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f04f 32ff 	mov.w	r2, #4294967295
 8013d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f103 0208 	add.w	r2, r3, #8
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f103 0208 	add.w	r2, r3, #8
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2200      	movs	r2, #0
 8013d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d78:	bf00      	nop
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr

08013d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013d92:	bf00      	nop
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr

08013d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d9e:	b480      	push	{r7}
 8013da0:	b085      	sub	sp, #20
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
 8013da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	689a      	ldr	r2, [r3, #8]
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	683a      	ldr	r2, [r7, #0]
 8013dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	683a      	ldr	r2, [r7, #0]
 8013dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	1c5a      	adds	r2, r3, #1
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	601a      	str	r2, [r3, #0]
}
 8013dda:	bf00      	nop
 8013ddc:	3714      	adds	r7, #20
 8013dde:	46bd      	mov	sp, r7
 8013de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de4:	4770      	bx	lr

08013de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013de6:	b480      	push	{r7}
 8013de8:	b085      	sub	sp, #20
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
 8013dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dfc:	d103      	bne.n	8013e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	691b      	ldr	r3, [r3, #16]
 8013e02:	60fb      	str	r3, [r7, #12]
 8013e04:	e00c      	b.n	8013e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	3308      	adds	r3, #8
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	e002      	b.n	8013e14 <vListInsert+0x2e>
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	60fb      	str	r3, [r7, #12]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	68ba      	ldr	r2, [r7, #8]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d2f6      	bcs.n	8013e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	685a      	ldr	r2, [r3, #4]
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	685b      	ldr	r3, [r3, #4]
 8013e2c:	683a      	ldr	r2, [r7, #0]
 8013e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	683a      	ldr	r2, [r7, #0]
 8013e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	1c5a      	adds	r2, r3, #1
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	601a      	str	r2, [r3, #0]
}
 8013e4c:	bf00      	nop
 8013e4e:	3714      	adds	r7, #20
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr

08013e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b085      	sub	sp, #20
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	691b      	ldr	r3, [r3, #16]
 8013e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	6892      	ldr	r2, [r2, #8]
 8013e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	6852      	ldr	r2, [r2, #4]
 8013e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d103      	bne.n	8013e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	689a      	ldr	r2, [r3, #8]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	1e5a      	subs	r2, r3, #1
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3714      	adds	r7, #20
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr

08013eac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d10b      	bne.n	8013ed8 <xQueueGenericReset+0x2c>
	__asm volatile
 8013ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ec4:	f383 8811 	msr	BASEPRI, r3
 8013ec8:	f3bf 8f6f 	isb	sy
 8013ecc:	f3bf 8f4f 	dsb	sy
 8013ed0:	60bb      	str	r3, [r7, #8]
}
 8013ed2:	bf00      	nop
 8013ed4:	bf00      	nop
 8013ed6:	e7fd      	b.n	8013ed4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013ed8:	f002 fc8e 	bl	80167f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ee4:	68f9      	ldr	r1, [r7, #12]
 8013ee6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013ee8:	fb01 f303 	mul.w	r3, r1, r3
 8013eec:	441a      	add	r2, r3
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f08:	3b01      	subs	r3, #1
 8013f0a:	68f9      	ldr	r1, [r7, #12]
 8013f0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013f0e:	fb01 f303 	mul.w	r3, r1, r3
 8013f12:	441a      	add	r2, r3
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	22ff      	movs	r2, #255	@ 0xff
 8013f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	22ff      	movs	r2, #255	@ 0xff
 8013f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d114      	bne.n	8013f58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	691b      	ldr	r3, [r3, #16]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d01a      	beq.n	8013f6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	3310      	adds	r3, #16
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f001 fad8 	bl	80154f0 <xTaskRemoveFromEventList>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d012      	beq.n	8013f6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f46:	4b0d      	ldr	r3, [pc, #52]	@ (8013f7c <xQueueGenericReset+0xd0>)
 8013f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f4c:	601a      	str	r2, [r3, #0]
 8013f4e:	f3bf 8f4f 	dsb	sy
 8013f52:	f3bf 8f6f 	isb	sy
 8013f56:	e009      	b.n	8013f6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	3310      	adds	r3, #16
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7ff fef1 	bl	8013d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	3324      	adds	r3, #36	@ 0x24
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7ff feec 	bl	8013d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f6c:	f002 fc76 	bl	801685c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f70:	2301      	movs	r3, #1
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
 8013f7a:	bf00      	nop
 8013f7c:	e000ed04 	.word	0xe000ed04

08013f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b08e      	sub	sp, #56	@ 0x38
 8013f84:	af02      	add	r7, sp, #8
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
 8013f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d10b      	bne.n	8013fac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f98:	f383 8811 	msr	BASEPRI, r3
 8013f9c:	f3bf 8f6f 	isb	sy
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013fa6:	bf00      	nop
 8013fa8:	bf00      	nop
 8013faa:	e7fd      	b.n	8013fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d10b      	bne.n	8013fca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb6:	f383 8811 	msr	BASEPRI, r3
 8013fba:	f3bf 8f6f 	isb	sy
 8013fbe:	f3bf 8f4f 	dsb	sy
 8013fc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	e7fd      	b.n	8013fc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <xQueueGenericCreateStatic+0x56>
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d001      	beq.n	8013fda <xQueueGenericCreateStatic+0x5a>
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	e000      	b.n	8013fdc <xQueueGenericCreateStatic+0x5c>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10b      	bne.n	8013ff8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8013fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fe4:	f383 8811 	msr	BASEPRI, r3
 8013fe8:	f3bf 8f6f 	isb	sy
 8013fec:	f3bf 8f4f 	dsb	sy
 8013ff0:	623b      	str	r3, [r7, #32]
}
 8013ff2:	bf00      	nop
 8013ff4:	bf00      	nop
 8013ff6:	e7fd      	b.n	8013ff4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d102      	bne.n	8014004 <xQueueGenericCreateStatic+0x84>
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d101      	bne.n	8014008 <xQueueGenericCreateStatic+0x88>
 8014004:	2301      	movs	r3, #1
 8014006:	e000      	b.n	801400a <xQueueGenericCreateStatic+0x8a>
 8014008:	2300      	movs	r3, #0
 801400a:	2b00      	cmp	r3, #0
 801400c:	d10b      	bne.n	8014026 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801400e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014012:	f383 8811 	msr	BASEPRI, r3
 8014016:	f3bf 8f6f 	isb	sy
 801401a:	f3bf 8f4f 	dsb	sy
 801401e:	61fb      	str	r3, [r7, #28]
}
 8014020:	bf00      	nop
 8014022:	bf00      	nop
 8014024:	e7fd      	b.n	8014022 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014026:	2350      	movs	r3, #80	@ 0x50
 8014028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	2b50      	cmp	r3, #80	@ 0x50
 801402e:	d00b      	beq.n	8014048 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8014030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014034:	f383 8811 	msr	BASEPRI, r3
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	61bb      	str	r3, [r7, #24]
}
 8014042:	bf00      	nop
 8014044:	bf00      	nop
 8014046:	e7fd      	b.n	8014044 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014048:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801404e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00d      	beq.n	8014070 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014056:	2201      	movs	r2, #1
 8014058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801405c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	4613      	mov	r3, r2
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	68b9      	ldr	r1, [r7, #8]
 801406a:	68f8      	ldr	r0, [r7, #12]
 801406c:	f000 f840 	bl	80140f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014072:	4618      	mov	r0, r3
 8014074:	3730      	adds	r7, #48	@ 0x30
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801407a:	b580      	push	{r7, lr}
 801407c:	b08a      	sub	sp, #40	@ 0x28
 801407e:	af02      	add	r7, sp, #8
 8014080:	60f8      	str	r0, [r7, #12]
 8014082:	60b9      	str	r1, [r7, #8]
 8014084:	4613      	mov	r3, r2
 8014086:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d10b      	bne.n	80140a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 801408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014092:	f383 8811 	msr	BASEPRI, r3
 8014096:	f3bf 8f6f 	isb	sy
 801409a:	f3bf 8f4f 	dsb	sy
 801409e:	613b      	str	r3, [r7, #16]
}
 80140a0:	bf00      	nop
 80140a2:	bf00      	nop
 80140a4:	e7fd      	b.n	80140a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	68ba      	ldr	r2, [r7, #8]
 80140aa:	fb02 f303 	mul.w	r3, r2, r3
 80140ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80140b0:	69fb      	ldr	r3, [r7, #28]
 80140b2:	3350      	adds	r3, #80	@ 0x50
 80140b4:	4618      	mov	r0, r3
 80140b6:	f002 fcc1 	bl	8016a3c <pvPortMalloc>
 80140ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80140bc:	69bb      	ldr	r3, [r7, #24]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d011      	beq.n	80140e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	3350      	adds	r3, #80	@ 0x50
 80140ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	2200      	movs	r2, #0
 80140d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80140d4:	79fa      	ldrb	r2, [r7, #7]
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	4613      	mov	r3, r2
 80140dc:	697a      	ldr	r2, [r7, #20]
 80140de:	68b9      	ldr	r1, [r7, #8]
 80140e0:	68f8      	ldr	r0, [r7, #12]
 80140e2:	f000 f805 	bl	80140f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140e6:	69bb      	ldr	r3, [r7, #24]
	}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3720      	adds	r7, #32
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b084      	sub	sp, #16
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	607a      	str	r2, [r7, #4]
 80140fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d103      	bne.n	801410c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	69ba      	ldr	r2, [r7, #24]
 8014108:	601a      	str	r2, [r3, #0]
 801410a:	e002      	b.n	8014112 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	68fa      	ldr	r2, [r7, #12]
 8014116:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	68ba      	ldr	r2, [r7, #8]
 801411c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801411e:	2101      	movs	r1, #1
 8014120:	69b8      	ldr	r0, [r7, #24]
 8014122:	f7ff fec3 	bl	8013eac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014126:	69bb      	ldr	r3, [r7, #24]
 8014128:	78fa      	ldrb	r2, [r7, #3]
 801412a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801412e:	bf00      	nop
 8014130:	3710      	adds	r7, #16
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}

08014136 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014136:	b580      	push	{r7, lr}
 8014138:	b082      	sub	sp, #8
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00e      	beq.n	8014162 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2200      	movs	r2, #0
 8014148:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014156:	2300      	movs	r3, #0
 8014158:	2200      	movs	r2, #0
 801415a:	2100      	movs	r1, #0
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 f81d 	bl	801419c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014162:	bf00      	nop
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801416a:	b580      	push	{r7, lr}
 801416c:	b086      	sub	sp, #24
 801416e:	af00      	add	r7, sp, #0
 8014170:	4603      	mov	r3, r0
 8014172:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014174:	2301      	movs	r3, #1
 8014176:	617b      	str	r3, [r7, #20]
 8014178:	2300      	movs	r3, #0
 801417a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801417c:	79fb      	ldrb	r3, [r7, #7]
 801417e:	461a      	mov	r2, r3
 8014180:	6939      	ldr	r1, [r7, #16]
 8014182:	6978      	ldr	r0, [r7, #20]
 8014184:	f7ff ff79 	bl	801407a <xQueueGenericCreate>
 8014188:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801418a:	68f8      	ldr	r0, [r7, #12]
 801418c:	f7ff ffd3 	bl	8014136 <prvInitialiseMutex>

		return xNewQueue;
 8014190:	68fb      	ldr	r3, [r7, #12]
	}
 8014192:	4618      	mov	r0, r3
 8014194:	3718      	adds	r7, #24
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
	...

0801419c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b08e      	sub	sp, #56	@ 0x38
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80141aa:	2300      	movs	r3, #0
 80141ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80141b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d10b      	bne.n	80141d0 <xQueueGenericSend+0x34>
	__asm volatile
 80141b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141bc:	f383 8811 	msr	BASEPRI, r3
 80141c0:	f3bf 8f6f 	isb	sy
 80141c4:	f3bf 8f4f 	dsb	sy
 80141c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80141ca:	bf00      	nop
 80141cc:	bf00      	nop
 80141ce:	e7fd      	b.n	80141cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d103      	bne.n	80141de <xQueueGenericSend+0x42>
 80141d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d101      	bne.n	80141e2 <xQueueGenericSend+0x46>
 80141de:	2301      	movs	r3, #1
 80141e0:	e000      	b.n	80141e4 <xQueueGenericSend+0x48>
 80141e2:	2300      	movs	r3, #0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d10b      	bne.n	8014200 <xQueueGenericSend+0x64>
	__asm volatile
 80141e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141ec:	f383 8811 	msr	BASEPRI, r3
 80141f0:	f3bf 8f6f 	isb	sy
 80141f4:	f3bf 8f4f 	dsb	sy
 80141f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80141fa:	bf00      	nop
 80141fc:	bf00      	nop
 80141fe:	e7fd      	b.n	80141fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	2b02      	cmp	r3, #2
 8014204:	d103      	bne.n	801420e <xQueueGenericSend+0x72>
 8014206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801420a:	2b01      	cmp	r3, #1
 801420c:	d101      	bne.n	8014212 <xQueueGenericSend+0x76>
 801420e:	2301      	movs	r3, #1
 8014210:	e000      	b.n	8014214 <xQueueGenericSend+0x78>
 8014212:	2300      	movs	r3, #0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d10b      	bne.n	8014230 <xQueueGenericSend+0x94>
	__asm volatile
 8014218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801421c:	f383 8811 	msr	BASEPRI, r3
 8014220:	f3bf 8f6f 	isb	sy
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	623b      	str	r3, [r7, #32]
}
 801422a:	bf00      	nop
 801422c:	bf00      	nop
 801422e:	e7fd      	b.n	801422c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014230:	f001 fb34 	bl	801589c <xTaskGetSchedulerState>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d102      	bne.n	8014240 <xQueueGenericSend+0xa4>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d101      	bne.n	8014244 <xQueueGenericSend+0xa8>
 8014240:	2301      	movs	r3, #1
 8014242:	e000      	b.n	8014246 <xQueueGenericSend+0xaa>
 8014244:	2300      	movs	r3, #0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d10b      	bne.n	8014262 <xQueueGenericSend+0xc6>
	__asm volatile
 801424a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801424e:	f383 8811 	msr	BASEPRI, r3
 8014252:	f3bf 8f6f 	isb	sy
 8014256:	f3bf 8f4f 	dsb	sy
 801425a:	61fb      	str	r3, [r7, #28]
}
 801425c:	bf00      	nop
 801425e:	bf00      	nop
 8014260:	e7fd      	b.n	801425e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014262:	f002 fac9 	bl	80167f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801426e:	429a      	cmp	r2, r3
 8014270:	d302      	bcc.n	8014278 <xQueueGenericSend+0xdc>
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	2b02      	cmp	r3, #2
 8014276:	d129      	bne.n	80142cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	68b9      	ldr	r1, [r7, #8]
 801427c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801427e:	f000 fb37 	bl	80148f0 <prvCopyDataToQueue>
 8014282:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014288:	2b00      	cmp	r3, #0
 801428a:	d010      	beq.n	80142ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801428e:	3324      	adds	r3, #36	@ 0x24
 8014290:	4618      	mov	r0, r3
 8014292:	f001 f92d 	bl	80154f0 <xTaskRemoveFromEventList>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d013      	beq.n	80142c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801429c:	4b3f      	ldr	r3, [pc, #252]	@ (801439c <xQueueGenericSend+0x200>)
 801429e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142a2:	601a      	str	r2, [r3, #0]
 80142a4:	f3bf 8f4f 	dsb	sy
 80142a8:	f3bf 8f6f 	isb	sy
 80142ac:	e00a      	b.n	80142c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80142ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d007      	beq.n	80142c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80142b4:	4b39      	ldr	r3, [pc, #228]	@ (801439c <xQueueGenericSend+0x200>)
 80142b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142ba:	601a      	str	r2, [r3, #0]
 80142bc:	f3bf 8f4f 	dsb	sy
 80142c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80142c4:	f002 faca 	bl	801685c <vPortExitCritical>
				return pdPASS;
 80142c8:	2301      	movs	r3, #1
 80142ca:	e063      	b.n	8014394 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d103      	bne.n	80142da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80142d2:	f002 fac3 	bl	801685c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e05c      	b.n	8014394 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80142da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d106      	bne.n	80142ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142e0:	f107 0314 	add.w	r3, r7, #20
 80142e4:	4618      	mov	r0, r3
 80142e6:	f001 f967 	bl	80155b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142ea:	2301      	movs	r3, #1
 80142ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142ee:	f002 fab5 	bl	801685c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142f2:	f000 fecf 	bl	8015094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142f6:	f002 fa7f 	bl	80167f8 <vPortEnterCritical>
 80142fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014300:	b25b      	sxtb	r3, r3
 8014302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014306:	d103      	bne.n	8014310 <xQueueGenericSend+0x174>
 8014308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801430a:	2200      	movs	r2, #0
 801430c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014312:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014316:	b25b      	sxtb	r3, r3
 8014318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801431c:	d103      	bne.n	8014326 <xQueueGenericSend+0x18a>
 801431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014320:	2200      	movs	r2, #0
 8014322:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014326:	f002 fa99 	bl	801685c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801432a:	1d3a      	adds	r2, r7, #4
 801432c:	f107 0314 	add.w	r3, r7, #20
 8014330:	4611      	mov	r1, r2
 8014332:	4618      	mov	r0, r3
 8014334:	f001 f956 	bl	80155e4 <xTaskCheckForTimeOut>
 8014338:	4603      	mov	r3, r0
 801433a:	2b00      	cmp	r3, #0
 801433c:	d124      	bne.n	8014388 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801433e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014340:	f000 fbce 	bl	8014ae0 <prvIsQueueFull>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	d018      	beq.n	801437c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801434c:	3310      	adds	r3, #16
 801434e:	687a      	ldr	r2, [r7, #4]
 8014350:	4611      	mov	r1, r2
 8014352:	4618      	mov	r0, r3
 8014354:	f001 f87a 	bl	801544c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801435a:	f000 fb59 	bl	8014a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801435e:	f000 fea7 	bl	80150b0 <xTaskResumeAll>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	f47f af7c 	bne.w	8014262 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801436a:	4b0c      	ldr	r3, [pc, #48]	@ (801439c <xQueueGenericSend+0x200>)
 801436c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014370:	601a      	str	r2, [r3, #0]
 8014372:	f3bf 8f4f 	dsb	sy
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	e772      	b.n	8014262 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801437c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801437e:	f000 fb47 	bl	8014a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014382:	f000 fe95 	bl	80150b0 <xTaskResumeAll>
 8014386:	e76c      	b.n	8014262 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801438a:	f000 fb41 	bl	8014a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801438e:	f000 fe8f 	bl	80150b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014392:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014394:	4618      	mov	r0, r3
 8014396:	3738      	adds	r7, #56	@ 0x38
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	e000ed04 	.word	0xe000ed04

080143a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b090      	sub	sp, #64	@ 0x40
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	607a      	str	r2, [r7, #4]
 80143ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80143b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d10b      	bne.n	80143d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80143b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143bc:	f383 8811 	msr	BASEPRI, r3
 80143c0:	f3bf 8f6f 	isb	sy
 80143c4:	f3bf 8f4f 	dsb	sy
 80143c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80143ca:	bf00      	nop
 80143cc:	bf00      	nop
 80143ce:	e7fd      	b.n	80143cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d103      	bne.n	80143de <xQueueGenericSendFromISR+0x3e>
 80143d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d101      	bne.n	80143e2 <xQueueGenericSendFromISR+0x42>
 80143de:	2301      	movs	r3, #1
 80143e0:	e000      	b.n	80143e4 <xQueueGenericSendFromISR+0x44>
 80143e2:	2300      	movs	r3, #0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d10b      	bne.n	8014400 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80143e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143ec:	f383 8811 	msr	BASEPRI, r3
 80143f0:	f3bf 8f6f 	isb	sy
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80143fa:	bf00      	nop
 80143fc:	bf00      	nop
 80143fe:	e7fd      	b.n	80143fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	2b02      	cmp	r3, #2
 8014404:	d103      	bne.n	801440e <xQueueGenericSendFromISR+0x6e>
 8014406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801440a:	2b01      	cmp	r3, #1
 801440c:	d101      	bne.n	8014412 <xQueueGenericSendFromISR+0x72>
 801440e:	2301      	movs	r3, #1
 8014410:	e000      	b.n	8014414 <xQueueGenericSendFromISR+0x74>
 8014412:	2300      	movs	r3, #0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d10b      	bne.n	8014430 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801441c:	f383 8811 	msr	BASEPRI, r3
 8014420:	f3bf 8f6f 	isb	sy
 8014424:	f3bf 8f4f 	dsb	sy
 8014428:	623b      	str	r3, [r7, #32]
}
 801442a:	bf00      	nop
 801442c:	bf00      	nop
 801442e:	e7fd      	b.n	801442c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014430:	f002 fac2 	bl	80169b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014434:	f3ef 8211 	mrs	r2, BASEPRI
 8014438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801443c:	f383 8811 	msr	BASEPRI, r3
 8014440:	f3bf 8f6f 	isb	sy
 8014444:	f3bf 8f4f 	dsb	sy
 8014448:	61fa      	str	r2, [r7, #28]
 801444a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801444c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801444e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014458:	429a      	cmp	r2, r3
 801445a:	d302      	bcc.n	8014462 <xQueueGenericSendFromISR+0xc2>
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2b02      	cmp	r3, #2
 8014460:	d12f      	bne.n	80144c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014468:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801446c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014470:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014472:	683a      	ldr	r2, [r7, #0]
 8014474:	68b9      	ldr	r1, [r7, #8]
 8014476:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014478:	f000 fa3a 	bl	80148f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801447c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8014480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014484:	d112      	bne.n	80144ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801448a:	2b00      	cmp	r3, #0
 801448c:	d016      	beq.n	80144bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014490:	3324      	adds	r3, #36	@ 0x24
 8014492:	4618      	mov	r0, r3
 8014494:	f001 f82c 	bl	80154f0 <xTaskRemoveFromEventList>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d00e      	beq.n	80144bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d00b      	beq.n	80144bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2201      	movs	r2, #1
 80144a8:	601a      	str	r2, [r3, #0]
 80144aa:	e007      	b.n	80144bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80144ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80144b0:	3301      	adds	r3, #1
 80144b2:	b2db      	uxtb	r3, r3
 80144b4:	b25a      	sxtb	r2, r3
 80144b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80144bc:	2301      	movs	r3, #1
 80144be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80144c0:	e001      	b.n	80144c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80144c2:	2300      	movs	r3, #0
 80144c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80144c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80144d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3740      	adds	r7, #64	@ 0x40
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}

080144dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b08c      	sub	sp, #48	@ 0x30
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80144e8:	2300      	movs	r3, #0
 80144ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d10b      	bne.n	801450e <xQueueReceive+0x32>
	__asm volatile
 80144f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144fa:	f383 8811 	msr	BASEPRI, r3
 80144fe:	f3bf 8f6f 	isb	sy
 8014502:	f3bf 8f4f 	dsb	sy
 8014506:	623b      	str	r3, [r7, #32]
}
 8014508:	bf00      	nop
 801450a:	bf00      	nop
 801450c:	e7fd      	b.n	801450a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d103      	bne.n	801451c <xQueueReceive+0x40>
 8014514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014518:	2b00      	cmp	r3, #0
 801451a:	d101      	bne.n	8014520 <xQueueReceive+0x44>
 801451c:	2301      	movs	r3, #1
 801451e:	e000      	b.n	8014522 <xQueueReceive+0x46>
 8014520:	2300      	movs	r3, #0
 8014522:	2b00      	cmp	r3, #0
 8014524:	d10b      	bne.n	801453e <xQueueReceive+0x62>
	__asm volatile
 8014526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801452a:	f383 8811 	msr	BASEPRI, r3
 801452e:	f3bf 8f6f 	isb	sy
 8014532:	f3bf 8f4f 	dsb	sy
 8014536:	61fb      	str	r3, [r7, #28]
}
 8014538:	bf00      	nop
 801453a:	bf00      	nop
 801453c:	e7fd      	b.n	801453a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801453e:	f001 f9ad 	bl	801589c <xTaskGetSchedulerState>
 8014542:	4603      	mov	r3, r0
 8014544:	2b00      	cmp	r3, #0
 8014546:	d102      	bne.n	801454e <xQueueReceive+0x72>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d101      	bne.n	8014552 <xQueueReceive+0x76>
 801454e:	2301      	movs	r3, #1
 8014550:	e000      	b.n	8014554 <xQueueReceive+0x78>
 8014552:	2300      	movs	r3, #0
 8014554:	2b00      	cmp	r3, #0
 8014556:	d10b      	bne.n	8014570 <xQueueReceive+0x94>
	__asm volatile
 8014558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801455c:	f383 8811 	msr	BASEPRI, r3
 8014560:	f3bf 8f6f 	isb	sy
 8014564:	f3bf 8f4f 	dsb	sy
 8014568:	61bb      	str	r3, [r7, #24]
}
 801456a:	bf00      	nop
 801456c:	bf00      	nop
 801456e:	e7fd      	b.n	801456c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014570:	f002 f942 	bl	80167f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014578:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801457c:	2b00      	cmp	r3, #0
 801457e:	d01f      	beq.n	80145c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014580:	68b9      	ldr	r1, [r7, #8]
 8014582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014584:	f000 fa1e 	bl	80149c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801458a:	1e5a      	subs	r2, r3, #1
 801458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014592:	691b      	ldr	r3, [r3, #16]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d00f      	beq.n	80145b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801459a:	3310      	adds	r3, #16
 801459c:	4618      	mov	r0, r3
 801459e:	f000 ffa7 	bl	80154f0 <xTaskRemoveFromEventList>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d007      	beq.n	80145b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80145a8:	4b3c      	ldr	r3, [pc, #240]	@ (801469c <xQueueReceive+0x1c0>)
 80145aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145ae:	601a      	str	r2, [r3, #0]
 80145b0:	f3bf 8f4f 	dsb	sy
 80145b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80145b8:	f002 f950 	bl	801685c <vPortExitCritical>
				return pdPASS;
 80145bc:	2301      	movs	r3, #1
 80145be:	e069      	b.n	8014694 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d103      	bne.n	80145ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80145c6:	f002 f949 	bl	801685c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80145ca:	2300      	movs	r3, #0
 80145cc:	e062      	b.n	8014694 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d106      	bne.n	80145e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80145d4:	f107 0310 	add.w	r3, r7, #16
 80145d8:	4618      	mov	r0, r3
 80145da:	f000 ffed 	bl	80155b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145de:	2301      	movs	r3, #1
 80145e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145e2:	f002 f93b 	bl	801685c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145e6:	f000 fd55 	bl	8015094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145ea:	f002 f905 	bl	80167f8 <vPortEnterCritical>
 80145ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80145f4:	b25b      	sxtb	r3, r3
 80145f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145fa:	d103      	bne.n	8014604 <xQueueReceive+0x128>
 80145fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145fe:	2200      	movs	r2, #0
 8014600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801460a:	b25b      	sxtb	r3, r3
 801460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014610:	d103      	bne.n	801461a <xQueueReceive+0x13e>
 8014612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014614:	2200      	movs	r2, #0
 8014616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801461a:	f002 f91f 	bl	801685c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801461e:	1d3a      	adds	r2, r7, #4
 8014620:	f107 0310 	add.w	r3, r7, #16
 8014624:	4611      	mov	r1, r2
 8014626:	4618      	mov	r0, r3
 8014628:	f000 ffdc 	bl	80155e4 <xTaskCheckForTimeOut>
 801462c:	4603      	mov	r3, r0
 801462e:	2b00      	cmp	r3, #0
 8014630:	d123      	bne.n	801467a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014634:	f000 fa3e 	bl	8014ab4 <prvIsQueueEmpty>
 8014638:	4603      	mov	r3, r0
 801463a:	2b00      	cmp	r3, #0
 801463c:	d017      	beq.n	801466e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014640:	3324      	adds	r3, #36	@ 0x24
 8014642:	687a      	ldr	r2, [r7, #4]
 8014644:	4611      	mov	r1, r2
 8014646:	4618      	mov	r0, r3
 8014648:	f000 ff00 	bl	801544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801464c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801464e:	f000 f9df 	bl	8014a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014652:	f000 fd2d 	bl	80150b0 <xTaskResumeAll>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d189      	bne.n	8014570 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801465c:	4b0f      	ldr	r3, [pc, #60]	@ (801469c <xQueueReceive+0x1c0>)
 801465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	f3bf 8f4f 	dsb	sy
 8014668:	f3bf 8f6f 	isb	sy
 801466c:	e780      	b.n	8014570 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801466e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014670:	f000 f9ce 	bl	8014a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014674:	f000 fd1c 	bl	80150b0 <xTaskResumeAll>
 8014678:	e77a      	b.n	8014570 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801467a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801467c:	f000 f9c8 	bl	8014a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014680:	f000 fd16 	bl	80150b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014686:	f000 fa15 	bl	8014ab4 <prvIsQueueEmpty>
 801468a:	4603      	mov	r3, r0
 801468c:	2b00      	cmp	r3, #0
 801468e:	f43f af6f 	beq.w	8014570 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014692:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014694:	4618      	mov	r0, r3
 8014696:	3730      	adds	r7, #48	@ 0x30
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}
 801469c:	e000ed04 	.word	0xe000ed04

080146a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b08e      	sub	sp, #56	@ 0x38
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80146aa:	2300      	movs	r3, #0
 80146ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80146b2:	2300      	movs	r3, #0
 80146b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80146b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10b      	bne.n	80146d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80146bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146c0:	f383 8811 	msr	BASEPRI, r3
 80146c4:	f3bf 8f6f 	isb	sy
 80146c8:	f3bf 8f4f 	dsb	sy
 80146cc:	623b      	str	r3, [r7, #32]
}
 80146ce:	bf00      	nop
 80146d0:	bf00      	nop
 80146d2:	e7fd      	b.n	80146d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80146d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d00b      	beq.n	80146f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80146dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146e0:	f383 8811 	msr	BASEPRI, r3
 80146e4:	f3bf 8f6f 	isb	sy
 80146e8:	f3bf 8f4f 	dsb	sy
 80146ec:	61fb      	str	r3, [r7, #28]
}
 80146ee:	bf00      	nop
 80146f0:	bf00      	nop
 80146f2:	e7fd      	b.n	80146f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80146f4:	f001 f8d2 	bl	801589c <xTaskGetSchedulerState>
 80146f8:	4603      	mov	r3, r0
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d102      	bne.n	8014704 <xQueueSemaphoreTake+0x64>
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d101      	bne.n	8014708 <xQueueSemaphoreTake+0x68>
 8014704:	2301      	movs	r3, #1
 8014706:	e000      	b.n	801470a <xQueueSemaphoreTake+0x6a>
 8014708:	2300      	movs	r3, #0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d10b      	bne.n	8014726 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014712:	f383 8811 	msr	BASEPRI, r3
 8014716:	f3bf 8f6f 	isb	sy
 801471a:	f3bf 8f4f 	dsb	sy
 801471e:	61bb      	str	r3, [r7, #24]
}
 8014720:	bf00      	nop
 8014722:	bf00      	nop
 8014724:	e7fd      	b.n	8014722 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014726:	f002 f867 	bl	80167f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801472a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801472e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014732:	2b00      	cmp	r3, #0
 8014734:	d024      	beq.n	8014780 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014738:	1e5a      	subs	r2, r3, #1
 801473a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801473c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d104      	bne.n	8014750 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014746:	f001 fa23 	bl	8015b90 <pvTaskIncrementMutexHeldCount>
 801474a:	4602      	mov	r2, r0
 801474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801474e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014752:	691b      	ldr	r3, [r3, #16]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d00f      	beq.n	8014778 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801475a:	3310      	adds	r3, #16
 801475c:	4618      	mov	r0, r3
 801475e:	f000 fec7 	bl	80154f0 <xTaskRemoveFromEventList>
 8014762:	4603      	mov	r3, r0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d007      	beq.n	8014778 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014768:	4b54      	ldr	r3, [pc, #336]	@ (80148bc <xQueueSemaphoreTake+0x21c>)
 801476a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801476e:	601a      	str	r2, [r3, #0]
 8014770:	f3bf 8f4f 	dsb	sy
 8014774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014778:	f002 f870 	bl	801685c <vPortExitCritical>
				return pdPASS;
 801477c:	2301      	movs	r3, #1
 801477e:	e098      	b.n	80148b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d112      	bne.n	80147ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014788:	2b00      	cmp	r3, #0
 801478a:	d00b      	beq.n	80147a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014790:	f383 8811 	msr	BASEPRI, r3
 8014794:	f3bf 8f6f 	isb	sy
 8014798:	f3bf 8f4f 	dsb	sy
 801479c:	617b      	str	r3, [r7, #20]
}
 801479e:	bf00      	nop
 80147a0:	bf00      	nop
 80147a2:	e7fd      	b.n	80147a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80147a4:	f002 f85a 	bl	801685c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80147a8:	2300      	movs	r3, #0
 80147aa:	e082      	b.n	80148b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80147ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d106      	bne.n	80147c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80147b2:	f107 030c 	add.w	r3, r7, #12
 80147b6:	4618      	mov	r0, r3
 80147b8:	f000 fefe 	bl	80155b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80147bc:	2301      	movs	r3, #1
 80147be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80147c0:	f002 f84c 	bl	801685c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80147c4:	f000 fc66 	bl	8015094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80147c8:	f002 f816 	bl	80167f8 <vPortEnterCritical>
 80147cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80147d2:	b25b      	sxtb	r3, r3
 80147d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d8:	d103      	bne.n	80147e2 <xQueueSemaphoreTake+0x142>
 80147da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147dc:	2200      	movs	r2, #0
 80147de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80147e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80147e8:	b25b      	sxtb	r3, r3
 80147ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ee:	d103      	bne.n	80147f8 <xQueueSemaphoreTake+0x158>
 80147f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147f2:	2200      	movs	r2, #0
 80147f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80147f8:	f002 f830 	bl	801685c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80147fc:	463a      	mov	r2, r7
 80147fe:	f107 030c 	add.w	r3, r7, #12
 8014802:	4611      	mov	r1, r2
 8014804:	4618      	mov	r0, r3
 8014806:	f000 feed 	bl	80155e4 <xTaskCheckForTimeOut>
 801480a:	4603      	mov	r3, r0
 801480c:	2b00      	cmp	r3, #0
 801480e:	d132      	bne.n	8014876 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014812:	f000 f94f 	bl	8014ab4 <prvIsQueueEmpty>
 8014816:	4603      	mov	r3, r0
 8014818:	2b00      	cmp	r3, #0
 801481a:	d026      	beq.n	801486a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d109      	bne.n	8014838 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014824:	f001 ffe8 	bl	80167f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801482a:	689b      	ldr	r3, [r3, #8]
 801482c:	4618      	mov	r0, r3
 801482e:	f001 f853 	bl	80158d8 <xTaskPriorityInherit>
 8014832:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014834:	f002 f812 	bl	801685c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801483a:	3324      	adds	r3, #36	@ 0x24
 801483c:	683a      	ldr	r2, [r7, #0]
 801483e:	4611      	mov	r1, r2
 8014840:	4618      	mov	r0, r3
 8014842:	f000 fe03 	bl	801544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014848:	f000 f8e2 	bl	8014a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801484c:	f000 fc30 	bl	80150b0 <xTaskResumeAll>
 8014850:	4603      	mov	r3, r0
 8014852:	2b00      	cmp	r3, #0
 8014854:	f47f af67 	bne.w	8014726 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014858:	4b18      	ldr	r3, [pc, #96]	@ (80148bc <xQueueSemaphoreTake+0x21c>)
 801485a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801485e:	601a      	str	r2, [r3, #0]
 8014860:	f3bf 8f4f 	dsb	sy
 8014864:	f3bf 8f6f 	isb	sy
 8014868:	e75d      	b.n	8014726 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801486a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801486c:	f000 f8d0 	bl	8014a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014870:	f000 fc1e 	bl	80150b0 <xTaskResumeAll>
 8014874:	e757      	b.n	8014726 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014878:	f000 f8ca 	bl	8014a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801487c:	f000 fc18 	bl	80150b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014880:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014882:	f000 f917 	bl	8014ab4 <prvIsQueueEmpty>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	f43f af4c 	beq.w	8014726 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014890:	2b00      	cmp	r3, #0
 8014892:	d00d      	beq.n	80148b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014894:	f001 ffb0 	bl	80167f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014898:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801489a:	f000 f811 	bl	80148c0 <prvGetDisinheritPriorityAfterTimeout>
 801489e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80148a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80148a6:	4618      	mov	r0, r3
 80148a8:	f001 f8ee 	bl	8015a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80148ac:	f001 ffd6 	bl	801685c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80148b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3738      	adds	r7, #56	@ 0x38
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	e000ed04 	.word	0xe000ed04

080148c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80148c0:	b480      	push	{r7}
 80148c2:	b085      	sub	sp, #20
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d006      	beq.n	80148de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80148da:	60fb      	str	r3, [r7, #12]
 80148dc:	e001      	b.n	80148e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80148de:	2300      	movs	r3, #0
 80148e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80148e2:	68fb      	ldr	r3, [r7, #12]
	}
 80148e4:	4618      	mov	r0, r3
 80148e6:	3714      	adds	r7, #20
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr

080148f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b086      	sub	sp, #24
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80148fc:	2300      	movs	r3, #0
 80148fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801490a:	2b00      	cmp	r3, #0
 801490c:	d10d      	bne.n	801492a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d14d      	bne.n	80149b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	4618      	mov	r0, r3
 801491c:	f001 f844 	bl	80159a8 <xTaskPriorityDisinherit>
 8014920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2200      	movs	r2, #0
 8014926:	609a      	str	r2, [r3, #8]
 8014928:	e043      	b.n	80149b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d119      	bne.n	8014964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6858      	ldr	r0, [r3, #4]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014938:	461a      	mov	r2, r3
 801493a:	68b9      	ldr	r1, [r7, #8]
 801493c:	f006 fda5 	bl	801b48a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	685a      	ldr	r2, [r3, #4]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014948:	441a      	add	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	685a      	ldr	r2, [r3, #4]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	689b      	ldr	r3, [r3, #8]
 8014956:	429a      	cmp	r2, r3
 8014958:	d32b      	bcc.n	80149b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	605a      	str	r2, [r3, #4]
 8014962:	e026      	b.n	80149b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	68d8      	ldr	r0, [r3, #12]
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801496c:	461a      	mov	r2, r3
 801496e:	68b9      	ldr	r1, [r7, #8]
 8014970:	f006 fd8b 	bl	801b48a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	68da      	ldr	r2, [r3, #12]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801497c:	425b      	negs	r3, r3
 801497e:	441a      	add	r2, r3
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	68da      	ldr	r2, [r3, #12]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	429a      	cmp	r2, r3
 801498e:	d207      	bcs.n	80149a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	689a      	ldr	r2, [r3, #8]
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014998:	425b      	negs	r3, r3
 801499a:	441a      	add	r2, r3
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	d105      	bne.n	80149b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d002      	beq.n	80149b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80149ac:	693b      	ldr	r3, [r7, #16]
 80149ae:	3b01      	subs	r3, #1
 80149b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	1c5a      	adds	r2, r3, #1
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80149ba:	697b      	ldr	r3, [r7, #20]
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3718      	adds	r7, #24
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d018      	beq.n	8014a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	68da      	ldr	r2, [r3, #12]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149de:	441a      	add	r2, r3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	68da      	ldr	r2, [r3, #12]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	689b      	ldr	r3, [r3, #8]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d303      	bcc.n	80149f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	68d9      	ldr	r1, [r3, #12]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a00:	461a      	mov	r2, r3
 8014a02:	6838      	ldr	r0, [r7, #0]
 8014a04:	f006 fd41 	bl	801b48a <memcpy>
	}
}
 8014a08:	bf00      	nop
 8014a0a:	3708      	adds	r7, #8
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b084      	sub	sp, #16
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014a18:	f001 feee 	bl	80167f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a24:	e011      	b.n	8014a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d012      	beq.n	8014a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	3324      	adds	r3, #36	@ 0x24
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 fd5c 	bl	80154f0 <xTaskRemoveFromEventList>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d001      	beq.n	8014a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014a3e:	f000 fe35 	bl	80156ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014a42:	7bfb      	ldrb	r3, [r7, #15]
 8014a44:	3b01      	subs	r3, #1
 8014a46:	b2db      	uxtb	r3, r3
 8014a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	dce9      	bgt.n	8014a26 <prvUnlockQueue+0x16>
 8014a52:	e000      	b.n	8014a56 <prvUnlockQueue+0x46>
					break;
 8014a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	22ff      	movs	r2, #255	@ 0xff
 8014a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014a5e:	f001 fefd 	bl	801685c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014a62:	f001 fec9 	bl	80167f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a6e:	e011      	b.n	8014a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	691b      	ldr	r3, [r3, #16]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d012      	beq.n	8014a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	3310      	adds	r3, #16
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f000 fd37 	bl	80154f0 <xTaskRemoveFromEventList>
 8014a82:	4603      	mov	r3, r0
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d001      	beq.n	8014a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014a88:	f000 fe10 	bl	80156ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014a8c:	7bbb      	ldrb	r3, [r7, #14]
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	dce9      	bgt.n	8014a70 <prvUnlockQueue+0x60>
 8014a9c:	e000      	b.n	8014aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	22ff      	movs	r2, #255	@ 0xff
 8014aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014aa8:	f001 fed8 	bl	801685c <vPortExitCritical>
}
 8014aac:	bf00      	nop
 8014aae:	3710      	adds	r7, #16
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014abc:	f001 fe9c 	bl	80167f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d102      	bne.n	8014ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014ac8:	2301      	movs	r3, #1
 8014aca:	60fb      	str	r3, [r7, #12]
 8014acc:	e001      	b.n	8014ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014ad2:	f001 fec3 	bl	801685c <vPortExitCritical>

	return xReturn;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3710      	adds	r7, #16
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b084      	sub	sp, #16
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014ae8:	f001 fe86 	bl	80167f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d102      	bne.n	8014afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014af8:	2301      	movs	r3, #1
 8014afa:	60fb      	str	r3, [r7, #12]
 8014afc:	e001      	b.n	8014b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014afe:	2300      	movs	r3, #0
 8014b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014b02:	f001 feab 	bl	801685c <vPortExitCritical>

	return xReturn;
 8014b06:	68fb      	ldr	r3, [r7, #12]
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3710      	adds	r7, #16
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014b10:	b480      	push	{r7}
 8014b12:	b085      	sub	sp, #20
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	60fb      	str	r3, [r7, #12]
 8014b1e:	e014      	b.n	8014b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014b20:	4a0f      	ldr	r2, [pc, #60]	@ (8014b60 <vQueueAddToRegistry+0x50>)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d10b      	bne.n	8014b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014b2c:	490c      	ldr	r1, [pc, #48]	@ (8014b60 <vQueueAddToRegistry+0x50>)
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	683a      	ldr	r2, [r7, #0]
 8014b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014b36:	4a0a      	ldr	r2, [pc, #40]	@ (8014b60 <vQueueAddToRegistry+0x50>)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	00db      	lsls	r3, r3, #3
 8014b3c:	4413      	add	r3, r2
 8014b3e:	687a      	ldr	r2, [r7, #4]
 8014b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014b42:	e006      	b.n	8014b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	3301      	adds	r3, #1
 8014b48:	60fb      	str	r3, [r7, #12]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	2b07      	cmp	r3, #7
 8014b4e:	d9e7      	bls.n	8014b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014b50:	bf00      	nop
 8014b52:	bf00      	nop
 8014b54:	3714      	adds	r7, #20
 8014b56:	46bd      	mov	sp, r7
 8014b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5c:	4770      	bx	lr
 8014b5e:	bf00      	nop
 8014b60:	2000521c 	.word	0x2000521c

08014b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014b74:	f001 fe40 	bl	80167f8 <vPortEnterCritical>
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014b7e:	b25b      	sxtb	r3, r3
 8014b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b84:	d103      	bne.n	8014b8e <vQueueWaitForMessageRestricted+0x2a>
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014b94:	b25b      	sxtb	r3, r3
 8014b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9a:	d103      	bne.n	8014ba4 <vQueueWaitForMessageRestricted+0x40>
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014ba4:	f001 fe5a 	bl	801685c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d106      	bne.n	8014bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	3324      	adds	r3, #36	@ 0x24
 8014bb4:	687a      	ldr	r2, [r7, #4]
 8014bb6:	68b9      	ldr	r1, [r7, #8]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f000 fc6d 	bl	8015498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014bbe:	6978      	ldr	r0, [r7, #20]
 8014bc0:	f7ff ff26 	bl	8014a10 <prvUnlockQueue>
	}
 8014bc4:	bf00      	nop
 8014bc6:	3718      	adds	r7, #24
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b08e      	sub	sp, #56	@ 0x38
 8014bd0:	af04      	add	r7, sp, #16
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	60b9      	str	r1, [r7, #8]
 8014bd6:	607a      	str	r2, [r7, #4]
 8014bd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d10b      	bne.n	8014bf8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8014be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014be4:	f383 8811 	msr	BASEPRI, r3
 8014be8:	f3bf 8f6f 	isb	sy
 8014bec:	f3bf 8f4f 	dsb	sy
 8014bf0:	623b      	str	r3, [r7, #32]
}
 8014bf2:	bf00      	nop
 8014bf4:	bf00      	nop
 8014bf6:	e7fd      	b.n	8014bf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d10b      	bne.n	8014c16 <xTaskCreateStatic+0x4a>
	__asm volatile
 8014bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c02:	f383 8811 	msr	BASEPRI, r3
 8014c06:	f3bf 8f6f 	isb	sy
 8014c0a:	f3bf 8f4f 	dsb	sy
 8014c0e:	61fb      	str	r3, [r7, #28]
}
 8014c10:	bf00      	nop
 8014c12:	bf00      	nop
 8014c14:	e7fd      	b.n	8014c12 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014c16:	23a8      	movs	r3, #168	@ 0xa8
 8014c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	2ba8      	cmp	r3, #168	@ 0xa8
 8014c1e:	d00b      	beq.n	8014c38 <xTaskCreateStatic+0x6c>
	__asm volatile
 8014c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c24:	f383 8811 	msr	BASEPRI, r3
 8014c28:	f3bf 8f6f 	isb	sy
 8014c2c:	f3bf 8f4f 	dsb	sy
 8014c30:	61bb      	str	r3, [r7, #24]
}
 8014c32:	bf00      	nop
 8014c34:	bf00      	nop
 8014c36:	e7fd      	b.n	8014c34 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014c38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d01e      	beq.n	8014c7e <xTaskCreateStatic+0xb2>
 8014c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d01b      	beq.n	8014c7e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014c4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c52:	2202      	movs	r2, #2
 8014c54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014c58:	2300      	movs	r3, #0
 8014c5a:	9303      	str	r3, [sp, #12]
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c5e:	9302      	str	r3, [sp, #8]
 8014c60:	f107 0314 	add.w	r3, r7, #20
 8014c64:	9301      	str	r3, [sp, #4]
 8014c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f000 f851 	bl	8014d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014c78:	f000 f8f6 	bl	8014e68 <prvAddNewTaskToReadyList>
 8014c7c:	e001      	b.n	8014c82 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014c82:	697b      	ldr	r3, [r7, #20]
	}
 8014c84:	4618      	mov	r0, r3
 8014c86:	3728      	adds	r7, #40	@ 0x28
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b08c      	sub	sp, #48	@ 0x30
 8014c90:	af04      	add	r7, sp, #16
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	603b      	str	r3, [r7, #0]
 8014c98:	4613      	mov	r3, r2
 8014c9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c9c:	88fb      	ldrh	r3, [r7, #6]
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f001 fecb 	bl	8016a3c <pvPortMalloc>
 8014ca6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d00e      	beq.n	8014ccc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014cae:	20a8      	movs	r0, #168	@ 0xa8
 8014cb0:	f001 fec4 	bl	8016a3c <pvPortMalloc>
 8014cb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d003      	beq.n	8014cc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	697a      	ldr	r2, [r7, #20]
 8014cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8014cc2:	e005      	b.n	8014cd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014cc4:	6978      	ldr	r0, [r7, #20]
 8014cc6:	f001 ff87 	bl	8016bd8 <vPortFree>
 8014cca:	e001      	b.n	8014cd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d017      	beq.n	8014d06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014cde:	88fa      	ldrh	r2, [r7, #6]
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	9303      	str	r3, [sp, #12]
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	9302      	str	r3, [sp, #8]
 8014ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cea:	9301      	str	r3, [sp, #4]
 8014cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cee:	9300      	str	r3, [sp, #0]
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	68b9      	ldr	r1, [r7, #8]
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f000 f80f 	bl	8014d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014cfa:	69f8      	ldr	r0, [r7, #28]
 8014cfc:	f000 f8b4 	bl	8014e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014d00:	2301      	movs	r3, #1
 8014d02:	61bb      	str	r3, [r7, #24]
 8014d04:	e002      	b.n	8014d0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014d06:	f04f 33ff 	mov.w	r3, #4294967295
 8014d0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014d0c:	69bb      	ldr	r3, [r7, #24]
	}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3720      	adds	r7, #32
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
	...

08014d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b088      	sub	sp, #32
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	607a      	str	r2, [r7, #4]
 8014d24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	461a      	mov	r2, r3
 8014d30:	21a5      	movs	r1, #165	@ 0xa5
 8014d32:	f006 fabb 	bl	801b2ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8014d40:	3b01      	subs	r3, #1
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	4413      	add	r3, r2
 8014d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	f023 0307 	bic.w	r3, r3, #7
 8014d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014d50:	69bb      	ldr	r3, [r7, #24]
 8014d52:	f003 0307 	and.w	r3, r3, #7
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d00b      	beq.n	8014d72 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8014d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d5e:	f383 8811 	msr	BASEPRI, r3
 8014d62:	f3bf 8f6f 	isb	sy
 8014d66:	f3bf 8f4f 	dsb	sy
 8014d6a:	617b      	str	r3, [r7, #20]
}
 8014d6c:	bf00      	nop
 8014d6e:	bf00      	nop
 8014d70:	e7fd      	b.n	8014d6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d01f      	beq.n	8014db8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d78:	2300      	movs	r3, #0
 8014d7a:	61fb      	str	r3, [r7, #28]
 8014d7c:	e012      	b.n	8014da4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014d7e:	68ba      	ldr	r2, [r7, #8]
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	4413      	add	r3, r2
 8014d84:	7819      	ldrb	r1, [r3, #0]
 8014d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	3334      	adds	r3, #52	@ 0x34
 8014d8e:	460a      	mov	r2, r1
 8014d90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014d92:	68ba      	ldr	r2, [r7, #8]
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	4413      	add	r3, r2
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d006      	beq.n	8014dac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	3301      	adds	r3, #1
 8014da2:	61fb      	str	r3, [r7, #28]
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	2b0f      	cmp	r3, #15
 8014da8:	d9e9      	bls.n	8014d7e <prvInitialiseNewTask+0x66>
 8014daa:	e000      	b.n	8014dae <prvInitialiseNewTask+0x96>
			{
				break;
 8014dac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db0:	2200      	movs	r2, #0
 8014db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014db6:	e003      	b.n	8014dc0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dba:	2200      	movs	r2, #0
 8014dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dc2:	2b37      	cmp	r3, #55	@ 0x37
 8014dc4:	d901      	bls.n	8014dca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014dc6:	2337      	movs	r3, #55	@ 0x37
 8014dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014dce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd8:	2200      	movs	r2, #0
 8014dda:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dde:	3304      	adds	r3, #4
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7fe ffcf 	bl	8013d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de8:	3318      	adds	r3, #24
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7fe ffca 	bl	8013d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014df4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014df8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e08:	2200      	movs	r2, #0
 8014e0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e10:	2200      	movs	r2, #0
 8014e12:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e18:	3354      	adds	r3, #84	@ 0x54
 8014e1a:	224c      	movs	r2, #76	@ 0x4c
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f006 fa44 	bl	801b2ac <memset>
 8014e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e26:	4a0d      	ldr	r2, [pc, #52]	@ (8014e5c <prvInitialiseNewTask+0x144>)
 8014e28:	659a      	str	r2, [r3, #88]	@ 0x58
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8014e60 <prvInitialiseNewTask+0x148>)
 8014e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e32:	4a0c      	ldr	r2, [pc, #48]	@ (8014e64 <prvInitialiseNewTask+0x14c>)
 8014e34:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014e36:	683a      	ldr	r2, [r7, #0]
 8014e38:	68f9      	ldr	r1, [r7, #12]
 8014e3a:	69b8      	ldr	r0, [r7, #24]
 8014e3c:	f001 fbaa 	bl	8016594 <pxPortInitialiseStack>
 8014e40:	4602      	mov	r2, r0
 8014e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d002      	beq.n	8014e52 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e52:	bf00      	nop
 8014e54:	3720      	adds	r7, #32
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	2000b090 	.word	0x2000b090
 8014e60:	2000b0f8 	.word	0x2000b0f8
 8014e64:	2000b160 	.word	0x2000b160

08014e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014e70:	f001 fcc2 	bl	80167f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014e74:	4b2d      	ldr	r3, [pc, #180]	@ (8014f2c <prvAddNewTaskToReadyList+0xc4>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8014f2c <prvAddNewTaskToReadyList+0xc4>)
 8014e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8014f30 <prvAddNewTaskToReadyList+0xc8>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d109      	bne.n	8014e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014e86:	4a2a      	ldr	r2, [pc, #168]	@ (8014f30 <prvAddNewTaskToReadyList+0xc8>)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014e8c:	4b27      	ldr	r3, [pc, #156]	@ (8014f2c <prvAddNewTaskToReadyList+0xc4>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d110      	bne.n	8014eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014e94:	f000 fc2e 	bl	80156f4 <prvInitialiseTaskLists>
 8014e98:	e00d      	b.n	8014eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e9a:	4b26      	ldr	r3, [pc, #152]	@ (8014f34 <prvAddNewTaskToReadyList+0xcc>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d109      	bne.n	8014eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014ea2:	4b23      	ldr	r3, [pc, #140]	@ (8014f30 <prvAddNewTaskToReadyList+0xc8>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d802      	bhi.n	8014eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8014f30 <prvAddNewTaskToReadyList+0xc8>)
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014eb6:	4b20      	ldr	r3, [pc, #128]	@ (8014f38 <prvAddNewTaskToReadyList+0xd0>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	3301      	adds	r3, #1
 8014ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8014f38 <prvAddNewTaskToReadyList+0xd0>)
 8014ebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8014f38 <prvAddNewTaskToReadyList+0xd0>)
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8014f3c <prvAddNewTaskToReadyList+0xd4>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d903      	bls.n	8014edc <prvAddNewTaskToReadyList+0x74>
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ed8:	4a18      	ldr	r2, [pc, #96]	@ (8014f3c <prvAddNewTaskToReadyList+0xd4>)
 8014eda:	6013      	str	r3, [r2, #0]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ee0:	4613      	mov	r3, r2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4413      	add	r3, r2
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	4a15      	ldr	r2, [pc, #84]	@ (8014f40 <prvAddNewTaskToReadyList+0xd8>)
 8014eea:	441a      	add	r2, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	3304      	adds	r3, #4
 8014ef0:	4619      	mov	r1, r3
 8014ef2:	4610      	mov	r0, r2
 8014ef4:	f7fe ff53 	bl	8013d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014ef8:	f001 fcb0 	bl	801685c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014efc:	4b0d      	ldr	r3, [pc, #52]	@ (8014f34 <prvAddNewTaskToReadyList+0xcc>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00e      	beq.n	8014f22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014f04:	4b0a      	ldr	r3, [pc, #40]	@ (8014f30 <prvAddNewTaskToReadyList+0xc8>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d207      	bcs.n	8014f22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014f12:	4b0c      	ldr	r3, [pc, #48]	@ (8014f44 <prvAddNewTaskToReadyList+0xdc>)
 8014f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	20005730 	.word	0x20005730
 8014f30:	2000525c 	.word	0x2000525c
 8014f34:	2000573c 	.word	0x2000573c
 8014f38:	2000574c 	.word	0x2000574c
 8014f3c:	20005738 	.word	0x20005738
 8014f40:	20005260 	.word	0x20005260
 8014f44:	e000ed04 	.word	0xe000ed04

08014f48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014f50:	2300      	movs	r3, #0
 8014f52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d018      	beq.n	8014f8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014f5a:	4b14      	ldr	r3, [pc, #80]	@ (8014fac <vTaskDelay+0x64>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d00b      	beq.n	8014f7a <vTaskDelay+0x32>
	__asm volatile
 8014f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f66:	f383 8811 	msr	BASEPRI, r3
 8014f6a:	f3bf 8f6f 	isb	sy
 8014f6e:	f3bf 8f4f 	dsb	sy
 8014f72:	60bb      	str	r3, [r7, #8]
}
 8014f74:	bf00      	nop
 8014f76:	bf00      	nop
 8014f78:	e7fd      	b.n	8014f76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014f7a:	f000 f88b 	bl	8015094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014f7e:	2100      	movs	r1, #0
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f000 fefb 	bl	8015d7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014f86:	f000 f893 	bl	80150b0 <xTaskResumeAll>
 8014f8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d107      	bne.n	8014fa2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014f92:	4b07      	ldr	r3, [pc, #28]	@ (8014fb0 <vTaskDelay+0x68>)
 8014f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f98:	601a      	str	r2, [r3, #0]
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014fa2:	bf00      	nop
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	20005758 	.word	0x20005758
 8014fb0:	e000ed04 	.word	0xe000ed04

08014fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b08a      	sub	sp, #40	@ 0x28
 8014fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014fc2:	463a      	mov	r2, r7
 8014fc4:	1d39      	adds	r1, r7, #4
 8014fc6:	f107 0308 	add.w	r3, r7, #8
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fe fe86 	bl	8013cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014fd0:	6839      	ldr	r1, [r7, #0]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	9202      	str	r2, [sp, #8]
 8014fd8:	9301      	str	r3, [sp, #4]
 8014fda:	2300      	movs	r3, #0
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	2300      	movs	r3, #0
 8014fe0:	460a      	mov	r2, r1
 8014fe2:	4924      	ldr	r1, [pc, #144]	@ (8015074 <vTaskStartScheduler+0xc0>)
 8014fe4:	4824      	ldr	r0, [pc, #144]	@ (8015078 <vTaskStartScheduler+0xc4>)
 8014fe6:	f7ff fdf1 	bl	8014bcc <xTaskCreateStatic>
 8014fea:	4603      	mov	r3, r0
 8014fec:	4a23      	ldr	r2, [pc, #140]	@ (801507c <vTaskStartScheduler+0xc8>)
 8014fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014ff0:	4b22      	ldr	r3, [pc, #136]	@ (801507c <vTaskStartScheduler+0xc8>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d002      	beq.n	8014ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	617b      	str	r3, [r7, #20]
 8014ffc:	e001      	b.n	8015002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014ffe:	2300      	movs	r3, #0
 8015000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	2b01      	cmp	r3, #1
 8015006:	d102      	bne.n	801500e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015008:	f000 ff0c 	bl	8015e24 <xTimerCreateTimerTask>
 801500c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	2b01      	cmp	r3, #1
 8015012:	d11b      	bne.n	801504c <vTaskStartScheduler+0x98>
	__asm volatile
 8015014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015018:	f383 8811 	msr	BASEPRI, r3
 801501c:	f3bf 8f6f 	isb	sy
 8015020:	f3bf 8f4f 	dsb	sy
 8015024:	613b      	str	r3, [r7, #16]
}
 8015026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015028:	4b15      	ldr	r3, [pc, #84]	@ (8015080 <vTaskStartScheduler+0xcc>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	3354      	adds	r3, #84	@ 0x54
 801502e:	4a15      	ldr	r2, [pc, #84]	@ (8015084 <vTaskStartScheduler+0xd0>)
 8015030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015032:	4b15      	ldr	r3, [pc, #84]	@ (8015088 <vTaskStartScheduler+0xd4>)
 8015034:	f04f 32ff 	mov.w	r2, #4294967295
 8015038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801503a:	4b14      	ldr	r3, [pc, #80]	@ (801508c <vTaskStartScheduler+0xd8>)
 801503c:	2201      	movs	r2, #1
 801503e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015040:	4b13      	ldr	r3, [pc, #76]	@ (8015090 <vTaskStartScheduler+0xdc>)
 8015042:	2200      	movs	r2, #0
 8015044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015046:	f001 fb33 	bl	80166b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801504a:	e00f      	b.n	801506c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015052:	d10b      	bne.n	801506c <vTaskStartScheduler+0xb8>
	__asm volatile
 8015054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015058:	f383 8811 	msr	BASEPRI, r3
 801505c:	f3bf 8f6f 	isb	sy
 8015060:	f3bf 8f4f 	dsb	sy
 8015064:	60fb      	str	r3, [r7, #12]
}
 8015066:	bf00      	nop
 8015068:	bf00      	nop
 801506a:	e7fd      	b.n	8015068 <vTaskStartScheduler+0xb4>
}
 801506c:	bf00      	nop
 801506e:	3718      	adds	r7, #24
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	080201f8 	.word	0x080201f8
 8015078:	080156c5 	.word	0x080156c5
 801507c:	20005754 	.word	0x20005754
 8015080:	2000525c 	.word	0x2000525c
 8015084:	200002cc 	.word	0x200002cc
 8015088:	20005750 	.word	0x20005750
 801508c:	2000573c 	.word	0x2000573c
 8015090:	20005734 	.word	0x20005734

08015094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015094:	b480      	push	{r7}
 8015096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015098:	4b04      	ldr	r3, [pc, #16]	@ (80150ac <vTaskSuspendAll+0x18>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	3301      	adds	r3, #1
 801509e:	4a03      	ldr	r2, [pc, #12]	@ (80150ac <vTaskSuspendAll+0x18>)
 80150a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80150a2:	bf00      	nop
 80150a4:	46bd      	mov	sp, r7
 80150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150aa:	4770      	bx	lr
 80150ac:	20005758 	.word	0x20005758

080150b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80150ba:	2300      	movs	r3, #0
 80150bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80150be:	4b42      	ldr	r3, [pc, #264]	@ (80151c8 <xTaskResumeAll+0x118>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d10b      	bne.n	80150de <xTaskResumeAll+0x2e>
	__asm volatile
 80150c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150ca:	f383 8811 	msr	BASEPRI, r3
 80150ce:	f3bf 8f6f 	isb	sy
 80150d2:	f3bf 8f4f 	dsb	sy
 80150d6:	603b      	str	r3, [r7, #0]
}
 80150d8:	bf00      	nop
 80150da:	bf00      	nop
 80150dc:	e7fd      	b.n	80150da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80150de:	f001 fb8b 	bl	80167f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80150e2:	4b39      	ldr	r3, [pc, #228]	@ (80151c8 <xTaskResumeAll+0x118>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	3b01      	subs	r3, #1
 80150e8:	4a37      	ldr	r2, [pc, #220]	@ (80151c8 <xTaskResumeAll+0x118>)
 80150ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150ec:	4b36      	ldr	r3, [pc, #216]	@ (80151c8 <xTaskResumeAll+0x118>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d162      	bne.n	80151ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80150f4:	4b35      	ldr	r3, [pc, #212]	@ (80151cc <xTaskResumeAll+0x11c>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d05e      	beq.n	80151ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150fc:	e02f      	b.n	801515e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150fe:	4b34      	ldr	r3, [pc, #208]	@ (80151d0 <xTaskResumeAll+0x120>)
 8015100:	68db      	ldr	r3, [r3, #12]
 8015102:	68db      	ldr	r3, [r3, #12]
 8015104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	3318      	adds	r3, #24
 801510a:	4618      	mov	r0, r3
 801510c:	f7fe fea4 	bl	8013e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	3304      	adds	r3, #4
 8015114:	4618      	mov	r0, r3
 8015116:	f7fe fe9f 	bl	8013e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801511e:	4b2d      	ldr	r3, [pc, #180]	@ (80151d4 <xTaskResumeAll+0x124>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	429a      	cmp	r2, r3
 8015124:	d903      	bls.n	801512e <xTaskResumeAll+0x7e>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801512a:	4a2a      	ldr	r2, [pc, #168]	@ (80151d4 <xTaskResumeAll+0x124>)
 801512c:	6013      	str	r3, [r2, #0]
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015132:	4613      	mov	r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	4413      	add	r3, r2
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	4a27      	ldr	r2, [pc, #156]	@ (80151d8 <xTaskResumeAll+0x128>)
 801513c:	441a      	add	r2, r3
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	3304      	adds	r3, #4
 8015142:	4619      	mov	r1, r3
 8015144:	4610      	mov	r0, r2
 8015146:	f7fe fe2a 	bl	8013d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801514e:	4b23      	ldr	r3, [pc, #140]	@ (80151dc <xTaskResumeAll+0x12c>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015154:	429a      	cmp	r2, r3
 8015156:	d302      	bcc.n	801515e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015158:	4b21      	ldr	r3, [pc, #132]	@ (80151e0 <xTaskResumeAll+0x130>)
 801515a:	2201      	movs	r2, #1
 801515c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801515e:	4b1c      	ldr	r3, [pc, #112]	@ (80151d0 <xTaskResumeAll+0x120>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d1cb      	bne.n	80150fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d001      	beq.n	8015170 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801516c:	f000 fb66 	bl	801583c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015170:	4b1c      	ldr	r3, [pc, #112]	@ (80151e4 <xTaskResumeAll+0x134>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d010      	beq.n	801519e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801517c:	f000 f846 	bl	801520c <xTaskIncrementTick>
 8015180:	4603      	mov	r3, r0
 8015182:	2b00      	cmp	r3, #0
 8015184:	d002      	beq.n	801518c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015186:	4b16      	ldr	r3, [pc, #88]	@ (80151e0 <xTaskResumeAll+0x130>)
 8015188:	2201      	movs	r2, #1
 801518a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	3b01      	subs	r3, #1
 8015190:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d1f1      	bne.n	801517c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015198:	4b12      	ldr	r3, [pc, #72]	@ (80151e4 <xTaskResumeAll+0x134>)
 801519a:	2200      	movs	r2, #0
 801519c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801519e:	4b10      	ldr	r3, [pc, #64]	@ (80151e0 <xTaskResumeAll+0x130>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d009      	beq.n	80151ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80151a6:	2301      	movs	r3, #1
 80151a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80151aa:	4b0f      	ldr	r3, [pc, #60]	@ (80151e8 <xTaskResumeAll+0x138>)
 80151ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151b0:	601a      	str	r2, [r3, #0]
 80151b2:	f3bf 8f4f 	dsb	sy
 80151b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80151ba:	f001 fb4f 	bl	801685c <vPortExitCritical>

	return xAlreadyYielded;
 80151be:	68bb      	ldr	r3, [r7, #8]
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	20005758 	.word	0x20005758
 80151cc:	20005730 	.word	0x20005730
 80151d0:	200056f0 	.word	0x200056f0
 80151d4:	20005738 	.word	0x20005738
 80151d8:	20005260 	.word	0x20005260
 80151dc:	2000525c 	.word	0x2000525c
 80151e0:	20005744 	.word	0x20005744
 80151e4:	20005740 	.word	0x20005740
 80151e8:	e000ed04 	.word	0xe000ed04

080151ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80151ec:	b480      	push	{r7}
 80151ee:	b083      	sub	sp, #12
 80151f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80151f2:	4b05      	ldr	r3, [pc, #20]	@ (8015208 <xTaskGetTickCount+0x1c>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80151f8:	687b      	ldr	r3, [r7, #4]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	370c      	adds	r7, #12
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	20005734 	.word	0x20005734

0801520c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b086      	sub	sp, #24
 8015210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015212:	2300      	movs	r3, #0
 8015214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015216:	4b4f      	ldr	r3, [pc, #316]	@ (8015354 <xTaskIncrementTick+0x148>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	f040 8090 	bne.w	8015340 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015220:	4b4d      	ldr	r3, [pc, #308]	@ (8015358 <xTaskIncrementTick+0x14c>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	3301      	adds	r3, #1
 8015226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015228:	4a4b      	ldr	r2, [pc, #300]	@ (8015358 <xTaskIncrementTick+0x14c>)
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d121      	bne.n	8015278 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015234:	4b49      	ldr	r3, [pc, #292]	@ (801535c <xTaskIncrementTick+0x150>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00b      	beq.n	8015256 <xTaskIncrementTick+0x4a>
	__asm volatile
 801523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	603b      	str	r3, [r7, #0]
}
 8015250:	bf00      	nop
 8015252:	bf00      	nop
 8015254:	e7fd      	b.n	8015252 <xTaskIncrementTick+0x46>
 8015256:	4b41      	ldr	r3, [pc, #260]	@ (801535c <xTaskIncrementTick+0x150>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	4b40      	ldr	r3, [pc, #256]	@ (8015360 <xTaskIncrementTick+0x154>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	4a3e      	ldr	r2, [pc, #248]	@ (801535c <xTaskIncrementTick+0x150>)
 8015262:	6013      	str	r3, [r2, #0]
 8015264:	4a3e      	ldr	r2, [pc, #248]	@ (8015360 <xTaskIncrementTick+0x154>)
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	6013      	str	r3, [r2, #0]
 801526a:	4b3e      	ldr	r3, [pc, #248]	@ (8015364 <xTaskIncrementTick+0x158>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	3301      	adds	r3, #1
 8015270:	4a3c      	ldr	r2, [pc, #240]	@ (8015364 <xTaskIncrementTick+0x158>)
 8015272:	6013      	str	r3, [r2, #0]
 8015274:	f000 fae2 	bl	801583c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015278:	4b3b      	ldr	r3, [pc, #236]	@ (8015368 <xTaskIncrementTick+0x15c>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	693a      	ldr	r2, [r7, #16]
 801527e:	429a      	cmp	r2, r3
 8015280:	d349      	bcc.n	8015316 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015282:	4b36      	ldr	r3, [pc, #216]	@ (801535c <xTaskIncrementTick+0x150>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d104      	bne.n	8015296 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801528c:	4b36      	ldr	r3, [pc, #216]	@ (8015368 <xTaskIncrementTick+0x15c>)
 801528e:	f04f 32ff 	mov.w	r2, #4294967295
 8015292:	601a      	str	r2, [r3, #0]
					break;
 8015294:	e03f      	b.n	8015316 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015296:	4b31      	ldr	r3, [pc, #196]	@ (801535c <xTaskIncrementTick+0x150>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	68db      	ldr	r3, [r3, #12]
 801529c:	68db      	ldr	r3, [r3, #12]
 801529e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80152a6:	693a      	ldr	r2, [r7, #16]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d203      	bcs.n	80152b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80152ae:	4a2e      	ldr	r2, [pc, #184]	@ (8015368 <xTaskIncrementTick+0x15c>)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80152b4:	e02f      	b.n	8015316 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	3304      	adds	r3, #4
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7fe fdcc 	bl	8013e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d004      	beq.n	80152d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	3318      	adds	r3, #24
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7fe fdc3 	bl	8013e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152d6:	4b25      	ldr	r3, [pc, #148]	@ (801536c <xTaskIncrementTick+0x160>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d903      	bls.n	80152e6 <xTaskIncrementTick+0xda>
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152e2:	4a22      	ldr	r2, [pc, #136]	@ (801536c <xTaskIncrementTick+0x160>)
 80152e4:	6013      	str	r3, [r2, #0]
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152ea:	4613      	mov	r3, r2
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	4413      	add	r3, r2
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	4a1f      	ldr	r2, [pc, #124]	@ (8015370 <xTaskIncrementTick+0x164>)
 80152f4:	441a      	add	r2, r3
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	3304      	adds	r3, #4
 80152fa:	4619      	mov	r1, r3
 80152fc:	4610      	mov	r0, r2
 80152fe:	f7fe fd4e 	bl	8013d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015306:	4b1b      	ldr	r3, [pc, #108]	@ (8015374 <xTaskIncrementTick+0x168>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801530c:	429a      	cmp	r2, r3
 801530e:	d3b8      	bcc.n	8015282 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015310:	2301      	movs	r3, #1
 8015312:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015314:	e7b5      	b.n	8015282 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015316:	4b17      	ldr	r3, [pc, #92]	@ (8015374 <xTaskIncrementTick+0x168>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801531c:	4914      	ldr	r1, [pc, #80]	@ (8015370 <xTaskIncrementTick+0x164>)
 801531e:	4613      	mov	r3, r2
 8015320:	009b      	lsls	r3, r3, #2
 8015322:	4413      	add	r3, r2
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	440b      	add	r3, r1
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	2b01      	cmp	r3, #1
 801532c:	d901      	bls.n	8015332 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801532e:	2301      	movs	r3, #1
 8015330:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015332:	4b11      	ldr	r3, [pc, #68]	@ (8015378 <xTaskIncrementTick+0x16c>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d007      	beq.n	801534a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801533a:	2301      	movs	r3, #1
 801533c:	617b      	str	r3, [r7, #20]
 801533e:	e004      	b.n	801534a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015340:	4b0e      	ldr	r3, [pc, #56]	@ (801537c <xTaskIncrementTick+0x170>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	3301      	adds	r3, #1
 8015346:	4a0d      	ldr	r2, [pc, #52]	@ (801537c <xTaskIncrementTick+0x170>)
 8015348:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801534a:	697b      	ldr	r3, [r7, #20]
}
 801534c:	4618      	mov	r0, r3
 801534e:	3718      	adds	r7, #24
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	20005758 	.word	0x20005758
 8015358:	20005734 	.word	0x20005734
 801535c:	200056e8 	.word	0x200056e8
 8015360:	200056ec 	.word	0x200056ec
 8015364:	20005748 	.word	0x20005748
 8015368:	20005750 	.word	0x20005750
 801536c:	20005738 	.word	0x20005738
 8015370:	20005260 	.word	0x20005260
 8015374:	2000525c 	.word	0x2000525c
 8015378:	20005744 	.word	0x20005744
 801537c:	20005740 	.word	0x20005740

08015380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015380:	b480      	push	{r7}
 8015382:	b085      	sub	sp, #20
 8015384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015386:	4b2b      	ldr	r3, [pc, #172]	@ (8015434 <vTaskSwitchContext+0xb4>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d003      	beq.n	8015396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801538e:	4b2a      	ldr	r3, [pc, #168]	@ (8015438 <vTaskSwitchContext+0xb8>)
 8015390:	2201      	movs	r2, #1
 8015392:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015394:	e047      	b.n	8015426 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8015396:	4b28      	ldr	r3, [pc, #160]	@ (8015438 <vTaskSwitchContext+0xb8>)
 8015398:	2200      	movs	r2, #0
 801539a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801539c:	4b27      	ldr	r3, [pc, #156]	@ (801543c <vTaskSwitchContext+0xbc>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	60fb      	str	r3, [r7, #12]
 80153a2:	e011      	b.n	80153c8 <vTaskSwitchContext+0x48>
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d10b      	bne.n	80153c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80153aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153ae:	f383 8811 	msr	BASEPRI, r3
 80153b2:	f3bf 8f6f 	isb	sy
 80153b6:	f3bf 8f4f 	dsb	sy
 80153ba:	607b      	str	r3, [r7, #4]
}
 80153bc:	bf00      	nop
 80153be:	bf00      	nop
 80153c0:	e7fd      	b.n	80153be <vTaskSwitchContext+0x3e>
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	3b01      	subs	r3, #1
 80153c6:	60fb      	str	r3, [r7, #12]
 80153c8:	491d      	ldr	r1, [pc, #116]	@ (8015440 <vTaskSwitchContext+0xc0>)
 80153ca:	68fa      	ldr	r2, [r7, #12]
 80153cc:	4613      	mov	r3, r2
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	4413      	add	r3, r2
 80153d2:	009b      	lsls	r3, r3, #2
 80153d4:	440b      	add	r3, r1
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d0e3      	beq.n	80153a4 <vTaskSwitchContext+0x24>
 80153dc:	68fa      	ldr	r2, [r7, #12]
 80153de:	4613      	mov	r3, r2
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	4413      	add	r3, r2
 80153e4:	009b      	lsls	r3, r3, #2
 80153e6:	4a16      	ldr	r2, [pc, #88]	@ (8015440 <vTaskSwitchContext+0xc0>)
 80153e8:	4413      	add	r3, r2
 80153ea:	60bb      	str	r3, [r7, #8]
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	685a      	ldr	r2, [r3, #4]
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	605a      	str	r2, [r3, #4]
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	685a      	ldr	r2, [r3, #4]
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	3308      	adds	r3, #8
 80153fe:	429a      	cmp	r2, r3
 8015400:	d104      	bne.n	801540c <vTaskSwitchContext+0x8c>
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	685a      	ldr	r2, [r3, #4]
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	605a      	str	r2, [r3, #4]
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	4a0c      	ldr	r2, [pc, #48]	@ (8015444 <vTaskSwitchContext+0xc4>)
 8015414:	6013      	str	r3, [r2, #0]
 8015416:	4a09      	ldr	r2, [pc, #36]	@ (801543c <vTaskSwitchContext+0xbc>)
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801541c:	4b09      	ldr	r3, [pc, #36]	@ (8015444 <vTaskSwitchContext+0xc4>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	3354      	adds	r3, #84	@ 0x54
 8015422:	4a09      	ldr	r2, [pc, #36]	@ (8015448 <vTaskSwitchContext+0xc8>)
 8015424:	6013      	str	r3, [r2, #0]
}
 8015426:	bf00      	nop
 8015428:	3714      	adds	r7, #20
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr
 8015432:	bf00      	nop
 8015434:	20005758 	.word	0x20005758
 8015438:	20005744 	.word	0x20005744
 801543c:	20005738 	.word	0x20005738
 8015440:	20005260 	.word	0x20005260
 8015444:	2000525c 	.word	0x2000525c
 8015448:	200002cc 	.word	0x200002cc

0801544c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d10b      	bne.n	8015474 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015460:	f383 8811 	msr	BASEPRI, r3
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	f3bf 8f4f 	dsb	sy
 801546c:	60fb      	str	r3, [r7, #12]
}
 801546e:	bf00      	nop
 8015470:	bf00      	nop
 8015472:	e7fd      	b.n	8015470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015474:	4b07      	ldr	r3, [pc, #28]	@ (8015494 <vTaskPlaceOnEventList+0x48>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	3318      	adds	r3, #24
 801547a:	4619      	mov	r1, r3
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f7fe fcb2 	bl	8013de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015482:	2101      	movs	r1, #1
 8015484:	6838      	ldr	r0, [r7, #0]
 8015486:	f000 fc79 	bl	8015d7c <prvAddCurrentTaskToDelayedList>
}
 801548a:	bf00      	nop
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	2000525c 	.word	0x2000525c

08015498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015498:	b580      	push	{r7, lr}
 801549a:	b086      	sub	sp, #24
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d10b      	bne.n	80154c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80154aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154ae:	f383 8811 	msr	BASEPRI, r3
 80154b2:	f3bf 8f6f 	isb	sy
 80154b6:	f3bf 8f4f 	dsb	sy
 80154ba:	617b      	str	r3, [r7, #20]
}
 80154bc:	bf00      	nop
 80154be:	bf00      	nop
 80154c0:	e7fd      	b.n	80154be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154c2:	4b0a      	ldr	r3, [pc, #40]	@ (80154ec <vTaskPlaceOnEventListRestricted+0x54>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	3318      	adds	r3, #24
 80154c8:	4619      	mov	r1, r3
 80154ca:	68f8      	ldr	r0, [r7, #12]
 80154cc:	f7fe fc67 	bl	8013d9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d002      	beq.n	80154dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80154d6:	f04f 33ff 	mov.w	r3, #4294967295
 80154da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80154dc:	6879      	ldr	r1, [r7, #4]
 80154de:	68b8      	ldr	r0, [r7, #8]
 80154e0:	f000 fc4c 	bl	8015d7c <prvAddCurrentTaskToDelayedList>
	}
 80154e4:	bf00      	nop
 80154e6:	3718      	adds	r7, #24
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	2000525c 	.word	0x2000525c

080154f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b086      	sub	sp, #24
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	68db      	ldr	r3, [r3, #12]
 80154fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d10b      	bne.n	801551e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801550a:	f383 8811 	msr	BASEPRI, r3
 801550e:	f3bf 8f6f 	isb	sy
 8015512:	f3bf 8f4f 	dsb	sy
 8015516:	60fb      	str	r3, [r7, #12]
}
 8015518:	bf00      	nop
 801551a:	bf00      	nop
 801551c:	e7fd      	b.n	801551a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	3318      	adds	r3, #24
 8015522:	4618      	mov	r0, r3
 8015524:	f7fe fc98 	bl	8013e58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015528:	4b1d      	ldr	r3, [pc, #116]	@ (80155a0 <xTaskRemoveFromEventList+0xb0>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d11d      	bne.n	801556c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	3304      	adds	r3, #4
 8015534:	4618      	mov	r0, r3
 8015536:	f7fe fc8f 	bl	8013e58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801553e:	4b19      	ldr	r3, [pc, #100]	@ (80155a4 <xTaskRemoveFromEventList+0xb4>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	429a      	cmp	r2, r3
 8015544:	d903      	bls.n	801554e <xTaskRemoveFromEventList+0x5e>
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801554a:	4a16      	ldr	r2, [pc, #88]	@ (80155a4 <xTaskRemoveFromEventList+0xb4>)
 801554c:	6013      	str	r3, [r2, #0]
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015552:	4613      	mov	r3, r2
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	4413      	add	r3, r2
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	4a13      	ldr	r2, [pc, #76]	@ (80155a8 <xTaskRemoveFromEventList+0xb8>)
 801555c:	441a      	add	r2, r3
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	3304      	adds	r3, #4
 8015562:	4619      	mov	r1, r3
 8015564:	4610      	mov	r0, r2
 8015566:	f7fe fc1a 	bl	8013d9e <vListInsertEnd>
 801556a:	e005      	b.n	8015578 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	3318      	adds	r3, #24
 8015570:	4619      	mov	r1, r3
 8015572:	480e      	ldr	r0, [pc, #56]	@ (80155ac <xTaskRemoveFromEventList+0xbc>)
 8015574:	f7fe fc13 	bl	8013d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801557c:	4b0c      	ldr	r3, [pc, #48]	@ (80155b0 <xTaskRemoveFromEventList+0xc0>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015582:	429a      	cmp	r2, r3
 8015584:	d905      	bls.n	8015592 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015586:	2301      	movs	r3, #1
 8015588:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801558a:	4b0a      	ldr	r3, [pc, #40]	@ (80155b4 <xTaskRemoveFromEventList+0xc4>)
 801558c:	2201      	movs	r2, #1
 801558e:	601a      	str	r2, [r3, #0]
 8015590:	e001      	b.n	8015596 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015592:	2300      	movs	r3, #0
 8015594:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015596:	697b      	ldr	r3, [r7, #20]
}
 8015598:	4618      	mov	r0, r3
 801559a:	3718      	adds	r7, #24
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	20005758 	.word	0x20005758
 80155a4:	20005738 	.word	0x20005738
 80155a8:	20005260 	.word	0x20005260
 80155ac:	200056f0 	.word	0x200056f0
 80155b0:	2000525c 	.word	0x2000525c
 80155b4:	20005744 	.word	0x20005744

080155b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80155b8:	b480      	push	{r7}
 80155ba:	b083      	sub	sp, #12
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80155c0:	4b06      	ldr	r3, [pc, #24]	@ (80155dc <vTaskInternalSetTimeOutState+0x24>)
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80155c8:	4b05      	ldr	r3, [pc, #20]	@ (80155e0 <vTaskInternalSetTimeOutState+0x28>)
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	605a      	str	r2, [r3, #4]
}
 80155d0:	bf00      	nop
 80155d2:	370c      	adds	r7, #12
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr
 80155dc:	20005748 	.word	0x20005748
 80155e0:	20005734 	.word	0x20005734

080155e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b088      	sub	sp, #32
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d10b      	bne.n	801560c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80155f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155f8:	f383 8811 	msr	BASEPRI, r3
 80155fc:	f3bf 8f6f 	isb	sy
 8015600:	f3bf 8f4f 	dsb	sy
 8015604:	613b      	str	r3, [r7, #16]
}
 8015606:	bf00      	nop
 8015608:	bf00      	nop
 801560a:	e7fd      	b.n	8015608 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d10b      	bne.n	801562a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015616:	f383 8811 	msr	BASEPRI, r3
 801561a:	f3bf 8f6f 	isb	sy
 801561e:	f3bf 8f4f 	dsb	sy
 8015622:	60fb      	str	r3, [r7, #12]
}
 8015624:	bf00      	nop
 8015626:	bf00      	nop
 8015628:	e7fd      	b.n	8015626 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801562a:	f001 f8e5 	bl	80167f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801562e:	4b1d      	ldr	r3, [pc, #116]	@ (80156a4 <xTaskCheckForTimeOut+0xc0>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	69ba      	ldr	r2, [r7, #24]
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015646:	d102      	bne.n	801564e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015648:	2300      	movs	r3, #0
 801564a:	61fb      	str	r3, [r7, #28]
 801564c:	e023      	b.n	8015696 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	4b15      	ldr	r3, [pc, #84]	@ (80156a8 <xTaskCheckForTimeOut+0xc4>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	429a      	cmp	r2, r3
 8015658:	d007      	beq.n	801566a <xTaskCheckForTimeOut+0x86>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	69ba      	ldr	r2, [r7, #24]
 8015660:	429a      	cmp	r2, r3
 8015662:	d302      	bcc.n	801566a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015664:	2301      	movs	r3, #1
 8015666:	61fb      	str	r3, [r7, #28]
 8015668:	e015      	b.n	8015696 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	697a      	ldr	r2, [r7, #20]
 8015670:	429a      	cmp	r2, r3
 8015672:	d20b      	bcs.n	801568c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	1ad2      	subs	r2, r2, r3
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7ff ff99 	bl	80155b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015686:	2300      	movs	r3, #0
 8015688:	61fb      	str	r3, [r7, #28]
 801568a:	e004      	b.n	8015696 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	2200      	movs	r2, #0
 8015690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015692:	2301      	movs	r3, #1
 8015694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015696:	f001 f8e1 	bl	801685c <vPortExitCritical>

	return xReturn;
 801569a:	69fb      	ldr	r3, [r7, #28]
}
 801569c:	4618      	mov	r0, r3
 801569e:	3720      	adds	r7, #32
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	20005734 	.word	0x20005734
 80156a8:	20005748 	.word	0x20005748

080156ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80156ac:	b480      	push	{r7}
 80156ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80156b0:	4b03      	ldr	r3, [pc, #12]	@ (80156c0 <vTaskMissedYield+0x14>)
 80156b2:	2201      	movs	r2, #1
 80156b4:	601a      	str	r2, [r3, #0]
}
 80156b6:	bf00      	nop
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr
 80156c0:	20005744 	.word	0x20005744

080156c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80156cc:	f000 f852 	bl	8015774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80156d0:	4b06      	ldr	r3, [pc, #24]	@ (80156ec <prvIdleTask+0x28>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d9f9      	bls.n	80156cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80156d8:	4b05      	ldr	r3, [pc, #20]	@ (80156f0 <prvIdleTask+0x2c>)
 80156da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80156de:	601a      	str	r2, [r3, #0]
 80156e0:	f3bf 8f4f 	dsb	sy
 80156e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80156e8:	e7f0      	b.n	80156cc <prvIdleTask+0x8>
 80156ea:	bf00      	nop
 80156ec:	20005260 	.word	0x20005260
 80156f0:	e000ed04 	.word	0xe000ed04

080156f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156fa:	2300      	movs	r3, #0
 80156fc:	607b      	str	r3, [r7, #4]
 80156fe:	e00c      	b.n	801571a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	4613      	mov	r3, r2
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	4413      	add	r3, r2
 8015708:	009b      	lsls	r3, r3, #2
 801570a:	4a12      	ldr	r2, [pc, #72]	@ (8015754 <prvInitialiseTaskLists+0x60>)
 801570c:	4413      	add	r3, r2
 801570e:	4618      	mov	r0, r3
 8015710:	f7fe fb18 	bl	8013d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	3301      	adds	r3, #1
 8015718:	607b      	str	r3, [r7, #4]
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2b37      	cmp	r3, #55	@ 0x37
 801571e:	d9ef      	bls.n	8015700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015720:	480d      	ldr	r0, [pc, #52]	@ (8015758 <prvInitialiseTaskLists+0x64>)
 8015722:	f7fe fb0f 	bl	8013d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015726:	480d      	ldr	r0, [pc, #52]	@ (801575c <prvInitialiseTaskLists+0x68>)
 8015728:	f7fe fb0c 	bl	8013d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801572c:	480c      	ldr	r0, [pc, #48]	@ (8015760 <prvInitialiseTaskLists+0x6c>)
 801572e:	f7fe fb09 	bl	8013d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015732:	480c      	ldr	r0, [pc, #48]	@ (8015764 <prvInitialiseTaskLists+0x70>)
 8015734:	f7fe fb06 	bl	8013d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015738:	480b      	ldr	r0, [pc, #44]	@ (8015768 <prvInitialiseTaskLists+0x74>)
 801573a:	f7fe fb03 	bl	8013d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801573e:	4b0b      	ldr	r3, [pc, #44]	@ (801576c <prvInitialiseTaskLists+0x78>)
 8015740:	4a05      	ldr	r2, [pc, #20]	@ (8015758 <prvInitialiseTaskLists+0x64>)
 8015742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015744:	4b0a      	ldr	r3, [pc, #40]	@ (8015770 <prvInitialiseTaskLists+0x7c>)
 8015746:	4a05      	ldr	r2, [pc, #20]	@ (801575c <prvInitialiseTaskLists+0x68>)
 8015748:	601a      	str	r2, [r3, #0]
}
 801574a:	bf00      	nop
 801574c:	3708      	adds	r7, #8
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop
 8015754:	20005260 	.word	0x20005260
 8015758:	200056c0 	.word	0x200056c0
 801575c:	200056d4 	.word	0x200056d4
 8015760:	200056f0 	.word	0x200056f0
 8015764:	20005704 	.word	0x20005704
 8015768:	2000571c 	.word	0x2000571c
 801576c:	200056e8 	.word	0x200056e8
 8015770:	200056ec 	.word	0x200056ec

08015774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801577a:	e019      	b.n	80157b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801577c:	f001 f83c 	bl	80167f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015780:	4b10      	ldr	r3, [pc, #64]	@ (80157c4 <prvCheckTasksWaitingTermination+0x50>)
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	3304      	adds	r3, #4
 801578c:	4618      	mov	r0, r3
 801578e:	f7fe fb63 	bl	8013e58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015792:	4b0d      	ldr	r3, [pc, #52]	@ (80157c8 <prvCheckTasksWaitingTermination+0x54>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	3b01      	subs	r3, #1
 8015798:	4a0b      	ldr	r2, [pc, #44]	@ (80157c8 <prvCheckTasksWaitingTermination+0x54>)
 801579a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801579c:	4b0b      	ldr	r3, [pc, #44]	@ (80157cc <prvCheckTasksWaitingTermination+0x58>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	3b01      	subs	r3, #1
 80157a2:	4a0a      	ldr	r2, [pc, #40]	@ (80157cc <prvCheckTasksWaitingTermination+0x58>)
 80157a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80157a6:	f001 f859 	bl	801685c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f000 f810 	bl	80157d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80157b0:	4b06      	ldr	r3, [pc, #24]	@ (80157cc <prvCheckTasksWaitingTermination+0x58>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d1e1      	bne.n	801577c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80157b8:	bf00      	nop
 80157ba:	bf00      	nop
 80157bc:	3708      	adds	r7, #8
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20005704 	.word	0x20005704
 80157c8:	20005730 	.word	0x20005730
 80157cc:	20005718 	.word	0x20005718

080157d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	3354      	adds	r3, #84	@ 0x54
 80157dc:	4618      	mov	r0, r3
 80157de:	f005 fd93 	bl	801b308 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d108      	bne.n	80157fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157f0:	4618      	mov	r0, r3
 80157f2:	f001 f9f1 	bl	8016bd8 <vPortFree>
				vPortFree( pxTCB );
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f001 f9ee 	bl	8016bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80157fc:	e019      	b.n	8015832 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015804:	2b01      	cmp	r3, #1
 8015806:	d103      	bne.n	8015810 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f001 f9e5 	bl	8016bd8 <vPortFree>
	}
 801580e:	e010      	b.n	8015832 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015816:	2b02      	cmp	r3, #2
 8015818:	d00b      	beq.n	8015832 <prvDeleteTCB+0x62>
	__asm volatile
 801581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801581e:	f383 8811 	msr	BASEPRI, r3
 8015822:	f3bf 8f6f 	isb	sy
 8015826:	f3bf 8f4f 	dsb	sy
 801582a:	60fb      	str	r3, [r7, #12]
}
 801582c:	bf00      	nop
 801582e:	bf00      	nop
 8015830:	e7fd      	b.n	801582e <prvDeleteTCB+0x5e>
	}
 8015832:	bf00      	nop
 8015834:	3710      	adds	r7, #16
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
	...

0801583c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801583c:	b480      	push	{r7}
 801583e:	b083      	sub	sp, #12
 8015840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015842:	4b0c      	ldr	r3, [pc, #48]	@ (8015874 <prvResetNextTaskUnblockTime+0x38>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d104      	bne.n	8015856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801584c:	4b0a      	ldr	r3, [pc, #40]	@ (8015878 <prvResetNextTaskUnblockTime+0x3c>)
 801584e:	f04f 32ff 	mov.w	r2, #4294967295
 8015852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015854:	e008      	b.n	8015868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015856:	4b07      	ldr	r3, [pc, #28]	@ (8015874 <prvResetNextTaskUnblockTime+0x38>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	68db      	ldr	r3, [r3, #12]
 801585e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	685b      	ldr	r3, [r3, #4]
 8015864:	4a04      	ldr	r2, [pc, #16]	@ (8015878 <prvResetNextTaskUnblockTime+0x3c>)
 8015866:	6013      	str	r3, [r2, #0]
}
 8015868:	bf00      	nop
 801586a:	370c      	adds	r7, #12
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr
 8015874:	200056e8 	.word	0x200056e8
 8015878:	20005750 	.word	0x20005750

0801587c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801587c:	b480      	push	{r7}
 801587e:	b083      	sub	sp, #12
 8015880:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015882:	4b05      	ldr	r3, [pc, #20]	@ (8015898 <xTaskGetCurrentTaskHandle+0x1c>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015888:	687b      	ldr	r3, [r7, #4]
	}
 801588a:	4618      	mov	r0, r3
 801588c:	370c      	adds	r7, #12
 801588e:	46bd      	mov	sp, r7
 8015890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop
 8015898:	2000525c 	.word	0x2000525c

0801589c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801589c:	b480      	push	{r7}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80158a2:	4b0b      	ldr	r3, [pc, #44]	@ (80158d0 <xTaskGetSchedulerState+0x34>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d102      	bne.n	80158b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80158aa:	2301      	movs	r3, #1
 80158ac:	607b      	str	r3, [r7, #4]
 80158ae:	e008      	b.n	80158c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80158b0:	4b08      	ldr	r3, [pc, #32]	@ (80158d4 <xTaskGetSchedulerState+0x38>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d102      	bne.n	80158be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80158b8:	2302      	movs	r3, #2
 80158ba:	607b      	str	r3, [r7, #4]
 80158bc:	e001      	b.n	80158c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80158be:	2300      	movs	r3, #0
 80158c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80158c2:	687b      	ldr	r3, [r7, #4]
	}
 80158c4:	4618      	mov	r0, r3
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr
 80158d0:	2000573c 	.word	0x2000573c
 80158d4:	20005758 	.word	0x20005758

080158d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80158e4:	2300      	movs	r3, #0
 80158e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d051      	beq.n	8015992 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158f2:	4b2a      	ldr	r3, [pc, #168]	@ (801599c <xTaskPriorityInherit+0xc4>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d241      	bcs.n	8015980 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	699b      	ldr	r3, [r3, #24]
 8015900:	2b00      	cmp	r3, #0
 8015902:	db06      	blt.n	8015912 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015904:	4b25      	ldr	r3, [pc, #148]	@ (801599c <xTaskPriorityInherit+0xc4>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801590a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015912:	68bb      	ldr	r3, [r7, #8]
 8015914:	6959      	ldr	r1, [r3, #20]
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801591a:	4613      	mov	r3, r2
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	4413      	add	r3, r2
 8015920:	009b      	lsls	r3, r3, #2
 8015922:	4a1f      	ldr	r2, [pc, #124]	@ (80159a0 <xTaskPriorityInherit+0xc8>)
 8015924:	4413      	add	r3, r2
 8015926:	4299      	cmp	r1, r3
 8015928:	d122      	bne.n	8015970 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	3304      	adds	r3, #4
 801592e:	4618      	mov	r0, r3
 8015930:	f7fe fa92 	bl	8013e58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015934:	4b19      	ldr	r3, [pc, #100]	@ (801599c <xTaskPriorityInherit+0xc4>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015942:	4b18      	ldr	r3, [pc, #96]	@ (80159a4 <xTaskPriorityInherit+0xcc>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	429a      	cmp	r2, r3
 8015948:	d903      	bls.n	8015952 <xTaskPriorityInherit+0x7a>
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801594e:	4a15      	ldr	r2, [pc, #84]	@ (80159a4 <xTaskPriorityInherit+0xcc>)
 8015950:	6013      	str	r3, [r2, #0]
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015956:	4613      	mov	r3, r2
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	4413      	add	r3, r2
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	4a10      	ldr	r2, [pc, #64]	@ (80159a0 <xTaskPriorityInherit+0xc8>)
 8015960:	441a      	add	r2, r3
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	3304      	adds	r3, #4
 8015966:	4619      	mov	r1, r3
 8015968:	4610      	mov	r0, r2
 801596a:	f7fe fa18 	bl	8013d9e <vListInsertEnd>
 801596e:	e004      	b.n	801597a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015970:	4b0a      	ldr	r3, [pc, #40]	@ (801599c <xTaskPriorityInherit+0xc4>)
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801597a:	2301      	movs	r3, #1
 801597c:	60fb      	str	r3, [r7, #12]
 801597e:	e008      	b.n	8015992 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015984:	4b05      	ldr	r3, [pc, #20]	@ (801599c <xTaskPriorityInherit+0xc4>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801598a:	429a      	cmp	r2, r3
 801598c:	d201      	bcs.n	8015992 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801598e:	2301      	movs	r3, #1
 8015990:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015992:	68fb      	ldr	r3, [r7, #12]
	}
 8015994:	4618      	mov	r0, r3
 8015996:	3710      	adds	r7, #16
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	2000525c 	.word	0x2000525c
 80159a0:	20005260 	.word	0x20005260
 80159a4:	20005738 	.word	0x20005738

080159a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b086      	sub	sp, #24
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80159b4:	2300      	movs	r3, #0
 80159b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d058      	beq.n	8015a70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80159be:	4b2f      	ldr	r3, [pc, #188]	@ (8015a7c <xTaskPriorityDisinherit+0xd4>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	693a      	ldr	r2, [r7, #16]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d00b      	beq.n	80159e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80159c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159cc:	f383 8811 	msr	BASEPRI, r3
 80159d0:	f3bf 8f6f 	isb	sy
 80159d4:	f3bf 8f4f 	dsb	sy
 80159d8:	60fb      	str	r3, [r7, #12]
}
 80159da:	bf00      	nop
 80159dc:	bf00      	nop
 80159de:	e7fd      	b.n	80159dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10b      	bne.n	8015a00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	60bb      	str	r3, [r7, #8]
}
 80159fa:	bf00      	nop
 80159fc:	bf00      	nop
 80159fe:	e7fd      	b.n	80159fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015a00:	693b      	ldr	r3, [r7, #16]
 8015a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a04:	1e5a      	subs	r2, r3, #1
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d02c      	beq.n	8015a70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d128      	bne.n	8015a70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	3304      	adds	r3, #4
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7fe fa18 	bl	8013e58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a2c:	693b      	ldr	r3, [r7, #16]
 8015a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a40:	4b0f      	ldr	r3, [pc, #60]	@ (8015a80 <xTaskPriorityDisinherit+0xd8>)
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d903      	bls.n	8015a50 <xTaskPriorityDisinherit+0xa8>
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8015a80 <xTaskPriorityDisinherit+0xd8>)
 8015a4e:	6013      	str	r3, [r2, #0]
 8015a50:	693b      	ldr	r3, [r7, #16]
 8015a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a54:	4613      	mov	r3, r2
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	4413      	add	r3, r2
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	4a09      	ldr	r2, [pc, #36]	@ (8015a84 <xTaskPriorityDisinherit+0xdc>)
 8015a5e:	441a      	add	r2, r3
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	3304      	adds	r3, #4
 8015a64:	4619      	mov	r1, r3
 8015a66:	4610      	mov	r0, r2
 8015a68:	f7fe f999 	bl	8013d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a70:	697b      	ldr	r3, [r7, #20]
	}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3718      	adds	r7, #24
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	2000525c 	.word	0x2000525c
 8015a80:	20005738 	.word	0x20005738
 8015a84:	20005260 	.word	0x20005260

08015a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b088      	sub	sp, #32
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015a96:	2301      	movs	r3, #1
 8015a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d06c      	beq.n	8015b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d10b      	bne.n	8015ac0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aac:	f383 8811 	msr	BASEPRI, r3
 8015ab0:	f3bf 8f6f 	isb	sy
 8015ab4:	f3bf 8f4f 	dsb	sy
 8015ab8:	60fb      	str	r3, [r7, #12]
}
 8015aba:	bf00      	nop
 8015abc:	bf00      	nop
 8015abe:	e7fd      	b.n	8015abc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015ac0:	69bb      	ldr	r3, [r7, #24]
 8015ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ac4:	683a      	ldr	r2, [r7, #0]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d902      	bls.n	8015ad0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	61fb      	str	r3, [r7, #28]
 8015ace:	e002      	b.n	8015ad6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ad4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ada:	69fa      	ldr	r2, [r7, #28]
 8015adc:	429a      	cmp	r2, r3
 8015ade:	d04c      	beq.n	8015b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ae4:	697a      	ldr	r2, [r7, #20]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d147      	bne.n	8015b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015aea:	4b26      	ldr	r3, [pc, #152]	@ (8015b84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	69ba      	ldr	r2, [r7, #24]
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d10b      	bne.n	8015b0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8015af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015af8:	f383 8811 	msr	BASEPRI, r3
 8015afc:	f3bf 8f6f 	isb	sy
 8015b00:	f3bf 8f4f 	dsb	sy
 8015b04:	60bb      	str	r3, [r7, #8]
}
 8015b06:	bf00      	nop
 8015b08:	bf00      	nop
 8015b0a:	e7fd      	b.n	8015b08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015b0c:	69bb      	ldr	r3, [r7, #24]
 8015b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	69fa      	ldr	r2, [r7, #28]
 8015b16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015b18:	69bb      	ldr	r3, [r7, #24]
 8015b1a:	699b      	ldr	r3, [r3, #24]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	db04      	blt.n	8015b2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	6959      	ldr	r1, [r3, #20]
 8015b2e:	693a      	ldr	r2, [r7, #16]
 8015b30:	4613      	mov	r3, r2
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	4413      	add	r3, r2
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	4a13      	ldr	r2, [pc, #76]	@ (8015b88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015b3a:	4413      	add	r3, r2
 8015b3c:	4299      	cmp	r1, r3
 8015b3e:	d11c      	bne.n	8015b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b40:	69bb      	ldr	r3, [r7, #24]
 8015b42:	3304      	adds	r3, #4
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7fe f987 	bl	8013e58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015b4a:	69bb      	ldr	r3, [r7, #24]
 8015b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8015b8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d903      	bls.n	8015b5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015b56:	69bb      	ldr	r3, [r7, #24]
 8015b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8015b8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015b5c:	6013      	str	r3, [r2, #0]
 8015b5e:	69bb      	ldr	r3, [r7, #24]
 8015b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b62:	4613      	mov	r3, r2
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	4413      	add	r3, r2
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	4a07      	ldr	r2, [pc, #28]	@ (8015b88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015b6c:	441a      	add	r2, r3
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	3304      	adds	r3, #4
 8015b72:	4619      	mov	r1, r3
 8015b74:	4610      	mov	r0, r2
 8015b76:	f7fe f912 	bl	8013d9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b7a:	bf00      	nop
 8015b7c:	3720      	adds	r7, #32
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	2000525c 	.word	0x2000525c
 8015b88:	20005260 	.word	0x20005260
 8015b8c:	20005738 	.word	0x20005738

08015b90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015b90:	b480      	push	{r7}
 8015b92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015b94:	4b07      	ldr	r3, [pc, #28]	@ (8015bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d004      	beq.n	8015ba6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015b9c:	4b05      	ldr	r3, [pc, #20]	@ (8015bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ba2:	3201      	adds	r2, #1
 8015ba4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015ba6:	4b03      	ldr	r3, [pc, #12]	@ (8015bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
	}
 8015baa:	4618      	mov	r0, r3
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr
 8015bb4:	2000525c 	.word	0x2000525c

08015bb8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8015bc2:	f000 fe19 	bl	80167f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015bc6:	4b20      	ldr	r3, [pc, #128]	@ (8015c48 <ulTaskNotifyTake+0x90>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d113      	bne.n	8015bfa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8015c48 <ulTaskNotifyTake+0x90>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d00b      	beq.n	8015bfa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015be2:	2101      	movs	r1, #1
 8015be4:	6838      	ldr	r0, [r7, #0]
 8015be6:	f000 f8c9 	bl	8015d7c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015bea:	4b18      	ldr	r3, [pc, #96]	@ (8015c4c <ulTaskNotifyTake+0x94>)
 8015bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015bf0:	601a      	str	r2, [r3, #0]
 8015bf2:	f3bf 8f4f 	dsb	sy
 8015bf6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015bfa:	f000 fe2f 	bl	801685c <vPortExitCritical>

		taskENTER_CRITICAL();
 8015bfe:	f000 fdfb 	bl	80167f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015c02:	4b11      	ldr	r3, [pc, #68]	@ (8015c48 <ulTaskNotifyTake+0x90>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015c0a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d00e      	beq.n	8015c30 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d005      	beq.n	8015c24 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015c18:	4b0b      	ldr	r3, [pc, #44]	@ (8015c48 <ulTaskNotifyTake+0x90>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015c22:	e005      	b.n	8015c30 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015c24:	4b08      	ldr	r3, [pc, #32]	@ (8015c48 <ulTaskNotifyTake+0x90>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	68fa      	ldr	r2, [r7, #12]
 8015c2a:	3a01      	subs	r2, #1
 8015c2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015c30:	4b05      	ldr	r3, [pc, #20]	@ (8015c48 <ulTaskNotifyTake+0x90>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2200      	movs	r2, #0
 8015c36:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015c3a:	f000 fe0f 	bl	801685c <vPortExitCritical>

		return ulReturn;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
	}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3710      	adds	r7, #16
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	2000525c 	.word	0x2000525c
 8015c4c:	e000ed04 	.word	0xe000ed04

08015c50 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b08a      	sub	sp, #40	@ 0x28
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d10b      	bne.n	8015c78 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8015c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c64:	f383 8811 	msr	BASEPRI, r3
 8015c68:	f3bf 8f6f 	isb	sy
 8015c6c:	f3bf 8f4f 	dsb	sy
 8015c70:	61bb      	str	r3, [r7, #24]
}
 8015c72:	bf00      	nop
 8015c74:	bf00      	nop
 8015c76:	e7fd      	b.n	8015c74 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c78:	f000 fe9e 	bl	80169b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8015c80:	f3ef 8211 	mrs	r2, BASEPRI
 8015c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c88:	f383 8811 	msr	BASEPRI, r3
 8015c8c:	f3bf 8f6f 	isb	sy
 8015c90:	f3bf 8f4f 	dsb	sy
 8015c94:	617a      	str	r2, [r7, #20]
 8015c96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015c98:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c9a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c9e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015ca2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca6:	2202      	movs	r2, #2
 8015ca8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8015cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015cb2:	1c5a      	adds	r2, r3, #1
 8015cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015cba:	7ffb      	ldrb	r3, [r7, #31]
 8015cbc:	2b01      	cmp	r3, #1
 8015cbe:	d147      	bne.n	8015d50 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00b      	beq.n	8015ce0 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8015cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ccc:	f383 8811 	msr	BASEPRI, r3
 8015cd0:	f3bf 8f6f 	isb	sy
 8015cd4:	f3bf 8f4f 	dsb	sy
 8015cd8:	60fb      	str	r3, [r7, #12]
}
 8015cda:	bf00      	nop
 8015cdc:	bf00      	nop
 8015cde:	e7fd      	b.n	8015cdc <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ce0:	4b20      	ldr	r3, [pc, #128]	@ (8015d64 <vTaskNotifyGiveFromISR+0x114>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d11d      	bne.n	8015d24 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cea:	3304      	adds	r3, #4
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7fe f8b3 	bl	8013e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8015d68 <vTaskNotifyGiveFromISR+0x118>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d903      	bls.n	8015d06 <vTaskNotifyGiveFromISR+0xb6>
 8015cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d02:	4a19      	ldr	r2, [pc, #100]	@ (8015d68 <vTaskNotifyGiveFromISR+0x118>)
 8015d04:	6013      	str	r3, [r2, #0]
 8015d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d0a:	4613      	mov	r3, r2
 8015d0c:	009b      	lsls	r3, r3, #2
 8015d0e:	4413      	add	r3, r2
 8015d10:	009b      	lsls	r3, r3, #2
 8015d12:	4a16      	ldr	r2, [pc, #88]	@ (8015d6c <vTaskNotifyGiveFromISR+0x11c>)
 8015d14:	441a      	add	r2, r3
 8015d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d18:	3304      	adds	r3, #4
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	4610      	mov	r0, r2
 8015d1e:	f7fe f83e 	bl	8013d9e <vListInsertEnd>
 8015d22:	e005      	b.n	8015d30 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d26:	3318      	adds	r3, #24
 8015d28:	4619      	mov	r1, r3
 8015d2a:	4811      	ldr	r0, [pc, #68]	@ (8015d70 <vTaskNotifyGiveFromISR+0x120>)
 8015d2c:	f7fe f837 	bl	8013d9e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d34:	4b0f      	ldr	r3, [pc, #60]	@ (8015d74 <vTaskNotifyGiveFromISR+0x124>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d908      	bls.n	8015d50 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d002      	beq.n	8015d4a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	2201      	movs	r2, #1
 8015d48:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d78 <vTaskNotifyGiveFromISR+0x128>)
 8015d4c:	2201      	movs	r2, #1
 8015d4e:	601a      	str	r2, [r3, #0]
 8015d50:	6a3b      	ldr	r3, [r7, #32]
 8015d52:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	f383 8811 	msr	BASEPRI, r3
}
 8015d5a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8015d5c:	bf00      	nop
 8015d5e:	3728      	adds	r7, #40	@ 0x28
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	20005758 	.word	0x20005758
 8015d68:	20005738 	.word	0x20005738
 8015d6c:	20005260 	.word	0x20005260
 8015d70:	200056f0 	.word	0x200056f0
 8015d74:	2000525c 	.word	0x2000525c
 8015d78:	20005744 	.word	0x20005744

08015d7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015d86:	4b21      	ldr	r3, [pc, #132]	@ (8015e0c <prvAddCurrentTaskToDelayedList+0x90>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015d8c:	4b20      	ldr	r3, [pc, #128]	@ (8015e10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	3304      	adds	r3, #4
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7fe f860 	bl	8013e58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d9e:	d10a      	bne.n	8015db6 <prvAddCurrentTaskToDelayedList+0x3a>
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d007      	beq.n	8015db6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015da6:	4b1a      	ldr	r3, [pc, #104]	@ (8015e10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	3304      	adds	r3, #4
 8015dac:	4619      	mov	r1, r3
 8015dae:	4819      	ldr	r0, [pc, #100]	@ (8015e14 <prvAddCurrentTaskToDelayedList+0x98>)
 8015db0:	f7fd fff5 	bl	8013d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015db4:	e026      	b.n	8015e04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4413      	add	r3, r2
 8015dbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015dbe:	4b14      	ldr	r3, [pc, #80]	@ (8015e10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	68ba      	ldr	r2, [r7, #8]
 8015dc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015dc6:	68ba      	ldr	r2, [r7, #8]
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d209      	bcs.n	8015de2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015dce:	4b12      	ldr	r3, [pc, #72]	@ (8015e18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8015e10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	3304      	adds	r3, #4
 8015dd8:	4619      	mov	r1, r3
 8015dda:	4610      	mov	r0, r2
 8015ddc:	f7fe f803 	bl	8013de6 <vListInsert>
}
 8015de0:	e010      	b.n	8015e04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015de2:	4b0e      	ldr	r3, [pc, #56]	@ (8015e1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	4b0a      	ldr	r3, [pc, #40]	@ (8015e10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	3304      	adds	r3, #4
 8015dec:	4619      	mov	r1, r3
 8015dee:	4610      	mov	r0, r2
 8015df0:	f7fd fff9 	bl	8013de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015df4:	4b0a      	ldr	r3, [pc, #40]	@ (8015e20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	68ba      	ldr	r2, [r7, #8]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d202      	bcs.n	8015e04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015dfe:	4a08      	ldr	r2, [pc, #32]	@ (8015e20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	6013      	str	r3, [r2, #0]
}
 8015e04:	bf00      	nop
 8015e06:	3710      	adds	r7, #16
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	20005734 	.word	0x20005734
 8015e10:	2000525c 	.word	0x2000525c
 8015e14:	2000571c 	.word	0x2000571c
 8015e18:	200056ec 	.word	0x200056ec
 8015e1c:	200056e8 	.word	0x200056e8
 8015e20:	20005750 	.word	0x20005750

08015e24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08a      	sub	sp, #40	@ 0x28
 8015e28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015e2e:	f000 fb71 	bl	8016514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015e32:	4b1d      	ldr	r3, [pc, #116]	@ (8015ea8 <xTimerCreateTimerTask+0x84>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d021      	beq.n	8015e7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015e42:	1d3a      	adds	r2, r7, #4
 8015e44:	f107 0108 	add.w	r1, r7, #8
 8015e48:	f107 030c 	add.w	r3, r7, #12
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7fd ff5f 	bl	8013d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	68fa      	ldr	r2, [r7, #12]
 8015e58:	9202      	str	r2, [sp, #8]
 8015e5a:	9301      	str	r3, [sp, #4]
 8015e5c:	2302      	movs	r3, #2
 8015e5e:	9300      	str	r3, [sp, #0]
 8015e60:	2300      	movs	r3, #0
 8015e62:	460a      	mov	r2, r1
 8015e64:	4911      	ldr	r1, [pc, #68]	@ (8015eac <xTimerCreateTimerTask+0x88>)
 8015e66:	4812      	ldr	r0, [pc, #72]	@ (8015eb0 <xTimerCreateTimerTask+0x8c>)
 8015e68:	f7fe feb0 	bl	8014bcc <xTaskCreateStatic>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	4a11      	ldr	r2, [pc, #68]	@ (8015eb4 <xTimerCreateTimerTask+0x90>)
 8015e70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015e72:	4b10      	ldr	r3, [pc, #64]	@ (8015eb4 <xTimerCreateTimerTask+0x90>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d001      	beq.n	8015e7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015e7e:	697b      	ldr	r3, [r7, #20]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d10b      	bne.n	8015e9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8015e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e88:	f383 8811 	msr	BASEPRI, r3
 8015e8c:	f3bf 8f6f 	isb	sy
 8015e90:	f3bf 8f4f 	dsb	sy
 8015e94:	613b      	str	r3, [r7, #16]
}
 8015e96:	bf00      	nop
 8015e98:	bf00      	nop
 8015e9a:	e7fd      	b.n	8015e98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015e9c:	697b      	ldr	r3, [r7, #20]
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3718      	adds	r7, #24
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	2000578c 	.word	0x2000578c
 8015eac:	08020200 	.word	0x08020200
 8015eb0:	080160ad 	.word	0x080160ad
 8015eb4:	20005790 	.word	0x20005790

08015eb8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b088      	sub	sp, #32
 8015ebc:	af02      	add	r7, sp, #8
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
 8015ec4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015ec6:	202c      	movs	r0, #44	@ 0x2c
 8015ec8:	f000 fdb8 	bl	8016a3c <pvPortMalloc>
 8015ecc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00d      	beq.n	8015ef0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	9301      	str	r3, [sp, #4]
 8015ee0:	6a3b      	ldr	r3, [r7, #32]
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	687a      	ldr	r2, [r7, #4]
 8015ee8:	68b9      	ldr	r1, [r7, #8]
 8015eea:	68f8      	ldr	r0, [r7, #12]
 8015eec:	f000 f805 	bl	8015efa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015ef0:	697b      	ldr	r3, [r7, #20]
	}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3718      	adds	r7, #24
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}

08015efa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8015efa:	b580      	push	{r7, lr}
 8015efc:	b086      	sub	sp, #24
 8015efe:	af00      	add	r7, sp, #0
 8015f00:	60f8      	str	r0, [r7, #12]
 8015f02:	60b9      	str	r1, [r7, #8]
 8015f04:	607a      	str	r2, [r7, #4]
 8015f06:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d10b      	bne.n	8015f26 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8015f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f12:	f383 8811 	msr	BASEPRI, r3
 8015f16:	f3bf 8f6f 	isb	sy
 8015f1a:	f3bf 8f4f 	dsb	sy
 8015f1e:	617b      	str	r3, [r7, #20]
}
 8015f20:	bf00      	nop
 8015f22:	bf00      	nop
 8015f24:	e7fd      	b.n	8015f22 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8015f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d01e      	beq.n	8015f6a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015f2c:	f000 faf2 	bl	8016514 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f38:	68ba      	ldr	r2, [r7, #8]
 8015f3a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f3e:	683a      	ldr	r2, [r7, #0]
 8015f40:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f44:	6a3a      	ldr	r2, [r7, #32]
 8015f46:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4a:	3304      	adds	r3, #4
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7fd ff19 	bl	8013d84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d008      	beq.n	8015f6a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f5e:	f043 0304 	orr.w	r3, r3, #4
 8015f62:	b2da      	uxtb	r2, r3
 8015f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015f6a:	bf00      	nop
 8015f6c:	3718      	adds	r7, #24
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
	...

08015f74 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b08a      	sub	sp, #40	@ 0x28
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
 8015f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015f82:	2300      	movs	r3, #0
 8015f84:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10b      	bne.n	8015fa4 <xTimerGenericCommand+0x30>
	__asm volatile
 8015f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f90:	f383 8811 	msr	BASEPRI, r3
 8015f94:	f3bf 8f6f 	isb	sy
 8015f98:	f3bf 8f4f 	dsb	sy
 8015f9c:	623b      	str	r3, [r7, #32]
}
 8015f9e:	bf00      	nop
 8015fa0:	bf00      	nop
 8015fa2:	e7fd      	b.n	8015fa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015fa4:	4b19      	ldr	r3, [pc, #100]	@ (801600c <xTimerGenericCommand+0x98>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d02a      	beq.n	8016002 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	2b05      	cmp	r3, #5
 8015fbc:	dc18      	bgt.n	8015ff0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015fbe:	f7ff fc6d 	bl	801589c <xTaskGetSchedulerState>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b02      	cmp	r3, #2
 8015fc6:	d109      	bne.n	8015fdc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015fc8:	4b10      	ldr	r3, [pc, #64]	@ (801600c <xTimerGenericCommand+0x98>)
 8015fca:	6818      	ldr	r0, [r3, #0]
 8015fcc:	f107 0110 	add.w	r1, r7, #16
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fd4:	f7fe f8e2 	bl	801419c <xQueueGenericSend>
 8015fd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8015fda:	e012      	b.n	8016002 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015fdc:	4b0b      	ldr	r3, [pc, #44]	@ (801600c <xTimerGenericCommand+0x98>)
 8015fde:	6818      	ldr	r0, [r3, #0]
 8015fe0:	f107 0110 	add.w	r1, r7, #16
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	f7fe f8d8 	bl	801419c <xQueueGenericSend>
 8015fec:	6278      	str	r0, [r7, #36]	@ 0x24
 8015fee:	e008      	b.n	8016002 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015ff0:	4b06      	ldr	r3, [pc, #24]	@ (801600c <xTimerGenericCommand+0x98>)
 8015ff2:	6818      	ldr	r0, [r3, #0]
 8015ff4:	f107 0110 	add.w	r1, r7, #16
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	683a      	ldr	r2, [r7, #0]
 8015ffc:	f7fe f9d0 	bl	80143a0 <xQueueGenericSendFromISR>
 8016000:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016004:	4618      	mov	r0, r3
 8016006:	3728      	adds	r7, #40	@ 0x28
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	2000578c 	.word	0x2000578c

08016010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b088      	sub	sp, #32
 8016014:	af02      	add	r7, sp, #8
 8016016:	6078      	str	r0, [r7, #4]
 8016018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801601a:	4b23      	ldr	r3, [pc, #140]	@ (80160a8 <prvProcessExpiredTimer+0x98>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	68db      	ldr	r3, [r3, #12]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	3304      	adds	r3, #4
 8016028:	4618      	mov	r0, r3
 801602a:	f7fd ff15 	bl	8013e58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016034:	f003 0304 	and.w	r3, r3, #4
 8016038:	2b00      	cmp	r3, #0
 801603a:	d023      	beq.n	8016084 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	699a      	ldr	r2, [r3, #24]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	18d1      	adds	r1, r2, r3
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	683a      	ldr	r2, [r7, #0]
 8016048:	6978      	ldr	r0, [r7, #20]
 801604a:	f000 f8d5 	bl	80161f8 <prvInsertTimerInActiveList>
 801604e:	4603      	mov	r3, r0
 8016050:	2b00      	cmp	r3, #0
 8016052:	d020      	beq.n	8016096 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016054:	2300      	movs	r3, #0
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	2300      	movs	r3, #0
 801605a:	687a      	ldr	r2, [r7, #4]
 801605c:	2100      	movs	r1, #0
 801605e:	6978      	ldr	r0, [r7, #20]
 8016060:	f7ff ff88 	bl	8015f74 <xTimerGenericCommand>
 8016064:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d114      	bne.n	8016096 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016070:	f383 8811 	msr	BASEPRI, r3
 8016074:	f3bf 8f6f 	isb	sy
 8016078:	f3bf 8f4f 	dsb	sy
 801607c:	60fb      	str	r3, [r7, #12]
}
 801607e:	bf00      	nop
 8016080:	bf00      	nop
 8016082:	e7fd      	b.n	8016080 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801608a:	f023 0301 	bic.w	r3, r3, #1
 801608e:	b2da      	uxtb	r2, r3
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	6a1b      	ldr	r3, [r3, #32]
 801609a:	6978      	ldr	r0, [r7, #20]
 801609c:	4798      	blx	r3
}
 801609e:	bf00      	nop
 80160a0:	3718      	adds	r7, #24
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	20005784 	.word	0x20005784

080160ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b084      	sub	sp, #16
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80160b4:	f107 0308 	add.w	r3, r7, #8
 80160b8:	4618      	mov	r0, r3
 80160ba:	f000 f859 	bl	8016170 <prvGetNextExpireTime>
 80160be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	4619      	mov	r1, r3
 80160c4:	68f8      	ldr	r0, [r7, #12]
 80160c6:	f000 f805 	bl	80160d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80160ca:	f000 f8d7 	bl	801627c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80160ce:	bf00      	nop
 80160d0:	e7f0      	b.n	80160b4 <prvTimerTask+0x8>
	...

080160d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80160de:	f7fe ffd9 	bl	8015094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80160e2:	f107 0308 	add.w	r3, r7, #8
 80160e6:	4618      	mov	r0, r3
 80160e8:	f000 f866 	bl	80161b8 <prvSampleTimeNow>
 80160ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d130      	bne.n	8016156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d10a      	bne.n	8016110 <prvProcessTimerOrBlockTask+0x3c>
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	429a      	cmp	r2, r3
 8016100:	d806      	bhi.n	8016110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016102:	f7fe ffd5 	bl	80150b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016106:	68f9      	ldr	r1, [r7, #12]
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f7ff ff81 	bl	8016010 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801610e:	e024      	b.n	801615a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d008      	beq.n	8016128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016116:	4b13      	ldr	r3, [pc, #76]	@ (8016164 <prvProcessTimerOrBlockTask+0x90>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d101      	bne.n	8016124 <prvProcessTimerOrBlockTask+0x50>
 8016120:	2301      	movs	r3, #1
 8016122:	e000      	b.n	8016126 <prvProcessTimerOrBlockTask+0x52>
 8016124:	2300      	movs	r3, #0
 8016126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016128:	4b0f      	ldr	r3, [pc, #60]	@ (8016168 <prvProcessTimerOrBlockTask+0x94>)
 801612a:	6818      	ldr	r0, [r3, #0]
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	683a      	ldr	r2, [r7, #0]
 8016134:	4619      	mov	r1, r3
 8016136:	f7fe fd15 	bl	8014b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801613a:	f7fe ffb9 	bl	80150b0 <xTaskResumeAll>
 801613e:	4603      	mov	r3, r0
 8016140:	2b00      	cmp	r3, #0
 8016142:	d10a      	bne.n	801615a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016144:	4b09      	ldr	r3, [pc, #36]	@ (801616c <prvProcessTimerOrBlockTask+0x98>)
 8016146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801614a:	601a      	str	r2, [r3, #0]
 801614c:	f3bf 8f4f 	dsb	sy
 8016150:	f3bf 8f6f 	isb	sy
}
 8016154:	e001      	b.n	801615a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016156:	f7fe ffab 	bl	80150b0 <xTaskResumeAll>
}
 801615a:	bf00      	nop
 801615c:	3710      	adds	r7, #16
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop
 8016164:	20005788 	.word	0x20005788
 8016168:	2000578c 	.word	0x2000578c
 801616c:	e000ed04 	.word	0xe000ed04

08016170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016170:	b480      	push	{r7}
 8016172:	b085      	sub	sp, #20
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016178:	4b0e      	ldr	r3, [pc, #56]	@ (80161b4 <prvGetNextExpireTime+0x44>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d101      	bne.n	8016186 <prvGetNextExpireTime+0x16>
 8016182:	2201      	movs	r2, #1
 8016184:	e000      	b.n	8016188 <prvGetNextExpireTime+0x18>
 8016186:	2200      	movs	r2, #0
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d105      	bne.n	80161a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016194:	4b07      	ldr	r3, [pc, #28]	@ (80161b4 <prvGetNextExpireTime+0x44>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	68db      	ldr	r3, [r3, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	60fb      	str	r3, [r7, #12]
 801619e:	e001      	b.n	80161a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80161a0:	2300      	movs	r3, #0
 80161a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80161a4:	68fb      	ldr	r3, [r7, #12]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3714      	adds	r7, #20
 80161aa:	46bd      	mov	sp, r7
 80161ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b0:	4770      	bx	lr
 80161b2:	bf00      	nop
 80161b4:	20005784 	.word	0x20005784

080161b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80161c0:	f7ff f814 	bl	80151ec <xTaskGetTickCount>
 80161c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80161c6:	4b0b      	ldr	r3, [pc, #44]	@ (80161f4 <prvSampleTimeNow+0x3c>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d205      	bcs.n	80161dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80161d0:	f000 f93a 	bl	8016448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2201      	movs	r2, #1
 80161d8:	601a      	str	r2, [r3, #0]
 80161da:	e002      	b.n	80161e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2200      	movs	r2, #0
 80161e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80161e2:	4a04      	ldr	r2, [pc, #16]	@ (80161f4 <prvSampleTimeNow+0x3c>)
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80161e8:	68fb      	ldr	r3, [r7, #12]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	20005794 	.word	0x20005794

080161f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b086      	sub	sp, #24
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	60b9      	str	r1, [r7, #8]
 8016202:	607a      	str	r2, [r7, #4]
 8016204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016206:	2300      	movs	r3, #0
 8016208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	68ba      	ldr	r2, [r7, #8]
 801620e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016216:	68ba      	ldr	r2, [r7, #8]
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	429a      	cmp	r2, r3
 801621c:	d812      	bhi.n	8016244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	1ad2      	subs	r2, r2, r3
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	699b      	ldr	r3, [r3, #24]
 8016228:	429a      	cmp	r2, r3
 801622a:	d302      	bcc.n	8016232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801622c:	2301      	movs	r3, #1
 801622e:	617b      	str	r3, [r7, #20]
 8016230:	e01b      	b.n	801626a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016232:	4b10      	ldr	r3, [pc, #64]	@ (8016274 <prvInsertTimerInActiveList+0x7c>)
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	3304      	adds	r3, #4
 801623a:	4619      	mov	r1, r3
 801623c:	4610      	mov	r0, r2
 801623e:	f7fd fdd2 	bl	8013de6 <vListInsert>
 8016242:	e012      	b.n	801626a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016244:	687a      	ldr	r2, [r7, #4]
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	429a      	cmp	r2, r3
 801624a:	d206      	bcs.n	801625a <prvInsertTimerInActiveList+0x62>
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	429a      	cmp	r2, r3
 8016252:	d302      	bcc.n	801625a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016254:	2301      	movs	r3, #1
 8016256:	617b      	str	r3, [r7, #20]
 8016258:	e007      	b.n	801626a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801625a:	4b07      	ldr	r3, [pc, #28]	@ (8016278 <prvInsertTimerInActiveList+0x80>)
 801625c:	681a      	ldr	r2, [r3, #0]
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	3304      	adds	r3, #4
 8016262:	4619      	mov	r1, r3
 8016264:	4610      	mov	r0, r2
 8016266:	f7fd fdbe 	bl	8013de6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801626a:	697b      	ldr	r3, [r7, #20]
}
 801626c:	4618      	mov	r0, r3
 801626e:	3718      	adds	r7, #24
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}
 8016274:	20005788 	.word	0x20005788
 8016278:	20005784 	.word	0x20005784

0801627c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b08e      	sub	sp, #56	@ 0x38
 8016280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016282:	e0ce      	b.n	8016422 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	da19      	bge.n	80162be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801628a:	1d3b      	adds	r3, r7, #4
 801628c:	3304      	adds	r3, #4
 801628e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10b      	bne.n	80162ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8016296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801629a:	f383 8811 	msr	BASEPRI, r3
 801629e:	f3bf 8f6f 	isb	sy
 80162a2:	f3bf 8f4f 	dsb	sy
 80162a6:	61fb      	str	r3, [r7, #28]
}
 80162a8:	bf00      	nop
 80162aa:	bf00      	nop
 80162ac:	e7fd      	b.n	80162aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80162ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162b4:	6850      	ldr	r0, [r2, #4]
 80162b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162b8:	6892      	ldr	r2, [r2, #8]
 80162ba:	4611      	mov	r1, r2
 80162bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f2c0 80ae 	blt.w	8016422 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80162ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162cc:	695b      	ldr	r3, [r3, #20]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d004      	beq.n	80162dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d4:	3304      	adds	r3, #4
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7fd fdbe 	bl	8013e58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80162dc:	463b      	mov	r3, r7
 80162de:	4618      	mov	r0, r3
 80162e0:	f7ff ff6a 	bl	80161b8 <prvSampleTimeNow>
 80162e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	2b09      	cmp	r3, #9
 80162ea:	f200 8097 	bhi.w	801641c <prvProcessReceivedCommands+0x1a0>
 80162ee:	a201      	add	r2, pc, #4	@ (adr r2, 80162f4 <prvProcessReceivedCommands+0x78>)
 80162f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162f4:	0801631d 	.word	0x0801631d
 80162f8:	0801631d 	.word	0x0801631d
 80162fc:	0801631d 	.word	0x0801631d
 8016300:	08016393 	.word	0x08016393
 8016304:	080163a7 	.word	0x080163a7
 8016308:	080163f3 	.word	0x080163f3
 801630c:	0801631d 	.word	0x0801631d
 8016310:	0801631d 	.word	0x0801631d
 8016314:	08016393 	.word	0x08016393
 8016318:	080163a7 	.word	0x080163a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801631e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016322:	f043 0301 	orr.w	r3, r3, #1
 8016326:	b2da      	uxtb	r2, r3
 8016328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801632a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801632e:	68ba      	ldr	r2, [r7, #8]
 8016330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016332:	699b      	ldr	r3, [r3, #24]
 8016334:	18d1      	adds	r1, r2, r3
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801633a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801633c:	f7ff ff5c 	bl	80161f8 <prvInsertTimerInActiveList>
 8016340:	4603      	mov	r3, r0
 8016342:	2b00      	cmp	r3, #0
 8016344:	d06c      	beq.n	8016420 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016348:	6a1b      	ldr	r3, [r3, #32]
 801634a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801634c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016354:	f003 0304 	and.w	r3, r3, #4
 8016358:	2b00      	cmp	r3, #0
 801635a:	d061      	beq.n	8016420 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801635c:	68ba      	ldr	r2, [r7, #8]
 801635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016360:	699b      	ldr	r3, [r3, #24]
 8016362:	441a      	add	r2, r3
 8016364:	2300      	movs	r3, #0
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	2300      	movs	r3, #0
 801636a:	2100      	movs	r1, #0
 801636c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801636e:	f7ff fe01 	bl	8015f74 <xTimerGenericCommand>
 8016372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016374:	6a3b      	ldr	r3, [r7, #32]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d152      	bne.n	8016420 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801637e:	f383 8811 	msr	BASEPRI, r3
 8016382:	f3bf 8f6f 	isb	sy
 8016386:	f3bf 8f4f 	dsb	sy
 801638a:	61bb      	str	r3, [r7, #24]
}
 801638c:	bf00      	nop
 801638e:	bf00      	nop
 8016390:	e7fd      	b.n	801638e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016398:	f023 0301 	bic.w	r3, r3, #1
 801639c:	b2da      	uxtb	r2, r3
 801639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80163a4:	e03d      	b.n	8016422 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80163a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163ac:	f043 0301 	orr.w	r3, r3, #1
 80163b0:	b2da      	uxtb	r2, r3
 80163b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80163b8:	68ba      	ldr	r2, [r7, #8]
 80163ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80163be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163c0:	699b      	ldr	r3, [r3, #24]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d10b      	bne.n	80163de <prvProcessReceivedCommands+0x162>
	__asm volatile
 80163c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163ca:	f383 8811 	msr	BASEPRI, r3
 80163ce:	f3bf 8f6f 	isb	sy
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	617b      	str	r3, [r7, #20]
}
 80163d8:	bf00      	nop
 80163da:	bf00      	nop
 80163dc:	e7fd      	b.n	80163da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80163de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163e0:	699a      	ldr	r2, [r3, #24]
 80163e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e4:	18d1      	adds	r1, r2, r3
 80163e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80163ec:	f7ff ff04 	bl	80161f8 <prvInsertTimerInActiveList>
					break;
 80163f0:	e017      	b.n	8016422 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80163f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163f8:	f003 0302 	and.w	r3, r3, #2
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d103      	bne.n	8016408 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016402:	f000 fbe9 	bl	8016bd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016406:	e00c      	b.n	8016422 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801640a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801640e:	f023 0301 	bic.w	r3, r3, #1
 8016412:	b2da      	uxtb	r2, r3
 8016414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016416:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801641a:	e002      	b.n	8016422 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801641c:	bf00      	nop
 801641e:	e000      	b.n	8016422 <prvProcessReceivedCommands+0x1a6>
					break;
 8016420:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016422:	4b08      	ldr	r3, [pc, #32]	@ (8016444 <prvProcessReceivedCommands+0x1c8>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	1d39      	adds	r1, r7, #4
 8016428:	2200      	movs	r2, #0
 801642a:	4618      	mov	r0, r3
 801642c:	f7fe f856 	bl	80144dc <xQueueReceive>
 8016430:	4603      	mov	r3, r0
 8016432:	2b00      	cmp	r3, #0
 8016434:	f47f af26 	bne.w	8016284 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8016438:	bf00      	nop
 801643a:	bf00      	nop
 801643c:	3730      	adds	r7, #48	@ 0x30
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	2000578c 	.word	0x2000578c

08016448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b088      	sub	sp, #32
 801644c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801644e:	e049      	b.n	80164e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016450:	4b2e      	ldr	r3, [pc, #184]	@ (801650c <prvSwitchTimerLists+0xc4>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	68db      	ldr	r3, [r3, #12]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801645a:	4b2c      	ldr	r3, [pc, #176]	@ (801650c <prvSwitchTimerLists+0xc4>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	3304      	adds	r3, #4
 8016468:	4618      	mov	r0, r3
 801646a:	f7fd fcf5 	bl	8013e58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	6a1b      	ldr	r3, [r3, #32]
 8016472:	68f8      	ldr	r0, [r7, #12]
 8016474:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801647c:	f003 0304 	and.w	r3, r3, #4
 8016480:	2b00      	cmp	r3, #0
 8016482:	d02f      	beq.n	80164e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	699b      	ldr	r3, [r3, #24]
 8016488:	693a      	ldr	r2, [r7, #16]
 801648a:	4413      	add	r3, r2
 801648c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801648e:	68ba      	ldr	r2, [r7, #8]
 8016490:	693b      	ldr	r3, [r7, #16]
 8016492:	429a      	cmp	r2, r3
 8016494:	d90e      	bls.n	80164b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	68ba      	ldr	r2, [r7, #8]
 801649a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	68fa      	ldr	r2, [r7, #12]
 80164a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80164a2:	4b1a      	ldr	r3, [pc, #104]	@ (801650c <prvSwitchTimerLists+0xc4>)
 80164a4:	681a      	ldr	r2, [r3, #0]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	3304      	adds	r3, #4
 80164aa:	4619      	mov	r1, r3
 80164ac:	4610      	mov	r0, r2
 80164ae:	f7fd fc9a 	bl	8013de6 <vListInsert>
 80164b2:	e017      	b.n	80164e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80164b4:	2300      	movs	r3, #0
 80164b6:	9300      	str	r3, [sp, #0]
 80164b8:	2300      	movs	r3, #0
 80164ba:	693a      	ldr	r2, [r7, #16]
 80164bc:	2100      	movs	r1, #0
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	f7ff fd58 	bl	8015f74 <xTimerGenericCommand>
 80164c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d10b      	bne.n	80164e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80164cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164d0:	f383 8811 	msr	BASEPRI, r3
 80164d4:	f3bf 8f6f 	isb	sy
 80164d8:	f3bf 8f4f 	dsb	sy
 80164dc:	603b      	str	r3, [r7, #0]
}
 80164de:	bf00      	nop
 80164e0:	bf00      	nop
 80164e2:	e7fd      	b.n	80164e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80164e4:	4b09      	ldr	r3, [pc, #36]	@ (801650c <prvSwitchTimerLists+0xc4>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d1b0      	bne.n	8016450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80164ee:	4b07      	ldr	r3, [pc, #28]	@ (801650c <prvSwitchTimerLists+0xc4>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80164f4:	4b06      	ldr	r3, [pc, #24]	@ (8016510 <prvSwitchTimerLists+0xc8>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	4a04      	ldr	r2, [pc, #16]	@ (801650c <prvSwitchTimerLists+0xc4>)
 80164fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80164fc:	4a04      	ldr	r2, [pc, #16]	@ (8016510 <prvSwitchTimerLists+0xc8>)
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	6013      	str	r3, [r2, #0]
}
 8016502:	bf00      	nop
 8016504:	3718      	adds	r7, #24
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	20005784 	.word	0x20005784
 8016510:	20005788 	.word	0x20005788

08016514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801651a:	f000 f96d 	bl	80167f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801651e:	4b15      	ldr	r3, [pc, #84]	@ (8016574 <prvCheckForValidListAndQueue+0x60>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d120      	bne.n	8016568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016526:	4814      	ldr	r0, [pc, #80]	@ (8016578 <prvCheckForValidListAndQueue+0x64>)
 8016528:	f7fd fc0c 	bl	8013d44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801652c:	4813      	ldr	r0, [pc, #76]	@ (801657c <prvCheckForValidListAndQueue+0x68>)
 801652e:	f7fd fc09 	bl	8013d44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016532:	4b13      	ldr	r3, [pc, #76]	@ (8016580 <prvCheckForValidListAndQueue+0x6c>)
 8016534:	4a10      	ldr	r2, [pc, #64]	@ (8016578 <prvCheckForValidListAndQueue+0x64>)
 8016536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016538:	4b12      	ldr	r3, [pc, #72]	@ (8016584 <prvCheckForValidListAndQueue+0x70>)
 801653a:	4a10      	ldr	r2, [pc, #64]	@ (801657c <prvCheckForValidListAndQueue+0x68>)
 801653c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801653e:	2300      	movs	r3, #0
 8016540:	9300      	str	r3, [sp, #0]
 8016542:	4b11      	ldr	r3, [pc, #68]	@ (8016588 <prvCheckForValidListAndQueue+0x74>)
 8016544:	4a11      	ldr	r2, [pc, #68]	@ (801658c <prvCheckForValidListAndQueue+0x78>)
 8016546:	2110      	movs	r1, #16
 8016548:	200a      	movs	r0, #10
 801654a:	f7fd fd19 	bl	8013f80 <xQueueGenericCreateStatic>
 801654e:	4603      	mov	r3, r0
 8016550:	4a08      	ldr	r2, [pc, #32]	@ (8016574 <prvCheckForValidListAndQueue+0x60>)
 8016552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016554:	4b07      	ldr	r3, [pc, #28]	@ (8016574 <prvCheckForValidListAndQueue+0x60>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d005      	beq.n	8016568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801655c:	4b05      	ldr	r3, [pc, #20]	@ (8016574 <prvCheckForValidListAndQueue+0x60>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	490b      	ldr	r1, [pc, #44]	@ (8016590 <prvCheckForValidListAndQueue+0x7c>)
 8016562:	4618      	mov	r0, r3
 8016564:	f7fe fad4 	bl	8014b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016568:	f000 f978 	bl	801685c <vPortExitCritical>
}
 801656c:	bf00      	nop
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	2000578c 	.word	0x2000578c
 8016578:	2000575c 	.word	0x2000575c
 801657c:	20005770 	.word	0x20005770
 8016580:	20005784 	.word	0x20005784
 8016584:	20005788 	.word	0x20005788
 8016588:	20005838 	.word	0x20005838
 801658c:	20005798 	.word	0x20005798
 8016590:	08020208 	.word	0x08020208

08016594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016594:	b480      	push	{r7}
 8016596:	b085      	sub	sp, #20
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	3b04      	subs	r3, #4
 80165a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80165ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	3b04      	subs	r3, #4
 80165b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	f023 0201 	bic.w	r2, r3, #1
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	3b04      	subs	r3, #4
 80165c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80165c4:	4a0c      	ldr	r2, [pc, #48]	@ (80165f8 <pxPortInitialiseStack+0x64>)
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	3b14      	subs	r3, #20
 80165ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	3b04      	subs	r3, #4
 80165da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	f06f 0202 	mvn.w	r2, #2
 80165e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	3b20      	subs	r3, #32
 80165e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80165ea:	68fb      	ldr	r3, [r7, #12]
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3714      	adds	r7, #20
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr
 80165f8:	080165fd 	.word	0x080165fd

080165fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80165fc:	b480      	push	{r7}
 80165fe:	b085      	sub	sp, #20
 8016600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016602:	2300      	movs	r3, #0
 8016604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016606:	4b13      	ldr	r3, [pc, #76]	@ (8016654 <prvTaskExitError+0x58>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801660e:	d00b      	beq.n	8016628 <prvTaskExitError+0x2c>
	__asm volatile
 8016610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016614:	f383 8811 	msr	BASEPRI, r3
 8016618:	f3bf 8f6f 	isb	sy
 801661c:	f3bf 8f4f 	dsb	sy
 8016620:	60fb      	str	r3, [r7, #12]
}
 8016622:	bf00      	nop
 8016624:	bf00      	nop
 8016626:	e7fd      	b.n	8016624 <prvTaskExitError+0x28>
	__asm volatile
 8016628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801662c:	f383 8811 	msr	BASEPRI, r3
 8016630:	f3bf 8f6f 	isb	sy
 8016634:	f3bf 8f4f 	dsb	sy
 8016638:	60bb      	str	r3, [r7, #8]
}
 801663a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801663c:	bf00      	nop
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d0fc      	beq.n	801663e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016644:	bf00      	nop
 8016646:	bf00      	nop
 8016648:	3714      	adds	r7, #20
 801664a:	46bd      	mov	sp, r7
 801664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016650:	4770      	bx	lr
 8016652:	bf00      	nop
 8016654:	200000ec 	.word	0x200000ec
	...

08016660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016660:	4b07      	ldr	r3, [pc, #28]	@ (8016680 <pxCurrentTCBConst2>)
 8016662:	6819      	ldr	r1, [r3, #0]
 8016664:	6808      	ldr	r0, [r1, #0]
 8016666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666a:	f380 8809 	msr	PSP, r0
 801666e:	f3bf 8f6f 	isb	sy
 8016672:	f04f 0000 	mov.w	r0, #0
 8016676:	f380 8811 	msr	BASEPRI, r0
 801667a:	4770      	bx	lr
 801667c:	f3af 8000 	nop.w

08016680 <pxCurrentTCBConst2>:
 8016680:	2000525c 	.word	0x2000525c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016684:	bf00      	nop
 8016686:	bf00      	nop

08016688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016688:	4808      	ldr	r0, [pc, #32]	@ (80166ac <prvPortStartFirstTask+0x24>)
 801668a:	6800      	ldr	r0, [r0, #0]
 801668c:	6800      	ldr	r0, [r0, #0]
 801668e:	f380 8808 	msr	MSP, r0
 8016692:	f04f 0000 	mov.w	r0, #0
 8016696:	f380 8814 	msr	CONTROL, r0
 801669a:	b662      	cpsie	i
 801669c:	b661      	cpsie	f
 801669e:	f3bf 8f4f 	dsb	sy
 80166a2:	f3bf 8f6f 	isb	sy
 80166a6:	df00      	svc	0
 80166a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80166aa:	bf00      	nop
 80166ac:	e000ed08 	.word	0xe000ed08

080166b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b086      	sub	sp, #24
 80166b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80166b6:	4b47      	ldr	r3, [pc, #284]	@ (80167d4 <xPortStartScheduler+0x124>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	4a47      	ldr	r2, [pc, #284]	@ (80167d8 <xPortStartScheduler+0x128>)
 80166bc:	4293      	cmp	r3, r2
 80166be:	d10b      	bne.n	80166d8 <xPortStartScheduler+0x28>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166c4:	f383 8811 	msr	BASEPRI, r3
 80166c8:	f3bf 8f6f 	isb	sy
 80166cc:	f3bf 8f4f 	dsb	sy
 80166d0:	60fb      	str	r3, [r7, #12]
}
 80166d2:	bf00      	nop
 80166d4:	bf00      	nop
 80166d6:	e7fd      	b.n	80166d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80166d8:	4b3e      	ldr	r3, [pc, #248]	@ (80167d4 <xPortStartScheduler+0x124>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	4a3f      	ldr	r2, [pc, #252]	@ (80167dc <xPortStartScheduler+0x12c>)
 80166de:	4293      	cmp	r3, r2
 80166e0:	d10b      	bne.n	80166fa <xPortStartScheduler+0x4a>
	__asm volatile
 80166e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166e6:	f383 8811 	msr	BASEPRI, r3
 80166ea:	f3bf 8f6f 	isb	sy
 80166ee:	f3bf 8f4f 	dsb	sy
 80166f2:	613b      	str	r3, [r7, #16]
}
 80166f4:	bf00      	nop
 80166f6:	bf00      	nop
 80166f8:	e7fd      	b.n	80166f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80166fa:	4b39      	ldr	r3, [pc, #228]	@ (80167e0 <xPortStartScheduler+0x130>)
 80166fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	b2db      	uxtb	r3, r3
 8016704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	22ff      	movs	r2, #255	@ 0xff
 801670a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801670c:	697b      	ldr	r3, [r7, #20]
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	b2db      	uxtb	r3, r3
 8016712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016714:	78fb      	ldrb	r3, [r7, #3]
 8016716:	b2db      	uxtb	r3, r3
 8016718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801671c:	b2da      	uxtb	r2, r3
 801671e:	4b31      	ldr	r3, [pc, #196]	@ (80167e4 <xPortStartScheduler+0x134>)
 8016720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016722:	4b31      	ldr	r3, [pc, #196]	@ (80167e8 <xPortStartScheduler+0x138>)
 8016724:	2207      	movs	r2, #7
 8016726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016728:	e009      	b.n	801673e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801672a:	4b2f      	ldr	r3, [pc, #188]	@ (80167e8 <xPortStartScheduler+0x138>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	3b01      	subs	r3, #1
 8016730:	4a2d      	ldr	r2, [pc, #180]	@ (80167e8 <xPortStartScheduler+0x138>)
 8016732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016734:	78fb      	ldrb	r3, [r7, #3]
 8016736:	b2db      	uxtb	r3, r3
 8016738:	005b      	lsls	r3, r3, #1
 801673a:	b2db      	uxtb	r3, r3
 801673c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801673e:	78fb      	ldrb	r3, [r7, #3]
 8016740:	b2db      	uxtb	r3, r3
 8016742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016746:	2b80      	cmp	r3, #128	@ 0x80
 8016748:	d0ef      	beq.n	801672a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801674a:	4b27      	ldr	r3, [pc, #156]	@ (80167e8 <xPortStartScheduler+0x138>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	f1c3 0307 	rsb	r3, r3, #7
 8016752:	2b04      	cmp	r3, #4
 8016754:	d00b      	beq.n	801676e <xPortStartScheduler+0xbe>
	__asm volatile
 8016756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801675a:	f383 8811 	msr	BASEPRI, r3
 801675e:	f3bf 8f6f 	isb	sy
 8016762:	f3bf 8f4f 	dsb	sy
 8016766:	60bb      	str	r3, [r7, #8]
}
 8016768:	bf00      	nop
 801676a:	bf00      	nop
 801676c:	e7fd      	b.n	801676a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801676e:	4b1e      	ldr	r3, [pc, #120]	@ (80167e8 <xPortStartScheduler+0x138>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	021b      	lsls	r3, r3, #8
 8016774:	4a1c      	ldr	r2, [pc, #112]	@ (80167e8 <xPortStartScheduler+0x138>)
 8016776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016778:	4b1b      	ldr	r3, [pc, #108]	@ (80167e8 <xPortStartScheduler+0x138>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016780:	4a19      	ldr	r2, [pc, #100]	@ (80167e8 <xPortStartScheduler+0x138>)
 8016782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	b2da      	uxtb	r2, r3
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801678c:	4b17      	ldr	r3, [pc, #92]	@ (80167ec <xPortStartScheduler+0x13c>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	4a16      	ldr	r2, [pc, #88]	@ (80167ec <xPortStartScheduler+0x13c>)
 8016792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016798:	4b14      	ldr	r3, [pc, #80]	@ (80167ec <xPortStartScheduler+0x13c>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a13      	ldr	r2, [pc, #76]	@ (80167ec <xPortStartScheduler+0x13c>)
 801679e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80167a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80167a4:	f000 f8da 	bl	801695c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80167a8:	4b11      	ldr	r3, [pc, #68]	@ (80167f0 <xPortStartScheduler+0x140>)
 80167aa:	2200      	movs	r2, #0
 80167ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80167ae:	f000 f8f9 	bl	80169a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80167b2:	4b10      	ldr	r3, [pc, #64]	@ (80167f4 <xPortStartScheduler+0x144>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	4a0f      	ldr	r2, [pc, #60]	@ (80167f4 <xPortStartScheduler+0x144>)
 80167b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80167bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80167be:	f7ff ff63 	bl	8016688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80167c2:	f7fe fddd 	bl	8015380 <vTaskSwitchContext>
	prvTaskExitError();
 80167c6:	f7ff ff19 	bl	80165fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80167ca:	2300      	movs	r3, #0
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3718      	adds	r7, #24
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}
 80167d4:	e000ed00 	.word	0xe000ed00
 80167d8:	410fc271 	.word	0x410fc271
 80167dc:	410fc270 	.word	0x410fc270
 80167e0:	e000e400 	.word	0xe000e400
 80167e4:	20005888 	.word	0x20005888
 80167e8:	2000588c 	.word	0x2000588c
 80167ec:	e000ed20 	.word	0xe000ed20
 80167f0:	200000ec 	.word	0x200000ec
 80167f4:	e000ef34 	.word	0xe000ef34

080167f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80167f8:	b480      	push	{r7}
 80167fa:	b083      	sub	sp, #12
 80167fc:	af00      	add	r7, sp, #0
	__asm volatile
 80167fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016802:	f383 8811 	msr	BASEPRI, r3
 8016806:	f3bf 8f6f 	isb	sy
 801680a:	f3bf 8f4f 	dsb	sy
 801680e:	607b      	str	r3, [r7, #4]
}
 8016810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016812:	4b10      	ldr	r3, [pc, #64]	@ (8016854 <vPortEnterCritical+0x5c>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	3301      	adds	r3, #1
 8016818:	4a0e      	ldr	r2, [pc, #56]	@ (8016854 <vPortEnterCritical+0x5c>)
 801681a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801681c:	4b0d      	ldr	r3, [pc, #52]	@ (8016854 <vPortEnterCritical+0x5c>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b01      	cmp	r3, #1
 8016822:	d110      	bne.n	8016846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016824:	4b0c      	ldr	r3, [pc, #48]	@ (8016858 <vPortEnterCritical+0x60>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	b2db      	uxtb	r3, r3
 801682a:	2b00      	cmp	r3, #0
 801682c:	d00b      	beq.n	8016846 <vPortEnterCritical+0x4e>
	__asm volatile
 801682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016832:	f383 8811 	msr	BASEPRI, r3
 8016836:	f3bf 8f6f 	isb	sy
 801683a:	f3bf 8f4f 	dsb	sy
 801683e:	603b      	str	r3, [r7, #0]
}
 8016840:	bf00      	nop
 8016842:	bf00      	nop
 8016844:	e7fd      	b.n	8016842 <vPortEnterCritical+0x4a>
	}
}
 8016846:	bf00      	nop
 8016848:	370c      	adds	r7, #12
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	200000ec 	.word	0x200000ec
 8016858:	e000ed04 	.word	0xe000ed04

0801685c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801685c:	b480      	push	{r7}
 801685e:	b083      	sub	sp, #12
 8016860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016862:	4b12      	ldr	r3, [pc, #72]	@ (80168ac <vPortExitCritical+0x50>)
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d10b      	bne.n	8016882 <vPortExitCritical+0x26>
	__asm volatile
 801686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801686e:	f383 8811 	msr	BASEPRI, r3
 8016872:	f3bf 8f6f 	isb	sy
 8016876:	f3bf 8f4f 	dsb	sy
 801687a:	607b      	str	r3, [r7, #4]
}
 801687c:	bf00      	nop
 801687e:	bf00      	nop
 8016880:	e7fd      	b.n	801687e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016882:	4b0a      	ldr	r3, [pc, #40]	@ (80168ac <vPortExitCritical+0x50>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	3b01      	subs	r3, #1
 8016888:	4a08      	ldr	r2, [pc, #32]	@ (80168ac <vPortExitCritical+0x50>)
 801688a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801688c:	4b07      	ldr	r3, [pc, #28]	@ (80168ac <vPortExitCritical+0x50>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d105      	bne.n	80168a0 <vPortExitCritical+0x44>
 8016894:	2300      	movs	r3, #0
 8016896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	f383 8811 	msr	BASEPRI, r3
}
 801689e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80168a0:	bf00      	nop
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr
 80168ac:	200000ec 	.word	0x200000ec

080168b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80168b0:	f3ef 8009 	mrs	r0, PSP
 80168b4:	f3bf 8f6f 	isb	sy
 80168b8:	4b15      	ldr	r3, [pc, #84]	@ (8016910 <pxCurrentTCBConst>)
 80168ba:	681a      	ldr	r2, [r3, #0]
 80168bc:	f01e 0f10 	tst.w	lr, #16
 80168c0:	bf08      	it	eq
 80168c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80168c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ca:	6010      	str	r0, [r2, #0]
 80168cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80168d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80168d4:	f380 8811 	msr	BASEPRI, r0
 80168d8:	f3bf 8f4f 	dsb	sy
 80168dc:	f3bf 8f6f 	isb	sy
 80168e0:	f7fe fd4e 	bl	8015380 <vTaskSwitchContext>
 80168e4:	f04f 0000 	mov.w	r0, #0
 80168e8:	f380 8811 	msr	BASEPRI, r0
 80168ec:	bc09      	pop	{r0, r3}
 80168ee:	6819      	ldr	r1, [r3, #0]
 80168f0:	6808      	ldr	r0, [r1, #0]
 80168f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f6:	f01e 0f10 	tst.w	lr, #16
 80168fa:	bf08      	it	eq
 80168fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016900:	f380 8809 	msr	PSP, r0
 8016904:	f3bf 8f6f 	isb	sy
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop
 801690c:	f3af 8000 	nop.w

08016910 <pxCurrentTCBConst>:
 8016910:	2000525c 	.word	0x2000525c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016914:	bf00      	nop
 8016916:	bf00      	nop

08016918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
	__asm volatile
 801691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016922:	f383 8811 	msr	BASEPRI, r3
 8016926:	f3bf 8f6f 	isb	sy
 801692a:	f3bf 8f4f 	dsb	sy
 801692e:	607b      	str	r3, [r7, #4]
}
 8016930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016932:	f7fe fc6b 	bl	801520c <xTaskIncrementTick>
 8016936:	4603      	mov	r3, r0
 8016938:	2b00      	cmp	r3, #0
 801693a:	d003      	beq.n	8016944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801693c:	4b06      	ldr	r3, [pc, #24]	@ (8016958 <xPortSysTickHandler+0x40>)
 801693e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016942:	601a      	str	r2, [r3, #0]
 8016944:	2300      	movs	r3, #0
 8016946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016948:	683b      	ldr	r3, [r7, #0]
 801694a:	f383 8811 	msr	BASEPRI, r3
}
 801694e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016950:	bf00      	nop
 8016952:	3708      	adds	r7, #8
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}
 8016958:	e000ed04 	.word	0xe000ed04

0801695c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801695c:	b480      	push	{r7}
 801695e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016960:	4b0b      	ldr	r3, [pc, #44]	@ (8016990 <vPortSetupTimerInterrupt+0x34>)
 8016962:	2200      	movs	r2, #0
 8016964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016966:	4b0b      	ldr	r3, [pc, #44]	@ (8016994 <vPortSetupTimerInterrupt+0x38>)
 8016968:	2200      	movs	r2, #0
 801696a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801696c:	4b0a      	ldr	r3, [pc, #40]	@ (8016998 <vPortSetupTimerInterrupt+0x3c>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4a0a      	ldr	r2, [pc, #40]	@ (801699c <vPortSetupTimerInterrupt+0x40>)
 8016972:	fba2 2303 	umull	r2, r3, r2, r3
 8016976:	099b      	lsrs	r3, r3, #6
 8016978:	4a09      	ldr	r2, [pc, #36]	@ (80169a0 <vPortSetupTimerInterrupt+0x44>)
 801697a:	3b01      	subs	r3, #1
 801697c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801697e:	4b04      	ldr	r3, [pc, #16]	@ (8016990 <vPortSetupTimerInterrupt+0x34>)
 8016980:	2207      	movs	r2, #7
 8016982:	601a      	str	r2, [r3, #0]
}
 8016984:	bf00      	nop
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	e000e010 	.word	0xe000e010
 8016994:	e000e018 	.word	0xe000e018
 8016998:	20000054 	.word	0x20000054
 801699c:	10624dd3 	.word	0x10624dd3
 80169a0:	e000e014 	.word	0xe000e014

080169a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80169a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80169b4 <vPortEnableVFP+0x10>
 80169a8:	6801      	ldr	r1, [r0, #0]
 80169aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80169ae:	6001      	str	r1, [r0, #0]
 80169b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80169b2:	bf00      	nop
 80169b4:	e000ed88 	.word	0xe000ed88

080169b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80169b8:	b480      	push	{r7}
 80169ba:	b085      	sub	sp, #20
 80169bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80169be:	f3ef 8305 	mrs	r3, IPSR
 80169c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2b0f      	cmp	r3, #15
 80169c8:	d915      	bls.n	80169f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80169ca:	4a18      	ldr	r2, [pc, #96]	@ (8016a2c <vPortValidateInterruptPriority+0x74>)
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	4413      	add	r3, r2
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80169d4:	4b16      	ldr	r3, [pc, #88]	@ (8016a30 <vPortValidateInterruptPriority+0x78>)
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	7afa      	ldrb	r2, [r7, #11]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d20b      	bcs.n	80169f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80169de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169e2:	f383 8811 	msr	BASEPRI, r3
 80169e6:	f3bf 8f6f 	isb	sy
 80169ea:	f3bf 8f4f 	dsb	sy
 80169ee:	607b      	str	r3, [r7, #4]
}
 80169f0:	bf00      	nop
 80169f2:	bf00      	nop
 80169f4:	e7fd      	b.n	80169f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80169f6:	4b0f      	ldr	r3, [pc, #60]	@ (8016a34 <vPortValidateInterruptPriority+0x7c>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80169fe:	4b0e      	ldr	r3, [pc, #56]	@ (8016a38 <vPortValidateInterruptPriority+0x80>)
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d90b      	bls.n	8016a1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a0a:	f383 8811 	msr	BASEPRI, r3
 8016a0e:	f3bf 8f6f 	isb	sy
 8016a12:	f3bf 8f4f 	dsb	sy
 8016a16:	603b      	str	r3, [r7, #0]
}
 8016a18:	bf00      	nop
 8016a1a:	bf00      	nop
 8016a1c:	e7fd      	b.n	8016a1a <vPortValidateInterruptPriority+0x62>
	}
 8016a1e:	bf00      	nop
 8016a20:	3714      	adds	r7, #20
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr
 8016a2a:	bf00      	nop
 8016a2c:	e000e3f0 	.word	0xe000e3f0
 8016a30:	20005888 	.word	0x20005888
 8016a34:	e000ed0c 	.word	0xe000ed0c
 8016a38:	2000588c 	.word	0x2000588c

08016a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b08a      	sub	sp, #40	@ 0x28
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016a44:	2300      	movs	r3, #0
 8016a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016a48:	f7fe fb24 	bl	8015094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8016bc0 <pvPortMalloc+0x184>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d101      	bne.n	8016a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016a54:	f000 f924 	bl	8016ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016a58:	4b5a      	ldr	r3, [pc, #360]	@ (8016bc4 <pvPortMalloc+0x188>)
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	4013      	ands	r3, r2
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f040 8095 	bne.w	8016b90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d01e      	beq.n	8016aaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016a6c:	2208      	movs	r2, #8
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4413      	add	r3, r2
 8016a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f003 0307 	and.w	r3, r3, #7
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d015      	beq.n	8016aaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f023 0307 	bic.w	r3, r3, #7
 8016a84:	3308      	adds	r3, #8
 8016a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f003 0307 	and.w	r3, r3, #7
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00b      	beq.n	8016aaa <pvPortMalloc+0x6e>
	__asm volatile
 8016a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a96:	f383 8811 	msr	BASEPRI, r3
 8016a9a:	f3bf 8f6f 	isb	sy
 8016a9e:	f3bf 8f4f 	dsb	sy
 8016aa2:	617b      	str	r3, [r7, #20]
}
 8016aa4:	bf00      	nop
 8016aa6:	bf00      	nop
 8016aa8:	e7fd      	b.n	8016aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d06f      	beq.n	8016b90 <pvPortMalloc+0x154>
 8016ab0:	4b45      	ldr	r3, [pc, #276]	@ (8016bc8 <pvPortMalloc+0x18c>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	687a      	ldr	r2, [r7, #4]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d86a      	bhi.n	8016b90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016aba:	4b44      	ldr	r3, [pc, #272]	@ (8016bcc <pvPortMalloc+0x190>)
 8016abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016abe:	4b43      	ldr	r3, [pc, #268]	@ (8016bcc <pvPortMalloc+0x190>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016ac4:	e004      	b.n	8016ad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad2:	685b      	ldr	r3, [r3, #4]
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d903      	bls.n	8016ae2 <pvPortMalloc+0xa6>
 8016ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d1f1      	bne.n	8016ac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ae2:	4b37      	ldr	r3, [pc, #220]	@ (8016bc0 <pvPortMalloc+0x184>)
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d051      	beq.n	8016b90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	2208      	movs	r2, #8
 8016af2:	4413      	add	r3, r2
 8016af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af8:	681a      	ldr	r2, [r3, #0]
 8016afa:	6a3b      	ldr	r3, [r7, #32]
 8016afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b00:	685a      	ldr	r2, [r3, #4]
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	1ad2      	subs	r2, r2, r3
 8016b06:	2308      	movs	r3, #8
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d920      	bls.n	8016b50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	4413      	add	r3, r2
 8016b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	f003 0307 	and.w	r3, r3, #7
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d00b      	beq.n	8016b38 <pvPortMalloc+0xfc>
	__asm volatile
 8016b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b24:	f383 8811 	msr	BASEPRI, r3
 8016b28:	f3bf 8f6f 	isb	sy
 8016b2c:	f3bf 8f4f 	dsb	sy
 8016b30:	613b      	str	r3, [r7, #16]
}
 8016b32:	bf00      	nop
 8016b34:	bf00      	nop
 8016b36:	e7fd      	b.n	8016b34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b3a:	685a      	ldr	r2, [r3, #4]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	1ad2      	subs	r2, r2, r3
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016b4a:	69b8      	ldr	r0, [r7, #24]
 8016b4c:	f000 f90a 	bl	8016d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016b50:	4b1d      	ldr	r3, [pc, #116]	@ (8016bc8 <pvPortMalloc+0x18c>)
 8016b52:	681a      	ldr	r2, [r3, #0]
 8016b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b56:	685b      	ldr	r3, [r3, #4]
 8016b58:	1ad3      	subs	r3, r2, r3
 8016b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8016bc8 <pvPortMalloc+0x18c>)
 8016b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8016bc8 <pvPortMalloc+0x18c>)
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	4b1b      	ldr	r3, [pc, #108]	@ (8016bd0 <pvPortMalloc+0x194>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d203      	bcs.n	8016b72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016b6a:	4b17      	ldr	r3, [pc, #92]	@ (8016bc8 <pvPortMalloc+0x18c>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4a18      	ldr	r2, [pc, #96]	@ (8016bd0 <pvPortMalloc+0x194>)
 8016b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b74:	685a      	ldr	r2, [r3, #4]
 8016b76:	4b13      	ldr	r3, [pc, #76]	@ (8016bc4 <pvPortMalloc+0x188>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	431a      	orrs	r2, r3
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b82:	2200      	movs	r2, #0
 8016b84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016b86:	4b13      	ldr	r3, [pc, #76]	@ (8016bd4 <pvPortMalloc+0x198>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	4a11      	ldr	r2, [pc, #68]	@ (8016bd4 <pvPortMalloc+0x198>)
 8016b8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016b90:	f7fe fa8e 	bl	80150b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b94:	69fb      	ldr	r3, [r7, #28]
 8016b96:	f003 0307 	and.w	r3, r3, #7
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d00b      	beq.n	8016bb6 <pvPortMalloc+0x17a>
	__asm volatile
 8016b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ba2:	f383 8811 	msr	BASEPRI, r3
 8016ba6:	f3bf 8f6f 	isb	sy
 8016baa:	f3bf 8f4f 	dsb	sy
 8016bae:	60fb      	str	r3, [r7, #12]
}
 8016bb0:	bf00      	nop
 8016bb2:	bf00      	nop
 8016bb4:	e7fd      	b.n	8016bb2 <pvPortMalloc+0x176>
	return pvReturn;
 8016bb6:	69fb      	ldr	r3, [r7, #28]
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3728      	adds	r7, #40	@ 0x28
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	20009498 	.word	0x20009498
 8016bc4:	200094ac 	.word	0x200094ac
 8016bc8:	2000949c 	.word	0x2000949c
 8016bcc:	20009490 	.word	0x20009490
 8016bd0:	200094a0 	.word	0x200094a0
 8016bd4:	200094a4 	.word	0x200094a4

08016bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b086      	sub	sp, #24
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d04f      	beq.n	8016c8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016bea:	2308      	movs	r3, #8
 8016bec:	425b      	negs	r3, r3
 8016bee:	697a      	ldr	r2, [r7, #20]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	685a      	ldr	r2, [r3, #4]
 8016bfc:	4b25      	ldr	r3, [pc, #148]	@ (8016c94 <vPortFree+0xbc>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4013      	ands	r3, r2
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d10b      	bne.n	8016c1e <vPortFree+0x46>
	__asm volatile
 8016c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c0a:	f383 8811 	msr	BASEPRI, r3
 8016c0e:	f3bf 8f6f 	isb	sy
 8016c12:	f3bf 8f4f 	dsb	sy
 8016c16:	60fb      	str	r3, [r7, #12]
}
 8016c18:	bf00      	nop
 8016c1a:	bf00      	nop
 8016c1c:	e7fd      	b.n	8016c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d00b      	beq.n	8016c3e <vPortFree+0x66>
	__asm volatile
 8016c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c2a:	f383 8811 	msr	BASEPRI, r3
 8016c2e:	f3bf 8f6f 	isb	sy
 8016c32:	f3bf 8f4f 	dsb	sy
 8016c36:	60bb      	str	r3, [r7, #8]
}
 8016c38:	bf00      	nop
 8016c3a:	bf00      	nop
 8016c3c:	e7fd      	b.n	8016c3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	685a      	ldr	r2, [r3, #4]
 8016c42:	4b14      	ldr	r3, [pc, #80]	@ (8016c94 <vPortFree+0xbc>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	4013      	ands	r3, r2
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d01e      	beq.n	8016c8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016c4c:	693b      	ldr	r3, [r7, #16]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d11a      	bne.n	8016c8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	685a      	ldr	r2, [r3, #4]
 8016c58:	4b0e      	ldr	r3, [pc, #56]	@ (8016c94 <vPortFree+0xbc>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	43db      	mvns	r3, r3
 8016c5e:	401a      	ands	r2, r3
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016c64:	f7fe fa16 	bl	8015094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016c68:	693b      	ldr	r3, [r7, #16]
 8016c6a:	685a      	ldr	r2, [r3, #4]
 8016c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8016c98 <vPortFree+0xc0>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	4413      	add	r3, r2
 8016c72:	4a09      	ldr	r2, [pc, #36]	@ (8016c98 <vPortFree+0xc0>)
 8016c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016c76:	6938      	ldr	r0, [r7, #16]
 8016c78:	f000 f874 	bl	8016d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016c7c:	4b07      	ldr	r3, [pc, #28]	@ (8016c9c <vPortFree+0xc4>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	3301      	adds	r3, #1
 8016c82:	4a06      	ldr	r2, [pc, #24]	@ (8016c9c <vPortFree+0xc4>)
 8016c84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016c86:	f7fe fa13 	bl	80150b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016c8a:	bf00      	nop
 8016c8c:	3718      	adds	r7, #24
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	200094ac 	.word	0x200094ac
 8016c98:	2000949c 	.word	0x2000949c
 8016c9c:	200094a8 	.word	0x200094a8

08016ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016ca6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016cac:	4b27      	ldr	r3, [pc, #156]	@ (8016d4c <prvHeapInit+0xac>)
 8016cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	f003 0307 	and.w	r3, r3, #7
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d00c      	beq.n	8016cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	3307      	adds	r3, #7
 8016cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	f023 0307 	bic.w	r3, r3, #7
 8016cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016cc8:	68ba      	ldr	r2, [r7, #8]
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	1ad3      	subs	r3, r2, r3
 8016cce:	4a1f      	ldr	r2, [pc, #124]	@ (8016d4c <prvHeapInit+0xac>)
 8016cd0:	4413      	add	r3, r2
 8016cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8016d50 <prvHeapInit+0xb0>)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016cde:	4b1c      	ldr	r3, [pc, #112]	@ (8016d50 <prvHeapInit+0xb0>)
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	68ba      	ldr	r2, [r7, #8]
 8016ce8:	4413      	add	r3, r2
 8016cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016cec:	2208      	movs	r2, #8
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	1a9b      	subs	r3, r3, r2
 8016cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	f023 0307 	bic.w	r3, r3, #7
 8016cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	4a15      	ldr	r2, [pc, #84]	@ (8016d54 <prvHeapInit+0xb4>)
 8016d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016d02:	4b14      	ldr	r3, [pc, #80]	@ (8016d54 <prvHeapInit+0xb4>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	2200      	movs	r2, #0
 8016d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016d0a:	4b12      	ldr	r3, [pc, #72]	@ (8016d54 <prvHeapInit+0xb4>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	68fa      	ldr	r2, [r7, #12]
 8016d1a:	1ad2      	subs	r2, r2, r3
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016d20:	4b0c      	ldr	r3, [pc, #48]	@ (8016d54 <prvHeapInit+0xb4>)
 8016d22:	681a      	ldr	r2, [r3, #0]
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	685b      	ldr	r3, [r3, #4]
 8016d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8016d58 <prvHeapInit+0xb8>)
 8016d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	4a09      	ldr	r2, [pc, #36]	@ (8016d5c <prvHeapInit+0xbc>)
 8016d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016d38:	4b09      	ldr	r3, [pc, #36]	@ (8016d60 <prvHeapInit+0xc0>)
 8016d3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016d3e:	601a      	str	r2, [r3, #0]
}
 8016d40:	bf00      	nop
 8016d42:	3714      	adds	r7, #20
 8016d44:	46bd      	mov	sp, r7
 8016d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4a:	4770      	bx	lr
 8016d4c:	20005890 	.word	0x20005890
 8016d50:	20009490 	.word	0x20009490
 8016d54:	20009498 	.word	0x20009498
 8016d58:	200094a0 	.word	0x200094a0
 8016d5c:	2000949c 	.word	0x2000949c
 8016d60:	200094ac 	.word	0x200094ac

08016d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016d64:	b480      	push	{r7}
 8016d66:	b085      	sub	sp, #20
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016d6c:	4b28      	ldr	r3, [pc, #160]	@ (8016e10 <prvInsertBlockIntoFreeList+0xac>)
 8016d6e:	60fb      	str	r3, [r7, #12]
 8016d70:	e002      	b.n	8016d78 <prvInsertBlockIntoFreeList+0x14>
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	60fb      	str	r3, [r7, #12]
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	687a      	ldr	r2, [r7, #4]
 8016d7e:	429a      	cmp	r2, r3
 8016d80:	d8f7      	bhi.n	8016d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	685b      	ldr	r3, [r3, #4]
 8016d8a:	68ba      	ldr	r2, [r7, #8]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d108      	bne.n	8016da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	685a      	ldr	r2, [r3, #4]
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	685b      	ldr	r3, [r3, #4]
 8016d9c:	441a      	add	r2, r3
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	685b      	ldr	r3, [r3, #4]
 8016dae:	68ba      	ldr	r2, [r7, #8]
 8016db0:	441a      	add	r2, r3
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d118      	bne.n	8016dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	4b15      	ldr	r3, [pc, #84]	@ (8016e14 <prvInsertBlockIntoFreeList+0xb0>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d00d      	beq.n	8016de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	685a      	ldr	r2, [r3, #4]
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	685b      	ldr	r3, [r3, #4]
 8016dd0:	441a      	add	r2, r3
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	601a      	str	r2, [r3, #0]
 8016de0:	e008      	b.n	8016df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016de2:	4b0c      	ldr	r3, [pc, #48]	@ (8016e14 <prvInsertBlockIntoFreeList+0xb0>)
 8016de4:	681a      	ldr	r2, [r3, #0]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	601a      	str	r2, [r3, #0]
 8016dea:	e003      	b.n	8016df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681a      	ldr	r2, [r3, #0]
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016df4:	68fa      	ldr	r2, [r7, #12]
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	d002      	beq.n	8016e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016e02:	bf00      	nop
 8016e04:	3714      	adds	r7, #20
 8016e06:	46bd      	mov	sp, r7
 8016e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0c:	4770      	bx	lr
 8016e0e:	bf00      	nop
 8016e10:	20009490 	.word	0x20009490
 8016e14:	20009498 	.word	0x20009498

08016e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	4912      	ldr	r1, [pc, #72]	@ (8016e68 <MX_USB_DEVICE_Init+0x50>)
 8016e20:	4812      	ldr	r0, [pc, #72]	@ (8016e6c <MX_USB_DEVICE_Init+0x54>)
 8016e22:	f7fb fb1d 	bl	8012460 <USBD_Init>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d001      	beq.n	8016e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016e2c:	f7f1 fbb6 	bl	800859c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016e30:	490f      	ldr	r1, [pc, #60]	@ (8016e70 <MX_USB_DEVICE_Init+0x58>)
 8016e32:	480e      	ldr	r0, [pc, #56]	@ (8016e6c <MX_USB_DEVICE_Init+0x54>)
 8016e34:	f7fb fb44 	bl	80124c0 <USBD_RegisterClass>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d001      	beq.n	8016e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016e3e:	f7f1 fbad 	bl	800859c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016e42:	490c      	ldr	r1, [pc, #48]	@ (8016e74 <MX_USB_DEVICE_Init+0x5c>)
 8016e44:	4809      	ldr	r0, [pc, #36]	@ (8016e6c <MX_USB_DEVICE_Init+0x54>)
 8016e46:	f7fb fa7b 	bl	8012340 <USBD_CDC_RegisterInterface>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d001      	beq.n	8016e54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016e50:	f7f1 fba4 	bl	800859c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016e54:	4805      	ldr	r0, [pc, #20]	@ (8016e6c <MX_USB_DEVICE_Init+0x54>)
 8016e56:	f7fb fb69 	bl	801252c <USBD_Start>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d001      	beq.n	8016e64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016e60:	f7f1 fb9c 	bl	800859c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016e64:	bf00      	nop
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	20000104 	.word	0x20000104
 8016e6c:	200094b0 	.word	0x200094b0
 8016e70:	2000006c 	.word	0x2000006c
 8016e74:	200000f0 	.word	0x200000f0

08016e78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	4905      	ldr	r1, [pc, #20]	@ (8016e94 <CDC_Init_FS+0x1c>)
 8016e80:	4805      	ldr	r0, [pc, #20]	@ (8016e98 <CDC_Init_FS+0x20>)
 8016e82:	f7fb fa77 	bl	8012374 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016e86:	4905      	ldr	r1, [pc, #20]	@ (8016e9c <CDC_Init_FS+0x24>)
 8016e88:	4803      	ldr	r0, [pc, #12]	@ (8016e98 <CDC_Init_FS+0x20>)
 8016e8a:	f7fb fa95 	bl	80123b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016e8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	20009f8c 	.word	0x20009f8c
 8016e98:	200094b0 	.word	0x200094b0
 8016e9c:	2000978c 	.word	0x2000978c

08016ea0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016ea4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eae:	4770      	bx	lr

08016eb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	b083      	sub	sp, #12
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	6039      	str	r1, [r7, #0]
 8016eba:	71fb      	strb	r3, [r7, #7]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016ec0:	79fb      	ldrb	r3, [r7, #7]
 8016ec2:	2b23      	cmp	r3, #35	@ 0x23
 8016ec4:	d84a      	bhi.n	8016f5c <CDC_Control_FS+0xac>
 8016ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8016ecc <CDC_Control_FS+0x1c>)
 8016ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ecc:	08016f5d 	.word	0x08016f5d
 8016ed0:	08016f5d 	.word	0x08016f5d
 8016ed4:	08016f5d 	.word	0x08016f5d
 8016ed8:	08016f5d 	.word	0x08016f5d
 8016edc:	08016f5d 	.word	0x08016f5d
 8016ee0:	08016f5d 	.word	0x08016f5d
 8016ee4:	08016f5d 	.word	0x08016f5d
 8016ee8:	08016f5d 	.word	0x08016f5d
 8016eec:	08016f5d 	.word	0x08016f5d
 8016ef0:	08016f5d 	.word	0x08016f5d
 8016ef4:	08016f5d 	.word	0x08016f5d
 8016ef8:	08016f5d 	.word	0x08016f5d
 8016efc:	08016f5d 	.word	0x08016f5d
 8016f00:	08016f5d 	.word	0x08016f5d
 8016f04:	08016f5d 	.word	0x08016f5d
 8016f08:	08016f5d 	.word	0x08016f5d
 8016f0c:	08016f5d 	.word	0x08016f5d
 8016f10:	08016f5d 	.word	0x08016f5d
 8016f14:	08016f5d 	.word	0x08016f5d
 8016f18:	08016f5d 	.word	0x08016f5d
 8016f1c:	08016f5d 	.word	0x08016f5d
 8016f20:	08016f5d 	.word	0x08016f5d
 8016f24:	08016f5d 	.word	0x08016f5d
 8016f28:	08016f5d 	.word	0x08016f5d
 8016f2c:	08016f5d 	.word	0x08016f5d
 8016f30:	08016f5d 	.word	0x08016f5d
 8016f34:	08016f5d 	.word	0x08016f5d
 8016f38:	08016f5d 	.word	0x08016f5d
 8016f3c:	08016f5d 	.word	0x08016f5d
 8016f40:	08016f5d 	.word	0x08016f5d
 8016f44:	08016f5d 	.word	0x08016f5d
 8016f48:	08016f5d 	.word	0x08016f5d
 8016f4c:	08016f5d 	.word	0x08016f5d
 8016f50:	08016f5d 	.word	0x08016f5d
 8016f54:	08016f5d 	.word	0x08016f5d
 8016f58:	08016f5d 	.word	0x08016f5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016f5c:	bf00      	nop
  }

  return (USBD_OK);
 8016f5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	370c      	adds	r7, #12
 8016f64:	46bd      	mov	sp, r7
 8016f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6a:	4770      	bx	lr

08016f6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016f76:	6879      	ldr	r1, [r7, #4]
 8016f78:	4805      	ldr	r0, [pc, #20]	@ (8016f90 <CDC_Receive_FS+0x24>)
 8016f7a:	f7fb fa1d 	bl	80123b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016f7e:	4804      	ldr	r0, [pc, #16]	@ (8016f90 <CDC_Receive_FS+0x24>)
 8016f80:	f7fb fa38 	bl	80123f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016f84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	bf00      	nop
 8016f90:	200094b0 	.word	0x200094b0

08016f94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b087      	sub	sp, #28
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	60f8      	str	r0, [r7, #12]
 8016f9c:	60b9      	str	r1, [r7, #8]
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	371c      	adds	r7, #28
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb4:	4770      	bx	lr
	...

08016fb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fb8:	b480      	push	{r7}
 8016fba:	b083      	sub	sp, #12
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	6039      	str	r1, [r7, #0]
 8016fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	2212      	movs	r2, #18
 8016fc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016fca:	4b03      	ldr	r3, [pc, #12]	@ (8016fd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	370c      	adds	r7, #12
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr
 8016fd8:	20000120 	.word	0x20000120

08016fdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b083      	sub	sp, #12
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	6039      	str	r1, [r7, #0]
 8016fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	2204      	movs	r2, #4
 8016fec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016fee:	4b03      	ldr	r3, [pc, #12]	@ (8016ffc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	370c      	adds	r7, #12
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffa:	4770      	bx	lr
 8016ffc:	20000134 	.word	0x20000134

08017000 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b082      	sub	sp, #8
 8017004:	af00      	add	r7, sp, #0
 8017006:	4603      	mov	r3, r0
 8017008:	6039      	str	r1, [r7, #0]
 801700a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801700c:	79fb      	ldrb	r3, [r7, #7]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d105      	bne.n	801701e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017012:	683a      	ldr	r2, [r7, #0]
 8017014:	4907      	ldr	r1, [pc, #28]	@ (8017034 <USBD_FS_ProductStrDescriptor+0x34>)
 8017016:	4808      	ldr	r0, [pc, #32]	@ (8017038 <USBD_FS_ProductStrDescriptor+0x38>)
 8017018:	f7fc fc38 	bl	801388c <USBD_GetString>
 801701c:	e004      	b.n	8017028 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801701e:	683a      	ldr	r2, [r7, #0]
 8017020:	4904      	ldr	r1, [pc, #16]	@ (8017034 <USBD_FS_ProductStrDescriptor+0x34>)
 8017022:	4805      	ldr	r0, [pc, #20]	@ (8017038 <USBD_FS_ProductStrDescriptor+0x38>)
 8017024:	f7fc fc32 	bl	801388c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017028:	4b02      	ldr	r3, [pc, #8]	@ (8017034 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801702a:	4618      	mov	r0, r3
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	2000a78c 	.word	0x2000a78c
 8017038:	08020210 	.word	0x08020210

0801703c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	4603      	mov	r3, r0
 8017044:	6039      	str	r1, [r7, #0]
 8017046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017048:	683a      	ldr	r2, [r7, #0]
 801704a:	4904      	ldr	r1, [pc, #16]	@ (801705c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801704c:	4804      	ldr	r0, [pc, #16]	@ (8017060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801704e:	f7fc fc1d 	bl	801388c <USBD_GetString>
  return USBD_StrDesc;
 8017052:	4b02      	ldr	r3, [pc, #8]	@ (801705c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017054:	4618      	mov	r0, r3
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	2000a78c 	.word	0x2000a78c
 8017060:	08020228 	.word	0x08020228

08017064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	4603      	mov	r3, r0
 801706c:	6039      	str	r1, [r7, #0]
 801706e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	221a      	movs	r2, #26
 8017074:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017076:	f000 f843 	bl	8017100 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801707a:	4b02      	ldr	r3, [pc, #8]	@ (8017084 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801707c:	4618      	mov	r0, r3
 801707e:	3708      	adds	r7, #8
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}
 8017084:	20000138 	.word	0x20000138

08017088 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	4603      	mov	r3, r0
 8017090:	6039      	str	r1, [r7, #0]
 8017092:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017094:	79fb      	ldrb	r3, [r7, #7]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d105      	bne.n	80170a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801709a:	683a      	ldr	r2, [r7, #0]
 801709c:	4907      	ldr	r1, [pc, #28]	@ (80170bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801709e:	4808      	ldr	r0, [pc, #32]	@ (80170c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80170a0:	f7fc fbf4 	bl	801388c <USBD_GetString>
 80170a4:	e004      	b.n	80170b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80170a6:	683a      	ldr	r2, [r7, #0]
 80170a8:	4904      	ldr	r1, [pc, #16]	@ (80170bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80170aa:	4805      	ldr	r0, [pc, #20]	@ (80170c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80170ac:	f7fc fbee 	bl	801388c <USBD_GetString>
  }
  return USBD_StrDesc;
 80170b0:	4b02      	ldr	r3, [pc, #8]	@ (80170bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80170b2:	4618      	mov	r0, r3
 80170b4:	3708      	adds	r7, #8
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	2000a78c 	.word	0x2000a78c
 80170c0:	0802023c 	.word	0x0802023c

080170c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	4603      	mov	r3, r0
 80170cc:	6039      	str	r1, [r7, #0]
 80170ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80170d0:	79fb      	ldrb	r3, [r7, #7]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d105      	bne.n	80170e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80170d6:	683a      	ldr	r2, [r7, #0]
 80170d8:	4907      	ldr	r1, [pc, #28]	@ (80170f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80170da:	4808      	ldr	r0, [pc, #32]	@ (80170fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80170dc:	f7fc fbd6 	bl	801388c <USBD_GetString>
 80170e0:	e004      	b.n	80170ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80170e2:	683a      	ldr	r2, [r7, #0]
 80170e4:	4904      	ldr	r1, [pc, #16]	@ (80170f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80170e6:	4805      	ldr	r0, [pc, #20]	@ (80170fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80170e8:	f7fc fbd0 	bl	801388c <USBD_GetString>
  }
  return USBD_StrDesc;
 80170ec:	4b02      	ldr	r3, [pc, #8]	@ (80170f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3708      	adds	r7, #8
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}
 80170f6:	bf00      	nop
 80170f8:	2000a78c 	.word	0x2000a78c
 80170fc:	08020248 	.word	0x08020248

08017100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b084      	sub	sp, #16
 8017104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017106:	4b0f      	ldr	r3, [pc, #60]	@ (8017144 <Get_SerialNum+0x44>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801710c:	4b0e      	ldr	r3, [pc, #56]	@ (8017148 <Get_SerialNum+0x48>)
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017112:	4b0e      	ldr	r3, [pc, #56]	@ (801714c <Get_SerialNum+0x4c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017118:	68fa      	ldr	r2, [r7, #12]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	4413      	add	r3, r2
 801711e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d009      	beq.n	801713a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017126:	2208      	movs	r2, #8
 8017128:	4909      	ldr	r1, [pc, #36]	@ (8017150 <Get_SerialNum+0x50>)
 801712a:	68f8      	ldr	r0, [r7, #12]
 801712c:	f000 f814 	bl	8017158 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017130:	2204      	movs	r2, #4
 8017132:	4908      	ldr	r1, [pc, #32]	@ (8017154 <Get_SerialNum+0x54>)
 8017134:	68b8      	ldr	r0, [r7, #8]
 8017136:	f000 f80f 	bl	8017158 <IntToUnicode>
  }
}
 801713a:	bf00      	nop
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	1fff7a10 	.word	0x1fff7a10
 8017148:	1fff7a14 	.word	0x1fff7a14
 801714c:	1fff7a18 	.word	0x1fff7a18
 8017150:	2000013a 	.word	0x2000013a
 8017154:	2000014a 	.word	0x2000014a

08017158 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017158:	b480      	push	{r7}
 801715a:	b087      	sub	sp, #28
 801715c:	af00      	add	r7, sp, #0
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	60b9      	str	r1, [r7, #8]
 8017162:	4613      	mov	r3, r2
 8017164:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801716a:	2300      	movs	r3, #0
 801716c:	75fb      	strb	r3, [r7, #23]
 801716e:	e027      	b.n	80171c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	0f1b      	lsrs	r3, r3, #28
 8017174:	2b09      	cmp	r3, #9
 8017176:	d80b      	bhi.n	8017190 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	0f1b      	lsrs	r3, r3, #28
 801717c:	b2da      	uxtb	r2, r3
 801717e:	7dfb      	ldrb	r3, [r7, #23]
 8017180:	005b      	lsls	r3, r3, #1
 8017182:	4619      	mov	r1, r3
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	440b      	add	r3, r1
 8017188:	3230      	adds	r2, #48	@ 0x30
 801718a:	b2d2      	uxtb	r2, r2
 801718c:	701a      	strb	r2, [r3, #0]
 801718e:	e00a      	b.n	80171a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	0f1b      	lsrs	r3, r3, #28
 8017194:	b2da      	uxtb	r2, r3
 8017196:	7dfb      	ldrb	r3, [r7, #23]
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	4619      	mov	r1, r3
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	440b      	add	r3, r1
 80171a0:	3237      	adds	r2, #55	@ 0x37
 80171a2:	b2d2      	uxtb	r2, r2
 80171a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	011b      	lsls	r3, r3, #4
 80171aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80171ac:	7dfb      	ldrb	r3, [r7, #23]
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	3301      	adds	r3, #1
 80171b2:	68ba      	ldr	r2, [r7, #8]
 80171b4:	4413      	add	r3, r2
 80171b6:	2200      	movs	r2, #0
 80171b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80171ba:	7dfb      	ldrb	r3, [r7, #23]
 80171bc:	3301      	adds	r3, #1
 80171be:	75fb      	strb	r3, [r7, #23]
 80171c0:	7dfa      	ldrb	r2, [r7, #23]
 80171c2:	79fb      	ldrb	r3, [r7, #7]
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d3d3      	bcc.n	8017170 <IntToUnicode+0x18>
  }
}
 80171c8:	bf00      	nop
 80171ca:	bf00      	nop
 80171cc:	371c      	adds	r7, #28
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
	...

080171d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b08a      	sub	sp, #40	@ 0x28
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80171e0:	f107 0314 	add.w	r3, r7, #20
 80171e4:	2200      	movs	r2, #0
 80171e6:	601a      	str	r2, [r3, #0]
 80171e8:	605a      	str	r2, [r3, #4]
 80171ea:	609a      	str	r2, [r3, #8]
 80171ec:	60da      	str	r2, [r3, #12]
 80171ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80171f8:	d13a      	bne.n	8017270 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80171fa:	2300      	movs	r3, #0
 80171fc:	613b      	str	r3, [r7, #16]
 80171fe:	4b1e      	ldr	r3, [pc, #120]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 8017200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017202:	4a1d      	ldr	r2, [pc, #116]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 8017204:	f043 0301 	orr.w	r3, r3, #1
 8017208:	6313      	str	r3, [r2, #48]	@ 0x30
 801720a:	4b1b      	ldr	r3, [pc, #108]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 801720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801720e:	f003 0301 	and.w	r3, r3, #1
 8017212:	613b      	str	r3, [r7, #16]
 8017214:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017216:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801721a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801721c:	2302      	movs	r3, #2
 801721e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017220:	2300      	movs	r3, #0
 8017222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017224:	2303      	movs	r3, #3
 8017226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017228:	230a      	movs	r3, #10
 801722a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801722c:	f107 0314 	add.w	r3, r7, #20
 8017230:	4619      	mov	r1, r3
 8017232:	4812      	ldr	r0, [pc, #72]	@ (801727c <HAL_PCD_MspInit+0xa4>)
 8017234:	f7f3 feae 	bl	800af94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017238:	4b0f      	ldr	r3, [pc, #60]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 801723a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801723c:	4a0e      	ldr	r2, [pc, #56]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 801723e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017242:	6353      	str	r3, [r2, #52]	@ 0x34
 8017244:	2300      	movs	r3, #0
 8017246:	60fb      	str	r3, [r7, #12]
 8017248:	4b0b      	ldr	r3, [pc, #44]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 801724a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801724c:	4a0a      	ldr	r2, [pc, #40]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 801724e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017252:	6453      	str	r3, [r2, #68]	@ 0x44
 8017254:	4b08      	ldr	r3, [pc, #32]	@ (8017278 <HAL_PCD_MspInit+0xa0>)
 8017256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801725c:	60fb      	str	r3, [r7, #12]
 801725e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017260:	2200      	movs	r2, #0
 8017262:	2105      	movs	r1, #5
 8017264:	2043      	movs	r0, #67	@ 0x43
 8017266:	f7f3 f9fd 	bl	800a664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801726a:	2043      	movs	r0, #67	@ 0x43
 801726c:	f7f3 fa16 	bl	800a69c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017270:	bf00      	nop
 8017272:	3728      	adds	r7, #40	@ 0x28
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}
 8017278:	40023800 	.word	0x40023800
 801727c:	40020000 	.word	0x40020000

08017280 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017294:	4619      	mov	r1, r3
 8017296:	4610      	mov	r0, r2
 8017298:	f7fb f995 	bl	80125c6 <USBD_LL_SetupStage>
}
 801729c:	bf00      	nop
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	460b      	mov	r3, r1
 80172ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80172b6:	78fa      	ldrb	r2, [r7, #3]
 80172b8:	6879      	ldr	r1, [r7, #4]
 80172ba:	4613      	mov	r3, r2
 80172bc:	00db      	lsls	r3, r3, #3
 80172be:	4413      	add	r3, r2
 80172c0:	009b      	lsls	r3, r3, #2
 80172c2:	440b      	add	r3, r1
 80172c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	78fb      	ldrb	r3, [r7, #3]
 80172cc:	4619      	mov	r1, r3
 80172ce:	f7fb f9cf 	bl	8012670 <USBD_LL_DataOutStage>
}
 80172d2:	bf00      	nop
 80172d4:	3708      	adds	r7, #8
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}

080172da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b082      	sub	sp, #8
 80172de:	af00      	add	r7, sp, #0
 80172e0:	6078      	str	r0, [r7, #4]
 80172e2:	460b      	mov	r3, r1
 80172e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80172ec:	78fa      	ldrb	r2, [r7, #3]
 80172ee:	6879      	ldr	r1, [r7, #4]
 80172f0:	4613      	mov	r3, r2
 80172f2:	00db      	lsls	r3, r3, #3
 80172f4:	4413      	add	r3, r2
 80172f6:	009b      	lsls	r3, r3, #2
 80172f8:	440b      	add	r3, r1
 80172fa:	3320      	adds	r3, #32
 80172fc:	681a      	ldr	r2, [r3, #0]
 80172fe:	78fb      	ldrb	r3, [r7, #3]
 8017300:	4619      	mov	r1, r3
 8017302:	f7fb fa68 	bl	80127d6 <USBD_LL_DataInStage>
}
 8017306:	bf00      	nop
 8017308:	3708      	adds	r7, #8
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}

0801730e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801730e:	b580      	push	{r7, lr}
 8017310:	b082      	sub	sp, #8
 8017312:	af00      	add	r7, sp, #0
 8017314:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801731c:	4618      	mov	r0, r3
 801731e:	f7fb fba2 	bl	8012a66 <USBD_LL_SOF>
}
 8017322:	bf00      	nop
 8017324:	3708      	adds	r7, #8
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}

0801732a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801732a:	b580      	push	{r7, lr}
 801732c:	b084      	sub	sp, #16
 801732e:	af00      	add	r7, sp, #0
 8017330:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017332:	2301      	movs	r3, #1
 8017334:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	79db      	ldrb	r3, [r3, #7]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d102      	bne.n	8017344 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801733e:	2300      	movs	r3, #0
 8017340:	73fb      	strb	r3, [r7, #15]
 8017342:	e008      	b.n	8017356 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	79db      	ldrb	r3, [r3, #7]
 8017348:	2b02      	cmp	r3, #2
 801734a:	d102      	bne.n	8017352 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801734c:	2301      	movs	r3, #1
 801734e:	73fb      	strb	r3, [r7, #15]
 8017350:	e001      	b.n	8017356 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017352:	f7f1 f923 	bl	800859c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801735c:	7bfa      	ldrb	r2, [r7, #15]
 801735e:	4611      	mov	r1, r2
 8017360:	4618      	mov	r0, r3
 8017362:	f7fb fb3c 	bl	80129de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801736c:	4618      	mov	r0, r3
 801736e:	f7fb fae4 	bl	801293a <USBD_LL_Reset>
}
 8017372:	bf00      	nop
 8017374:	3710      	adds	r7, #16
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
	...

0801737c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801738a:	4618      	mov	r0, r3
 801738c:	f7fb fb37 	bl	80129fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	687a      	ldr	r2, [r7, #4]
 801739c:	6812      	ldr	r2, [r2, #0]
 801739e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80173a2:	f043 0301 	orr.w	r3, r3, #1
 80173a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	7adb      	ldrb	r3, [r3, #11]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d005      	beq.n	80173bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80173b0:	4b04      	ldr	r3, [pc, #16]	@ (80173c4 <HAL_PCD_SuspendCallback+0x48>)
 80173b2:	691b      	ldr	r3, [r3, #16]
 80173b4:	4a03      	ldr	r2, [pc, #12]	@ (80173c4 <HAL_PCD_SuspendCallback+0x48>)
 80173b6:	f043 0306 	orr.w	r3, r3, #6
 80173ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80173bc:	bf00      	nop
 80173be:	3708      	adds	r7, #8
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	e000ed00 	.word	0xe000ed00

080173c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b082      	sub	sp, #8
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7fb fb2d 	bl	8012a36 <USBD_LL_Resume>
}
 80173dc:	bf00      	nop
 80173de:	3708      	adds	r7, #8
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
 80173ec:	460b      	mov	r3, r1
 80173ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80173f6:	78fa      	ldrb	r2, [r7, #3]
 80173f8:	4611      	mov	r1, r2
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fb fb85 	bl	8012b0a <USBD_LL_IsoOUTIncomplete>
}
 8017400:	bf00      	nop
 8017402:	3708      	adds	r7, #8
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}

08017408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	460b      	mov	r3, r1
 8017412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801741a:	78fa      	ldrb	r2, [r7, #3]
 801741c:	4611      	mov	r1, r2
 801741e:	4618      	mov	r0, r3
 8017420:	f7fb fb41 	bl	8012aa6 <USBD_LL_IsoINIncomplete>
}
 8017424:	bf00      	nop
 8017426:	3708      	adds	r7, #8
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}

0801742c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b082      	sub	sp, #8
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801743a:	4618      	mov	r0, r3
 801743c:	f7fb fb97 	bl	8012b6e <USBD_LL_DevConnected>
}
 8017440:	bf00      	nop
 8017442:	3708      	adds	r7, #8
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b082      	sub	sp, #8
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017456:	4618      	mov	r0, r3
 8017458:	f7fb fb94 	bl	8012b84 <USBD_LL_DevDisconnected>
}
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b082      	sub	sp, #8
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d13c      	bne.n	80174ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017474:	4a20      	ldr	r2, [pc, #128]	@ (80174f8 <USBD_LL_Init+0x94>)
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	4a1e      	ldr	r2, [pc, #120]	@ (80174f8 <USBD_LL_Init+0x94>)
 8017480:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017484:	4b1c      	ldr	r3, [pc, #112]	@ (80174f8 <USBD_LL_Init+0x94>)
 8017486:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801748a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801748c:	4b1a      	ldr	r3, [pc, #104]	@ (80174f8 <USBD_LL_Init+0x94>)
 801748e:	2204      	movs	r2, #4
 8017490:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017492:	4b19      	ldr	r3, [pc, #100]	@ (80174f8 <USBD_LL_Init+0x94>)
 8017494:	2202      	movs	r2, #2
 8017496:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017498:	4b17      	ldr	r3, [pc, #92]	@ (80174f8 <USBD_LL_Init+0x94>)
 801749a:	2200      	movs	r2, #0
 801749c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801749e:	4b16      	ldr	r3, [pc, #88]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174a0:	2202      	movs	r2, #2
 80174a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80174a4:	4b14      	ldr	r3, [pc, #80]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174a6:	2200      	movs	r2, #0
 80174a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80174aa:	4b13      	ldr	r3, [pc, #76]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174ac:	2200      	movs	r2, #0
 80174ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80174b0:	4b11      	ldr	r3, [pc, #68]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174b2:	2200      	movs	r2, #0
 80174b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80174b6:	4b10      	ldr	r3, [pc, #64]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174b8:	2200      	movs	r2, #0
 80174ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80174bc:	4b0e      	ldr	r3, [pc, #56]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174be:	2200      	movs	r2, #0
 80174c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80174c2:	480d      	ldr	r0, [pc, #52]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174c4:	f7f4 f817 	bl	800b4f6 <HAL_PCD_Init>
 80174c8:	4603      	mov	r3, r0
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d001      	beq.n	80174d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80174ce:	f7f1 f865 	bl	800859c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80174d2:	2180      	movs	r1, #128	@ 0x80
 80174d4:	4808      	ldr	r0, [pc, #32]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174d6:	f7f5 fa44 	bl	800c962 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80174da:	2240      	movs	r2, #64	@ 0x40
 80174dc:	2100      	movs	r1, #0
 80174de:	4806      	ldr	r0, [pc, #24]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174e0:	f7f5 f9f8 	bl	800c8d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80174e4:	2280      	movs	r2, #128	@ 0x80
 80174e6:	2101      	movs	r1, #1
 80174e8:	4803      	ldr	r0, [pc, #12]	@ (80174f8 <USBD_LL_Init+0x94>)
 80174ea:	f7f5 f9f3 	bl	800c8d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80174ee:	2300      	movs	r3, #0
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}
 80174f8:	2000a98c 	.word	0x2000a98c

080174fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017504:	2300      	movs	r3, #0
 8017506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017508:	2300      	movs	r3, #0
 801750a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017512:	4618      	mov	r0, r3
 8017514:	f7f4 f8fe 	bl	800b714 <HAL_PCD_Start>
 8017518:	4603      	mov	r3, r0
 801751a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801751c:	7bfb      	ldrb	r3, [r7, #15]
 801751e:	4618      	mov	r0, r3
 8017520:	f000 f942 	bl	80177a8 <USBD_Get_USB_Status>
 8017524:	4603      	mov	r3, r0
 8017526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017528:	7bbb      	ldrb	r3, [r7, #14]
}
 801752a:	4618      	mov	r0, r3
 801752c:	3710      	adds	r7, #16
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}

08017532 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017532:	b580      	push	{r7, lr}
 8017534:	b084      	sub	sp, #16
 8017536:	af00      	add	r7, sp, #0
 8017538:	6078      	str	r0, [r7, #4]
 801753a:	4608      	mov	r0, r1
 801753c:	4611      	mov	r1, r2
 801753e:	461a      	mov	r2, r3
 8017540:	4603      	mov	r3, r0
 8017542:	70fb      	strb	r3, [r7, #3]
 8017544:	460b      	mov	r3, r1
 8017546:	70bb      	strb	r3, [r7, #2]
 8017548:	4613      	mov	r3, r2
 801754a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801754c:	2300      	movs	r3, #0
 801754e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017550:	2300      	movs	r3, #0
 8017552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801755a:	78bb      	ldrb	r3, [r7, #2]
 801755c:	883a      	ldrh	r2, [r7, #0]
 801755e:	78f9      	ldrb	r1, [r7, #3]
 8017560:	f7f4 fdd2 	bl	800c108 <HAL_PCD_EP_Open>
 8017564:	4603      	mov	r3, r0
 8017566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017568:	7bfb      	ldrb	r3, [r7, #15]
 801756a:	4618      	mov	r0, r3
 801756c:	f000 f91c 	bl	80177a8 <USBD_Get_USB_Status>
 8017570:	4603      	mov	r3, r0
 8017572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017574:	7bbb      	ldrb	r3, [r7, #14]
}
 8017576:	4618      	mov	r0, r3
 8017578:	3710      	adds	r7, #16
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b084      	sub	sp, #16
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
 8017586:	460b      	mov	r3, r1
 8017588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801758a:	2300      	movs	r3, #0
 801758c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801758e:	2300      	movs	r3, #0
 8017590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017598:	78fa      	ldrb	r2, [r7, #3]
 801759a:	4611      	mov	r1, r2
 801759c:	4618      	mov	r0, r3
 801759e:	f7f4 fe1d 	bl	800c1dc <HAL_PCD_EP_Close>
 80175a2:	4603      	mov	r3, r0
 80175a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175a6:	7bfb      	ldrb	r3, [r7, #15]
 80175a8:	4618      	mov	r0, r3
 80175aa:	f000 f8fd 	bl	80177a8 <USBD_Get_USB_Status>
 80175ae:	4603      	mov	r3, r0
 80175b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	460b      	mov	r3, r1
 80175c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175c8:	2300      	movs	r3, #0
 80175ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175cc:	2300      	movs	r3, #0
 80175ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80175d6:	78fa      	ldrb	r2, [r7, #3]
 80175d8:	4611      	mov	r1, r2
 80175da:	4618      	mov	r0, r3
 80175dc:	f7f4 fed5 	bl	800c38a <HAL_PCD_EP_SetStall>
 80175e0:	4603      	mov	r3, r0
 80175e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175e4:	7bfb      	ldrb	r3, [r7, #15]
 80175e6:	4618      	mov	r0, r3
 80175e8:	f000 f8de 	bl	80177a8 <USBD_Get_USB_Status>
 80175ec:	4603      	mov	r3, r0
 80175ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3710      	adds	r7, #16
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}

080175fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175fa:	b580      	push	{r7, lr}
 80175fc:	b084      	sub	sp, #16
 80175fe:	af00      	add	r7, sp, #0
 8017600:	6078      	str	r0, [r7, #4]
 8017602:	460b      	mov	r3, r1
 8017604:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017606:	2300      	movs	r3, #0
 8017608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801760a:	2300      	movs	r3, #0
 801760c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017614:	78fa      	ldrb	r2, [r7, #3]
 8017616:	4611      	mov	r1, r2
 8017618:	4618      	mov	r0, r3
 801761a:	f7f4 ff19 	bl	800c450 <HAL_PCD_EP_ClrStall>
 801761e:	4603      	mov	r3, r0
 8017620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017622:	7bfb      	ldrb	r3, [r7, #15]
 8017624:	4618      	mov	r0, r3
 8017626:	f000 f8bf 	bl	80177a8 <USBD_Get_USB_Status>
 801762a:	4603      	mov	r3, r0
 801762c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801762e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017630:	4618      	mov	r0, r3
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017638:	b480      	push	{r7}
 801763a:	b085      	sub	sp, #20
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	460b      	mov	r3, r1
 8017642:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801764a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801764c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017650:	2b00      	cmp	r3, #0
 8017652:	da0b      	bge.n	801766c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017654:	78fb      	ldrb	r3, [r7, #3]
 8017656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801765a:	68f9      	ldr	r1, [r7, #12]
 801765c:	4613      	mov	r3, r2
 801765e:	00db      	lsls	r3, r3, #3
 8017660:	4413      	add	r3, r2
 8017662:	009b      	lsls	r3, r3, #2
 8017664:	440b      	add	r3, r1
 8017666:	3316      	adds	r3, #22
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	e00b      	b.n	8017684 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801766c:	78fb      	ldrb	r3, [r7, #3]
 801766e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017672:	68f9      	ldr	r1, [r7, #12]
 8017674:	4613      	mov	r3, r2
 8017676:	00db      	lsls	r3, r3, #3
 8017678:	4413      	add	r3, r2
 801767a:	009b      	lsls	r3, r3, #2
 801767c:	440b      	add	r3, r1
 801767e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017682:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017684:	4618      	mov	r0, r3
 8017686:	3714      	adds	r7, #20
 8017688:	46bd      	mov	sp, r7
 801768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768e:	4770      	bx	lr

08017690 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b084      	sub	sp, #16
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	460b      	mov	r3, r1
 801769a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801769c:	2300      	movs	r3, #0
 801769e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176a0:	2300      	movs	r3, #0
 80176a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80176aa:	78fa      	ldrb	r2, [r7, #3]
 80176ac:	4611      	mov	r1, r2
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7f4 fd06 	bl	800c0c0 <HAL_PCD_SetAddress>
 80176b4:	4603      	mov	r3, r0
 80176b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176b8:	7bfb      	ldrb	r3, [r7, #15]
 80176ba:	4618      	mov	r0, r3
 80176bc:	f000 f874 	bl	80177a8 <USBD_Get_USB_Status>
 80176c0:	4603      	mov	r3, r0
 80176c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3710      	adds	r7, #16
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}

080176ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80176ce:	b580      	push	{r7, lr}
 80176d0:	b086      	sub	sp, #24
 80176d2:	af00      	add	r7, sp, #0
 80176d4:	60f8      	str	r0, [r7, #12]
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	603b      	str	r3, [r7, #0]
 80176da:	460b      	mov	r3, r1
 80176dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176de:	2300      	movs	r3, #0
 80176e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176e2:	2300      	movs	r3, #0
 80176e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80176ec:	7af9      	ldrb	r1, [r7, #11]
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	687a      	ldr	r2, [r7, #4]
 80176f2:	f7f4 fe10 	bl	800c316 <HAL_PCD_EP_Transmit>
 80176f6:	4603      	mov	r3, r0
 80176f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176fa:	7dfb      	ldrb	r3, [r7, #23]
 80176fc:	4618      	mov	r0, r3
 80176fe:	f000 f853 	bl	80177a8 <USBD_Get_USB_Status>
 8017702:	4603      	mov	r3, r0
 8017704:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017706:	7dbb      	ldrb	r3, [r7, #22]
}
 8017708:	4618      	mov	r0, r3
 801770a:	3718      	adds	r7, #24
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b086      	sub	sp, #24
 8017714:	af00      	add	r7, sp, #0
 8017716:	60f8      	str	r0, [r7, #12]
 8017718:	607a      	str	r2, [r7, #4]
 801771a:	603b      	str	r3, [r7, #0]
 801771c:	460b      	mov	r3, r1
 801771e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017720:	2300      	movs	r3, #0
 8017722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017724:	2300      	movs	r3, #0
 8017726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801772e:	7af9      	ldrb	r1, [r7, #11]
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	f7f4 fd9c 	bl	800c270 <HAL_PCD_EP_Receive>
 8017738:	4603      	mov	r3, r0
 801773a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801773c:	7dfb      	ldrb	r3, [r7, #23]
 801773e:	4618      	mov	r0, r3
 8017740:	f000 f832 	bl	80177a8 <USBD_Get_USB_Status>
 8017744:	4603      	mov	r3, r0
 8017746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017748:	7dbb      	ldrb	r3, [r7, #22]
}
 801774a:	4618      	mov	r0, r3
 801774c:	3718      	adds	r7, #24
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}

08017752 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017752:	b580      	push	{r7, lr}
 8017754:	b082      	sub	sp, #8
 8017756:	af00      	add	r7, sp, #0
 8017758:	6078      	str	r0, [r7, #4]
 801775a:	460b      	mov	r3, r1
 801775c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017764:	78fa      	ldrb	r2, [r7, #3]
 8017766:	4611      	mov	r1, r2
 8017768:	4618      	mov	r0, r3
 801776a:	f7f4 fdbc 	bl	800c2e6 <HAL_PCD_EP_GetRxCount>
 801776e:	4603      	mov	r3, r0
}
 8017770:	4618      	mov	r0, r3
 8017772:	3708      	adds	r7, #8
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}

08017778 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017778:	b480      	push	{r7}
 801777a:	b083      	sub	sp, #12
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017780:	4b03      	ldr	r3, [pc, #12]	@ (8017790 <USBD_static_malloc+0x18>)
}
 8017782:	4618      	mov	r0, r3
 8017784:	370c      	adds	r7, #12
 8017786:	46bd      	mov	sp, r7
 8017788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778c:	4770      	bx	lr
 801778e:	bf00      	nop
 8017790:	2000ae70 	.word	0x2000ae70

08017794 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017794:	b480      	push	{r7}
 8017796:	b083      	sub	sp, #12
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]

}
 801779c:	bf00      	nop
 801779e:	370c      	adds	r7, #12
 80177a0:	46bd      	mov	sp, r7
 80177a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a6:	4770      	bx	lr

080177a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b085      	sub	sp, #20
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4603      	mov	r3, r0
 80177b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177b2:	2300      	movs	r3, #0
 80177b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80177b6:	79fb      	ldrb	r3, [r7, #7]
 80177b8:	2b03      	cmp	r3, #3
 80177ba:	d817      	bhi.n	80177ec <USBD_Get_USB_Status+0x44>
 80177bc:	a201      	add	r2, pc, #4	@ (adr r2, 80177c4 <USBD_Get_USB_Status+0x1c>)
 80177be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177c2:	bf00      	nop
 80177c4:	080177d5 	.word	0x080177d5
 80177c8:	080177db 	.word	0x080177db
 80177cc:	080177e1 	.word	0x080177e1
 80177d0:	080177e7 	.word	0x080177e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	73fb      	strb	r3, [r7, #15]
    break;
 80177d8:	e00b      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80177da:	2303      	movs	r3, #3
 80177dc:	73fb      	strb	r3, [r7, #15]
    break;
 80177de:	e008      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80177e0:	2301      	movs	r3, #1
 80177e2:	73fb      	strb	r3, [r7, #15]
    break;
 80177e4:	e005      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80177e6:	2303      	movs	r3, #3
 80177e8:	73fb      	strb	r3, [r7, #15]
    break;
 80177ea:	e002      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80177ec:	2303      	movs	r3, #3
 80177ee:	73fb      	strb	r3, [r7, #15]
    break;
 80177f0:	bf00      	nop
  }
  return usb_status;
 80177f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3714      	adds	r7, #20
 80177f8:	46bd      	mov	sp, r7
 80177fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fe:	4770      	bx	lr

08017800 <acosf>:
 8017800:	b508      	push	{r3, lr}
 8017802:	ed2d 8b02 	vpush	{d8}
 8017806:	eeb0 8a40 	vmov.f32	s16, s0
 801780a:	f000 faef 	bl	8017dec <__ieee754_acosf>
 801780e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017816:	eef0 8a40 	vmov.f32	s17, s0
 801781a:	d615      	bvs.n	8017848 <acosf+0x48>
 801781c:	eeb0 0a48 	vmov.f32	s0, s16
 8017820:	f000 f9d6 	bl	8017bd0 <fabsf>
 8017824:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017828:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017830:	dd0a      	ble.n	8017848 <acosf+0x48>
 8017832:	f003 fdfd 	bl	801b430 <__errno>
 8017836:	ecbd 8b02 	vpop	{d8}
 801783a:	2321      	movs	r3, #33	@ 0x21
 801783c:	6003      	str	r3, [r0, #0]
 801783e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017842:	4804      	ldr	r0, [pc, #16]	@ (8017854 <acosf+0x54>)
 8017844:	f000 ba28 	b.w	8017c98 <nanf>
 8017848:	eeb0 0a68 	vmov.f32	s0, s17
 801784c:	ecbd 8b02 	vpop	{d8}
 8017850:	bd08      	pop	{r3, pc}
 8017852:	bf00      	nop
 8017854:	08020365 	.word	0x08020365

08017858 <asinf>:
 8017858:	b508      	push	{r3, lr}
 801785a:	ed2d 8b02 	vpush	{d8}
 801785e:	eeb0 8a40 	vmov.f32	s16, s0
 8017862:	f000 fbb9 	bl	8017fd8 <__ieee754_asinf>
 8017866:	eeb4 8a48 	vcmp.f32	s16, s16
 801786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786e:	eef0 8a40 	vmov.f32	s17, s0
 8017872:	d615      	bvs.n	80178a0 <asinf+0x48>
 8017874:	eeb0 0a48 	vmov.f32	s0, s16
 8017878:	f000 f9aa 	bl	8017bd0 <fabsf>
 801787c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017880:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017888:	dd0a      	ble.n	80178a0 <asinf+0x48>
 801788a:	f003 fdd1 	bl	801b430 <__errno>
 801788e:	ecbd 8b02 	vpop	{d8}
 8017892:	2321      	movs	r3, #33	@ 0x21
 8017894:	6003      	str	r3, [r0, #0]
 8017896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801789a:	4804      	ldr	r0, [pc, #16]	@ (80178ac <asinf+0x54>)
 801789c:	f000 b9fc 	b.w	8017c98 <nanf>
 80178a0:	eeb0 0a68 	vmov.f32	s0, s17
 80178a4:	ecbd 8b02 	vpop	{d8}
 80178a8:	bd08      	pop	{r3, pc}
 80178aa:	bf00      	nop
 80178ac:	08020365 	.word	0x08020365

080178b0 <atan2f>:
 80178b0:	f000 bc76 	b.w	80181a0 <__ieee754_atan2f>

080178b4 <powf>:
 80178b4:	b508      	push	{r3, lr}
 80178b6:	ed2d 8b04 	vpush	{d8-d9}
 80178ba:	eeb0 8a60 	vmov.f32	s16, s1
 80178be:	eeb0 9a40 	vmov.f32	s18, s0
 80178c2:	f000 fd0d 	bl	80182e0 <__ieee754_powf>
 80178c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80178ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ce:	eef0 8a40 	vmov.f32	s17, s0
 80178d2:	d63e      	bvs.n	8017952 <powf+0x9e>
 80178d4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80178d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178dc:	d112      	bne.n	8017904 <powf+0x50>
 80178de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80178e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e6:	d039      	beq.n	801795c <powf+0xa8>
 80178e8:	eeb0 0a48 	vmov.f32	s0, s16
 80178ec:	f000 f9be 	bl	8017c6c <finitef>
 80178f0:	b378      	cbz	r0, 8017952 <powf+0x9e>
 80178f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80178f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178fa:	d52a      	bpl.n	8017952 <powf+0x9e>
 80178fc:	f003 fd98 	bl	801b430 <__errno>
 8017900:	2322      	movs	r3, #34	@ 0x22
 8017902:	e014      	b.n	801792e <powf+0x7a>
 8017904:	f000 f9b2 	bl	8017c6c <finitef>
 8017908:	b998      	cbnz	r0, 8017932 <powf+0x7e>
 801790a:	eeb0 0a49 	vmov.f32	s0, s18
 801790e:	f000 f9ad 	bl	8017c6c <finitef>
 8017912:	b170      	cbz	r0, 8017932 <powf+0x7e>
 8017914:	eeb0 0a48 	vmov.f32	s0, s16
 8017918:	f000 f9a8 	bl	8017c6c <finitef>
 801791c:	b148      	cbz	r0, 8017932 <powf+0x7e>
 801791e:	eef4 8a68 	vcmp.f32	s17, s17
 8017922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017926:	d7e9      	bvc.n	80178fc <powf+0x48>
 8017928:	f003 fd82 	bl	801b430 <__errno>
 801792c:	2321      	movs	r3, #33	@ 0x21
 801792e:	6003      	str	r3, [r0, #0]
 8017930:	e00f      	b.n	8017952 <powf+0x9e>
 8017932:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801793a:	d10a      	bne.n	8017952 <powf+0x9e>
 801793c:	eeb0 0a49 	vmov.f32	s0, s18
 8017940:	f000 f994 	bl	8017c6c <finitef>
 8017944:	b128      	cbz	r0, 8017952 <powf+0x9e>
 8017946:	eeb0 0a48 	vmov.f32	s0, s16
 801794a:	f000 f98f 	bl	8017c6c <finitef>
 801794e:	2800      	cmp	r0, #0
 8017950:	d1d4      	bne.n	80178fc <powf+0x48>
 8017952:	eeb0 0a68 	vmov.f32	s0, s17
 8017956:	ecbd 8b04 	vpop	{d8-d9}
 801795a:	bd08      	pop	{r3, pc}
 801795c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017960:	e7f7      	b.n	8017952 <powf+0x9e>
	...

08017964 <sqrtf>:
 8017964:	b508      	push	{r3, lr}
 8017966:	ed2d 8b02 	vpush	{d8}
 801796a:	eeb0 8a40 	vmov.f32	s16, s0
 801796e:	f000 f999 	bl	8017ca4 <__ieee754_sqrtf>
 8017972:	eeb4 8a48 	vcmp.f32	s16, s16
 8017976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801797a:	d60c      	bvs.n	8017996 <sqrtf+0x32>
 801797c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801799c <sqrtf+0x38>
 8017980:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017988:	d505      	bpl.n	8017996 <sqrtf+0x32>
 801798a:	f003 fd51 	bl	801b430 <__errno>
 801798e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017992:	2321      	movs	r3, #33	@ 0x21
 8017994:	6003      	str	r3, [r0, #0]
 8017996:	ecbd 8b02 	vpop	{d8}
 801799a:	bd08      	pop	{r3, pc}
 801799c:	00000000 	.word	0x00000000

080179a0 <atanf>:
 80179a0:	b538      	push	{r3, r4, r5, lr}
 80179a2:	ee10 5a10 	vmov	r5, s0
 80179a6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80179aa:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80179ae:	eef0 7a40 	vmov.f32	s15, s0
 80179b2:	d310      	bcc.n	80179d6 <atanf+0x36>
 80179b4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80179b8:	d904      	bls.n	80179c4 <atanf+0x24>
 80179ba:	ee70 7a00 	vadd.f32	s15, s0, s0
 80179be:	eeb0 0a67 	vmov.f32	s0, s15
 80179c2:	bd38      	pop	{r3, r4, r5, pc}
 80179c4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017afc <atanf+0x15c>
 80179c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017b00 <atanf+0x160>
 80179cc:	2d00      	cmp	r5, #0
 80179ce:	bfc8      	it	gt
 80179d0:	eef0 7a47 	vmovgt.f32	s15, s14
 80179d4:	e7f3      	b.n	80179be <atanf+0x1e>
 80179d6:	4b4b      	ldr	r3, [pc, #300]	@ (8017b04 <atanf+0x164>)
 80179d8:	429c      	cmp	r4, r3
 80179da:	d810      	bhi.n	80179fe <atanf+0x5e>
 80179dc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80179e0:	d20a      	bcs.n	80179f8 <atanf+0x58>
 80179e2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017b08 <atanf+0x168>
 80179e6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80179ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80179ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80179f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f6:	dce2      	bgt.n	80179be <atanf+0x1e>
 80179f8:	f04f 33ff 	mov.w	r3, #4294967295
 80179fc:	e013      	b.n	8017a26 <atanf+0x86>
 80179fe:	f000 f8e7 	bl	8017bd0 <fabsf>
 8017a02:	4b42      	ldr	r3, [pc, #264]	@ (8017b0c <atanf+0x16c>)
 8017a04:	429c      	cmp	r4, r3
 8017a06:	d84f      	bhi.n	8017aa8 <atanf+0x108>
 8017a08:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8017a0c:	429c      	cmp	r4, r3
 8017a0e:	d841      	bhi.n	8017a94 <atanf+0xf4>
 8017a10:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017a14:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017a18:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017a22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a26:	1c5a      	adds	r2, r3, #1
 8017a28:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017a2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017b10 <atanf+0x170>
 8017a30:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017b14 <atanf+0x174>
 8017a34:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8017b18 <atanf+0x178>
 8017a38:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017a3c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017a40:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8017b1c <atanf+0x17c>
 8017a44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017a48:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017b20 <atanf+0x180>
 8017a4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017a50:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017b24 <atanf+0x184>
 8017a54:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017a58:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017b28 <atanf+0x188>
 8017a5c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017a60:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017b2c <atanf+0x18c>
 8017a64:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017a68:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8017b30 <atanf+0x190>
 8017a6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017a70:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8017b34 <atanf+0x194>
 8017a74:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017a78:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8017b38 <atanf+0x198>
 8017a7c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017a80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017a84:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017a88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017a8c:	d121      	bne.n	8017ad2 <atanf+0x132>
 8017a8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a92:	e794      	b.n	80179be <atanf+0x1e>
 8017a94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017a98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017a9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017aa6:	e7be      	b.n	8017a26 <atanf+0x86>
 8017aa8:	4b24      	ldr	r3, [pc, #144]	@ (8017b3c <atanf+0x19c>)
 8017aaa:	429c      	cmp	r4, r3
 8017aac:	d80b      	bhi.n	8017ac6 <atanf+0x126>
 8017aae:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017ab6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017aba:	2302      	movs	r3, #2
 8017abc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017ac4:	e7af      	b.n	8017a26 <atanf+0x86>
 8017ac6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017aca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017ace:	2303      	movs	r3, #3
 8017ad0:	e7a9      	b.n	8017a26 <atanf+0x86>
 8017ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8017b40 <atanf+0x1a0>)
 8017ad4:	491b      	ldr	r1, [pc, #108]	@ (8017b44 <atanf+0x1a4>)
 8017ad6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017ada:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017ade:	edd3 6a00 	vldr	s13, [r3]
 8017ae2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017ae6:	2d00      	cmp	r5, #0
 8017ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017aec:	edd2 7a00 	vldr	s15, [r2]
 8017af0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017af4:	bfb8      	it	lt
 8017af6:	eef1 7a67 	vneglt.f32	s15, s15
 8017afa:	e760      	b.n	80179be <atanf+0x1e>
 8017afc:	bfc90fdb 	.word	0xbfc90fdb
 8017b00:	3fc90fdb 	.word	0x3fc90fdb
 8017b04:	3edfffff 	.word	0x3edfffff
 8017b08:	7149f2ca 	.word	0x7149f2ca
 8017b0c:	3f97ffff 	.word	0x3f97ffff
 8017b10:	3c8569d7 	.word	0x3c8569d7
 8017b14:	3d4bda59 	.word	0x3d4bda59
 8017b18:	bd6ef16b 	.word	0xbd6ef16b
 8017b1c:	3d886b35 	.word	0x3d886b35
 8017b20:	3dba2e6e 	.word	0x3dba2e6e
 8017b24:	3e124925 	.word	0x3e124925
 8017b28:	3eaaaaab 	.word	0x3eaaaaab
 8017b2c:	bd15a221 	.word	0xbd15a221
 8017b30:	bd9d8795 	.word	0xbd9d8795
 8017b34:	bde38e38 	.word	0xbde38e38
 8017b38:	be4ccccd 	.word	0xbe4ccccd
 8017b3c:	401bffff 	.word	0x401bffff
 8017b40:	080204d8 	.word	0x080204d8
 8017b44:	080204c8 	.word	0x080204c8

08017b48 <cosf>:
 8017b48:	ee10 3a10 	vmov	r3, s0
 8017b4c:	b507      	push	{r0, r1, r2, lr}
 8017b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8017bc8 <cosf+0x80>)
 8017b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b54:	4293      	cmp	r3, r2
 8017b56:	d806      	bhi.n	8017b66 <cosf+0x1e>
 8017b58:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017bcc <cosf+0x84>
 8017b5c:	b003      	add	sp, #12
 8017b5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b62:	f000 b8a3 	b.w	8017cac <__kernel_cosf>
 8017b66:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017b6a:	d304      	bcc.n	8017b76 <cosf+0x2e>
 8017b6c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017b70:	b003      	add	sp, #12
 8017b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b76:	4668      	mov	r0, sp
 8017b78:	f000 fe80 	bl	801887c <__ieee754_rem_pio2f>
 8017b7c:	f000 0003 	and.w	r0, r0, #3
 8017b80:	2801      	cmp	r0, #1
 8017b82:	d009      	beq.n	8017b98 <cosf+0x50>
 8017b84:	2802      	cmp	r0, #2
 8017b86:	d010      	beq.n	8017baa <cosf+0x62>
 8017b88:	b9b0      	cbnz	r0, 8017bb8 <cosf+0x70>
 8017b8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b8e:	ed9d 0a00 	vldr	s0, [sp]
 8017b92:	f000 f88b 	bl	8017cac <__kernel_cosf>
 8017b96:	e7eb      	b.n	8017b70 <cosf+0x28>
 8017b98:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b9c:	ed9d 0a00 	vldr	s0, [sp]
 8017ba0:	f000 f8dc 	bl	8017d5c <__kernel_sinf>
 8017ba4:	eeb1 0a40 	vneg.f32	s0, s0
 8017ba8:	e7e2      	b.n	8017b70 <cosf+0x28>
 8017baa:	eddd 0a01 	vldr	s1, [sp, #4]
 8017bae:	ed9d 0a00 	vldr	s0, [sp]
 8017bb2:	f000 f87b 	bl	8017cac <__kernel_cosf>
 8017bb6:	e7f5      	b.n	8017ba4 <cosf+0x5c>
 8017bb8:	eddd 0a01 	vldr	s1, [sp, #4]
 8017bbc:	ed9d 0a00 	vldr	s0, [sp]
 8017bc0:	2001      	movs	r0, #1
 8017bc2:	f000 f8cb 	bl	8017d5c <__kernel_sinf>
 8017bc6:	e7d3      	b.n	8017b70 <cosf+0x28>
 8017bc8:	3f490fd8 	.word	0x3f490fd8
 8017bcc:	00000000 	.word	0x00000000

08017bd0 <fabsf>:
 8017bd0:	ee10 3a10 	vmov	r3, s0
 8017bd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017bd8:	ee00 3a10 	vmov	s0, r3
 8017bdc:	4770      	bx	lr
	...

08017be0 <sinf>:
 8017be0:	ee10 3a10 	vmov	r3, s0
 8017be4:	b507      	push	{r0, r1, r2, lr}
 8017be6:	4a1f      	ldr	r2, [pc, #124]	@ (8017c64 <sinf+0x84>)
 8017be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d807      	bhi.n	8017c00 <sinf+0x20>
 8017bf0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017c68 <sinf+0x88>
 8017bf4:	2000      	movs	r0, #0
 8017bf6:	b003      	add	sp, #12
 8017bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bfc:	f000 b8ae 	b.w	8017d5c <__kernel_sinf>
 8017c00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017c04:	d304      	bcc.n	8017c10 <sinf+0x30>
 8017c06:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017c0a:	b003      	add	sp, #12
 8017c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c10:	4668      	mov	r0, sp
 8017c12:	f000 fe33 	bl	801887c <__ieee754_rem_pio2f>
 8017c16:	f000 0003 	and.w	r0, r0, #3
 8017c1a:	2801      	cmp	r0, #1
 8017c1c:	d00a      	beq.n	8017c34 <sinf+0x54>
 8017c1e:	2802      	cmp	r0, #2
 8017c20:	d00f      	beq.n	8017c42 <sinf+0x62>
 8017c22:	b9c0      	cbnz	r0, 8017c56 <sinf+0x76>
 8017c24:	eddd 0a01 	vldr	s1, [sp, #4]
 8017c28:	ed9d 0a00 	vldr	s0, [sp]
 8017c2c:	2001      	movs	r0, #1
 8017c2e:	f000 f895 	bl	8017d5c <__kernel_sinf>
 8017c32:	e7ea      	b.n	8017c0a <sinf+0x2a>
 8017c34:	eddd 0a01 	vldr	s1, [sp, #4]
 8017c38:	ed9d 0a00 	vldr	s0, [sp]
 8017c3c:	f000 f836 	bl	8017cac <__kernel_cosf>
 8017c40:	e7e3      	b.n	8017c0a <sinf+0x2a>
 8017c42:	eddd 0a01 	vldr	s1, [sp, #4]
 8017c46:	ed9d 0a00 	vldr	s0, [sp]
 8017c4a:	2001      	movs	r0, #1
 8017c4c:	f000 f886 	bl	8017d5c <__kernel_sinf>
 8017c50:	eeb1 0a40 	vneg.f32	s0, s0
 8017c54:	e7d9      	b.n	8017c0a <sinf+0x2a>
 8017c56:	eddd 0a01 	vldr	s1, [sp, #4]
 8017c5a:	ed9d 0a00 	vldr	s0, [sp]
 8017c5e:	f000 f825 	bl	8017cac <__kernel_cosf>
 8017c62:	e7f5      	b.n	8017c50 <sinf+0x70>
 8017c64:	3f490fd8 	.word	0x3f490fd8
 8017c68:	00000000 	.word	0x00000000

08017c6c <finitef>:
 8017c6c:	ee10 3a10 	vmov	r3, s0
 8017c70:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017c74:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017c78:	bfac      	ite	ge
 8017c7a:	2000      	movge	r0, #0
 8017c7c:	2001      	movlt	r0, #1
 8017c7e:	4770      	bx	lr

08017c80 <copysignf>:
 8017c80:	ee10 2a10 	vmov	r2, s0
 8017c84:	ee10 3a90 	vmov	r3, s1
 8017c88:	f362 031e 	bfi	r3, r2, #0, #31
 8017c8c:	ee00 3a90 	vmov	s1, r3
 8017c90:	eeb0 0a60 	vmov.f32	s0, s1
 8017c94:	4770      	bx	lr
	...

08017c98 <nanf>:
 8017c98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017ca0 <nanf+0x8>
 8017c9c:	4770      	bx	lr
 8017c9e:	bf00      	nop
 8017ca0:	7fc00000 	.word	0x7fc00000

08017ca4 <__ieee754_sqrtf>:
 8017ca4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017ca8:	4770      	bx	lr
	...

08017cac <__kernel_cosf>:
 8017cac:	ee10 3a10 	vmov	r3, s0
 8017cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017cb4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017cb8:	eef0 6a40 	vmov.f32	s13, s0
 8017cbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017cc0:	d204      	bcs.n	8017ccc <__kernel_cosf+0x20>
 8017cc2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8017cc6:	ee17 2a90 	vmov	r2, s15
 8017cca:	b342      	cbz	r2, 8017d1e <__kernel_cosf+0x72>
 8017ccc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017cd0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8017d3c <__kernel_cosf+0x90>
 8017cd4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8017d40 <__kernel_cosf+0x94>
 8017cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8017d44 <__kernel_cosf+0x98>)
 8017cda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017d48 <__kernel_cosf+0x9c>
 8017ce4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017ce8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8017d4c <__kernel_cosf+0xa0>
 8017cec:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017cf0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017d50 <__kernel_cosf+0xa4>
 8017cf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017cf8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8017d54 <__kernel_cosf+0xa8>
 8017cfc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017d00:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8017d04:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017d08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017d0c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8017d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d14:	d804      	bhi.n	8017d20 <__kernel_cosf+0x74>
 8017d16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017d1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017d1e:	4770      	bx	lr
 8017d20:	4a0d      	ldr	r2, [pc, #52]	@ (8017d58 <__kernel_cosf+0xac>)
 8017d22:	4293      	cmp	r3, r2
 8017d24:	bf9a      	itte	ls
 8017d26:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8017d2a:	ee07 3a10 	vmovls	s14, r3
 8017d2e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8017d32:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017d36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017d3a:	e7ec      	b.n	8017d16 <__kernel_cosf+0x6a>
 8017d3c:	ad47d74e 	.word	0xad47d74e
 8017d40:	310f74f6 	.word	0x310f74f6
 8017d44:	3e999999 	.word	0x3e999999
 8017d48:	b493f27c 	.word	0xb493f27c
 8017d4c:	37d00d01 	.word	0x37d00d01
 8017d50:	bab60b61 	.word	0xbab60b61
 8017d54:	3d2aaaab 	.word	0x3d2aaaab
 8017d58:	3f480000 	.word	0x3f480000

08017d5c <__kernel_sinf>:
 8017d5c:	ee10 3a10 	vmov	r3, s0
 8017d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017d64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017d68:	d204      	bcs.n	8017d74 <__kernel_sinf+0x18>
 8017d6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017d6e:	ee17 3a90 	vmov	r3, s15
 8017d72:	b35b      	cbz	r3, 8017dcc <__kernel_sinf+0x70>
 8017d74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017d78:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017dd0 <__kernel_sinf+0x74>
 8017d7c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8017dd4 <__kernel_sinf+0x78>
 8017d80:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017d84:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8017dd8 <__kernel_sinf+0x7c>
 8017d88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017d8c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017ddc <__kernel_sinf+0x80>
 8017d90:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017d94:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017de0 <__kernel_sinf+0x84>
 8017d98:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017d9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017da0:	b930      	cbnz	r0, 8017db0 <__kernel_sinf+0x54>
 8017da2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8017de4 <__kernel_sinf+0x88>
 8017da6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017daa:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017dae:	4770      	bx	lr
 8017db0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017db4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017db8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017dbc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017dc0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017de8 <__kernel_sinf+0x8c>
 8017dc4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017dc8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017dcc:	4770      	bx	lr
 8017dce:	bf00      	nop
 8017dd0:	2f2ec9d3 	.word	0x2f2ec9d3
 8017dd4:	b2d72f34 	.word	0xb2d72f34
 8017dd8:	3638ef1b 	.word	0x3638ef1b
 8017ddc:	b9500d01 	.word	0xb9500d01
 8017de0:	3c088889 	.word	0x3c088889
 8017de4:	be2aaaab 	.word	0xbe2aaaab
 8017de8:	3e2aaaab 	.word	0x3e2aaaab

08017dec <__ieee754_acosf>:
 8017dec:	b508      	push	{r3, lr}
 8017dee:	ee10 3a10 	vmov	r3, s0
 8017df2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8017df6:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8017dfa:	ed2d 8b0c 	vpush	{d8-d13}
 8017dfe:	d10a      	bne.n	8017e16 <__ieee754_acosf+0x2a>
 8017e00:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8017f94 <__ieee754_acosf+0x1a8>
 8017e04:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8017f98 <__ieee754_acosf+0x1ac>
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	bfc8      	it	gt
 8017e0c:	eeb0 0a67 	vmovgt.f32	s0, s15
 8017e10:	ecbd 8b0c 	vpop	{d8-d13}
 8017e14:	bd08      	pop	{r3, pc}
 8017e16:	d904      	bls.n	8017e22 <__ieee754_acosf+0x36>
 8017e18:	ee30 8a40 	vsub.f32	s16, s0, s0
 8017e1c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8017e20:	e7f6      	b.n	8017e10 <__ieee754_acosf+0x24>
 8017e22:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8017e26:	d23c      	bcs.n	8017ea2 <__ieee754_acosf+0xb6>
 8017e28:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8017e2c:	f240 80af 	bls.w	8017f8e <__ieee754_acosf+0x1a2>
 8017e30:	ee60 7a00 	vmul.f32	s15, s0, s0
 8017e34:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8017f9c <__ieee754_acosf+0x1b0>
 8017e38:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8017fa0 <__ieee754_acosf+0x1b4>
 8017e3c:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8017fa4 <__ieee754_acosf+0x1b8>
 8017e40:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017e44:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8017fa8 <__ieee754_acosf+0x1bc>
 8017e48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017e4c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8017fac <__ieee754_acosf+0x1c0>
 8017e50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017e54:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8017fb0 <__ieee754_acosf+0x1c4>
 8017e58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017e5c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8017fb4 <__ieee754_acosf+0x1c8>
 8017e60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017e64:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8017fb8 <__ieee754_acosf+0x1cc>
 8017e68:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8017e6c:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8017fbc <__ieee754_acosf+0x1d0>
 8017e70:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017e74:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8017fc0 <__ieee754_acosf+0x1d4>
 8017e78:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8017e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017e80:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e88:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8017fc4 <__ieee754_acosf+0x1d8>
 8017e8c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8017e90:	eee0 7a46 	vfms.f32	s15, s0, s12
 8017e94:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017e98:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8017fc8 <__ieee754_acosf+0x1dc>
 8017e9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017ea0:	e7b6      	b.n	8017e10 <__ieee754_acosf+0x24>
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	eddf da3d 	vldr	s27, [pc, #244]	@ 8017f9c <__ieee754_acosf+0x1b0>
 8017ea8:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8017fa0 <__ieee754_acosf+0x1b4>
 8017eac:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8017fa8 <__ieee754_acosf+0x1bc>
 8017eb0:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8017fac <__ieee754_acosf+0x1c0>
 8017eb4:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8017fb0 <__ieee754_acosf+0x1c4>
 8017eb8:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8017fb4 <__ieee754_acosf+0x1c8>
 8017ebc:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8017fb8 <__ieee754_acosf+0x1cc>
 8017ec0:	eddf aa38 	vldr	s21, [pc, #224]	@ 8017fa4 <__ieee754_acosf+0x1b8>
 8017ec4:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8017fbc <__ieee754_acosf+0x1d0>
 8017ec8:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8017fc0 <__ieee754_acosf+0x1d4>
 8017ecc:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8017ed0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017ed4:	da28      	bge.n	8017f28 <__ieee754_acosf+0x13c>
 8017ed6:	ee30 8a09 	vadd.f32	s16, s0, s18
 8017eda:	ee28 0a27 	vmul.f32	s0, s16, s15
 8017ede:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8017ee2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8017ee6:	eeac ca80 	vfma.f32	s24, s25, s0
 8017eea:	eeaa aa80 	vfma.f32	s20, s21, s0
 8017eee:	eeec ba00 	vfma.f32	s23, s24, s0
 8017ef2:	eeea 9a00 	vfma.f32	s19, s20, s0
 8017ef6:	eeab ba80 	vfma.f32	s22, s23, s0
 8017efa:	eea9 9a80 	vfma.f32	s18, s19, s0
 8017efe:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8017f02:	ee68 8a80 	vmul.f32	s17, s17, s0
 8017f06:	f7ff fecd 	bl	8017ca4 <__ieee754_sqrtf>
 8017f0a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8017f0e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8017fcc <__ieee754_acosf+0x1e0>
 8017f12:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017f16:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8017f1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017f1e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8017fd0 <__ieee754_acosf+0x1e4>
 8017f22:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017f26:	e773      	b.n	8017e10 <__ieee754_acosf+0x24>
 8017f28:	ee39 8a40 	vsub.f32	s16, s18, s0
 8017f2c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017f30:	eeb0 0a48 	vmov.f32	s0, s16
 8017f34:	f7ff feb6 	bl	8017ca4 <__ieee754_sqrtf>
 8017f38:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8017f3c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8017f40:	eeac ca88 	vfma.f32	s24, s25, s16
 8017f44:	eeaa aa88 	vfma.f32	s20, s21, s16
 8017f48:	eeec ba08 	vfma.f32	s23, s24, s16
 8017f4c:	ee10 3a10 	vmov	r3, s0
 8017f50:	eeab ba88 	vfma.f32	s22, s23, s16
 8017f54:	f36f 030b 	bfc	r3, #0, #12
 8017f58:	eeea 9a08 	vfma.f32	s19, s20, s16
 8017f5c:	ee07 3a90 	vmov	s15, r3
 8017f60:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8017f64:	eeb0 6a48 	vmov.f32	s12, s16
 8017f68:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8017f6c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8017f70:	ee70 6a27 	vadd.f32	s13, s0, s15
 8017f74:	ee68 8a88 	vmul.f32	s17, s17, s16
 8017f78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8017f7c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8017f80:	eea0 7a26 	vfma.f32	s14, s0, s13
 8017f84:	ee37 0a87 	vadd.f32	s0, s15, s14
 8017f88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017f8c:	e740      	b.n	8017e10 <__ieee754_acosf+0x24>
 8017f8e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8017fd4 <__ieee754_acosf+0x1e8>
 8017f92:	e73d      	b.n	8017e10 <__ieee754_acosf+0x24>
 8017f94:	40490fdb 	.word	0x40490fdb
 8017f98:	00000000 	.word	0x00000000
 8017f9c:	3811ef08 	.word	0x3811ef08
 8017fa0:	3a4f7f04 	.word	0x3a4f7f04
 8017fa4:	bf303361 	.word	0xbf303361
 8017fa8:	bd241146 	.word	0xbd241146
 8017fac:	3e4e0aa8 	.word	0x3e4e0aa8
 8017fb0:	bea6b090 	.word	0xbea6b090
 8017fb4:	3e2aaaab 	.word	0x3e2aaaab
 8017fb8:	3d9dc62e 	.word	0x3d9dc62e
 8017fbc:	4001572d 	.word	0x4001572d
 8017fc0:	c019d139 	.word	0xc019d139
 8017fc4:	33a22168 	.word	0x33a22168
 8017fc8:	3fc90fda 	.word	0x3fc90fda
 8017fcc:	b3a22168 	.word	0xb3a22168
 8017fd0:	40490fda 	.word	0x40490fda
 8017fd4:	3fc90fdb 	.word	0x3fc90fdb

08017fd8 <__ieee754_asinf>:
 8017fd8:	b538      	push	{r3, r4, r5, lr}
 8017fda:	ee10 5a10 	vmov	r5, s0
 8017fde:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8017fe2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8017fe6:	ed2d 8b04 	vpush	{d8-d9}
 8017fea:	d10c      	bne.n	8018006 <__ieee754_asinf+0x2e>
 8017fec:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018160 <__ieee754_asinf+0x188>
 8017ff0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8018164 <__ieee754_asinf+0x18c>
 8017ff4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017ff8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8018000:	ecbd 8b04 	vpop	{d8-d9}
 8018004:	bd38      	pop	{r3, r4, r5, pc}
 8018006:	d904      	bls.n	8018012 <__ieee754_asinf+0x3a>
 8018008:	ee70 7a40 	vsub.f32	s15, s0, s0
 801800c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018010:	e7f6      	b.n	8018000 <__ieee754_asinf+0x28>
 8018012:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018016:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801801a:	d20b      	bcs.n	8018034 <__ieee754_asinf+0x5c>
 801801c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8018020:	d252      	bcs.n	80180c8 <__ieee754_asinf+0xf0>
 8018022:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8018168 <__ieee754_asinf+0x190>
 8018026:	ee70 7a27 	vadd.f32	s15, s0, s15
 801802a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801802e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018032:	dce5      	bgt.n	8018000 <__ieee754_asinf+0x28>
 8018034:	f7ff fdcc 	bl	8017bd0 <fabsf>
 8018038:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801803c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018040:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018044:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801816c <__ieee754_asinf+0x194>
 8018048:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8018170 <__ieee754_asinf+0x198>
 801804c:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8018174 <__ieee754_asinf+0x19c>
 8018050:	eea8 7a27 	vfma.f32	s14, s16, s15
 8018054:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8018178 <__ieee754_asinf+0x1a0>
 8018058:	eee7 7a08 	vfma.f32	s15, s14, s16
 801805c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801817c <__ieee754_asinf+0x1a4>
 8018060:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018064:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8018180 <__ieee754_asinf+0x1a8>
 8018068:	eee7 7a08 	vfma.f32	s15, s14, s16
 801806c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018184 <__ieee754_asinf+0x1ac>
 8018070:	eea7 9a88 	vfma.f32	s18, s15, s16
 8018074:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8018188 <__ieee754_asinf+0x1b0>
 8018078:	eee8 7a07 	vfma.f32	s15, s16, s14
 801807c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801818c <__ieee754_asinf+0x1b4>
 8018080:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018084:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8018190 <__ieee754_asinf+0x1b8>
 8018088:	eee7 7a08 	vfma.f32	s15, s14, s16
 801808c:	eeb0 0a48 	vmov.f32	s0, s16
 8018090:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018094:	f7ff fe06 	bl	8017ca4 <__ieee754_sqrtf>
 8018098:	4b3e      	ldr	r3, [pc, #248]	@ (8018194 <__ieee754_asinf+0x1bc>)
 801809a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801809e:	429c      	cmp	r4, r3
 80180a0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80180a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80180a8:	d93d      	bls.n	8018126 <__ieee754_asinf+0x14e>
 80180aa:	eea0 0a06 	vfma.f32	s0, s0, s12
 80180ae:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8018198 <__ieee754_asinf+0x1c0>
 80180b2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80180b6:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8018164 <__ieee754_asinf+0x18c>
 80180ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80180be:	2d00      	cmp	r5, #0
 80180c0:	bfd8      	it	le
 80180c2:	eeb1 0a40 	vnegle.f32	s0, s0
 80180c6:	e79b      	b.n	8018000 <__ieee754_asinf+0x28>
 80180c8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80180cc:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8018170 <__ieee754_asinf+0x198>
 80180d0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801816c <__ieee754_asinf+0x194>
 80180d4:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8018184 <__ieee754_asinf+0x1ac>
 80180d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80180dc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8018178 <__ieee754_asinf+0x1a0>
 80180e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80180e4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801817c <__ieee754_asinf+0x1a4>
 80180e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80180ec:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8018180 <__ieee754_asinf+0x1a8>
 80180f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80180f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8018174 <__ieee754_asinf+0x19c>
 80180f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80180fc:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8018188 <__ieee754_asinf+0x1b0>
 8018100:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018104:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801818c <__ieee754_asinf+0x1b4>
 8018108:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801810c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8018190 <__ieee754_asinf+0x1b8>
 8018110:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018118:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801811c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018120:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018124:	e76c      	b.n	8018000 <__ieee754_asinf+0x28>
 8018126:	ee10 3a10 	vmov	r3, s0
 801812a:	f36f 030b 	bfc	r3, #0, #12
 801812e:	ee07 3a10 	vmov	s14, r3
 8018132:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018136:	ee70 5a00 	vadd.f32	s11, s0, s0
 801813a:	ee30 0a07 	vadd.f32	s0, s0, s14
 801813e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018160 <__ieee754_asinf+0x188>
 8018142:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8018146:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801819c <__ieee754_asinf+0x1c4>
 801814a:	eee5 7a66 	vfms.f32	s15, s10, s13
 801814e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8018152:	eeb0 6a40 	vmov.f32	s12, s0
 8018156:	eea7 6a66 	vfms.f32	s12, s14, s13
 801815a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801815e:	e7ac      	b.n	80180ba <__ieee754_asinf+0xe2>
 8018160:	b33bbd2e 	.word	0xb33bbd2e
 8018164:	3fc90fdb 	.word	0x3fc90fdb
 8018168:	7149f2ca 	.word	0x7149f2ca
 801816c:	3a4f7f04 	.word	0x3a4f7f04
 8018170:	3811ef08 	.word	0x3811ef08
 8018174:	3e2aaaab 	.word	0x3e2aaaab
 8018178:	bd241146 	.word	0xbd241146
 801817c:	3e4e0aa8 	.word	0x3e4e0aa8
 8018180:	bea6b090 	.word	0xbea6b090
 8018184:	3d9dc62e 	.word	0x3d9dc62e
 8018188:	bf303361 	.word	0xbf303361
 801818c:	4001572d 	.word	0x4001572d
 8018190:	c019d139 	.word	0xc019d139
 8018194:	3f799999 	.word	0x3f799999
 8018198:	333bbd2e 	.word	0x333bbd2e
 801819c:	3f490fdb 	.word	0x3f490fdb

080181a0 <__ieee754_atan2f>:
 80181a0:	ee10 2a90 	vmov	r2, s1
 80181a4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80181a8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80181ac:	b510      	push	{r4, lr}
 80181ae:	eef0 7a40 	vmov.f32	s15, s0
 80181b2:	d806      	bhi.n	80181c2 <__ieee754_atan2f+0x22>
 80181b4:	ee10 0a10 	vmov	r0, s0
 80181b8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80181bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80181c0:	d904      	bls.n	80181cc <__ieee754_atan2f+0x2c>
 80181c2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80181c6:	eeb0 0a67 	vmov.f32	s0, s15
 80181ca:	bd10      	pop	{r4, pc}
 80181cc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80181d0:	d103      	bne.n	80181da <__ieee754_atan2f+0x3a>
 80181d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181d6:	f7ff bbe3 	b.w	80179a0 <atanf>
 80181da:	1794      	asrs	r4, r2, #30
 80181dc:	f004 0402 	and.w	r4, r4, #2
 80181e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80181e4:	b943      	cbnz	r3, 80181f8 <__ieee754_atan2f+0x58>
 80181e6:	2c02      	cmp	r4, #2
 80181e8:	d05e      	beq.n	80182a8 <__ieee754_atan2f+0x108>
 80181ea:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80182bc <__ieee754_atan2f+0x11c>
 80181ee:	2c03      	cmp	r4, #3
 80181f0:	bf08      	it	eq
 80181f2:	eef0 7a47 	vmoveq.f32	s15, s14
 80181f6:	e7e6      	b.n	80181c6 <__ieee754_atan2f+0x26>
 80181f8:	b941      	cbnz	r1, 801820c <__ieee754_atan2f+0x6c>
 80181fa:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80182c0 <__ieee754_atan2f+0x120>
 80181fe:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80182c4 <__ieee754_atan2f+0x124>
 8018202:	2800      	cmp	r0, #0
 8018204:	bfa8      	it	ge
 8018206:	eef0 7a47 	vmovge.f32	s15, s14
 801820a:	e7dc      	b.n	80181c6 <__ieee754_atan2f+0x26>
 801820c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018210:	d110      	bne.n	8018234 <__ieee754_atan2f+0x94>
 8018212:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018216:	f104 34ff 	add.w	r4, r4, #4294967295
 801821a:	d107      	bne.n	801822c <__ieee754_atan2f+0x8c>
 801821c:	2c02      	cmp	r4, #2
 801821e:	d846      	bhi.n	80182ae <__ieee754_atan2f+0x10e>
 8018220:	4b29      	ldr	r3, [pc, #164]	@ (80182c8 <__ieee754_atan2f+0x128>)
 8018222:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018226:	edd3 7a00 	vldr	s15, [r3]
 801822a:	e7cc      	b.n	80181c6 <__ieee754_atan2f+0x26>
 801822c:	2c02      	cmp	r4, #2
 801822e:	d841      	bhi.n	80182b4 <__ieee754_atan2f+0x114>
 8018230:	4b26      	ldr	r3, [pc, #152]	@ (80182cc <__ieee754_atan2f+0x12c>)
 8018232:	e7f6      	b.n	8018222 <__ieee754_atan2f+0x82>
 8018234:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018238:	d0df      	beq.n	80181fa <__ieee754_atan2f+0x5a>
 801823a:	1a5b      	subs	r3, r3, r1
 801823c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8018240:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8018244:	da1a      	bge.n	801827c <__ieee754_atan2f+0xdc>
 8018246:	2a00      	cmp	r2, #0
 8018248:	da01      	bge.n	801824e <__ieee754_atan2f+0xae>
 801824a:	313c      	adds	r1, #60	@ 0x3c
 801824c:	db19      	blt.n	8018282 <__ieee754_atan2f+0xe2>
 801824e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018252:	f7ff fcbd 	bl	8017bd0 <fabsf>
 8018256:	f7ff fba3 	bl	80179a0 <atanf>
 801825a:	eef0 7a40 	vmov.f32	s15, s0
 801825e:	2c01      	cmp	r4, #1
 8018260:	d012      	beq.n	8018288 <__ieee754_atan2f+0xe8>
 8018262:	2c02      	cmp	r4, #2
 8018264:	d017      	beq.n	8018296 <__ieee754_atan2f+0xf6>
 8018266:	2c00      	cmp	r4, #0
 8018268:	d0ad      	beq.n	80181c6 <__ieee754_atan2f+0x26>
 801826a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80182d0 <__ieee754_atan2f+0x130>
 801826e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018272:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80182d4 <__ieee754_atan2f+0x134>
 8018276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801827a:	e7a4      	b.n	80181c6 <__ieee754_atan2f+0x26>
 801827c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80182c4 <__ieee754_atan2f+0x124>
 8018280:	e7ed      	b.n	801825e <__ieee754_atan2f+0xbe>
 8018282:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80182d8 <__ieee754_atan2f+0x138>
 8018286:	e7ea      	b.n	801825e <__ieee754_atan2f+0xbe>
 8018288:	ee17 3a90 	vmov	r3, s15
 801828c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8018290:	ee07 3a90 	vmov	s15, r3
 8018294:	e797      	b.n	80181c6 <__ieee754_atan2f+0x26>
 8018296:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80182d0 <__ieee754_atan2f+0x130>
 801829a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801829e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80182d4 <__ieee754_atan2f+0x134>
 80182a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182a6:	e78e      	b.n	80181c6 <__ieee754_atan2f+0x26>
 80182a8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80182d4 <__ieee754_atan2f+0x134>
 80182ac:	e78b      	b.n	80181c6 <__ieee754_atan2f+0x26>
 80182ae:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80182dc <__ieee754_atan2f+0x13c>
 80182b2:	e788      	b.n	80181c6 <__ieee754_atan2f+0x26>
 80182b4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80182d8 <__ieee754_atan2f+0x138>
 80182b8:	e785      	b.n	80181c6 <__ieee754_atan2f+0x26>
 80182ba:	bf00      	nop
 80182bc:	c0490fdb 	.word	0xc0490fdb
 80182c0:	bfc90fdb 	.word	0xbfc90fdb
 80182c4:	3fc90fdb 	.word	0x3fc90fdb
 80182c8:	080204f4 	.word	0x080204f4
 80182cc:	080204e8 	.word	0x080204e8
 80182d0:	33bbbd2e 	.word	0x33bbbd2e
 80182d4:	40490fdb 	.word	0x40490fdb
 80182d8:	00000000 	.word	0x00000000
 80182dc:	3f490fdb 	.word	0x3f490fdb

080182e0 <__ieee754_powf>:
 80182e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182e4:	ee10 4a90 	vmov	r4, s1
 80182e8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80182ec:	ed2d 8b02 	vpush	{d8}
 80182f0:	ee10 6a10 	vmov	r6, s0
 80182f4:	eeb0 8a40 	vmov.f32	s16, s0
 80182f8:	eef0 8a60 	vmov.f32	s17, s1
 80182fc:	d10c      	bne.n	8018318 <__ieee754_powf+0x38>
 80182fe:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018302:	0076      	lsls	r6, r6, #1
 8018304:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018308:	f240 8274 	bls.w	80187f4 <__ieee754_powf+0x514>
 801830c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018310:	ecbd 8b02 	vpop	{d8}
 8018314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018318:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801831c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8018320:	d802      	bhi.n	8018328 <__ieee754_powf+0x48>
 8018322:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018326:	d908      	bls.n	801833a <__ieee754_powf+0x5a>
 8018328:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801832c:	d1ee      	bne.n	801830c <__ieee754_powf+0x2c>
 801832e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8018332:	0064      	lsls	r4, r4, #1
 8018334:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8018338:	e7e6      	b.n	8018308 <__ieee754_powf+0x28>
 801833a:	2e00      	cmp	r6, #0
 801833c:	da1f      	bge.n	801837e <__ieee754_powf+0x9e>
 801833e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8018342:	f080 8260 	bcs.w	8018806 <__ieee754_powf+0x526>
 8018346:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801834a:	d32f      	bcc.n	80183ac <__ieee754_powf+0xcc>
 801834c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8018350:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8018354:	fa49 f503 	asr.w	r5, r9, r3
 8018358:	fa05 f303 	lsl.w	r3, r5, r3
 801835c:	454b      	cmp	r3, r9
 801835e:	d123      	bne.n	80183a8 <__ieee754_powf+0xc8>
 8018360:	f005 0501 	and.w	r5, r5, #1
 8018364:	f1c5 0502 	rsb	r5, r5, #2
 8018368:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801836c:	d11f      	bne.n	80183ae <__ieee754_powf+0xce>
 801836e:	2c00      	cmp	r4, #0
 8018370:	f280 8246 	bge.w	8018800 <__ieee754_powf+0x520>
 8018374:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018378:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801837c:	e7c8      	b.n	8018310 <__ieee754_powf+0x30>
 801837e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018382:	d111      	bne.n	80183a8 <__ieee754_powf+0xc8>
 8018384:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8018388:	f000 8234 	beq.w	80187f4 <__ieee754_powf+0x514>
 801838c:	d906      	bls.n	801839c <__ieee754_powf+0xbc>
 801838e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80186a4 <__ieee754_powf+0x3c4>
 8018392:	2c00      	cmp	r4, #0
 8018394:	bfa8      	it	ge
 8018396:	eeb0 0a68 	vmovge.f32	s0, s17
 801839a:	e7b9      	b.n	8018310 <__ieee754_powf+0x30>
 801839c:	2c00      	cmp	r4, #0
 801839e:	f280 822c 	bge.w	80187fa <__ieee754_powf+0x51a>
 80183a2:	eeb1 0a68 	vneg.f32	s0, s17
 80183a6:	e7b3      	b.n	8018310 <__ieee754_powf+0x30>
 80183a8:	2500      	movs	r5, #0
 80183aa:	e7dd      	b.n	8018368 <__ieee754_powf+0x88>
 80183ac:	2500      	movs	r5, #0
 80183ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80183b2:	d102      	bne.n	80183ba <__ieee754_powf+0xda>
 80183b4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80183b8:	e7aa      	b.n	8018310 <__ieee754_powf+0x30>
 80183ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80183be:	f040 8227 	bne.w	8018810 <__ieee754_powf+0x530>
 80183c2:	2e00      	cmp	r6, #0
 80183c4:	f2c0 8224 	blt.w	8018810 <__ieee754_powf+0x530>
 80183c8:	eeb0 0a48 	vmov.f32	s0, s16
 80183cc:	ecbd 8b02 	vpop	{d8}
 80183d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183d4:	f7ff bc66 	b.w	8017ca4 <__ieee754_sqrtf>
 80183d8:	2d01      	cmp	r5, #1
 80183da:	d199      	bne.n	8018310 <__ieee754_powf+0x30>
 80183dc:	eeb1 0a40 	vneg.f32	s0, s0
 80183e0:	e796      	b.n	8018310 <__ieee754_powf+0x30>
 80183e2:	0ff0      	lsrs	r0, r6, #31
 80183e4:	3801      	subs	r0, #1
 80183e6:	ea55 0300 	orrs.w	r3, r5, r0
 80183ea:	d104      	bne.n	80183f6 <__ieee754_powf+0x116>
 80183ec:	ee38 8a48 	vsub.f32	s16, s16, s16
 80183f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80183f4:	e78c      	b.n	8018310 <__ieee754_powf+0x30>
 80183f6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80183fa:	d96d      	bls.n	80184d8 <__ieee754_powf+0x1f8>
 80183fc:	4baa      	ldr	r3, [pc, #680]	@ (80186a8 <__ieee754_powf+0x3c8>)
 80183fe:	4598      	cmp	r8, r3
 8018400:	d808      	bhi.n	8018414 <__ieee754_powf+0x134>
 8018402:	2c00      	cmp	r4, #0
 8018404:	da0b      	bge.n	801841e <__ieee754_powf+0x13e>
 8018406:	2000      	movs	r0, #0
 8018408:	ecbd 8b02 	vpop	{d8}
 801840c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018410:	f000 bbea 	b.w	8018be8 <__math_oflowf>
 8018414:	4ba5      	ldr	r3, [pc, #660]	@ (80186ac <__ieee754_powf+0x3cc>)
 8018416:	4598      	cmp	r8, r3
 8018418:	d908      	bls.n	801842c <__ieee754_powf+0x14c>
 801841a:	2c00      	cmp	r4, #0
 801841c:	dcf3      	bgt.n	8018406 <__ieee754_powf+0x126>
 801841e:	2000      	movs	r0, #0
 8018420:	ecbd 8b02 	vpop	{d8}
 8018424:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018428:	f000 bbd8 	b.w	8018bdc <__math_uflowf>
 801842c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018430:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018434:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80186b0 <__ieee754_powf+0x3d0>
 8018438:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801843c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018440:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018444:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018448:	ee20 7a00 	vmul.f32	s14, s0, s0
 801844c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80186b4 <__ieee754_powf+0x3d4>
 8018450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018454:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80186b8 <__ieee754_powf+0x3d8>
 8018458:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801845c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80186bc <__ieee754_powf+0x3dc>
 8018460:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018464:	eeb0 7a67 	vmov.f32	s14, s15
 8018468:	eea0 7a26 	vfma.f32	s14, s0, s13
 801846c:	ee17 3a10 	vmov	r3, s14
 8018470:	f36f 030b 	bfc	r3, #0, #12
 8018474:	ee07 3a10 	vmov	s14, r3
 8018478:	eeb0 6a47 	vmov.f32	s12, s14
 801847c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8018480:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018484:	3d01      	subs	r5, #1
 8018486:	4305      	orrs	r5, r0
 8018488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801848c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018490:	f36f 040b 	bfc	r4, #0, #12
 8018494:	bf18      	it	ne
 8018496:	eeb0 8a66 	vmovne.f32	s16, s13
 801849a:	ee06 4a90 	vmov	s13, r4
 801849e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80184a2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80184a6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80184aa:	eee6 0a07 	vfma.f32	s1, s12, s14
 80184ae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80184b2:	ee17 1a10 	vmov	r1, s14
 80184b6:	2900      	cmp	r1, #0
 80184b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80184bc:	f340 80dd 	ble.w	801867a <__ieee754_powf+0x39a>
 80184c0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80184c4:	f240 80ca 	bls.w	801865c <__ieee754_powf+0x37c>
 80184c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80184cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d0:	bf4c      	ite	mi
 80184d2:	2001      	movmi	r0, #1
 80184d4:	2000      	movpl	r0, #0
 80184d6:	e797      	b.n	8018408 <__ieee754_powf+0x128>
 80184d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80184dc:	bf01      	itttt	eq
 80184de:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80186c0 <__ieee754_powf+0x3e0>
 80184e2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80184e6:	f06f 0317 	mvneq.w	r3, #23
 80184ea:	ee17 7a90 	vmoveq	r7, s15
 80184ee:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80184f2:	bf18      	it	ne
 80184f4:	2300      	movne	r3, #0
 80184f6:	3a7f      	subs	r2, #127	@ 0x7f
 80184f8:	441a      	add	r2, r3
 80184fa:	4b72      	ldr	r3, [pc, #456]	@ (80186c4 <__ieee754_powf+0x3e4>)
 80184fc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018500:	429f      	cmp	r7, r3
 8018502:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018506:	dd06      	ble.n	8018516 <__ieee754_powf+0x236>
 8018508:	4b6f      	ldr	r3, [pc, #444]	@ (80186c8 <__ieee754_powf+0x3e8>)
 801850a:	429f      	cmp	r7, r3
 801850c:	f340 80a4 	ble.w	8018658 <__ieee754_powf+0x378>
 8018510:	3201      	adds	r2, #1
 8018512:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018516:	2600      	movs	r6, #0
 8018518:	4b6c      	ldr	r3, [pc, #432]	@ (80186cc <__ieee754_powf+0x3ec>)
 801851a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801851e:	ee07 1a10 	vmov	s14, r1
 8018522:	edd3 5a00 	vldr	s11, [r3]
 8018526:	4b6a      	ldr	r3, [pc, #424]	@ (80186d0 <__ieee754_powf+0x3f0>)
 8018528:	ee75 7a87 	vadd.f32	s15, s11, s14
 801852c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018530:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018534:	1049      	asrs	r1, r1, #1
 8018536:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801853a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801853e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8018542:	ee37 6a65 	vsub.f32	s12, s14, s11
 8018546:	ee07 1a90 	vmov	s15, r1
 801854a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801854e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8018552:	ee15 7a10 	vmov	r7, s10
 8018556:	401f      	ands	r7, r3
 8018558:	ee06 7a90 	vmov	s13, r7
 801855c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018560:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018564:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018568:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801856c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80186d4 <__ieee754_powf+0x3f4>
 8018570:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80186d8 <__ieee754_powf+0x3f8>
 8018574:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018578:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80186dc <__ieee754_powf+0x3fc>
 801857c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018580:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80186b0 <__ieee754_powf+0x3d0>
 8018584:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018588:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80186e0 <__ieee754_powf+0x400>
 801858c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018590:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80186e4 <__ieee754_powf+0x404>
 8018594:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018598:	eee7 5a27 	vfma.f32	s11, s14, s15
 801859c:	ee35 7a26 	vadd.f32	s14, s10, s13
 80185a0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80185a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80185a8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80185ac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80185b0:	eef0 5a67 	vmov.f32	s11, s15
 80185b4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80185b8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80185bc:	ee15 1a90 	vmov	r1, s11
 80185c0:	4019      	ands	r1, r3
 80185c2:	ee05 1a90 	vmov	s11, r1
 80185c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80185ca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80185ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80185d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80185d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80185da:	eeb0 6a67 	vmov.f32	s12, s15
 80185de:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80185e2:	ee16 1a10 	vmov	r1, s12
 80185e6:	4019      	ands	r1, r3
 80185e8:	ee06 1a10 	vmov	s12, r1
 80185ec:	eeb0 7a46 	vmov.f32	s14, s12
 80185f0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80185f4:	493c      	ldr	r1, [pc, #240]	@ (80186e8 <__ieee754_powf+0x408>)
 80185f6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80185fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80185fe:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80186ec <__ieee754_powf+0x40c>
 8018602:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80186f0 <__ieee754_powf+0x410>
 8018606:	ee67 7a87 	vmul.f32	s15, s15, s14
 801860a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80186f4 <__ieee754_powf+0x414>
 801860e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018612:	ed91 7a00 	vldr	s14, [r1]
 8018616:	ee77 7a87 	vadd.f32	s15, s15, s14
 801861a:	ee07 2a10 	vmov	s14, r2
 801861e:	4a36      	ldr	r2, [pc, #216]	@ (80186f8 <__ieee754_powf+0x418>)
 8018620:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018624:	eeb0 7a67 	vmov.f32	s14, s15
 8018628:	eea6 7a25 	vfma.f32	s14, s12, s11
 801862c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8018630:	ed92 5a00 	vldr	s10, [r2]
 8018634:	ee37 7a05 	vadd.f32	s14, s14, s10
 8018638:	ee37 7a26 	vadd.f32	s14, s14, s13
 801863c:	ee17 2a10 	vmov	r2, s14
 8018640:	401a      	ands	r2, r3
 8018642:	ee07 2a10 	vmov	s14, r2
 8018646:	ee77 6a66 	vsub.f32	s13, s14, s13
 801864a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801864e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018652:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018656:	e715      	b.n	8018484 <__ieee754_powf+0x1a4>
 8018658:	2601      	movs	r6, #1
 801865a:	e75d      	b.n	8018518 <__ieee754_powf+0x238>
 801865c:	d152      	bne.n	8018704 <__ieee754_powf+0x424>
 801865e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80186fc <__ieee754_powf+0x41c>
 8018662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018666:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801866a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801866e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018672:	f73f af29 	bgt.w	80184c8 <__ieee754_powf+0x1e8>
 8018676:	2386      	movs	r3, #134	@ 0x86
 8018678:	e048      	b.n	801870c <__ieee754_powf+0x42c>
 801867a:	4a21      	ldr	r2, [pc, #132]	@ (8018700 <__ieee754_powf+0x420>)
 801867c:	4293      	cmp	r3, r2
 801867e:	d907      	bls.n	8018690 <__ieee754_powf+0x3b0>
 8018680:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018688:	bf4c      	ite	mi
 801868a:	2001      	movmi	r0, #1
 801868c:	2000      	movpl	r0, #0
 801868e:	e6c7      	b.n	8018420 <__ieee754_powf+0x140>
 8018690:	d138      	bne.n	8018704 <__ieee754_powf+0x424>
 8018692:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018696:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869e:	dbea      	blt.n	8018676 <__ieee754_powf+0x396>
 80186a0:	e7ee      	b.n	8018680 <__ieee754_powf+0x3a0>
 80186a2:	bf00      	nop
 80186a4:	00000000 	.word	0x00000000
 80186a8:	3f7ffff3 	.word	0x3f7ffff3
 80186ac:	3f800007 	.word	0x3f800007
 80186b0:	3eaaaaab 	.word	0x3eaaaaab
 80186b4:	3fb8aa00 	.word	0x3fb8aa00
 80186b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80186bc:	36eca570 	.word	0x36eca570
 80186c0:	4b800000 	.word	0x4b800000
 80186c4:	001cc471 	.word	0x001cc471
 80186c8:	005db3d6 	.word	0x005db3d6
 80186cc:	08020510 	.word	0x08020510
 80186d0:	fffff000 	.word	0xfffff000
 80186d4:	3e6c3255 	.word	0x3e6c3255
 80186d8:	3e53f142 	.word	0x3e53f142
 80186dc:	3e8ba305 	.word	0x3e8ba305
 80186e0:	3edb6db7 	.word	0x3edb6db7
 80186e4:	3f19999a 	.word	0x3f19999a
 80186e8:	08020500 	.word	0x08020500
 80186ec:	3f76384f 	.word	0x3f76384f
 80186f0:	3f763800 	.word	0x3f763800
 80186f4:	369dc3a0 	.word	0x369dc3a0
 80186f8:	08020508 	.word	0x08020508
 80186fc:	3338aa3c 	.word	0x3338aa3c
 8018700:	43160000 	.word	0x43160000
 8018704:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018708:	d96f      	bls.n	80187ea <__ieee754_powf+0x50a>
 801870a:	15db      	asrs	r3, r3, #23
 801870c:	3b7e      	subs	r3, #126	@ 0x7e
 801870e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018712:	4118      	asrs	r0, r3
 8018714:	4408      	add	r0, r1
 8018716:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801871a:	4a4e      	ldr	r2, [pc, #312]	@ (8018854 <__ieee754_powf+0x574>)
 801871c:	3b7f      	subs	r3, #127	@ 0x7f
 801871e:	411a      	asrs	r2, r3
 8018720:	4002      	ands	r2, r0
 8018722:	ee07 2a10 	vmov	s14, r2
 8018726:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801872a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801872e:	f1c3 0317 	rsb	r3, r3, #23
 8018732:	4118      	asrs	r0, r3
 8018734:	2900      	cmp	r1, #0
 8018736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801873a:	bfb8      	it	lt
 801873c:	4240      	neglt	r0, r0
 801873e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018742:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018858 <__ieee754_powf+0x578>
 8018746:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801885c <__ieee754_powf+0x57c>
 801874a:	ee16 3a90 	vmov	r3, s13
 801874e:	f36f 030b 	bfc	r3, #0, #12
 8018752:	ee06 3a90 	vmov	s13, r3
 8018756:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801875a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801875e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018762:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8018860 <__ieee754_powf+0x580>
 8018766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801876a:	eee0 7a87 	vfma.f32	s15, s1, s14
 801876e:	eeb0 7a67 	vmov.f32	s14, s15
 8018772:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018776:	eef0 5a47 	vmov.f32	s11, s14
 801877a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801877e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8018782:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018786:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8018864 <__ieee754_powf+0x584>
 801878a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8018868 <__ieee754_powf+0x588>
 801878e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018792:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801886c <__ieee754_powf+0x58c>
 8018796:	eee6 5a26 	vfma.f32	s11, s12, s13
 801879a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8018870 <__ieee754_powf+0x590>
 801879e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80187a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018874 <__ieee754_powf+0x594>
 80187a6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80187aa:	eeb0 6a47 	vmov.f32	s12, s14
 80187ae:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80187b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80187b6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80187ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 80187be:	eee7 7a27 	vfma.f32	s15, s14, s15
 80187c2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80187c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80187ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80187d2:	ee10 3a10 	vmov	r3, s0
 80187d6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80187da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80187de:	da06      	bge.n	80187ee <__ieee754_powf+0x50e>
 80187e0:	f000 f97c 	bl	8018adc <scalbnf>
 80187e4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80187e8:	e592      	b.n	8018310 <__ieee754_powf+0x30>
 80187ea:	2000      	movs	r0, #0
 80187ec:	e7a7      	b.n	801873e <__ieee754_powf+0x45e>
 80187ee:	ee00 3a10 	vmov	s0, r3
 80187f2:	e7f7      	b.n	80187e4 <__ieee754_powf+0x504>
 80187f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80187f8:	e58a      	b.n	8018310 <__ieee754_powf+0x30>
 80187fa:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8018878 <__ieee754_powf+0x598>
 80187fe:	e587      	b.n	8018310 <__ieee754_powf+0x30>
 8018800:	eeb0 0a48 	vmov.f32	s0, s16
 8018804:	e584      	b.n	8018310 <__ieee754_powf+0x30>
 8018806:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801880a:	f43f adbb 	beq.w	8018384 <__ieee754_powf+0xa4>
 801880e:	2502      	movs	r5, #2
 8018810:	eeb0 0a48 	vmov.f32	s0, s16
 8018814:	f7ff f9dc 	bl	8017bd0 <fabsf>
 8018818:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801881c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018820:	4647      	mov	r7, r8
 8018822:	d003      	beq.n	801882c <__ieee754_powf+0x54c>
 8018824:	f1b8 0f00 	cmp.w	r8, #0
 8018828:	f47f addb 	bne.w	80183e2 <__ieee754_powf+0x102>
 801882c:	2c00      	cmp	r4, #0
 801882e:	bfbc      	itt	lt
 8018830:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018834:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018838:	2e00      	cmp	r6, #0
 801883a:	f6bf ad69 	bge.w	8018310 <__ieee754_powf+0x30>
 801883e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018842:	ea58 0805 	orrs.w	r8, r8, r5
 8018846:	f47f adc7 	bne.w	80183d8 <__ieee754_powf+0xf8>
 801884a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801884e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018852:	e55d      	b.n	8018310 <__ieee754_powf+0x30>
 8018854:	ff800000 	.word	0xff800000
 8018858:	3f317218 	.word	0x3f317218
 801885c:	3f317200 	.word	0x3f317200
 8018860:	35bfbe8c 	.word	0x35bfbe8c
 8018864:	b5ddea0e 	.word	0xb5ddea0e
 8018868:	3331bb4c 	.word	0x3331bb4c
 801886c:	388ab355 	.word	0x388ab355
 8018870:	bb360b61 	.word	0xbb360b61
 8018874:	3e2aaaab 	.word	0x3e2aaaab
 8018878:	00000000 	.word	0x00000000

0801887c <__ieee754_rem_pio2f>:
 801887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801887e:	ee10 6a10 	vmov	r6, s0
 8018882:	4b88      	ldr	r3, [pc, #544]	@ (8018aa4 <__ieee754_rem_pio2f+0x228>)
 8018884:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8018888:	429d      	cmp	r5, r3
 801888a:	b087      	sub	sp, #28
 801888c:	4604      	mov	r4, r0
 801888e:	d805      	bhi.n	801889c <__ieee754_rem_pio2f+0x20>
 8018890:	2300      	movs	r3, #0
 8018892:	ed80 0a00 	vstr	s0, [r0]
 8018896:	6043      	str	r3, [r0, #4]
 8018898:	2000      	movs	r0, #0
 801889a:	e022      	b.n	80188e2 <__ieee754_rem_pio2f+0x66>
 801889c:	4b82      	ldr	r3, [pc, #520]	@ (8018aa8 <__ieee754_rem_pio2f+0x22c>)
 801889e:	429d      	cmp	r5, r3
 80188a0:	d83a      	bhi.n	8018918 <__ieee754_rem_pio2f+0x9c>
 80188a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80188a6:	2e00      	cmp	r6, #0
 80188a8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8018aac <__ieee754_rem_pio2f+0x230>
 80188ac:	4a80      	ldr	r2, [pc, #512]	@ (8018ab0 <__ieee754_rem_pio2f+0x234>)
 80188ae:	f023 030f 	bic.w	r3, r3, #15
 80188b2:	dd18      	ble.n	80188e6 <__ieee754_rem_pio2f+0x6a>
 80188b4:	4293      	cmp	r3, r2
 80188b6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80188ba:	bf09      	itett	eq
 80188bc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8018ab4 <__ieee754_rem_pio2f+0x238>
 80188c0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8018ab8 <__ieee754_rem_pio2f+0x23c>
 80188c4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8018abc <__ieee754_rem_pio2f+0x240>
 80188c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80188cc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80188d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80188d4:	ed80 7a00 	vstr	s14, [r0]
 80188d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80188dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80188e0:	2001      	movs	r0, #1
 80188e2:	b007      	add	sp, #28
 80188e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188e6:	4293      	cmp	r3, r2
 80188e8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80188ec:	bf09      	itett	eq
 80188ee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8018ab4 <__ieee754_rem_pio2f+0x238>
 80188f2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8018ab8 <__ieee754_rem_pio2f+0x23c>
 80188f6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8018abc <__ieee754_rem_pio2f+0x240>
 80188fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80188fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018906:	ed80 7a00 	vstr	s14, [r0]
 801890a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801890e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018912:	f04f 30ff 	mov.w	r0, #4294967295
 8018916:	e7e4      	b.n	80188e2 <__ieee754_rem_pio2f+0x66>
 8018918:	4b69      	ldr	r3, [pc, #420]	@ (8018ac0 <__ieee754_rem_pio2f+0x244>)
 801891a:	429d      	cmp	r5, r3
 801891c:	d873      	bhi.n	8018a06 <__ieee754_rem_pio2f+0x18a>
 801891e:	f7ff f957 	bl	8017bd0 <fabsf>
 8018922:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8018ac4 <__ieee754_rem_pio2f+0x248>
 8018926:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801892a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801892e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018936:	ee17 0a90 	vmov	r0, s15
 801893a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018aac <__ieee754_rem_pio2f+0x230>
 801893e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018942:	281f      	cmp	r0, #31
 8018944:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018ab8 <__ieee754_rem_pio2f+0x23c>
 8018948:	ee67 7a27 	vmul.f32	s15, s14, s15
 801894c:	eeb1 6a47 	vneg.f32	s12, s14
 8018950:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018954:	ee16 1a90 	vmov	r1, s13
 8018958:	dc09      	bgt.n	801896e <__ieee754_rem_pio2f+0xf2>
 801895a:	4a5b      	ldr	r2, [pc, #364]	@ (8018ac8 <__ieee754_rem_pio2f+0x24c>)
 801895c:	1e47      	subs	r7, r0, #1
 801895e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018962:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8018966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801896a:	4293      	cmp	r3, r2
 801896c:	d107      	bne.n	801897e <__ieee754_rem_pio2f+0x102>
 801896e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8018972:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8018976:	2a08      	cmp	r2, #8
 8018978:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801897c:	dc14      	bgt.n	80189a8 <__ieee754_rem_pio2f+0x12c>
 801897e:	6021      	str	r1, [r4, #0]
 8018980:	ed94 7a00 	vldr	s14, [r4]
 8018984:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018988:	2e00      	cmp	r6, #0
 801898a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801898e:	ed84 0a01 	vstr	s0, [r4, #4]
 8018992:	daa6      	bge.n	80188e2 <__ieee754_rem_pio2f+0x66>
 8018994:	eeb1 7a47 	vneg.f32	s14, s14
 8018998:	eeb1 0a40 	vneg.f32	s0, s0
 801899c:	ed84 7a00 	vstr	s14, [r4]
 80189a0:	ed84 0a01 	vstr	s0, [r4, #4]
 80189a4:	4240      	negs	r0, r0
 80189a6:	e79c      	b.n	80188e2 <__ieee754_rem_pio2f+0x66>
 80189a8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8018ab4 <__ieee754_rem_pio2f+0x238>
 80189ac:	eef0 6a40 	vmov.f32	s13, s0
 80189b0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80189b4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80189b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80189bc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018abc <__ieee754_rem_pio2f+0x240>
 80189c0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80189c4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80189c8:	ee15 2a90 	vmov	r2, s11
 80189cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80189d0:	1a5b      	subs	r3, r3, r1
 80189d2:	2b19      	cmp	r3, #25
 80189d4:	dc04      	bgt.n	80189e0 <__ieee754_rem_pio2f+0x164>
 80189d6:	edc4 5a00 	vstr	s11, [r4]
 80189da:	eeb0 0a66 	vmov.f32	s0, s13
 80189de:	e7cf      	b.n	8018980 <__ieee754_rem_pio2f+0x104>
 80189e0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8018acc <__ieee754_rem_pio2f+0x250>
 80189e4:	eeb0 0a66 	vmov.f32	s0, s13
 80189e8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80189ec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80189f0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8018ad0 <__ieee754_rem_pio2f+0x254>
 80189f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80189f8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80189fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018a00:	ed84 7a00 	vstr	s14, [r4]
 8018a04:	e7bc      	b.n	8018980 <__ieee754_rem_pio2f+0x104>
 8018a06:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8018a0a:	d306      	bcc.n	8018a1a <__ieee754_rem_pio2f+0x19e>
 8018a0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018a10:	edc0 7a01 	vstr	s15, [r0, #4]
 8018a14:	edc0 7a00 	vstr	s15, [r0]
 8018a18:	e73e      	b.n	8018898 <__ieee754_rem_pio2f+0x1c>
 8018a1a:	15ea      	asrs	r2, r5, #23
 8018a1c:	3a86      	subs	r2, #134	@ 0x86
 8018a1e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018a22:	ee07 3a90 	vmov	s15, r3
 8018a26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018a2a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8018ad4 <__ieee754_rem_pio2f+0x258>
 8018a2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a36:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018a3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018a3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018a42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a4a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018a4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018a52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a5a:	edcd 7a05 	vstr	s15, [sp, #20]
 8018a5e:	d11e      	bne.n	8018a9e <__ieee754_rem_pio2f+0x222>
 8018a60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a68:	bf0c      	ite	eq
 8018a6a:	2301      	moveq	r3, #1
 8018a6c:	2302      	movne	r3, #2
 8018a6e:	491a      	ldr	r1, [pc, #104]	@ (8018ad8 <__ieee754_rem_pio2f+0x25c>)
 8018a70:	9101      	str	r1, [sp, #4]
 8018a72:	2102      	movs	r1, #2
 8018a74:	9100      	str	r1, [sp, #0]
 8018a76:	a803      	add	r0, sp, #12
 8018a78:	4621      	mov	r1, r4
 8018a7a:	f000 f8bb 	bl	8018bf4 <__kernel_rem_pio2f>
 8018a7e:	2e00      	cmp	r6, #0
 8018a80:	f6bf af2f 	bge.w	80188e2 <__ieee754_rem_pio2f+0x66>
 8018a84:	edd4 7a00 	vldr	s15, [r4]
 8018a88:	eef1 7a67 	vneg.f32	s15, s15
 8018a8c:	edc4 7a00 	vstr	s15, [r4]
 8018a90:	edd4 7a01 	vldr	s15, [r4, #4]
 8018a94:	eef1 7a67 	vneg.f32	s15, s15
 8018a98:	edc4 7a01 	vstr	s15, [r4, #4]
 8018a9c:	e782      	b.n	80189a4 <__ieee754_rem_pio2f+0x128>
 8018a9e:	2303      	movs	r3, #3
 8018aa0:	e7e5      	b.n	8018a6e <__ieee754_rem_pio2f+0x1f2>
 8018aa2:	bf00      	nop
 8018aa4:	3f490fd8 	.word	0x3f490fd8
 8018aa8:	4016cbe3 	.word	0x4016cbe3
 8018aac:	3fc90f80 	.word	0x3fc90f80
 8018ab0:	3fc90fd0 	.word	0x3fc90fd0
 8018ab4:	37354400 	.word	0x37354400
 8018ab8:	37354443 	.word	0x37354443
 8018abc:	2e85a308 	.word	0x2e85a308
 8018ac0:	43490f80 	.word	0x43490f80
 8018ac4:	3f22f984 	.word	0x3f22f984
 8018ac8:	08020518 	.word	0x08020518
 8018acc:	2e85a300 	.word	0x2e85a300
 8018ad0:	248d3132 	.word	0x248d3132
 8018ad4:	43800000 	.word	0x43800000
 8018ad8:	08020598 	.word	0x08020598

08018adc <scalbnf>:
 8018adc:	ee10 3a10 	vmov	r3, s0
 8018ae0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018ae4:	d02b      	beq.n	8018b3e <scalbnf+0x62>
 8018ae6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018aea:	d302      	bcc.n	8018af2 <scalbnf+0x16>
 8018aec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018af0:	4770      	bx	lr
 8018af2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018af6:	d123      	bne.n	8018b40 <scalbnf+0x64>
 8018af8:	4b24      	ldr	r3, [pc, #144]	@ (8018b8c <scalbnf+0xb0>)
 8018afa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018b90 <scalbnf+0xb4>
 8018afe:	4298      	cmp	r0, r3
 8018b00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018b04:	db17      	blt.n	8018b36 <scalbnf+0x5a>
 8018b06:	ee10 3a10 	vmov	r3, s0
 8018b0a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018b0e:	3a19      	subs	r2, #25
 8018b10:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018b14:	4288      	cmp	r0, r1
 8018b16:	dd15      	ble.n	8018b44 <scalbnf+0x68>
 8018b18:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018b94 <scalbnf+0xb8>
 8018b1c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018b98 <scalbnf+0xbc>
 8018b20:	ee10 3a10 	vmov	r3, s0
 8018b24:	eeb0 7a67 	vmov.f32	s14, s15
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	bfb8      	it	lt
 8018b2c:	eef0 7a66 	vmovlt.f32	s15, s13
 8018b30:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018b34:	4770      	bx	lr
 8018b36:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018b9c <scalbnf+0xc0>
 8018b3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018b3e:	4770      	bx	lr
 8018b40:	0dd2      	lsrs	r2, r2, #23
 8018b42:	e7e5      	b.n	8018b10 <scalbnf+0x34>
 8018b44:	4410      	add	r0, r2
 8018b46:	28fe      	cmp	r0, #254	@ 0xfe
 8018b48:	dce6      	bgt.n	8018b18 <scalbnf+0x3c>
 8018b4a:	2800      	cmp	r0, #0
 8018b4c:	dd06      	ble.n	8018b5c <scalbnf+0x80>
 8018b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018b52:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018b56:	ee00 3a10 	vmov	s0, r3
 8018b5a:	4770      	bx	lr
 8018b5c:	f110 0f16 	cmn.w	r0, #22
 8018b60:	da09      	bge.n	8018b76 <scalbnf+0x9a>
 8018b62:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018b9c <scalbnf+0xc0>
 8018b66:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018ba0 <scalbnf+0xc4>
 8018b6a:	ee10 3a10 	vmov	r3, s0
 8018b6e:	eeb0 7a67 	vmov.f32	s14, s15
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	e7d9      	b.n	8018b2a <scalbnf+0x4e>
 8018b76:	3019      	adds	r0, #25
 8018b78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018b7c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018b80:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018ba4 <scalbnf+0xc8>
 8018b84:	ee07 3a90 	vmov	s15, r3
 8018b88:	e7d7      	b.n	8018b3a <scalbnf+0x5e>
 8018b8a:	bf00      	nop
 8018b8c:	ffff3cb0 	.word	0xffff3cb0
 8018b90:	4c000000 	.word	0x4c000000
 8018b94:	7149f2ca 	.word	0x7149f2ca
 8018b98:	f149f2ca 	.word	0xf149f2ca
 8018b9c:	0da24260 	.word	0x0da24260
 8018ba0:	8da24260 	.word	0x8da24260
 8018ba4:	33000000 	.word	0x33000000

08018ba8 <with_errnof>:
 8018ba8:	b510      	push	{r4, lr}
 8018baa:	ed2d 8b02 	vpush	{d8}
 8018bae:	eeb0 8a40 	vmov.f32	s16, s0
 8018bb2:	4604      	mov	r4, r0
 8018bb4:	f002 fc3c 	bl	801b430 <__errno>
 8018bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8018bbc:	ecbd 8b02 	vpop	{d8}
 8018bc0:	6004      	str	r4, [r0, #0]
 8018bc2:	bd10      	pop	{r4, pc}

08018bc4 <xflowf>:
 8018bc4:	b130      	cbz	r0, 8018bd4 <xflowf+0x10>
 8018bc6:	eef1 7a40 	vneg.f32	s15, s0
 8018bca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018bce:	2022      	movs	r0, #34	@ 0x22
 8018bd0:	f7ff bfea 	b.w	8018ba8 <with_errnof>
 8018bd4:	eef0 7a40 	vmov.f32	s15, s0
 8018bd8:	e7f7      	b.n	8018bca <xflowf+0x6>
	...

08018bdc <__math_uflowf>:
 8018bdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018be4 <__math_uflowf+0x8>
 8018be0:	f7ff bff0 	b.w	8018bc4 <xflowf>
 8018be4:	10000000 	.word	0x10000000

08018be8 <__math_oflowf>:
 8018be8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018bf0 <__math_oflowf+0x8>
 8018bec:	f7ff bfea 	b.w	8018bc4 <xflowf>
 8018bf0:	70000000 	.word	0x70000000

08018bf4 <__kernel_rem_pio2f>:
 8018bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf8:	ed2d 8b04 	vpush	{d8-d9}
 8018bfc:	b0d9      	sub	sp, #356	@ 0x164
 8018bfe:	4690      	mov	r8, r2
 8018c00:	9001      	str	r0, [sp, #4]
 8018c02:	4ab6      	ldr	r2, [pc, #728]	@ (8018edc <__kernel_rem_pio2f+0x2e8>)
 8018c04:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018c06:	f118 0f04 	cmn.w	r8, #4
 8018c0a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8018c0e:	460f      	mov	r7, r1
 8018c10:	f103 3bff 	add.w	fp, r3, #4294967295
 8018c14:	db26      	blt.n	8018c64 <__kernel_rem_pio2f+0x70>
 8018c16:	f1b8 0203 	subs.w	r2, r8, #3
 8018c1a:	bf48      	it	mi
 8018c1c:	f108 0204 	addmi.w	r2, r8, #4
 8018c20:	10d2      	asrs	r2, r2, #3
 8018c22:	1c55      	adds	r5, r2, #1
 8018c24:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018c26:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8018c2a:	00e8      	lsls	r0, r5, #3
 8018c2c:	eba2 060b 	sub.w	r6, r2, fp
 8018c30:	9002      	str	r0, [sp, #8]
 8018c32:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018c36:	eb0a 0c0b 	add.w	ip, sl, fp
 8018c3a:	ac1c      	add	r4, sp, #112	@ 0x70
 8018c3c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018c40:	2000      	movs	r0, #0
 8018c42:	4560      	cmp	r0, ip
 8018c44:	dd10      	ble.n	8018c68 <__kernel_rem_pio2f+0x74>
 8018c46:	a91c      	add	r1, sp, #112	@ 0x70
 8018c48:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8018c4c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8018c50:	2600      	movs	r6, #0
 8018c52:	4556      	cmp	r6, sl
 8018c54:	dc24      	bgt.n	8018ca0 <__kernel_rem_pio2f+0xac>
 8018c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018c5a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8018c5e:	4684      	mov	ip, r0
 8018c60:	2400      	movs	r4, #0
 8018c62:	e016      	b.n	8018c92 <__kernel_rem_pio2f+0x9e>
 8018c64:	2200      	movs	r2, #0
 8018c66:	e7dc      	b.n	8018c22 <__kernel_rem_pio2f+0x2e>
 8018c68:	42c6      	cmn	r6, r0
 8018c6a:	bf5d      	ittte	pl
 8018c6c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8018c70:	ee07 1a90 	vmovpl	s15, r1
 8018c74:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018c78:	eef0 7a47 	vmovmi.f32	s15, s14
 8018c7c:	ece4 7a01 	vstmia	r4!, {s15}
 8018c80:	3001      	adds	r0, #1
 8018c82:	e7de      	b.n	8018c42 <__kernel_rem_pio2f+0x4e>
 8018c84:	ecfe 6a01 	vldmia	lr!, {s13}
 8018c88:	ed3c 7a01 	vldmdb	ip!, {s14}
 8018c8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018c90:	3401      	adds	r4, #1
 8018c92:	455c      	cmp	r4, fp
 8018c94:	ddf6      	ble.n	8018c84 <__kernel_rem_pio2f+0x90>
 8018c96:	ece9 7a01 	vstmia	r9!, {s15}
 8018c9a:	3601      	adds	r6, #1
 8018c9c:	3004      	adds	r0, #4
 8018c9e:	e7d8      	b.n	8018c52 <__kernel_rem_pio2f+0x5e>
 8018ca0:	a908      	add	r1, sp, #32
 8018ca2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ca6:	9104      	str	r1, [sp, #16]
 8018ca8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018caa:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8018ee8 <__kernel_rem_pio2f+0x2f4>
 8018cae:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8018ee4 <__kernel_rem_pio2f+0x2f0>
 8018cb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018cb6:	9203      	str	r2, [sp, #12]
 8018cb8:	4654      	mov	r4, sl
 8018cba:	00a2      	lsls	r2, r4, #2
 8018cbc:	9205      	str	r2, [sp, #20]
 8018cbe:	aa58      	add	r2, sp, #352	@ 0x160
 8018cc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8018cc4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8018cc8:	a944      	add	r1, sp, #272	@ 0x110
 8018cca:	aa08      	add	r2, sp, #32
 8018ccc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8018cd0:	4694      	mov	ip, r2
 8018cd2:	4626      	mov	r6, r4
 8018cd4:	2e00      	cmp	r6, #0
 8018cd6:	dc4c      	bgt.n	8018d72 <__kernel_rem_pio2f+0x17e>
 8018cd8:	4628      	mov	r0, r5
 8018cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018cde:	f7ff fefd 	bl	8018adc <scalbnf>
 8018ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8018ce6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8018cea:	ee28 0a00 	vmul.f32	s0, s16, s0
 8018cee:	f000 f9e9 	bl	80190c4 <floorf>
 8018cf2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8018cf6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018cfa:	2d00      	cmp	r5, #0
 8018cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018d00:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018d04:	ee17 9a90 	vmov	r9, s15
 8018d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d0c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018d10:	dd41      	ble.n	8018d96 <__kernel_rem_pio2f+0x1a2>
 8018d12:	f104 3cff 	add.w	ip, r4, #4294967295
 8018d16:	a908      	add	r1, sp, #32
 8018d18:	f1c5 0e08 	rsb	lr, r5, #8
 8018d1c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8018d20:	fa46 f00e 	asr.w	r0, r6, lr
 8018d24:	4481      	add	r9, r0
 8018d26:	fa00 f00e 	lsl.w	r0, r0, lr
 8018d2a:	1a36      	subs	r6, r6, r0
 8018d2c:	f1c5 0007 	rsb	r0, r5, #7
 8018d30:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8018d34:	4106      	asrs	r6, r0
 8018d36:	2e00      	cmp	r6, #0
 8018d38:	dd3c      	ble.n	8018db4 <__kernel_rem_pio2f+0x1c0>
 8018d3a:	f04f 0e00 	mov.w	lr, #0
 8018d3e:	f109 0901 	add.w	r9, r9, #1
 8018d42:	4670      	mov	r0, lr
 8018d44:	4574      	cmp	r4, lr
 8018d46:	dc68      	bgt.n	8018e1a <__kernel_rem_pio2f+0x226>
 8018d48:	2d00      	cmp	r5, #0
 8018d4a:	dd03      	ble.n	8018d54 <__kernel_rem_pio2f+0x160>
 8018d4c:	2d01      	cmp	r5, #1
 8018d4e:	d074      	beq.n	8018e3a <__kernel_rem_pio2f+0x246>
 8018d50:	2d02      	cmp	r5, #2
 8018d52:	d07d      	beq.n	8018e50 <__kernel_rem_pio2f+0x25c>
 8018d54:	2e02      	cmp	r6, #2
 8018d56:	d12d      	bne.n	8018db4 <__kernel_rem_pio2f+0x1c0>
 8018d58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018d5c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018d60:	b340      	cbz	r0, 8018db4 <__kernel_rem_pio2f+0x1c0>
 8018d62:	4628      	mov	r0, r5
 8018d64:	9306      	str	r3, [sp, #24]
 8018d66:	f7ff feb9 	bl	8018adc <scalbnf>
 8018d6a:	9b06      	ldr	r3, [sp, #24]
 8018d6c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018d70:	e020      	b.n	8018db4 <__kernel_rem_pio2f+0x1c0>
 8018d72:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018d76:	3e01      	subs	r6, #1
 8018d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d80:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018d84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018d88:	ecac 0a01 	vstmia	ip!, {s0}
 8018d8c:	ed30 0a01 	vldmdb	r0!, {s0}
 8018d90:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018d94:	e79e      	b.n	8018cd4 <__kernel_rem_pio2f+0xe0>
 8018d96:	d105      	bne.n	8018da4 <__kernel_rem_pio2f+0x1b0>
 8018d98:	1e60      	subs	r0, r4, #1
 8018d9a:	a908      	add	r1, sp, #32
 8018d9c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8018da0:	11f6      	asrs	r6, r6, #7
 8018da2:	e7c8      	b.n	8018d36 <__kernel_rem_pio2f+0x142>
 8018da4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018da8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018db0:	da31      	bge.n	8018e16 <__kernel_rem_pio2f+0x222>
 8018db2:	2600      	movs	r6, #0
 8018db4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dbc:	f040 8098 	bne.w	8018ef0 <__kernel_rem_pio2f+0x2fc>
 8018dc0:	1e60      	subs	r0, r4, #1
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	4550      	cmp	r0, sl
 8018dc6:	da4b      	bge.n	8018e60 <__kernel_rem_pio2f+0x26c>
 8018dc8:	2a00      	cmp	r2, #0
 8018dca:	d065      	beq.n	8018e98 <__kernel_rem_pio2f+0x2a4>
 8018dcc:	3c01      	subs	r4, #1
 8018dce:	ab08      	add	r3, sp, #32
 8018dd0:	3d08      	subs	r5, #8
 8018dd2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d0f8      	beq.n	8018dcc <__kernel_rem_pio2f+0x1d8>
 8018dda:	4628      	mov	r0, r5
 8018ddc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018de0:	f7ff fe7c 	bl	8018adc <scalbnf>
 8018de4:	1c63      	adds	r3, r4, #1
 8018de6:	aa44      	add	r2, sp, #272	@ 0x110
 8018de8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8018ee8 <__kernel_rem_pio2f+0x2f4>
 8018dec:	0099      	lsls	r1, r3, #2
 8018dee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018df2:	4623      	mov	r3, r4
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	f280 80a9 	bge.w	8018f4c <__kernel_rem_pio2f+0x358>
 8018dfa:	4623      	mov	r3, r4
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f2c0 80c7 	blt.w	8018f90 <__kernel_rem_pio2f+0x39c>
 8018e02:	aa44      	add	r2, sp, #272	@ 0x110
 8018e04:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018e08:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8018ee0 <__kernel_rem_pio2f+0x2ec>
 8018e0c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8018e10:	2000      	movs	r0, #0
 8018e12:	1ae2      	subs	r2, r4, r3
 8018e14:	e0b1      	b.n	8018f7a <__kernel_rem_pio2f+0x386>
 8018e16:	2602      	movs	r6, #2
 8018e18:	e78f      	b.n	8018d3a <__kernel_rem_pio2f+0x146>
 8018e1a:	f852 1b04 	ldr.w	r1, [r2], #4
 8018e1e:	b948      	cbnz	r0, 8018e34 <__kernel_rem_pio2f+0x240>
 8018e20:	b121      	cbz	r1, 8018e2c <__kernel_rem_pio2f+0x238>
 8018e22:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8018e26:	f842 1c04 	str.w	r1, [r2, #-4]
 8018e2a:	2101      	movs	r1, #1
 8018e2c:	f10e 0e01 	add.w	lr, lr, #1
 8018e30:	4608      	mov	r0, r1
 8018e32:	e787      	b.n	8018d44 <__kernel_rem_pio2f+0x150>
 8018e34:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018e38:	e7f5      	b.n	8018e26 <__kernel_rem_pio2f+0x232>
 8018e3a:	f104 3cff 	add.w	ip, r4, #4294967295
 8018e3e:	aa08      	add	r2, sp, #32
 8018e40:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018e44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018e48:	a908      	add	r1, sp, #32
 8018e4a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8018e4e:	e781      	b.n	8018d54 <__kernel_rem_pio2f+0x160>
 8018e50:	f104 3cff 	add.w	ip, r4, #4294967295
 8018e54:	aa08      	add	r2, sp, #32
 8018e56:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018e5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018e5e:	e7f3      	b.n	8018e48 <__kernel_rem_pio2f+0x254>
 8018e60:	a908      	add	r1, sp, #32
 8018e62:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018e66:	3801      	subs	r0, #1
 8018e68:	430a      	orrs	r2, r1
 8018e6a:	e7ab      	b.n	8018dc4 <__kernel_rem_pio2f+0x1d0>
 8018e6c:	3201      	adds	r2, #1
 8018e6e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8018e72:	2e00      	cmp	r6, #0
 8018e74:	d0fa      	beq.n	8018e6c <__kernel_rem_pio2f+0x278>
 8018e76:	9905      	ldr	r1, [sp, #20]
 8018e78:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8018e7c:	eb0d 0001 	add.w	r0, sp, r1
 8018e80:	18e6      	adds	r6, r4, r3
 8018e82:	a91c      	add	r1, sp, #112	@ 0x70
 8018e84:	f104 0c01 	add.w	ip, r4, #1
 8018e88:	384c      	subs	r0, #76	@ 0x4c
 8018e8a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8018e8e:	4422      	add	r2, r4
 8018e90:	4562      	cmp	r2, ip
 8018e92:	da04      	bge.n	8018e9e <__kernel_rem_pio2f+0x2aa>
 8018e94:	4614      	mov	r4, r2
 8018e96:	e710      	b.n	8018cba <__kernel_rem_pio2f+0xc6>
 8018e98:	9804      	ldr	r0, [sp, #16]
 8018e9a:	2201      	movs	r2, #1
 8018e9c:	e7e7      	b.n	8018e6e <__kernel_rem_pio2f+0x27a>
 8018e9e:	9903      	ldr	r1, [sp, #12]
 8018ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018ea4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8018ea8:	9105      	str	r1, [sp, #20]
 8018eaa:	ee07 1a90 	vmov	s15, r1
 8018eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018eb2:	2400      	movs	r4, #0
 8018eb4:	ece6 7a01 	vstmia	r6!, {s15}
 8018eb8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8018ebc:	46b1      	mov	r9, r6
 8018ebe:	455c      	cmp	r4, fp
 8018ec0:	dd04      	ble.n	8018ecc <__kernel_rem_pio2f+0x2d8>
 8018ec2:	ece0 7a01 	vstmia	r0!, {s15}
 8018ec6:	f10c 0c01 	add.w	ip, ip, #1
 8018eca:	e7e1      	b.n	8018e90 <__kernel_rem_pio2f+0x29c>
 8018ecc:	ecfe 6a01 	vldmia	lr!, {s13}
 8018ed0:	ed39 7a01 	vldmdb	r9!, {s14}
 8018ed4:	3401      	adds	r4, #1
 8018ed6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018eda:	e7f0      	b.n	8018ebe <__kernel_rem_pio2f+0x2ca>
 8018edc:	080208dc 	.word	0x080208dc
 8018ee0:	080208b0 	.word	0x080208b0
 8018ee4:	43800000 	.word	0x43800000
 8018ee8:	3b800000 	.word	0x3b800000
 8018eec:	00000000 	.word	0x00000000
 8018ef0:	9b02      	ldr	r3, [sp, #8]
 8018ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8018ef6:	eba3 0008 	sub.w	r0, r3, r8
 8018efa:	f7ff fdef 	bl	8018adc <scalbnf>
 8018efe:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8018ee4 <__kernel_rem_pio2f+0x2f0>
 8018f02:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0a:	db19      	blt.n	8018f40 <__kernel_rem_pio2f+0x34c>
 8018f0c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8018ee8 <__kernel_rem_pio2f+0x2f4>
 8018f10:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018f14:	aa08      	add	r2, sp, #32
 8018f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f1a:	3508      	adds	r5, #8
 8018f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018f2c:	ee10 3a10 	vmov	r3, s0
 8018f30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018f34:	ee17 3a90 	vmov	r3, s15
 8018f38:	3401      	adds	r4, #1
 8018f3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018f3e:	e74c      	b.n	8018dda <__kernel_rem_pio2f+0x1e6>
 8018f40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018f44:	aa08      	add	r2, sp, #32
 8018f46:	ee10 3a10 	vmov	r3, s0
 8018f4a:	e7f6      	b.n	8018f3a <__kernel_rem_pio2f+0x346>
 8018f4c:	a808      	add	r0, sp, #32
 8018f4e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018f52:	9001      	str	r0, [sp, #4]
 8018f54:	ee07 0a90 	vmov	s15, r0
 8018f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f5c:	3b01      	subs	r3, #1
 8018f5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018f62:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018f66:	ed62 7a01 	vstmdb	r2!, {s15}
 8018f6a:	e743      	b.n	8018df4 <__kernel_rem_pio2f+0x200>
 8018f6c:	ecfc 6a01 	vldmia	ip!, {s13}
 8018f70:	ecb5 7a01 	vldmia	r5!, {s14}
 8018f74:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018f78:	3001      	adds	r0, #1
 8018f7a:	4550      	cmp	r0, sl
 8018f7c:	dc01      	bgt.n	8018f82 <__kernel_rem_pio2f+0x38e>
 8018f7e:	4290      	cmp	r0, r2
 8018f80:	ddf4      	ble.n	8018f6c <__kernel_rem_pio2f+0x378>
 8018f82:	a858      	add	r0, sp, #352	@ 0x160
 8018f84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018f88:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8018f8c:	3b01      	subs	r3, #1
 8018f8e:	e735      	b.n	8018dfc <__kernel_rem_pio2f+0x208>
 8018f90:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018f92:	2b02      	cmp	r3, #2
 8018f94:	dc09      	bgt.n	8018faa <__kernel_rem_pio2f+0x3b6>
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	dc27      	bgt.n	8018fea <__kernel_rem_pio2f+0x3f6>
 8018f9a:	d040      	beq.n	801901e <__kernel_rem_pio2f+0x42a>
 8018f9c:	f009 0007 	and.w	r0, r9, #7
 8018fa0:	b059      	add	sp, #356	@ 0x164
 8018fa2:	ecbd 8b04 	vpop	{d8-d9}
 8018fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018faa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018fac:	2b03      	cmp	r3, #3
 8018fae:	d1f5      	bne.n	8018f9c <__kernel_rem_pio2f+0x3a8>
 8018fb0:	aa30      	add	r2, sp, #192	@ 0xc0
 8018fb2:	1f0b      	subs	r3, r1, #4
 8018fb4:	4413      	add	r3, r2
 8018fb6:	461a      	mov	r2, r3
 8018fb8:	4620      	mov	r0, r4
 8018fba:	2800      	cmp	r0, #0
 8018fbc:	dc50      	bgt.n	8019060 <__kernel_rem_pio2f+0x46c>
 8018fbe:	4622      	mov	r2, r4
 8018fc0:	2a01      	cmp	r2, #1
 8018fc2:	dc5d      	bgt.n	8019080 <__kernel_rem_pio2f+0x48c>
 8018fc4:	ab30      	add	r3, sp, #192	@ 0xc0
 8018fc6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8018fca:	440b      	add	r3, r1
 8018fcc:	2c01      	cmp	r4, #1
 8018fce:	dc67      	bgt.n	80190a0 <__kernel_rem_pio2f+0x4ac>
 8018fd0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018fd4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8018fd8:	2e00      	cmp	r6, #0
 8018fda:	d167      	bne.n	80190ac <__kernel_rem_pio2f+0x4b8>
 8018fdc:	edc7 6a00 	vstr	s13, [r7]
 8018fe0:	ed87 7a01 	vstr	s14, [r7, #4]
 8018fe4:	edc7 7a02 	vstr	s15, [r7, #8]
 8018fe8:	e7d8      	b.n	8018f9c <__kernel_rem_pio2f+0x3a8>
 8018fea:	ab30      	add	r3, sp, #192	@ 0xc0
 8018fec:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8018ff0:	440b      	add	r3, r1
 8018ff2:	4622      	mov	r2, r4
 8018ff4:	2a00      	cmp	r2, #0
 8018ff6:	da24      	bge.n	8019042 <__kernel_rem_pio2f+0x44e>
 8018ff8:	b34e      	cbz	r6, 801904e <__kernel_rem_pio2f+0x45a>
 8018ffa:	eef1 7a47 	vneg.f32	s15, s14
 8018ffe:	edc7 7a00 	vstr	s15, [r7]
 8019002:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801900a:	aa31      	add	r2, sp, #196	@ 0xc4
 801900c:	2301      	movs	r3, #1
 801900e:	429c      	cmp	r4, r3
 8019010:	da20      	bge.n	8019054 <__kernel_rem_pio2f+0x460>
 8019012:	b10e      	cbz	r6, 8019018 <__kernel_rem_pio2f+0x424>
 8019014:	eef1 7a67 	vneg.f32	s15, s15
 8019018:	edc7 7a01 	vstr	s15, [r7, #4]
 801901c:	e7be      	b.n	8018f9c <__kernel_rem_pio2f+0x3a8>
 801901e:	ab30      	add	r3, sp, #192	@ 0xc0
 8019020:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8018eec <__kernel_rem_pio2f+0x2f8>
 8019024:	440b      	add	r3, r1
 8019026:	2c00      	cmp	r4, #0
 8019028:	da05      	bge.n	8019036 <__kernel_rem_pio2f+0x442>
 801902a:	b10e      	cbz	r6, 8019030 <__kernel_rem_pio2f+0x43c>
 801902c:	eef1 7a67 	vneg.f32	s15, s15
 8019030:	edc7 7a00 	vstr	s15, [r7]
 8019034:	e7b2      	b.n	8018f9c <__kernel_rem_pio2f+0x3a8>
 8019036:	ed33 7a01 	vldmdb	r3!, {s14}
 801903a:	3c01      	subs	r4, #1
 801903c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019040:	e7f1      	b.n	8019026 <__kernel_rem_pio2f+0x432>
 8019042:	ed73 7a01 	vldmdb	r3!, {s15}
 8019046:	3a01      	subs	r2, #1
 8019048:	ee37 7a27 	vadd.f32	s14, s14, s15
 801904c:	e7d2      	b.n	8018ff4 <__kernel_rem_pio2f+0x400>
 801904e:	eef0 7a47 	vmov.f32	s15, s14
 8019052:	e7d4      	b.n	8018ffe <__kernel_rem_pio2f+0x40a>
 8019054:	ecb2 7a01 	vldmia	r2!, {s14}
 8019058:	3301      	adds	r3, #1
 801905a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801905e:	e7d6      	b.n	801900e <__kernel_rem_pio2f+0x41a>
 8019060:	ed72 7a01 	vldmdb	r2!, {s15}
 8019064:	edd2 6a01 	vldr	s13, [r2, #4]
 8019068:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801906c:	3801      	subs	r0, #1
 801906e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019072:	ed82 7a00 	vstr	s14, [r2]
 8019076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801907a:	edc2 7a01 	vstr	s15, [r2, #4]
 801907e:	e79c      	b.n	8018fba <__kernel_rem_pio2f+0x3c6>
 8019080:	ed73 7a01 	vldmdb	r3!, {s15}
 8019084:	edd3 6a01 	vldr	s13, [r3, #4]
 8019088:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801908c:	3a01      	subs	r2, #1
 801908e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019092:	ed83 7a00 	vstr	s14, [r3]
 8019096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801909a:	edc3 7a01 	vstr	s15, [r3, #4]
 801909e:	e78f      	b.n	8018fc0 <__kernel_rem_pio2f+0x3cc>
 80190a0:	ed33 7a01 	vldmdb	r3!, {s14}
 80190a4:	3c01      	subs	r4, #1
 80190a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80190aa:	e78f      	b.n	8018fcc <__kernel_rem_pio2f+0x3d8>
 80190ac:	eef1 6a66 	vneg.f32	s13, s13
 80190b0:	eeb1 7a47 	vneg.f32	s14, s14
 80190b4:	edc7 6a00 	vstr	s13, [r7]
 80190b8:	ed87 7a01 	vstr	s14, [r7, #4]
 80190bc:	eef1 7a67 	vneg.f32	s15, s15
 80190c0:	e790      	b.n	8018fe4 <__kernel_rem_pio2f+0x3f0>
 80190c2:	bf00      	nop

080190c4 <floorf>:
 80190c4:	ee10 3a10 	vmov	r3, s0
 80190c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80190cc:	3a7f      	subs	r2, #127	@ 0x7f
 80190ce:	2a16      	cmp	r2, #22
 80190d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80190d4:	dc2b      	bgt.n	801912e <floorf+0x6a>
 80190d6:	2a00      	cmp	r2, #0
 80190d8:	da12      	bge.n	8019100 <floorf+0x3c>
 80190da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019140 <floorf+0x7c>
 80190de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80190e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80190e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ea:	dd06      	ble.n	80190fa <floorf+0x36>
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	da24      	bge.n	801913a <floorf+0x76>
 80190f0:	2900      	cmp	r1, #0
 80190f2:	4b14      	ldr	r3, [pc, #80]	@ (8019144 <floorf+0x80>)
 80190f4:	bf08      	it	eq
 80190f6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80190fa:	ee00 3a10 	vmov	s0, r3
 80190fe:	4770      	bx	lr
 8019100:	4911      	ldr	r1, [pc, #68]	@ (8019148 <floorf+0x84>)
 8019102:	4111      	asrs	r1, r2
 8019104:	420b      	tst	r3, r1
 8019106:	d0fa      	beq.n	80190fe <floorf+0x3a>
 8019108:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019140 <floorf+0x7c>
 801910c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019110:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019118:	ddef      	ble.n	80190fa <floorf+0x36>
 801911a:	2b00      	cmp	r3, #0
 801911c:	bfbe      	ittt	lt
 801911e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019122:	fa40 f202 	asrlt.w	r2, r0, r2
 8019126:	189b      	addlt	r3, r3, r2
 8019128:	ea23 0301 	bic.w	r3, r3, r1
 801912c:	e7e5      	b.n	80190fa <floorf+0x36>
 801912e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019132:	d3e4      	bcc.n	80190fe <floorf+0x3a>
 8019134:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019138:	4770      	bx	lr
 801913a:	2300      	movs	r3, #0
 801913c:	e7dd      	b.n	80190fa <floorf+0x36>
 801913e:	bf00      	nop
 8019140:	7149f2ca 	.word	0x7149f2ca
 8019144:	bf800000 	.word	0xbf800000
 8019148:	007fffff 	.word	0x007fffff

0801914c <sulp>:
 801914c:	b570      	push	{r4, r5, r6, lr}
 801914e:	4604      	mov	r4, r0
 8019150:	460d      	mov	r5, r1
 8019152:	ec45 4b10 	vmov	d0, r4, r5
 8019156:	4616      	mov	r6, r2
 8019158:	f003 ffde 	bl	801d118 <__ulp>
 801915c:	ec51 0b10 	vmov	r0, r1, d0
 8019160:	b17e      	cbz	r6, 8019182 <sulp+0x36>
 8019162:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019166:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801916a:	2b00      	cmp	r3, #0
 801916c:	dd09      	ble.n	8019182 <sulp+0x36>
 801916e:	051b      	lsls	r3, r3, #20
 8019170:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8019174:	2400      	movs	r4, #0
 8019176:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801917a:	4622      	mov	r2, r4
 801917c:	462b      	mov	r3, r5
 801917e:	f7e7 fa3b 	bl	80005f8 <__aeabi_dmul>
 8019182:	ec41 0b10 	vmov	d0, r0, r1
 8019186:	bd70      	pop	{r4, r5, r6, pc}

08019188 <_strtod_l>:
 8019188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801918c:	b09f      	sub	sp, #124	@ 0x7c
 801918e:	460c      	mov	r4, r1
 8019190:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019192:	2200      	movs	r2, #0
 8019194:	921a      	str	r2, [sp, #104]	@ 0x68
 8019196:	9005      	str	r0, [sp, #20]
 8019198:	f04f 0a00 	mov.w	sl, #0
 801919c:	f04f 0b00 	mov.w	fp, #0
 80191a0:	460a      	mov	r2, r1
 80191a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80191a4:	7811      	ldrb	r1, [r2, #0]
 80191a6:	292b      	cmp	r1, #43	@ 0x2b
 80191a8:	d04a      	beq.n	8019240 <_strtod_l+0xb8>
 80191aa:	d838      	bhi.n	801921e <_strtod_l+0x96>
 80191ac:	290d      	cmp	r1, #13
 80191ae:	d832      	bhi.n	8019216 <_strtod_l+0x8e>
 80191b0:	2908      	cmp	r1, #8
 80191b2:	d832      	bhi.n	801921a <_strtod_l+0x92>
 80191b4:	2900      	cmp	r1, #0
 80191b6:	d03b      	beq.n	8019230 <_strtod_l+0xa8>
 80191b8:	2200      	movs	r2, #0
 80191ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80191bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80191be:	782a      	ldrb	r2, [r5, #0]
 80191c0:	2a30      	cmp	r2, #48	@ 0x30
 80191c2:	f040 80b2 	bne.w	801932a <_strtod_l+0x1a2>
 80191c6:	786a      	ldrb	r2, [r5, #1]
 80191c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80191cc:	2a58      	cmp	r2, #88	@ 0x58
 80191ce:	d16e      	bne.n	80192ae <_strtod_l+0x126>
 80191d0:	9302      	str	r3, [sp, #8]
 80191d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191d4:	9301      	str	r3, [sp, #4]
 80191d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80191d8:	9300      	str	r3, [sp, #0]
 80191da:	4a8f      	ldr	r2, [pc, #572]	@ (8019418 <_strtod_l+0x290>)
 80191dc:	9805      	ldr	r0, [sp, #20]
 80191de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80191e0:	a919      	add	r1, sp, #100	@ 0x64
 80191e2:	f003 f893 	bl	801c30c <__gethex>
 80191e6:	f010 060f 	ands.w	r6, r0, #15
 80191ea:	4604      	mov	r4, r0
 80191ec:	d005      	beq.n	80191fa <_strtod_l+0x72>
 80191ee:	2e06      	cmp	r6, #6
 80191f0:	d128      	bne.n	8019244 <_strtod_l+0xbc>
 80191f2:	3501      	adds	r5, #1
 80191f4:	2300      	movs	r3, #0
 80191f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80191f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80191fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	f040 858e 	bne.w	8019d1e <_strtod_l+0xb96>
 8019202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019204:	b1cb      	cbz	r3, 801923a <_strtod_l+0xb2>
 8019206:	4652      	mov	r2, sl
 8019208:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801920c:	ec43 2b10 	vmov	d0, r2, r3
 8019210:	b01f      	add	sp, #124	@ 0x7c
 8019212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019216:	2920      	cmp	r1, #32
 8019218:	d1ce      	bne.n	80191b8 <_strtod_l+0x30>
 801921a:	3201      	adds	r2, #1
 801921c:	e7c1      	b.n	80191a2 <_strtod_l+0x1a>
 801921e:	292d      	cmp	r1, #45	@ 0x2d
 8019220:	d1ca      	bne.n	80191b8 <_strtod_l+0x30>
 8019222:	2101      	movs	r1, #1
 8019224:	910e      	str	r1, [sp, #56]	@ 0x38
 8019226:	1c51      	adds	r1, r2, #1
 8019228:	9119      	str	r1, [sp, #100]	@ 0x64
 801922a:	7852      	ldrb	r2, [r2, #1]
 801922c:	2a00      	cmp	r2, #0
 801922e:	d1c5      	bne.n	80191bc <_strtod_l+0x34>
 8019230:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019232:	9419      	str	r4, [sp, #100]	@ 0x64
 8019234:	2b00      	cmp	r3, #0
 8019236:	f040 8570 	bne.w	8019d1a <_strtod_l+0xb92>
 801923a:	4652      	mov	r2, sl
 801923c:	465b      	mov	r3, fp
 801923e:	e7e5      	b.n	801920c <_strtod_l+0x84>
 8019240:	2100      	movs	r1, #0
 8019242:	e7ef      	b.n	8019224 <_strtod_l+0x9c>
 8019244:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019246:	b13a      	cbz	r2, 8019258 <_strtod_l+0xd0>
 8019248:	2135      	movs	r1, #53	@ 0x35
 801924a:	a81c      	add	r0, sp, #112	@ 0x70
 801924c:	f004 f85e 	bl	801d30c <__copybits>
 8019250:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019252:	9805      	ldr	r0, [sp, #20]
 8019254:	f003 fc34 	bl	801cac0 <_Bfree>
 8019258:	3e01      	subs	r6, #1
 801925a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801925c:	2e04      	cmp	r6, #4
 801925e:	d806      	bhi.n	801926e <_strtod_l+0xe6>
 8019260:	e8df f006 	tbb	[pc, r6]
 8019264:	201d0314 	.word	0x201d0314
 8019268:	14          	.byte	0x14
 8019269:	00          	.byte	0x00
 801926a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801926e:	05e1      	lsls	r1, r4, #23
 8019270:	bf48      	it	mi
 8019272:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8019276:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801927a:	0d1b      	lsrs	r3, r3, #20
 801927c:	051b      	lsls	r3, r3, #20
 801927e:	2b00      	cmp	r3, #0
 8019280:	d1bb      	bne.n	80191fa <_strtod_l+0x72>
 8019282:	f002 f8d5 	bl	801b430 <__errno>
 8019286:	2322      	movs	r3, #34	@ 0x22
 8019288:	6003      	str	r3, [r0, #0]
 801928a:	e7b6      	b.n	80191fa <_strtod_l+0x72>
 801928c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019290:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019294:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019298:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801929c:	e7e7      	b.n	801926e <_strtod_l+0xe6>
 801929e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8019420 <_strtod_l+0x298>
 80192a2:	e7e4      	b.n	801926e <_strtod_l+0xe6>
 80192a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80192a8:	f04f 3aff 	mov.w	sl, #4294967295
 80192ac:	e7df      	b.n	801926e <_strtod_l+0xe6>
 80192ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80192b0:	1c5a      	adds	r2, r3, #1
 80192b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80192b4:	785b      	ldrb	r3, [r3, #1]
 80192b6:	2b30      	cmp	r3, #48	@ 0x30
 80192b8:	d0f9      	beq.n	80192ae <_strtod_l+0x126>
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d09d      	beq.n	80191fa <_strtod_l+0x72>
 80192be:	2301      	movs	r3, #1
 80192c0:	2700      	movs	r7, #0
 80192c2:	9308      	str	r3, [sp, #32]
 80192c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80192c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80192c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80192ca:	46b9      	mov	r9, r7
 80192cc:	220a      	movs	r2, #10
 80192ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80192d0:	7805      	ldrb	r5, [r0, #0]
 80192d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80192d6:	b2d9      	uxtb	r1, r3
 80192d8:	2909      	cmp	r1, #9
 80192da:	d928      	bls.n	801932e <_strtod_l+0x1a6>
 80192dc:	494f      	ldr	r1, [pc, #316]	@ (801941c <_strtod_l+0x294>)
 80192de:	2201      	movs	r2, #1
 80192e0:	f001 ffec 	bl	801b2bc <strncmp>
 80192e4:	2800      	cmp	r0, #0
 80192e6:	d032      	beq.n	801934e <_strtod_l+0x1c6>
 80192e8:	2000      	movs	r0, #0
 80192ea:	462a      	mov	r2, r5
 80192ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80192ee:	464d      	mov	r5, r9
 80192f0:	4603      	mov	r3, r0
 80192f2:	2a65      	cmp	r2, #101	@ 0x65
 80192f4:	d001      	beq.n	80192fa <_strtod_l+0x172>
 80192f6:	2a45      	cmp	r2, #69	@ 0x45
 80192f8:	d114      	bne.n	8019324 <_strtod_l+0x19c>
 80192fa:	b91d      	cbnz	r5, 8019304 <_strtod_l+0x17c>
 80192fc:	9a08      	ldr	r2, [sp, #32]
 80192fe:	4302      	orrs	r2, r0
 8019300:	d096      	beq.n	8019230 <_strtod_l+0xa8>
 8019302:	2500      	movs	r5, #0
 8019304:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019306:	1c62      	adds	r2, r4, #1
 8019308:	9219      	str	r2, [sp, #100]	@ 0x64
 801930a:	7862      	ldrb	r2, [r4, #1]
 801930c:	2a2b      	cmp	r2, #43	@ 0x2b
 801930e:	d07a      	beq.n	8019406 <_strtod_l+0x27e>
 8019310:	2a2d      	cmp	r2, #45	@ 0x2d
 8019312:	d07e      	beq.n	8019412 <_strtod_l+0x28a>
 8019314:	f04f 0c00 	mov.w	ip, #0
 8019318:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801931c:	2909      	cmp	r1, #9
 801931e:	f240 8085 	bls.w	801942c <_strtod_l+0x2a4>
 8019322:	9419      	str	r4, [sp, #100]	@ 0x64
 8019324:	f04f 0800 	mov.w	r8, #0
 8019328:	e0a5      	b.n	8019476 <_strtod_l+0x2ee>
 801932a:	2300      	movs	r3, #0
 801932c:	e7c8      	b.n	80192c0 <_strtod_l+0x138>
 801932e:	f1b9 0f08 	cmp.w	r9, #8
 8019332:	bfd8      	it	le
 8019334:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8019336:	f100 0001 	add.w	r0, r0, #1
 801933a:	bfda      	itte	le
 801933c:	fb02 3301 	mlale	r3, r2, r1, r3
 8019340:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8019342:	fb02 3707 	mlagt	r7, r2, r7, r3
 8019346:	f109 0901 	add.w	r9, r9, #1
 801934a:	9019      	str	r0, [sp, #100]	@ 0x64
 801934c:	e7bf      	b.n	80192ce <_strtod_l+0x146>
 801934e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019350:	1c5a      	adds	r2, r3, #1
 8019352:	9219      	str	r2, [sp, #100]	@ 0x64
 8019354:	785a      	ldrb	r2, [r3, #1]
 8019356:	f1b9 0f00 	cmp.w	r9, #0
 801935a:	d03b      	beq.n	80193d4 <_strtod_l+0x24c>
 801935c:	900a      	str	r0, [sp, #40]	@ 0x28
 801935e:	464d      	mov	r5, r9
 8019360:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8019364:	2b09      	cmp	r3, #9
 8019366:	d912      	bls.n	801938e <_strtod_l+0x206>
 8019368:	2301      	movs	r3, #1
 801936a:	e7c2      	b.n	80192f2 <_strtod_l+0x16a>
 801936c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801936e:	1c5a      	adds	r2, r3, #1
 8019370:	9219      	str	r2, [sp, #100]	@ 0x64
 8019372:	785a      	ldrb	r2, [r3, #1]
 8019374:	3001      	adds	r0, #1
 8019376:	2a30      	cmp	r2, #48	@ 0x30
 8019378:	d0f8      	beq.n	801936c <_strtod_l+0x1e4>
 801937a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801937e:	2b08      	cmp	r3, #8
 8019380:	f200 84d2 	bhi.w	8019d28 <_strtod_l+0xba0>
 8019384:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019386:	900a      	str	r0, [sp, #40]	@ 0x28
 8019388:	2000      	movs	r0, #0
 801938a:	930c      	str	r3, [sp, #48]	@ 0x30
 801938c:	4605      	mov	r5, r0
 801938e:	3a30      	subs	r2, #48	@ 0x30
 8019390:	f100 0301 	add.w	r3, r0, #1
 8019394:	d018      	beq.n	80193c8 <_strtod_l+0x240>
 8019396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019398:	4419      	add	r1, r3
 801939a:	910a      	str	r1, [sp, #40]	@ 0x28
 801939c:	462e      	mov	r6, r5
 801939e:	f04f 0e0a 	mov.w	lr, #10
 80193a2:	1c71      	adds	r1, r6, #1
 80193a4:	eba1 0c05 	sub.w	ip, r1, r5
 80193a8:	4563      	cmp	r3, ip
 80193aa:	dc15      	bgt.n	80193d8 <_strtod_l+0x250>
 80193ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80193b0:	182b      	adds	r3, r5, r0
 80193b2:	2b08      	cmp	r3, #8
 80193b4:	f105 0501 	add.w	r5, r5, #1
 80193b8:	4405      	add	r5, r0
 80193ba:	dc1a      	bgt.n	80193f2 <_strtod_l+0x26a>
 80193bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80193be:	230a      	movs	r3, #10
 80193c0:	fb03 2301 	mla	r3, r3, r1, r2
 80193c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193c6:	2300      	movs	r3, #0
 80193c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80193ca:	1c51      	adds	r1, r2, #1
 80193cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80193ce:	7852      	ldrb	r2, [r2, #1]
 80193d0:	4618      	mov	r0, r3
 80193d2:	e7c5      	b.n	8019360 <_strtod_l+0x1d8>
 80193d4:	4648      	mov	r0, r9
 80193d6:	e7ce      	b.n	8019376 <_strtod_l+0x1ee>
 80193d8:	2e08      	cmp	r6, #8
 80193da:	dc05      	bgt.n	80193e8 <_strtod_l+0x260>
 80193dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80193de:	fb0e f606 	mul.w	r6, lr, r6
 80193e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80193e4:	460e      	mov	r6, r1
 80193e6:	e7dc      	b.n	80193a2 <_strtod_l+0x21a>
 80193e8:	2910      	cmp	r1, #16
 80193ea:	bfd8      	it	le
 80193ec:	fb0e f707 	mulle.w	r7, lr, r7
 80193f0:	e7f8      	b.n	80193e4 <_strtod_l+0x25c>
 80193f2:	2b0f      	cmp	r3, #15
 80193f4:	bfdc      	itt	le
 80193f6:	230a      	movle	r3, #10
 80193f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80193fc:	e7e3      	b.n	80193c6 <_strtod_l+0x23e>
 80193fe:	2300      	movs	r3, #0
 8019400:	930a      	str	r3, [sp, #40]	@ 0x28
 8019402:	2301      	movs	r3, #1
 8019404:	e77a      	b.n	80192fc <_strtod_l+0x174>
 8019406:	f04f 0c00 	mov.w	ip, #0
 801940a:	1ca2      	adds	r2, r4, #2
 801940c:	9219      	str	r2, [sp, #100]	@ 0x64
 801940e:	78a2      	ldrb	r2, [r4, #2]
 8019410:	e782      	b.n	8019318 <_strtod_l+0x190>
 8019412:	f04f 0c01 	mov.w	ip, #1
 8019416:	e7f8      	b.n	801940a <_strtod_l+0x282>
 8019418:	080208fc 	.word	0x080208fc
 801941c:	080202d8 	.word	0x080202d8
 8019420:	7ff00000 	.word	0x7ff00000
 8019424:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019426:	1c51      	adds	r1, r2, #1
 8019428:	9119      	str	r1, [sp, #100]	@ 0x64
 801942a:	7852      	ldrb	r2, [r2, #1]
 801942c:	2a30      	cmp	r2, #48	@ 0x30
 801942e:	d0f9      	beq.n	8019424 <_strtod_l+0x29c>
 8019430:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019434:	2908      	cmp	r1, #8
 8019436:	f63f af75 	bhi.w	8019324 <_strtod_l+0x19c>
 801943a:	3a30      	subs	r2, #48	@ 0x30
 801943c:	9209      	str	r2, [sp, #36]	@ 0x24
 801943e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019440:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019442:	f04f 080a 	mov.w	r8, #10
 8019446:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019448:	1c56      	adds	r6, r2, #1
 801944a:	9619      	str	r6, [sp, #100]	@ 0x64
 801944c:	7852      	ldrb	r2, [r2, #1]
 801944e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019452:	f1be 0f09 	cmp.w	lr, #9
 8019456:	d939      	bls.n	80194cc <_strtod_l+0x344>
 8019458:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801945a:	1a76      	subs	r6, r6, r1
 801945c:	2e08      	cmp	r6, #8
 801945e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019462:	dc03      	bgt.n	801946c <_strtod_l+0x2e4>
 8019464:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019466:	4588      	cmp	r8, r1
 8019468:	bfa8      	it	ge
 801946a:	4688      	movge	r8, r1
 801946c:	f1bc 0f00 	cmp.w	ip, #0
 8019470:	d001      	beq.n	8019476 <_strtod_l+0x2ee>
 8019472:	f1c8 0800 	rsb	r8, r8, #0
 8019476:	2d00      	cmp	r5, #0
 8019478:	d14e      	bne.n	8019518 <_strtod_l+0x390>
 801947a:	9908      	ldr	r1, [sp, #32]
 801947c:	4308      	orrs	r0, r1
 801947e:	f47f aebc 	bne.w	80191fa <_strtod_l+0x72>
 8019482:	2b00      	cmp	r3, #0
 8019484:	f47f aed4 	bne.w	8019230 <_strtod_l+0xa8>
 8019488:	2a69      	cmp	r2, #105	@ 0x69
 801948a:	d028      	beq.n	80194de <_strtod_l+0x356>
 801948c:	dc25      	bgt.n	80194da <_strtod_l+0x352>
 801948e:	2a49      	cmp	r2, #73	@ 0x49
 8019490:	d025      	beq.n	80194de <_strtod_l+0x356>
 8019492:	2a4e      	cmp	r2, #78	@ 0x4e
 8019494:	f47f aecc 	bne.w	8019230 <_strtod_l+0xa8>
 8019498:	499a      	ldr	r1, [pc, #616]	@ (8019704 <_strtod_l+0x57c>)
 801949a:	a819      	add	r0, sp, #100	@ 0x64
 801949c:	f003 f958 	bl	801c750 <__match>
 80194a0:	2800      	cmp	r0, #0
 80194a2:	f43f aec5 	beq.w	8019230 <_strtod_l+0xa8>
 80194a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	2b28      	cmp	r3, #40	@ 0x28
 80194ac:	d12e      	bne.n	801950c <_strtod_l+0x384>
 80194ae:	4996      	ldr	r1, [pc, #600]	@ (8019708 <_strtod_l+0x580>)
 80194b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80194b2:	a819      	add	r0, sp, #100	@ 0x64
 80194b4:	f003 f960 	bl	801c778 <__hexnan>
 80194b8:	2805      	cmp	r0, #5
 80194ba:	d127      	bne.n	801950c <_strtod_l+0x384>
 80194bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80194be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80194c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80194c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80194ca:	e696      	b.n	80191fa <_strtod_l+0x72>
 80194cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80194ce:	fb08 2101 	mla	r1, r8, r1, r2
 80194d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80194d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80194d8:	e7b5      	b.n	8019446 <_strtod_l+0x2be>
 80194da:	2a6e      	cmp	r2, #110	@ 0x6e
 80194dc:	e7da      	b.n	8019494 <_strtod_l+0x30c>
 80194de:	498b      	ldr	r1, [pc, #556]	@ (801970c <_strtod_l+0x584>)
 80194e0:	a819      	add	r0, sp, #100	@ 0x64
 80194e2:	f003 f935 	bl	801c750 <__match>
 80194e6:	2800      	cmp	r0, #0
 80194e8:	f43f aea2 	beq.w	8019230 <_strtod_l+0xa8>
 80194ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80194ee:	4988      	ldr	r1, [pc, #544]	@ (8019710 <_strtod_l+0x588>)
 80194f0:	3b01      	subs	r3, #1
 80194f2:	a819      	add	r0, sp, #100	@ 0x64
 80194f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80194f6:	f003 f92b 	bl	801c750 <__match>
 80194fa:	b910      	cbnz	r0, 8019502 <_strtod_l+0x37a>
 80194fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80194fe:	3301      	adds	r3, #1
 8019500:	9319      	str	r3, [sp, #100]	@ 0x64
 8019502:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8019720 <_strtod_l+0x598>
 8019506:	f04f 0a00 	mov.w	sl, #0
 801950a:	e676      	b.n	80191fa <_strtod_l+0x72>
 801950c:	4881      	ldr	r0, [pc, #516]	@ (8019714 <_strtod_l+0x58c>)
 801950e:	f001 ffcb 	bl	801b4a8 <nan>
 8019512:	ec5b ab10 	vmov	sl, fp, d0
 8019516:	e670      	b.n	80191fa <_strtod_l+0x72>
 8019518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801951a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801951c:	eba8 0303 	sub.w	r3, r8, r3
 8019520:	f1b9 0f00 	cmp.w	r9, #0
 8019524:	bf08      	it	eq
 8019526:	46a9      	moveq	r9, r5
 8019528:	2d10      	cmp	r5, #16
 801952a:	9309      	str	r3, [sp, #36]	@ 0x24
 801952c:	462c      	mov	r4, r5
 801952e:	bfa8      	it	ge
 8019530:	2410      	movge	r4, #16
 8019532:	f7e6 ffe7 	bl	8000504 <__aeabi_ui2d>
 8019536:	2d09      	cmp	r5, #9
 8019538:	4682      	mov	sl, r0
 801953a:	468b      	mov	fp, r1
 801953c:	dc13      	bgt.n	8019566 <_strtod_l+0x3de>
 801953e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019540:	2b00      	cmp	r3, #0
 8019542:	f43f ae5a 	beq.w	80191fa <_strtod_l+0x72>
 8019546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019548:	dd78      	ble.n	801963c <_strtod_l+0x4b4>
 801954a:	2b16      	cmp	r3, #22
 801954c:	dc5f      	bgt.n	801960e <_strtod_l+0x486>
 801954e:	4972      	ldr	r1, [pc, #456]	@ (8019718 <_strtod_l+0x590>)
 8019550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019558:	4652      	mov	r2, sl
 801955a:	465b      	mov	r3, fp
 801955c:	f7e7 f84c 	bl	80005f8 <__aeabi_dmul>
 8019560:	4682      	mov	sl, r0
 8019562:	468b      	mov	fp, r1
 8019564:	e649      	b.n	80191fa <_strtod_l+0x72>
 8019566:	4b6c      	ldr	r3, [pc, #432]	@ (8019718 <_strtod_l+0x590>)
 8019568:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801956c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019570:	f7e7 f842 	bl	80005f8 <__aeabi_dmul>
 8019574:	4682      	mov	sl, r0
 8019576:	4638      	mov	r0, r7
 8019578:	468b      	mov	fp, r1
 801957a:	f7e6 ffc3 	bl	8000504 <__aeabi_ui2d>
 801957e:	4602      	mov	r2, r0
 8019580:	460b      	mov	r3, r1
 8019582:	4650      	mov	r0, sl
 8019584:	4659      	mov	r1, fp
 8019586:	f7e6 fe81 	bl	800028c <__adddf3>
 801958a:	2d0f      	cmp	r5, #15
 801958c:	4682      	mov	sl, r0
 801958e:	468b      	mov	fp, r1
 8019590:	ddd5      	ble.n	801953e <_strtod_l+0x3b6>
 8019592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019594:	1b2c      	subs	r4, r5, r4
 8019596:	441c      	add	r4, r3
 8019598:	2c00      	cmp	r4, #0
 801959a:	f340 8093 	ble.w	80196c4 <_strtod_l+0x53c>
 801959e:	f014 030f 	ands.w	r3, r4, #15
 80195a2:	d00a      	beq.n	80195ba <_strtod_l+0x432>
 80195a4:	495c      	ldr	r1, [pc, #368]	@ (8019718 <_strtod_l+0x590>)
 80195a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80195aa:	4652      	mov	r2, sl
 80195ac:	465b      	mov	r3, fp
 80195ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80195b2:	f7e7 f821 	bl	80005f8 <__aeabi_dmul>
 80195b6:	4682      	mov	sl, r0
 80195b8:	468b      	mov	fp, r1
 80195ba:	f034 040f 	bics.w	r4, r4, #15
 80195be:	d073      	beq.n	80196a8 <_strtod_l+0x520>
 80195c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80195c4:	dd49      	ble.n	801965a <_strtod_l+0x4d2>
 80195c6:	2400      	movs	r4, #0
 80195c8:	46a0      	mov	r8, r4
 80195ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80195cc:	46a1      	mov	r9, r4
 80195ce:	9a05      	ldr	r2, [sp, #20]
 80195d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8019720 <_strtod_l+0x598>
 80195d4:	2322      	movs	r3, #34	@ 0x22
 80195d6:	6013      	str	r3, [r2, #0]
 80195d8:	f04f 0a00 	mov.w	sl, #0
 80195dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80195de:	2b00      	cmp	r3, #0
 80195e0:	f43f ae0b 	beq.w	80191fa <_strtod_l+0x72>
 80195e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80195e6:	9805      	ldr	r0, [sp, #20]
 80195e8:	f003 fa6a 	bl	801cac0 <_Bfree>
 80195ec:	9805      	ldr	r0, [sp, #20]
 80195ee:	4649      	mov	r1, r9
 80195f0:	f003 fa66 	bl	801cac0 <_Bfree>
 80195f4:	9805      	ldr	r0, [sp, #20]
 80195f6:	4641      	mov	r1, r8
 80195f8:	f003 fa62 	bl	801cac0 <_Bfree>
 80195fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80195fe:	9805      	ldr	r0, [sp, #20]
 8019600:	f003 fa5e 	bl	801cac0 <_Bfree>
 8019604:	9805      	ldr	r0, [sp, #20]
 8019606:	4621      	mov	r1, r4
 8019608:	f003 fa5a 	bl	801cac0 <_Bfree>
 801960c:	e5f5      	b.n	80191fa <_strtod_l+0x72>
 801960e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019610:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019614:	4293      	cmp	r3, r2
 8019616:	dbbc      	blt.n	8019592 <_strtod_l+0x40a>
 8019618:	4c3f      	ldr	r4, [pc, #252]	@ (8019718 <_strtod_l+0x590>)
 801961a:	f1c5 050f 	rsb	r5, r5, #15
 801961e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019622:	4652      	mov	r2, sl
 8019624:	465b      	mov	r3, fp
 8019626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801962a:	f7e6 ffe5 	bl	80005f8 <__aeabi_dmul>
 801962e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019630:	1b5d      	subs	r5, r3, r5
 8019632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019636:	e9d4 2300 	ldrd	r2, r3, [r4]
 801963a:	e78f      	b.n	801955c <_strtod_l+0x3d4>
 801963c:	3316      	adds	r3, #22
 801963e:	dba8      	blt.n	8019592 <_strtod_l+0x40a>
 8019640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019642:	eba3 0808 	sub.w	r8, r3, r8
 8019646:	4b34      	ldr	r3, [pc, #208]	@ (8019718 <_strtod_l+0x590>)
 8019648:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801964c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019650:	4650      	mov	r0, sl
 8019652:	4659      	mov	r1, fp
 8019654:	f7e7 f8fa 	bl	800084c <__aeabi_ddiv>
 8019658:	e782      	b.n	8019560 <_strtod_l+0x3d8>
 801965a:	2300      	movs	r3, #0
 801965c:	4f2f      	ldr	r7, [pc, #188]	@ (801971c <_strtod_l+0x594>)
 801965e:	1124      	asrs	r4, r4, #4
 8019660:	4650      	mov	r0, sl
 8019662:	4659      	mov	r1, fp
 8019664:	461e      	mov	r6, r3
 8019666:	2c01      	cmp	r4, #1
 8019668:	dc21      	bgt.n	80196ae <_strtod_l+0x526>
 801966a:	b10b      	cbz	r3, 8019670 <_strtod_l+0x4e8>
 801966c:	4682      	mov	sl, r0
 801966e:	468b      	mov	fp, r1
 8019670:	492a      	ldr	r1, [pc, #168]	@ (801971c <_strtod_l+0x594>)
 8019672:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019676:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801967a:	4652      	mov	r2, sl
 801967c:	465b      	mov	r3, fp
 801967e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019682:	f7e6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8019686:	4b26      	ldr	r3, [pc, #152]	@ (8019720 <_strtod_l+0x598>)
 8019688:	460a      	mov	r2, r1
 801968a:	400b      	ands	r3, r1
 801968c:	4925      	ldr	r1, [pc, #148]	@ (8019724 <_strtod_l+0x59c>)
 801968e:	428b      	cmp	r3, r1
 8019690:	4682      	mov	sl, r0
 8019692:	d898      	bhi.n	80195c6 <_strtod_l+0x43e>
 8019694:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019698:	428b      	cmp	r3, r1
 801969a:	bf86      	itte	hi
 801969c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8019728 <_strtod_l+0x5a0>
 80196a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80196a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80196a8:	2300      	movs	r3, #0
 80196aa:	9308      	str	r3, [sp, #32]
 80196ac:	e076      	b.n	801979c <_strtod_l+0x614>
 80196ae:	07e2      	lsls	r2, r4, #31
 80196b0:	d504      	bpl.n	80196bc <_strtod_l+0x534>
 80196b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80196b6:	f7e6 ff9f 	bl	80005f8 <__aeabi_dmul>
 80196ba:	2301      	movs	r3, #1
 80196bc:	3601      	adds	r6, #1
 80196be:	1064      	asrs	r4, r4, #1
 80196c0:	3708      	adds	r7, #8
 80196c2:	e7d0      	b.n	8019666 <_strtod_l+0x4de>
 80196c4:	d0f0      	beq.n	80196a8 <_strtod_l+0x520>
 80196c6:	4264      	negs	r4, r4
 80196c8:	f014 020f 	ands.w	r2, r4, #15
 80196cc:	d00a      	beq.n	80196e4 <_strtod_l+0x55c>
 80196ce:	4b12      	ldr	r3, [pc, #72]	@ (8019718 <_strtod_l+0x590>)
 80196d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80196d4:	4650      	mov	r0, sl
 80196d6:	4659      	mov	r1, fp
 80196d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196dc:	f7e7 f8b6 	bl	800084c <__aeabi_ddiv>
 80196e0:	4682      	mov	sl, r0
 80196e2:	468b      	mov	fp, r1
 80196e4:	1124      	asrs	r4, r4, #4
 80196e6:	d0df      	beq.n	80196a8 <_strtod_l+0x520>
 80196e8:	2c1f      	cmp	r4, #31
 80196ea:	dd1f      	ble.n	801972c <_strtod_l+0x5a4>
 80196ec:	2400      	movs	r4, #0
 80196ee:	46a0      	mov	r8, r4
 80196f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80196f2:	46a1      	mov	r9, r4
 80196f4:	9a05      	ldr	r2, [sp, #20]
 80196f6:	2322      	movs	r3, #34	@ 0x22
 80196f8:	f04f 0a00 	mov.w	sl, #0
 80196fc:	f04f 0b00 	mov.w	fp, #0
 8019700:	6013      	str	r3, [r2, #0]
 8019702:	e76b      	b.n	80195dc <_strtod_l+0x454>
 8019704:	080202e7 	.word	0x080202e7
 8019708:	080208e8 	.word	0x080208e8
 801970c:	080202df 	.word	0x080202df
 8019710:	08020369 	.word	0x08020369
 8019714:	08020365 	.word	0x08020365
 8019718:	08020a70 	.word	0x08020a70
 801971c:	08020a48 	.word	0x08020a48
 8019720:	7ff00000 	.word	0x7ff00000
 8019724:	7ca00000 	.word	0x7ca00000
 8019728:	7fefffff 	.word	0x7fefffff
 801972c:	f014 0310 	ands.w	r3, r4, #16
 8019730:	bf18      	it	ne
 8019732:	236a      	movne	r3, #106	@ 0x6a
 8019734:	4ea9      	ldr	r6, [pc, #676]	@ (80199dc <_strtod_l+0x854>)
 8019736:	9308      	str	r3, [sp, #32]
 8019738:	4650      	mov	r0, sl
 801973a:	4659      	mov	r1, fp
 801973c:	2300      	movs	r3, #0
 801973e:	07e7      	lsls	r7, r4, #31
 8019740:	d504      	bpl.n	801974c <_strtod_l+0x5c4>
 8019742:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019746:	f7e6 ff57 	bl	80005f8 <__aeabi_dmul>
 801974a:	2301      	movs	r3, #1
 801974c:	1064      	asrs	r4, r4, #1
 801974e:	f106 0608 	add.w	r6, r6, #8
 8019752:	d1f4      	bne.n	801973e <_strtod_l+0x5b6>
 8019754:	b10b      	cbz	r3, 801975a <_strtod_l+0x5d2>
 8019756:	4682      	mov	sl, r0
 8019758:	468b      	mov	fp, r1
 801975a:	9b08      	ldr	r3, [sp, #32]
 801975c:	b1b3      	cbz	r3, 801978c <_strtod_l+0x604>
 801975e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019762:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019766:	2b00      	cmp	r3, #0
 8019768:	4659      	mov	r1, fp
 801976a:	dd0f      	ble.n	801978c <_strtod_l+0x604>
 801976c:	2b1f      	cmp	r3, #31
 801976e:	dd56      	ble.n	801981e <_strtod_l+0x696>
 8019770:	2b34      	cmp	r3, #52	@ 0x34
 8019772:	bfde      	ittt	le
 8019774:	f04f 33ff 	movle.w	r3, #4294967295
 8019778:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801977c:	4093      	lslle	r3, r2
 801977e:	f04f 0a00 	mov.w	sl, #0
 8019782:	bfcc      	ite	gt
 8019784:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019788:	ea03 0b01 	andle.w	fp, r3, r1
 801978c:	2200      	movs	r2, #0
 801978e:	2300      	movs	r3, #0
 8019790:	4650      	mov	r0, sl
 8019792:	4659      	mov	r1, fp
 8019794:	f7e7 f998 	bl	8000ac8 <__aeabi_dcmpeq>
 8019798:	2800      	cmp	r0, #0
 801979a:	d1a7      	bne.n	80196ec <_strtod_l+0x564>
 801979c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801979e:	9300      	str	r3, [sp, #0]
 80197a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80197a2:	9805      	ldr	r0, [sp, #20]
 80197a4:	462b      	mov	r3, r5
 80197a6:	464a      	mov	r2, r9
 80197a8:	f003 f9f2 	bl	801cb90 <__s2b>
 80197ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80197ae:	2800      	cmp	r0, #0
 80197b0:	f43f af09 	beq.w	80195c6 <_strtod_l+0x43e>
 80197b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80197b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80197b8:	2a00      	cmp	r2, #0
 80197ba:	eba3 0308 	sub.w	r3, r3, r8
 80197be:	bfa8      	it	ge
 80197c0:	2300      	movge	r3, #0
 80197c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80197c4:	2400      	movs	r4, #0
 80197c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80197ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80197cc:	46a0      	mov	r8, r4
 80197ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80197d0:	9805      	ldr	r0, [sp, #20]
 80197d2:	6859      	ldr	r1, [r3, #4]
 80197d4:	f003 f934 	bl	801ca40 <_Balloc>
 80197d8:	4681      	mov	r9, r0
 80197da:	2800      	cmp	r0, #0
 80197dc:	f43f aef7 	beq.w	80195ce <_strtod_l+0x446>
 80197e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80197e2:	691a      	ldr	r2, [r3, #16]
 80197e4:	3202      	adds	r2, #2
 80197e6:	f103 010c 	add.w	r1, r3, #12
 80197ea:	0092      	lsls	r2, r2, #2
 80197ec:	300c      	adds	r0, #12
 80197ee:	f001 fe4c 	bl	801b48a <memcpy>
 80197f2:	ec4b ab10 	vmov	d0, sl, fp
 80197f6:	9805      	ldr	r0, [sp, #20]
 80197f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80197fa:	a91b      	add	r1, sp, #108	@ 0x6c
 80197fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019800:	f003 fcfa 	bl	801d1f8 <__d2b>
 8019804:	901a      	str	r0, [sp, #104]	@ 0x68
 8019806:	2800      	cmp	r0, #0
 8019808:	f43f aee1 	beq.w	80195ce <_strtod_l+0x446>
 801980c:	9805      	ldr	r0, [sp, #20]
 801980e:	2101      	movs	r1, #1
 8019810:	f003 fa54 	bl	801ccbc <__i2b>
 8019814:	4680      	mov	r8, r0
 8019816:	b948      	cbnz	r0, 801982c <_strtod_l+0x6a4>
 8019818:	f04f 0800 	mov.w	r8, #0
 801981c:	e6d7      	b.n	80195ce <_strtod_l+0x446>
 801981e:	f04f 32ff 	mov.w	r2, #4294967295
 8019822:	fa02 f303 	lsl.w	r3, r2, r3
 8019826:	ea03 0a0a 	and.w	sl, r3, sl
 801982a:	e7af      	b.n	801978c <_strtod_l+0x604>
 801982c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801982e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019830:	2d00      	cmp	r5, #0
 8019832:	bfab      	itete	ge
 8019834:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019836:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019838:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801983a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801983c:	bfac      	ite	ge
 801983e:	18ef      	addge	r7, r5, r3
 8019840:	1b5e      	sublt	r6, r3, r5
 8019842:	9b08      	ldr	r3, [sp, #32]
 8019844:	1aed      	subs	r5, r5, r3
 8019846:	4415      	add	r5, r2
 8019848:	4b65      	ldr	r3, [pc, #404]	@ (80199e0 <_strtod_l+0x858>)
 801984a:	3d01      	subs	r5, #1
 801984c:	429d      	cmp	r5, r3
 801984e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019852:	da50      	bge.n	80198f6 <_strtod_l+0x76e>
 8019854:	1b5b      	subs	r3, r3, r5
 8019856:	2b1f      	cmp	r3, #31
 8019858:	eba2 0203 	sub.w	r2, r2, r3
 801985c:	f04f 0101 	mov.w	r1, #1
 8019860:	dc3d      	bgt.n	80198de <_strtod_l+0x756>
 8019862:	fa01 f303 	lsl.w	r3, r1, r3
 8019866:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019868:	2300      	movs	r3, #0
 801986a:	9310      	str	r3, [sp, #64]	@ 0x40
 801986c:	18bd      	adds	r5, r7, r2
 801986e:	9b08      	ldr	r3, [sp, #32]
 8019870:	42af      	cmp	r7, r5
 8019872:	4416      	add	r6, r2
 8019874:	441e      	add	r6, r3
 8019876:	463b      	mov	r3, r7
 8019878:	bfa8      	it	ge
 801987a:	462b      	movge	r3, r5
 801987c:	42b3      	cmp	r3, r6
 801987e:	bfa8      	it	ge
 8019880:	4633      	movge	r3, r6
 8019882:	2b00      	cmp	r3, #0
 8019884:	bfc2      	ittt	gt
 8019886:	1aed      	subgt	r5, r5, r3
 8019888:	1af6      	subgt	r6, r6, r3
 801988a:	1aff      	subgt	r7, r7, r3
 801988c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801988e:	2b00      	cmp	r3, #0
 8019890:	dd16      	ble.n	80198c0 <_strtod_l+0x738>
 8019892:	4641      	mov	r1, r8
 8019894:	9805      	ldr	r0, [sp, #20]
 8019896:	461a      	mov	r2, r3
 8019898:	f003 fac8 	bl	801ce2c <__pow5mult>
 801989c:	4680      	mov	r8, r0
 801989e:	2800      	cmp	r0, #0
 80198a0:	d0ba      	beq.n	8019818 <_strtod_l+0x690>
 80198a2:	4601      	mov	r1, r0
 80198a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80198a6:	9805      	ldr	r0, [sp, #20]
 80198a8:	f003 fa1e 	bl	801cce8 <__multiply>
 80198ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80198ae:	2800      	cmp	r0, #0
 80198b0:	f43f ae8d 	beq.w	80195ce <_strtod_l+0x446>
 80198b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80198b6:	9805      	ldr	r0, [sp, #20]
 80198b8:	f003 f902 	bl	801cac0 <_Bfree>
 80198bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80198be:	931a      	str	r3, [sp, #104]	@ 0x68
 80198c0:	2d00      	cmp	r5, #0
 80198c2:	dc1d      	bgt.n	8019900 <_strtod_l+0x778>
 80198c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	dd23      	ble.n	8019912 <_strtod_l+0x78a>
 80198ca:	4649      	mov	r1, r9
 80198cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80198ce:	9805      	ldr	r0, [sp, #20]
 80198d0:	f003 faac 	bl	801ce2c <__pow5mult>
 80198d4:	4681      	mov	r9, r0
 80198d6:	b9e0      	cbnz	r0, 8019912 <_strtod_l+0x78a>
 80198d8:	f04f 0900 	mov.w	r9, #0
 80198dc:	e677      	b.n	80195ce <_strtod_l+0x446>
 80198de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80198e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80198e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80198ea:	35e2      	adds	r5, #226	@ 0xe2
 80198ec:	fa01 f305 	lsl.w	r3, r1, r5
 80198f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80198f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80198f4:	e7ba      	b.n	801986c <_strtod_l+0x6e4>
 80198f6:	2300      	movs	r3, #0
 80198f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80198fa:	2301      	movs	r3, #1
 80198fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80198fe:	e7b5      	b.n	801986c <_strtod_l+0x6e4>
 8019900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019902:	9805      	ldr	r0, [sp, #20]
 8019904:	462a      	mov	r2, r5
 8019906:	f003 faeb 	bl	801cee0 <__lshift>
 801990a:	901a      	str	r0, [sp, #104]	@ 0x68
 801990c:	2800      	cmp	r0, #0
 801990e:	d1d9      	bne.n	80198c4 <_strtod_l+0x73c>
 8019910:	e65d      	b.n	80195ce <_strtod_l+0x446>
 8019912:	2e00      	cmp	r6, #0
 8019914:	dd07      	ble.n	8019926 <_strtod_l+0x79e>
 8019916:	4649      	mov	r1, r9
 8019918:	9805      	ldr	r0, [sp, #20]
 801991a:	4632      	mov	r2, r6
 801991c:	f003 fae0 	bl	801cee0 <__lshift>
 8019920:	4681      	mov	r9, r0
 8019922:	2800      	cmp	r0, #0
 8019924:	d0d8      	beq.n	80198d8 <_strtod_l+0x750>
 8019926:	2f00      	cmp	r7, #0
 8019928:	dd08      	ble.n	801993c <_strtod_l+0x7b4>
 801992a:	4641      	mov	r1, r8
 801992c:	9805      	ldr	r0, [sp, #20]
 801992e:	463a      	mov	r2, r7
 8019930:	f003 fad6 	bl	801cee0 <__lshift>
 8019934:	4680      	mov	r8, r0
 8019936:	2800      	cmp	r0, #0
 8019938:	f43f ae49 	beq.w	80195ce <_strtod_l+0x446>
 801993c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801993e:	9805      	ldr	r0, [sp, #20]
 8019940:	464a      	mov	r2, r9
 8019942:	f003 fb55 	bl	801cff0 <__mdiff>
 8019946:	4604      	mov	r4, r0
 8019948:	2800      	cmp	r0, #0
 801994a:	f43f ae40 	beq.w	80195ce <_strtod_l+0x446>
 801994e:	68c3      	ldr	r3, [r0, #12]
 8019950:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019952:	2300      	movs	r3, #0
 8019954:	60c3      	str	r3, [r0, #12]
 8019956:	4641      	mov	r1, r8
 8019958:	f003 fb2e 	bl	801cfb8 <__mcmp>
 801995c:	2800      	cmp	r0, #0
 801995e:	da45      	bge.n	80199ec <_strtod_l+0x864>
 8019960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019962:	ea53 030a 	orrs.w	r3, r3, sl
 8019966:	d16b      	bne.n	8019a40 <_strtod_l+0x8b8>
 8019968:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801996c:	2b00      	cmp	r3, #0
 801996e:	d167      	bne.n	8019a40 <_strtod_l+0x8b8>
 8019970:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019974:	0d1b      	lsrs	r3, r3, #20
 8019976:	051b      	lsls	r3, r3, #20
 8019978:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801997c:	d960      	bls.n	8019a40 <_strtod_l+0x8b8>
 801997e:	6963      	ldr	r3, [r4, #20]
 8019980:	b913      	cbnz	r3, 8019988 <_strtod_l+0x800>
 8019982:	6923      	ldr	r3, [r4, #16]
 8019984:	2b01      	cmp	r3, #1
 8019986:	dd5b      	ble.n	8019a40 <_strtod_l+0x8b8>
 8019988:	4621      	mov	r1, r4
 801998a:	2201      	movs	r2, #1
 801998c:	9805      	ldr	r0, [sp, #20]
 801998e:	f003 faa7 	bl	801cee0 <__lshift>
 8019992:	4641      	mov	r1, r8
 8019994:	4604      	mov	r4, r0
 8019996:	f003 fb0f 	bl	801cfb8 <__mcmp>
 801999a:	2800      	cmp	r0, #0
 801999c:	dd50      	ble.n	8019a40 <_strtod_l+0x8b8>
 801999e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80199a2:	9a08      	ldr	r2, [sp, #32]
 80199a4:	0d1b      	lsrs	r3, r3, #20
 80199a6:	051b      	lsls	r3, r3, #20
 80199a8:	2a00      	cmp	r2, #0
 80199aa:	d06a      	beq.n	8019a82 <_strtod_l+0x8fa>
 80199ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80199b0:	d867      	bhi.n	8019a82 <_strtod_l+0x8fa>
 80199b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80199b6:	f67f ae9d 	bls.w	80196f4 <_strtod_l+0x56c>
 80199ba:	4b0a      	ldr	r3, [pc, #40]	@ (80199e4 <_strtod_l+0x85c>)
 80199bc:	4650      	mov	r0, sl
 80199be:	4659      	mov	r1, fp
 80199c0:	2200      	movs	r2, #0
 80199c2:	f7e6 fe19 	bl	80005f8 <__aeabi_dmul>
 80199c6:	4b08      	ldr	r3, [pc, #32]	@ (80199e8 <_strtod_l+0x860>)
 80199c8:	400b      	ands	r3, r1
 80199ca:	4682      	mov	sl, r0
 80199cc:	468b      	mov	fp, r1
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	f47f ae08 	bne.w	80195e4 <_strtod_l+0x45c>
 80199d4:	9a05      	ldr	r2, [sp, #20]
 80199d6:	2322      	movs	r3, #34	@ 0x22
 80199d8:	6013      	str	r3, [r2, #0]
 80199da:	e603      	b.n	80195e4 <_strtod_l+0x45c>
 80199dc:	08020910 	.word	0x08020910
 80199e0:	fffffc02 	.word	0xfffffc02
 80199e4:	39500000 	.word	0x39500000
 80199e8:	7ff00000 	.word	0x7ff00000
 80199ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80199f0:	d165      	bne.n	8019abe <_strtod_l+0x936>
 80199f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80199f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80199f8:	b35a      	cbz	r2, 8019a52 <_strtod_l+0x8ca>
 80199fa:	4a9f      	ldr	r2, [pc, #636]	@ (8019c78 <_strtod_l+0xaf0>)
 80199fc:	4293      	cmp	r3, r2
 80199fe:	d12b      	bne.n	8019a58 <_strtod_l+0x8d0>
 8019a00:	9b08      	ldr	r3, [sp, #32]
 8019a02:	4651      	mov	r1, sl
 8019a04:	b303      	cbz	r3, 8019a48 <_strtod_l+0x8c0>
 8019a06:	4b9d      	ldr	r3, [pc, #628]	@ (8019c7c <_strtod_l+0xaf4>)
 8019a08:	465a      	mov	r2, fp
 8019a0a:	4013      	ands	r3, r2
 8019a0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019a10:	f04f 32ff 	mov.w	r2, #4294967295
 8019a14:	d81b      	bhi.n	8019a4e <_strtod_l+0x8c6>
 8019a16:	0d1b      	lsrs	r3, r3, #20
 8019a18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a20:	4299      	cmp	r1, r3
 8019a22:	d119      	bne.n	8019a58 <_strtod_l+0x8d0>
 8019a24:	4b96      	ldr	r3, [pc, #600]	@ (8019c80 <_strtod_l+0xaf8>)
 8019a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019a28:	429a      	cmp	r2, r3
 8019a2a:	d102      	bne.n	8019a32 <_strtod_l+0x8aa>
 8019a2c:	3101      	adds	r1, #1
 8019a2e:	f43f adce 	beq.w	80195ce <_strtod_l+0x446>
 8019a32:	4b92      	ldr	r3, [pc, #584]	@ (8019c7c <_strtod_l+0xaf4>)
 8019a34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019a36:	401a      	ands	r2, r3
 8019a38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019a3c:	f04f 0a00 	mov.w	sl, #0
 8019a40:	9b08      	ldr	r3, [sp, #32]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d1b9      	bne.n	80199ba <_strtod_l+0x832>
 8019a46:	e5cd      	b.n	80195e4 <_strtod_l+0x45c>
 8019a48:	f04f 33ff 	mov.w	r3, #4294967295
 8019a4c:	e7e8      	b.n	8019a20 <_strtod_l+0x898>
 8019a4e:	4613      	mov	r3, r2
 8019a50:	e7e6      	b.n	8019a20 <_strtod_l+0x898>
 8019a52:	ea53 030a 	orrs.w	r3, r3, sl
 8019a56:	d0a2      	beq.n	801999e <_strtod_l+0x816>
 8019a58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019a5a:	b1db      	cbz	r3, 8019a94 <_strtod_l+0x90c>
 8019a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019a5e:	4213      	tst	r3, r2
 8019a60:	d0ee      	beq.n	8019a40 <_strtod_l+0x8b8>
 8019a62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a64:	9a08      	ldr	r2, [sp, #32]
 8019a66:	4650      	mov	r0, sl
 8019a68:	4659      	mov	r1, fp
 8019a6a:	b1bb      	cbz	r3, 8019a9c <_strtod_l+0x914>
 8019a6c:	f7ff fb6e 	bl	801914c <sulp>
 8019a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019a74:	ec53 2b10 	vmov	r2, r3, d0
 8019a78:	f7e6 fc08 	bl	800028c <__adddf3>
 8019a7c:	4682      	mov	sl, r0
 8019a7e:	468b      	mov	fp, r1
 8019a80:	e7de      	b.n	8019a40 <_strtod_l+0x8b8>
 8019a82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019a86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019a8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019a8e:	f04f 3aff 	mov.w	sl, #4294967295
 8019a92:	e7d5      	b.n	8019a40 <_strtod_l+0x8b8>
 8019a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019a96:	ea13 0f0a 	tst.w	r3, sl
 8019a9a:	e7e1      	b.n	8019a60 <_strtod_l+0x8d8>
 8019a9c:	f7ff fb56 	bl	801914c <sulp>
 8019aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019aa4:	ec53 2b10 	vmov	r2, r3, d0
 8019aa8:	f7e6 fbee 	bl	8000288 <__aeabi_dsub>
 8019aac:	2200      	movs	r2, #0
 8019aae:	2300      	movs	r3, #0
 8019ab0:	4682      	mov	sl, r0
 8019ab2:	468b      	mov	fp, r1
 8019ab4:	f7e7 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8019ab8:	2800      	cmp	r0, #0
 8019aba:	d0c1      	beq.n	8019a40 <_strtod_l+0x8b8>
 8019abc:	e61a      	b.n	80196f4 <_strtod_l+0x56c>
 8019abe:	4641      	mov	r1, r8
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f003 fbf1 	bl	801d2a8 <__ratio>
 8019ac6:	ec57 6b10 	vmov	r6, r7, d0
 8019aca:	2200      	movs	r2, #0
 8019acc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019ad0:	4630      	mov	r0, r6
 8019ad2:	4639      	mov	r1, r7
 8019ad4:	f7e7 f80c 	bl	8000af0 <__aeabi_dcmple>
 8019ad8:	2800      	cmp	r0, #0
 8019ada:	d06f      	beq.n	8019bbc <_strtod_l+0xa34>
 8019adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d17a      	bne.n	8019bd8 <_strtod_l+0xa50>
 8019ae2:	f1ba 0f00 	cmp.w	sl, #0
 8019ae6:	d158      	bne.n	8019b9a <_strtod_l+0xa12>
 8019ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d15a      	bne.n	8019ba8 <_strtod_l+0xa20>
 8019af2:	4b64      	ldr	r3, [pc, #400]	@ (8019c84 <_strtod_l+0xafc>)
 8019af4:	2200      	movs	r2, #0
 8019af6:	4630      	mov	r0, r6
 8019af8:	4639      	mov	r1, r7
 8019afa:	f7e6 ffef 	bl	8000adc <__aeabi_dcmplt>
 8019afe:	2800      	cmp	r0, #0
 8019b00:	d159      	bne.n	8019bb6 <_strtod_l+0xa2e>
 8019b02:	4630      	mov	r0, r6
 8019b04:	4639      	mov	r1, r7
 8019b06:	4b60      	ldr	r3, [pc, #384]	@ (8019c88 <_strtod_l+0xb00>)
 8019b08:	2200      	movs	r2, #0
 8019b0a:	f7e6 fd75 	bl	80005f8 <__aeabi_dmul>
 8019b0e:	4606      	mov	r6, r0
 8019b10:	460f      	mov	r7, r1
 8019b12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8019b16:	9606      	str	r6, [sp, #24]
 8019b18:	9307      	str	r3, [sp, #28]
 8019b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b1e:	4d57      	ldr	r5, [pc, #348]	@ (8019c7c <_strtod_l+0xaf4>)
 8019b20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b26:	401d      	ands	r5, r3
 8019b28:	4b58      	ldr	r3, [pc, #352]	@ (8019c8c <_strtod_l+0xb04>)
 8019b2a:	429d      	cmp	r5, r3
 8019b2c:	f040 80b2 	bne.w	8019c94 <_strtod_l+0xb0c>
 8019b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8019b36:	ec4b ab10 	vmov	d0, sl, fp
 8019b3a:	f003 faed 	bl	801d118 <__ulp>
 8019b3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b42:	ec51 0b10 	vmov	r0, r1, d0
 8019b46:	f7e6 fd57 	bl	80005f8 <__aeabi_dmul>
 8019b4a:	4652      	mov	r2, sl
 8019b4c:	465b      	mov	r3, fp
 8019b4e:	f7e6 fb9d 	bl	800028c <__adddf3>
 8019b52:	460b      	mov	r3, r1
 8019b54:	4949      	ldr	r1, [pc, #292]	@ (8019c7c <_strtod_l+0xaf4>)
 8019b56:	4a4e      	ldr	r2, [pc, #312]	@ (8019c90 <_strtod_l+0xb08>)
 8019b58:	4019      	ands	r1, r3
 8019b5a:	4291      	cmp	r1, r2
 8019b5c:	4682      	mov	sl, r0
 8019b5e:	d942      	bls.n	8019be6 <_strtod_l+0xa5e>
 8019b60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019b62:	4b47      	ldr	r3, [pc, #284]	@ (8019c80 <_strtod_l+0xaf8>)
 8019b64:	429a      	cmp	r2, r3
 8019b66:	d103      	bne.n	8019b70 <_strtod_l+0x9e8>
 8019b68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b6a:	3301      	adds	r3, #1
 8019b6c:	f43f ad2f 	beq.w	80195ce <_strtod_l+0x446>
 8019b70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8019c80 <_strtod_l+0xaf8>
 8019b74:	f04f 3aff 	mov.w	sl, #4294967295
 8019b78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019b7a:	9805      	ldr	r0, [sp, #20]
 8019b7c:	f002 ffa0 	bl	801cac0 <_Bfree>
 8019b80:	9805      	ldr	r0, [sp, #20]
 8019b82:	4649      	mov	r1, r9
 8019b84:	f002 ff9c 	bl	801cac0 <_Bfree>
 8019b88:	9805      	ldr	r0, [sp, #20]
 8019b8a:	4641      	mov	r1, r8
 8019b8c:	f002 ff98 	bl	801cac0 <_Bfree>
 8019b90:	9805      	ldr	r0, [sp, #20]
 8019b92:	4621      	mov	r1, r4
 8019b94:	f002 ff94 	bl	801cac0 <_Bfree>
 8019b98:	e619      	b.n	80197ce <_strtod_l+0x646>
 8019b9a:	f1ba 0f01 	cmp.w	sl, #1
 8019b9e:	d103      	bne.n	8019ba8 <_strtod_l+0xa20>
 8019ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	f43f ada6 	beq.w	80196f4 <_strtod_l+0x56c>
 8019ba8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8019c58 <_strtod_l+0xad0>
 8019bac:	4f35      	ldr	r7, [pc, #212]	@ (8019c84 <_strtod_l+0xafc>)
 8019bae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019bb2:	2600      	movs	r6, #0
 8019bb4:	e7b1      	b.n	8019b1a <_strtod_l+0x992>
 8019bb6:	4f34      	ldr	r7, [pc, #208]	@ (8019c88 <_strtod_l+0xb00>)
 8019bb8:	2600      	movs	r6, #0
 8019bba:	e7aa      	b.n	8019b12 <_strtod_l+0x98a>
 8019bbc:	4b32      	ldr	r3, [pc, #200]	@ (8019c88 <_strtod_l+0xb00>)
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	4639      	mov	r1, r7
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	f7e6 fd18 	bl	80005f8 <__aeabi_dmul>
 8019bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019bca:	4606      	mov	r6, r0
 8019bcc:	460f      	mov	r7, r1
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d09f      	beq.n	8019b12 <_strtod_l+0x98a>
 8019bd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019bd6:	e7a0      	b.n	8019b1a <_strtod_l+0x992>
 8019bd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8019c60 <_strtod_l+0xad8>
 8019bdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019be0:	ec57 6b17 	vmov	r6, r7, d7
 8019be4:	e799      	b.n	8019b1a <_strtod_l+0x992>
 8019be6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019bea:	9b08      	ldr	r3, [sp, #32]
 8019bec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d1c1      	bne.n	8019b78 <_strtod_l+0x9f0>
 8019bf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019bf8:	0d1b      	lsrs	r3, r3, #20
 8019bfa:	051b      	lsls	r3, r3, #20
 8019bfc:	429d      	cmp	r5, r3
 8019bfe:	d1bb      	bne.n	8019b78 <_strtod_l+0x9f0>
 8019c00:	4630      	mov	r0, r6
 8019c02:	4639      	mov	r1, r7
 8019c04:	f7e7 f858 	bl	8000cb8 <__aeabi_d2lz>
 8019c08:	f7e6 fcc8 	bl	800059c <__aeabi_l2d>
 8019c0c:	4602      	mov	r2, r0
 8019c0e:	460b      	mov	r3, r1
 8019c10:	4630      	mov	r0, r6
 8019c12:	4639      	mov	r1, r7
 8019c14:	f7e6 fb38 	bl	8000288 <__aeabi_dsub>
 8019c18:	460b      	mov	r3, r1
 8019c1a:	4602      	mov	r2, r0
 8019c1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8019c20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8019c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c26:	ea46 060a 	orr.w	r6, r6, sl
 8019c2a:	431e      	orrs	r6, r3
 8019c2c:	d06f      	beq.n	8019d0e <_strtod_l+0xb86>
 8019c2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8019c68 <_strtod_l+0xae0>)
 8019c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c34:	f7e6 ff52 	bl	8000adc <__aeabi_dcmplt>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	f47f acd3 	bne.w	80195e4 <_strtod_l+0x45c>
 8019c3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8019c70 <_strtod_l+0xae8>)
 8019c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019c48:	f7e6 ff66 	bl	8000b18 <__aeabi_dcmpgt>
 8019c4c:	2800      	cmp	r0, #0
 8019c4e:	d093      	beq.n	8019b78 <_strtod_l+0x9f0>
 8019c50:	e4c8      	b.n	80195e4 <_strtod_l+0x45c>
 8019c52:	bf00      	nop
 8019c54:	f3af 8000 	nop.w
 8019c58:	00000000 	.word	0x00000000
 8019c5c:	bff00000 	.word	0xbff00000
 8019c60:	00000000 	.word	0x00000000
 8019c64:	3ff00000 	.word	0x3ff00000
 8019c68:	94a03595 	.word	0x94a03595
 8019c6c:	3fdfffff 	.word	0x3fdfffff
 8019c70:	35afe535 	.word	0x35afe535
 8019c74:	3fe00000 	.word	0x3fe00000
 8019c78:	000fffff 	.word	0x000fffff
 8019c7c:	7ff00000 	.word	0x7ff00000
 8019c80:	7fefffff 	.word	0x7fefffff
 8019c84:	3ff00000 	.word	0x3ff00000
 8019c88:	3fe00000 	.word	0x3fe00000
 8019c8c:	7fe00000 	.word	0x7fe00000
 8019c90:	7c9fffff 	.word	0x7c9fffff
 8019c94:	9b08      	ldr	r3, [sp, #32]
 8019c96:	b323      	cbz	r3, 8019ce2 <_strtod_l+0xb5a>
 8019c98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8019c9c:	d821      	bhi.n	8019ce2 <_strtod_l+0xb5a>
 8019c9e:	a328      	add	r3, pc, #160	@ (adr r3, 8019d40 <_strtod_l+0xbb8>)
 8019ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca4:	4630      	mov	r0, r6
 8019ca6:	4639      	mov	r1, r7
 8019ca8:	f7e6 ff22 	bl	8000af0 <__aeabi_dcmple>
 8019cac:	b1a0      	cbz	r0, 8019cd8 <_strtod_l+0xb50>
 8019cae:	4639      	mov	r1, r7
 8019cb0:	4630      	mov	r0, r6
 8019cb2:	f7e6 ff79 	bl	8000ba8 <__aeabi_d2uiz>
 8019cb6:	2801      	cmp	r0, #1
 8019cb8:	bf38      	it	cc
 8019cba:	2001      	movcc	r0, #1
 8019cbc:	f7e6 fc22 	bl	8000504 <__aeabi_ui2d>
 8019cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019cc2:	4606      	mov	r6, r0
 8019cc4:	460f      	mov	r7, r1
 8019cc6:	b9fb      	cbnz	r3, 8019d08 <_strtod_l+0xb80>
 8019cc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019ccc:	9014      	str	r0, [sp, #80]	@ 0x50
 8019cce:	9315      	str	r3, [sp, #84]	@ 0x54
 8019cd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8019cd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019cd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019cda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8019cde:	1b5b      	subs	r3, r3, r5
 8019ce0:	9311      	str	r3, [sp, #68]	@ 0x44
 8019ce2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8019ce6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8019cea:	f003 fa15 	bl	801d118 <__ulp>
 8019cee:	4650      	mov	r0, sl
 8019cf0:	ec53 2b10 	vmov	r2, r3, d0
 8019cf4:	4659      	mov	r1, fp
 8019cf6:	f7e6 fc7f 	bl	80005f8 <__aeabi_dmul>
 8019cfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8019cfe:	f7e6 fac5 	bl	800028c <__adddf3>
 8019d02:	4682      	mov	sl, r0
 8019d04:	468b      	mov	fp, r1
 8019d06:	e770      	b.n	8019bea <_strtod_l+0xa62>
 8019d08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8019d0c:	e7e0      	b.n	8019cd0 <_strtod_l+0xb48>
 8019d0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8019d48 <_strtod_l+0xbc0>)
 8019d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d14:	f7e6 fee2 	bl	8000adc <__aeabi_dcmplt>
 8019d18:	e798      	b.n	8019c4c <_strtod_l+0xac4>
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8019d1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019d20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019d22:	6013      	str	r3, [r2, #0]
 8019d24:	f7ff ba6d 	b.w	8019202 <_strtod_l+0x7a>
 8019d28:	2a65      	cmp	r2, #101	@ 0x65
 8019d2a:	f43f ab68 	beq.w	80193fe <_strtod_l+0x276>
 8019d2e:	2a45      	cmp	r2, #69	@ 0x45
 8019d30:	f43f ab65 	beq.w	80193fe <_strtod_l+0x276>
 8019d34:	2301      	movs	r3, #1
 8019d36:	f7ff bba0 	b.w	801947a <_strtod_l+0x2f2>
 8019d3a:	bf00      	nop
 8019d3c:	f3af 8000 	nop.w
 8019d40:	ffc00000 	.word	0xffc00000
 8019d44:	41dfffff 	.word	0x41dfffff
 8019d48:	94a03595 	.word	0x94a03595
 8019d4c:	3fcfffff 	.word	0x3fcfffff

08019d50 <_strtod_r>:
 8019d50:	4b01      	ldr	r3, [pc, #4]	@ (8019d58 <_strtod_r+0x8>)
 8019d52:	f7ff ba19 	b.w	8019188 <_strtod_l>
 8019d56:	bf00      	nop
 8019d58:	20000160 	.word	0x20000160

08019d5c <_strtol_l.isra.0>:
 8019d5c:	2b24      	cmp	r3, #36	@ 0x24
 8019d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d62:	4686      	mov	lr, r0
 8019d64:	4690      	mov	r8, r2
 8019d66:	d801      	bhi.n	8019d6c <_strtol_l.isra.0+0x10>
 8019d68:	2b01      	cmp	r3, #1
 8019d6a:	d106      	bne.n	8019d7a <_strtol_l.isra.0+0x1e>
 8019d6c:	f001 fb60 	bl	801b430 <__errno>
 8019d70:	2316      	movs	r3, #22
 8019d72:	6003      	str	r3, [r0, #0]
 8019d74:	2000      	movs	r0, #0
 8019d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d7a:	4834      	ldr	r0, [pc, #208]	@ (8019e4c <_strtol_l.isra.0+0xf0>)
 8019d7c:	460d      	mov	r5, r1
 8019d7e:	462a      	mov	r2, r5
 8019d80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d84:	5d06      	ldrb	r6, [r0, r4]
 8019d86:	f016 0608 	ands.w	r6, r6, #8
 8019d8a:	d1f8      	bne.n	8019d7e <_strtol_l.isra.0+0x22>
 8019d8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8019d8e:	d110      	bne.n	8019db2 <_strtol_l.isra.0+0x56>
 8019d90:	782c      	ldrb	r4, [r5, #0]
 8019d92:	2601      	movs	r6, #1
 8019d94:	1c95      	adds	r5, r2, #2
 8019d96:	f033 0210 	bics.w	r2, r3, #16
 8019d9a:	d115      	bne.n	8019dc8 <_strtol_l.isra.0+0x6c>
 8019d9c:	2c30      	cmp	r4, #48	@ 0x30
 8019d9e:	d10d      	bne.n	8019dbc <_strtol_l.isra.0+0x60>
 8019da0:	782a      	ldrb	r2, [r5, #0]
 8019da2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019da6:	2a58      	cmp	r2, #88	@ 0x58
 8019da8:	d108      	bne.n	8019dbc <_strtol_l.isra.0+0x60>
 8019daa:	786c      	ldrb	r4, [r5, #1]
 8019dac:	3502      	adds	r5, #2
 8019dae:	2310      	movs	r3, #16
 8019db0:	e00a      	b.n	8019dc8 <_strtol_l.isra.0+0x6c>
 8019db2:	2c2b      	cmp	r4, #43	@ 0x2b
 8019db4:	bf04      	itt	eq
 8019db6:	782c      	ldrbeq	r4, [r5, #0]
 8019db8:	1c95      	addeq	r5, r2, #2
 8019dba:	e7ec      	b.n	8019d96 <_strtol_l.isra.0+0x3a>
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d1f6      	bne.n	8019dae <_strtol_l.isra.0+0x52>
 8019dc0:	2c30      	cmp	r4, #48	@ 0x30
 8019dc2:	bf14      	ite	ne
 8019dc4:	230a      	movne	r3, #10
 8019dc6:	2308      	moveq	r3, #8
 8019dc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019dcc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	fbbc f9f3 	udiv	r9, ip, r3
 8019dd6:	4610      	mov	r0, r2
 8019dd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8019ddc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019de0:	2f09      	cmp	r7, #9
 8019de2:	d80f      	bhi.n	8019e04 <_strtol_l.isra.0+0xa8>
 8019de4:	463c      	mov	r4, r7
 8019de6:	42a3      	cmp	r3, r4
 8019de8:	dd1b      	ble.n	8019e22 <_strtol_l.isra.0+0xc6>
 8019dea:	1c57      	adds	r7, r2, #1
 8019dec:	d007      	beq.n	8019dfe <_strtol_l.isra.0+0xa2>
 8019dee:	4581      	cmp	r9, r0
 8019df0:	d314      	bcc.n	8019e1c <_strtol_l.isra.0+0xc0>
 8019df2:	d101      	bne.n	8019df8 <_strtol_l.isra.0+0x9c>
 8019df4:	45a2      	cmp	sl, r4
 8019df6:	db11      	blt.n	8019e1c <_strtol_l.isra.0+0xc0>
 8019df8:	fb00 4003 	mla	r0, r0, r3, r4
 8019dfc:	2201      	movs	r2, #1
 8019dfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e02:	e7eb      	b.n	8019ddc <_strtol_l.isra.0+0x80>
 8019e04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019e08:	2f19      	cmp	r7, #25
 8019e0a:	d801      	bhi.n	8019e10 <_strtol_l.isra.0+0xb4>
 8019e0c:	3c37      	subs	r4, #55	@ 0x37
 8019e0e:	e7ea      	b.n	8019de6 <_strtol_l.isra.0+0x8a>
 8019e10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019e14:	2f19      	cmp	r7, #25
 8019e16:	d804      	bhi.n	8019e22 <_strtol_l.isra.0+0xc6>
 8019e18:	3c57      	subs	r4, #87	@ 0x57
 8019e1a:	e7e4      	b.n	8019de6 <_strtol_l.isra.0+0x8a>
 8019e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8019e20:	e7ed      	b.n	8019dfe <_strtol_l.isra.0+0xa2>
 8019e22:	1c53      	adds	r3, r2, #1
 8019e24:	d108      	bne.n	8019e38 <_strtol_l.isra.0+0xdc>
 8019e26:	2322      	movs	r3, #34	@ 0x22
 8019e28:	f8ce 3000 	str.w	r3, [lr]
 8019e2c:	4660      	mov	r0, ip
 8019e2e:	f1b8 0f00 	cmp.w	r8, #0
 8019e32:	d0a0      	beq.n	8019d76 <_strtol_l.isra.0+0x1a>
 8019e34:	1e69      	subs	r1, r5, #1
 8019e36:	e006      	b.n	8019e46 <_strtol_l.isra.0+0xea>
 8019e38:	b106      	cbz	r6, 8019e3c <_strtol_l.isra.0+0xe0>
 8019e3a:	4240      	negs	r0, r0
 8019e3c:	f1b8 0f00 	cmp.w	r8, #0
 8019e40:	d099      	beq.n	8019d76 <_strtol_l.isra.0+0x1a>
 8019e42:	2a00      	cmp	r2, #0
 8019e44:	d1f6      	bne.n	8019e34 <_strtol_l.isra.0+0xd8>
 8019e46:	f8c8 1000 	str.w	r1, [r8]
 8019e4a:	e794      	b.n	8019d76 <_strtol_l.isra.0+0x1a>
 8019e4c:	08020939 	.word	0x08020939

08019e50 <_strtol_r>:
 8019e50:	f7ff bf84 	b.w	8019d5c <_strtol_l.isra.0>

08019e54 <__cvt>:
 8019e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e58:	ec57 6b10 	vmov	r6, r7, d0
 8019e5c:	2f00      	cmp	r7, #0
 8019e5e:	460c      	mov	r4, r1
 8019e60:	4619      	mov	r1, r3
 8019e62:	463b      	mov	r3, r7
 8019e64:	bfbb      	ittet	lt
 8019e66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8019e6a:	461f      	movlt	r7, r3
 8019e6c:	2300      	movge	r3, #0
 8019e6e:	232d      	movlt	r3, #45	@ 0x2d
 8019e70:	700b      	strb	r3, [r1, #0]
 8019e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019e78:	4691      	mov	r9, r2
 8019e7a:	f023 0820 	bic.w	r8, r3, #32
 8019e7e:	bfbc      	itt	lt
 8019e80:	4632      	movlt	r2, r6
 8019e82:	4616      	movlt	r6, r2
 8019e84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019e88:	d005      	beq.n	8019e96 <__cvt+0x42>
 8019e8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8019e8e:	d100      	bne.n	8019e92 <__cvt+0x3e>
 8019e90:	3401      	adds	r4, #1
 8019e92:	2102      	movs	r1, #2
 8019e94:	e000      	b.n	8019e98 <__cvt+0x44>
 8019e96:	2103      	movs	r1, #3
 8019e98:	ab03      	add	r3, sp, #12
 8019e9a:	9301      	str	r3, [sp, #4]
 8019e9c:	ab02      	add	r3, sp, #8
 8019e9e:	9300      	str	r3, [sp, #0]
 8019ea0:	ec47 6b10 	vmov	d0, r6, r7
 8019ea4:	4653      	mov	r3, sl
 8019ea6:	4622      	mov	r2, r4
 8019ea8:	f001 fbae 	bl	801b608 <_dtoa_r>
 8019eac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019eb0:	4605      	mov	r5, r0
 8019eb2:	d119      	bne.n	8019ee8 <__cvt+0x94>
 8019eb4:	f019 0f01 	tst.w	r9, #1
 8019eb8:	d00e      	beq.n	8019ed8 <__cvt+0x84>
 8019eba:	eb00 0904 	add.w	r9, r0, r4
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	4630      	mov	r0, r6
 8019ec4:	4639      	mov	r1, r7
 8019ec6:	f7e6 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 8019eca:	b108      	cbz	r0, 8019ed0 <__cvt+0x7c>
 8019ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8019ed0:	2230      	movs	r2, #48	@ 0x30
 8019ed2:	9b03      	ldr	r3, [sp, #12]
 8019ed4:	454b      	cmp	r3, r9
 8019ed6:	d31e      	bcc.n	8019f16 <__cvt+0xc2>
 8019ed8:	9b03      	ldr	r3, [sp, #12]
 8019eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019edc:	1b5b      	subs	r3, r3, r5
 8019ede:	4628      	mov	r0, r5
 8019ee0:	6013      	str	r3, [r2, #0]
 8019ee2:	b004      	add	sp, #16
 8019ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ee8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019eec:	eb00 0904 	add.w	r9, r0, r4
 8019ef0:	d1e5      	bne.n	8019ebe <__cvt+0x6a>
 8019ef2:	7803      	ldrb	r3, [r0, #0]
 8019ef4:	2b30      	cmp	r3, #48	@ 0x30
 8019ef6:	d10a      	bne.n	8019f0e <__cvt+0xba>
 8019ef8:	2200      	movs	r2, #0
 8019efa:	2300      	movs	r3, #0
 8019efc:	4630      	mov	r0, r6
 8019efe:	4639      	mov	r1, r7
 8019f00:	f7e6 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8019f04:	b918      	cbnz	r0, 8019f0e <__cvt+0xba>
 8019f06:	f1c4 0401 	rsb	r4, r4, #1
 8019f0a:	f8ca 4000 	str.w	r4, [sl]
 8019f0e:	f8da 3000 	ldr.w	r3, [sl]
 8019f12:	4499      	add	r9, r3
 8019f14:	e7d3      	b.n	8019ebe <__cvt+0x6a>
 8019f16:	1c59      	adds	r1, r3, #1
 8019f18:	9103      	str	r1, [sp, #12]
 8019f1a:	701a      	strb	r2, [r3, #0]
 8019f1c:	e7d9      	b.n	8019ed2 <__cvt+0x7e>

08019f1e <__exponent>:
 8019f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f20:	2900      	cmp	r1, #0
 8019f22:	bfba      	itte	lt
 8019f24:	4249      	neglt	r1, r1
 8019f26:	232d      	movlt	r3, #45	@ 0x2d
 8019f28:	232b      	movge	r3, #43	@ 0x2b
 8019f2a:	2909      	cmp	r1, #9
 8019f2c:	7002      	strb	r2, [r0, #0]
 8019f2e:	7043      	strb	r3, [r0, #1]
 8019f30:	dd29      	ble.n	8019f86 <__exponent+0x68>
 8019f32:	f10d 0307 	add.w	r3, sp, #7
 8019f36:	461d      	mov	r5, r3
 8019f38:	270a      	movs	r7, #10
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8019f40:	fb07 1416 	mls	r4, r7, r6, r1
 8019f44:	3430      	adds	r4, #48	@ 0x30
 8019f46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019f4a:	460c      	mov	r4, r1
 8019f4c:	2c63      	cmp	r4, #99	@ 0x63
 8019f4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8019f52:	4631      	mov	r1, r6
 8019f54:	dcf1      	bgt.n	8019f3a <__exponent+0x1c>
 8019f56:	3130      	adds	r1, #48	@ 0x30
 8019f58:	1e94      	subs	r4, r2, #2
 8019f5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019f5e:	1c41      	adds	r1, r0, #1
 8019f60:	4623      	mov	r3, r4
 8019f62:	42ab      	cmp	r3, r5
 8019f64:	d30a      	bcc.n	8019f7c <__exponent+0x5e>
 8019f66:	f10d 0309 	add.w	r3, sp, #9
 8019f6a:	1a9b      	subs	r3, r3, r2
 8019f6c:	42ac      	cmp	r4, r5
 8019f6e:	bf88      	it	hi
 8019f70:	2300      	movhi	r3, #0
 8019f72:	3302      	adds	r3, #2
 8019f74:	4403      	add	r3, r0
 8019f76:	1a18      	subs	r0, r3, r0
 8019f78:	b003      	add	sp, #12
 8019f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019f80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019f84:	e7ed      	b.n	8019f62 <__exponent+0x44>
 8019f86:	2330      	movs	r3, #48	@ 0x30
 8019f88:	3130      	adds	r1, #48	@ 0x30
 8019f8a:	7083      	strb	r3, [r0, #2]
 8019f8c:	70c1      	strb	r1, [r0, #3]
 8019f8e:	1d03      	adds	r3, r0, #4
 8019f90:	e7f1      	b.n	8019f76 <__exponent+0x58>
	...

08019f94 <_printf_float>:
 8019f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f98:	b08d      	sub	sp, #52	@ 0x34
 8019f9a:	460c      	mov	r4, r1
 8019f9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019fa0:	4616      	mov	r6, r2
 8019fa2:	461f      	mov	r7, r3
 8019fa4:	4605      	mov	r5, r0
 8019fa6:	f001 f99b 	bl	801b2e0 <_localeconv_r>
 8019faa:	6803      	ldr	r3, [r0, #0]
 8019fac:	9304      	str	r3, [sp, #16]
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f7e6 f95e 	bl	8000270 <strlen>
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8019fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8019fbc:	9005      	str	r0, [sp, #20]
 8019fbe:	3307      	adds	r3, #7
 8019fc0:	f023 0307 	bic.w	r3, r3, #7
 8019fc4:	f103 0208 	add.w	r2, r3, #8
 8019fc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019fcc:	f8d4 b000 	ldr.w	fp, [r4]
 8019fd0:	f8c8 2000 	str.w	r2, [r8]
 8019fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019fd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019fdc:	9307      	str	r3, [sp, #28]
 8019fde:	f8cd 8018 	str.w	r8, [sp, #24]
 8019fe2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8019fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019fea:	4b9c      	ldr	r3, [pc, #624]	@ (801a25c <_printf_float+0x2c8>)
 8019fec:	f04f 32ff 	mov.w	r2, #4294967295
 8019ff0:	f7e6 fd9c 	bl	8000b2c <__aeabi_dcmpun>
 8019ff4:	bb70      	cbnz	r0, 801a054 <_printf_float+0xc0>
 8019ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019ffa:	4b98      	ldr	r3, [pc, #608]	@ (801a25c <_printf_float+0x2c8>)
 8019ffc:	f04f 32ff 	mov.w	r2, #4294967295
 801a000:	f7e6 fd76 	bl	8000af0 <__aeabi_dcmple>
 801a004:	bb30      	cbnz	r0, 801a054 <_printf_float+0xc0>
 801a006:	2200      	movs	r2, #0
 801a008:	2300      	movs	r3, #0
 801a00a:	4640      	mov	r0, r8
 801a00c:	4649      	mov	r1, r9
 801a00e:	f7e6 fd65 	bl	8000adc <__aeabi_dcmplt>
 801a012:	b110      	cbz	r0, 801a01a <_printf_float+0x86>
 801a014:	232d      	movs	r3, #45	@ 0x2d
 801a016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a01a:	4a91      	ldr	r2, [pc, #580]	@ (801a260 <_printf_float+0x2cc>)
 801a01c:	4b91      	ldr	r3, [pc, #580]	@ (801a264 <_printf_float+0x2d0>)
 801a01e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a022:	bf8c      	ite	hi
 801a024:	4690      	movhi	r8, r2
 801a026:	4698      	movls	r8, r3
 801a028:	2303      	movs	r3, #3
 801a02a:	6123      	str	r3, [r4, #16]
 801a02c:	f02b 0304 	bic.w	r3, fp, #4
 801a030:	6023      	str	r3, [r4, #0]
 801a032:	f04f 0900 	mov.w	r9, #0
 801a036:	9700      	str	r7, [sp, #0]
 801a038:	4633      	mov	r3, r6
 801a03a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a03c:	4621      	mov	r1, r4
 801a03e:	4628      	mov	r0, r5
 801a040:	f000 fb1e 	bl	801a680 <_printf_common>
 801a044:	3001      	adds	r0, #1
 801a046:	f040 808d 	bne.w	801a164 <_printf_float+0x1d0>
 801a04a:	f04f 30ff 	mov.w	r0, #4294967295
 801a04e:	b00d      	add	sp, #52	@ 0x34
 801a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a054:	4642      	mov	r2, r8
 801a056:	464b      	mov	r3, r9
 801a058:	4640      	mov	r0, r8
 801a05a:	4649      	mov	r1, r9
 801a05c:	f7e6 fd66 	bl	8000b2c <__aeabi_dcmpun>
 801a060:	b140      	cbz	r0, 801a074 <_printf_float+0xe0>
 801a062:	464b      	mov	r3, r9
 801a064:	2b00      	cmp	r3, #0
 801a066:	bfbc      	itt	lt
 801a068:	232d      	movlt	r3, #45	@ 0x2d
 801a06a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a06e:	4a7e      	ldr	r2, [pc, #504]	@ (801a268 <_printf_float+0x2d4>)
 801a070:	4b7e      	ldr	r3, [pc, #504]	@ (801a26c <_printf_float+0x2d8>)
 801a072:	e7d4      	b.n	801a01e <_printf_float+0x8a>
 801a074:	6863      	ldr	r3, [r4, #4]
 801a076:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a07a:	9206      	str	r2, [sp, #24]
 801a07c:	1c5a      	adds	r2, r3, #1
 801a07e:	d13b      	bne.n	801a0f8 <_printf_float+0x164>
 801a080:	2306      	movs	r3, #6
 801a082:	6063      	str	r3, [r4, #4]
 801a084:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a088:	2300      	movs	r3, #0
 801a08a:	6022      	str	r2, [r4, #0]
 801a08c:	9303      	str	r3, [sp, #12]
 801a08e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a090:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a094:	ab09      	add	r3, sp, #36	@ 0x24
 801a096:	9300      	str	r3, [sp, #0]
 801a098:	6861      	ldr	r1, [r4, #4]
 801a09a:	ec49 8b10 	vmov	d0, r8, r9
 801a09e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	f7ff fed6 	bl	8019e54 <__cvt>
 801a0a8:	9b06      	ldr	r3, [sp, #24]
 801a0aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a0ac:	2b47      	cmp	r3, #71	@ 0x47
 801a0ae:	4680      	mov	r8, r0
 801a0b0:	d129      	bne.n	801a106 <_printf_float+0x172>
 801a0b2:	1cc8      	adds	r0, r1, #3
 801a0b4:	db02      	blt.n	801a0bc <_printf_float+0x128>
 801a0b6:	6863      	ldr	r3, [r4, #4]
 801a0b8:	4299      	cmp	r1, r3
 801a0ba:	dd41      	ble.n	801a140 <_printf_float+0x1ac>
 801a0bc:	f1aa 0a02 	sub.w	sl, sl, #2
 801a0c0:	fa5f fa8a 	uxtb.w	sl, sl
 801a0c4:	3901      	subs	r1, #1
 801a0c6:	4652      	mov	r2, sl
 801a0c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a0cc:	9109      	str	r1, [sp, #36]	@ 0x24
 801a0ce:	f7ff ff26 	bl	8019f1e <__exponent>
 801a0d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a0d4:	1813      	adds	r3, r2, r0
 801a0d6:	2a01      	cmp	r2, #1
 801a0d8:	4681      	mov	r9, r0
 801a0da:	6123      	str	r3, [r4, #16]
 801a0dc:	dc02      	bgt.n	801a0e4 <_printf_float+0x150>
 801a0de:	6822      	ldr	r2, [r4, #0]
 801a0e0:	07d2      	lsls	r2, r2, #31
 801a0e2:	d501      	bpl.n	801a0e8 <_printf_float+0x154>
 801a0e4:	3301      	adds	r3, #1
 801a0e6:	6123      	str	r3, [r4, #16]
 801a0e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d0a2      	beq.n	801a036 <_printf_float+0xa2>
 801a0f0:	232d      	movs	r3, #45	@ 0x2d
 801a0f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a0f6:	e79e      	b.n	801a036 <_printf_float+0xa2>
 801a0f8:	9a06      	ldr	r2, [sp, #24]
 801a0fa:	2a47      	cmp	r2, #71	@ 0x47
 801a0fc:	d1c2      	bne.n	801a084 <_printf_float+0xf0>
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d1c0      	bne.n	801a084 <_printf_float+0xf0>
 801a102:	2301      	movs	r3, #1
 801a104:	e7bd      	b.n	801a082 <_printf_float+0xee>
 801a106:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a10a:	d9db      	bls.n	801a0c4 <_printf_float+0x130>
 801a10c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a110:	d118      	bne.n	801a144 <_printf_float+0x1b0>
 801a112:	2900      	cmp	r1, #0
 801a114:	6863      	ldr	r3, [r4, #4]
 801a116:	dd0b      	ble.n	801a130 <_printf_float+0x19c>
 801a118:	6121      	str	r1, [r4, #16]
 801a11a:	b913      	cbnz	r3, 801a122 <_printf_float+0x18e>
 801a11c:	6822      	ldr	r2, [r4, #0]
 801a11e:	07d0      	lsls	r0, r2, #31
 801a120:	d502      	bpl.n	801a128 <_printf_float+0x194>
 801a122:	3301      	adds	r3, #1
 801a124:	440b      	add	r3, r1
 801a126:	6123      	str	r3, [r4, #16]
 801a128:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a12a:	f04f 0900 	mov.w	r9, #0
 801a12e:	e7db      	b.n	801a0e8 <_printf_float+0x154>
 801a130:	b913      	cbnz	r3, 801a138 <_printf_float+0x1a4>
 801a132:	6822      	ldr	r2, [r4, #0]
 801a134:	07d2      	lsls	r2, r2, #31
 801a136:	d501      	bpl.n	801a13c <_printf_float+0x1a8>
 801a138:	3302      	adds	r3, #2
 801a13a:	e7f4      	b.n	801a126 <_printf_float+0x192>
 801a13c:	2301      	movs	r3, #1
 801a13e:	e7f2      	b.n	801a126 <_printf_float+0x192>
 801a140:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a146:	4299      	cmp	r1, r3
 801a148:	db05      	blt.n	801a156 <_printf_float+0x1c2>
 801a14a:	6823      	ldr	r3, [r4, #0]
 801a14c:	6121      	str	r1, [r4, #16]
 801a14e:	07d8      	lsls	r0, r3, #31
 801a150:	d5ea      	bpl.n	801a128 <_printf_float+0x194>
 801a152:	1c4b      	adds	r3, r1, #1
 801a154:	e7e7      	b.n	801a126 <_printf_float+0x192>
 801a156:	2900      	cmp	r1, #0
 801a158:	bfd4      	ite	le
 801a15a:	f1c1 0202 	rsble	r2, r1, #2
 801a15e:	2201      	movgt	r2, #1
 801a160:	4413      	add	r3, r2
 801a162:	e7e0      	b.n	801a126 <_printf_float+0x192>
 801a164:	6823      	ldr	r3, [r4, #0]
 801a166:	055a      	lsls	r2, r3, #21
 801a168:	d407      	bmi.n	801a17a <_printf_float+0x1e6>
 801a16a:	6923      	ldr	r3, [r4, #16]
 801a16c:	4642      	mov	r2, r8
 801a16e:	4631      	mov	r1, r6
 801a170:	4628      	mov	r0, r5
 801a172:	47b8      	blx	r7
 801a174:	3001      	adds	r0, #1
 801a176:	d12b      	bne.n	801a1d0 <_printf_float+0x23c>
 801a178:	e767      	b.n	801a04a <_printf_float+0xb6>
 801a17a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a17e:	f240 80dd 	bls.w	801a33c <_printf_float+0x3a8>
 801a182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a186:	2200      	movs	r2, #0
 801a188:	2300      	movs	r3, #0
 801a18a:	f7e6 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801a18e:	2800      	cmp	r0, #0
 801a190:	d033      	beq.n	801a1fa <_printf_float+0x266>
 801a192:	4a37      	ldr	r2, [pc, #220]	@ (801a270 <_printf_float+0x2dc>)
 801a194:	2301      	movs	r3, #1
 801a196:	4631      	mov	r1, r6
 801a198:	4628      	mov	r0, r5
 801a19a:	47b8      	blx	r7
 801a19c:	3001      	adds	r0, #1
 801a19e:	f43f af54 	beq.w	801a04a <_printf_float+0xb6>
 801a1a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a1a6:	4543      	cmp	r3, r8
 801a1a8:	db02      	blt.n	801a1b0 <_printf_float+0x21c>
 801a1aa:	6823      	ldr	r3, [r4, #0]
 801a1ac:	07d8      	lsls	r0, r3, #31
 801a1ae:	d50f      	bpl.n	801a1d0 <_printf_float+0x23c>
 801a1b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	47b8      	blx	r7
 801a1ba:	3001      	adds	r0, #1
 801a1bc:	f43f af45 	beq.w	801a04a <_printf_float+0xb6>
 801a1c0:	f04f 0900 	mov.w	r9, #0
 801a1c4:	f108 38ff 	add.w	r8, r8, #4294967295
 801a1c8:	f104 0a1a 	add.w	sl, r4, #26
 801a1cc:	45c8      	cmp	r8, r9
 801a1ce:	dc09      	bgt.n	801a1e4 <_printf_float+0x250>
 801a1d0:	6823      	ldr	r3, [r4, #0]
 801a1d2:	079b      	lsls	r3, r3, #30
 801a1d4:	f100 8103 	bmi.w	801a3de <_printf_float+0x44a>
 801a1d8:	68e0      	ldr	r0, [r4, #12]
 801a1da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1dc:	4298      	cmp	r0, r3
 801a1de:	bfb8      	it	lt
 801a1e0:	4618      	movlt	r0, r3
 801a1e2:	e734      	b.n	801a04e <_printf_float+0xba>
 801a1e4:	2301      	movs	r3, #1
 801a1e6:	4652      	mov	r2, sl
 801a1e8:	4631      	mov	r1, r6
 801a1ea:	4628      	mov	r0, r5
 801a1ec:	47b8      	blx	r7
 801a1ee:	3001      	adds	r0, #1
 801a1f0:	f43f af2b 	beq.w	801a04a <_printf_float+0xb6>
 801a1f4:	f109 0901 	add.w	r9, r9, #1
 801a1f8:	e7e8      	b.n	801a1cc <_printf_float+0x238>
 801a1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	dc39      	bgt.n	801a274 <_printf_float+0x2e0>
 801a200:	4a1b      	ldr	r2, [pc, #108]	@ (801a270 <_printf_float+0x2dc>)
 801a202:	2301      	movs	r3, #1
 801a204:	4631      	mov	r1, r6
 801a206:	4628      	mov	r0, r5
 801a208:	47b8      	blx	r7
 801a20a:	3001      	adds	r0, #1
 801a20c:	f43f af1d 	beq.w	801a04a <_printf_float+0xb6>
 801a210:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a214:	ea59 0303 	orrs.w	r3, r9, r3
 801a218:	d102      	bne.n	801a220 <_printf_float+0x28c>
 801a21a:	6823      	ldr	r3, [r4, #0]
 801a21c:	07d9      	lsls	r1, r3, #31
 801a21e:	d5d7      	bpl.n	801a1d0 <_printf_float+0x23c>
 801a220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a224:	4631      	mov	r1, r6
 801a226:	4628      	mov	r0, r5
 801a228:	47b8      	blx	r7
 801a22a:	3001      	adds	r0, #1
 801a22c:	f43f af0d 	beq.w	801a04a <_printf_float+0xb6>
 801a230:	f04f 0a00 	mov.w	sl, #0
 801a234:	f104 0b1a 	add.w	fp, r4, #26
 801a238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a23a:	425b      	negs	r3, r3
 801a23c:	4553      	cmp	r3, sl
 801a23e:	dc01      	bgt.n	801a244 <_printf_float+0x2b0>
 801a240:	464b      	mov	r3, r9
 801a242:	e793      	b.n	801a16c <_printf_float+0x1d8>
 801a244:	2301      	movs	r3, #1
 801a246:	465a      	mov	r2, fp
 801a248:	4631      	mov	r1, r6
 801a24a:	4628      	mov	r0, r5
 801a24c:	47b8      	blx	r7
 801a24e:	3001      	adds	r0, #1
 801a250:	f43f aefb 	beq.w	801a04a <_printf_float+0xb6>
 801a254:	f10a 0a01 	add.w	sl, sl, #1
 801a258:	e7ee      	b.n	801a238 <_printf_float+0x2a4>
 801a25a:	bf00      	nop
 801a25c:	7fefffff 	.word	0x7fefffff
 801a260:	080202de 	.word	0x080202de
 801a264:	080202da 	.word	0x080202da
 801a268:	080202e6 	.word	0x080202e6
 801a26c:	080202e2 	.word	0x080202e2
 801a270:	080204c2 	.word	0x080204c2
 801a274:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a276:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a27a:	4553      	cmp	r3, sl
 801a27c:	bfa8      	it	ge
 801a27e:	4653      	movge	r3, sl
 801a280:	2b00      	cmp	r3, #0
 801a282:	4699      	mov	r9, r3
 801a284:	dc36      	bgt.n	801a2f4 <_printf_float+0x360>
 801a286:	f04f 0b00 	mov.w	fp, #0
 801a28a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a28e:	f104 021a 	add.w	r2, r4, #26
 801a292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a294:	9306      	str	r3, [sp, #24]
 801a296:	eba3 0309 	sub.w	r3, r3, r9
 801a29a:	455b      	cmp	r3, fp
 801a29c:	dc31      	bgt.n	801a302 <_printf_float+0x36e>
 801a29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2a0:	459a      	cmp	sl, r3
 801a2a2:	dc3a      	bgt.n	801a31a <_printf_float+0x386>
 801a2a4:	6823      	ldr	r3, [r4, #0]
 801a2a6:	07da      	lsls	r2, r3, #31
 801a2a8:	d437      	bmi.n	801a31a <_printf_float+0x386>
 801a2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2ac:	ebaa 0903 	sub.w	r9, sl, r3
 801a2b0:	9b06      	ldr	r3, [sp, #24]
 801a2b2:	ebaa 0303 	sub.w	r3, sl, r3
 801a2b6:	4599      	cmp	r9, r3
 801a2b8:	bfa8      	it	ge
 801a2ba:	4699      	movge	r9, r3
 801a2bc:	f1b9 0f00 	cmp.w	r9, #0
 801a2c0:	dc33      	bgt.n	801a32a <_printf_float+0x396>
 801a2c2:	f04f 0800 	mov.w	r8, #0
 801a2c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a2ca:	f104 0b1a 	add.w	fp, r4, #26
 801a2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2d0:	ebaa 0303 	sub.w	r3, sl, r3
 801a2d4:	eba3 0309 	sub.w	r3, r3, r9
 801a2d8:	4543      	cmp	r3, r8
 801a2da:	f77f af79 	ble.w	801a1d0 <_printf_float+0x23c>
 801a2de:	2301      	movs	r3, #1
 801a2e0:	465a      	mov	r2, fp
 801a2e2:	4631      	mov	r1, r6
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	47b8      	blx	r7
 801a2e8:	3001      	adds	r0, #1
 801a2ea:	f43f aeae 	beq.w	801a04a <_printf_float+0xb6>
 801a2ee:	f108 0801 	add.w	r8, r8, #1
 801a2f2:	e7ec      	b.n	801a2ce <_printf_float+0x33a>
 801a2f4:	4642      	mov	r2, r8
 801a2f6:	4631      	mov	r1, r6
 801a2f8:	4628      	mov	r0, r5
 801a2fa:	47b8      	blx	r7
 801a2fc:	3001      	adds	r0, #1
 801a2fe:	d1c2      	bne.n	801a286 <_printf_float+0x2f2>
 801a300:	e6a3      	b.n	801a04a <_printf_float+0xb6>
 801a302:	2301      	movs	r3, #1
 801a304:	4631      	mov	r1, r6
 801a306:	4628      	mov	r0, r5
 801a308:	9206      	str	r2, [sp, #24]
 801a30a:	47b8      	blx	r7
 801a30c:	3001      	adds	r0, #1
 801a30e:	f43f ae9c 	beq.w	801a04a <_printf_float+0xb6>
 801a312:	9a06      	ldr	r2, [sp, #24]
 801a314:	f10b 0b01 	add.w	fp, fp, #1
 801a318:	e7bb      	b.n	801a292 <_printf_float+0x2fe>
 801a31a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a31e:	4631      	mov	r1, r6
 801a320:	4628      	mov	r0, r5
 801a322:	47b8      	blx	r7
 801a324:	3001      	adds	r0, #1
 801a326:	d1c0      	bne.n	801a2aa <_printf_float+0x316>
 801a328:	e68f      	b.n	801a04a <_printf_float+0xb6>
 801a32a:	9a06      	ldr	r2, [sp, #24]
 801a32c:	464b      	mov	r3, r9
 801a32e:	4442      	add	r2, r8
 801a330:	4631      	mov	r1, r6
 801a332:	4628      	mov	r0, r5
 801a334:	47b8      	blx	r7
 801a336:	3001      	adds	r0, #1
 801a338:	d1c3      	bne.n	801a2c2 <_printf_float+0x32e>
 801a33a:	e686      	b.n	801a04a <_printf_float+0xb6>
 801a33c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a340:	f1ba 0f01 	cmp.w	sl, #1
 801a344:	dc01      	bgt.n	801a34a <_printf_float+0x3b6>
 801a346:	07db      	lsls	r3, r3, #31
 801a348:	d536      	bpl.n	801a3b8 <_printf_float+0x424>
 801a34a:	2301      	movs	r3, #1
 801a34c:	4642      	mov	r2, r8
 801a34e:	4631      	mov	r1, r6
 801a350:	4628      	mov	r0, r5
 801a352:	47b8      	blx	r7
 801a354:	3001      	adds	r0, #1
 801a356:	f43f ae78 	beq.w	801a04a <_printf_float+0xb6>
 801a35a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a35e:	4631      	mov	r1, r6
 801a360:	4628      	mov	r0, r5
 801a362:	47b8      	blx	r7
 801a364:	3001      	adds	r0, #1
 801a366:	f43f ae70 	beq.w	801a04a <_printf_float+0xb6>
 801a36a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a36e:	2200      	movs	r2, #0
 801a370:	2300      	movs	r3, #0
 801a372:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a376:	f7e6 fba7 	bl	8000ac8 <__aeabi_dcmpeq>
 801a37a:	b9c0      	cbnz	r0, 801a3ae <_printf_float+0x41a>
 801a37c:	4653      	mov	r3, sl
 801a37e:	f108 0201 	add.w	r2, r8, #1
 801a382:	4631      	mov	r1, r6
 801a384:	4628      	mov	r0, r5
 801a386:	47b8      	blx	r7
 801a388:	3001      	adds	r0, #1
 801a38a:	d10c      	bne.n	801a3a6 <_printf_float+0x412>
 801a38c:	e65d      	b.n	801a04a <_printf_float+0xb6>
 801a38e:	2301      	movs	r3, #1
 801a390:	465a      	mov	r2, fp
 801a392:	4631      	mov	r1, r6
 801a394:	4628      	mov	r0, r5
 801a396:	47b8      	blx	r7
 801a398:	3001      	adds	r0, #1
 801a39a:	f43f ae56 	beq.w	801a04a <_printf_float+0xb6>
 801a39e:	f108 0801 	add.w	r8, r8, #1
 801a3a2:	45d0      	cmp	r8, sl
 801a3a4:	dbf3      	blt.n	801a38e <_printf_float+0x3fa>
 801a3a6:	464b      	mov	r3, r9
 801a3a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a3ac:	e6df      	b.n	801a16e <_printf_float+0x1da>
 801a3ae:	f04f 0800 	mov.w	r8, #0
 801a3b2:	f104 0b1a 	add.w	fp, r4, #26
 801a3b6:	e7f4      	b.n	801a3a2 <_printf_float+0x40e>
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	4642      	mov	r2, r8
 801a3bc:	e7e1      	b.n	801a382 <_printf_float+0x3ee>
 801a3be:	2301      	movs	r3, #1
 801a3c0:	464a      	mov	r2, r9
 801a3c2:	4631      	mov	r1, r6
 801a3c4:	4628      	mov	r0, r5
 801a3c6:	47b8      	blx	r7
 801a3c8:	3001      	adds	r0, #1
 801a3ca:	f43f ae3e 	beq.w	801a04a <_printf_float+0xb6>
 801a3ce:	f108 0801 	add.w	r8, r8, #1
 801a3d2:	68e3      	ldr	r3, [r4, #12]
 801a3d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a3d6:	1a5b      	subs	r3, r3, r1
 801a3d8:	4543      	cmp	r3, r8
 801a3da:	dcf0      	bgt.n	801a3be <_printf_float+0x42a>
 801a3dc:	e6fc      	b.n	801a1d8 <_printf_float+0x244>
 801a3de:	f04f 0800 	mov.w	r8, #0
 801a3e2:	f104 0919 	add.w	r9, r4, #25
 801a3e6:	e7f4      	b.n	801a3d2 <_printf_float+0x43e>

0801a3e8 <__sfputc_r>:
 801a3e8:	6893      	ldr	r3, [r2, #8]
 801a3ea:	3b01      	subs	r3, #1
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	b410      	push	{r4}
 801a3f0:	6093      	str	r3, [r2, #8]
 801a3f2:	da08      	bge.n	801a406 <__sfputc_r+0x1e>
 801a3f4:	6994      	ldr	r4, [r2, #24]
 801a3f6:	42a3      	cmp	r3, r4
 801a3f8:	db01      	blt.n	801a3fe <__sfputc_r+0x16>
 801a3fa:	290a      	cmp	r1, #10
 801a3fc:	d103      	bne.n	801a406 <__sfputc_r+0x1e>
 801a3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a402:	f000 bea4 	b.w	801b14e <__swbuf_r>
 801a406:	6813      	ldr	r3, [r2, #0]
 801a408:	1c58      	adds	r0, r3, #1
 801a40a:	6010      	str	r0, [r2, #0]
 801a40c:	7019      	strb	r1, [r3, #0]
 801a40e:	4608      	mov	r0, r1
 801a410:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a414:	4770      	bx	lr

0801a416 <__sfputs_r>:
 801a416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a418:	4606      	mov	r6, r0
 801a41a:	460f      	mov	r7, r1
 801a41c:	4614      	mov	r4, r2
 801a41e:	18d5      	adds	r5, r2, r3
 801a420:	42ac      	cmp	r4, r5
 801a422:	d101      	bne.n	801a428 <__sfputs_r+0x12>
 801a424:	2000      	movs	r0, #0
 801a426:	e007      	b.n	801a438 <__sfputs_r+0x22>
 801a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a42c:	463a      	mov	r2, r7
 801a42e:	4630      	mov	r0, r6
 801a430:	f7ff ffda 	bl	801a3e8 <__sfputc_r>
 801a434:	1c43      	adds	r3, r0, #1
 801a436:	d1f3      	bne.n	801a420 <__sfputs_r+0xa>
 801a438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a43c <_vfiprintf_r>:
 801a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a440:	460d      	mov	r5, r1
 801a442:	b09d      	sub	sp, #116	@ 0x74
 801a444:	4614      	mov	r4, r2
 801a446:	4698      	mov	r8, r3
 801a448:	4606      	mov	r6, r0
 801a44a:	b118      	cbz	r0, 801a454 <_vfiprintf_r+0x18>
 801a44c:	6a03      	ldr	r3, [r0, #32]
 801a44e:	b90b      	cbnz	r3, 801a454 <_vfiprintf_r+0x18>
 801a450:	f000 fd3c 	bl	801aecc <__sinit>
 801a454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a456:	07d9      	lsls	r1, r3, #31
 801a458:	d405      	bmi.n	801a466 <_vfiprintf_r+0x2a>
 801a45a:	89ab      	ldrh	r3, [r5, #12]
 801a45c:	059a      	lsls	r2, r3, #22
 801a45e:	d402      	bmi.n	801a466 <_vfiprintf_r+0x2a>
 801a460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a462:	f001 f810 	bl	801b486 <__retarget_lock_acquire_recursive>
 801a466:	89ab      	ldrh	r3, [r5, #12]
 801a468:	071b      	lsls	r3, r3, #28
 801a46a:	d501      	bpl.n	801a470 <_vfiprintf_r+0x34>
 801a46c:	692b      	ldr	r3, [r5, #16]
 801a46e:	b99b      	cbnz	r3, 801a498 <_vfiprintf_r+0x5c>
 801a470:	4629      	mov	r1, r5
 801a472:	4630      	mov	r0, r6
 801a474:	f000 feaa 	bl	801b1cc <__swsetup_r>
 801a478:	b170      	cbz	r0, 801a498 <_vfiprintf_r+0x5c>
 801a47a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a47c:	07dc      	lsls	r4, r3, #31
 801a47e:	d504      	bpl.n	801a48a <_vfiprintf_r+0x4e>
 801a480:	f04f 30ff 	mov.w	r0, #4294967295
 801a484:	b01d      	add	sp, #116	@ 0x74
 801a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a48a:	89ab      	ldrh	r3, [r5, #12]
 801a48c:	0598      	lsls	r0, r3, #22
 801a48e:	d4f7      	bmi.n	801a480 <_vfiprintf_r+0x44>
 801a490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a492:	f000 fff9 	bl	801b488 <__retarget_lock_release_recursive>
 801a496:	e7f3      	b.n	801a480 <_vfiprintf_r+0x44>
 801a498:	2300      	movs	r3, #0
 801a49a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a49c:	2320      	movs	r3, #32
 801a49e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a4a6:	2330      	movs	r3, #48	@ 0x30
 801a4a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a658 <_vfiprintf_r+0x21c>
 801a4ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a4b0:	f04f 0901 	mov.w	r9, #1
 801a4b4:	4623      	mov	r3, r4
 801a4b6:	469a      	mov	sl, r3
 801a4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4bc:	b10a      	cbz	r2, 801a4c2 <_vfiprintf_r+0x86>
 801a4be:	2a25      	cmp	r2, #37	@ 0x25
 801a4c0:	d1f9      	bne.n	801a4b6 <_vfiprintf_r+0x7a>
 801a4c2:	ebba 0b04 	subs.w	fp, sl, r4
 801a4c6:	d00b      	beq.n	801a4e0 <_vfiprintf_r+0xa4>
 801a4c8:	465b      	mov	r3, fp
 801a4ca:	4622      	mov	r2, r4
 801a4cc:	4629      	mov	r1, r5
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	f7ff ffa1 	bl	801a416 <__sfputs_r>
 801a4d4:	3001      	adds	r0, #1
 801a4d6:	f000 80a7 	beq.w	801a628 <_vfiprintf_r+0x1ec>
 801a4da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a4dc:	445a      	add	r2, fp
 801a4de:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	f000 809f 	beq.w	801a628 <_vfiprintf_r+0x1ec>
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	f04f 32ff 	mov.w	r2, #4294967295
 801a4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4f4:	f10a 0a01 	add.w	sl, sl, #1
 801a4f8:	9304      	str	r3, [sp, #16]
 801a4fa:	9307      	str	r3, [sp, #28]
 801a4fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a500:	931a      	str	r3, [sp, #104]	@ 0x68
 801a502:	4654      	mov	r4, sl
 801a504:	2205      	movs	r2, #5
 801a506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a50a:	4853      	ldr	r0, [pc, #332]	@ (801a658 <_vfiprintf_r+0x21c>)
 801a50c:	f7e5 fe60 	bl	80001d0 <memchr>
 801a510:	9a04      	ldr	r2, [sp, #16]
 801a512:	b9d8      	cbnz	r0, 801a54c <_vfiprintf_r+0x110>
 801a514:	06d1      	lsls	r1, r2, #27
 801a516:	bf44      	itt	mi
 801a518:	2320      	movmi	r3, #32
 801a51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a51e:	0713      	lsls	r3, r2, #28
 801a520:	bf44      	itt	mi
 801a522:	232b      	movmi	r3, #43	@ 0x2b
 801a524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a528:	f89a 3000 	ldrb.w	r3, [sl]
 801a52c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a52e:	d015      	beq.n	801a55c <_vfiprintf_r+0x120>
 801a530:	9a07      	ldr	r2, [sp, #28]
 801a532:	4654      	mov	r4, sl
 801a534:	2000      	movs	r0, #0
 801a536:	f04f 0c0a 	mov.w	ip, #10
 801a53a:	4621      	mov	r1, r4
 801a53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a540:	3b30      	subs	r3, #48	@ 0x30
 801a542:	2b09      	cmp	r3, #9
 801a544:	d94b      	bls.n	801a5de <_vfiprintf_r+0x1a2>
 801a546:	b1b0      	cbz	r0, 801a576 <_vfiprintf_r+0x13a>
 801a548:	9207      	str	r2, [sp, #28]
 801a54a:	e014      	b.n	801a576 <_vfiprintf_r+0x13a>
 801a54c:	eba0 0308 	sub.w	r3, r0, r8
 801a550:	fa09 f303 	lsl.w	r3, r9, r3
 801a554:	4313      	orrs	r3, r2
 801a556:	9304      	str	r3, [sp, #16]
 801a558:	46a2      	mov	sl, r4
 801a55a:	e7d2      	b.n	801a502 <_vfiprintf_r+0xc6>
 801a55c:	9b03      	ldr	r3, [sp, #12]
 801a55e:	1d19      	adds	r1, r3, #4
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	9103      	str	r1, [sp, #12]
 801a564:	2b00      	cmp	r3, #0
 801a566:	bfbb      	ittet	lt
 801a568:	425b      	neglt	r3, r3
 801a56a:	f042 0202 	orrlt.w	r2, r2, #2
 801a56e:	9307      	strge	r3, [sp, #28]
 801a570:	9307      	strlt	r3, [sp, #28]
 801a572:	bfb8      	it	lt
 801a574:	9204      	strlt	r2, [sp, #16]
 801a576:	7823      	ldrb	r3, [r4, #0]
 801a578:	2b2e      	cmp	r3, #46	@ 0x2e
 801a57a:	d10a      	bne.n	801a592 <_vfiprintf_r+0x156>
 801a57c:	7863      	ldrb	r3, [r4, #1]
 801a57e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a580:	d132      	bne.n	801a5e8 <_vfiprintf_r+0x1ac>
 801a582:	9b03      	ldr	r3, [sp, #12]
 801a584:	1d1a      	adds	r2, r3, #4
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	9203      	str	r2, [sp, #12]
 801a58a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a58e:	3402      	adds	r4, #2
 801a590:	9305      	str	r3, [sp, #20]
 801a592:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a668 <_vfiprintf_r+0x22c>
 801a596:	7821      	ldrb	r1, [r4, #0]
 801a598:	2203      	movs	r2, #3
 801a59a:	4650      	mov	r0, sl
 801a59c:	f7e5 fe18 	bl	80001d0 <memchr>
 801a5a0:	b138      	cbz	r0, 801a5b2 <_vfiprintf_r+0x176>
 801a5a2:	9b04      	ldr	r3, [sp, #16]
 801a5a4:	eba0 000a 	sub.w	r0, r0, sl
 801a5a8:	2240      	movs	r2, #64	@ 0x40
 801a5aa:	4082      	lsls	r2, r0
 801a5ac:	4313      	orrs	r3, r2
 801a5ae:	3401      	adds	r4, #1
 801a5b0:	9304      	str	r3, [sp, #16]
 801a5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5b6:	4829      	ldr	r0, [pc, #164]	@ (801a65c <_vfiprintf_r+0x220>)
 801a5b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a5bc:	2206      	movs	r2, #6
 801a5be:	f7e5 fe07 	bl	80001d0 <memchr>
 801a5c2:	2800      	cmp	r0, #0
 801a5c4:	d03f      	beq.n	801a646 <_vfiprintf_r+0x20a>
 801a5c6:	4b26      	ldr	r3, [pc, #152]	@ (801a660 <_vfiprintf_r+0x224>)
 801a5c8:	bb1b      	cbnz	r3, 801a612 <_vfiprintf_r+0x1d6>
 801a5ca:	9b03      	ldr	r3, [sp, #12]
 801a5cc:	3307      	adds	r3, #7
 801a5ce:	f023 0307 	bic.w	r3, r3, #7
 801a5d2:	3308      	adds	r3, #8
 801a5d4:	9303      	str	r3, [sp, #12]
 801a5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5d8:	443b      	add	r3, r7
 801a5da:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5dc:	e76a      	b.n	801a4b4 <_vfiprintf_r+0x78>
 801a5de:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5e2:	460c      	mov	r4, r1
 801a5e4:	2001      	movs	r0, #1
 801a5e6:	e7a8      	b.n	801a53a <_vfiprintf_r+0xfe>
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	3401      	adds	r4, #1
 801a5ec:	9305      	str	r3, [sp, #20]
 801a5ee:	4619      	mov	r1, r3
 801a5f0:	f04f 0c0a 	mov.w	ip, #10
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5fa:	3a30      	subs	r2, #48	@ 0x30
 801a5fc:	2a09      	cmp	r2, #9
 801a5fe:	d903      	bls.n	801a608 <_vfiprintf_r+0x1cc>
 801a600:	2b00      	cmp	r3, #0
 801a602:	d0c6      	beq.n	801a592 <_vfiprintf_r+0x156>
 801a604:	9105      	str	r1, [sp, #20]
 801a606:	e7c4      	b.n	801a592 <_vfiprintf_r+0x156>
 801a608:	fb0c 2101 	mla	r1, ip, r1, r2
 801a60c:	4604      	mov	r4, r0
 801a60e:	2301      	movs	r3, #1
 801a610:	e7f0      	b.n	801a5f4 <_vfiprintf_r+0x1b8>
 801a612:	ab03      	add	r3, sp, #12
 801a614:	9300      	str	r3, [sp, #0]
 801a616:	462a      	mov	r2, r5
 801a618:	4b12      	ldr	r3, [pc, #72]	@ (801a664 <_vfiprintf_r+0x228>)
 801a61a:	a904      	add	r1, sp, #16
 801a61c:	4630      	mov	r0, r6
 801a61e:	f7ff fcb9 	bl	8019f94 <_printf_float>
 801a622:	4607      	mov	r7, r0
 801a624:	1c78      	adds	r0, r7, #1
 801a626:	d1d6      	bne.n	801a5d6 <_vfiprintf_r+0x19a>
 801a628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a62a:	07d9      	lsls	r1, r3, #31
 801a62c:	d405      	bmi.n	801a63a <_vfiprintf_r+0x1fe>
 801a62e:	89ab      	ldrh	r3, [r5, #12]
 801a630:	059a      	lsls	r2, r3, #22
 801a632:	d402      	bmi.n	801a63a <_vfiprintf_r+0x1fe>
 801a634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a636:	f000 ff27 	bl	801b488 <__retarget_lock_release_recursive>
 801a63a:	89ab      	ldrh	r3, [r5, #12]
 801a63c:	065b      	lsls	r3, r3, #25
 801a63e:	f53f af1f 	bmi.w	801a480 <_vfiprintf_r+0x44>
 801a642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a644:	e71e      	b.n	801a484 <_vfiprintf_r+0x48>
 801a646:	ab03      	add	r3, sp, #12
 801a648:	9300      	str	r3, [sp, #0]
 801a64a:	462a      	mov	r2, r5
 801a64c:	4b05      	ldr	r3, [pc, #20]	@ (801a664 <_vfiprintf_r+0x228>)
 801a64e:	a904      	add	r1, sp, #16
 801a650:	4630      	mov	r0, r6
 801a652:	f000 f883 	bl	801a75c <_printf_i>
 801a656:	e7e4      	b.n	801a622 <_vfiprintf_r+0x1e6>
 801a658:	080202ea 	.word	0x080202ea
 801a65c:	080202f4 	.word	0x080202f4
 801a660:	08019f95 	.word	0x08019f95
 801a664:	0801a417 	.word	0x0801a417
 801a668:	080202f0 	.word	0x080202f0

0801a66c <vfiprintf>:
 801a66c:	4613      	mov	r3, r2
 801a66e:	460a      	mov	r2, r1
 801a670:	4601      	mov	r1, r0
 801a672:	4802      	ldr	r0, [pc, #8]	@ (801a67c <vfiprintf+0x10>)
 801a674:	6800      	ldr	r0, [r0, #0]
 801a676:	f7ff bee1 	b.w	801a43c <_vfiprintf_r>
 801a67a:	bf00      	nop
 801a67c:	200002cc 	.word	0x200002cc

0801a680 <_printf_common>:
 801a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a684:	4616      	mov	r6, r2
 801a686:	4698      	mov	r8, r3
 801a688:	688a      	ldr	r2, [r1, #8]
 801a68a:	690b      	ldr	r3, [r1, #16]
 801a68c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a690:	4293      	cmp	r3, r2
 801a692:	bfb8      	it	lt
 801a694:	4613      	movlt	r3, r2
 801a696:	6033      	str	r3, [r6, #0]
 801a698:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a69c:	4607      	mov	r7, r0
 801a69e:	460c      	mov	r4, r1
 801a6a0:	b10a      	cbz	r2, 801a6a6 <_printf_common+0x26>
 801a6a2:	3301      	adds	r3, #1
 801a6a4:	6033      	str	r3, [r6, #0]
 801a6a6:	6823      	ldr	r3, [r4, #0]
 801a6a8:	0699      	lsls	r1, r3, #26
 801a6aa:	bf42      	ittt	mi
 801a6ac:	6833      	ldrmi	r3, [r6, #0]
 801a6ae:	3302      	addmi	r3, #2
 801a6b0:	6033      	strmi	r3, [r6, #0]
 801a6b2:	6825      	ldr	r5, [r4, #0]
 801a6b4:	f015 0506 	ands.w	r5, r5, #6
 801a6b8:	d106      	bne.n	801a6c8 <_printf_common+0x48>
 801a6ba:	f104 0a19 	add.w	sl, r4, #25
 801a6be:	68e3      	ldr	r3, [r4, #12]
 801a6c0:	6832      	ldr	r2, [r6, #0]
 801a6c2:	1a9b      	subs	r3, r3, r2
 801a6c4:	42ab      	cmp	r3, r5
 801a6c6:	dc26      	bgt.n	801a716 <_printf_common+0x96>
 801a6c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a6cc:	6822      	ldr	r2, [r4, #0]
 801a6ce:	3b00      	subs	r3, #0
 801a6d0:	bf18      	it	ne
 801a6d2:	2301      	movne	r3, #1
 801a6d4:	0692      	lsls	r2, r2, #26
 801a6d6:	d42b      	bmi.n	801a730 <_printf_common+0xb0>
 801a6d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a6dc:	4641      	mov	r1, r8
 801a6de:	4638      	mov	r0, r7
 801a6e0:	47c8      	blx	r9
 801a6e2:	3001      	adds	r0, #1
 801a6e4:	d01e      	beq.n	801a724 <_printf_common+0xa4>
 801a6e6:	6823      	ldr	r3, [r4, #0]
 801a6e8:	6922      	ldr	r2, [r4, #16]
 801a6ea:	f003 0306 	and.w	r3, r3, #6
 801a6ee:	2b04      	cmp	r3, #4
 801a6f0:	bf02      	ittt	eq
 801a6f2:	68e5      	ldreq	r5, [r4, #12]
 801a6f4:	6833      	ldreq	r3, [r6, #0]
 801a6f6:	1aed      	subeq	r5, r5, r3
 801a6f8:	68a3      	ldr	r3, [r4, #8]
 801a6fa:	bf0c      	ite	eq
 801a6fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a700:	2500      	movne	r5, #0
 801a702:	4293      	cmp	r3, r2
 801a704:	bfc4      	itt	gt
 801a706:	1a9b      	subgt	r3, r3, r2
 801a708:	18ed      	addgt	r5, r5, r3
 801a70a:	2600      	movs	r6, #0
 801a70c:	341a      	adds	r4, #26
 801a70e:	42b5      	cmp	r5, r6
 801a710:	d11a      	bne.n	801a748 <_printf_common+0xc8>
 801a712:	2000      	movs	r0, #0
 801a714:	e008      	b.n	801a728 <_printf_common+0xa8>
 801a716:	2301      	movs	r3, #1
 801a718:	4652      	mov	r2, sl
 801a71a:	4641      	mov	r1, r8
 801a71c:	4638      	mov	r0, r7
 801a71e:	47c8      	blx	r9
 801a720:	3001      	adds	r0, #1
 801a722:	d103      	bne.n	801a72c <_printf_common+0xac>
 801a724:	f04f 30ff 	mov.w	r0, #4294967295
 801a728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a72c:	3501      	adds	r5, #1
 801a72e:	e7c6      	b.n	801a6be <_printf_common+0x3e>
 801a730:	18e1      	adds	r1, r4, r3
 801a732:	1c5a      	adds	r2, r3, #1
 801a734:	2030      	movs	r0, #48	@ 0x30
 801a736:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a73a:	4422      	add	r2, r4
 801a73c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a740:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a744:	3302      	adds	r3, #2
 801a746:	e7c7      	b.n	801a6d8 <_printf_common+0x58>
 801a748:	2301      	movs	r3, #1
 801a74a:	4622      	mov	r2, r4
 801a74c:	4641      	mov	r1, r8
 801a74e:	4638      	mov	r0, r7
 801a750:	47c8      	blx	r9
 801a752:	3001      	adds	r0, #1
 801a754:	d0e6      	beq.n	801a724 <_printf_common+0xa4>
 801a756:	3601      	adds	r6, #1
 801a758:	e7d9      	b.n	801a70e <_printf_common+0x8e>
	...

0801a75c <_printf_i>:
 801a75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a760:	7e0f      	ldrb	r7, [r1, #24]
 801a762:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a764:	2f78      	cmp	r7, #120	@ 0x78
 801a766:	4691      	mov	r9, r2
 801a768:	4680      	mov	r8, r0
 801a76a:	460c      	mov	r4, r1
 801a76c:	469a      	mov	sl, r3
 801a76e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a772:	d807      	bhi.n	801a784 <_printf_i+0x28>
 801a774:	2f62      	cmp	r7, #98	@ 0x62
 801a776:	d80a      	bhi.n	801a78e <_printf_i+0x32>
 801a778:	2f00      	cmp	r7, #0
 801a77a:	f000 80d1 	beq.w	801a920 <_printf_i+0x1c4>
 801a77e:	2f58      	cmp	r7, #88	@ 0x58
 801a780:	f000 80b8 	beq.w	801a8f4 <_printf_i+0x198>
 801a784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a78c:	e03a      	b.n	801a804 <_printf_i+0xa8>
 801a78e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a792:	2b15      	cmp	r3, #21
 801a794:	d8f6      	bhi.n	801a784 <_printf_i+0x28>
 801a796:	a101      	add	r1, pc, #4	@ (adr r1, 801a79c <_printf_i+0x40>)
 801a798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a79c:	0801a7f5 	.word	0x0801a7f5
 801a7a0:	0801a809 	.word	0x0801a809
 801a7a4:	0801a785 	.word	0x0801a785
 801a7a8:	0801a785 	.word	0x0801a785
 801a7ac:	0801a785 	.word	0x0801a785
 801a7b0:	0801a785 	.word	0x0801a785
 801a7b4:	0801a809 	.word	0x0801a809
 801a7b8:	0801a785 	.word	0x0801a785
 801a7bc:	0801a785 	.word	0x0801a785
 801a7c0:	0801a785 	.word	0x0801a785
 801a7c4:	0801a785 	.word	0x0801a785
 801a7c8:	0801a907 	.word	0x0801a907
 801a7cc:	0801a833 	.word	0x0801a833
 801a7d0:	0801a8c1 	.word	0x0801a8c1
 801a7d4:	0801a785 	.word	0x0801a785
 801a7d8:	0801a785 	.word	0x0801a785
 801a7dc:	0801a929 	.word	0x0801a929
 801a7e0:	0801a785 	.word	0x0801a785
 801a7e4:	0801a833 	.word	0x0801a833
 801a7e8:	0801a785 	.word	0x0801a785
 801a7ec:	0801a785 	.word	0x0801a785
 801a7f0:	0801a8c9 	.word	0x0801a8c9
 801a7f4:	6833      	ldr	r3, [r6, #0]
 801a7f6:	1d1a      	adds	r2, r3, #4
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	6032      	str	r2, [r6, #0]
 801a7fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a804:	2301      	movs	r3, #1
 801a806:	e09c      	b.n	801a942 <_printf_i+0x1e6>
 801a808:	6833      	ldr	r3, [r6, #0]
 801a80a:	6820      	ldr	r0, [r4, #0]
 801a80c:	1d19      	adds	r1, r3, #4
 801a80e:	6031      	str	r1, [r6, #0]
 801a810:	0606      	lsls	r6, r0, #24
 801a812:	d501      	bpl.n	801a818 <_printf_i+0xbc>
 801a814:	681d      	ldr	r5, [r3, #0]
 801a816:	e003      	b.n	801a820 <_printf_i+0xc4>
 801a818:	0645      	lsls	r5, r0, #25
 801a81a:	d5fb      	bpl.n	801a814 <_printf_i+0xb8>
 801a81c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a820:	2d00      	cmp	r5, #0
 801a822:	da03      	bge.n	801a82c <_printf_i+0xd0>
 801a824:	232d      	movs	r3, #45	@ 0x2d
 801a826:	426d      	negs	r5, r5
 801a828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a82c:	4858      	ldr	r0, [pc, #352]	@ (801a990 <_printf_i+0x234>)
 801a82e:	230a      	movs	r3, #10
 801a830:	e011      	b.n	801a856 <_printf_i+0xfa>
 801a832:	6821      	ldr	r1, [r4, #0]
 801a834:	6833      	ldr	r3, [r6, #0]
 801a836:	0608      	lsls	r0, r1, #24
 801a838:	f853 5b04 	ldr.w	r5, [r3], #4
 801a83c:	d402      	bmi.n	801a844 <_printf_i+0xe8>
 801a83e:	0649      	lsls	r1, r1, #25
 801a840:	bf48      	it	mi
 801a842:	b2ad      	uxthmi	r5, r5
 801a844:	2f6f      	cmp	r7, #111	@ 0x6f
 801a846:	4852      	ldr	r0, [pc, #328]	@ (801a990 <_printf_i+0x234>)
 801a848:	6033      	str	r3, [r6, #0]
 801a84a:	bf14      	ite	ne
 801a84c:	230a      	movne	r3, #10
 801a84e:	2308      	moveq	r3, #8
 801a850:	2100      	movs	r1, #0
 801a852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a856:	6866      	ldr	r6, [r4, #4]
 801a858:	60a6      	str	r6, [r4, #8]
 801a85a:	2e00      	cmp	r6, #0
 801a85c:	db05      	blt.n	801a86a <_printf_i+0x10e>
 801a85e:	6821      	ldr	r1, [r4, #0]
 801a860:	432e      	orrs	r6, r5
 801a862:	f021 0104 	bic.w	r1, r1, #4
 801a866:	6021      	str	r1, [r4, #0]
 801a868:	d04b      	beq.n	801a902 <_printf_i+0x1a6>
 801a86a:	4616      	mov	r6, r2
 801a86c:	fbb5 f1f3 	udiv	r1, r5, r3
 801a870:	fb03 5711 	mls	r7, r3, r1, r5
 801a874:	5dc7      	ldrb	r7, [r0, r7]
 801a876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a87a:	462f      	mov	r7, r5
 801a87c:	42bb      	cmp	r3, r7
 801a87e:	460d      	mov	r5, r1
 801a880:	d9f4      	bls.n	801a86c <_printf_i+0x110>
 801a882:	2b08      	cmp	r3, #8
 801a884:	d10b      	bne.n	801a89e <_printf_i+0x142>
 801a886:	6823      	ldr	r3, [r4, #0]
 801a888:	07df      	lsls	r7, r3, #31
 801a88a:	d508      	bpl.n	801a89e <_printf_i+0x142>
 801a88c:	6923      	ldr	r3, [r4, #16]
 801a88e:	6861      	ldr	r1, [r4, #4]
 801a890:	4299      	cmp	r1, r3
 801a892:	bfde      	ittt	le
 801a894:	2330      	movle	r3, #48	@ 0x30
 801a896:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a89a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a89e:	1b92      	subs	r2, r2, r6
 801a8a0:	6122      	str	r2, [r4, #16]
 801a8a2:	f8cd a000 	str.w	sl, [sp]
 801a8a6:	464b      	mov	r3, r9
 801a8a8:	aa03      	add	r2, sp, #12
 801a8aa:	4621      	mov	r1, r4
 801a8ac:	4640      	mov	r0, r8
 801a8ae:	f7ff fee7 	bl	801a680 <_printf_common>
 801a8b2:	3001      	adds	r0, #1
 801a8b4:	d14a      	bne.n	801a94c <_printf_i+0x1f0>
 801a8b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ba:	b004      	add	sp, #16
 801a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8c0:	6823      	ldr	r3, [r4, #0]
 801a8c2:	f043 0320 	orr.w	r3, r3, #32
 801a8c6:	6023      	str	r3, [r4, #0]
 801a8c8:	4832      	ldr	r0, [pc, #200]	@ (801a994 <_printf_i+0x238>)
 801a8ca:	2778      	movs	r7, #120	@ 0x78
 801a8cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a8d0:	6823      	ldr	r3, [r4, #0]
 801a8d2:	6831      	ldr	r1, [r6, #0]
 801a8d4:	061f      	lsls	r7, r3, #24
 801a8d6:	f851 5b04 	ldr.w	r5, [r1], #4
 801a8da:	d402      	bmi.n	801a8e2 <_printf_i+0x186>
 801a8dc:	065f      	lsls	r7, r3, #25
 801a8de:	bf48      	it	mi
 801a8e0:	b2ad      	uxthmi	r5, r5
 801a8e2:	6031      	str	r1, [r6, #0]
 801a8e4:	07d9      	lsls	r1, r3, #31
 801a8e6:	bf44      	itt	mi
 801a8e8:	f043 0320 	orrmi.w	r3, r3, #32
 801a8ec:	6023      	strmi	r3, [r4, #0]
 801a8ee:	b11d      	cbz	r5, 801a8f8 <_printf_i+0x19c>
 801a8f0:	2310      	movs	r3, #16
 801a8f2:	e7ad      	b.n	801a850 <_printf_i+0xf4>
 801a8f4:	4826      	ldr	r0, [pc, #152]	@ (801a990 <_printf_i+0x234>)
 801a8f6:	e7e9      	b.n	801a8cc <_printf_i+0x170>
 801a8f8:	6823      	ldr	r3, [r4, #0]
 801a8fa:	f023 0320 	bic.w	r3, r3, #32
 801a8fe:	6023      	str	r3, [r4, #0]
 801a900:	e7f6      	b.n	801a8f0 <_printf_i+0x194>
 801a902:	4616      	mov	r6, r2
 801a904:	e7bd      	b.n	801a882 <_printf_i+0x126>
 801a906:	6833      	ldr	r3, [r6, #0]
 801a908:	6825      	ldr	r5, [r4, #0]
 801a90a:	6961      	ldr	r1, [r4, #20]
 801a90c:	1d18      	adds	r0, r3, #4
 801a90e:	6030      	str	r0, [r6, #0]
 801a910:	062e      	lsls	r6, r5, #24
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	d501      	bpl.n	801a91a <_printf_i+0x1be>
 801a916:	6019      	str	r1, [r3, #0]
 801a918:	e002      	b.n	801a920 <_printf_i+0x1c4>
 801a91a:	0668      	lsls	r0, r5, #25
 801a91c:	d5fb      	bpl.n	801a916 <_printf_i+0x1ba>
 801a91e:	8019      	strh	r1, [r3, #0]
 801a920:	2300      	movs	r3, #0
 801a922:	6123      	str	r3, [r4, #16]
 801a924:	4616      	mov	r6, r2
 801a926:	e7bc      	b.n	801a8a2 <_printf_i+0x146>
 801a928:	6833      	ldr	r3, [r6, #0]
 801a92a:	1d1a      	adds	r2, r3, #4
 801a92c:	6032      	str	r2, [r6, #0]
 801a92e:	681e      	ldr	r6, [r3, #0]
 801a930:	6862      	ldr	r2, [r4, #4]
 801a932:	2100      	movs	r1, #0
 801a934:	4630      	mov	r0, r6
 801a936:	f7e5 fc4b 	bl	80001d0 <memchr>
 801a93a:	b108      	cbz	r0, 801a940 <_printf_i+0x1e4>
 801a93c:	1b80      	subs	r0, r0, r6
 801a93e:	6060      	str	r0, [r4, #4]
 801a940:	6863      	ldr	r3, [r4, #4]
 801a942:	6123      	str	r3, [r4, #16]
 801a944:	2300      	movs	r3, #0
 801a946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a94a:	e7aa      	b.n	801a8a2 <_printf_i+0x146>
 801a94c:	6923      	ldr	r3, [r4, #16]
 801a94e:	4632      	mov	r2, r6
 801a950:	4649      	mov	r1, r9
 801a952:	4640      	mov	r0, r8
 801a954:	47d0      	blx	sl
 801a956:	3001      	adds	r0, #1
 801a958:	d0ad      	beq.n	801a8b6 <_printf_i+0x15a>
 801a95a:	6823      	ldr	r3, [r4, #0]
 801a95c:	079b      	lsls	r3, r3, #30
 801a95e:	d413      	bmi.n	801a988 <_printf_i+0x22c>
 801a960:	68e0      	ldr	r0, [r4, #12]
 801a962:	9b03      	ldr	r3, [sp, #12]
 801a964:	4298      	cmp	r0, r3
 801a966:	bfb8      	it	lt
 801a968:	4618      	movlt	r0, r3
 801a96a:	e7a6      	b.n	801a8ba <_printf_i+0x15e>
 801a96c:	2301      	movs	r3, #1
 801a96e:	4632      	mov	r2, r6
 801a970:	4649      	mov	r1, r9
 801a972:	4640      	mov	r0, r8
 801a974:	47d0      	blx	sl
 801a976:	3001      	adds	r0, #1
 801a978:	d09d      	beq.n	801a8b6 <_printf_i+0x15a>
 801a97a:	3501      	adds	r5, #1
 801a97c:	68e3      	ldr	r3, [r4, #12]
 801a97e:	9903      	ldr	r1, [sp, #12]
 801a980:	1a5b      	subs	r3, r3, r1
 801a982:	42ab      	cmp	r3, r5
 801a984:	dcf2      	bgt.n	801a96c <_printf_i+0x210>
 801a986:	e7eb      	b.n	801a960 <_printf_i+0x204>
 801a988:	2500      	movs	r5, #0
 801a98a:	f104 0619 	add.w	r6, r4, #25
 801a98e:	e7f5      	b.n	801a97c <_printf_i+0x220>
 801a990:	080202fb 	.word	0x080202fb
 801a994:	0802030c 	.word	0x0802030c

0801a998 <_scanf_float>:
 801a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a99c:	b087      	sub	sp, #28
 801a99e:	4691      	mov	r9, r2
 801a9a0:	9303      	str	r3, [sp, #12]
 801a9a2:	688b      	ldr	r3, [r1, #8]
 801a9a4:	1e5a      	subs	r2, r3, #1
 801a9a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801a9aa:	bf81      	itttt	hi
 801a9ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801a9b0:	eb03 0b05 	addhi.w	fp, r3, r5
 801a9b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801a9b8:	608b      	strhi	r3, [r1, #8]
 801a9ba:	680b      	ldr	r3, [r1, #0]
 801a9bc:	460a      	mov	r2, r1
 801a9be:	f04f 0500 	mov.w	r5, #0
 801a9c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801a9c6:	f842 3b1c 	str.w	r3, [r2], #28
 801a9ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a9ce:	4680      	mov	r8, r0
 801a9d0:	460c      	mov	r4, r1
 801a9d2:	bf98      	it	ls
 801a9d4:	f04f 0b00 	movls.w	fp, #0
 801a9d8:	9201      	str	r2, [sp, #4]
 801a9da:	4616      	mov	r6, r2
 801a9dc:	46aa      	mov	sl, r5
 801a9de:	462f      	mov	r7, r5
 801a9e0:	9502      	str	r5, [sp, #8]
 801a9e2:	68a2      	ldr	r2, [r4, #8]
 801a9e4:	b15a      	cbz	r2, 801a9fe <_scanf_float+0x66>
 801a9e6:	f8d9 3000 	ldr.w	r3, [r9]
 801a9ea:	781b      	ldrb	r3, [r3, #0]
 801a9ec:	2b4e      	cmp	r3, #78	@ 0x4e
 801a9ee:	d863      	bhi.n	801aab8 <_scanf_float+0x120>
 801a9f0:	2b40      	cmp	r3, #64	@ 0x40
 801a9f2:	d83b      	bhi.n	801aa6c <_scanf_float+0xd4>
 801a9f4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801a9f8:	b2c8      	uxtb	r0, r1
 801a9fa:	280e      	cmp	r0, #14
 801a9fc:	d939      	bls.n	801aa72 <_scanf_float+0xda>
 801a9fe:	b11f      	cbz	r7, 801aa08 <_scanf_float+0x70>
 801aa00:	6823      	ldr	r3, [r4, #0]
 801aa02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801aa06:	6023      	str	r3, [r4, #0]
 801aa08:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aa0c:	f1ba 0f01 	cmp.w	sl, #1
 801aa10:	f200 8114 	bhi.w	801ac3c <_scanf_float+0x2a4>
 801aa14:	9b01      	ldr	r3, [sp, #4]
 801aa16:	429e      	cmp	r6, r3
 801aa18:	f200 8105 	bhi.w	801ac26 <_scanf_float+0x28e>
 801aa1c:	2001      	movs	r0, #1
 801aa1e:	b007      	add	sp, #28
 801aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801aa28:	2a0d      	cmp	r2, #13
 801aa2a:	d8e8      	bhi.n	801a9fe <_scanf_float+0x66>
 801aa2c:	a101      	add	r1, pc, #4	@ (adr r1, 801aa34 <_scanf_float+0x9c>)
 801aa2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801aa32:	bf00      	nop
 801aa34:	0801ab7d 	.word	0x0801ab7d
 801aa38:	0801a9ff 	.word	0x0801a9ff
 801aa3c:	0801a9ff 	.word	0x0801a9ff
 801aa40:	0801a9ff 	.word	0x0801a9ff
 801aa44:	0801abd9 	.word	0x0801abd9
 801aa48:	0801abb3 	.word	0x0801abb3
 801aa4c:	0801a9ff 	.word	0x0801a9ff
 801aa50:	0801a9ff 	.word	0x0801a9ff
 801aa54:	0801ab8b 	.word	0x0801ab8b
 801aa58:	0801a9ff 	.word	0x0801a9ff
 801aa5c:	0801a9ff 	.word	0x0801a9ff
 801aa60:	0801a9ff 	.word	0x0801a9ff
 801aa64:	0801a9ff 	.word	0x0801a9ff
 801aa68:	0801ab47 	.word	0x0801ab47
 801aa6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801aa70:	e7da      	b.n	801aa28 <_scanf_float+0x90>
 801aa72:	290e      	cmp	r1, #14
 801aa74:	d8c3      	bhi.n	801a9fe <_scanf_float+0x66>
 801aa76:	a001      	add	r0, pc, #4	@ (adr r0, 801aa7c <_scanf_float+0xe4>)
 801aa78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801aa7c:	0801ab37 	.word	0x0801ab37
 801aa80:	0801a9ff 	.word	0x0801a9ff
 801aa84:	0801ab37 	.word	0x0801ab37
 801aa88:	0801abc7 	.word	0x0801abc7
 801aa8c:	0801a9ff 	.word	0x0801a9ff
 801aa90:	0801aad9 	.word	0x0801aad9
 801aa94:	0801ab1d 	.word	0x0801ab1d
 801aa98:	0801ab1d 	.word	0x0801ab1d
 801aa9c:	0801ab1d 	.word	0x0801ab1d
 801aaa0:	0801ab1d 	.word	0x0801ab1d
 801aaa4:	0801ab1d 	.word	0x0801ab1d
 801aaa8:	0801ab1d 	.word	0x0801ab1d
 801aaac:	0801ab1d 	.word	0x0801ab1d
 801aab0:	0801ab1d 	.word	0x0801ab1d
 801aab4:	0801ab1d 	.word	0x0801ab1d
 801aab8:	2b6e      	cmp	r3, #110	@ 0x6e
 801aaba:	d809      	bhi.n	801aad0 <_scanf_float+0x138>
 801aabc:	2b60      	cmp	r3, #96	@ 0x60
 801aabe:	d8b1      	bhi.n	801aa24 <_scanf_float+0x8c>
 801aac0:	2b54      	cmp	r3, #84	@ 0x54
 801aac2:	d07b      	beq.n	801abbc <_scanf_float+0x224>
 801aac4:	2b59      	cmp	r3, #89	@ 0x59
 801aac6:	d19a      	bne.n	801a9fe <_scanf_float+0x66>
 801aac8:	2d07      	cmp	r5, #7
 801aaca:	d198      	bne.n	801a9fe <_scanf_float+0x66>
 801aacc:	2508      	movs	r5, #8
 801aace:	e02f      	b.n	801ab30 <_scanf_float+0x198>
 801aad0:	2b74      	cmp	r3, #116	@ 0x74
 801aad2:	d073      	beq.n	801abbc <_scanf_float+0x224>
 801aad4:	2b79      	cmp	r3, #121	@ 0x79
 801aad6:	e7f6      	b.n	801aac6 <_scanf_float+0x12e>
 801aad8:	6821      	ldr	r1, [r4, #0]
 801aada:	05c8      	lsls	r0, r1, #23
 801aadc:	d51e      	bpl.n	801ab1c <_scanf_float+0x184>
 801aade:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801aae2:	6021      	str	r1, [r4, #0]
 801aae4:	3701      	adds	r7, #1
 801aae6:	f1bb 0f00 	cmp.w	fp, #0
 801aaea:	d003      	beq.n	801aaf4 <_scanf_float+0x15c>
 801aaec:	3201      	adds	r2, #1
 801aaee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aaf2:	60a2      	str	r2, [r4, #8]
 801aaf4:	68a3      	ldr	r3, [r4, #8]
 801aaf6:	3b01      	subs	r3, #1
 801aaf8:	60a3      	str	r3, [r4, #8]
 801aafa:	6923      	ldr	r3, [r4, #16]
 801aafc:	3301      	adds	r3, #1
 801aafe:	6123      	str	r3, [r4, #16]
 801ab00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ab04:	3b01      	subs	r3, #1
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	f8c9 3004 	str.w	r3, [r9, #4]
 801ab0c:	f340 8082 	ble.w	801ac14 <_scanf_float+0x27c>
 801ab10:	f8d9 3000 	ldr.w	r3, [r9]
 801ab14:	3301      	adds	r3, #1
 801ab16:	f8c9 3000 	str.w	r3, [r9]
 801ab1a:	e762      	b.n	801a9e2 <_scanf_float+0x4a>
 801ab1c:	eb1a 0105 	adds.w	r1, sl, r5
 801ab20:	f47f af6d 	bne.w	801a9fe <_scanf_float+0x66>
 801ab24:	6822      	ldr	r2, [r4, #0]
 801ab26:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801ab2a:	6022      	str	r2, [r4, #0]
 801ab2c:	460d      	mov	r5, r1
 801ab2e:	468a      	mov	sl, r1
 801ab30:	f806 3b01 	strb.w	r3, [r6], #1
 801ab34:	e7de      	b.n	801aaf4 <_scanf_float+0x15c>
 801ab36:	6822      	ldr	r2, [r4, #0]
 801ab38:	0610      	lsls	r0, r2, #24
 801ab3a:	f57f af60 	bpl.w	801a9fe <_scanf_float+0x66>
 801ab3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ab42:	6022      	str	r2, [r4, #0]
 801ab44:	e7f4      	b.n	801ab30 <_scanf_float+0x198>
 801ab46:	f1ba 0f00 	cmp.w	sl, #0
 801ab4a:	d10c      	bne.n	801ab66 <_scanf_float+0x1ce>
 801ab4c:	b977      	cbnz	r7, 801ab6c <_scanf_float+0x1d4>
 801ab4e:	6822      	ldr	r2, [r4, #0]
 801ab50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ab54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ab58:	d108      	bne.n	801ab6c <_scanf_float+0x1d4>
 801ab5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ab5e:	6022      	str	r2, [r4, #0]
 801ab60:	f04f 0a01 	mov.w	sl, #1
 801ab64:	e7e4      	b.n	801ab30 <_scanf_float+0x198>
 801ab66:	f1ba 0f02 	cmp.w	sl, #2
 801ab6a:	d050      	beq.n	801ac0e <_scanf_float+0x276>
 801ab6c:	2d01      	cmp	r5, #1
 801ab6e:	d002      	beq.n	801ab76 <_scanf_float+0x1de>
 801ab70:	2d04      	cmp	r5, #4
 801ab72:	f47f af44 	bne.w	801a9fe <_scanf_float+0x66>
 801ab76:	3501      	adds	r5, #1
 801ab78:	b2ed      	uxtb	r5, r5
 801ab7a:	e7d9      	b.n	801ab30 <_scanf_float+0x198>
 801ab7c:	f1ba 0f01 	cmp.w	sl, #1
 801ab80:	f47f af3d 	bne.w	801a9fe <_scanf_float+0x66>
 801ab84:	f04f 0a02 	mov.w	sl, #2
 801ab88:	e7d2      	b.n	801ab30 <_scanf_float+0x198>
 801ab8a:	b975      	cbnz	r5, 801abaa <_scanf_float+0x212>
 801ab8c:	2f00      	cmp	r7, #0
 801ab8e:	f47f af37 	bne.w	801aa00 <_scanf_float+0x68>
 801ab92:	6822      	ldr	r2, [r4, #0]
 801ab94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ab98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ab9c:	f040 8103 	bne.w	801ada6 <_scanf_float+0x40e>
 801aba0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801aba4:	6022      	str	r2, [r4, #0]
 801aba6:	2501      	movs	r5, #1
 801aba8:	e7c2      	b.n	801ab30 <_scanf_float+0x198>
 801abaa:	2d03      	cmp	r5, #3
 801abac:	d0e3      	beq.n	801ab76 <_scanf_float+0x1de>
 801abae:	2d05      	cmp	r5, #5
 801abb0:	e7df      	b.n	801ab72 <_scanf_float+0x1da>
 801abb2:	2d02      	cmp	r5, #2
 801abb4:	f47f af23 	bne.w	801a9fe <_scanf_float+0x66>
 801abb8:	2503      	movs	r5, #3
 801abba:	e7b9      	b.n	801ab30 <_scanf_float+0x198>
 801abbc:	2d06      	cmp	r5, #6
 801abbe:	f47f af1e 	bne.w	801a9fe <_scanf_float+0x66>
 801abc2:	2507      	movs	r5, #7
 801abc4:	e7b4      	b.n	801ab30 <_scanf_float+0x198>
 801abc6:	6822      	ldr	r2, [r4, #0]
 801abc8:	0591      	lsls	r1, r2, #22
 801abca:	f57f af18 	bpl.w	801a9fe <_scanf_float+0x66>
 801abce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801abd2:	6022      	str	r2, [r4, #0]
 801abd4:	9702      	str	r7, [sp, #8]
 801abd6:	e7ab      	b.n	801ab30 <_scanf_float+0x198>
 801abd8:	6822      	ldr	r2, [r4, #0]
 801abda:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801abde:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801abe2:	d005      	beq.n	801abf0 <_scanf_float+0x258>
 801abe4:	0550      	lsls	r0, r2, #21
 801abe6:	f57f af0a 	bpl.w	801a9fe <_scanf_float+0x66>
 801abea:	2f00      	cmp	r7, #0
 801abec:	f000 80db 	beq.w	801ada6 <_scanf_float+0x40e>
 801abf0:	0591      	lsls	r1, r2, #22
 801abf2:	bf58      	it	pl
 801abf4:	9902      	ldrpl	r1, [sp, #8]
 801abf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801abfa:	bf58      	it	pl
 801abfc:	1a79      	subpl	r1, r7, r1
 801abfe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801ac02:	bf58      	it	pl
 801ac04:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ac08:	6022      	str	r2, [r4, #0]
 801ac0a:	2700      	movs	r7, #0
 801ac0c:	e790      	b.n	801ab30 <_scanf_float+0x198>
 801ac0e:	f04f 0a03 	mov.w	sl, #3
 801ac12:	e78d      	b.n	801ab30 <_scanf_float+0x198>
 801ac14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ac18:	4649      	mov	r1, r9
 801ac1a:	4640      	mov	r0, r8
 801ac1c:	4798      	blx	r3
 801ac1e:	2800      	cmp	r0, #0
 801ac20:	f43f aedf 	beq.w	801a9e2 <_scanf_float+0x4a>
 801ac24:	e6eb      	b.n	801a9fe <_scanf_float+0x66>
 801ac26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ac2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ac2e:	464a      	mov	r2, r9
 801ac30:	4640      	mov	r0, r8
 801ac32:	4798      	blx	r3
 801ac34:	6923      	ldr	r3, [r4, #16]
 801ac36:	3b01      	subs	r3, #1
 801ac38:	6123      	str	r3, [r4, #16]
 801ac3a:	e6eb      	b.n	801aa14 <_scanf_float+0x7c>
 801ac3c:	1e6b      	subs	r3, r5, #1
 801ac3e:	2b06      	cmp	r3, #6
 801ac40:	d824      	bhi.n	801ac8c <_scanf_float+0x2f4>
 801ac42:	2d02      	cmp	r5, #2
 801ac44:	d836      	bhi.n	801acb4 <_scanf_float+0x31c>
 801ac46:	9b01      	ldr	r3, [sp, #4]
 801ac48:	429e      	cmp	r6, r3
 801ac4a:	f67f aee7 	bls.w	801aa1c <_scanf_float+0x84>
 801ac4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ac52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ac56:	464a      	mov	r2, r9
 801ac58:	4640      	mov	r0, r8
 801ac5a:	4798      	blx	r3
 801ac5c:	6923      	ldr	r3, [r4, #16]
 801ac5e:	3b01      	subs	r3, #1
 801ac60:	6123      	str	r3, [r4, #16]
 801ac62:	e7f0      	b.n	801ac46 <_scanf_float+0x2ae>
 801ac64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ac68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801ac6c:	464a      	mov	r2, r9
 801ac6e:	4640      	mov	r0, r8
 801ac70:	4798      	blx	r3
 801ac72:	6923      	ldr	r3, [r4, #16]
 801ac74:	3b01      	subs	r3, #1
 801ac76:	6123      	str	r3, [r4, #16]
 801ac78:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ac7c:	fa5f fa8a 	uxtb.w	sl, sl
 801ac80:	f1ba 0f02 	cmp.w	sl, #2
 801ac84:	d1ee      	bne.n	801ac64 <_scanf_float+0x2cc>
 801ac86:	3d03      	subs	r5, #3
 801ac88:	b2ed      	uxtb	r5, r5
 801ac8a:	1b76      	subs	r6, r6, r5
 801ac8c:	6823      	ldr	r3, [r4, #0]
 801ac8e:	05da      	lsls	r2, r3, #23
 801ac90:	d530      	bpl.n	801acf4 <_scanf_float+0x35c>
 801ac92:	055b      	lsls	r3, r3, #21
 801ac94:	d511      	bpl.n	801acba <_scanf_float+0x322>
 801ac96:	9b01      	ldr	r3, [sp, #4]
 801ac98:	429e      	cmp	r6, r3
 801ac9a:	f67f aebf 	bls.w	801aa1c <_scanf_float+0x84>
 801ac9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aca6:	464a      	mov	r2, r9
 801aca8:	4640      	mov	r0, r8
 801acaa:	4798      	blx	r3
 801acac:	6923      	ldr	r3, [r4, #16]
 801acae:	3b01      	subs	r3, #1
 801acb0:	6123      	str	r3, [r4, #16]
 801acb2:	e7f0      	b.n	801ac96 <_scanf_float+0x2fe>
 801acb4:	46aa      	mov	sl, r5
 801acb6:	46b3      	mov	fp, r6
 801acb8:	e7de      	b.n	801ac78 <_scanf_float+0x2e0>
 801acba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801acbe:	6923      	ldr	r3, [r4, #16]
 801acc0:	2965      	cmp	r1, #101	@ 0x65
 801acc2:	f103 33ff 	add.w	r3, r3, #4294967295
 801acc6:	f106 35ff 	add.w	r5, r6, #4294967295
 801acca:	6123      	str	r3, [r4, #16]
 801accc:	d00c      	beq.n	801ace8 <_scanf_float+0x350>
 801acce:	2945      	cmp	r1, #69	@ 0x45
 801acd0:	d00a      	beq.n	801ace8 <_scanf_float+0x350>
 801acd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801acd6:	464a      	mov	r2, r9
 801acd8:	4640      	mov	r0, r8
 801acda:	4798      	blx	r3
 801acdc:	6923      	ldr	r3, [r4, #16]
 801acde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ace2:	3b01      	subs	r3, #1
 801ace4:	1eb5      	subs	r5, r6, #2
 801ace6:	6123      	str	r3, [r4, #16]
 801ace8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801acec:	464a      	mov	r2, r9
 801acee:	4640      	mov	r0, r8
 801acf0:	4798      	blx	r3
 801acf2:	462e      	mov	r6, r5
 801acf4:	6822      	ldr	r2, [r4, #0]
 801acf6:	f012 0210 	ands.w	r2, r2, #16
 801acfa:	d001      	beq.n	801ad00 <_scanf_float+0x368>
 801acfc:	2000      	movs	r0, #0
 801acfe:	e68e      	b.n	801aa1e <_scanf_float+0x86>
 801ad00:	7032      	strb	r2, [r6, #0]
 801ad02:	6823      	ldr	r3, [r4, #0]
 801ad04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801ad08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ad0c:	d125      	bne.n	801ad5a <_scanf_float+0x3c2>
 801ad0e:	9b02      	ldr	r3, [sp, #8]
 801ad10:	429f      	cmp	r7, r3
 801ad12:	d00a      	beq.n	801ad2a <_scanf_float+0x392>
 801ad14:	1bda      	subs	r2, r3, r7
 801ad16:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801ad1a:	429e      	cmp	r6, r3
 801ad1c:	bf28      	it	cs
 801ad1e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801ad22:	4922      	ldr	r1, [pc, #136]	@ (801adac <_scanf_float+0x414>)
 801ad24:	4630      	mov	r0, r6
 801ad26:	f000 f97f 	bl	801b028 <siprintf>
 801ad2a:	9901      	ldr	r1, [sp, #4]
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	4640      	mov	r0, r8
 801ad30:	f7ff f80e 	bl	8019d50 <_strtod_r>
 801ad34:	9b03      	ldr	r3, [sp, #12]
 801ad36:	6821      	ldr	r1, [r4, #0]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	f011 0f02 	tst.w	r1, #2
 801ad3e:	ec57 6b10 	vmov	r6, r7, d0
 801ad42:	f103 0204 	add.w	r2, r3, #4
 801ad46:	d015      	beq.n	801ad74 <_scanf_float+0x3dc>
 801ad48:	9903      	ldr	r1, [sp, #12]
 801ad4a:	600a      	str	r2, [r1, #0]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	e9c3 6700 	strd	r6, r7, [r3]
 801ad52:	68e3      	ldr	r3, [r4, #12]
 801ad54:	3301      	adds	r3, #1
 801ad56:	60e3      	str	r3, [r4, #12]
 801ad58:	e7d0      	b.n	801acfc <_scanf_float+0x364>
 801ad5a:	9b04      	ldr	r3, [sp, #16]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d0e4      	beq.n	801ad2a <_scanf_float+0x392>
 801ad60:	9905      	ldr	r1, [sp, #20]
 801ad62:	230a      	movs	r3, #10
 801ad64:	3101      	adds	r1, #1
 801ad66:	4640      	mov	r0, r8
 801ad68:	f7ff f872 	bl	8019e50 <_strtol_r>
 801ad6c:	9b04      	ldr	r3, [sp, #16]
 801ad6e:	9e05      	ldr	r6, [sp, #20]
 801ad70:	1ac2      	subs	r2, r0, r3
 801ad72:	e7d0      	b.n	801ad16 <_scanf_float+0x37e>
 801ad74:	f011 0f04 	tst.w	r1, #4
 801ad78:	9903      	ldr	r1, [sp, #12]
 801ad7a:	600a      	str	r2, [r1, #0]
 801ad7c:	d1e6      	bne.n	801ad4c <_scanf_float+0x3b4>
 801ad7e:	681d      	ldr	r5, [r3, #0]
 801ad80:	4632      	mov	r2, r6
 801ad82:	463b      	mov	r3, r7
 801ad84:	4630      	mov	r0, r6
 801ad86:	4639      	mov	r1, r7
 801ad88:	f7e5 fed0 	bl	8000b2c <__aeabi_dcmpun>
 801ad8c:	b128      	cbz	r0, 801ad9a <_scanf_float+0x402>
 801ad8e:	4808      	ldr	r0, [pc, #32]	@ (801adb0 <_scanf_float+0x418>)
 801ad90:	f7fc ff82 	bl	8017c98 <nanf>
 801ad94:	ed85 0a00 	vstr	s0, [r5]
 801ad98:	e7db      	b.n	801ad52 <_scanf_float+0x3ba>
 801ad9a:	4630      	mov	r0, r6
 801ad9c:	4639      	mov	r1, r7
 801ad9e:	f7e5 ff23 	bl	8000be8 <__aeabi_d2f>
 801ada2:	6028      	str	r0, [r5, #0]
 801ada4:	e7d5      	b.n	801ad52 <_scanf_float+0x3ba>
 801ada6:	2700      	movs	r7, #0
 801ada8:	e62e      	b.n	801aa08 <_scanf_float+0x70>
 801adaa:	bf00      	nop
 801adac:	0802031d 	.word	0x0802031d
 801adb0:	08020365 	.word	0x08020365

0801adb4 <std>:
 801adb4:	2300      	movs	r3, #0
 801adb6:	b510      	push	{r4, lr}
 801adb8:	4604      	mov	r4, r0
 801adba:	e9c0 3300 	strd	r3, r3, [r0]
 801adbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801adc2:	6083      	str	r3, [r0, #8]
 801adc4:	8181      	strh	r1, [r0, #12]
 801adc6:	6643      	str	r3, [r0, #100]	@ 0x64
 801adc8:	81c2      	strh	r2, [r0, #14]
 801adca:	6183      	str	r3, [r0, #24]
 801adcc:	4619      	mov	r1, r3
 801adce:	2208      	movs	r2, #8
 801add0:	305c      	adds	r0, #92	@ 0x5c
 801add2:	f000 fa6b 	bl	801b2ac <memset>
 801add6:	4b0d      	ldr	r3, [pc, #52]	@ (801ae0c <std+0x58>)
 801add8:	6263      	str	r3, [r4, #36]	@ 0x24
 801adda:	4b0d      	ldr	r3, [pc, #52]	@ (801ae10 <std+0x5c>)
 801addc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801adde:	4b0d      	ldr	r3, [pc, #52]	@ (801ae14 <std+0x60>)
 801ade0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ade2:	4b0d      	ldr	r3, [pc, #52]	@ (801ae18 <std+0x64>)
 801ade4:	6323      	str	r3, [r4, #48]	@ 0x30
 801ade6:	4b0d      	ldr	r3, [pc, #52]	@ (801ae1c <std+0x68>)
 801ade8:	6224      	str	r4, [r4, #32]
 801adea:	429c      	cmp	r4, r3
 801adec:	d006      	beq.n	801adfc <std+0x48>
 801adee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801adf2:	4294      	cmp	r4, r2
 801adf4:	d002      	beq.n	801adfc <std+0x48>
 801adf6:	33d0      	adds	r3, #208	@ 0xd0
 801adf8:	429c      	cmp	r4, r3
 801adfa:	d105      	bne.n	801ae08 <std+0x54>
 801adfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ae00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae04:	f000 bb3e 	b.w	801b484 <__retarget_lock_init_recursive>
 801ae08:	bd10      	pop	{r4, pc}
 801ae0a:	bf00      	nop
 801ae0c:	0801b0c5 	.word	0x0801b0c5
 801ae10:	0801b0eb 	.word	0x0801b0eb
 801ae14:	0801b123 	.word	0x0801b123
 801ae18:	0801b147 	.word	0x0801b147
 801ae1c:	2000b090 	.word	0x2000b090

0801ae20 <stdio_exit_handler>:
 801ae20:	4a02      	ldr	r2, [pc, #8]	@ (801ae2c <stdio_exit_handler+0xc>)
 801ae22:	4903      	ldr	r1, [pc, #12]	@ (801ae30 <stdio_exit_handler+0x10>)
 801ae24:	4803      	ldr	r0, [pc, #12]	@ (801ae34 <stdio_exit_handler+0x14>)
 801ae26:	f000 b869 	b.w	801aefc <_fwalk_sglue>
 801ae2a:	bf00      	nop
 801ae2c:	20000154 	.word	0x20000154
 801ae30:	0801ddfd 	.word	0x0801ddfd
 801ae34:	200002d0 	.word	0x200002d0

0801ae38 <cleanup_stdio>:
 801ae38:	6841      	ldr	r1, [r0, #4]
 801ae3a:	4b0c      	ldr	r3, [pc, #48]	@ (801ae6c <cleanup_stdio+0x34>)
 801ae3c:	4299      	cmp	r1, r3
 801ae3e:	b510      	push	{r4, lr}
 801ae40:	4604      	mov	r4, r0
 801ae42:	d001      	beq.n	801ae48 <cleanup_stdio+0x10>
 801ae44:	f002 ffda 	bl	801ddfc <_fflush_r>
 801ae48:	68a1      	ldr	r1, [r4, #8]
 801ae4a:	4b09      	ldr	r3, [pc, #36]	@ (801ae70 <cleanup_stdio+0x38>)
 801ae4c:	4299      	cmp	r1, r3
 801ae4e:	d002      	beq.n	801ae56 <cleanup_stdio+0x1e>
 801ae50:	4620      	mov	r0, r4
 801ae52:	f002 ffd3 	bl	801ddfc <_fflush_r>
 801ae56:	68e1      	ldr	r1, [r4, #12]
 801ae58:	4b06      	ldr	r3, [pc, #24]	@ (801ae74 <cleanup_stdio+0x3c>)
 801ae5a:	4299      	cmp	r1, r3
 801ae5c:	d004      	beq.n	801ae68 <cleanup_stdio+0x30>
 801ae5e:	4620      	mov	r0, r4
 801ae60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae64:	f002 bfca 	b.w	801ddfc <_fflush_r>
 801ae68:	bd10      	pop	{r4, pc}
 801ae6a:	bf00      	nop
 801ae6c:	2000b090 	.word	0x2000b090
 801ae70:	2000b0f8 	.word	0x2000b0f8
 801ae74:	2000b160 	.word	0x2000b160

0801ae78 <global_stdio_init.part.0>:
 801ae78:	b510      	push	{r4, lr}
 801ae7a:	4b0b      	ldr	r3, [pc, #44]	@ (801aea8 <global_stdio_init.part.0+0x30>)
 801ae7c:	4c0b      	ldr	r4, [pc, #44]	@ (801aeac <global_stdio_init.part.0+0x34>)
 801ae7e:	4a0c      	ldr	r2, [pc, #48]	@ (801aeb0 <global_stdio_init.part.0+0x38>)
 801ae80:	601a      	str	r2, [r3, #0]
 801ae82:	4620      	mov	r0, r4
 801ae84:	2200      	movs	r2, #0
 801ae86:	2104      	movs	r1, #4
 801ae88:	f7ff ff94 	bl	801adb4 <std>
 801ae8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ae90:	2201      	movs	r2, #1
 801ae92:	2109      	movs	r1, #9
 801ae94:	f7ff ff8e 	bl	801adb4 <std>
 801ae98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ae9c:	2202      	movs	r2, #2
 801ae9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aea2:	2112      	movs	r1, #18
 801aea4:	f7ff bf86 	b.w	801adb4 <std>
 801aea8:	2000b1c8 	.word	0x2000b1c8
 801aeac:	2000b090 	.word	0x2000b090
 801aeb0:	0801ae21 	.word	0x0801ae21

0801aeb4 <__sfp_lock_acquire>:
 801aeb4:	4801      	ldr	r0, [pc, #4]	@ (801aebc <__sfp_lock_acquire+0x8>)
 801aeb6:	f000 bae6 	b.w	801b486 <__retarget_lock_acquire_recursive>
 801aeba:	bf00      	nop
 801aebc:	2000b1d1 	.word	0x2000b1d1

0801aec0 <__sfp_lock_release>:
 801aec0:	4801      	ldr	r0, [pc, #4]	@ (801aec8 <__sfp_lock_release+0x8>)
 801aec2:	f000 bae1 	b.w	801b488 <__retarget_lock_release_recursive>
 801aec6:	bf00      	nop
 801aec8:	2000b1d1 	.word	0x2000b1d1

0801aecc <__sinit>:
 801aecc:	b510      	push	{r4, lr}
 801aece:	4604      	mov	r4, r0
 801aed0:	f7ff fff0 	bl	801aeb4 <__sfp_lock_acquire>
 801aed4:	6a23      	ldr	r3, [r4, #32]
 801aed6:	b11b      	cbz	r3, 801aee0 <__sinit+0x14>
 801aed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aedc:	f7ff bff0 	b.w	801aec0 <__sfp_lock_release>
 801aee0:	4b04      	ldr	r3, [pc, #16]	@ (801aef4 <__sinit+0x28>)
 801aee2:	6223      	str	r3, [r4, #32]
 801aee4:	4b04      	ldr	r3, [pc, #16]	@ (801aef8 <__sinit+0x2c>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d1f5      	bne.n	801aed8 <__sinit+0xc>
 801aeec:	f7ff ffc4 	bl	801ae78 <global_stdio_init.part.0>
 801aef0:	e7f2      	b.n	801aed8 <__sinit+0xc>
 801aef2:	bf00      	nop
 801aef4:	0801ae39 	.word	0x0801ae39
 801aef8:	2000b1c8 	.word	0x2000b1c8

0801aefc <_fwalk_sglue>:
 801aefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af00:	4607      	mov	r7, r0
 801af02:	4688      	mov	r8, r1
 801af04:	4614      	mov	r4, r2
 801af06:	2600      	movs	r6, #0
 801af08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af0c:	f1b9 0901 	subs.w	r9, r9, #1
 801af10:	d505      	bpl.n	801af1e <_fwalk_sglue+0x22>
 801af12:	6824      	ldr	r4, [r4, #0]
 801af14:	2c00      	cmp	r4, #0
 801af16:	d1f7      	bne.n	801af08 <_fwalk_sglue+0xc>
 801af18:	4630      	mov	r0, r6
 801af1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af1e:	89ab      	ldrh	r3, [r5, #12]
 801af20:	2b01      	cmp	r3, #1
 801af22:	d907      	bls.n	801af34 <_fwalk_sglue+0x38>
 801af24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af28:	3301      	adds	r3, #1
 801af2a:	d003      	beq.n	801af34 <_fwalk_sglue+0x38>
 801af2c:	4629      	mov	r1, r5
 801af2e:	4638      	mov	r0, r7
 801af30:	47c0      	blx	r8
 801af32:	4306      	orrs	r6, r0
 801af34:	3568      	adds	r5, #104	@ 0x68
 801af36:	e7e9      	b.n	801af0c <_fwalk_sglue+0x10>

0801af38 <iprintf>:
 801af38:	b40f      	push	{r0, r1, r2, r3}
 801af3a:	b507      	push	{r0, r1, r2, lr}
 801af3c:	4906      	ldr	r1, [pc, #24]	@ (801af58 <iprintf+0x20>)
 801af3e:	ab04      	add	r3, sp, #16
 801af40:	6808      	ldr	r0, [r1, #0]
 801af42:	f853 2b04 	ldr.w	r2, [r3], #4
 801af46:	6881      	ldr	r1, [r0, #8]
 801af48:	9301      	str	r3, [sp, #4]
 801af4a:	f7ff fa77 	bl	801a43c <_vfiprintf_r>
 801af4e:	b003      	add	sp, #12
 801af50:	f85d eb04 	ldr.w	lr, [sp], #4
 801af54:	b004      	add	sp, #16
 801af56:	4770      	bx	lr
 801af58:	200002cc 	.word	0x200002cc

0801af5c <putchar>:
 801af5c:	4b02      	ldr	r3, [pc, #8]	@ (801af68 <putchar+0xc>)
 801af5e:	4601      	mov	r1, r0
 801af60:	6818      	ldr	r0, [r3, #0]
 801af62:	6882      	ldr	r2, [r0, #8]
 801af64:	f002 bfe6 	b.w	801df34 <_putc_r>
 801af68:	200002cc 	.word	0x200002cc

0801af6c <_puts_r>:
 801af6c:	6a03      	ldr	r3, [r0, #32]
 801af6e:	b570      	push	{r4, r5, r6, lr}
 801af70:	6884      	ldr	r4, [r0, #8]
 801af72:	4605      	mov	r5, r0
 801af74:	460e      	mov	r6, r1
 801af76:	b90b      	cbnz	r3, 801af7c <_puts_r+0x10>
 801af78:	f7ff ffa8 	bl	801aecc <__sinit>
 801af7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801af7e:	07db      	lsls	r3, r3, #31
 801af80:	d405      	bmi.n	801af8e <_puts_r+0x22>
 801af82:	89a3      	ldrh	r3, [r4, #12]
 801af84:	0598      	lsls	r0, r3, #22
 801af86:	d402      	bmi.n	801af8e <_puts_r+0x22>
 801af88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801af8a:	f000 fa7c 	bl	801b486 <__retarget_lock_acquire_recursive>
 801af8e:	89a3      	ldrh	r3, [r4, #12]
 801af90:	0719      	lsls	r1, r3, #28
 801af92:	d502      	bpl.n	801af9a <_puts_r+0x2e>
 801af94:	6923      	ldr	r3, [r4, #16]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d135      	bne.n	801b006 <_puts_r+0x9a>
 801af9a:	4621      	mov	r1, r4
 801af9c:	4628      	mov	r0, r5
 801af9e:	f000 f915 	bl	801b1cc <__swsetup_r>
 801afa2:	b380      	cbz	r0, 801b006 <_puts_r+0x9a>
 801afa4:	f04f 35ff 	mov.w	r5, #4294967295
 801afa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801afaa:	07da      	lsls	r2, r3, #31
 801afac:	d405      	bmi.n	801afba <_puts_r+0x4e>
 801afae:	89a3      	ldrh	r3, [r4, #12]
 801afb0:	059b      	lsls	r3, r3, #22
 801afb2:	d402      	bmi.n	801afba <_puts_r+0x4e>
 801afb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801afb6:	f000 fa67 	bl	801b488 <__retarget_lock_release_recursive>
 801afba:	4628      	mov	r0, r5
 801afbc:	bd70      	pop	{r4, r5, r6, pc}
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	da04      	bge.n	801afcc <_puts_r+0x60>
 801afc2:	69a2      	ldr	r2, [r4, #24]
 801afc4:	429a      	cmp	r2, r3
 801afc6:	dc17      	bgt.n	801aff8 <_puts_r+0x8c>
 801afc8:	290a      	cmp	r1, #10
 801afca:	d015      	beq.n	801aff8 <_puts_r+0x8c>
 801afcc:	6823      	ldr	r3, [r4, #0]
 801afce:	1c5a      	adds	r2, r3, #1
 801afd0:	6022      	str	r2, [r4, #0]
 801afd2:	7019      	strb	r1, [r3, #0]
 801afd4:	68a3      	ldr	r3, [r4, #8]
 801afd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801afda:	3b01      	subs	r3, #1
 801afdc:	60a3      	str	r3, [r4, #8]
 801afde:	2900      	cmp	r1, #0
 801afe0:	d1ed      	bne.n	801afbe <_puts_r+0x52>
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	da11      	bge.n	801b00a <_puts_r+0x9e>
 801afe6:	4622      	mov	r2, r4
 801afe8:	210a      	movs	r1, #10
 801afea:	4628      	mov	r0, r5
 801afec:	f000 f8af 	bl	801b14e <__swbuf_r>
 801aff0:	3001      	adds	r0, #1
 801aff2:	d0d7      	beq.n	801afa4 <_puts_r+0x38>
 801aff4:	250a      	movs	r5, #10
 801aff6:	e7d7      	b.n	801afa8 <_puts_r+0x3c>
 801aff8:	4622      	mov	r2, r4
 801affa:	4628      	mov	r0, r5
 801affc:	f000 f8a7 	bl	801b14e <__swbuf_r>
 801b000:	3001      	adds	r0, #1
 801b002:	d1e7      	bne.n	801afd4 <_puts_r+0x68>
 801b004:	e7ce      	b.n	801afa4 <_puts_r+0x38>
 801b006:	3e01      	subs	r6, #1
 801b008:	e7e4      	b.n	801afd4 <_puts_r+0x68>
 801b00a:	6823      	ldr	r3, [r4, #0]
 801b00c:	1c5a      	adds	r2, r3, #1
 801b00e:	6022      	str	r2, [r4, #0]
 801b010:	220a      	movs	r2, #10
 801b012:	701a      	strb	r2, [r3, #0]
 801b014:	e7ee      	b.n	801aff4 <_puts_r+0x88>
	...

0801b018 <puts>:
 801b018:	4b02      	ldr	r3, [pc, #8]	@ (801b024 <puts+0xc>)
 801b01a:	4601      	mov	r1, r0
 801b01c:	6818      	ldr	r0, [r3, #0]
 801b01e:	f7ff bfa5 	b.w	801af6c <_puts_r>
 801b022:	bf00      	nop
 801b024:	200002cc 	.word	0x200002cc

0801b028 <siprintf>:
 801b028:	b40e      	push	{r1, r2, r3}
 801b02a:	b510      	push	{r4, lr}
 801b02c:	b09d      	sub	sp, #116	@ 0x74
 801b02e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b030:	9002      	str	r0, [sp, #8]
 801b032:	9006      	str	r0, [sp, #24]
 801b034:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b038:	480a      	ldr	r0, [pc, #40]	@ (801b064 <siprintf+0x3c>)
 801b03a:	9107      	str	r1, [sp, #28]
 801b03c:	9104      	str	r1, [sp, #16]
 801b03e:	490a      	ldr	r1, [pc, #40]	@ (801b068 <siprintf+0x40>)
 801b040:	f853 2b04 	ldr.w	r2, [r3], #4
 801b044:	9105      	str	r1, [sp, #20]
 801b046:	2400      	movs	r4, #0
 801b048:	a902      	add	r1, sp, #8
 801b04a:	6800      	ldr	r0, [r0, #0]
 801b04c:	9301      	str	r3, [sp, #4]
 801b04e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b050:	f002 fa36 	bl	801d4c0 <_svfiprintf_r>
 801b054:	9b02      	ldr	r3, [sp, #8]
 801b056:	701c      	strb	r4, [r3, #0]
 801b058:	b01d      	add	sp, #116	@ 0x74
 801b05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b05e:	b003      	add	sp, #12
 801b060:	4770      	bx	lr
 801b062:	bf00      	nop
 801b064:	200002cc 	.word	0x200002cc
 801b068:	ffff0208 	.word	0xffff0208

0801b06c <siscanf>:
 801b06c:	b40e      	push	{r1, r2, r3}
 801b06e:	b570      	push	{r4, r5, r6, lr}
 801b070:	b09d      	sub	sp, #116	@ 0x74
 801b072:	ac21      	add	r4, sp, #132	@ 0x84
 801b074:	2500      	movs	r5, #0
 801b076:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801b07a:	f854 6b04 	ldr.w	r6, [r4], #4
 801b07e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b082:	951b      	str	r5, [sp, #108]	@ 0x6c
 801b084:	9002      	str	r0, [sp, #8]
 801b086:	9006      	str	r0, [sp, #24]
 801b088:	f7e5 f8f2 	bl	8000270 <strlen>
 801b08c:	4b0b      	ldr	r3, [pc, #44]	@ (801b0bc <siscanf+0x50>)
 801b08e:	9003      	str	r0, [sp, #12]
 801b090:	9007      	str	r0, [sp, #28]
 801b092:	480b      	ldr	r0, [pc, #44]	@ (801b0c0 <siscanf+0x54>)
 801b094:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b09a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b09e:	4632      	mov	r2, r6
 801b0a0:	4623      	mov	r3, r4
 801b0a2:	a902      	add	r1, sp, #8
 801b0a4:	6800      	ldr	r0, [r0, #0]
 801b0a6:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b0a8:	9514      	str	r5, [sp, #80]	@ 0x50
 801b0aa:	9401      	str	r4, [sp, #4]
 801b0ac:	f002 fb5e 	bl	801d76c <__ssvfiscanf_r>
 801b0b0:	b01d      	add	sp, #116	@ 0x74
 801b0b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0b6:	b003      	add	sp, #12
 801b0b8:	4770      	bx	lr
 801b0ba:	bf00      	nop
 801b0bc:	0801b0e7 	.word	0x0801b0e7
 801b0c0:	200002cc 	.word	0x200002cc

0801b0c4 <__sread>:
 801b0c4:	b510      	push	{r4, lr}
 801b0c6:	460c      	mov	r4, r1
 801b0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0cc:	f000 f98c 	bl	801b3e8 <_read_r>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	bfab      	itete	ge
 801b0d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b0d6:	89a3      	ldrhlt	r3, [r4, #12]
 801b0d8:	181b      	addge	r3, r3, r0
 801b0da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b0de:	bfac      	ite	ge
 801b0e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b0e2:	81a3      	strhlt	r3, [r4, #12]
 801b0e4:	bd10      	pop	{r4, pc}

0801b0e6 <__seofread>:
 801b0e6:	2000      	movs	r0, #0
 801b0e8:	4770      	bx	lr

0801b0ea <__swrite>:
 801b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0ee:	461f      	mov	r7, r3
 801b0f0:	898b      	ldrh	r3, [r1, #12]
 801b0f2:	05db      	lsls	r3, r3, #23
 801b0f4:	4605      	mov	r5, r0
 801b0f6:	460c      	mov	r4, r1
 801b0f8:	4616      	mov	r6, r2
 801b0fa:	d505      	bpl.n	801b108 <__swrite+0x1e>
 801b0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b100:	2302      	movs	r3, #2
 801b102:	2200      	movs	r2, #0
 801b104:	f000 f95e 	bl	801b3c4 <_lseek_r>
 801b108:	89a3      	ldrh	r3, [r4, #12]
 801b10a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b10e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b112:	81a3      	strh	r3, [r4, #12]
 801b114:	4632      	mov	r2, r6
 801b116:	463b      	mov	r3, r7
 801b118:	4628      	mov	r0, r5
 801b11a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b11e:	f000 b975 	b.w	801b40c <_write_r>

0801b122 <__sseek>:
 801b122:	b510      	push	{r4, lr}
 801b124:	460c      	mov	r4, r1
 801b126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b12a:	f000 f94b 	bl	801b3c4 <_lseek_r>
 801b12e:	1c43      	adds	r3, r0, #1
 801b130:	89a3      	ldrh	r3, [r4, #12]
 801b132:	bf15      	itete	ne
 801b134:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b13a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b13e:	81a3      	strheq	r3, [r4, #12]
 801b140:	bf18      	it	ne
 801b142:	81a3      	strhne	r3, [r4, #12]
 801b144:	bd10      	pop	{r4, pc}

0801b146 <__sclose>:
 801b146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b14a:	f000 b8cd 	b.w	801b2e8 <_close_r>

0801b14e <__swbuf_r>:
 801b14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b150:	460e      	mov	r6, r1
 801b152:	4614      	mov	r4, r2
 801b154:	4605      	mov	r5, r0
 801b156:	b118      	cbz	r0, 801b160 <__swbuf_r+0x12>
 801b158:	6a03      	ldr	r3, [r0, #32]
 801b15a:	b90b      	cbnz	r3, 801b160 <__swbuf_r+0x12>
 801b15c:	f7ff feb6 	bl	801aecc <__sinit>
 801b160:	69a3      	ldr	r3, [r4, #24]
 801b162:	60a3      	str	r3, [r4, #8]
 801b164:	89a3      	ldrh	r3, [r4, #12]
 801b166:	071a      	lsls	r2, r3, #28
 801b168:	d501      	bpl.n	801b16e <__swbuf_r+0x20>
 801b16a:	6923      	ldr	r3, [r4, #16]
 801b16c:	b943      	cbnz	r3, 801b180 <__swbuf_r+0x32>
 801b16e:	4621      	mov	r1, r4
 801b170:	4628      	mov	r0, r5
 801b172:	f000 f82b 	bl	801b1cc <__swsetup_r>
 801b176:	b118      	cbz	r0, 801b180 <__swbuf_r+0x32>
 801b178:	f04f 37ff 	mov.w	r7, #4294967295
 801b17c:	4638      	mov	r0, r7
 801b17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b180:	6823      	ldr	r3, [r4, #0]
 801b182:	6922      	ldr	r2, [r4, #16]
 801b184:	1a98      	subs	r0, r3, r2
 801b186:	6963      	ldr	r3, [r4, #20]
 801b188:	b2f6      	uxtb	r6, r6
 801b18a:	4283      	cmp	r3, r0
 801b18c:	4637      	mov	r7, r6
 801b18e:	dc05      	bgt.n	801b19c <__swbuf_r+0x4e>
 801b190:	4621      	mov	r1, r4
 801b192:	4628      	mov	r0, r5
 801b194:	f002 fe32 	bl	801ddfc <_fflush_r>
 801b198:	2800      	cmp	r0, #0
 801b19a:	d1ed      	bne.n	801b178 <__swbuf_r+0x2a>
 801b19c:	68a3      	ldr	r3, [r4, #8]
 801b19e:	3b01      	subs	r3, #1
 801b1a0:	60a3      	str	r3, [r4, #8]
 801b1a2:	6823      	ldr	r3, [r4, #0]
 801b1a4:	1c5a      	adds	r2, r3, #1
 801b1a6:	6022      	str	r2, [r4, #0]
 801b1a8:	701e      	strb	r6, [r3, #0]
 801b1aa:	6962      	ldr	r2, [r4, #20]
 801b1ac:	1c43      	adds	r3, r0, #1
 801b1ae:	429a      	cmp	r2, r3
 801b1b0:	d004      	beq.n	801b1bc <__swbuf_r+0x6e>
 801b1b2:	89a3      	ldrh	r3, [r4, #12]
 801b1b4:	07db      	lsls	r3, r3, #31
 801b1b6:	d5e1      	bpl.n	801b17c <__swbuf_r+0x2e>
 801b1b8:	2e0a      	cmp	r6, #10
 801b1ba:	d1df      	bne.n	801b17c <__swbuf_r+0x2e>
 801b1bc:	4621      	mov	r1, r4
 801b1be:	4628      	mov	r0, r5
 801b1c0:	f002 fe1c 	bl	801ddfc <_fflush_r>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	d0d9      	beq.n	801b17c <__swbuf_r+0x2e>
 801b1c8:	e7d6      	b.n	801b178 <__swbuf_r+0x2a>
	...

0801b1cc <__swsetup_r>:
 801b1cc:	b538      	push	{r3, r4, r5, lr}
 801b1ce:	4b29      	ldr	r3, [pc, #164]	@ (801b274 <__swsetup_r+0xa8>)
 801b1d0:	4605      	mov	r5, r0
 801b1d2:	6818      	ldr	r0, [r3, #0]
 801b1d4:	460c      	mov	r4, r1
 801b1d6:	b118      	cbz	r0, 801b1e0 <__swsetup_r+0x14>
 801b1d8:	6a03      	ldr	r3, [r0, #32]
 801b1da:	b90b      	cbnz	r3, 801b1e0 <__swsetup_r+0x14>
 801b1dc:	f7ff fe76 	bl	801aecc <__sinit>
 801b1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1e4:	0719      	lsls	r1, r3, #28
 801b1e6:	d422      	bmi.n	801b22e <__swsetup_r+0x62>
 801b1e8:	06da      	lsls	r2, r3, #27
 801b1ea:	d407      	bmi.n	801b1fc <__swsetup_r+0x30>
 801b1ec:	2209      	movs	r2, #9
 801b1ee:	602a      	str	r2, [r5, #0]
 801b1f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1f4:	81a3      	strh	r3, [r4, #12]
 801b1f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b1fa:	e033      	b.n	801b264 <__swsetup_r+0x98>
 801b1fc:	0758      	lsls	r0, r3, #29
 801b1fe:	d512      	bpl.n	801b226 <__swsetup_r+0x5a>
 801b200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b202:	b141      	cbz	r1, 801b216 <__swsetup_r+0x4a>
 801b204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b208:	4299      	cmp	r1, r3
 801b20a:	d002      	beq.n	801b212 <__swsetup_r+0x46>
 801b20c:	4628      	mov	r0, r5
 801b20e:	f000 ffcb 	bl	801c1a8 <_free_r>
 801b212:	2300      	movs	r3, #0
 801b214:	6363      	str	r3, [r4, #52]	@ 0x34
 801b216:	89a3      	ldrh	r3, [r4, #12]
 801b218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b21c:	81a3      	strh	r3, [r4, #12]
 801b21e:	2300      	movs	r3, #0
 801b220:	6063      	str	r3, [r4, #4]
 801b222:	6923      	ldr	r3, [r4, #16]
 801b224:	6023      	str	r3, [r4, #0]
 801b226:	89a3      	ldrh	r3, [r4, #12]
 801b228:	f043 0308 	orr.w	r3, r3, #8
 801b22c:	81a3      	strh	r3, [r4, #12]
 801b22e:	6923      	ldr	r3, [r4, #16]
 801b230:	b94b      	cbnz	r3, 801b246 <__swsetup_r+0x7a>
 801b232:	89a3      	ldrh	r3, [r4, #12]
 801b234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b23c:	d003      	beq.n	801b246 <__swsetup_r+0x7a>
 801b23e:	4621      	mov	r1, r4
 801b240:	4628      	mov	r0, r5
 801b242:	f002 fe3b 	bl	801debc <__smakebuf_r>
 801b246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b24a:	f013 0201 	ands.w	r2, r3, #1
 801b24e:	d00a      	beq.n	801b266 <__swsetup_r+0x9a>
 801b250:	2200      	movs	r2, #0
 801b252:	60a2      	str	r2, [r4, #8]
 801b254:	6962      	ldr	r2, [r4, #20]
 801b256:	4252      	negs	r2, r2
 801b258:	61a2      	str	r2, [r4, #24]
 801b25a:	6922      	ldr	r2, [r4, #16]
 801b25c:	b942      	cbnz	r2, 801b270 <__swsetup_r+0xa4>
 801b25e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b262:	d1c5      	bne.n	801b1f0 <__swsetup_r+0x24>
 801b264:	bd38      	pop	{r3, r4, r5, pc}
 801b266:	0799      	lsls	r1, r3, #30
 801b268:	bf58      	it	pl
 801b26a:	6962      	ldrpl	r2, [r4, #20]
 801b26c:	60a2      	str	r2, [r4, #8]
 801b26e:	e7f4      	b.n	801b25a <__swsetup_r+0x8e>
 801b270:	2000      	movs	r0, #0
 801b272:	e7f7      	b.n	801b264 <__swsetup_r+0x98>
 801b274:	200002cc 	.word	0x200002cc

0801b278 <memmove>:
 801b278:	4288      	cmp	r0, r1
 801b27a:	b510      	push	{r4, lr}
 801b27c:	eb01 0402 	add.w	r4, r1, r2
 801b280:	d902      	bls.n	801b288 <memmove+0x10>
 801b282:	4284      	cmp	r4, r0
 801b284:	4623      	mov	r3, r4
 801b286:	d807      	bhi.n	801b298 <memmove+0x20>
 801b288:	1e43      	subs	r3, r0, #1
 801b28a:	42a1      	cmp	r1, r4
 801b28c:	d008      	beq.n	801b2a0 <memmove+0x28>
 801b28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b292:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b296:	e7f8      	b.n	801b28a <memmove+0x12>
 801b298:	4402      	add	r2, r0
 801b29a:	4601      	mov	r1, r0
 801b29c:	428a      	cmp	r2, r1
 801b29e:	d100      	bne.n	801b2a2 <memmove+0x2a>
 801b2a0:	bd10      	pop	{r4, pc}
 801b2a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b2a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b2aa:	e7f7      	b.n	801b29c <memmove+0x24>

0801b2ac <memset>:
 801b2ac:	4402      	add	r2, r0
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	4293      	cmp	r3, r2
 801b2b2:	d100      	bne.n	801b2b6 <memset+0xa>
 801b2b4:	4770      	bx	lr
 801b2b6:	f803 1b01 	strb.w	r1, [r3], #1
 801b2ba:	e7f9      	b.n	801b2b0 <memset+0x4>

0801b2bc <strncmp>:
 801b2bc:	b510      	push	{r4, lr}
 801b2be:	b16a      	cbz	r2, 801b2dc <strncmp+0x20>
 801b2c0:	3901      	subs	r1, #1
 801b2c2:	1884      	adds	r4, r0, r2
 801b2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	d103      	bne.n	801b2d8 <strncmp+0x1c>
 801b2d0:	42a0      	cmp	r0, r4
 801b2d2:	d001      	beq.n	801b2d8 <strncmp+0x1c>
 801b2d4:	2a00      	cmp	r2, #0
 801b2d6:	d1f5      	bne.n	801b2c4 <strncmp+0x8>
 801b2d8:	1ad0      	subs	r0, r2, r3
 801b2da:	bd10      	pop	{r4, pc}
 801b2dc:	4610      	mov	r0, r2
 801b2de:	e7fc      	b.n	801b2da <strncmp+0x1e>

0801b2e0 <_localeconv_r>:
 801b2e0:	4800      	ldr	r0, [pc, #0]	@ (801b2e4 <_localeconv_r+0x4>)
 801b2e2:	4770      	bx	lr
 801b2e4:	20000250 	.word	0x20000250

0801b2e8 <_close_r>:
 801b2e8:	b538      	push	{r3, r4, r5, lr}
 801b2ea:	4d06      	ldr	r5, [pc, #24]	@ (801b304 <_close_r+0x1c>)
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	4604      	mov	r4, r0
 801b2f0:	4608      	mov	r0, r1
 801b2f2:	602b      	str	r3, [r5, #0]
 801b2f4:	f7ee fa02 	bl	80096fc <_close>
 801b2f8:	1c43      	adds	r3, r0, #1
 801b2fa:	d102      	bne.n	801b302 <_close_r+0x1a>
 801b2fc:	682b      	ldr	r3, [r5, #0]
 801b2fe:	b103      	cbz	r3, 801b302 <_close_r+0x1a>
 801b300:	6023      	str	r3, [r4, #0]
 801b302:	bd38      	pop	{r3, r4, r5, pc}
 801b304:	2000b1cc 	.word	0x2000b1cc

0801b308 <_reclaim_reent>:
 801b308:	4b2d      	ldr	r3, [pc, #180]	@ (801b3c0 <_reclaim_reent+0xb8>)
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	4283      	cmp	r3, r0
 801b30e:	b570      	push	{r4, r5, r6, lr}
 801b310:	4604      	mov	r4, r0
 801b312:	d053      	beq.n	801b3bc <_reclaim_reent+0xb4>
 801b314:	69c3      	ldr	r3, [r0, #28]
 801b316:	b31b      	cbz	r3, 801b360 <_reclaim_reent+0x58>
 801b318:	68db      	ldr	r3, [r3, #12]
 801b31a:	b163      	cbz	r3, 801b336 <_reclaim_reent+0x2e>
 801b31c:	2500      	movs	r5, #0
 801b31e:	69e3      	ldr	r3, [r4, #28]
 801b320:	68db      	ldr	r3, [r3, #12]
 801b322:	5959      	ldr	r1, [r3, r5]
 801b324:	b9b1      	cbnz	r1, 801b354 <_reclaim_reent+0x4c>
 801b326:	3504      	adds	r5, #4
 801b328:	2d80      	cmp	r5, #128	@ 0x80
 801b32a:	d1f8      	bne.n	801b31e <_reclaim_reent+0x16>
 801b32c:	69e3      	ldr	r3, [r4, #28]
 801b32e:	4620      	mov	r0, r4
 801b330:	68d9      	ldr	r1, [r3, #12]
 801b332:	f000 ff39 	bl	801c1a8 <_free_r>
 801b336:	69e3      	ldr	r3, [r4, #28]
 801b338:	6819      	ldr	r1, [r3, #0]
 801b33a:	b111      	cbz	r1, 801b342 <_reclaim_reent+0x3a>
 801b33c:	4620      	mov	r0, r4
 801b33e:	f000 ff33 	bl	801c1a8 <_free_r>
 801b342:	69e3      	ldr	r3, [r4, #28]
 801b344:	689d      	ldr	r5, [r3, #8]
 801b346:	b15d      	cbz	r5, 801b360 <_reclaim_reent+0x58>
 801b348:	4629      	mov	r1, r5
 801b34a:	4620      	mov	r0, r4
 801b34c:	682d      	ldr	r5, [r5, #0]
 801b34e:	f000 ff2b 	bl	801c1a8 <_free_r>
 801b352:	e7f8      	b.n	801b346 <_reclaim_reent+0x3e>
 801b354:	680e      	ldr	r6, [r1, #0]
 801b356:	4620      	mov	r0, r4
 801b358:	f000 ff26 	bl	801c1a8 <_free_r>
 801b35c:	4631      	mov	r1, r6
 801b35e:	e7e1      	b.n	801b324 <_reclaim_reent+0x1c>
 801b360:	6961      	ldr	r1, [r4, #20]
 801b362:	b111      	cbz	r1, 801b36a <_reclaim_reent+0x62>
 801b364:	4620      	mov	r0, r4
 801b366:	f000 ff1f 	bl	801c1a8 <_free_r>
 801b36a:	69e1      	ldr	r1, [r4, #28]
 801b36c:	b111      	cbz	r1, 801b374 <_reclaim_reent+0x6c>
 801b36e:	4620      	mov	r0, r4
 801b370:	f000 ff1a 	bl	801c1a8 <_free_r>
 801b374:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b376:	b111      	cbz	r1, 801b37e <_reclaim_reent+0x76>
 801b378:	4620      	mov	r0, r4
 801b37a:	f000 ff15 	bl	801c1a8 <_free_r>
 801b37e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b380:	b111      	cbz	r1, 801b388 <_reclaim_reent+0x80>
 801b382:	4620      	mov	r0, r4
 801b384:	f000 ff10 	bl	801c1a8 <_free_r>
 801b388:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b38a:	b111      	cbz	r1, 801b392 <_reclaim_reent+0x8a>
 801b38c:	4620      	mov	r0, r4
 801b38e:	f000 ff0b 	bl	801c1a8 <_free_r>
 801b392:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b394:	b111      	cbz	r1, 801b39c <_reclaim_reent+0x94>
 801b396:	4620      	mov	r0, r4
 801b398:	f000 ff06 	bl	801c1a8 <_free_r>
 801b39c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b39e:	b111      	cbz	r1, 801b3a6 <_reclaim_reent+0x9e>
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	f000 ff01 	bl	801c1a8 <_free_r>
 801b3a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b3a8:	b111      	cbz	r1, 801b3b0 <_reclaim_reent+0xa8>
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	f000 fefc 	bl	801c1a8 <_free_r>
 801b3b0:	6a23      	ldr	r3, [r4, #32]
 801b3b2:	b11b      	cbz	r3, 801b3bc <_reclaim_reent+0xb4>
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3ba:	4718      	bx	r3
 801b3bc:	bd70      	pop	{r4, r5, r6, pc}
 801b3be:	bf00      	nop
 801b3c0:	200002cc 	.word	0x200002cc

0801b3c4 <_lseek_r>:
 801b3c4:	b538      	push	{r3, r4, r5, lr}
 801b3c6:	4d07      	ldr	r5, [pc, #28]	@ (801b3e4 <_lseek_r+0x20>)
 801b3c8:	4604      	mov	r4, r0
 801b3ca:	4608      	mov	r0, r1
 801b3cc:	4611      	mov	r1, r2
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	602a      	str	r2, [r5, #0]
 801b3d2:	461a      	mov	r2, r3
 801b3d4:	f7ee f9b9 	bl	800974a <_lseek>
 801b3d8:	1c43      	adds	r3, r0, #1
 801b3da:	d102      	bne.n	801b3e2 <_lseek_r+0x1e>
 801b3dc:	682b      	ldr	r3, [r5, #0]
 801b3de:	b103      	cbz	r3, 801b3e2 <_lseek_r+0x1e>
 801b3e0:	6023      	str	r3, [r4, #0]
 801b3e2:	bd38      	pop	{r3, r4, r5, pc}
 801b3e4:	2000b1cc 	.word	0x2000b1cc

0801b3e8 <_read_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4d07      	ldr	r5, [pc, #28]	@ (801b408 <_read_r+0x20>)
 801b3ec:	4604      	mov	r4, r0
 801b3ee:	4608      	mov	r0, r1
 801b3f0:	4611      	mov	r1, r2
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	602a      	str	r2, [r5, #0]
 801b3f6:	461a      	mov	r2, r3
 801b3f8:	f7ee f963 	bl	80096c2 <_read>
 801b3fc:	1c43      	adds	r3, r0, #1
 801b3fe:	d102      	bne.n	801b406 <_read_r+0x1e>
 801b400:	682b      	ldr	r3, [r5, #0]
 801b402:	b103      	cbz	r3, 801b406 <_read_r+0x1e>
 801b404:	6023      	str	r3, [r4, #0]
 801b406:	bd38      	pop	{r3, r4, r5, pc}
 801b408:	2000b1cc 	.word	0x2000b1cc

0801b40c <_write_r>:
 801b40c:	b538      	push	{r3, r4, r5, lr}
 801b40e:	4d07      	ldr	r5, [pc, #28]	@ (801b42c <_write_r+0x20>)
 801b410:	4604      	mov	r4, r0
 801b412:	4608      	mov	r0, r1
 801b414:	4611      	mov	r1, r2
 801b416:	2200      	movs	r2, #0
 801b418:	602a      	str	r2, [r5, #0]
 801b41a:	461a      	mov	r2, r3
 801b41c:	f7ed f806 	bl	800842c <_write>
 801b420:	1c43      	adds	r3, r0, #1
 801b422:	d102      	bne.n	801b42a <_write_r+0x1e>
 801b424:	682b      	ldr	r3, [r5, #0]
 801b426:	b103      	cbz	r3, 801b42a <_write_r+0x1e>
 801b428:	6023      	str	r3, [r4, #0]
 801b42a:	bd38      	pop	{r3, r4, r5, pc}
 801b42c:	2000b1cc 	.word	0x2000b1cc

0801b430 <__errno>:
 801b430:	4b01      	ldr	r3, [pc, #4]	@ (801b438 <__errno+0x8>)
 801b432:	6818      	ldr	r0, [r3, #0]
 801b434:	4770      	bx	lr
 801b436:	bf00      	nop
 801b438:	200002cc 	.word	0x200002cc

0801b43c <__libc_init_array>:
 801b43c:	b570      	push	{r4, r5, r6, lr}
 801b43e:	4d0d      	ldr	r5, [pc, #52]	@ (801b474 <__libc_init_array+0x38>)
 801b440:	4c0d      	ldr	r4, [pc, #52]	@ (801b478 <__libc_init_array+0x3c>)
 801b442:	1b64      	subs	r4, r4, r5
 801b444:	10a4      	asrs	r4, r4, #2
 801b446:	2600      	movs	r6, #0
 801b448:	42a6      	cmp	r6, r4
 801b44a:	d109      	bne.n	801b460 <__libc_init_array+0x24>
 801b44c:	4d0b      	ldr	r5, [pc, #44]	@ (801b47c <__libc_init_array+0x40>)
 801b44e:	4c0c      	ldr	r4, [pc, #48]	@ (801b480 <__libc_init_array+0x44>)
 801b450:	f002 ff22 	bl	801e298 <_init>
 801b454:	1b64      	subs	r4, r4, r5
 801b456:	10a4      	asrs	r4, r4, #2
 801b458:	2600      	movs	r6, #0
 801b45a:	42a6      	cmp	r6, r4
 801b45c:	d105      	bne.n	801b46a <__libc_init_array+0x2e>
 801b45e:	bd70      	pop	{r4, r5, r6, pc}
 801b460:	f855 3b04 	ldr.w	r3, [r5], #4
 801b464:	4798      	blx	r3
 801b466:	3601      	adds	r6, #1
 801b468:	e7ee      	b.n	801b448 <__libc_init_array+0xc>
 801b46a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b46e:	4798      	blx	r3
 801b470:	3601      	adds	r6, #1
 801b472:	e7f2      	b.n	801b45a <__libc_init_array+0x1e>
 801b474:	08020b40 	.word	0x08020b40
 801b478:	08020b40 	.word	0x08020b40
 801b47c:	08020b40 	.word	0x08020b40
 801b480:	08020b44 	.word	0x08020b44

0801b484 <__retarget_lock_init_recursive>:
 801b484:	4770      	bx	lr

0801b486 <__retarget_lock_acquire_recursive>:
 801b486:	4770      	bx	lr

0801b488 <__retarget_lock_release_recursive>:
 801b488:	4770      	bx	lr

0801b48a <memcpy>:
 801b48a:	440a      	add	r2, r1
 801b48c:	4291      	cmp	r1, r2
 801b48e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b492:	d100      	bne.n	801b496 <memcpy+0xc>
 801b494:	4770      	bx	lr
 801b496:	b510      	push	{r4, lr}
 801b498:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b49c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4a0:	4291      	cmp	r1, r2
 801b4a2:	d1f9      	bne.n	801b498 <memcpy+0xe>
 801b4a4:	bd10      	pop	{r4, pc}
	...

0801b4a8 <nan>:
 801b4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b4b0 <nan+0x8>
 801b4ac:	4770      	bx	lr
 801b4ae:	bf00      	nop
 801b4b0:	00000000 	.word	0x00000000
 801b4b4:	7ff80000 	.word	0x7ff80000

0801b4b8 <__assert_func>:
 801b4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4ba:	4614      	mov	r4, r2
 801b4bc:	461a      	mov	r2, r3
 801b4be:	4b09      	ldr	r3, [pc, #36]	@ (801b4e4 <__assert_func+0x2c>)
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	4605      	mov	r5, r0
 801b4c4:	68d8      	ldr	r0, [r3, #12]
 801b4c6:	b14c      	cbz	r4, 801b4dc <__assert_func+0x24>
 801b4c8:	4b07      	ldr	r3, [pc, #28]	@ (801b4e8 <__assert_func+0x30>)
 801b4ca:	9100      	str	r1, [sp, #0]
 801b4cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4d0:	4906      	ldr	r1, [pc, #24]	@ (801b4ec <__assert_func+0x34>)
 801b4d2:	462b      	mov	r3, r5
 801b4d4:	f002 fcba 	bl	801de4c <fiprintf>
 801b4d8:	f002 fe06 	bl	801e0e8 <abort>
 801b4dc:	4b04      	ldr	r3, [pc, #16]	@ (801b4f0 <__assert_func+0x38>)
 801b4de:	461c      	mov	r4, r3
 801b4e0:	e7f3      	b.n	801b4ca <__assert_func+0x12>
 801b4e2:	bf00      	nop
 801b4e4:	200002cc 	.word	0x200002cc
 801b4e8:	0802032a 	.word	0x0802032a
 801b4ec:	08020337 	.word	0x08020337
 801b4f0:	08020365 	.word	0x08020365

0801b4f4 <quorem>:
 801b4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f8:	6903      	ldr	r3, [r0, #16]
 801b4fa:	690c      	ldr	r4, [r1, #16]
 801b4fc:	42a3      	cmp	r3, r4
 801b4fe:	4607      	mov	r7, r0
 801b500:	db7e      	blt.n	801b600 <quorem+0x10c>
 801b502:	3c01      	subs	r4, #1
 801b504:	f101 0814 	add.w	r8, r1, #20
 801b508:	00a3      	lsls	r3, r4, #2
 801b50a:	f100 0514 	add.w	r5, r0, #20
 801b50e:	9300      	str	r3, [sp, #0]
 801b510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b514:	9301      	str	r3, [sp, #4]
 801b516:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b51a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b51e:	3301      	adds	r3, #1
 801b520:	429a      	cmp	r2, r3
 801b522:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b526:	fbb2 f6f3 	udiv	r6, r2, r3
 801b52a:	d32e      	bcc.n	801b58a <quorem+0x96>
 801b52c:	f04f 0a00 	mov.w	sl, #0
 801b530:	46c4      	mov	ip, r8
 801b532:	46ae      	mov	lr, r5
 801b534:	46d3      	mov	fp, sl
 801b536:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b53a:	b298      	uxth	r0, r3
 801b53c:	fb06 a000 	mla	r0, r6, r0, sl
 801b540:	0c02      	lsrs	r2, r0, #16
 801b542:	0c1b      	lsrs	r3, r3, #16
 801b544:	fb06 2303 	mla	r3, r6, r3, r2
 801b548:	f8de 2000 	ldr.w	r2, [lr]
 801b54c:	b280      	uxth	r0, r0
 801b54e:	b292      	uxth	r2, r2
 801b550:	1a12      	subs	r2, r2, r0
 801b552:	445a      	add	r2, fp
 801b554:	f8de 0000 	ldr.w	r0, [lr]
 801b558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b55c:	b29b      	uxth	r3, r3
 801b55e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b562:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b566:	b292      	uxth	r2, r2
 801b568:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b56c:	45e1      	cmp	r9, ip
 801b56e:	f84e 2b04 	str.w	r2, [lr], #4
 801b572:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b576:	d2de      	bcs.n	801b536 <quorem+0x42>
 801b578:	9b00      	ldr	r3, [sp, #0]
 801b57a:	58eb      	ldr	r3, [r5, r3]
 801b57c:	b92b      	cbnz	r3, 801b58a <quorem+0x96>
 801b57e:	9b01      	ldr	r3, [sp, #4]
 801b580:	3b04      	subs	r3, #4
 801b582:	429d      	cmp	r5, r3
 801b584:	461a      	mov	r2, r3
 801b586:	d32f      	bcc.n	801b5e8 <quorem+0xf4>
 801b588:	613c      	str	r4, [r7, #16]
 801b58a:	4638      	mov	r0, r7
 801b58c:	f001 fd14 	bl	801cfb8 <__mcmp>
 801b590:	2800      	cmp	r0, #0
 801b592:	db25      	blt.n	801b5e0 <quorem+0xec>
 801b594:	4629      	mov	r1, r5
 801b596:	2000      	movs	r0, #0
 801b598:	f858 2b04 	ldr.w	r2, [r8], #4
 801b59c:	f8d1 c000 	ldr.w	ip, [r1]
 801b5a0:	fa1f fe82 	uxth.w	lr, r2
 801b5a4:	fa1f f38c 	uxth.w	r3, ip
 801b5a8:	eba3 030e 	sub.w	r3, r3, lr
 801b5ac:	4403      	add	r3, r0
 801b5ae:	0c12      	lsrs	r2, r2, #16
 801b5b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b5b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b5b8:	b29b      	uxth	r3, r3
 801b5ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5be:	45c1      	cmp	r9, r8
 801b5c0:	f841 3b04 	str.w	r3, [r1], #4
 801b5c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b5c8:	d2e6      	bcs.n	801b598 <quorem+0xa4>
 801b5ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5d2:	b922      	cbnz	r2, 801b5de <quorem+0xea>
 801b5d4:	3b04      	subs	r3, #4
 801b5d6:	429d      	cmp	r5, r3
 801b5d8:	461a      	mov	r2, r3
 801b5da:	d30b      	bcc.n	801b5f4 <quorem+0x100>
 801b5dc:	613c      	str	r4, [r7, #16]
 801b5de:	3601      	adds	r6, #1
 801b5e0:	4630      	mov	r0, r6
 801b5e2:	b003      	add	sp, #12
 801b5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5e8:	6812      	ldr	r2, [r2, #0]
 801b5ea:	3b04      	subs	r3, #4
 801b5ec:	2a00      	cmp	r2, #0
 801b5ee:	d1cb      	bne.n	801b588 <quorem+0x94>
 801b5f0:	3c01      	subs	r4, #1
 801b5f2:	e7c6      	b.n	801b582 <quorem+0x8e>
 801b5f4:	6812      	ldr	r2, [r2, #0]
 801b5f6:	3b04      	subs	r3, #4
 801b5f8:	2a00      	cmp	r2, #0
 801b5fa:	d1ef      	bne.n	801b5dc <quorem+0xe8>
 801b5fc:	3c01      	subs	r4, #1
 801b5fe:	e7ea      	b.n	801b5d6 <quorem+0xe2>
 801b600:	2000      	movs	r0, #0
 801b602:	e7ee      	b.n	801b5e2 <quorem+0xee>
 801b604:	0000      	movs	r0, r0
	...

0801b608 <_dtoa_r>:
 801b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b60c:	69c7      	ldr	r7, [r0, #28]
 801b60e:	b097      	sub	sp, #92	@ 0x5c
 801b610:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b614:	ec55 4b10 	vmov	r4, r5, d0
 801b618:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b61a:	9107      	str	r1, [sp, #28]
 801b61c:	4681      	mov	r9, r0
 801b61e:	920c      	str	r2, [sp, #48]	@ 0x30
 801b620:	9311      	str	r3, [sp, #68]	@ 0x44
 801b622:	b97f      	cbnz	r7, 801b644 <_dtoa_r+0x3c>
 801b624:	2010      	movs	r0, #16
 801b626:	f001 f943 	bl	801c8b0 <malloc>
 801b62a:	4602      	mov	r2, r0
 801b62c:	f8c9 001c 	str.w	r0, [r9, #28]
 801b630:	b920      	cbnz	r0, 801b63c <_dtoa_r+0x34>
 801b632:	4ba9      	ldr	r3, [pc, #676]	@ (801b8d8 <_dtoa_r+0x2d0>)
 801b634:	21ef      	movs	r1, #239	@ 0xef
 801b636:	48a9      	ldr	r0, [pc, #676]	@ (801b8dc <_dtoa_r+0x2d4>)
 801b638:	f7ff ff3e 	bl	801b4b8 <__assert_func>
 801b63c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b640:	6007      	str	r7, [r0, #0]
 801b642:	60c7      	str	r7, [r0, #12]
 801b644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b648:	6819      	ldr	r1, [r3, #0]
 801b64a:	b159      	cbz	r1, 801b664 <_dtoa_r+0x5c>
 801b64c:	685a      	ldr	r2, [r3, #4]
 801b64e:	604a      	str	r2, [r1, #4]
 801b650:	2301      	movs	r3, #1
 801b652:	4093      	lsls	r3, r2
 801b654:	608b      	str	r3, [r1, #8]
 801b656:	4648      	mov	r0, r9
 801b658:	f001 fa32 	bl	801cac0 <_Bfree>
 801b65c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b660:	2200      	movs	r2, #0
 801b662:	601a      	str	r2, [r3, #0]
 801b664:	1e2b      	subs	r3, r5, #0
 801b666:	bfb9      	ittee	lt
 801b668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b66c:	9305      	strlt	r3, [sp, #20]
 801b66e:	2300      	movge	r3, #0
 801b670:	6033      	strge	r3, [r6, #0]
 801b672:	9f05      	ldr	r7, [sp, #20]
 801b674:	4b9a      	ldr	r3, [pc, #616]	@ (801b8e0 <_dtoa_r+0x2d8>)
 801b676:	bfbc      	itt	lt
 801b678:	2201      	movlt	r2, #1
 801b67a:	6032      	strlt	r2, [r6, #0]
 801b67c:	43bb      	bics	r3, r7
 801b67e:	d112      	bne.n	801b6a6 <_dtoa_r+0x9e>
 801b680:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b682:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b686:	6013      	str	r3, [r2, #0]
 801b688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b68c:	4323      	orrs	r3, r4
 801b68e:	f000 855a 	beq.w	801c146 <_dtoa_r+0xb3e>
 801b692:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b694:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801b8f4 <_dtoa_r+0x2ec>
 801b698:	2b00      	cmp	r3, #0
 801b69a:	f000 855c 	beq.w	801c156 <_dtoa_r+0xb4e>
 801b69e:	f10a 0303 	add.w	r3, sl, #3
 801b6a2:	f000 bd56 	b.w	801c152 <_dtoa_r+0xb4a>
 801b6a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	ec51 0b17 	vmov	r0, r1, d7
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801b6b6:	f7e5 fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 801b6ba:	4680      	mov	r8, r0
 801b6bc:	b158      	cbz	r0, 801b6d6 <_dtoa_r+0xce>
 801b6be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b6c0:	2301      	movs	r3, #1
 801b6c2:	6013      	str	r3, [r2, #0]
 801b6c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b6c6:	b113      	cbz	r3, 801b6ce <_dtoa_r+0xc6>
 801b6c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b6ca:	4b86      	ldr	r3, [pc, #536]	@ (801b8e4 <_dtoa_r+0x2dc>)
 801b6cc:	6013      	str	r3, [r2, #0]
 801b6ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801b8f8 <_dtoa_r+0x2f0>
 801b6d2:	f000 bd40 	b.w	801c156 <_dtoa_r+0xb4e>
 801b6d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801b6da:	aa14      	add	r2, sp, #80	@ 0x50
 801b6dc:	a915      	add	r1, sp, #84	@ 0x54
 801b6de:	4648      	mov	r0, r9
 801b6e0:	f001 fd8a 	bl	801d1f8 <__d2b>
 801b6e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b6e8:	9002      	str	r0, [sp, #8]
 801b6ea:	2e00      	cmp	r6, #0
 801b6ec:	d078      	beq.n	801b7e0 <_dtoa_r+0x1d8>
 801b6ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b6f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801b6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b6f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b6fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b708:	4619      	mov	r1, r3
 801b70a:	2200      	movs	r2, #0
 801b70c:	4b76      	ldr	r3, [pc, #472]	@ (801b8e8 <_dtoa_r+0x2e0>)
 801b70e:	f7e4 fdbb 	bl	8000288 <__aeabi_dsub>
 801b712:	a36b      	add	r3, pc, #428	@ (adr r3, 801b8c0 <_dtoa_r+0x2b8>)
 801b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b718:	f7e4 ff6e 	bl	80005f8 <__aeabi_dmul>
 801b71c:	a36a      	add	r3, pc, #424	@ (adr r3, 801b8c8 <_dtoa_r+0x2c0>)
 801b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b722:	f7e4 fdb3 	bl	800028c <__adddf3>
 801b726:	4604      	mov	r4, r0
 801b728:	4630      	mov	r0, r6
 801b72a:	460d      	mov	r5, r1
 801b72c:	f7e4 fefa 	bl	8000524 <__aeabi_i2d>
 801b730:	a367      	add	r3, pc, #412	@ (adr r3, 801b8d0 <_dtoa_r+0x2c8>)
 801b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b736:	f7e4 ff5f 	bl	80005f8 <__aeabi_dmul>
 801b73a:	4602      	mov	r2, r0
 801b73c:	460b      	mov	r3, r1
 801b73e:	4620      	mov	r0, r4
 801b740:	4629      	mov	r1, r5
 801b742:	f7e4 fda3 	bl	800028c <__adddf3>
 801b746:	4604      	mov	r4, r0
 801b748:	460d      	mov	r5, r1
 801b74a:	f7e5 fa05 	bl	8000b58 <__aeabi_d2iz>
 801b74e:	2200      	movs	r2, #0
 801b750:	4607      	mov	r7, r0
 801b752:	2300      	movs	r3, #0
 801b754:	4620      	mov	r0, r4
 801b756:	4629      	mov	r1, r5
 801b758:	f7e5 f9c0 	bl	8000adc <__aeabi_dcmplt>
 801b75c:	b140      	cbz	r0, 801b770 <_dtoa_r+0x168>
 801b75e:	4638      	mov	r0, r7
 801b760:	f7e4 fee0 	bl	8000524 <__aeabi_i2d>
 801b764:	4622      	mov	r2, r4
 801b766:	462b      	mov	r3, r5
 801b768:	f7e5 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 801b76c:	b900      	cbnz	r0, 801b770 <_dtoa_r+0x168>
 801b76e:	3f01      	subs	r7, #1
 801b770:	2f16      	cmp	r7, #22
 801b772:	d852      	bhi.n	801b81a <_dtoa_r+0x212>
 801b774:	4b5d      	ldr	r3, [pc, #372]	@ (801b8ec <_dtoa_r+0x2e4>)
 801b776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b77e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b782:	f7e5 f9ab 	bl	8000adc <__aeabi_dcmplt>
 801b786:	2800      	cmp	r0, #0
 801b788:	d049      	beq.n	801b81e <_dtoa_r+0x216>
 801b78a:	3f01      	subs	r7, #1
 801b78c:	2300      	movs	r3, #0
 801b78e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b790:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b792:	1b9b      	subs	r3, r3, r6
 801b794:	1e5a      	subs	r2, r3, #1
 801b796:	bf45      	ittet	mi
 801b798:	f1c3 0301 	rsbmi	r3, r3, #1
 801b79c:	9300      	strmi	r3, [sp, #0]
 801b79e:	2300      	movpl	r3, #0
 801b7a0:	2300      	movmi	r3, #0
 801b7a2:	9206      	str	r2, [sp, #24]
 801b7a4:	bf54      	ite	pl
 801b7a6:	9300      	strpl	r3, [sp, #0]
 801b7a8:	9306      	strmi	r3, [sp, #24]
 801b7aa:	2f00      	cmp	r7, #0
 801b7ac:	db39      	blt.n	801b822 <_dtoa_r+0x21a>
 801b7ae:	9b06      	ldr	r3, [sp, #24]
 801b7b0:	970d      	str	r7, [sp, #52]	@ 0x34
 801b7b2:	443b      	add	r3, r7
 801b7b4:	9306      	str	r3, [sp, #24]
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	9308      	str	r3, [sp, #32]
 801b7ba:	9b07      	ldr	r3, [sp, #28]
 801b7bc:	2b09      	cmp	r3, #9
 801b7be:	d863      	bhi.n	801b888 <_dtoa_r+0x280>
 801b7c0:	2b05      	cmp	r3, #5
 801b7c2:	bfc4      	itt	gt
 801b7c4:	3b04      	subgt	r3, #4
 801b7c6:	9307      	strgt	r3, [sp, #28]
 801b7c8:	9b07      	ldr	r3, [sp, #28]
 801b7ca:	f1a3 0302 	sub.w	r3, r3, #2
 801b7ce:	bfcc      	ite	gt
 801b7d0:	2400      	movgt	r4, #0
 801b7d2:	2401      	movle	r4, #1
 801b7d4:	2b03      	cmp	r3, #3
 801b7d6:	d863      	bhi.n	801b8a0 <_dtoa_r+0x298>
 801b7d8:	e8df f003 	tbb	[pc, r3]
 801b7dc:	2b375452 	.word	0x2b375452
 801b7e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801b7e4:	441e      	add	r6, r3
 801b7e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b7ea:	2b20      	cmp	r3, #32
 801b7ec:	bfc1      	itttt	gt
 801b7ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b7f2:	409f      	lslgt	r7, r3
 801b7f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b7f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b7fc:	bfd6      	itet	le
 801b7fe:	f1c3 0320 	rsble	r3, r3, #32
 801b802:	ea47 0003 	orrgt.w	r0, r7, r3
 801b806:	fa04 f003 	lslle.w	r0, r4, r3
 801b80a:	f7e4 fe7b 	bl	8000504 <__aeabi_ui2d>
 801b80e:	2201      	movs	r2, #1
 801b810:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b814:	3e01      	subs	r6, #1
 801b816:	9212      	str	r2, [sp, #72]	@ 0x48
 801b818:	e776      	b.n	801b708 <_dtoa_r+0x100>
 801b81a:	2301      	movs	r3, #1
 801b81c:	e7b7      	b.n	801b78e <_dtoa_r+0x186>
 801b81e:	9010      	str	r0, [sp, #64]	@ 0x40
 801b820:	e7b6      	b.n	801b790 <_dtoa_r+0x188>
 801b822:	9b00      	ldr	r3, [sp, #0]
 801b824:	1bdb      	subs	r3, r3, r7
 801b826:	9300      	str	r3, [sp, #0]
 801b828:	427b      	negs	r3, r7
 801b82a:	9308      	str	r3, [sp, #32]
 801b82c:	2300      	movs	r3, #0
 801b82e:	930d      	str	r3, [sp, #52]	@ 0x34
 801b830:	e7c3      	b.n	801b7ba <_dtoa_r+0x1b2>
 801b832:	2301      	movs	r3, #1
 801b834:	9309      	str	r3, [sp, #36]	@ 0x24
 801b836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b838:	eb07 0b03 	add.w	fp, r7, r3
 801b83c:	f10b 0301 	add.w	r3, fp, #1
 801b840:	2b01      	cmp	r3, #1
 801b842:	9303      	str	r3, [sp, #12]
 801b844:	bfb8      	it	lt
 801b846:	2301      	movlt	r3, #1
 801b848:	e006      	b.n	801b858 <_dtoa_r+0x250>
 801b84a:	2301      	movs	r3, #1
 801b84c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b84e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b850:	2b00      	cmp	r3, #0
 801b852:	dd28      	ble.n	801b8a6 <_dtoa_r+0x29e>
 801b854:	469b      	mov	fp, r3
 801b856:	9303      	str	r3, [sp, #12]
 801b858:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801b85c:	2100      	movs	r1, #0
 801b85e:	2204      	movs	r2, #4
 801b860:	f102 0514 	add.w	r5, r2, #20
 801b864:	429d      	cmp	r5, r3
 801b866:	d926      	bls.n	801b8b6 <_dtoa_r+0x2ae>
 801b868:	6041      	str	r1, [r0, #4]
 801b86a:	4648      	mov	r0, r9
 801b86c:	f001 f8e8 	bl	801ca40 <_Balloc>
 801b870:	4682      	mov	sl, r0
 801b872:	2800      	cmp	r0, #0
 801b874:	d142      	bne.n	801b8fc <_dtoa_r+0x2f4>
 801b876:	4b1e      	ldr	r3, [pc, #120]	@ (801b8f0 <_dtoa_r+0x2e8>)
 801b878:	4602      	mov	r2, r0
 801b87a:	f240 11af 	movw	r1, #431	@ 0x1af
 801b87e:	e6da      	b.n	801b636 <_dtoa_r+0x2e>
 801b880:	2300      	movs	r3, #0
 801b882:	e7e3      	b.n	801b84c <_dtoa_r+0x244>
 801b884:	2300      	movs	r3, #0
 801b886:	e7d5      	b.n	801b834 <_dtoa_r+0x22c>
 801b888:	2401      	movs	r4, #1
 801b88a:	2300      	movs	r3, #0
 801b88c:	9307      	str	r3, [sp, #28]
 801b88e:	9409      	str	r4, [sp, #36]	@ 0x24
 801b890:	f04f 3bff 	mov.w	fp, #4294967295
 801b894:	2200      	movs	r2, #0
 801b896:	f8cd b00c 	str.w	fp, [sp, #12]
 801b89a:	2312      	movs	r3, #18
 801b89c:	920c      	str	r2, [sp, #48]	@ 0x30
 801b89e:	e7db      	b.n	801b858 <_dtoa_r+0x250>
 801b8a0:	2301      	movs	r3, #1
 801b8a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b8a4:	e7f4      	b.n	801b890 <_dtoa_r+0x288>
 801b8a6:	f04f 0b01 	mov.w	fp, #1
 801b8aa:	f8cd b00c 	str.w	fp, [sp, #12]
 801b8ae:	465b      	mov	r3, fp
 801b8b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801b8b4:	e7d0      	b.n	801b858 <_dtoa_r+0x250>
 801b8b6:	3101      	adds	r1, #1
 801b8b8:	0052      	lsls	r2, r2, #1
 801b8ba:	e7d1      	b.n	801b860 <_dtoa_r+0x258>
 801b8bc:	f3af 8000 	nop.w
 801b8c0:	636f4361 	.word	0x636f4361
 801b8c4:	3fd287a7 	.word	0x3fd287a7
 801b8c8:	8b60c8b3 	.word	0x8b60c8b3
 801b8cc:	3fc68a28 	.word	0x3fc68a28
 801b8d0:	509f79fb 	.word	0x509f79fb
 801b8d4:	3fd34413 	.word	0x3fd34413
 801b8d8:	08020373 	.word	0x08020373
 801b8dc:	0802038a 	.word	0x0802038a
 801b8e0:	7ff00000 	.word	0x7ff00000
 801b8e4:	080204c3 	.word	0x080204c3
 801b8e8:	3ff80000 	.word	0x3ff80000
 801b8ec:	08020a70 	.word	0x08020a70
 801b8f0:	080203e2 	.word	0x080203e2
 801b8f4:	0802036f 	.word	0x0802036f
 801b8f8:	080204c2 	.word	0x080204c2
 801b8fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b900:	6018      	str	r0, [r3, #0]
 801b902:	9b03      	ldr	r3, [sp, #12]
 801b904:	2b0e      	cmp	r3, #14
 801b906:	f200 80a1 	bhi.w	801ba4c <_dtoa_r+0x444>
 801b90a:	2c00      	cmp	r4, #0
 801b90c:	f000 809e 	beq.w	801ba4c <_dtoa_r+0x444>
 801b910:	2f00      	cmp	r7, #0
 801b912:	dd33      	ble.n	801b97c <_dtoa_r+0x374>
 801b914:	4b9c      	ldr	r3, [pc, #624]	@ (801bb88 <_dtoa_r+0x580>)
 801b916:	f007 020f 	and.w	r2, r7, #15
 801b91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b91e:	ed93 7b00 	vldr	d7, [r3]
 801b922:	05f8      	lsls	r0, r7, #23
 801b924:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801b928:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b92c:	d516      	bpl.n	801b95c <_dtoa_r+0x354>
 801b92e:	4b97      	ldr	r3, [pc, #604]	@ (801bb8c <_dtoa_r+0x584>)
 801b930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b938:	f7e4 ff88 	bl	800084c <__aeabi_ddiv>
 801b93c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b940:	f004 040f 	and.w	r4, r4, #15
 801b944:	2603      	movs	r6, #3
 801b946:	4d91      	ldr	r5, [pc, #580]	@ (801bb8c <_dtoa_r+0x584>)
 801b948:	b954      	cbnz	r4, 801b960 <_dtoa_r+0x358>
 801b94a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b94e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b952:	f7e4 ff7b 	bl	800084c <__aeabi_ddiv>
 801b956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b95a:	e028      	b.n	801b9ae <_dtoa_r+0x3a6>
 801b95c:	2602      	movs	r6, #2
 801b95e:	e7f2      	b.n	801b946 <_dtoa_r+0x33e>
 801b960:	07e1      	lsls	r1, r4, #31
 801b962:	d508      	bpl.n	801b976 <_dtoa_r+0x36e>
 801b964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b968:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b96c:	f7e4 fe44 	bl	80005f8 <__aeabi_dmul>
 801b970:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b974:	3601      	adds	r6, #1
 801b976:	1064      	asrs	r4, r4, #1
 801b978:	3508      	adds	r5, #8
 801b97a:	e7e5      	b.n	801b948 <_dtoa_r+0x340>
 801b97c:	f000 80af 	beq.w	801bade <_dtoa_r+0x4d6>
 801b980:	427c      	negs	r4, r7
 801b982:	4b81      	ldr	r3, [pc, #516]	@ (801bb88 <_dtoa_r+0x580>)
 801b984:	4d81      	ldr	r5, [pc, #516]	@ (801bb8c <_dtoa_r+0x584>)
 801b986:	f004 020f 	and.w	r2, r4, #15
 801b98a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b996:	f7e4 fe2f 	bl	80005f8 <__aeabi_dmul>
 801b99a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b99e:	1124      	asrs	r4, r4, #4
 801b9a0:	2300      	movs	r3, #0
 801b9a2:	2602      	movs	r6, #2
 801b9a4:	2c00      	cmp	r4, #0
 801b9a6:	f040 808f 	bne.w	801bac8 <_dtoa_r+0x4c0>
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d1d3      	bne.n	801b956 <_dtoa_r+0x34e>
 801b9ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b9b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	f000 8094 	beq.w	801bae2 <_dtoa_r+0x4da>
 801b9ba:	4b75      	ldr	r3, [pc, #468]	@ (801bb90 <_dtoa_r+0x588>)
 801b9bc:	2200      	movs	r2, #0
 801b9be:	4620      	mov	r0, r4
 801b9c0:	4629      	mov	r1, r5
 801b9c2:	f7e5 f88b 	bl	8000adc <__aeabi_dcmplt>
 801b9c6:	2800      	cmp	r0, #0
 801b9c8:	f000 808b 	beq.w	801bae2 <_dtoa_r+0x4da>
 801b9cc:	9b03      	ldr	r3, [sp, #12]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	f000 8087 	beq.w	801bae2 <_dtoa_r+0x4da>
 801b9d4:	f1bb 0f00 	cmp.w	fp, #0
 801b9d8:	dd34      	ble.n	801ba44 <_dtoa_r+0x43c>
 801b9da:	4620      	mov	r0, r4
 801b9dc:	4b6d      	ldr	r3, [pc, #436]	@ (801bb94 <_dtoa_r+0x58c>)
 801b9de:	2200      	movs	r2, #0
 801b9e0:	4629      	mov	r1, r5
 801b9e2:	f7e4 fe09 	bl	80005f8 <__aeabi_dmul>
 801b9e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b9ea:	f107 38ff 	add.w	r8, r7, #4294967295
 801b9ee:	3601      	adds	r6, #1
 801b9f0:	465c      	mov	r4, fp
 801b9f2:	4630      	mov	r0, r6
 801b9f4:	f7e4 fd96 	bl	8000524 <__aeabi_i2d>
 801b9f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b9fc:	f7e4 fdfc 	bl	80005f8 <__aeabi_dmul>
 801ba00:	4b65      	ldr	r3, [pc, #404]	@ (801bb98 <_dtoa_r+0x590>)
 801ba02:	2200      	movs	r2, #0
 801ba04:	f7e4 fc42 	bl	800028c <__adddf3>
 801ba08:	4605      	mov	r5, r0
 801ba0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ba0e:	2c00      	cmp	r4, #0
 801ba10:	d16a      	bne.n	801bae8 <_dtoa_r+0x4e0>
 801ba12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba16:	4b61      	ldr	r3, [pc, #388]	@ (801bb9c <_dtoa_r+0x594>)
 801ba18:	2200      	movs	r2, #0
 801ba1a:	f7e4 fc35 	bl	8000288 <__aeabi_dsub>
 801ba1e:	4602      	mov	r2, r0
 801ba20:	460b      	mov	r3, r1
 801ba22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ba26:	462a      	mov	r2, r5
 801ba28:	4633      	mov	r3, r6
 801ba2a:	f7e5 f875 	bl	8000b18 <__aeabi_dcmpgt>
 801ba2e:	2800      	cmp	r0, #0
 801ba30:	f040 8298 	bne.w	801bf64 <_dtoa_r+0x95c>
 801ba34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba38:	462a      	mov	r2, r5
 801ba3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ba3e:	f7e5 f84d 	bl	8000adc <__aeabi_dcmplt>
 801ba42:	bb38      	cbnz	r0, 801ba94 <_dtoa_r+0x48c>
 801ba44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801ba48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801ba4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	f2c0 8157 	blt.w	801bd02 <_dtoa_r+0x6fa>
 801ba54:	2f0e      	cmp	r7, #14
 801ba56:	f300 8154 	bgt.w	801bd02 <_dtoa_r+0x6fa>
 801ba5a:	4b4b      	ldr	r3, [pc, #300]	@ (801bb88 <_dtoa_r+0x580>)
 801ba5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ba60:	ed93 7b00 	vldr	d7, [r3]
 801ba64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	ed8d 7b00 	vstr	d7, [sp]
 801ba6c:	f280 80e5 	bge.w	801bc3a <_dtoa_r+0x632>
 801ba70:	9b03      	ldr	r3, [sp, #12]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	f300 80e1 	bgt.w	801bc3a <_dtoa_r+0x632>
 801ba78:	d10c      	bne.n	801ba94 <_dtoa_r+0x48c>
 801ba7a:	4b48      	ldr	r3, [pc, #288]	@ (801bb9c <_dtoa_r+0x594>)
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	ec51 0b17 	vmov	r0, r1, d7
 801ba82:	f7e4 fdb9 	bl	80005f8 <__aeabi_dmul>
 801ba86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba8a:	f7e5 f83b 	bl	8000b04 <__aeabi_dcmpge>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	f000 8266 	beq.w	801bf60 <_dtoa_r+0x958>
 801ba94:	2400      	movs	r4, #0
 801ba96:	4625      	mov	r5, r4
 801ba98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba9a:	4656      	mov	r6, sl
 801ba9c:	ea6f 0803 	mvn.w	r8, r3
 801baa0:	2700      	movs	r7, #0
 801baa2:	4621      	mov	r1, r4
 801baa4:	4648      	mov	r0, r9
 801baa6:	f001 f80b 	bl	801cac0 <_Bfree>
 801baaa:	2d00      	cmp	r5, #0
 801baac:	f000 80bd 	beq.w	801bc2a <_dtoa_r+0x622>
 801bab0:	b12f      	cbz	r7, 801babe <_dtoa_r+0x4b6>
 801bab2:	42af      	cmp	r7, r5
 801bab4:	d003      	beq.n	801babe <_dtoa_r+0x4b6>
 801bab6:	4639      	mov	r1, r7
 801bab8:	4648      	mov	r0, r9
 801baba:	f001 f801 	bl	801cac0 <_Bfree>
 801babe:	4629      	mov	r1, r5
 801bac0:	4648      	mov	r0, r9
 801bac2:	f000 fffd 	bl	801cac0 <_Bfree>
 801bac6:	e0b0      	b.n	801bc2a <_dtoa_r+0x622>
 801bac8:	07e2      	lsls	r2, r4, #31
 801baca:	d505      	bpl.n	801bad8 <_dtoa_r+0x4d0>
 801bacc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bad0:	f7e4 fd92 	bl	80005f8 <__aeabi_dmul>
 801bad4:	3601      	adds	r6, #1
 801bad6:	2301      	movs	r3, #1
 801bad8:	1064      	asrs	r4, r4, #1
 801bada:	3508      	adds	r5, #8
 801badc:	e762      	b.n	801b9a4 <_dtoa_r+0x39c>
 801bade:	2602      	movs	r6, #2
 801bae0:	e765      	b.n	801b9ae <_dtoa_r+0x3a6>
 801bae2:	9c03      	ldr	r4, [sp, #12]
 801bae4:	46b8      	mov	r8, r7
 801bae6:	e784      	b.n	801b9f2 <_dtoa_r+0x3ea>
 801bae8:	4b27      	ldr	r3, [pc, #156]	@ (801bb88 <_dtoa_r+0x580>)
 801baea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801baec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801baf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801baf4:	4454      	add	r4, sl
 801baf6:	2900      	cmp	r1, #0
 801baf8:	d054      	beq.n	801bba4 <_dtoa_r+0x59c>
 801bafa:	4929      	ldr	r1, [pc, #164]	@ (801bba0 <_dtoa_r+0x598>)
 801bafc:	2000      	movs	r0, #0
 801bafe:	f7e4 fea5 	bl	800084c <__aeabi_ddiv>
 801bb02:	4633      	mov	r3, r6
 801bb04:	462a      	mov	r2, r5
 801bb06:	f7e4 fbbf 	bl	8000288 <__aeabi_dsub>
 801bb0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bb0e:	4656      	mov	r6, sl
 801bb10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb14:	f7e5 f820 	bl	8000b58 <__aeabi_d2iz>
 801bb18:	4605      	mov	r5, r0
 801bb1a:	f7e4 fd03 	bl	8000524 <__aeabi_i2d>
 801bb1e:	4602      	mov	r2, r0
 801bb20:	460b      	mov	r3, r1
 801bb22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb26:	f7e4 fbaf 	bl	8000288 <__aeabi_dsub>
 801bb2a:	3530      	adds	r5, #48	@ 0x30
 801bb2c:	4602      	mov	r2, r0
 801bb2e:	460b      	mov	r3, r1
 801bb30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bb34:	f806 5b01 	strb.w	r5, [r6], #1
 801bb38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bb3c:	f7e4 ffce 	bl	8000adc <__aeabi_dcmplt>
 801bb40:	2800      	cmp	r0, #0
 801bb42:	d172      	bne.n	801bc2a <_dtoa_r+0x622>
 801bb44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb48:	4911      	ldr	r1, [pc, #68]	@ (801bb90 <_dtoa_r+0x588>)
 801bb4a:	2000      	movs	r0, #0
 801bb4c:	f7e4 fb9c 	bl	8000288 <__aeabi_dsub>
 801bb50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bb54:	f7e4 ffc2 	bl	8000adc <__aeabi_dcmplt>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	f040 80b4 	bne.w	801bcc6 <_dtoa_r+0x6be>
 801bb5e:	42a6      	cmp	r6, r4
 801bb60:	f43f af70 	beq.w	801ba44 <_dtoa_r+0x43c>
 801bb64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801bb68:	4b0a      	ldr	r3, [pc, #40]	@ (801bb94 <_dtoa_r+0x58c>)
 801bb6a:	2200      	movs	r2, #0
 801bb6c:	f7e4 fd44 	bl	80005f8 <__aeabi_dmul>
 801bb70:	4b08      	ldr	r3, [pc, #32]	@ (801bb94 <_dtoa_r+0x58c>)
 801bb72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bb76:	2200      	movs	r2, #0
 801bb78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb7c:	f7e4 fd3c 	bl	80005f8 <__aeabi_dmul>
 801bb80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb84:	e7c4      	b.n	801bb10 <_dtoa_r+0x508>
 801bb86:	bf00      	nop
 801bb88:	08020a70 	.word	0x08020a70
 801bb8c:	08020a48 	.word	0x08020a48
 801bb90:	3ff00000 	.word	0x3ff00000
 801bb94:	40240000 	.word	0x40240000
 801bb98:	401c0000 	.word	0x401c0000
 801bb9c:	40140000 	.word	0x40140000
 801bba0:	3fe00000 	.word	0x3fe00000
 801bba4:	4631      	mov	r1, r6
 801bba6:	4628      	mov	r0, r5
 801bba8:	f7e4 fd26 	bl	80005f8 <__aeabi_dmul>
 801bbac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bbb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801bbb2:	4656      	mov	r6, sl
 801bbb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bbb8:	f7e4 ffce 	bl	8000b58 <__aeabi_d2iz>
 801bbbc:	4605      	mov	r5, r0
 801bbbe:	f7e4 fcb1 	bl	8000524 <__aeabi_i2d>
 801bbc2:	4602      	mov	r2, r0
 801bbc4:	460b      	mov	r3, r1
 801bbc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bbca:	f7e4 fb5d 	bl	8000288 <__aeabi_dsub>
 801bbce:	3530      	adds	r5, #48	@ 0x30
 801bbd0:	f806 5b01 	strb.w	r5, [r6], #1
 801bbd4:	4602      	mov	r2, r0
 801bbd6:	460b      	mov	r3, r1
 801bbd8:	42a6      	cmp	r6, r4
 801bbda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bbde:	f04f 0200 	mov.w	r2, #0
 801bbe2:	d124      	bne.n	801bc2e <_dtoa_r+0x626>
 801bbe4:	4baf      	ldr	r3, [pc, #700]	@ (801bea4 <_dtoa_r+0x89c>)
 801bbe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801bbea:	f7e4 fb4f 	bl	800028c <__adddf3>
 801bbee:	4602      	mov	r2, r0
 801bbf0:	460b      	mov	r3, r1
 801bbf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bbf6:	f7e4 ff8f 	bl	8000b18 <__aeabi_dcmpgt>
 801bbfa:	2800      	cmp	r0, #0
 801bbfc:	d163      	bne.n	801bcc6 <_dtoa_r+0x6be>
 801bbfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bc02:	49a8      	ldr	r1, [pc, #672]	@ (801bea4 <_dtoa_r+0x89c>)
 801bc04:	2000      	movs	r0, #0
 801bc06:	f7e4 fb3f 	bl	8000288 <__aeabi_dsub>
 801bc0a:	4602      	mov	r2, r0
 801bc0c:	460b      	mov	r3, r1
 801bc0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc12:	f7e4 ff63 	bl	8000adc <__aeabi_dcmplt>
 801bc16:	2800      	cmp	r0, #0
 801bc18:	f43f af14 	beq.w	801ba44 <_dtoa_r+0x43c>
 801bc1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801bc1e:	1e73      	subs	r3, r6, #1
 801bc20:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bc22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bc26:	2b30      	cmp	r3, #48	@ 0x30
 801bc28:	d0f8      	beq.n	801bc1c <_dtoa_r+0x614>
 801bc2a:	4647      	mov	r7, r8
 801bc2c:	e03b      	b.n	801bca6 <_dtoa_r+0x69e>
 801bc2e:	4b9e      	ldr	r3, [pc, #632]	@ (801bea8 <_dtoa_r+0x8a0>)
 801bc30:	f7e4 fce2 	bl	80005f8 <__aeabi_dmul>
 801bc34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc38:	e7bc      	b.n	801bbb4 <_dtoa_r+0x5ac>
 801bc3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801bc3e:	4656      	mov	r6, sl
 801bc40:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc44:	4620      	mov	r0, r4
 801bc46:	4629      	mov	r1, r5
 801bc48:	f7e4 fe00 	bl	800084c <__aeabi_ddiv>
 801bc4c:	f7e4 ff84 	bl	8000b58 <__aeabi_d2iz>
 801bc50:	4680      	mov	r8, r0
 801bc52:	f7e4 fc67 	bl	8000524 <__aeabi_i2d>
 801bc56:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc5a:	f7e4 fccd 	bl	80005f8 <__aeabi_dmul>
 801bc5e:	4602      	mov	r2, r0
 801bc60:	460b      	mov	r3, r1
 801bc62:	4620      	mov	r0, r4
 801bc64:	4629      	mov	r1, r5
 801bc66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bc6a:	f7e4 fb0d 	bl	8000288 <__aeabi_dsub>
 801bc6e:	f806 4b01 	strb.w	r4, [r6], #1
 801bc72:	9d03      	ldr	r5, [sp, #12]
 801bc74:	eba6 040a 	sub.w	r4, r6, sl
 801bc78:	42a5      	cmp	r5, r4
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	460b      	mov	r3, r1
 801bc7e:	d133      	bne.n	801bce8 <_dtoa_r+0x6e0>
 801bc80:	f7e4 fb04 	bl	800028c <__adddf3>
 801bc84:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc88:	4604      	mov	r4, r0
 801bc8a:	460d      	mov	r5, r1
 801bc8c:	f7e4 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 801bc90:	b9c0      	cbnz	r0, 801bcc4 <_dtoa_r+0x6bc>
 801bc92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc96:	4620      	mov	r0, r4
 801bc98:	4629      	mov	r1, r5
 801bc9a:	f7e4 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc9e:	b110      	cbz	r0, 801bca6 <_dtoa_r+0x69e>
 801bca0:	f018 0f01 	tst.w	r8, #1
 801bca4:	d10e      	bne.n	801bcc4 <_dtoa_r+0x6bc>
 801bca6:	9902      	ldr	r1, [sp, #8]
 801bca8:	4648      	mov	r0, r9
 801bcaa:	f000 ff09 	bl	801cac0 <_Bfree>
 801bcae:	2300      	movs	r3, #0
 801bcb0:	7033      	strb	r3, [r6, #0]
 801bcb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bcb4:	3701      	adds	r7, #1
 801bcb6:	601f      	str	r7, [r3, #0]
 801bcb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	f000 824b 	beq.w	801c156 <_dtoa_r+0xb4e>
 801bcc0:	601e      	str	r6, [r3, #0]
 801bcc2:	e248      	b.n	801c156 <_dtoa_r+0xb4e>
 801bcc4:	46b8      	mov	r8, r7
 801bcc6:	4633      	mov	r3, r6
 801bcc8:	461e      	mov	r6, r3
 801bcca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bcce:	2a39      	cmp	r2, #57	@ 0x39
 801bcd0:	d106      	bne.n	801bce0 <_dtoa_r+0x6d8>
 801bcd2:	459a      	cmp	sl, r3
 801bcd4:	d1f8      	bne.n	801bcc8 <_dtoa_r+0x6c0>
 801bcd6:	2230      	movs	r2, #48	@ 0x30
 801bcd8:	f108 0801 	add.w	r8, r8, #1
 801bcdc:	f88a 2000 	strb.w	r2, [sl]
 801bce0:	781a      	ldrb	r2, [r3, #0]
 801bce2:	3201      	adds	r2, #1
 801bce4:	701a      	strb	r2, [r3, #0]
 801bce6:	e7a0      	b.n	801bc2a <_dtoa_r+0x622>
 801bce8:	4b6f      	ldr	r3, [pc, #444]	@ (801bea8 <_dtoa_r+0x8a0>)
 801bcea:	2200      	movs	r2, #0
 801bcec:	f7e4 fc84 	bl	80005f8 <__aeabi_dmul>
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	4604      	mov	r4, r0
 801bcf6:	460d      	mov	r5, r1
 801bcf8:	f7e4 fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 801bcfc:	2800      	cmp	r0, #0
 801bcfe:	d09f      	beq.n	801bc40 <_dtoa_r+0x638>
 801bd00:	e7d1      	b.n	801bca6 <_dtoa_r+0x69e>
 801bd02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd04:	2a00      	cmp	r2, #0
 801bd06:	f000 80ea 	beq.w	801bede <_dtoa_r+0x8d6>
 801bd0a:	9a07      	ldr	r2, [sp, #28]
 801bd0c:	2a01      	cmp	r2, #1
 801bd0e:	f300 80cd 	bgt.w	801beac <_dtoa_r+0x8a4>
 801bd12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bd14:	2a00      	cmp	r2, #0
 801bd16:	f000 80c1 	beq.w	801be9c <_dtoa_r+0x894>
 801bd1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bd1e:	9c08      	ldr	r4, [sp, #32]
 801bd20:	9e00      	ldr	r6, [sp, #0]
 801bd22:	9a00      	ldr	r2, [sp, #0]
 801bd24:	441a      	add	r2, r3
 801bd26:	9200      	str	r2, [sp, #0]
 801bd28:	9a06      	ldr	r2, [sp, #24]
 801bd2a:	2101      	movs	r1, #1
 801bd2c:	441a      	add	r2, r3
 801bd2e:	4648      	mov	r0, r9
 801bd30:	9206      	str	r2, [sp, #24]
 801bd32:	f000 ffc3 	bl	801ccbc <__i2b>
 801bd36:	4605      	mov	r5, r0
 801bd38:	b166      	cbz	r6, 801bd54 <_dtoa_r+0x74c>
 801bd3a:	9b06      	ldr	r3, [sp, #24]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	dd09      	ble.n	801bd54 <_dtoa_r+0x74c>
 801bd40:	42b3      	cmp	r3, r6
 801bd42:	9a00      	ldr	r2, [sp, #0]
 801bd44:	bfa8      	it	ge
 801bd46:	4633      	movge	r3, r6
 801bd48:	1ad2      	subs	r2, r2, r3
 801bd4a:	9200      	str	r2, [sp, #0]
 801bd4c:	9a06      	ldr	r2, [sp, #24]
 801bd4e:	1af6      	subs	r6, r6, r3
 801bd50:	1ad3      	subs	r3, r2, r3
 801bd52:	9306      	str	r3, [sp, #24]
 801bd54:	9b08      	ldr	r3, [sp, #32]
 801bd56:	b30b      	cbz	r3, 801bd9c <_dtoa_r+0x794>
 801bd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	f000 80c6 	beq.w	801beec <_dtoa_r+0x8e4>
 801bd60:	2c00      	cmp	r4, #0
 801bd62:	f000 80c0 	beq.w	801bee6 <_dtoa_r+0x8de>
 801bd66:	4629      	mov	r1, r5
 801bd68:	4622      	mov	r2, r4
 801bd6a:	4648      	mov	r0, r9
 801bd6c:	f001 f85e 	bl	801ce2c <__pow5mult>
 801bd70:	9a02      	ldr	r2, [sp, #8]
 801bd72:	4601      	mov	r1, r0
 801bd74:	4605      	mov	r5, r0
 801bd76:	4648      	mov	r0, r9
 801bd78:	f000 ffb6 	bl	801cce8 <__multiply>
 801bd7c:	9902      	ldr	r1, [sp, #8]
 801bd7e:	4680      	mov	r8, r0
 801bd80:	4648      	mov	r0, r9
 801bd82:	f000 fe9d 	bl	801cac0 <_Bfree>
 801bd86:	9b08      	ldr	r3, [sp, #32]
 801bd88:	1b1b      	subs	r3, r3, r4
 801bd8a:	9308      	str	r3, [sp, #32]
 801bd8c:	f000 80b1 	beq.w	801bef2 <_dtoa_r+0x8ea>
 801bd90:	9a08      	ldr	r2, [sp, #32]
 801bd92:	4641      	mov	r1, r8
 801bd94:	4648      	mov	r0, r9
 801bd96:	f001 f849 	bl	801ce2c <__pow5mult>
 801bd9a:	9002      	str	r0, [sp, #8]
 801bd9c:	2101      	movs	r1, #1
 801bd9e:	4648      	mov	r0, r9
 801bda0:	f000 ff8c 	bl	801ccbc <__i2b>
 801bda4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bda6:	4604      	mov	r4, r0
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 81d8 	beq.w	801c15e <_dtoa_r+0xb56>
 801bdae:	461a      	mov	r2, r3
 801bdb0:	4601      	mov	r1, r0
 801bdb2:	4648      	mov	r0, r9
 801bdb4:	f001 f83a 	bl	801ce2c <__pow5mult>
 801bdb8:	9b07      	ldr	r3, [sp, #28]
 801bdba:	2b01      	cmp	r3, #1
 801bdbc:	4604      	mov	r4, r0
 801bdbe:	f300 809f 	bgt.w	801bf00 <_dtoa_r+0x8f8>
 801bdc2:	9b04      	ldr	r3, [sp, #16]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	f040 8097 	bne.w	801bef8 <_dtoa_r+0x8f0>
 801bdca:	9b05      	ldr	r3, [sp, #20]
 801bdcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	f040 8093 	bne.w	801befc <_dtoa_r+0x8f4>
 801bdd6:	9b05      	ldr	r3, [sp, #20]
 801bdd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bddc:	0d1b      	lsrs	r3, r3, #20
 801bdde:	051b      	lsls	r3, r3, #20
 801bde0:	b133      	cbz	r3, 801bdf0 <_dtoa_r+0x7e8>
 801bde2:	9b00      	ldr	r3, [sp, #0]
 801bde4:	3301      	adds	r3, #1
 801bde6:	9300      	str	r3, [sp, #0]
 801bde8:	9b06      	ldr	r3, [sp, #24]
 801bdea:	3301      	adds	r3, #1
 801bdec:	9306      	str	r3, [sp, #24]
 801bdee:	2301      	movs	r3, #1
 801bdf0:	9308      	str	r3, [sp, #32]
 801bdf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	f000 81b8 	beq.w	801c16a <_dtoa_r+0xb62>
 801bdfa:	6923      	ldr	r3, [r4, #16]
 801bdfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801be00:	6918      	ldr	r0, [r3, #16]
 801be02:	f000 ff0f 	bl	801cc24 <__hi0bits>
 801be06:	f1c0 0020 	rsb	r0, r0, #32
 801be0a:	9b06      	ldr	r3, [sp, #24]
 801be0c:	4418      	add	r0, r3
 801be0e:	f010 001f 	ands.w	r0, r0, #31
 801be12:	f000 8082 	beq.w	801bf1a <_dtoa_r+0x912>
 801be16:	f1c0 0320 	rsb	r3, r0, #32
 801be1a:	2b04      	cmp	r3, #4
 801be1c:	dd73      	ble.n	801bf06 <_dtoa_r+0x8fe>
 801be1e:	9b00      	ldr	r3, [sp, #0]
 801be20:	f1c0 001c 	rsb	r0, r0, #28
 801be24:	4403      	add	r3, r0
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	9b06      	ldr	r3, [sp, #24]
 801be2a:	4403      	add	r3, r0
 801be2c:	4406      	add	r6, r0
 801be2e:	9306      	str	r3, [sp, #24]
 801be30:	9b00      	ldr	r3, [sp, #0]
 801be32:	2b00      	cmp	r3, #0
 801be34:	dd05      	ble.n	801be42 <_dtoa_r+0x83a>
 801be36:	9902      	ldr	r1, [sp, #8]
 801be38:	461a      	mov	r2, r3
 801be3a:	4648      	mov	r0, r9
 801be3c:	f001 f850 	bl	801cee0 <__lshift>
 801be40:	9002      	str	r0, [sp, #8]
 801be42:	9b06      	ldr	r3, [sp, #24]
 801be44:	2b00      	cmp	r3, #0
 801be46:	dd05      	ble.n	801be54 <_dtoa_r+0x84c>
 801be48:	4621      	mov	r1, r4
 801be4a:	461a      	mov	r2, r3
 801be4c:	4648      	mov	r0, r9
 801be4e:	f001 f847 	bl	801cee0 <__lshift>
 801be52:	4604      	mov	r4, r0
 801be54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be56:	2b00      	cmp	r3, #0
 801be58:	d061      	beq.n	801bf1e <_dtoa_r+0x916>
 801be5a:	9802      	ldr	r0, [sp, #8]
 801be5c:	4621      	mov	r1, r4
 801be5e:	f001 f8ab 	bl	801cfb8 <__mcmp>
 801be62:	2800      	cmp	r0, #0
 801be64:	da5b      	bge.n	801bf1e <_dtoa_r+0x916>
 801be66:	2300      	movs	r3, #0
 801be68:	9902      	ldr	r1, [sp, #8]
 801be6a:	220a      	movs	r2, #10
 801be6c:	4648      	mov	r0, r9
 801be6e:	f000 fe49 	bl	801cb04 <__multadd>
 801be72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be74:	9002      	str	r0, [sp, #8]
 801be76:	f107 38ff 	add.w	r8, r7, #4294967295
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	f000 8177 	beq.w	801c16e <_dtoa_r+0xb66>
 801be80:	4629      	mov	r1, r5
 801be82:	2300      	movs	r3, #0
 801be84:	220a      	movs	r2, #10
 801be86:	4648      	mov	r0, r9
 801be88:	f000 fe3c 	bl	801cb04 <__multadd>
 801be8c:	f1bb 0f00 	cmp.w	fp, #0
 801be90:	4605      	mov	r5, r0
 801be92:	dc6f      	bgt.n	801bf74 <_dtoa_r+0x96c>
 801be94:	9b07      	ldr	r3, [sp, #28]
 801be96:	2b02      	cmp	r3, #2
 801be98:	dc49      	bgt.n	801bf2e <_dtoa_r+0x926>
 801be9a:	e06b      	b.n	801bf74 <_dtoa_r+0x96c>
 801be9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801be9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801bea2:	e73c      	b.n	801bd1e <_dtoa_r+0x716>
 801bea4:	3fe00000 	.word	0x3fe00000
 801bea8:	40240000 	.word	0x40240000
 801beac:	9b03      	ldr	r3, [sp, #12]
 801beae:	1e5c      	subs	r4, r3, #1
 801beb0:	9b08      	ldr	r3, [sp, #32]
 801beb2:	42a3      	cmp	r3, r4
 801beb4:	db09      	blt.n	801beca <_dtoa_r+0x8c2>
 801beb6:	1b1c      	subs	r4, r3, r4
 801beb8:	9b03      	ldr	r3, [sp, #12]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	f6bf af30 	bge.w	801bd20 <_dtoa_r+0x718>
 801bec0:	9b00      	ldr	r3, [sp, #0]
 801bec2:	9a03      	ldr	r2, [sp, #12]
 801bec4:	1a9e      	subs	r6, r3, r2
 801bec6:	2300      	movs	r3, #0
 801bec8:	e72b      	b.n	801bd22 <_dtoa_r+0x71a>
 801beca:	9b08      	ldr	r3, [sp, #32]
 801becc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bece:	9408      	str	r4, [sp, #32]
 801bed0:	1ae3      	subs	r3, r4, r3
 801bed2:	441a      	add	r2, r3
 801bed4:	9e00      	ldr	r6, [sp, #0]
 801bed6:	9b03      	ldr	r3, [sp, #12]
 801bed8:	920d      	str	r2, [sp, #52]	@ 0x34
 801beda:	2400      	movs	r4, #0
 801bedc:	e721      	b.n	801bd22 <_dtoa_r+0x71a>
 801bede:	9c08      	ldr	r4, [sp, #32]
 801bee0:	9e00      	ldr	r6, [sp, #0]
 801bee2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801bee4:	e728      	b.n	801bd38 <_dtoa_r+0x730>
 801bee6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801beea:	e751      	b.n	801bd90 <_dtoa_r+0x788>
 801beec:	9a08      	ldr	r2, [sp, #32]
 801beee:	9902      	ldr	r1, [sp, #8]
 801bef0:	e750      	b.n	801bd94 <_dtoa_r+0x78c>
 801bef2:	f8cd 8008 	str.w	r8, [sp, #8]
 801bef6:	e751      	b.n	801bd9c <_dtoa_r+0x794>
 801bef8:	2300      	movs	r3, #0
 801befa:	e779      	b.n	801bdf0 <_dtoa_r+0x7e8>
 801befc:	9b04      	ldr	r3, [sp, #16]
 801befe:	e777      	b.n	801bdf0 <_dtoa_r+0x7e8>
 801bf00:	2300      	movs	r3, #0
 801bf02:	9308      	str	r3, [sp, #32]
 801bf04:	e779      	b.n	801bdfa <_dtoa_r+0x7f2>
 801bf06:	d093      	beq.n	801be30 <_dtoa_r+0x828>
 801bf08:	9a00      	ldr	r2, [sp, #0]
 801bf0a:	331c      	adds	r3, #28
 801bf0c:	441a      	add	r2, r3
 801bf0e:	9200      	str	r2, [sp, #0]
 801bf10:	9a06      	ldr	r2, [sp, #24]
 801bf12:	441a      	add	r2, r3
 801bf14:	441e      	add	r6, r3
 801bf16:	9206      	str	r2, [sp, #24]
 801bf18:	e78a      	b.n	801be30 <_dtoa_r+0x828>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	e7f4      	b.n	801bf08 <_dtoa_r+0x900>
 801bf1e:	9b03      	ldr	r3, [sp, #12]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	46b8      	mov	r8, r7
 801bf24:	dc20      	bgt.n	801bf68 <_dtoa_r+0x960>
 801bf26:	469b      	mov	fp, r3
 801bf28:	9b07      	ldr	r3, [sp, #28]
 801bf2a:	2b02      	cmp	r3, #2
 801bf2c:	dd1e      	ble.n	801bf6c <_dtoa_r+0x964>
 801bf2e:	f1bb 0f00 	cmp.w	fp, #0
 801bf32:	f47f adb1 	bne.w	801ba98 <_dtoa_r+0x490>
 801bf36:	4621      	mov	r1, r4
 801bf38:	465b      	mov	r3, fp
 801bf3a:	2205      	movs	r2, #5
 801bf3c:	4648      	mov	r0, r9
 801bf3e:	f000 fde1 	bl	801cb04 <__multadd>
 801bf42:	4601      	mov	r1, r0
 801bf44:	4604      	mov	r4, r0
 801bf46:	9802      	ldr	r0, [sp, #8]
 801bf48:	f001 f836 	bl	801cfb8 <__mcmp>
 801bf4c:	2800      	cmp	r0, #0
 801bf4e:	f77f ada3 	ble.w	801ba98 <_dtoa_r+0x490>
 801bf52:	4656      	mov	r6, sl
 801bf54:	2331      	movs	r3, #49	@ 0x31
 801bf56:	f806 3b01 	strb.w	r3, [r6], #1
 801bf5a:	f108 0801 	add.w	r8, r8, #1
 801bf5e:	e59f      	b.n	801baa0 <_dtoa_r+0x498>
 801bf60:	9c03      	ldr	r4, [sp, #12]
 801bf62:	46b8      	mov	r8, r7
 801bf64:	4625      	mov	r5, r4
 801bf66:	e7f4      	b.n	801bf52 <_dtoa_r+0x94a>
 801bf68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801bf6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	f000 8101 	beq.w	801c176 <_dtoa_r+0xb6e>
 801bf74:	2e00      	cmp	r6, #0
 801bf76:	dd05      	ble.n	801bf84 <_dtoa_r+0x97c>
 801bf78:	4629      	mov	r1, r5
 801bf7a:	4632      	mov	r2, r6
 801bf7c:	4648      	mov	r0, r9
 801bf7e:	f000 ffaf 	bl	801cee0 <__lshift>
 801bf82:	4605      	mov	r5, r0
 801bf84:	9b08      	ldr	r3, [sp, #32]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d05c      	beq.n	801c044 <_dtoa_r+0xa3c>
 801bf8a:	6869      	ldr	r1, [r5, #4]
 801bf8c:	4648      	mov	r0, r9
 801bf8e:	f000 fd57 	bl	801ca40 <_Balloc>
 801bf92:	4606      	mov	r6, r0
 801bf94:	b928      	cbnz	r0, 801bfa2 <_dtoa_r+0x99a>
 801bf96:	4b82      	ldr	r3, [pc, #520]	@ (801c1a0 <_dtoa_r+0xb98>)
 801bf98:	4602      	mov	r2, r0
 801bf9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bf9e:	f7ff bb4a 	b.w	801b636 <_dtoa_r+0x2e>
 801bfa2:	692a      	ldr	r2, [r5, #16]
 801bfa4:	3202      	adds	r2, #2
 801bfa6:	0092      	lsls	r2, r2, #2
 801bfa8:	f105 010c 	add.w	r1, r5, #12
 801bfac:	300c      	adds	r0, #12
 801bfae:	f7ff fa6c 	bl	801b48a <memcpy>
 801bfb2:	2201      	movs	r2, #1
 801bfb4:	4631      	mov	r1, r6
 801bfb6:	4648      	mov	r0, r9
 801bfb8:	f000 ff92 	bl	801cee0 <__lshift>
 801bfbc:	f10a 0301 	add.w	r3, sl, #1
 801bfc0:	9300      	str	r3, [sp, #0]
 801bfc2:	eb0a 030b 	add.w	r3, sl, fp
 801bfc6:	9308      	str	r3, [sp, #32]
 801bfc8:	9b04      	ldr	r3, [sp, #16]
 801bfca:	f003 0301 	and.w	r3, r3, #1
 801bfce:	462f      	mov	r7, r5
 801bfd0:	9306      	str	r3, [sp, #24]
 801bfd2:	4605      	mov	r5, r0
 801bfd4:	9b00      	ldr	r3, [sp, #0]
 801bfd6:	9802      	ldr	r0, [sp, #8]
 801bfd8:	4621      	mov	r1, r4
 801bfda:	f103 3bff 	add.w	fp, r3, #4294967295
 801bfde:	f7ff fa89 	bl	801b4f4 <quorem>
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	3330      	adds	r3, #48	@ 0x30
 801bfe6:	9003      	str	r0, [sp, #12]
 801bfe8:	4639      	mov	r1, r7
 801bfea:	9802      	ldr	r0, [sp, #8]
 801bfec:	9309      	str	r3, [sp, #36]	@ 0x24
 801bfee:	f000 ffe3 	bl	801cfb8 <__mcmp>
 801bff2:	462a      	mov	r2, r5
 801bff4:	9004      	str	r0, [sp, #16]
 801bff6:	4621      	mov	r1, r4
 801bff8:	4648      	mov	r0, r9
 801bffa:	f000 fff9 	bl	801cff0 <__mdiff>
 801bffe:	68c2      	ldr	r2, [r0, #12]
 801c000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c002:	4606      	mov	r6, r0
 801c004:	bb02      	cbnz	r2, 801c048 <_dtoa_r+0xa40>
 801c006:	4601      	mov	r1, r0
 801c008:	9802      	ldr	r0, [sp, #8]
 801c00a:	f000 ffd5 	bl	801cfb8 <__mcmp>
 801c00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c010:	4602      	mov	r2, r0
 801c012:	4631      	mov	r1, r6
 801c014:	4648      	mov	r0, r9
 801c016:	920c      	str	r2, [sp, #48]	@ 0x30
 801c018:	9309      	str	r3, [sp, #36]	@ 0x24
 801c01a:	f000 fd51 	bl	801cac0 <_Bfree>
 801c01e:	9b07      	ldr	r3, [sp, #28]
 801c020:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c022:	9e00      	ldr	r6, [sp, #0]
 801c024:	ea42 0103 	orr.w	r1, r2, r3
 801c028:	9b06      	ldr	r3, [sp, #24]
 801c02a:	4319      	orrs	r1, r3
 801c02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c02e:	d10d      	bne.n	801c04c <_dtoa_r+0xa44>
 801c030:	2b39      	cmp	r3, #57	@ 0x39
 801c032:	d027      	beq.n	801c084 <_dtoa_r+0xa7c>
 801c034:	9a04      	ldr	r2, [sp, #16]
 801c036:	2a00      	cmp	r2, #0
 801c038:	dd01      	ble.n	801c03e <_dtoa_r+0xa36>
 801c03a:	9b03      	ldr	r3, [sp, #12]
 801c03c:	3331      	adds	r3, #49	@ 0x31
 801c03e:	f88b 3000 	strb.w	r3, [fp]
 801c042:	e52e      	b.n	801baa2 <_dtoa_r+0x49a>
 801c044:	4628      	mov	r0, r5
 801c046:	e7b9      	b.n	801bfbc <_dtoa_r+0x9b4>
 801c048:	2201      	movs	r2, #1
 801c04a:	e7e2      	b.n	801c012 <_dtoa_r+0xa0a>
 801c04c:	9904      	ldr	r1, [sp, #16]
 801c04e:	2900      	cmp	r1, #0
 801c050:	db04      	blt.n	801c05c <_dtoa_r+0xa54>
 801c052:	9807      	ldr	r0, [sp, #28]
 801c054:	4301      	orrs	r1, r0
 801c056:	9806      	ldr	r0, [sp, #24]
 801c058:	4301      	orrs	r1, r0
 801c05a:	d120      	bne.n	801c09e <_dtoa_r+0xa96>
 801c05c:	2a00      	cmp	r2, #0
 801c05e:	ddee      	ble.n	801c03e <_dtoa_r+0xa36>
 801c060:	9902      	ldr	r1, [sp, #8]
 801c062:	9300      	str	r3, [sp, #0]
 801c064:	2201      	movs	r2, #1
 801c066:	4648      	mov	r0, r9
 801c068:	f000 ff3a 	bl	801cee0 <__lshift>
 801c06c:	4621      	mov	r1, r4
 801c06e:	9002      	str	r0, [sp, #8]
 801c070:	f000 ffa2 	bl	801cfb8 <__mcmp>
 801c074:	2800      	cmp	r0, #0
 801c076:	9b00      	ldr	r3, [sp, #0]
 801c078:	dc02      	bgt.n	801c080 <_dtoa_r+0xa78>
 801c07a:	d1e0      	bne.n	801c03e <_dtoa_r+0xa36>
 801c07c:	07da      	lsls	r2, r3, #31
 801c07e:	d5de      	bpl.n	801c03e <_dtoa_r+0xa36>
 801c080:	2b39      	cmp	r3, #57	@ 0x39
 801c082:	d1da      	bne.n	801c03a <_dtoa_r+0xa32>
 801c084:	2339      	movs	r3, #57	@ 0x39
 801c086:	f88b 3000 	strb.w	r3, [fp]
 801c08a:	4633      	mov	r3, r6
 801c08c:	461e      	mov	r6, r3
 801c08e:	3b01      	subs	r3, #1
 801c090:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c094:	2a39      	cmp	r2, #57	@ 0x39
 801c096:	d04e      	beq.n	801c136 <_dtoa_r+0xb2e>
 801c098:	3201      	adds	r2, #1
 801c09a:	701a      	strb	r2, [r3, #0]
 801c09c:	e501      	b.n	801baa2 <_dtoa_r+0x49a>
 801c09e:	2a00      	cmp	r2, #0
 801c0a0:	dd03      	ble.n	801c0aa <_dtoa_r+0xaa2>
 801c0a2:	2b39      	cmp	r3, #57	@ 0x39
 801c0a4:	d0ee      	beq.n	801c084 <_dtoa_r+0xa7c>
 801c0a6:	3301      	adds	r3, #1
 801c0a8:	e7c9      	b.n	801c03e <_dtoa_r+0xa36>
 801c0aa:	9a00      	ldr	r2, [sp, #0]
 801c0ac:	9908      	ldr	r1, [sp, #32]
 801c0ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c0b2:	428a      	cmp	r2, r1
 801c0b4:	d028      	beq.n	801c108 <_dtoa_r+0xb00>
 801c0b6:	9902      	ldr	r1, [sp, #8]
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	220a      	movs	r2, #10
 801c0bc:	4648      	mov	r0, r9
 801c0be:	f000 fd21 	bl	801cb04 <__multadd>
 801c0c2:	42af      	cmp	r7, r5
 801c0c4:	9002      	str	r0, [sp, #8]
 801c0c6:	f04f 0300 	mov.w	r3, #0
 801c0ca:	f04f 020a 	mov.w	r2, #10
 801c0ce:	4639      	mov	r1, r7
 801c0d0:	4648      	mov	r0, r9
 801c0d2:	d107      	bne.n	801c0e4 <_dtoa_r+0xadc>
 801c0d4:	f000 fd16 	bl	801cb04 <__multadd>
 801c0d8:	4607      	mov	r7, r0
 801c0da:	4605      	mov	r5, r0
 801c0dc:	9b00      	ldr	r3, [sp, #0]
 801c0de:	3301      	adds	r3, #1
 801c0e0:	9300      	str	r3, [sp, #0]
 801c0e2:	e777      	b.n	801bfd4 <_dtoa_r+0x9cc>
 801c0e4:	f000 fd0e 	bl	801cb04 <__multadd>
 801c0e8:	4629      	mov	r1, r5
 801c0ea:	4607      	mov	r7, r0
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	220a      	movs	r2, #10
 801c0f0:	4648      	mov	r0, r9
 801c0f2:	f000 fd07 	bl	801cb04 <__multadd>
 801c0f6:	4605      	mov	r5, r0
 801c0f8:	e7f0      	b.n	801c0dc <_dtoa_r+0xad4>
 801c0fa:	f1bb 0f00 	cmp.w	fp, #0
 801c0fe:	bfcc      	ite	gt
 801c100:	465e      	movgt	r6, fp
 801c102:	2601      	movle	r6, #1
 801c104:	4456      	add	r6, sl
 801c106:	2700      	movs	r7, #0
 801c108:	9902      	ldr	r1, [sp, #8]
 801c10a:	9300      	str	r3, [sp, #0]
 801c10c:	2201      	movs	r2, #1
 801c10e:	4648      	mov	r0, r9
 801c110:	f000 fee6 	bl	801cee0 <__lshift>
 801c114:	4621      	mov	r1, r4
 801c116:	9002      	str	r0, [sp, #8]
 801c118:	f000 ff4e 	bl	801cfb8 <__mcmp>
 801c11c:	2800      	cmp	r0, #0
 801c11e:	dcb4      	bgt.n	801c08a <_dtoa_r+0xa82>
 801c120:	d102      	bne.n	801c128 <_dtoa_r+0xb20>
 801c122:	9b00      	ldr	r3, [sp, #0]
 801c124:	07db      	lsls	r3, r3, #31
 801c126:	d4b0      	bmi.n	801c08a <_dtoa_r+0xa82>
 801c128:	4633      	mov	r3, r6
 801c12a:	461e      	mov	r6, r3
 801c12c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c130:	2a30      	cmp	r2, #48	@ 0x30
 801c132:	d0fa      	beq.n	801c12a <_dtoa_r+0xb22>
 801c134:	e4b5      	b.n	801baa2 <_dtoa_r+0x49a>
 801c136:	459a      	cmp	sl, r3
 801c138:	d1a8      	bne.n	801c08c <_dtoa_r+0xa84>
 801c13a:	2331      	movs	r3, #49	@ 0x31
 801c13c:	f108 0801 	add.w	r8, r8, #1
 801c140:	f88a 3000 	strb.w	r3, [sl]
 801c144:	e4ad      	b.n	801baa2 <_dtoa_r+0x49a>
 801c146:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c148:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801c1a4 <_dtoa_r+0xb9c>
 801c14c:	b11b      	cbz	r3, 801c156 <_dtoa_r+0xb4e>
 801c14e:	f10a 0308 	add.w	r3, sl, #8
 801c152:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c154:	6013      	str	r3, [r2, #0]
 801c156:	4650      	mov	r0, sl
 801c158:	b017      	add	sp, #92	@ 0x5c
 801c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c15e:	9b07      	ldr	r3, [sp, #28]
 801c160:	2b01      	cmp	r3, #1
 801c162:	f77f ae2e 	ble.w	801bdc2 <_dtoa_r+0x7ba>
 801c166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c168:	9308      	str	r3, [sp, #32]
 801c16a:	2001      	movs	r0, #1
 801c16c:	e64d      	b.n	801be0a <_dtoa_r+0x802>
 801c16e:	f1bb 0f00 	cmp.w	fp, #0
 801c172:	f77f aed9 	ble.w	801bf28 <_dtoa_r+0x920>
 801c176:	4656      	mov	r6, sl
 801c178:	9802      	ldr	r0, [sp, #8]
 801c17a:	4621      	mov	r1, r4
 801c17c:	f7ff f9ba 	bl	801b4f4 <quorem>
 801c180:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801c184:	f806 3b01 	strb.w	r3, [r6], #1
 801c188:	eba6 020a 	sub.w	r2, r6, sl
 801c18c:	4593      	cmp	fp, r2
 801c18e:	ddb4      	ble.n	801c0fa <_dtoa_r+0xaf2>
 801c190:	9902      	ldr	r1, [sp, #8]
 801c192:	2300      	movs	r3, #0
 801c194:	220a      	movs	r2, #10
 801c196:	4648      	mov	r0, r9
 801c198:	f000 fcb4 	bl	801cb04 <__multadd>
 801c19c:	9002      	str	r0, [sp, #8]
 801c19e:	e7eb      	b.n	801c178 <_dtoa_r+0xb70>
 801c1a0:	080203e2 	.word	0x080203e2
 801c1a4:	08020366 	.word	0x08020366

0801c1a8 <_free_r>:
 801c1a8:	b538      	push	{r3, r4, r5, lr}
 801c1aa:	4605      	mov	r5, r0
 801c1ac:	2900      	cmp	r1, #0
 801c1ae:	d041      	beq.n	801c234 <_free_r+0x8c>
 801c1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c1b4:	1f0c      	subs	r4, r1, #4
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	bfb8      	it	lt
 801c1ba:	18e4      	addlt	r4, r4, r3
 801c1bc:	f000 fc34 	bl	801ca28 <__malloc_lock>
 801c1c0:	4a1d      	ldr	r2, [pc, #116]	@ (801c238 <_free_r+0x90>)
 801c1c2:	6813      	ldr	r3, [r2, #0]
 801c1c4:	b933      	cbnz	r3, 801c1d4 <_free_r+0x2c>
 801c1c6:	6063      	str	r3, [r4, #4]
 801c1c8:	6014      	str	r4, [r2, #0]
 801c1ca:	4628      	mov	r0, r5
 801c1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c1d0:	f000 bc30 	b.w	801ca34 <__malloc_unlock>
 801c1d4:	42a3      	cmp	r3, r4
 801c1d6:	d908      	bls.n	801c1ea <_free_r+0x42>
 801c1d8:	6820      	ldr	r0, [r4, #0]
 801c1da:	1821      	adds	r1, r4, r0
 801c1dc:	428b      	cmp	r3, r1
 801c1de:	bf01      	itttt	eq
 801c1e0:	6819      	ldreq	r1, [r3, #0]
 801c1e2:	685b      	ldreq	r3, [r3, #4]
 801c1e4:	1809      	addeq	r1, r1, r0
 801c1e6:	6021      	streq	r1, [r4, #0]
 801c1e8:	e7ed      	b.n	801c1c6 <_free_r+0x1e>
 801c1ea:	461a      	mov	r2, r3
 801c1ec:	685b      	ldr	r3, [r3, #4]
 801c1ee:	b10b      	cbz	r3, 801c1f4 <_free_r+0x4c>
 801c1f0:	42a3      	cmp	r3, r4
 801c1f2:	d9fa      	bls.n	801c1ea <_free_r+0x42>
 801c1f4:	6811      	ldr	r1, [r2, #0]
 801c1f6:	1850      	adds	r0, r2, r1
 801c1f8:	42a0      	cmp	r0, r4
 801c1fa:	d10b      	bne.n	801c214 <_free_r+0x6c>
 801c1fc:	6820      	ldr	r0, [r4, #0]
 801c1fe:	4401      	add	r1, r0
 801c200:	1850      	adds	r0, r2, r1
 801c202:	4283      	cmp	r3, r0
 801c204:	6011      	str	r1, [r2, #0]
 801c206:	d1e0      	bne.n	801c1ca <_free_r+0x22>
 801c208:	6818      	ldr	r0, [r3, #0]
 801c20a:	685b      	ldr	r3, [r3, #4]
 801c20c:	6053      	str	r3, [r2, #4]
 801c20e:	4408      	add	r0, r1
 801c210:	6010      	str	r0, [r2, #0]
 801c212:	e7da      	b.n	801c1ca <_free_r+0x22>
 801c214:	d902      	bls.n	801c21c <_free_r+0x74>
 801c216:	230c      	movs	r3, #12
 801c218:	602b      	str	r3, [r5, #0]
 801c21a:	e7d6      	b.n	801c1ca <_free_r+0x22>
 801c21c:	6820      	ldr	r0, [r4, #0]
 801c21e:	1821      	adds	r1, r4, r0
 801c220:	428b      	cmp	r3, r1
 801c222:	bf04      	itt	eq
 801c224:	6819      	ldreq	r1, [r3, #0]
 801c226:	685b      	ldreq	r3, [r3, #4]
 801c228:	6063      	str	r3, [r4, #4]
 801c22a:	bf04      	itt	eq
 801c22c:	1809      	addeq	r1, r1, r0
 801c22e:	6021      	streq	r1, [r4, #0]
 801c230:	6054      	str	r4, [r2, #4]
 801c232:	e7ca      	b.n	801c1ca <_free_r+0x22>
 801c234:	bd38      	pop	{r3, r4, r5, pc}
 801c236:	bf00      	nop
 801c238:	2000b1d8 	.word	0x2000b1d8

0801c23c <rshift>:
 801c23c:	6903      	ldr	r3, [r0, #16]
 801c23e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c246:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c24a:	f100 0414 	add.w	r4, r0, #20
 801c24e:	dd45      	ble.n	801c2dc <rshift+0xa0>
 801c250:	f011 011f 	ands.w	r1, r1, #31
 801c254:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c258:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c25c:	d10c      	bne.n	801c278 <rshift+0x3c>
 801c25e:	f100 0710 	add.w	r7, r0, #16
 801c262:	4629      	mov	r1, r5
 801c264:	42b1      	cmp	r1, r6
 801c266:	d334      	bcc.n	801c2d2 <rshift+0x96>
 801c268:	1a9b      	subs	r3, r3, r2
 801c26a:	009b      	lsls	r3, r3, #2
 801c26c:	1eea      	subs	r2, r5, #3
 801c26e:	4296      	cmp	r6, r2
 801c270:	bf38      	it	cc
 801c272:	2300      	movcc	r3, #0
 801c274:	4423      	add	r3, r4
 801c276:	e015      	b.n	801c2a4 <rshift+0x68>
 801c278:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c27c:	f1c1 0820 	rsb	r8, r1, #32
 801c280:	40cf      	lsrs	r7, r1
 801c282:	f105 0e04 	add.w	lr, r5, #4
 801c286:	46a1      	mov	r9, r4
 801c288:	4576      	cmp	r6, lr
 801c28a:	46f4      	mov	ip, lr
 801c28c:	d815      	bhi.n	801c2ba <rshift+0x7e>
 801c28e:	1a9a      	subs	r2, r3, r2
 801c290:	0092      	lsls	r2, r2, #2
 801c292:	3a04      	subs	r2, #4
 801c294:	3501      	adds	r5, #1
 801c296:	42ae      	cmp	r6, r5
 801c298:	bf38      	it	cc
 801c29a:	2200      	movcc	r2, #0
 801c29c:	18a3      	adds	r3, r4, r2
 801c29e:	50a7      	str	r7, [r4, r2]
 801c2a0:	b107      	cbz	r7, 801c2a4 <rshift+0x68>
 801c2a2:	3304      	adds	r3, #4
 801c2a4:	1b1a      	subs	r2, r3, r4
 801c2a6:	42a3      	cmp	r3, r4
 801c2a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c2ac:	bf08      	it	eq
 801c2ae:	2300      	moveq	r3, #0
 801c2b0:	6102      	str	r2, [r0, #16]
 801c2b2:	bf08      	it	eq
 801c2b4:	6143      	streq	r3, [r0, #20]
 801c2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c2ba:	f8dc c000 	ldr.w	ip, [ip]
 801c2be:	fa0c fc08 	lsl.w	ip, ip, r8
 801c2c2:	ea4c 0707 	orr.w	r7, ip, r7
 801c2c6:	f849 7b04 	str.w	r7, [r9], #4
 801c2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c2ce:	40cf      	lsrs	r7, r1
 801c2d0:	e7da      	b.n	801c288 <rshift+0x4c>
 801c2d2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c2d6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c2da:	e7c3      	b.n	801c264 <rshift+0x28>
 801c2dc:	4623      	mov	r3, r4
 801c2de:	e7e1      	b.n	801c2a4 <rshift+0x68>

0801c2e0 <__hexdig_fun>:
 801c2e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c2e4:	2b09      	cmp	r3, #9
 801c2e6:	d802      	bhi.n	801c2ee <__hexdig_fun+0xe>
 801c2e8:	3820      	subs	r0, #32
 801c2ea:	b2c0      	uxtb	r0, r0
 801c2ec:	4770      	bx	lr
 801c2ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c2f2:	2b05      	cmp	r3, #5
 801c2f4:	d801      	bhi.n	801c2fa <__hexdig_fun+0x1a>
 801c2f6:	3847      	subs	r0, #71	@ 0x47
 801c2f8:	e7f7      	b.n	801c2ea <__hexdig_fun+0xa>
 801c2fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c2fe:	2b05      	cmp	r3, #5
 801c300:	d801      	bhi.n	801c306 <__hexdig_fun+0x26>
 801c302:	3827      	subs	r0, #39	@ 0x27
 801c304:	e7f1      	b.n	801c2ea <__hexdig_fun+0xa>
 801c306:	2000      	movs	r0, #0
 801c308:	4770      	bx	lr
	...

0801c30c <__gethex>:
 801c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c310:	b085      	sub	sp, #20
 801c312:	468a      	mov	sl, r1
 801c314:	9302      	str	r3, [sp, #8]
 801c316:	680b      	ldr	r3, [r1, #0]
 801c318:	9001      	str	r0, [sp, #4]
 801c31a:	4690      	mov	r8, r2
 801c31c:	1c9c      	adds	r4, r3, #2
 801c31e:	46a1      	mov	r9, r4
 801c320:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c324:	2830      	cmp	r0, #48	@ 0x30
 801c326:	d0fa      	beq.n	801c31e <__gethex+0x12>
 801c328:	eba9 0303 	sub.w	r3, r9, r3
 801c32c:	f1a3 0b02 	sub.w	fp, r3, #2
 801c330:	f7ff ffd6 	bl	801c2e0 <__hexdig_fun>
 801c334:	4605      	mov	r5, r0
 801c336:	2800      	cmp	r0, #0
 801c338:	d168      	bne.n	801c40c <__gethex+0x100>
 801c33a:	49a0      	ldr	r1, [pc, #640]	@ (801c5bc <__gethex+0x2b0>)
 801c33c:	2201      	movs	r2, #1
 801c33e:	4648      	mov	r0, r9
 801c340:	f7fe ffbc 	bl	801b2bc <strncmp>
 801c344:	4607      	mov	r7, r0
 801c346:	2800      	cmp	r0, #0
 801c348:	d167      	bne.n	801c41a <__gethex+0x10e>
 801c34a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c34e:	4626      	mov	r6, r4
 801c350:	f7ff ffc6 	bl	801c2e0 <__hexdig_fun>
 801c354:	2800      	cmp	r0, #0
 801c356:	d062      	beq.n	801c41e <__gethex+0x112>
 801c358:	4623      	mov	r3, r4
 801c35a:	7818      	ldrb	r0, [r3, #0]
 801c35c:	2830      	cmp	r0, #48	@ 0x30
 801c35e:	4699      	mov	r9, r3
 801c360:	f103 0301 	add.w	r3, r3, #1
 801c364:	d0f9      	beq.n	801c35a <__gethex+0x4e>
 801c366:	f7ff ffbb 	bl	801c2e0 <__hexdig_fun>
 801c36a:	fab0 f580 	clz	r5, r0
 801c36e:	096d      	lsrs	r5, r5, #5
 801c370:	f04f 0b01 	mov.w	fp, #1
 801c374:	464a      	mov	r2, r9
 801c376:	4616      	mov	r6, r2
 801c378:	3201      	adds	r2, #1
 801c37a:	7830      	ldrb	r0, [r6, #0]
 801c37c:	f7ff ffb0 	bl	801c2e0 <__hexdig_fun>
 801c380:	2800      	cmp	r0, #0
 801c382:	d1f8      	bne.n	801c376 <__gethex+0x6a>
 801c384:	498d      	ldr	r1, [pc, #564]	@ (801c5bc <__gethex+0x2b0>)
 801c386:	2201      	movs	r2, #1
 801c388:	4630      	mov	r0, r6
 801c38a:	f7fe ff97 	bl	801b2bc <strncmp>
 801c38e:	2800      	cmp	r0, #0
 801c390:	d13f      	bne.n	801c412 <__gethex+0x106>
 801c392:	b944      	cbnz	r4, 801c3a6 <__gethex+0x9a>
 801c394:	1c74      	adds	r4, r6, #1
 801c396:	4622      	mov	r2, r4
 801c398:	4616      	mov	r6, r2
 801c39a:	3201      	adds	r2, #1
 801c39c:	7830      	ldrb	r0, [r6, #0]
 801c39e:	f7ff ff9f 	bl	801c2e0 <__hexdig_fun>
 801c3a2:	2800      	cmp	r0, #0
 801c3a4:	d1f8      	bne.n	801c398 <__gethex+0x8c>
 801c3a6:	1ba4      	subs	r4, r4, r6
 801c3a8:	00a7      	lsls	r7, r4, #2
 801c3aa:	7833      	ldrb	r3, [r6, #0]
 801c3ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c3b0:	2b50      	cmp	r3, #80	@ 0x50
 801c3b2:	d13e      	bne.n	801c432 <__gethex+0x126>
 801c3b4:	7873      	ldrb	r3, [r6, #1]
 801c3b6:	2b2b      	cmp	r3, #43	@ 0x2b
 801c3b8:	d033      	beq.n	801c422 <__gethex+0x116>
 801c3ba:	2b2d      	cmp	r3, #45	@ 0x2d
 801c3bc:	d034      	beq.n	801c428 <__gethex+0x11c>
 801c3be:	1c71      	adds	r1, r6, #1
 801c3c0:	2400      	movs	r4, #0
 801c3c2:	7808      	ldrb	r0, [r1, #0]
 801c3c4:	f7ff ff8c 	bl	801c2e0 <__hexdig_fun>
 801c3c8:	1e43      	subs	r3, r0, #1
 801c3ca:	b2db      	uxtb	r3, r3
 801c3cc:	2b18      	cmp	r3, #24
 801c3ce:	d830      	bhi.n	801c432 <__gethex+0x126>
 801c3d0:	f1a0 0210 	sub.w	r2, r0, #16
 801c3d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c3d8:	f7ff ff82 	bl	801c2e0 <__hexdig_fun>
 801c3dc:	f100 3cff 	add.w	ip, r0, #4294967295
 801c3e0:	fa5f fc8c 	uxtb.w	ip, ip
 801c3e4:	f1bc 0f18 	cmp.w	ip, #24
 801c3e8:	f04f 030a 	mov.w	r3, #10
 801c3ec:	d91e      	bls.n	801c42c <__gethex+0x120>
 801c3ee:	b104      	cbz	r4, 801c3f2 <__gethex+0xe6>
 801c3f0:	4252      	negs	r2, r2
 801c3f2:	4417      	add	r7, r2
 801c3f4:	f8ca 1000 	str.w	r1, [sl]
 801c3f8:	b1ed      	cbz	r5, 801c436 <__gethex+0x12a>
 801c3fa:	f1bb 0f00 	cmp.w	fp, #0
 801c3fe:	bf0c      	ite	eq
 801c400:	2506      	moveq	r5, #6
 801c402:	2500      	movne	r5, #0
 801c404:	4628      	mov	r0, r5
 801c406:	b005      	add	sp, #20
 801c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c40c:	2500      	movs	r5, #0
 801c40e:	462c      	mov	r4, r5
 801c410:	e7b0      	b.n	801c374 <__gethex+0x68>
 801c412:	2c00      	cmp	r4, #0
 801c414:	d1c7      	bne.n	801c3a6 <__gethex+0x9a>
 801c416:	4627      	mov	r7, r4
 801c418:	e7c7      	b.n	801c3aa <__gethex+0x9e>
 801c41a:	464e      	mov	r6, r9
 801c41c:	462f      	mov	r7, r5
 801c41e:	2501      	movs	r5, #1
 801c420:	e7c3      	b.n	801c3aa <__gethex+0x9e>
 801c422:	2400      	movs	r4, #0
 801c424:	1cb1      	adds	r1, r6, #2
 801c426:	e7cc      	b.n	801c3c2 <__gethex+0xb6>
 801c428:	2401      	movs	r4, #1
 801c42a:	e7fb      	b.n	801c424 <__gethex+0x118>
 801c42c:	fb03 0002 	mla	r0, r3, r2, r0
 801c430:	e7ce      	b.n	801c3d0 <__gethex+0xc4>
 801c432:	4631      	mov	r1, r6
 801c434:	e7de      	b.n	801c3f4 <__gethex+0xe8>
 801c436:	eba6 0309 	sub.w	r3, r6, r9
 801c43a:	3b01      	subs	r3, #1
 801c43c:	4629      	mov	r1, r5
 801c43e:	2b07      	cmp	r3, #7
 801c440:	dc0a      	bgt.n	801c458 <__gethex+0x14c>
 801c442:	9801      	ldr	r0, [sp, #4]
 801c444:	f000 fafc 	bl	801ca40 <_Balloc>
 801c448:	4604      	mov	r4, r0
 801c44a:	b940      	cbnz	r0, 801c45e <__gethex+0x152>
 801c44c:	4b5c      	ldr	r3, [pc, #368]	@ (801c5c0 <__gethex+0x2b4>)
 801c44e:	4602      	mov	r2, r0
 801c450:	21e4      	movs	r1, #228	@ 0xe4
 801c452:	485c      	ldr	r0, [pc, #368]	@ (801c5c4 <__gethex+0x2b8>)
 801c454:	f7ff f830 	bl	801b4b8 <__assert_func>
 801c458:	3101      	adds	r1, #1
 801c45a:	105b      	asrs	r3, r3, #1
 801c45c:	e7ef      	b.n	801c43e <__gethex+0x132>
 801c45e:	f100 0a14 	add.w	sl, r0, #20
 801c462:	2300      	movs	r3, #0
 801c464:	4655      	mov	r5, sl
 801c466:	469b      	mov	fp, r3
 801c468:	45b1      	cmp	r9, r6
 801c46a:	d337      	bcc.n	801c4dc <__gethex+0x1d0>
 801c46c:	f845 bb04 	str.w	fp, [r5], #4
 801c470:	eba5 050a 	sub.w	r5, r5, sl
 801c474:	10ad      	asrs	r5, r5, #2
 801c476:	6125      	str	r5, [r4, #16]
 801c478:	4658      	mov	r0, fp
 801c47a:	f000 fbd3 	bl	801cc24 <__hi0bits>
 801c47e:	016d      	lsls	r5, r5, #5
 801c480:	f8d8 6000 	ldr.w	r6, [r8]
 801c484:	1a2d      	subs	r5, r5, r0
 801c486:	42b5      	cmp	r5, r6
 801c488:	dd54      	ble.n	801c534 <__gethex+0x228>
 801c48a:	1bad      	subs	r5, r5, r6
 801c48c:	4629      	mov	r1, r5
 801c48e:	4620      	mov	r0, r4
 801c490:	f000 ff5f 	bl	801d352 <__any_on>
 801c494:	4681      	mov	r9, r0
 801c496:	b178      	cbz	r0, 801c4b8 <__gethex+0x1ac>
 801c498:	1e6b      	subs	r3, r5, #1
 801c49a:	1159      	asrs	r1, r3, #5
 801c49c:	f003 021f 	and.w	r2, r3, #31
 801c4a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c4a4:	f04f 0901 	mov.w	r9, #1
 801c4a8:	fa09 f202 	lsl.w	r2, r9, r2
 801c4ac:	420a      	tst	r2, r1
 801c4ae:	d003      	beq.n	801c4b8 <__gethex+0x1ac>
 801c4b0:	454b      	cmp	r3, r9
 801c4b2:	dc36      	bgt.n	801c522 <__gethex+0x216>
 801c4b4:	f04f 0902 	mov.w	r9, #2
 801c4b8:	4629      	mov	r1, r5
 801c4ba:	4620      	mov	r0, r4
 801c4bc:	f7ff febe 	bl	801c23c <rshift>
 801c4c0:	442f      	add	r7, r5
 801c4c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c4c6:	42bb      	cmp	r3, r7
 801c4c8:	da42      	bge.n	801c550 <__gethex+0x244>
 801c4ca:	9801      	ldr	r0, [sp, #4]
 801c4cc:	4621      	mov	r1, r4
 801c4ce:	f000 faf7 	bl	801cac0 <_Bfree>
 801c4d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	6013      	str	r3, [r2, #0]
 801c4d8:	25a3      	movs	r5, #163	@ 0xa3
 801c4da:	e793      	b.n	801c404 <__gethex+0xf8>
 801c4dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c4e0:	2a2e      	cmp	r2, #46	@ 0x2e
 801c4e2:	d012      	beq.n	801c50a <__gethex+0x1fe>
 801c4e4:	2b20      	cmp	r3, #32
 801c4e6:	d104      	bne.n	801c4f2 <__gethex+0x1e6>
 801c4e8:	f845 bb04 	str.w	fp, [r5], #4
 801c4ec:	f04f 0b00 	mov.w	fp, #0
 801c4f0:	465b      	mov	r3, fp
 801c4f2:	7830      	ldrb	r0, [r6, #0]
 801c4f4:	9303      	str	r3, [sp, #12]
 801c4f6:	f7ff fef3 	bl	801c2e0 <__hexdig_fun>
 801c4fa:	9b03      	ldr	r3, [sp, #12]
 801c4fc:	f000 000f 	and.w	r0, r0, #15
 801c500:	4098      	lsls	r0, r3
 801c502:	ea4b 0b00 	orr.w	fp, fp, r0
 801c506:	3304      	adds	r3, #4
 801c508:	e7ae      	b.n	801c468 <__gethex+0x15c>
 801c50a:	45b1      	cmp	r9, r6
 801c50c:	d8ea      	bhi.n	801c4e4 <__gethex+0x1d8>
 801c50e:	492b      	ldr	r1, [pc, #172]	@ (801c5bc <__gethex+0x2b0>)
 801c510:	9303      	str	r3, [sp, #12]
 801c512:	2201      	movs	r2, #1
 801c514:	4630      	mov	r0, r6
 801c516:	f7fe fed1 	bl	801b2bc <strncmp>
 801c51a:	9b03      	ldr	r3, [sp, #12]
 801c51c:	2800      	cmp	r0, #0
 801c51e:	d1e1      	bne.n	801c4e4 <__gethex+0x1d8>
 801c520:	e7a2      	b.n	801c468 <__gethex+0x15c>
 801c522:	1ea9      	subs	r1, r5, #2
 801c524:	4620      	mov	r0, r4
 801c526:	f000 ff14 	bl	801d352 <__any_on>
 801c52a:	2800      	cmp	r0, #0
 801c52c:	d0c2      	beq.n	801c4b4 <__gethex+0x1a8>
 801c52e:	f04f 0903 	mov.w	r9, #3
 801c532:	e7c1      	b.n	801c4b8 <__gethex+0x1ac>
 801c534:	da09      	bge.n	801c54a <__gethex+0x23e>
 801c536:	1b75      	subs	r5, r6, r5
 801c538:	4621      	mov	r1, r4
 801c53a:	9801      	ldr	r0, [sp, #4]
 801c53c:	462a      	mov	r2, r5
 801c53e:	f000 fccf 	bl	801cee0 <__lshift>
 801c542:	1b7f      	subs	r7, r7, r5
 801c544:	4604      	mov	r4, r0
 801c546:	f100 0a14 	add.w	sl, r0, #20
 801c54a:	f04f 0900 	mov.w	r9, #0
 801c54e:	e7b8      	b.n	801c4c2 <__gethex+0x1b6>
 801c550:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c554:	42bd      	cmp	r5, r7
 801c556:	dd6f      	ble.n	801c638 <__gethex+0x32c>
 801c558:	1bed      	subs	r5, r5, r7
 801c55a:	42ae      	cmp	r6, r5
 801c55c:	dc34      	bgt.n	801c5c8 <__gethex+0x2bc>
 801c55e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c562:	2b02      	cmp	r3, #2
 801c564:	d022      	beq.n	801c5ac <__gethex+0x2a0>
 801c566:	2b03      	cmp	r3, #3
 801c568:	d024      	beq.n	801c5b4 <__gethex+0x2a8>
 801c56a:	2b01      	cmp	r3, #1
 801c56c:	d115      	bne.n	801c59a <__gethex+0x28e>
 801c56e:	42ae      	cmp	r6, r5
 801c570:	d113      	bne.n	801c59a <__gethex+0x28e>
 801c572:	2e01      	cmp	r6, #1
 801c574:	d10b      	bne.n	801c58e <__gethex+0x282>
 801c576:	9a02      	ldr	r2, [sp, #8]
 801c578:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c57c:	6013      	str	r3, [r2, #0]
 801c57e:	2301      	movs	r3, #1
 801c580:	6123      	str	r3, [r4, #16]
 801c582:	f8ca 3000 	str.w	r3, [sl]
 801c586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c588:	2562      	movs	r5, #98	@ 0x62
 801c58a:	601c      	str	r4, [r3, #0]
 801c58c:	e73a      	b.n	801c404 <__gethex+0xf8>
 801c58e:	1e71      	subs	r1, r6, #1
 801c590:	4620      	mov	r0, r4
 801c592:	f000 fede 	bl	801d352 <__any_on>
 801c596:	2800      	cmp	r0, #0
 801c598:	d1ed      	bne.n	801c576 <__gethex+0x26a>
 801c59a:	9801      	ldr	r0, [sp, #4]
 801c59c:	4621      	mov	r1, r4
 801c59e:	f000 fa8f 	bl	801cac0 <_Bfree>
 801c5a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	6013      	str	r3, [r2, #0]
 801c5a8:	2550      	movs	r5, #80	@ 0x50
 801c5aa:	e72b      	b.n	801c404 <__gethex+0xf8>
 801c5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d1f3      	bne.n	801c59a <__gethex+0x28e>
 801c5b2:	e7e0      	b.n	801c576 <__gethex+0x26a>
 801c5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d1dd      	bne.n	801c576 <__gethex+0x26a>
 801c5ba:	e7ee      	b.n	801c59a <__gethex+0x28e>
 801c5bc:	080202d8 	.word	0x080202d8
 801c5c0:	080203e2 	.word	0x080203e2
 801c5c4:	080203f3 	.word	0x080203f3
 801c5c8:	1e6f      	subs	r7, r5, #1
 801c5ca:	f1b9 0f00 	cmp.w	r9, #0
 801c5ce:	d130      	bne.n	801c632 <__gethex+0x326>
 801c5d0:	b127      	cbz	r7, 801c5dc <__gethex+0x2d0>
 801c5d2:	4639      	mov	r1, r7
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	f000 febc 	bl	801d352 <__any_on>
 801c5da:	4681      	mov	r9, r0
 801c5dc:	117a      	asrs	r2, r7, #5
 801c5de:	2301      	movs	r3, #1
 801c5e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c5e4:	f007 071f 	and.w	r7, r7, #31
 801c5e8:	40bb      	lsls	r3, r7
 801c5ea:	4213      	tst	r3, r2
 801c5ec:	4629      	mov	r1, r5
 801c5ee:	4620      	mov	r0, r4
 801c5f0:	bf18      	it	ne
 801c5f2:	f049 0902 	orrne.w	r9, r9, #2
 801c5f6:	f7ff fe21 	bl	801c23c <rshift>
 801c5fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c5fe:	1b76      	subs	r6, r6, r5
 801c600:	2502      	movs	r5, #2
 801c602:	f1b9 0f00 	cmp.w	r9, #0
 801c606:	d047      	beq.n	801c698 <__gethex+0x38c>
 801c608:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c60c:	2b02      	cmp	r3, #2
 801c60e:	d015      	beq.n	801c63c <__gethex+0x330>
 801c610:	2b03      	cmp	r3, #3
 801c612:	d017      	beq.n	801c644 <__gethex+0x338>
 801c614:	2b01      	cmp	r3, #1
 801c616:	d109      	bne.n	801c62c <__gethex+0x320>
 801c618:	f019 0f02 	tst.w	r9, #2
 801c61c:	d006      	beq.n	801c62c <__gethex+0x320>
 801c61e:	f8da 3000 	ldr.w	r3, [sl]
 801c622:	ea49 0903 	orr.w	r9, r9, r3
 801c626:	f019 0f01 	tst.w	r9, #1
 801c62a:	d10e      	bne.n	801c64a <__gethex+0x33e>
 801c62c:	f045 0510 	orr.w	r5, r5, #16
 801c630:	e032      	b.n	801c698 <__gethex+0x38c>
 801c632:	f04f 0901 	mov.w	r9, #1
 801c636:	e7d1      	b.n	801c5dc <__gethex+0x2d0>
 801c638:	2501      	movs	r5, #1
 801c63a:	e7e2      	b.n	801c602 <__gethex+0x2f6>
 801c63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c63e:	f1c3 0301 	rsb	r3, r3, #1
 801c642:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c646:	2b00      	cmp	r3, #0
 801c648:	d0f0      	beq.n	801c62c <__gethex+0x320>
 801c64a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c64e:	f104 0314 	add.w	r3, r4, #20
 801c652:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c656:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c65a:	f04f 0c00 	mov.w	ip, #0
 801c65e:	4618      	mov	r0, r3
 801c660:	f853 2b04 	ldr.w	r2, [r3], #4
 801c664:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c668:	d01b      	beq.n	801c6a2 <__gethex+0x396>
 801c66a:	3201      	adds	r2, #1
 801c66c:	6002      	str	r2, [r0, #0]
 801c66e:	2d02      	cmp	r5, #2
 801c670:	f104 0314 	add.w	r3, r4, #20
 801c674:	d13c      	bne.n	801c6f0 <__gethex+0x3e4>
 801c676:	f8d8 2000 	ldr.w	r2, [r8]
 801c67a:	3a01      	subs	r2, #1
 801c67c:	42b2      	cmp	r2, r6
 801c67e:	d109      	bne.n	801c694 <__gethex+0x388>
 801c680:	1171      	asrs	r1, r6, #5
 801c682:	2201      	movs	r2, #1
 801c684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c688:	f006 061f 	and.w	r6, r6, #31
 801c68c:	fa02 f606 	lsl.w	r6, r2, r6
 801c690:	421e      	tst	r6, r3
 801c692:	d13a      	bne.n	801c70a <__gethex+0x3fe>
 801c694:	f045 0520 	orr.w	r5, r5, #32
 801c698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c69a:	601c      	str	r4, [r3, #0]
 801c69c:	9b02      	ldr	r3, [sp, #8]
 801c69e:	601f      	str	r7, [r3, #0]
 801c6a0:	e6b0      	b.n	801c404 <__gethex+0xf8>
 801c6a2:	4299      	cmp	r1, r3
 801c6a4:	f843 cc04 	str.w	ip, [r3, #-4]
 801c6a8:	d8d9      	bhi.n	801c65e <__gethex+0x352>
 801c6aa:	68a3      	ldr	r3, [r4, #8]
 801c6ac:	459b      	cmp	fp, r3
 801c6ae:	db17      	blt.n	801c6e0 <__gethex+0x3d4>
 801c6b0:	6861      	ldr	r1, [r4, #4]
 801c6b2:	9801      	ldr	r0, [sp, #4]
 801c6b4:	3101      	adds	r1, #1
 801c6b6:	f000 f9c3 	bl	801ca40 <_Balloc>
 801c6ba:	4681      	mov	r9, r0
 801c6bc:	b918      	cbnz	r0, 801c6c6 <__gethex+0x3ba>
 801c6be:	4b1a      	ldr	r3, [pc, #104]	@ (801c728 <__gethex+0x41c>)
 801c6c0:	4602      	mov	r2, r0
 801c6c2:	2184      	movs	r1, #132	@ 0x84
 801c6c4:	e6c5      	b.n	801c452 <__gethex+0x146>
 801c6c6:	6922      	ldr	r2, [r4, #16]
 801c6c8:	3202      	adds	r2, #2
 801c6ca:	f104 010c 	add.w	r1, r4, #12
 801c6ce:	0092      	lsls	r2, r2, #2
 801c6d0:	300c      	adds	r0, #12
 801c6d2:	f7fe feda 	bl	801b48a <memcpy>
 801c6d6:	4621      	mov	r1, r4
 801c6d8:	9801      	ldr	r0, [sp, #4]
 801c6da:	f000 f9f1 	bl	801cac0 <_Bfree>
 801c6de:	464c      	mov	r4, r9
 801c6e0:	6923      	ldr	r3, [r4, #16]
 801c6e2:	1c5a      	adds	r2, r3, #1
 801c6e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c6e8:	6122      	str	r2, [r4, #16]
 801c6ea:	2201      	movs	r2, #1
 801c6ec:	615a      	str	r2, [r3, #20]
 801c6ee:	e7be      	b.n	801c66e <__gethex+0x362>
 801c6f0:	6922      	ldr	r2, [r4, #16]
 801c6f2:	455a      	cmp	r2, fp
 801c6f4:	dd0b      	ble.n	801c70e <__gethex+0x402>
 801c6f6:	2101      	movs	r1, #1
 801c6f8:	4620      	mov	r0, r4
 801c6fa:	f7ff fd9f 	bl	801c23c <rshift>
 801c6fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c702:	3701      	adds	r7, #1
 801c704:	42bb      	cmp	r3, r7
 801c706:	f6ff aee0 	blt.w	801c4ca <__gethex+0x1be>
 801c70a:	2501      	movs	r5, #1
 801c70c:	e7c2      	b.n	801c694 <__gethex+0x388>
 801c70e:	f016 061f 	ands.w	r6, r6, #31
 801c712:	d0fa      	beq.n	801c70a <__gethex+0x3fe>
 801c714:	4453      	add	r3, sl
 801c716:	f1c6 0620 	rsb	r6, r6, #32
 801c71a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c71e:	f000 fa81 	bl	801cc24 <__hi0bits>
 801c722:	42b0      	cmp	r0, r6
 801c724:	dbe7      	blt.n	801c6f6 <__gethex+0x3ea>
 801c726:	e7f0      	b.n	801c70a <__gethex+0x3fe>
 801c728:	080203e2 	.word	0x080203e2

0801c72c <L_shift>:
 801c72c:	f1c2 0208 	rsb	r2, r2, #8
 801c730:	0092      	lsls	r2, r2, #2
 801c732:	b570      	push	{r4, r5, r6, lr}
 801c734:	f1c2 0620 	rsb	r6, r2, #32
 801c738:	6843      	ldr	r3, [r0, #4]
 801c73a:	6804      	ldr	r4, [r0, #0]
 801c73c:	fa03 f506 	lsl.w	r5, r3, r6
 801c740:	432c      	orrs	r4, r5
 801c742:	40d3      	lsrs	r3, r2
 801c744:	6004      	str	r4, [r0, #0]
 801c746:	f840 3f04 	str.w	r3, [r0, #4]!
 801c74a:	4288      	cmp	r0, r1
 801c74c:	d3f4      	bcc.n	801c738 <L_shift+0xc>
 801c74e:	bd70      	pop	{r4, r5, r6, pc}

0801c750 <__match>:
 801c750:	b530      	push	{r4, r5, lr}
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	3301      	adds	r3, #1
 801c756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c75a:	b914      	cbnz	r4, 801c762 <__match+0x12>
 801c75c:	6003      	str	r3, [r0, #0]
 801c75e:	2001      	movs	r0, #1
 801c760:	bd30      	pop	{r4, r5, pc}
 801c762:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c766:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c76a:	2d19      	cmp	r5, #25
 801c76c:	bf98      	it	ls
 801c76e:	3220      	addls	r2, #32
 801c770:	42a2      	cmp	r2, r4
 801c772:	d0f0      	beq.n	801c756 <__match+0x6>
 801c774:	2000      	movs	r0, #0
 801c776:	e7f3      	b.n	801c760 <__match+0x10>

0801c778 <__hexnan>:
 801c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c77c:	680b      	ldr	r3, [r1, #0]
 801c77e:	6801      	ldr	r1, [r0, #0]
 801c780:	115e      	asrs	r6, r3, #5
 801c782:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c786:	f013 031f 	ands.w	r3, r3, #31
 801c78a:	b087      	sub	sp, #28
 801c78c:	bf18      	it	ne
 801c78e:	3604      	addne	r6, #4
 801c790:	2500      	movs	r5, #0
 801c792:	1f37      	subs	r7, r6, #4
 801c794:	4682      	mov	sl, r0
 801c796:	4690      	mov	r8, r2
 801c798:	9301      	str	r3, [sp, #4]
 801c79a:	f846 5c04 	str.w	r5, [r6, #-4]
 801c79e:	46b9      	mov	r9, r7
 801c7a0:	463c      	mov	r4, r7
 801c7a2:	9502      	str	r5, [sp, #8]
 801c7a4:	46ab      	mov	fp, r5
 801c7a6:	784a      	ldrb	r2, [r1, #1]
 801c7a8:	1c4b      	adds	r3, r1, #1
 801c7aa:	9303      	str	r3, [sp, #12]
 801c7ac:	b342      	cbz	r2, 801c800 <__hexnan+0x88>
 801c7ae:	4610      	mov	r0, r2
 801c7b0:	9105      	str	r1, [sp, #20]
 801c7b2:	9204      	str	r2, [sp, #16]
 801c7b4:	f7ff fd94 	bl	801c2e0 <__hexdig_fun>
 801c7b8:	2800      	cmp	r0, #0
 801c7ba:	d151      	bne.n	801c860 <__hexnan+0xe8>
 801c7bc:	9a04      	ldr	r2, [sp, #16]
 801c7be:	9905      	ldr	r1, [sp, #20]
 801c7c0:	2a20      	cmp	r2, #32
 801c7c2:	d818      	bhi.n	801c7f6 <__hexnan+0x7e>
 801c7c4:	9b02      	ldr	r3, [sp, #8]
 801c7c6:	459b      	cmp	fp, r3
 801c7c8:	dd13      	ble.n	801c7f2 <__hexnan+0x7a>
 801c7ca:	454c      	cmp	r4, r9
 801c7cc:	d206      	bcs.n	801c7dc <__hexnan+0x64>
 801c7ce:	2d07      	cmp	r5, #7
 801c7d0:	dc04      	bgt.n	801c7dc <__hexnan+0x64>
 801c7d2:	462a      	mov	r2, r5
 801c7d4:	4649      	mov	r1, r9
 801c7d6:	4620      	mov	r0, r4
 801c7d8:	f7ff ffa8 	bl	801c72c <L_shift>
 801c7dc:	4544      	cmp	r4, r8
 801c7de:	d952      	bls.n	801c886 <__hexnan+0x10e>
 801c7e0:	2300      	movs	r3, #0
 801c7e2:	f1a4 0904 	sub.w	r9, r4, #4
 801c7e6:	f844 3c04 	str.w	r3, [r4, #-4]
 801c7ea:	f8cd b008 	str.w	fp, [sp, #8]
 801c7ee:	464c      	mov	r4, r9
 801c7f0:	461d      	mov	r5, r3
 801c7f2:	9903      	ldr	r1, [sp, #12]
 801c7f4:	e7d7      	b.n	801c7a6 <__hexnan+0x2e>
 801c7f6:	2a29      	cmp	r2, #41	@ 0x29
 801c7f8:	d157      	bne.n	801c8aa <__hexnan+0x132>
 801c7fa:	3102      	adds	r1, #2
 801c7fc:	f8ca 1000 	str.w	r1, [sl]
 801c800:	f1bb 0f00 	cmp.w	fp, #0
 801c804:	d051      	beq.n	801c8aa <__hexnan+0x132>
 801c806:	454c      	cmp	r4, r9
 801c808:	d206      	bcs.n	801c818 <__hexnan+0xa0>
 801c80a:	2d07      	cmp	r5, #7
 801c80c:	dc04      	bgt.n	801c818 <__hexnan+0xa0>
 801c80e:	462a      	mov	r2, r5
 801c810:	4649      	mov	r1, r9
 801c812:	4620      	mov	r0, r4
 801c814:	f7ff ff8a 	bl	801c72c <L_shift>
 801c818:	4544      	cmp	r4, r8
 801c81a:	d936      	bls.n	801c88a <__hexnan+0x112>
 801c81c:	f1a8 0204 	sub.w	r2, r8, #4
 801c820:	4623      	mov	r3, r4
 801c822:	f853 1b04 	ldr.w	r1, [r3], #4
 801c826:	f842 1f04 	str.w	r1, [r2, #4]!
 801c82a:	429f      	cmp	r7, r3
 801c82c:	d2f9      	bcs.n	801c822 <__hexnan+0xaa>
 801c82e:	1b3b      	subs	r3, r7, r4
 801c830:	f023 0303 	bic.w	r3, r3, #3
 801c834:	3304      	adds	r3, #4
 801c836:	3401      	adds	r4, #1
 801c838:	3e03      	subs	r6, #3
 801c83a:	42b4      	cmp	r4, r6
 801c83c:	bf88      	it	hi
 801c83e:	2304      	movhi	r3, #4
 801c840:	4443      	add	r3, r8
 801c842:	2200      	movs	r2, #0
 801c844:	f843 2b04 	str.w	r2, [r3], #4
 801c848:	429f      	cmp	r7, r3
 801c84a:	d2fb      	bcs.n	801c844 <__hexnan+0xcc>
 801c84c:	683b      	ldr	r3, [r7, #0]
 801c84e:	b91b      	cbnz	r3, 801c858 <__hexnan+0xe0>
 801c850:	4547      	cmp	r7, r8
 801c852:	d128      	bne.n	801c8a6 <__hexnan+0x12e>
 801c854:	2301      	movs	r3, #1
 801c856:	603b      	str	r3, [r7, #0]
 801c858:	2005      	movs	r0, #5
 801c85a:	b007      	add	sp, #28
 801c85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c860:	3501      	adds	r5, #1
 801c862:	2d08      	cmp	r5, #8
 801c864:	f10b 0b01 	add.w	fp, fp, #1
 801c868:	dd06      	ble.n	801c878 <__hexnan+0x100>
 801c86a:	4544      	cmp	r4, r8
 801c86c:	d9c1      	bls.n	801c7f2 <__hexnan+0x7a>
 801c86e:	2300      	movs	r3, #0
 801c870:	f844 3c04 	str.w	r3, [r4, #-4]
 801c874:	2501      	movs	r5, #1
 801c876:	3c04      	subs	r4, #4
 801c878:	6822      	ldr	r2, [r4, #0]
 801c87a:	f000 000f 	and.w	r0, r0, #15
 801c87e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c882:	6020      	str	r0, [r4, #0]
 801c884:	e7b5      	b.n	801c7f2 <__hexnan+0x7a>
 801c886:	2508      	movs	r5, #8
 801c888:	e7b3      	b.n	801c7f2 <__hexnan+0x7a>
 801c88a:	9b01      	ldr	r3, [sp, #4]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d0dd      	beq.n	801c84c <__hexnan+0xd4>
 801c890:	f1c3 0320 	rsb	r3, r3, #32
 801c894:	f04f 32ff 	mov.w	r2, #4294967295
 801c898:	40da      	lsrs	r2, r3
 801c89a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c89e:	4013      	ands	r3, r2
 801c8a0:	f846 3c04 	str.w	r3, [r6, #-4]
 801c8a4:	e7d2      	b.n	801c84c <__hexnan+0xd4>
 801c8a6:	3f04      	subs	r7, #4
 801c8a8:	e7d0      	b.n	801c84c <__hexnan+0xd4>
 801c8aa:	2004      	movs	r0, #4
 801c8ac:	e7d5      	b.n	801c85a <__hexnan+0xe2>
	...

0801c8b0 <malloc>:
 801c8b0:	4b02      	ldr	r3, [pc, #8]	@ (801c8bc <malloc+0xc>)
 801c8b2:	4601      	mov	r1, r0
 801c8b4:	6818      	ldr	r0, [r3, #0]
 801c8b6:	f000 b825 	b.w	801c904 <_malloc_r>
 801c8ba:	bf00      	nop
 801c8bc:	200002cc 	.word	0x200002cc

0801c8c0 <sbrk_aligned>:
 801c8c0:	b570      	push	{r4, r5, r6, lr}
 801c8c2:	4e0f      	ldr	r6, [pc, #60]	@ (801c900 <sbrk_aligned+0x40>)
 801c8c4:	460c      	mov	r4, r1
 801c8c6:	6831      	ldr	r1, [r6, #0]
 801c8c8:	4605      	mov	r5, r0
 801c8ca:	b911      	cbnz	r1, 801c8d2 <sbrk_aligned+0x12>
 801c8cc:	f001 fbfc 	bl	801e0c8 <_sbrk_r>
 801c8d0:	6030      	str	r0, [r6, #0]
 801c8d2:	4621      	mov	r1, r4
 801c8d4:	4628      	mov	r0, r5
 801c8d6:	f001 fbf7 	bl	801e0c8 <_sbrk_r>
 801c8da:	1c43      	adds	r3, r0, #1
 801c8dc:	d103      	bne.n	801c8e6 <sbrk_aligned+0x26>
 801c8de:	f04f 34ff 	mov.w	r4, #4294967295
 801c8e2:	4620      	mov	r0, r4
 801c8e4:	bd70      	pop	{r4, r5, r6, pc}
 801c8e6:	1cc4      	adds	r4, r0, #3
 801c8e8:	f024 0403 	bic.w	r4, r4, #3
 801c8ec:	42a0      	cmp	r0, r4
 801c8ee:	d0f8      	beq.n	801c8e2 <sbrk_aligned+0x22>
 801c8f0:	1a21      	subs	r1, r4, r0
 801c8f2:	4628      	mov	r0, r5
 801c8f4:	f001 fbe8 	bl	801e0c8 <_sbrk_r>
 801c8f8:	3001      	adds	r0, #1
 801c8fa:	d1f2      	bne.n	801c8e2 <sbrk_aligned+0x22>
 801c8fc:	e7ef      	b.n	801c8de <sbrk_aligned+0x1e>
 801c8fe:	bf00      	nop
 801c900:	2000b1d4 	.word	0x2000b1d4

0801c904 <_malloc_r>:
 801c904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c908:	1ccd      	adds	r5, r1, #3
 801c90a:	f025 0503 	bic.w	r5, r5, #3
 801c90e:	3508      	adds	r5, #8
 801c910:	2d0c      	cmp	r5, #12
 801c912:	bf38      	it	cc
 801c914:	250c      	movcc	r5, #12
 801c916:	2d00      	cmp	r5, #0
 801c918:	4606      	mov	r6, r0
 801c91a:	db01      	blt.n	801c920 <_malloc_r+0x1c>
 801c91c:	42a9      	cmp	r1, r5
 801c91e:	d904      	bls.n	801c92a <_malloc_r+0x26>
 801c920:	230c      	movs	r3, #12
 801c922:	6033      	str	r3, [r6, #0]
 801c924:	2000      	movs	r0, #0
 801c926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c92a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ca00 <_malloc_r+0xfc>
 801c92e:	f000 f87b 	bl	801ca28 <__malloc_lock>
 801c932:	f8d8 3000 	ldr.w	r3, [r8]
 801c936:	461c      	mov	r4, r3
 801c938:	bb44      	cbnz	r4, 801c98c <_malloc_r+0x88>
 801c93a:	4629      	mov	r1, r5
 801c93c:	4630      	mov	r0, r6
 801c93e:	f7ff ffbf 	bl	801c8c0 <sbrk_aligned>
 801c942:	1c43      	adds	r3, r0, #1
 801c944:	4604      	mov	r4, r0
 801c946:	d158      	bne.n	801c9fa <_malloc_r+0xf6>
 801c948:	f8d8 4000 	ldr.w	r4, [r8]
 801c94c:	4627      	mov	r7, r4
 801c94e:	2f00      	cmp	r7, #0
 801c950:	d143      	bne.n	801c9da <_malloc_r+0xd6>
 801c952:	2c00      	cmp	r4, #0
 801c954:	d04b      	beq.n	801c9ee <_malloc_r+0xea>
 801c956:	6823      	ldr	r3, [r4, #0]
 801c958:	4639      	mov	r1, r7
 801c95a:	4630      	mov	r0, r6
 801c95c:	eb04 0903 	add.w	r9, r4, r3
 801c960:	f001 fbb2 	bl	801e0c8 <_sbrk_r>
 801c964:	4581      	cmp	r9, r0
 801c966:	d142      	bne.n	801c9ee <_malloc_r+0xea>
 801c968:	6821      	ldr	r1, [r4, #0]
 801c96a:	1a6d      	subs	r5, r5, r1
 801c96c:	4629      	mov	r1, r5
 801c96e:	4630      	mov	r0, r6
 801c970:	f7ff ffa6 	bl	801c8c0 <sbrk_aligned>
 801c974:	3001      	adds	r0, #1
 801c976:	d03a      	beq.n	801c9ee <_malloc_r+0xea>
 801c978:	6823      	ldr	r3, [r4, #0]
 801c97a:	442b      	add	r3, r5
 801c97c:	6023      	str	r3, [r4, #0]
 801c97e:	f8d8 3000 	ldr.w	r3, [r8]
 801c982:	685a      	ldr	r2, [r3, #4]
 801c984:	bb62      	cbnz	r2, 801c9e0 <_malloc_r+0xdc>
 801c986:	f8c8 7000 	str.w	r7, [r8]
 801c98a:	e00f      	b.n	801c9ac <_malloc_r+0xa8>
 801c98c:	6822      	ldr	r2, [r4, #0]
 801c98e:	1b52      	subs	r2, r2, r5
 801c990:	d420      	bmi.n	801c9d4 <_malloc_r+0xd0>
 801c992:	2a0b      	cmp	r2, #11
 801c994:	d917      	bls.n	801c9c6 <_malloc_r+0xc2>
 801c996:	1961      	adds	r1, r4, r5
 801c998:	42a3      	cmp	r3, r4
 801c99a:	6025      	str	r5, [r4, #0]
 801c99c:	bf18      	it	ne
 801c99e:	6059      	strne	r1, [r3, #4]
 801c9a0:	6863      	ldr	r3, [r4, #4]
 801c9a2:	bf08      	it	eq
 801c9a4:	f8c8 1000 	streq.w	r1, [r8]
 801c9a8:	5162      	str	r2, [r4, r5]
 801c9aa:	604b      	str	r3, [r1, #4]
 801c9ac:	4630      	mov	r0, r6
 801c9ae:	f000 f841 	bl	801ca34 <__malloc_unlock>
 801c9b2:	f104 000b 	add.w	r0, r4, #11
 801c9b6:	1d23      	adds	r3, r4, #4
 801c9b8:	f020 0007 	bic.w	r0, r0, #7
 801c9bc:	1ac2      	subs	r2, r0, r3
 801c9be:	bf1c      	itt	ne
 801c9c0:	1a1b      	subne	r3, r3, r0
 801c9c2:	50a3      	strne	r3, [r4, r2]
 801c9c4:	e7af      	b.n	801c926 <_malloc_r+0x22>
 801c9c6:	6862      	ldr	r2, [r4, #4]
 801c9c8:	42a3      	cmp	r3, r4
 801c9ca:	bf0c      	ite	eq
 801c9cc:	f8c8 2000 	streq.w	r2, [r8]
 801c9d0:	605a      	strne	r2, [r3, #4]
 801c9d2:	e7eb      	b.n	801c9ac <_malloc_r+0xa8>
 801c9d4:	4623      	mov	r3, r4
 801c9d6:	6864      	ldr	r4, [r4, #4]
 801c9d8:	e7ae      	b.n	801c938 <_malloc_r+0x34>
 801c9da:	463c      	mov	r4, r7
 801c9dc:	687f      	ldr	r7, [r7, #4]
 801c9de:	e7b6      	b.n	801c94e <_malloc_r+0x4a>
 801c9e0:	461a      	mov	r2, r3
 801c9e2:	685b      	ldr	r3, [r3, #4]
 801c9e4:	42a3      	cmp	r3, r4
 801c9e6:	d1fb      	bne.n	801c9e0 <_malloc_r+0xdc>
 801c9e8:	2300      	movs	r3, #0
 801c9ea:	6053      	str	r3, [r2, #4]
 801c9ec:	e7de      	b.n	801c9ac <_malloc_r+0xa8>
 801c9ee:	230c      	movs	r3, #12
 801c9f0:	6033      	str	r3, [r6, #0]
 801c9f2:	4630      	mov	r0, r6
 801c9f4:	f000 f81e 	bl	801ca34 <__malloc_unlock>
 801c9f8:	e794      	b.n	801c924 <_malloc_r+0x20>
 801c9fa:	6005      	str	r5, [r0, #0]
 801c9fc:	e7d6      	b.n	801c9ac <_malloc_r+0xa8>
 801c9fe:	bf00      	nop
 801ca00:	2000b1d8 	.word	0x2000b1d8

0801ca04 <__ascii_mbtowc>:
 801ca04:	b082      	sub	sp, #8
 801ca06:	b901      	cbnz	r1, 801ca0a <__ascii_mbtowc+0x6>
 801ca08:	a901      	add	r1, sp, #4
 801ca0a:	b142      	cbz	r2, 801ca1e <__ascii_mbtowc+0x1a>
 801ca0c:	b14b      	cbz	r3, 801ca22 <__ascii_mbtowc+0x1e>
 801ca0e:	7813      	ldrb	r3, [r2, #0]
 801ca10:	600b      	str	r3, [r1, #0]
 801ca12:	7812      	ldrb	r2, [r2, #0]
 801ca14:	1e10      	subs	r0, r2, #0
 801ca16:	bf18      	it	ne
 801ca18:	2001      	movne	r0, #1
 801ca1a:	b002      	add	sp, #8
 801ca1c:	4770      	bx	lr
 801ca1e:	4610      	mov	r0, r2
 801ca20:	e7fb      	b.n	801ca1a <__ascii_mbtowc+0x16>
 801ca22:	f06f 0001 	mvn.w	r0, #1
 801ca26:	e7f8      	b.n	801ca1a <__ascii_mbtowc+0x16>

0801ca28 <__malloc_lock>:
 801ca28:	4801      	ldr	r0, [pc, #4]	@ (801ca30 <__malloc_lock+0x8>)
 801ca2a:	f7fe bd2c 	b.w	801b486 <__retarget_lock_acquire_recursive>
 801ca2e:	bf00      	nop
 801ca30:	2000b1d0 	.word	0x2000b1d0

0801ca34 <__malloc_unlock>:
 801ca34:	4801      	ldr	r0, [pc, #4]	@ (801ca3c <__malloc_unlock+0x8>)
 801ca36:	f7fe bd27 	b.w	801b488 <__retarget_lock_release_recursive>
 801ca3a:	bf00      	nop
 801ca3c:	2000b1d0 	.word	0x2000b1d0

0801ca40 <_Balloc>:
 801ca40:	b570      	push	{r4, r5, r6, lr}
 801ca42:	69c6      	ldr	r6, [r0, #28]
 801ca44:	4604      	mov	r4, r0
 801ca46:	460d      	mov	r5, r1
 801ca48:	b976      	cbnz	r6, 801ca68 <_Balloc+0x28>
 801ca4a:	2010      	movs	r0, #16
 801ca4c:	f7ff ff30 	bl	801c8b0 <malloc>
 801ca50:	4602      	mov	r2, r0
 801ca52:	61e0      	str	r0, [r4, #28]
 801ca54:	b920      	cbnz	r0, 801ca60 <_Balloc+0x20>
 801ca56:	4b18      	ldr	r3, [pc, #96]	@ (801cab8 <_Balloc+0x78>)
 801ca58:	4818      	ldr	r0, [pc, #96]	@ (801cabc <_Balloc+0x7c>)
 801ca5a:	216b      	movs	r1, #107	@ 0x6b
 801ca5c:	f7fe fd2c 	bl	801b4b8 <__assert_func>
 801ca60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ca64:	6006      	str	r6, [r0, #0]
 801ca66:	60c6      	str	r6, [r0, #12]
 801ca68:	69e6      	ldr	r6, [r4, #28]
 801ca6a:	68f3      	ldr	r3, [r6, #12]
 801ca6c:	b183      	cbz	r3, 801ca90 <_Balloc+0x50>
 801ca6e:	69e3      	ldr	r3, [r4, #28]
 801ca70:	68db      	ldr	r3, [r3, #12]
 801ca72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ca76:	b9b8      	cbnz	r0, 801caa8 <_Balloc+0x68>
 801ca78:	2101      	movs	r1, #1
 801ca7a:	fa01 f605 	lsl.w	r6, r1, r5
 801ca7e:	1d72      	adds	r2, r6, #5
 801ca80:	0092      	lsls	r2, r2, #2
 801ca82:	4620      	mov	r0, r4
 801ca84:	f001 fb37 	bl	801e0f6 <_calloc_r>
 801ca88:	b160      	cbz	r0, 801caa4 <_Balloc+0x64>
 801ca8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ca8e:	e00e      	b.n	801caae <_Balloc+0x6e>
 801ca90:	2221      	movs	r2, #33	@ 0x21
 801ca92:	2104      	movs	r1, #4
 801ca94:	4620      	mov	r0, r4
 801ca96:	f001 fb2e 	bl	801e0f6 <_calloc_r>
 801ca9a:	69e3      	ldr	r3, [r4, #28]
 801ca9c:	60f0      	str	r0, [r6, #12]
 801ca9e:	68db      	ldr	r3, [r3, #12]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d1e4      	bne.n	801ca6e <_Balloc+0x2e>
 801caa4:	2000      	movs	r0, #0
 801caa6:	bd70      	pop	{r4, r5, r6, pc}
 801caa8:	6802      	ldr	r2, [r0, #0]
 801caaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801caae:	2300      	movs	r3, #0
 801cab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cab4:	e7f7      	b.n	801caa6 <_Balloc+0x66>
 801cab6:	bf00      	nop
 801cab8:	08020373 	.word	0x08020373
 801cabc:	08020453 	.word	0x08020453

0801cac0 <_Bfree>:
 801cac0:	b570      	push	{r4, r5, r6, lr}
 801cac2:	69c6      	ldr	r6, [r0, #28]
 801cac4:	4605      	mov	r5, r0
 801cac6:	460c      	mov	r4, r1
 801cac8:	b976      	cbnz	r6, 801cae8 <_Bfree+0x28>
 801caca:	2010      	movs	r0, #16
 801cacc:	f7ff fef0 	bl	801c8b0 <malloc>
 801cad0:	4602      	mov	r2, r0
 801cad2:	61e8      	str	r0, [r5, #28]
 801cad4:	b920      	cbnz	r0, 801cae0 <_Bfree+0x20>
 801cad6:	4b09      	ldr	r3, [pc, #36]	@ (801cafc <_Bfree+0x3c>)
 801cad8:	4809      	ldr	r0, [pc, #36]	@ (801cb00 <_Bfree+0x40>)
 801cada:	218f      	movs	r1, #143	@ 0x8f
 801cadc:	f7fe fcec 	bl	801b4b8 <__assert_func>
 801cae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cae4:	6006      	str	r6, [r0, #0]
 801cae6:	60c6      	str	r6, [r0, #12]
 801cae8:	b13c      	cbz	r4, 801cafa <_Bfree+0x3a>
 801caea:	69eb      	ldr	r3, [r5, #28]
 801caec:	6862      	ldr	r2, [r4, #4]
 801caee:	68db      	ldr	r3, [r3, #12]
 801caf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801caf4:	6021      	str	r1, [r4, #0]
 801caf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cafa:	bd70      	pop	{r4, r5, r6, pc}
 801cafc:	08020373 	.word	0x08020373
 801cb00:	08020453 	.word	0x08020453

0801cb04 <__multadd>:
 801cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb08:	690d      	ldr	r5, [r1, #16]
 801cb0a:	4607      	mov	r7, r0
 801cb0c:	460c      	mov	r4, r1
 801cb0e:	461e      	mov	r6, r3
 801cb10:	f101 0c14 	add.w	ip, r1, #20
 801cb14:	2000      	movs	r0, #0
 801cb16:	f8dc 3000 	ldr.w	r3, [ip]
 801cb1a:	b299      	uxth	r1, r3
 801cb1c:	fb02 6101 	mla	r1, r2, r1, r6
 801cb20:	0c1e      	lsrs	r6, r3, #16
 801cb22:	0c0b      	lsrs	r3, r1, #16
 801cb24:	fb02 3306 	mla	r3, r2, r6, r3
 801cb28:	b289      	uxth	r1, r1
 801cb2a:	3001      	adds	r0, #1
 801cb2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cb30:	4285      	cmp	r5, r0
 801cb32:	f84c 1b04 	str.w	r1, [ip], #4
 801cb36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cb3a:	dcec      	bgt.n	801cb16 <__multadd+0x12>
 801cb3c:	b30e      	cbz	r6, 801cb82 <__multadd+0x7e>
 801cb3e:	68a3      	ldr	r3, [r4, #8]
 801cb40:	42ab      	cmp	r3, r5
 801cb42:	dc19      	bgt.n	801cb78 <__multadd+0x74>
 801cb44:	6861      	ldr	r1, [r4, #4]
 801cb46:	4638      	mov	r0, r7
 801cb48:	3101      	adds	r1, #1
 801cb4a:	f7ff ff79 	bl	801ca40 <_Balloc>
 801cb4e:	4680      	mov	r8, r0
 801cb50:	b928      	cbnz	r0, 801cb5e <__multadd+0x5a>
 801cb52:	4602      	mov	r2, r0
 801cb54:	4b0c      	ldr	r3, [pc, #48]	@ (801cb88 <__multadd+0x84>)
 801cb56:	480d      	ldr	r0, [pc, #52]	@ (801cb8c <__multadd+0x88>)
 801cb58:	21ba      	movs	r1, #186	@ 0xba
 801cb5a:	f7fe fcad 	bl	801b4b8 <__assert_func>
 801cb5e:	6922      	ldr	r2, [r4, #16]
 801cb60:	3202      	adds	r2, #2
 801cb62:	f104 010c 	add.w	r1, r4, #12
 801cb66:	0092      	lsls	r2, r2, #2
 801cb68:	300c      	adds	r0, #12
 801cb6a:	f7fe fc8e 	bl	801b48a <memcpy>
 801cb6e:	4621      	mov	r1, r4
 801cb70:	4638      	mov	r0, r7
 801cb72:	f7ff ffa5 	bl	801cac0 <_Bfree>
 801cb76:	4644      	mov	r4, r8
 801cb78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cb7c:	3501      	adds	r5, #1
 801cb7e:	615e      	str	r6, [r3, #20]
 801cb80:	6125      	str	r5, [r4, #16]
 801cb82:	4620      	mov	r0, r4
 801cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb88:	080203e2 	.word	0x080203e2
 801cb8c:	08020453 	.word	0x08020453

0801cb90 <__s2b>:
 801cb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb94:	460c      	mov	r4, r1
 801cb96:	4615      	mov	r5, r2
 801cb98:	461f      	mov	r7, r3
 801cb9a:	2209      	movs	r2, #9
 801cb9c:	3308      	adds	r3, #8
 801cb9e:	4606      	mov	r6, r0
 801cba0:	fb93 f3f2 	sdiv	r3, r3, r2
 801cba4:	2100      	movs	r1, #0
 801cba6:	2201      	movs	r2, #1
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	db09      	blt.n	801cbc0 <__s2b+0x30>
 801cbac:	4630      	mov	r0, r6
 801cbae:	f7ff ff47 	bl	801ca40 <_Balloc>
 801cbb2:	b940      	cbnz	r0, 801cbc6 <__s2b+0x36>
 801cbb4:	4602      	mov	r2, r0
 801cbb6:	4b19      	ldr	r3, [pc, #100]	@ (801cc1c <__s2b+0x8c>)
 801cbb8:	4819      	ldr	r0, [pc, #100]	@ (801cc20 <__s2b+0x90>)
 801cbba:	21d3      	movs	r1, #211	@ 0xd3
 801cbbc:	f7fe fc7c 	bl	801b4b8 <__assert_func>
 801cbc0:	0052      	lsls	r2, r2, #1
 801cbc2:	3101      	adds	r1, #1
 801cbc4:	e7f0      	b.n	801cba8 <__s2b+0x18>
 801cbc6:	9b08      	ldr	r3, [sp, #32]
 801cbc8:	6143      	str	r3, [r0, #20]
 801cbca:	2d09      	cmp	r5, #9
 801cbcc:	f04f 0301 	mov.w	r3, #1
 801cbd0:	6103      	str	r3, [r0, #16]
 801cbd2:	dd16      	ble.n	801cc02 <__s2b+0x72>
 801cbd4:	f104 0909 	add.w	r9, r4, #9
 801cbd8:	46c8      	mov	r8, r9
 801cbda:	442c      	add	r4, r5
 801cbdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cbe0:	4601      	mov	r1, r0
 801cbe2:	3b30      	subs	r3, #48	@ 0x30
 801cbe4:	220a      	movs	r2, #10
 801cbe6:	4630      	mov	r0, r6
 801cbe8:	f7ff ff8c 	bl	801cb04 <__multadd>
 801cbec:	45a0      	cmp	r8, r4
 801cbee:	d1f5      	bne.n	801cbdc <__s2b+0x4c>
 801cbf0:	f1a5 0408 	sub.w	r4, r5, #8
 801cbf4:	444c      	add	r4, r9
 801cbf6:	1b2d      	subs	r5, r5, r4
 801cbf8:	1963      	adds	r3, r4, r5
 801cbfa:	42bb      	cmp	r3, r7
 801cbfc:	db04      	blt.n	801cc08 <__s2b+0x78>
 801cbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc02:	340a      	adds	r4, #10
 801cc04:	2509      	movs	r5, #9
 801cc06:	e7f6      	b.n	801cbf6 <__s2b+0x66>
 801cc08:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cc0c:	4601      	mov	r1, r0
 801cc0e:	3b30      	subs	r3, #48	@ 0x30
 801cc10:	220a      	movs	r2, #10
 801cc12:	4630      	mov	r0, r6
 801cc14:	f7ff ff76 	bl	801cb04 <__multadd>
 801cc18:	e7ee      	b.n	801cbf8 <__s2b+0x68>
 801cc1a:	bf00      	nop
 801cc1c:	080203e2 	.word	0x080203e2
 801cc20:	08020453 	.word	0x08020453

0801cc24 <__hi0bits>:
 801cc24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cc28:	4603      	mov	r3, r0
 801cc2a:	bf36      	itet	cc
 801cc2c:	0403      	lslcc	r3, r0, #16
 801cc2e:	2000      	movcs	r0, #0
 801cc30:	2010      	movcc	r0, #16
 801cc32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cc36:	bf3c      	itt	cc
 801cc38:	021b      	lslcc	r3, r3, #8
 801cc3a:	3008      	addcc	r0, #8
 801cc3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cc40:	bf3c      	itt	cc
 801cc42:	011b      	lslcc	r3, r3, #4
 801cc44:	3004      	addcc	r0, #4
 801cc46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cc4a:	bf3c      	itt	cc
 801cc4c:	009b      	lslcc	r3, r3, #2
 801cc4e:	3002      	addcc	r0, #2
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	db05      	blt.n	801cc60 <__hi0bits+0x3c>
 801cc54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801cc58:	f100 0001 	add.w	r0, r0, #1
 801cc5c:	bf08      	it	eq
 801cc5e:	2020      	moveq	r0, #32
 801cc60:	4770      	bx	lr

0801cc62 <__lo0bits>:
 801cc62:	6803      	ldr	r3, [r0, #0]
 801cc64:	4602      	mov	r2, r0
 801cc66:	f013 0007 	ands.w	r0, r3, #7
 801cc6a:	d00b      	beq.n	801cc84 <__lo0bits+0x22>
 801cc6c:	07d9      	lsls	r1, r3, #31
 801cc6e:	d421      	bmi.n	801ccb4 <__lo0bits+0x52>
 801cc70:	0798      	lsls	r0, r3, #30
 801cc72:	bf49      	itett	mi
 801cc74:	085b      	lsrmi	r3, r3, #1
 801cc76:	089b      	lsrpl	r3, r3, #2
 801cc78:	2001      	movmi	r0, #1
 801cc7a:	6013      	strmi	r3, [r2, #0]
 801cc7c:	bf5c      	itt	pl
 801cc7e:	6013      	strpl	r3, [r2, #0]
 801cc80:	2002      	movpl	r0, #2
 801cc82:	4770      	bx	lr
 801cc84:	b299      	uxth	r1, r3
 801cc86:	b909      	cbnz	r1, 801cc8c <__lo0bits+0x2a>
 801cc88:	0c1b      	lsrs	r3, r3, #16
 801cc8a:	2010      	movs	r0, #16
 801cc8c:	b2d9      	uxtb	r1, r3
 801cc8e:	b909      	cbnz	r1, 801cc94 <__lo0bits+0x32>
 801cc90:	3008      	adds	r0, #8
 801cc92:	0a1b      	lsrs	r3, r3, #8
 801cc94:	0719      	lsls	r1, r3, #28
 801cc96:	bf04      	itt	eq
 801cc98:	091b      	lsreq	r3, r3, #4
 801cc9a:	3004      	addeq	r0, #4
 801cc9c:	0799      	lsls	r1, r3, #30
 801cc9e:	bf04      	itt	eq
 801cca0:	089b      	lsreq	r3, r3, #2
 801cca2:	3002      	addeq	r0, #2
 801cca4:	07d9      	lsls	r1, r3, #31
 801cca6:	d403      	bmi.n	801ccb0 <__lo0bits+0x4e>
 801cca8:	085b      	lsrs	r3, r3, #1
 801ccaa:	f100 0001 	add.w	r0, r0, #1
 801ccae:	d003      	beq.n	801ccb8 <__lo0bits+0x56>
 801ccb0:	6013      	str	r3, [r2, #0]
 801ccb2:	4770      	bx	lr
 801ccb4:	2000      	movs	r0, #0
 801ccb6:	4770      	bx	lr
 801ccb8:	2020      	movs	r0, #32
 801ccba:	4770      	bx	lr

0801ccbc <__i2b>:
 801ccbc:	b510      	push	{r4, lr}
 801ccbe:	460c      	mov	r4, r1
 801ccc0:	2101      	movs	r1, #1
 801ccc2:	f7ff febd 	bl	801ca40 <_Balloc>
 801ccc6:	4602      	mov	r2, r0
 801ccc8:	b928      	cbnz	r0, 801ccd6 <__i2b+0x1a>
 801ccca:	4b05      	ldr	r3, [pc, #20]	@ (801cce0 <__i2b+0x24>)
 801cccc:	4805      	ldr	r0, [pc, #20]	@ (801cce4 <__i2b+0x28>)
 801ccce:	f240 1145 	movw	r1, #325	@ 0x145
 801ccd2:	f7fe fbf1 	bl	801b4b8 <__assert_func>
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	6144      	str	r4, [r0, #20]
 801ccda:	6103      	str	r3, [r0, #16]
 801ccdc:	bd10      	pop	{r4, pc}
 801ccde:	bf00      	nop
 801cce0:	080203e2 	.word	0x080203e2
 801cce4:	08020453 	.word	0x08020453

0801cce8 <__multiply>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	4617      	mov	r7, r2
 801ccee:	690a      	ldr	r2, [r1, #16]
 801ccf0:	693b      	ldr	r3, [r7, #16]
 801ccf2:	429a      	cmp	r2, r3
 801ccf4:	bfa8      	it	ge
 801ccf6:	463b      	movge	r3, r7
 801ccf8:	4689      	mov	r9, r1
 801ccfa:	bfa4      	itt	ge
 801ccfc:	460f      	movge	r7, r1
 801ccfe:	4699      	movge	r9, r3
 801cd00:	693d      	ldr	r5, [r7, #16]
 801cd02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cd06:	68bb      	ldr	r3, [r7, #8]
 801cd08:	6879      	ldr	r1, [r7, #4]
 801cd0a:	eb05 060a 	add.w	r6, r5, sl
 801cd0e:	42b3      	cmp	r3, r6
 801cd10:	b085      	sub	sp, #20
 801cd12:	bfb8      	it	lt
 801cd14:	3101      	addlt	r1, #1
 801cd16:	f7ff fe93 	bl	801ca40 <_Balloc>
 801cd1a:	b930      	cbnz	r0, 801cd2a <__multiply+0x42>
 801cd1c:	4602      	mov	r2, r0
 801cd1e:	4b41      	ldr	r3, [pc, #260]	@ (801ce24 <__multiply+0x13c>)
 801cd20:	4841      	ldr	r0, [pc, #260]	@ (801ce28 <__multiply+0x140>)
 801cd22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cd26:	f7fe fbc7 	bl	801b4b8 <__assert_func>
 801cd2a:	f100 0414 	add.w	r4, r0, #20
 801cd2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801cd32:	4623      	mov	r3, r4
 801cd34:	2200      	movs	r2, #0
 801cd36:	4573      	cmp	r3, lr
 801cd38:	d320      	bcc.n	801cd7c <__multiply+0x94>
 801cd3a:	f107 0814 	add.w	r8, r7, #20
 801cd3e:	f109 0114 	add.w	r1, r9, #20
 801cd42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801cd46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801cd4a:	9302      	str	r3, [sp, #8]
 801cd4c:	1beb      	subs	r3, r5, r7
 801cd4e:	3b15      	subs	r3, #21
 801cd50:	f023 0303 	bic.w	r3, r3, #3
 801cd54:	3304      	adds	r3, #4
 801cd56:	3715      	adds	r7, #21
 801cd58:	42bd      	cmp	r5, r7
 801cd5a:	bf38      	it	cc
 801cd5c:	2304      	movcc	r3, #4
 801cd5e:	9301      	str	r3, [sp, #4]
 801cd60:	9b02      	ldr	r3, [sp, #8]
 801cd62:	9103      	str	r1, [sp, #12]
 801cd64:	428b      	cmp	r3, r1
 801cd66:	d80c      	bhi.n	801cd82 <__multiply+0x9a>
 801cd68:	2e00      	cmp	r6, #0
 801cd6a:	dd03      	ble.n	801cd74 <__multiply+0x8c>
 801cd6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d055      	beq.n	801ce20 <__multiply+0x138>
 801cd74:	6106      	str	r6, [r0, #16]
 801cd76:	b005      	add	sp, #20
 801cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd7c:	f843 2b04 	str.w	r2, [r3], #4
 801cd80:	e7d9      	b.n	801cd36 <__multiply+0x4e>
 801cd82:	f8b1 a000 	ldrh.w	sl, [r1]
 801cd86:	f1ba 0f00 	cmp.w	sl, #0
 801cd8a:	d01f      	beq.n	801cdcc <__multiply+0xe4>
 801cd8c:	46c4      	mov	ip, r8
 801cd8e:	46a1      	mov	r9, r4
 801cd90:	2700      	movs	r7, #0
 801cd92:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cd96:	f8d9 3000 	ldr.w	r3, [r9]
 801cd9a:	fa1f fb82 	uxth.w	fp, r2
 801cd9e:	b29b      	uxth	r3, r3
 801cda0:	fb0a 330b 	mla	r3, sl, fp, r3
 801cda4:	443b      	add	r3, r7
 801cda6:	f8d9 7000 	ldr.w	r7, [r9]
 801cdaa:	0c12      	lsrs	r2, r2, #16
 801cdac:	0c3f      	lsrs	r7, r7, #16
 801cdae:	fb0a 7202 	mla	r2, sl, r2, r7
 801cdb2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801cdb6:	b29b      	uxth	r3, r3
 801cdb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cdbc:	4565      	cmp	r5, ip
 801cdbe:	f849 3b04 	str.w	r3, [r9], #4
 801cdc2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801cdc6:	d8e4      	bhi.n	801cd92 <__multiply+0xaa>
 801cdc8:	9b01      	ldr	r3, [sp, #4]
 801cdca:	50e7      	str	r7, [r4, r3]
 801cdcc:	9b03      	ldr	r3, [sp, #12]
 801cdce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801cdd2:	3104      	adds	r1, #4
 801cdd4:	f1b9 0f00 	cmp.w	r9, #0
 801cdd8:	d020      	beq.n	801ce1c <__multiply+0x134>
 801cdda:	6823      	ldr	r3, [r4, #0]
 801cddc:	4647      	mov	r7, r8
 801cdde:	46a4      	mov	ip, r4
 801cde0:	f04f 0a00 	mov.w	sl, #0
 801cde4:	f8b7 b000 	ldrh.w	fp, [r7]
 801cde8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801cdec:	fb09 220b 	mla	r2, r9, fp, r2
 801cdf0:	4452      	add	r2, sl
 801cdf2:	b29b      	uxth	r3, r3
 801cdf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cdf8:	f84c 3b04 	str.w	r3, [ip], #4
 801cdfc:	f857 3b04 	ldr.w	r3, [r7], #4
 801ce00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ce04:	f8bc 3000 	ldrh.w	r3, [ip]
 801ce08:	fb09 330a 	mla	r3, r9, sl, r3
 801ce0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801ce10:	42bd      	cmp	r5, r7
 801ce12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ce16:	d8e5      	bhi.n	801cde4 <__multiply+0xfc>
 801ce18:	9a01      	ldr	r2, [sp, #4]
 801ce1a:	50a3      	str	r3, [r4, r2]
 801ce1c:	3404      	adds	r4, #4
 801ce1e:	e79f      	b.n	801cd60 <__multiply+0x78>
 801ce20:	3e01      	subs	r6, #1
 801ce22:	e7a1      	b.n	801cd68 <__multiply+0x80>
 801ce24:	080203e2 	.word	0x080203e2
 801ce28:	08020453 	.word	0x08020453

0801ce2c <__pow5mult>:
 801ce2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce30:	4615      	mov	r5, r2
 801ce32:	f012 0203 	ands.w	r2, r2, #3
 801ce36:	4607      	mov	r7, r0
 801ce38:	460e      	mov	r6, r1
 801ce3a:	d007      	beq.n	801ce4c <__pow5mult+0x20>
 801ce3c:	4c25      	ldr	r4, [pc, #148]	@ (801ced4 <__pow5mult+0xa8>)
 801ce3e:	3a01      	subs	r2, #1
 801ce40:	2300      	movs	r3, #0
 801ce42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ce46:	f7ff fe5d 	bl	801cb04 <__multadd>
 801ce4a:	4606      	mov	r6, r0
 801ce4c:	10ad      	asrs	r5, r5, #2
 801ce4e:	d03d      	beq.n	801cecc <__pow5mult+0xa0>
 801ce50:	69fc      	ldr	r4, [r7, #28]
 801ce52:	b97c      	cbnz	r4, 801ce74 <__pow5mult+0x48>
 801ce54:	2010      	movs	r0, #16
 801ce56:	f7ff fd2b 	bl	801c8b0 <malloc>
 801ce5a:	4602      	mov	r2, r0
 801ce5c:	61f8      	str	r0, [r7, #28]
 801ce5e:	b928      	cbnz	r0, 801ce6c <__pow5mult+0x40>
 801ce60:	4b1d      	ldr	r3, [pc, #116]	@ (801ced8 <__pow5mult+0xac>)
 801ce62:	481e      	ldr	r0, [pc, #120]	@ (801cedc <__pow5mult+0xb0>)
 801ce64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ce68:	f7fe fb26 	bl	801b4b8 <__assert_func>
 801ce6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ce70:	6004      	str	r4, [r0, #0]
 801ce72:	60c4      	str	r4, [r0, #12]
 801ce74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ce78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ce7c:	b94c      	cbnz	r4, 801ce92 <__pow5mult+0x66>
 801ce7e:	f240 2171 	movw	r1, #625	@ 0x271
 801ce82:	4638      	mov	r0, r7
 801ce84:	f7ff ff1a 	bl	801ccbc <__i2b>
 801ce88:	2300      	movs	r3, #0
 801ce8a:	f8c8 0008 	str.w	r0, [r8, #8]
 801ce8e:	4604      	mov	r4, r0
 801ce90:	6003      	str	r3, [r0, #0]
 801ce92:	f04f 0900 	mov.w	r9, #0
 801ce96:	07eb      	lsls	r3, r5, #31
 801ce98:	d50a      	bpl.n	801ceb0 <__pow5mult+0x84>
 801ce9a:	4631      	mov	r1, r6
 801ce9c:	4622      	mov	r2, r4
 801ce9e:	4638      	mov	r0, r7
 801cea0:	f7ff ff22 	bl	801cce8 <__multiply>
 801cea4:	4631      	mov	r1, r6
 801cea6:	4680      	mov	r8, r0
 801cea8:	4638      	mov	r0, r7
 801ceaa:	f7ff fe09 	bl	801cac0 <_Bfree>
 801ceae:	4646      	mov	r6, r8
 801ceb0:	106d      	asrs	r5, r5, #1
 801ceb2:	d00b      	beq.n	801cecc <__pow5mult+0xa0>
 801ceb4:	6820      	ldr	r0, [r4, #0]
 801ceb6:	b938      	cbnz	r0, 801cec8 <__pow5mult+0x9c>
 801ceb8:	4622      	mov	r2, r4
 801ceba:	4621      	mov	r1, r4
 801cebc:	4638      	mov	r0, r7
 801cebe:	f7ff ff13 	bl	801cce8 <__multiply>
 801cec2:	6020      	str	r0, [r4, #0]
 801cec4:	f8c0 9000 	str.w	r9, [r0]
 801cec8:	4604      	mov	r4, r0
 801ceca:	e7e4      	b.n	801ce96 <__pow5mult+0x6a>
 801cecc:	4630      	mov	r0, r6
 801cece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ced2:	bf00      	nop
 801ced4:	08020a3c 	.word	0x08020a3c
 801ced8:	08020373 	.word	0x08020373
 801cedc:	08020453 	.word	0x08020453

0801cee0 <__lshift>:
 801cee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cee4:	460c      	mov	r4, r1
 801cee6:	6849      	ldr	r1, [r1, #4]
 801cee8:	6923      	ldr	r3, [r4, #16]
 801ceea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ceee:	68a3      	ldr	r3, [r4, #8]
 801cef0:	4607      	mov	r7, r0
 801cef2:	4691      	mov	r9, r2
 801cef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cef8:	f108 0601 	add.w	r6, r8, #1
 801cefc:	42b3      	cmp	r3, r6
 801cefe:	db0b      	blt.n	801cf18 <__lshift+0x38>
 801cf00:	4638      	mov	r0, r7
 801cf02:	f7ff fd9d 	bl	801ca40 <_Balloc>
 801cf06:	4605      	mov	r5, r0
 801cf08:	b948      	cbnz	r0, 801cf1e <__lshift+0x3e>
 801cf0a:	4602      	mov	r2, r0
 801cf0c:	4b28      	ldr	r3, [pc, #160]	@ (801cfb0 <__lshift+0xd0>)
 801cf0e:	4829      	ldr	r0, [pc, #164]	@ (801cfb4 <__lshift+0xd4>)
 801cf10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801cf14:	f7fe fad0 	bl	801b4b8 <__assert_func>
 801cf18:	3101      	adds	r1, #1
 801cf1a:	005b      	lsls	r3, r3, #1
 801cf1c:	e7ee      	b.n	801cefc <__lshift+0x1c>
 801cf1e:	2300      	movs	r3, #0
 801cf20:	f100 0114 	add.w	r1, r0, #20
 801cf24:	f100 0210 	add.w	r2, r0, #16
 801cf28:	4618      	mov	r0, r3
 801cf2a:	4553      	cmp	r3, sl
 801cf2c:	db33      	blt.n	801cf96 <__lshift+0xb6>
 801cf2e:	6920      	ldr	r0, [r4, #16]
 801cf30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cf34:	f104 0314 	add.w	r3, r4, #20
 801cf38:	f019 091f 	ands.w	r9, r9, #31
 801cf3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cf40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cf44:	d02b      	beq.n	801cf9e <__lshift+0xbe>
 801cf46:	f1c9 0e20 	rsb	lr, r9, #32
 801cf4a:	468a      	mov	sl, r1
 801cf4c:	2200      	movs	r2, #0
 801cf4e:	6818      	ldr	r0, [r3, #0]
 801cf50:	fa00 f009 	lsl.w	r0, r0, r9
 801cf54:	4310      	orrs	r0, r2
 801cf56:	f84a 0b04 	str.w	r0, [sl], #4
 801cf5a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf5e:	459c      	cmp	ip, r3
 801cf60:	fa22 f20e 	lsr.w	r2, r2, lr
 801cf64:	d8f3      	bhi.n	801cf4e <__lshift+0x6e>
 801cf66:	ebac 0304 	sub.w	r3, ip, r4
 801cf6a:	3b15      	subs	r3, #21
 801cf6c:	f023 0303 	bic.w	r3, r3, #3
 801cf70:	3304      	adds	r3, #4
 801cf72:	f104 0015 	add.w	r0, r4, #21
 801cf76:	4560      	cmp	r0, ip
 801cf78:	bf88      	it	hi
 801cf7a:	2304      	movhi	r3, #4
 801cf7c:	50ca      	str	r2, [r1, r3]
 801cf7e:	b10a      	cbz	r2, 801cf84 <__lshift+0xa4>
 801cf80:	f108 0602 	add.w	r6, r8, #2
 801cf84:	3e01      	subs	r6, #1
 801cf86:	4638      	mov	r0, r7
 801cf88:	612e      	str	r6, [r5, #16]
 801cf8a:	4621      	mov	r1, r4
 801cf8c:	f7ff fd98 	bl	801cac0 <_Bfree>
 801cf90:	4628      	mov	r0, r5
 801cf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf96:	f842 0f04 	str.w	r0, [r2, #4]!
 801cf9a:	3301      	adds	r3, #1
 801cf9c:	e7c5      	b.n	801cf2a <__lshift+0x4a>
 801cf9e:	3904      	subs	r1, #4
 801cfa0:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfa4:	f841 2f04 	str.w	r2, [r1, #4]!
 801cfa8:	459c      	cmp	ip, r3
 801cfaa:	d8f9      	bhi.n	801cfa0 <__lshift+0xc0>
 801cfac:	e7ea      	b.n	801cf84 <__lshift+0xa4>
 801cfae:	bf00      	nop
 801cfb0:	080203e2 	.word	0x080203e2
 801cfb4:	08020453 	.word	0x08020453

0801cfb8 <__mcmp>:
 801cfb8:	690a      	ldr	r2, [r1, #16]
 801cfba:	4603      	mov	r3, r0
 801cfbc:	6900      	ldr	r0, [r0, #16]
 801cfbe:	1a80      	subs	r0, r0, r2
 801cfc0:	b530      	push	{r4, r5, lr}
 801cfc2:	d10e      	bne.n	801cfe2 <__mcmp+0x2a>
 801cfc4:	3314      	adds	r3, #20
 801cfc6:	3114      	adds	r1, #20
 801cfc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801cfcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801cfd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cfd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cfd8:	4295      	cmp	r5, r2
 801cfda:	d003      	beq.n	801cfe4 <__mcmp+0x2c>
 801cfdc:	d205      	bcs.n	801cfea <__mcmp+0x32>
 801cfde:	f04f 30ff 	mov.w	r0, #4294967295
 801cfe2:	bd30      	pop	{r4, r5, pc}
 801cfe4:	42a3      	cmp	r3, r4
 801cfe6:	d3f3      	bcc.n	801cfd0 <__mcmp+0x18>
 801cfe8:	e7fb      	b.n	801cfe2 <__mcmp+0x2a>
 801cfea:	2001      	movs	r0, #1
 801cfec:	e7f9      	b.n	801cfe2 <__mcmp+0x2a>
	...

0801cff0 <__mdiff>:
 801cff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff4:	4689      	mov	r9, r1
 801cff6:	4606      	mov	r6, r0
 801cff8:	4611      	mov	r1, r2
 801cffa:	4648      	mov	r0, r9
 801cffc:	4614      	mov	r4, r2
 801cffe:	f7ff ffdb 	bl	801cfb8 <__mcmp>
 801d002:	1e05      	subs	r5, r0, #0
 801d004:	d112      	bne.n	801d02c <__mdiff+0x3c>
 801d006:	4629      	mov	r1, r5
 801d008:	4630      	mov	r0, r6
 801d00a:	f7ff fd19 	bl	801ca40 <_Balloc>
 801d00e:	4602      	mov	r2, r0
 801d010:	b928      	cbnz	r0, 801d01e <__mdiff+0x2e>
 801d012:	4b3f      	ldr	r3, [pc, #252]	@ (801d110 <__mdiff+0x120>)
 801d014:	f240 2137 	movw	r1, #567	@ 0x237
 801d018:	483e      	ldr	r0, [pc, #248]	@ (801d114 <__mdiff+0x124>)
 801d01a:	f7fe fa4d 	bl	801b4b8 <__assert_func>
 801d01e:	2301      	movs	r3, #1
 801d020:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d024:	4610      	mov	r0, r2
 801d026:	b003      	add	sp, #12
 801d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d02c:	bfbc      	itt	lt
 801d02e:	464b      	movlt	r3, r9
 801d030:	46a1      	movlt	r9, r4
 801d032:	4630      	mov	r0, r6
 801d034:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d038:	bfba      	itte	lt
 801d03a:	461c      	movlt	r4, r3
 801d03c:	2501      	movlt	r5, #1
 801d03e:	2500      	movge	r5, #0
 801d040:	f7ff fcfe 	bl	801ca40 <_Balloc>
 801d044:	4602      	mov	r2, r0
 801d046:	b918      	cbnz	r0, 801d050 <__mdiff+0x60>
 801d048:	4b31      	ldr	r3, [pc, #196]	@ (801d110 <__mdiff+0x120>)
 801d04a:	f240 2145 	movw	r1, #581	@ 0x245
 801d04e:	e7e3      	b.n	801d018 <__mdiff+0x28>
 801d050:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d054:	6926      	ldr	r6, [r4, #16]
 801d056:	60c5      	str	r5, [r0, #12]
 801d058:	f109 0310 	add.w	r3, r9, #16
 801d05c:	f109 0514 	add.w	r5, r9, #20
 801d060:	f104 0e14 	add.w	lr, r4, #20
 801d064:	f100 0b14 	add.w	fp, r0, #20
 801d068:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d06c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d070:	9301      	str	r3, [sp, #4]
 801d072:	46d9      	mov	r9, fp
 801d074:	f04f 0c00 	mov.w	ip, #0
 801d078:	9b01      	ldr	r3, [sp, #4]
 801d07a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d07e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d082:	9301      	str	r3, [sp, #4]
 801d084:	fa1f f38a 	uxth.w	r3, sl
 801d088:	4619      	mov	r1, r3
 801d08a:	b283      	uxth	r3, r0
 801d08c:	1acb      	subs	r3, r1, r3
 801d08e:	0c00      	lsrs	r0, r0, #16
 801d090:	4463      	add	r3, ip
 801d092:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d096:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d0a0:	4576      	cmp	r6, lr
 801d0a2:	f849 3b04 	str.w	r3, [r9], #4
 801d0a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d0aa:	d8e5      	bhi.n	801d078 <__mdiff+0x88>
 801d0ac:	1b33      	subs	r3, r6, r4
 801d0ae:	3b15      	subs	r3, #21
 801d0b0:	f023 0303 	bic.w	r3, r3, #3
 801d0b4:	3415      	adds	r4, #21
 801d0b6:	3304      	adds	r3, #4
 801d0b8:	42a6      	cmp	r6, r4
 801d0ba:	bf38      	it	cc
 801d0bc:	2304      	movcc	r3, #4
 801d0be:	441d      	add	r5, r3
 801d0c0:	445b      	add	r3, fp
 801d0c2:	461e      	mov	r6, r3
 801d0c4:	462c      	mov	r4, r5
 801d0c6:	4544      	cmp	r4, r8
 801d0c8:	d30e      	bcc.n	801d0e8 <__mdiff+0xf8>
 801d0ca:	f108 0103 	add.w	r1, r8, #3
 801d0ce:	1b49      	subs	r1, r1, r5
 801d0d0:	f021 0103 	bic.w	r1, r1, #3
 801d0d4:	3d03      	subs	r5, #3
 801d0d6:	45a8      	cmp	r8, r5
 801d0d8:	bf38      	it	cc
 801d0da:	2100      	movcc	r1, #0
 801d0dc:	440b      	add	r3, r1
 801d0de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d0e2:	b191      	cbz	r1, 801d10a <__mdiff+0x11a>
 801d0e4:	6117      	str	r7, [r2, #16]
 801d0e6:	e79d      	b.n	801d024 <__mdiff+0x34>
 801d0e8:	f854 1b04 	ldr.w	r1, [r4], #4
 801d0ec:	46e6      	mov	lr, ip
 801d0ee:	0c08      	lsrs	r0, r1, #16
 801d0f0:	fa1c fc81 	uxtah	ip, ip, r1
 801d0f4:	4471      	add	r1, lr
 801d0f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d0fa:	b289      	uxth	r1, r1
 801d0fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d100:	f846 1b04 	str.w	r1, [r6], #4
 801d104:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d108:	e7dd      	b.n	801d0c6 <__mdiff+0xd6>
 801d10a:	3f01      	subs	r7, #1
 801d10c:	e7e7      	b.n	801d0de <__mdiff+0xee>
 801d10e:	bf00      	nop
 801d110:	080203e2 	.word	0x080203e2
 801d114:	08020453 	.word	0x08020453

0801d118 <__ulp>:
 801d118:	b082      	sub	sp, #8
 801d11a:	ed8d 0b00 	vstr	d0, [sp]
 801d11e:	9a01      	ldr	r2, [sp, #4]
 801d120:	4b0f      	ldr	r3, [pc, #60]	@ (801d160 <__ulp+0x48>)
 801d122:	4013      	ands	r3, r2
 801d124:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d128:	2b00      	cmp	r3, #0
 801d12a:	dc08      	bgt.n	801d13e <__ulp+0x26>
 801d12c:	425b      	negs	r3, r3
 801d12e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d132:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d136:	da04      	bge.n	801d142 <__ulp+0x2a>
 801d138:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d13c:	4113      	asrs	r3, r2
 801d13e:	2200      	movs	r2, #0
 801d140:	e008      	b.n	801d154 <__ulp+0x3c>
 801d142:	f1a2 0314 	sub.w	r3, r2, #20
 801d146:	2b1e      	cmp	r3, #30
 801d148:	bfda      	itte	le
 801d14a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d14e:	40da      	lsrle	r2, r3
 801d150:	2201      	movgt	r2, #1
 801d152:	2300      	movs	r3, #0
 801d154:	4619      	mov	r1, r3
 801d156:	4610      	mov	r0, r2
 801d158:	ec41 0b10 	vmov	d0, r0, r1
 801d15c:	b002      	add	sp, #8
 801d15e:	4770      	bx	lr
 801d160:	7ff00000 	.word	0x7ff00000

0801d164 <__b2d>:
 801d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d168:	6906      	ldr	r6, [r0, #16]
 801d16a:	f100 0814 	add.w	r8, r0, #20
 801d16e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d172:	1f37      	subs	r7, r6, #4
 801d174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d178:	4610      	mov	r0, r2
 801d17a:	f7ff fd53 	bl	801cc24 <__hi0bits>
 801d17e:	f1c0 0320 	rsb	r3, r0, #32
 801d182:	280a      	cmp	r0, #10
 801d184:	600b      	str	r3, [r1, #0]
 801d186:	491b      	ldr	r1, [pc, #108]	@ (801d1f4 <__b2d+0x90>)
 801d188:	dc15      	bgt.n	801d1b6 <__b2d+0x52>
 801d18a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d18e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d192:	45b8      	cmp	r8, r7
 801d194:	ea43 0501 	orr.w	r5, r3, r1
 801d198:	bf34      	ite	cc
 801d19a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d19e:	2300      	movcs	r3, #0
 801d1a0:	3015      	adds	r0, #21
 801d1a2:	fa02 f000 	lsl.w	r0, r2, r0
 801d1a6:	fa23 f30c 	lsr.w	r3, r3, ip
 801d1aa:	4303      	orrs	r3, r0
 801d1ac:	461c      	mov	r4, r3
 801d1ae:	ec45 4b10 	vmov	d0, r4, r5
 801d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1b6:	45b8      	cmp	r8, r7
 801d1b8:	bf3a      	itte	cc
 801d1ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d1be:	f1a6 0708 	subcc.w	r7, r6, #8
 801d1c2:	2300      	movcs	r3, #0
 801d1c4:	380b      	subs	r0, #11
 801d1c6:	d012      	beq.n	801d1ee <__b2d+0x8a>
 801d1c8:	f1c0 0120 	rsb	r1, r0, #32
 801d1cc:	fa23 f401 	lsr.w	r4, r3, r1
 801d1d0:	4082      	lsls	r2, r0
 801d1d2:	4322      	orrs	r2, r4
 801d1d4:	4547      	cmp	r7, r8
 801d1d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d1da:	bf8c      	ite	hi
 801d1dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d1e0:	2200      	movls	r2, #0
 801d1e2:	4083      	lsls	r3, r0
 801d1e4:	40ca      	lsrs	r2, r1
 801d1e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d1ea:	4313      	orrs	r3, r2
 801d1ec:	e7de      	b.n	801d1ac <__b2d+0x48>
 801d1ee:	ea42 0501 	orr.w	r5, r2, r1
 801d1f2:	e7db      	b.n	801d1ac <__b2d+0x48>
 801d1f4:	3ff00000 	.word	0x3ff00000

0801d1f8 <__d2b>:
 801d1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d1fc:	460f      	mov	r7, r1
 801d1fe:	2101      	movs	r1, #1
 801d200:	ec59 8b10 	vmov	r8, r9, d0
 801d204:	4616      	mov	r6, r2
 801d206:	f7ff fc1b 	bl	801ca40 <_Balloc>
 801d20a:	4604      	mov	r4, r0
 801d20c:	b930      	cbnz	r0, 801d21c <__d2b+0x24>
 801d20e:	4602      	mov	r2, r0
 801d210:	4b23      	ldr	r3, [pc, #140]	@ (801d2a0 <__d2b+0xa8>)
 801d212:	4824      	ldr	r0, [pc, #144]	@ (801d2a4 <__d2b+0xac>)
 801d214:	f240 310f 	movw	r1, #783	@ 0x30f
 801d218:	f7fe f94e 	bl	801b4b8 <__assert_func>
 801d21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d224:	b10d      	cbz	r5, 801d22a <__d2b+0x32>
 801d226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d22a:	9301      	str	r3, [sp, #4]
 801d22c:	f1b8 0300 	subs.w	r3, r8, #0
 801d230:	d023      	beq.n	801d27a <__d2b+0x82>
 801d232:	4668      	mov	r0, sp
 801d234:	9300      	str	r3, [sp, #0]
 801d236:	f7ff fd14 	bl	801cc62 <__lo0bits>
 801d23a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d23e:	b1d0      	cbz	r0, 801d276 <__d2b+0x7e>
 801d240:	f1c0 0320 	rsb	r3, r0, #32
 801d244:	fa02 f303 	lsl.w	r3, r2, r3
 801d248:	430b      	orrs	r3, r1
 801d24a:	40c2      	lsrs	r2, r0
 801d24c:	6163      	str	r3, [r4, #20]
 801d24e:	9201      	str	r2, [sp, #4]
 801d250:	9b01      	ldr	r3, [sp, #4]
 801d252:	61a3      	str	r3, [r4, #24]
 801d254:	2b00      	cmp	r3, #0
 801d256:	bf0c      	ite	eq
 801d258:	2201      	moveq	r2, #1
 801d25a:	2202      	movne	r2, #2
 801d25c:	6122      	str	r2, [r4, #16]
 801d25e:	b1a5      	cbz	r5, 801d28a <__d2b+0x92>
 801d260:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d264:	4405      	add	r5, r0
 801d266:	603d      	str	r5, [r7, #0]
 801d268:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d26c:	6030      	str	r0, [r6, #0]
 801d26e:	4620      	mov	r0, r4
 801d270:	b003      	add	sp, #12
 801d272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d276:	6161      	str	r1, [r4, #20]
 801d278:	e7ea      	b.n	801d250 <__d2b+0x58>
 801d27a:	a801      	add	r0, sp, #4
 801d27c:	f7ff fcf1 	bl	801cc62 <__lo0bits>
 801d280:	9b01      	ldr	r3, [sp, #4]
 801d282:	6163      	str	r3, [r4, #20]
 801d284:	3020      	adds	r0, #32
 801d286:	2201      	movs	r2, #1
 801d288:	e7e8      	b.n	801d25c <__d2b+0x64>
 801d28a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d28e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d292:	6038      	str	r0, [r7, #0]
 801d294:	6918      	ldr	r0, [r3, #16]
 801d296:	f7ff fcc5 	bl	801cc24 <__hi0bits>
 801d29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d29e:	e7e5      	b.n	801d26c <__d2b+0x74>
 801d2a0:	080203e2 	.word	0x080203e2
 801d2a4:	08020453 	.word	0x08020453

0801d2a8 <__ratio>:
 801d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2ac:	b085      	sub	sp, #20
 801d2ae:	e9cd 1000 	strd	r1, r0, [sp]
 801d2b2:	a902      	add	r1, sp, #8
 801d2b4:	f7ff ff56 	bl	801d164 <__b2d>
 801d2b8:	9800      	ldr	r0, [sp, #0]
 801d2ba:	a903      	add	r1, sp, #12
 801d2bc:	ec55 4b10 	vmov	r4, r5, d0
 801d2c0:	f7ff ff50 	bl	801d164 <__b2d>
 801d2c4:	9b01      	ldr	r3, [sp, #4]
 801d2c6:	6919      	ldr	r1, [r3, #16]
 801d2c8:	9b00      	ldr	r3, [sp, #0]
 801d2ca:	691b      	ldr	r3, [r3, #16]
 801d2cc:	1ac9      	subs	r1, r1, r3
 801d2ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d2d2:	1a9b      	subs	r3, r3, r2
 801d2d4:	ec5b ab10 	vmov	sl, fp, d0
 801d2d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	bfce      	itee	gt
 801d2e0:	462a      	movgt	r2, r5
 801d2e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d2e6:	465a      	movle	r2, fp
 801d2e8:	462f      	mov	r7, r5
 801d2ea:	46d9      	mov	r9, fp
 801d2ec:	bfcc      	ite	gt
 801d2ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d2f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d2f6:	464b      	mov	r3, r9
 801d2f8:	4652      	mov	r2, sl
 801d2fa:	4620      	mov	r0, r4
 801d2fc:	4639      	mov	r1, r7
 801d2fe:	f7e3 faa5 	bl	800084c <__aeabi_ddiv>
 801d302:	ec41 0b10 	vmov	d0, r0, r1
 801d306:	b005      	add	sp, #20
 801d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d30c <__copybits>:
 801d30c:	3901      	subs	r1, #1
 801d30e:	b570      	push	{r4, r5, r6, lr}
 801d310:	1149      	asrs	r1, r1, #5
 801d312:	6914      	ldr	r4, [r2, #16]
 801d314:	3101      	adds	r1, #1
 801d316:	f102 0314 	add.w	r3, r2, #20
 801d31a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d31e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d322:	1f05      	subs	r5, r0, #4
 801d324:	42a3      	cmp	r3, r4
 801d326:	d30c      	bcc.n	801d342 <__copybits+0x36>
 801d328:	1aa3      	subs	r3, r4, r2
 801d32a:	3b11      	subs	r3, #17
 801d32c:	f023 0303 	bic.w	r3, r3, #3
 801d330:	3211      	adds	r2, #17
 801d332:	42a2      	cmp	r2, r4
 801d334:	bf88      	it	hi
 801d336:	2300      	movhi	r3, #0
 801d338:	4418      	add	r0, r3
 801d33a:	2300      	movs	r3, #0
 801d33c:	4288      	cmp	r0, r1
 801d33e:	d305      	bcc.n	801d34c <__copybits+0x40>
 801d340:	bd70      	pop	{r4, r5, r6, pc}
 801d342:	f853 6b04 	ldr.w	r6, [r3], #4
 801d346:	f845 6f04 	str.w	r6, [r5, #4]!
 801d34a:	e7eb      	b.n	801d324 <__copybits+0x18>
 801d34c:	f840 3b04 	str.w	r3, [r0], #4
 801d350:	e7f4      	b.n	801d33c <__copybits+0x30>

0801d352 <__any_on>:
 801d352:	f100 0214 	add.w	r2, r0, #20
 801d356:	6900      	ldr	r0, [r0, #16]
 801d358:	114b      	asrs	r3, r1, #5
 801d35a:	4298      	cmp	r0, r3
 801d35c:	b510      	push	{r4, lr}
 801d35e:	db11      	blt.n	801d384 <__any_on+0x32>
 801d360:	dd0a      	ble.n	801d378 <__any_on+0x26>
 801d362:	f011 011f 	ands.w	r1, r1, #31
 801d366:	d007      	beq.n	801d378 <__any_on+0x26>
 801d368:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d36c:	fa24 f001 	lsr.w	r0, r4, r1
 801d370:	fa00 f101 	lsl.w	r1, r0, r1
 801d374:	428c      	cmp	r4, r1
 801d376:	d10b      	bne.n	801d390 <__any_on+0x3e>
 801d378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d37c:	4293      	cmp	r3, r2
 801d37e:	d803      	bhi.n	801d388 <__any_on+0x36>
 801d380:	2000      	movs	r0, #0
 801d382:	bd10      	pop	{r4, pc}
 801d384:	4603      	mov	r3, r0
 801d386:	e7f7      	b.n	801d378 <__any_on+0x26>
 801d388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d38c:	2900      	cmp	r1, #0
 801d38e:	d0f5      	beq.n	801d37c <__any_on+0x2a>
 801d390:	2001      	movs	r0, #1
 801d392:	e7f6      	b.n	801d382 <__any_on+0x30>

0801d394 <_realloc_r>:
 801d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d398:	4607      	mov	r7, r0
 801d39a:	4614      	mov	r4, r2
 801d39c:	460d      	mov	r5, r1
 801d39e:	b921      	cbnz	r1, 801d3aa <_realloc_r+0x16>
 801d3a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3a4:	4611      	mov	r1, r2
 801d3a6:	f7ff baad 	b.w	801c904 <_malloc_r>
 801d3aa:	b92a      	cbnz	r2, 801d3b8 <_realloc_r+0x24>
 801d3ac:	f7fe fefc 	bl	801c1a8 <_free_r>
 801d3b0:	4625      	mov	r5, r4
 801d3b2:	4628      	mov	r0, r5
 801d3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3b8:	f000 feb1 	bl	801e11e <_malloc_usable_size_r>
 801d3bc:	4284      	cmp	r4, r0
 801d3be:	4606      	mov	r6, r0
 801d3c0:	d802      	bhi.n	801d3c8 <_realloc_r+0x34>
 801d3c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d3c6:	d8f4      	bhi.n	801d3b2 <_realloc_r+0x1e>
 801d3c8:	4621      	mov	r1, r4
 801d3ca:	4638      	mov	r0, r7
 801d3cc:	f7ff fa9a 	bl	801c904 <_malloc_r>
 801d3d0:	4680      	mov	r8, r0
 801d3d2:	b908      	cbnz	r0, 801d3d8 <_realloc_r+0x44>
 801d3d4:	4645      	mov	r5, r8
 801d3d6:	e7ec      	b.n	801d3b2 <_realloc_r+0x1e>
 801d3d8:	42b4      	cmp	r4, r6
 801d3da:	4622      	mov	r2, r4
 801d3dc:	4629      	mov	r1, r5
 801d3de:	bf28      	it	cs
 801d3e0:	4632      	movcs	r2, r6
 801d3e2:	f7fe f852 	bl	801b48a <memcpy>
 801d3e6:	4629      	mov	r1, r5
 801d3e8:	4638      	mov	r0, r7
 801d3ea:	f7fe fedd 	bl	801c1a8 <_free_r>
 801d3ee:	e7f1      	b.n	801d3d4 <_realloc_r+0x40>

0801d3f0 <__ascii_wctomb>:
 801d3f0:	4603      	mov	r3, r0
 801d3f2:	4608      	mov	r0, r1
 801d3f4:	b141      	cbz	r1, 801d408 <__ascii_wctomb+0x18>
 801d3f6:	2aff      	cmp	r2, #255	@ 0xff
 801d3f8:	d904      	bls.n	801d404 <__ascii_wctomb+0x14>
 801d3fa:	228a      	movs	r2, #138	@ 0x8a
 801d3fc:	601a      	str	r2, [r3, #0]
 801d3fe:	f04f 30ff 	mov.w	r0, #4294967295
 801d402:	4770      	bx	lr
 801d404:	700a      	strb	r2, [r1, #0]
 801d406:	2001      	movs	r0, #1
 801d408:	4770      	bx	lr

0801d40a <__ssputs_r>:
 801d40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d40e:	688e      	ldr	r6, [r1, #8]
 801d410:	461f      	mov	r7, r3
 801d412:	42be      	cmp	r6, r7
 801d414:	680b      	ldr	r3, [r1, #0]
 801d416:	4682      	mov	sl, r0
 801d418:	460c      	mov	r4, r1
 801d41a:	4690      	mov	r8, r2
 801d41c:	d82d      	bhi.n	801d47a <__ssputs_r+0x70>
 801d41e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d422:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d426:	d026      	beq.n	801d476 <__ssputs_r+0x6c>
 801d428:	6965      	ldr	r5, [r4, #20]
 801d42a:	6909      	ldr	r1, [r1, #16]
 801d42c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d430:	eba3 0901 	sub.w	r9, r3, r1
 801d434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d438:	1c7b      	adds	r3, r7, #1
 801d43a:	444b      	add	r3, r9
 801d43c:	106d      	asrs	r5, r5, #1
 801d43e:	429d      	cmp	r5, r3
 801d440:	bf38      	it	cc
 801d442:	461d      	movcc	r5, r3
 801d444:	0553      	lsls	r3, r2, #21
 801d446:	d527      	bpl.n	801d498 <__ssputs_r+0x8e>
 801d448:	4629      	mov	r1, r5
 801d44a:	f7ff fa5b 	bl	801c904 <_malloc_r>
 801d44e:	4606      	mov	r6, r0
 801d450:	b360      	cbz	r0, 801d4ac <__ssputs_r+0xa2>
 801d452:	6921      	ldr	r1, [r4, #16]
 801d454:	464a      	mov	r2, r9
 801d456:	f7fe f818 	bl	801b48a <memcpy>
 801d45a:	89a3      	ldrh	r3, [r4, #12]
 801d45c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d464:	81a3      	strh	r3, [r4, #12]
 801d466:	6126      	str	r6, [r4, #16]
 801d468:	6165      	str	r5, [r4, #20]
 801d46a:	444e      	add	r6, r9
 801d46c:	eba5 0509 	sub.w	r5, r5, r9
 801d470:	6026      	str	r6, [r4, #0]
 801d472:	60a5      	str	r5, [r4, #8]
 801d474:	463e      	mov	r6, r7
 801d476:	42be      	cmp	r6, r7
 801d478:	d900      	bls.n	801d47c <__ssputs_r+0x72>
 801d47a:	463e      	mov	r6, r7
 801d47c:	6820      	ldr	r0, [r4, #0]
 801d47e:	4632      	mov	r2, r6
 801d480:	4641      	mov	r1, r8
 801d482:	f7fd fef9 	bl	801b278 <memmove>
 801d486:	68a3      	ldr	r3, [r4, #8]
 801d488:	1b9b      	subs	r3, r3, r6
 801d48a:	60a3      	str	r3, [r4, #8]
 801d48c:	6823      	ldr	r3, [r4, #0]
 801d48e:	4433      	add	r3, r6
 801d490:	6023      	str	r3, [r4, #0]
 801d492:	2000      	movs	r0, #0
 801d494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d498:	462a      	mov	r2, r5
 801d49a:	f7ff ff7b 	bl	801d394 <_realloc_r>
 801d49e:	4606      	mov	r6, r0
 801d4a0:	2800      	cmp	r0, #0
 801d4a2:	d1e0      	bne.n	801d466 <__ssputs_r+0x5c>
 801d4a4:	6921      	ldr	r1, [r4, #16]
 801d4a6:	4650      	mov	r0, sl
 801d4a8:	f7fe fe7e 	bl	801c1a8 <_free_r>
 801d4ac:	230c      	movs	r3, #12
 801d4ae:	f8ca 3000 	str.w	r3, [sl]
 801d4b2:	89a3      	ldrh	r3, [r4, #12]
 801d4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4b8:	81a3      	strh	r3, [r4, #12]
 801d4ba:	f04f 30ff 	mov.w	r0, #4294967295
 801d4be:	e7e9      	b.n	801d494 <__ssputs_r+0x8a>

0801d4c0 <_svfiprintf_r>:
 801d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4c4:	4698      	mov	r8, r3
 801d4c6:	898b      	ldrh	r3, [r1, #12]
 801d4c8:	061b      	lsls	r3, r3, #24
 801d4ca:	b09d      	sub	sp, #116	@ 0x74
 801d4cc:	4607      	mov	r7, r0
 801d4ce:	460d      	mov	r5, r1
 801d4d0:	4614      	mov	r4, r2
 801d4d2:	d510      	bpl.n	801d4f6 <_svfiprintf_r+0x36>
 801d4d4:	690b      	ldr	r3, [r1, #16]
 801d4d6:	b973      	cbnz	r3, 801d4f6 <_svfiprintf_r+0x36>
 801d4d8:	2140      	movs	r1, #64	@ 0x40
 801d4da:	f7ff fa13 	bl	801c904 <_malloc_r>
 801d4de:	6028      	str	r0, [r5, #0]
 801d4e0:	6128      	str	r0, [r5, #16]
 801d4e2:	b930      	cbnz	r0, 801d4f2 <_svfiprintf_r+0x32>
 801d4e4:	230c      	movs	r3, #12
 801d4e6:	603b      	str	r3, [r7, #0]
 801d4e8:	f04f 30ff 	mov.w	r0, #4294967295
 801d4ec:	b01d      	add	sp, #116	@ 0x74
 801d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4f2:	2340      	movs	r3, #64	@ 0x40
 801d4f4:	616b      	str	r3, [r5, #20]
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4fa:	2320      	movs	r3, #32
 801d4fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d500:	f8cd 800c 	str.w	r8, [sp, #12]
 801d504:	2330      	movs	r3, #48	@ 0x30
 801d506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d6a4 <_svfiprintf_r+0x1e4>
 801d50a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d50e:	f04f 0901 	mov.w	r9, #1
 801d512:	4623      	mov	r3, r4
 801d514:	469a      	mov	sl, r3
 801d516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d51a:	b10a      	cbz	r2, 801d520 <_svfiprintf_r+0x60>
 801d51c:	2a25      	cmp	r2, #37	@ 0x25
 801d51e:	d1f9      	bne.n	801d514 <_svfiprintf_r+0x54>
 801d520:	ebba 0b04 	subs.w	fp, sl, r4
 801d524:	d00b      	beq.n	801d53e <_svfiprintf_r+0x7e>
 801d526:	465b      	mov	r3, fp
 801d528:	4622      	mov	r2, r4
 801d52a:	4629      	mov	r1, r5
 801d52c:	4638      	mov	r0, r7
 801d52e:	f7ff ff6c 	bl	801d40a <__ssputs_r>
 801d532:	3001      	adds	r0, #1
 801d534:	f000 80a7 	beq.w	801d686 <_svfiprintf_r+0x1c6>
 801d538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d53a:	445a      	add	r2, fp
 801d53c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d53e:	f89a 3000 	ldrb.w	r3, [sl]
 801d542:	2b00      	cmp	r3, #0
 801d544:	f000 809f 	beq.w	801d686 <_svfiprintf_r+0x1c6>
 801d548:	2300      	movs	r3, #0
 801d54a:	f04f 32ff 	mov.w	r2, #4294967295
 801d54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d552:	f10a 0a01 	add.w	sl, sl, #1
 801d556:	9304      	str	r3, [sp, #16]
 801d558:	9307      	str	r3, [sp, #28]
 801d55a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d55e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d560:	4654      	mov	r4, sl
 801d562:	2205      	movs	r2, #5
 801d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d568:	484e      	ldr	r0, [pc, #312]	@ (801d6a4 <_svfiprintf_r+0x1e4>)
 801d56a:	f7e2 fe31 	bl	80001d0 <memchr>
 801d56e:	9a04      	ldr	r2, [sp, #16]
 801d570:	b9d8      	cbnz	r0, 801d5aa <_svfiprintf_r+0xea>
 801d572:	06d0      	lsls	r0, r2, #27
 801d574:	bf44      	itt	mi
 801d576:	2320      	movmi	r3, #32
 801d578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d57c:	0711      	lsls	r1, r2, #28
 801d57e:	bf44      	itt	mi
 801d580:	232b      	movmi	r3, #43	@ 0x2b
 801d582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d586:	f89a 3000 	ldrb.w	r3, [sl]
 801d58a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d58c:	d015      	beq.n	801d5ba <_svfiprintf_r+0xfa>
 801d58e:	9a07      	ldr	r2, [sp, #28]
 801d590:	4654      	mov	r4, sl
 801d592:	2000      	movs	r0, #0
 801d594:	f04f 0c0a 	mov.w	ip, #10
 801d598:	4621      	mov	r1, r4
 801d59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d59e:	3b30      	subs	r3, #48	@ 0x30
 801d5a0:	2b09      	cmp	r3, #9
 801d5a2:	d94b      	bls.n	801d63c <_svfiprintf_r+0x17c>
 801d5a4:	b1b0      	cbz	r0, 801d5d4 <_svfiprintf_r+0x114>
 801d5a6:	9207      	str	r2, [sp, #28]
 801d5a8:	e014      	b.n	801d5d4 <_svfiprintf_r+0x114>
 801d5aa:	eba0 0308 	sub.w	r3, r0, r8
 801d5ae:	fa09 f303 	lsl.w	r3, r9, r3
 801d5b2:	4313      	orrs	r3, r2
 801d5b4:	9304      	str	r3, [sp, #16]
 801d5b6:	46a2      	mov	sl, r4
 801d5b8:	e7d2      	b.n	801d560 <_svfiprintf_r+0xa0>
 801d5ba:	9b03      	ldr	r3, [sp, #12]
 801d5bc:	1d19      	adds	r1, r3, #4
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	9103      	str	r1, [sp, #12]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	bfbb      	ittet	lt
 801d5c6:	425b      	neglt	r3, r3
 801d5c8:	f042 0202 	orrlt.w	r2, r2, #2
 801d5cc:	9307      	strge	r3, [sp, #28]
 801d5ce:	9307      	strlt	r3, [sp, #28]
 801d5d0:	bfb8      	it	lt
 801d5d2:	9204      	strlt	r2, [sp, #16]
 801d5d4:	7823      	ldrb	r3, [r4, #0]
 801d5d6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d5d8:	d10a      	bne.n	801d5f0 <_svfiprintf_r+0x130>
 801d5da:	7863      	ldrb	r3, [r4, #1]
 801d5dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d5de:	d132      	bne.n	801d646 <_svfiprintf_r+0x186>
 801d5e0:	9b03      	ldr	r3, [sp, #12]
 801d5e2:	1d1a      	adds	r2, r3, #4
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	9203      	str	r2, [sp, #12]
 801d5e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d5ec:	3402      	adds	r4, #2
 801d5ee:	9305      	str	r3, [sp, #20]
 801d5f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d6b4 <_svfiprintf_r+0x1f4>
 801d5f4:	7821      	ldrb	r1, [r4, #0]
 801d5f6:	2203      	movs	r2, #3
 801d5f8:	4650      	mov	r0, sl
 801d5fa:	f7e2 fde9 	bl	80001d0 <memchr>
 801d5fe:	b138      	cbz	r0, 801d610 <_svfiprintf_r+0x150>
 801d600:	9b04      	ldr	r3, [sp, #16]
 801d602:	eba0 000a 	sub.w	r0, r0, sl
 801d606:	2240      	movs	r2, #64	@ 0x40
 801d608:	4082      	lsls	r2, r0
 801d60a:	4313      	orrs	r3, r2
 801d60c:	3401      	adds	r4, #1
 801d60e:	9304      	str	r3, [sp, #16]
 801d610:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d614:	4824      	ldr	r0, [pc, #144]	@ (801d6a8 <_svfiprintf_r+0x1e8>)
 801d616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d61a:	2206      	movs	r2, #6
 801d61c:	f7e2 fdd8 	bl	80001d0 <memchr>
 801d620:	2800      	cmp	r0, #0
 801d622:	d036      	beq.n	801d692 <_svfiprintf_r+0x1d2>
 801d624:	4b21      	ldr	r3, [pc, #132]	@ (801d6ac <_svfiprintf_r+0x1ec>)
 801d626:	bb1b      	cbnz	r3, 801d670 <_svfiprintf_r+0x1b0>
 801d628:	9b03      	ldr	r3, [sp, #12]
 801d62a:	3307      	adds	r3, #7
 801d62c:	f023 0307 	bic.w	r3, r3, #7
 801d630:	3308      	adds	r3, #8
 801d632:	9303      	str	r3, [sp, #12]
 801d634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d636:	4433      	add	r3, r6
 801d638:	9309      	str	r3, [sp, #36]	@ 0x24
 801d63a:	e76a      	b.n	801d512 <_svfiprintf_r+0x52>
 801d63c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d640:	460c      	mov	r4, r1
 801d642:	2001      	movs	r0, #1
 801d644:	e7a8      	b.n	801d598 <_svfiprintf_r+0xd8>
 801d646:	2300      	movs	r3, #0
 801d648:	3401      	adds	r4, #1
 801d64a:	9305      	str	r3, [sp, #20]
 801d64c:	4619      	mov	r1, r3
 801d64e:	f04f 0c0a 	mov.w	ip, #10
 801d652:	4620      	mov	r0, r4
 801d654:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d658:	3a30      	subs	r2, #48	@ 0x30
 801d65a:	2a09      	cmp	r2, #9
 801d65c:	d903      	bls.n	801d666 <_svfiprintf_r+0x1a6>
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d0c6      	beq.n	801d5f0 <_svfiprintf_r+0x130>
 801d662:	9105      	str	r1, [sp, #20]
 801d664:	e7c4      	b.n	801d5f0 <_svfiprintf_r+0x130>
 801d666:	fb0c 2101 	mla	r1, ip, r1, r2
 801d66a:	4604      	mov	r4, r0
 801d66c:	2301      	movs	r3, #1
 801d66e:	e7f0      	b.n	801d652 <_svfiprintf_r+0x192>
 801d670:	ab03      	add	r3, sp, #12
 801d672:	9300      	str	r3, [sp, #0]
 801d674:	462a      	mov	r2, r5
 801d676:	4b0e      	ldr	r3, [pc, #56]	@ (801d6b0 <_svfiprintf_r+0x1f0>)
 801d678:	a904      	add	r1, sp, #16
 801d67a:	4638      	mov	r0, r7
 801d67c:	f7fc fc8a 	bl	8019f94 <_printf_float>
 801d680:	1c42      	adds	r2, r0, #1
 801d682:	4606      	mov	r6, r0
 801d684:	d1d6      	bne.n	801d634 <_svfiprintf_r+0x174>
 801d686:	89ab      	ldrh	r3, [r5, #12]
 801d688:	065b      	lsls	r3, r3, #25
 801d68a:	f53f af2d 	bmi.w	801d4e8 <_svfiprintf_r+0x28>
 801d68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d690:	e72c      	b.n	801d4ec <_svfiprintf_r+0x2c>
 801d692:	ab03      	add	r3, sp, #12
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	462a      	mov	r2, r5
 801d698:	4b05      	ldr	r3, [pc, #20]	@ (801d6b0 <_svfiprintf_r+0x1f0>)
 801d69a:	a904      	add	r1, sp, #16
 801d69c:	4638      	mov	r0, r7
 801d69e:	f7fd f85d 	bl	801a75c <_printf_i>
 801d6a2:	e7ed      	b.n	801d680 <_svfiprintf_r+0x1c0>
 801d6a4:	080202ea 	.word	0x080202ea
 801d6a8:	080202f4 	.word	0x080202f4
 801d6ac:	08019f95 	.word	0x08019f95
 801d6b0:	0801d40b 	.word	0x0801d40b
 801d6b4:	080202f0 	.word	0x080202f0

0801d6b8 <_sungetc_r>:
 801d6b8:	b538      	push	{r3, r4, r5, lr}
 801d6ba:	1c4b      	adds	r3, r1, #1
 801d6bc:	4614      	mov	r4, r2
 801d6be:	d103      	bne.n	801d6c8 <_sungetc_r+0x10>
 801d6c0:	f04f 35ff 	mov.w	r5, #4294967295
 801d6c4:	4628      	mov	r0, r5
 801d6c6:	bd38      	pop	{r3, r4, r5, pc}
 801d6c8:	8993      	ldrh	r3, [r2, #12]
 801d6ca:	f023 0320 	bic.w	r3, r3, #32
 801d6ce:	8193      	strh	r3, [r2, #12]
 801d6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d6d2:	6852      	ldr	r2, [r2, #4]
 801d6d4:	b2cd      	uxtb	r5, r1
 801d6d6:	b18b      	cbz	r3, 801d6fc <_sungetc_r+0x44>
 801d6d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d6da:	4293      	cmp	r3, r2
 801d6dc:	dd08      	ble.n	801d6f0 <_sungetc_r+0x38>
 801d6de:	6823      	ldr	r3, [r4, #0]
 801d6e0:	1e5a      	subs	r2, r3, #1
 801d6e2:	6022      	str	r2, [r4, #0]
 801d6e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d6e8:	6863      	ldr	r3, [r4, #4]
 801d6ea:	3301      	adds	r3, #1
 801d6ec:	6063      	str	r3, [r4, #4]
 801d6ee:	e7e9      	b.n	801d6c4 <_sungetc_r+0xc>
 801d6f0:	4621      	mov	r1, r4
 801d6f2:	f000 fc8c 	bl	801e00e <__submore>
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	d0f1      	beq.n	801d6de <_sungetc_r+0x26>
 801d6fa:	e7e1      	b.n	801d6c0 <_sungetc_r+0x8>
 801d6fc:	6921      	ldr	r1, [r4, #16]
 801d6fe:	6823      	ldr	r3, [r4, #0]
 801d700:	b151      	cbz	r1, 801d718 <_sungetc_r+0x60>
 801d702:	4299      	cmp	r1, r3
 801d704:	d208      	bcs.n	801d718 <_sungetc_r+0x60>
 801d706:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d70a:	42a9      	cmp	r1, r5
 801d70c:	d104      	bne.n	801d718 <_sungetc_r+0x60>
 801d70e:	3b01      	subs	r3, #1
 801d710:	3201      	adds	r2, #1
 801d712:	6023      	str	r3, [r4, #0]
 801d714:	6062      	str	r2, [r4, #4]
 801d716:	e7d5      	b.n	801d6c4 <_sungetc_r+0xc>
 801d718:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801d71c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d720:	6363      	str	r3, [r4, #52]	@ 0x34
 801d722:	2303      	movs	r3, #3
 801d724:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d726:	4623      	mov	r3, r4
 801d728:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d72c:	6023      	str	r3, [r4, #0]
 801d72e:	2301      	movs	r3, #1
 801d730:	e7dc      	b.n	801d6ec <_sungetc_r+0x34>

0801d732 <__ssrefill_r>:
 801d732:	b510      	push	{r4, lr}
 801d734:	460c      	mov	r4, r1
 801d736:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d738:	b169      	cbz	r1, 801d756 <__ssrefill_r+0x24>
 801d73a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d73e:	4299      	cmp	r1, r3
 801d740:	d001      	beq.n	801d746 <__ssrefill_r+0x14>
 801d742:	f7fe fd31 	bl	801c1a8 <_free_r>
 801d746:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d748:	6063      	str	r3, [r4, #4]
 801d74a:	2000      	movs	r0, #0
 801d74c:	6360      	str	r0, [r4, #52]	@ 0x34
 801d74e:	b113      	cbz	r3, 801d756 <__ssrefill_r+0x24>
 801d750:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d752:	6023      	str	r3, [r4, #0]
 801d754:	bd10      	pop	{r4, pc}
 801d756:	6923      	ldr	r3, [r4, #16]
 801d758:	6023      	str	r3, [r4, #0]
 801d75a:	2300      	movs	r3, #0
 801d75c:	6063      	str	r3, [r4, #4]
 801d75e:	89a3      	ldrh	r3, [r4, #12]
 801d760:	f043 0320 	orr.w	r3, r3, #32
 801d764:	81a3      	strh	r3, [r4, #12]
 801d766:	f04f 30ff 	mov.w	r0, #4294967295
 801d76a:	e7f3      	b.n	801d754 <__ssrefill_r+0x22>

0801d76c <__ssvfiscanf_r>:
 801d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d770:	460c      	mov	r4, r1
 801d772:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801d776:	2100      	movs	r1, #0
 801d778:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801d77c:	49a6      	ldr	r1, [pc, #664]	@ (801da18 <__ssvfiscanf_r+0x2ac>)
 801d77e:	91a0      	str	r1, [sp, #640]	@ 0x280
 801d780:	f10d 0804 	add.w	r8, sp, #4
 801d784:	49a5      	ldr	r1, [pc, #660]	@ (801da1c <__ssvfiscanf_r+0x2b0>)
 801d786:	4fa6      	ldr	r7, [pc, #664]	@ (801da20 <__ssvfiscanf_r+0x2b4>)
 801d788:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801d78c:	4606      	mov	r6, r0
 801d78e:	91a1      	str	r1, [sp, #644]	@ 0x284
 801d790:	9300      	str	r3, [sp, #0]
 801d792:	f892 9000 	ldrb.w	r9, [r2]
 801d796:	f1b9 0f00 	cmp.w	r9, #0
 801d79a:	f000 8158 	beq.w	801da4e <__ssvfiscanf_r+0x2e2>
 801d79e:	f817 3009 	ldrb.w	r3, [r7, r9]
 801d7a2:	f013 0308 	ands.w	r3, r3, #8
 801d7a6:	f102 0501 	add.w	r5, r2, #1
 801d7aa:	d019      	beq.n	801d7e0 <__ssvfiscanf_r+0x74>
 801d7ac:	6863      	ldr	r3, [r4, #4]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	dd0f      	ble.n	801d7d2 <__ssvfiscanf_r+0x66>
 801d7b2:	6823      	ldr	r3, [r4, #0]
 801d7b4:	781a      	ldrb	r2, [r3, #0]
 801d7b6:	5cba      	ldrb	r2, [r7, r2]
 801d7b8:	0712      	lsls	r2, r2, #28
 801d7ba:	d401      	bmi.n	801d7c0 <__ssvfiscanf_r+0x54>
 801d7bc:	462a      	mov	r2, r5
 801d7be:	e7e8      	b.n	801d792 <__ssvfiscanf_r+0x26>
 801d7c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d7c2:	3201      	adds	r2, #1
 801d7c4:	9245      	str	r2, [sp, #276]	@ 0x114
 801d7c6:	6862      	ldr	r2, [r4, #4]
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	3a01      	subs	r2, #1
 801d7cc:	6062      	str	r2, [r4, #4]
 801d7ce:	6023      	str	r3, [r4, #0]
 801d7d0:	e7ec      	b.n	801d7ac <__ssvfiscanf_r+0x40>
 801d7d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d7d4:	4621      	mov	r1, r4
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	4798      	blx	r3
 801d7da:	2800      	cmp	r0, #0
 801d7dc:	d0e9      	beq.n	801d7b2 <__ssvfiscanf_r+0x46>
 801d7de:	e7ed      	b.n	801d7bc <__ssvfiscanf_r+0x50>
 801d7e0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801d7e4:	f040 8085 	bne.w	801d8f2 <__ssvfiscanf_r+0x186>
 801d7e8:	9341      	str	r3, [sp, #260]	@ 0x104
 801d7ea:	9343      	str	r3, [sp, #268]	@ 0x10c
 801d7ec:	7853      	ldrb	r3, [r2, #1]
 801d7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 801d7f0:	bf02      	ittt	eq
 801d7f2:	2310      	moveq	r3, #16
 801d7f4:	1c95      	addeq	r5, r2, #2
 801d7f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d7f8:	220a      	movs	r2, #10
 801d7fa:	46aa      	mov	sl, r5
 801d7fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d800:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d804:	2b09      	cmp	r3, #9
 801d806:	d91e      	bls.n	801d846 <__ssvfiscanf_r+0xda>
 801d808:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801da24 <__ssvfiscanf_r+0x2b8>
 801d80c:	2203      	movs	r2, #3
 801d80e:	4658      	mov	r0, fp
 801d810:	f7e2 fcde 	bl	80001d0 <memchr>
 801d814:	b138      	cbz	r0, 801d826 <__ssvfiscanf_r+0xba>
 801d816:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d818:	eba0 000b 	sub.w	r0, r0, fp
 801d81c:	2301      	movs	r3, #1
 801d81e:	4083      	lsls	r3, r0
 801d820:	4313      	orrs	r3, r2
 801d822:	9341      	str	r3, [sp, #260]	@ 0x104
 801d824:	4655      	mov	r5, sl
 801d826:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d82a:	2b78      	cmp	r3, #120	@ 0x78
 801d82c:	d806      	bhi.n	801d83c <__ssvfiscanf_r+0xd0>
 801d82e:	2b57      	cmp	r3, #87	@ 0x57
 801d830:	d810      	bhi.n	801d854 <__ssvfiscanf_r+0xe8>
 801d832:	2b25      	cmp	r3, #37	@ 0x25
 801d834:	d05d      	beq.n	801d8f2 <__ssvfiscanf_r+0x186>
 801d836:	d857      	bhi.n	801d8e8 <__ssvfiscanf_r+0x17c>
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d075      	beq.n	801d928 <__ssvfiscanf_r+0x1bc>
 801d83c:	2303      	movs	r3, #3
 801d83e:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d840:	230a      	movs	r3, #10
 801d842:	9342      	str	r3, [sp, #264]	@ 0x108
 801d844:	e088      	b.n	801d958 <__ssvfiscanf_r+0x1ec>
 801d846:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d848:	fb02 1103 	mla	r1, r2, r3, r1
 801d84c:	3930      	subs	r1, #48	@ 0x30
 801d84e:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d850:	4655      	mov	r5, sl
 801d852:	e7d2      	b.n	801d7fa <__ssvfiscanf_r+0x8e>
 801d854:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d858:	2a20      	cmp	r2, #32
 801d85a:	d8ef      	bhi.n	801d83c <__ssvfiscanf_r+0xd0>
 801d85c:	a101      	add	r1, pc, #4	@ (adr r1, 801d864 <__ssvfiscanf_r+0xf8>)
 801d85e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d862:	bf00      	nop
 801d864:	0801d937 	.word	0x0801d937
 801d868:	0801d83d 	.word	0x0801d83d
 801d86c:	0801d83d 	.word	0x0801d83d
 801d870:	0801d991 	.word	0x0801d991
 801d874:	0801d83d 	.word	0x0801d83d
 801d878:	0801d83d 	.word	0x0801d83d
 801d87c:	0801d83d 	.word	0x0801d83d
 801d880:	0801d83d 	.word	0x0801d83d
 801d884:	0801d83d 	.word	0x0801d83d
 801d888:	0801d83d 	.word	0x0801d83d
 801d88c:	0801d83d 	.word	0x0801d83d
 801d890:	0801d9a7 	.word	0x0801d9a7
 801d894:	0801d98d 	.word	0x0801d98d
 801d898:	0801d8ef 	.word	0x0801d8ef
 801d89c:	0801d8ef 	.word	0x0801d8ef
 801d8a0:	0801d8ef 	.word	0x0801d8ef
 801d8a4:	0801d83d 	.word	0x0801d83d
 801d8a8:	0801d949 	.word	0x0801d949
 801d8ac:	0801d83d 	.word	0x0801d83d
 801d8b0:	0801d83d 	.word	0x0801d83d
 801d8b4:	0801d83d 	.word	0x0801d83d
 801d8b8:	0801d83d 	.word	0x0801d83d
 801d8bc:	0801d9b7 	.word	0x0801d9b7
 801d8c0:	0801d951 	.word	0x0801d951
 801d8c4:	0801d92f 	.word	0x0801d92f
 801d8c8:	0801d83d 	.word	0x0801d83d
 801d8cc:	0801d83d 	.word	0x0801d83d
 801d8d0:	0801d9b3 	.word	0x0801d9b3
 801d8d4:	0801d83d 	.word	0x0801d83d
 801d8d8:	0801d98d 	.word	0x0801d98d
 801d8dc:	0801d83d 	.word	0x0801d83d
 801d8e0:	0801d83d 	.word	0x0801d83d
 801d8e4:	0801d937 	.word	0x0801d937
 801d8e8:	3b45      	subs	r3, #69	@ 0x45
 801d8ea:	2b02      	cmp	r3, #2
 801d8ec:	d8a6      	bhi.n	801d83c <__ssvfiscanf_r+0xd0>
 801d8ee:	2305      	movs	r3, #5
 801d8f0:	e031      	b.n	801d956 <__ssvfiscanf_r+0x1ea>
 801d8f2:	6863      	ldr	r3, [r4, #4]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	dd0d      	ble.n	801d914 <__ssvfiscanf_r+0x1a8>
 801d8f8:	6823      	ldr	r3, [r4, #0]
 801d8fa:	781a      	ldrb	r2, [r3, #0]
 801d8fc:	454a      	cmp	r2, r9
 801d8fe:	f040 80a6 	bne.w	801da4e <__ssvfiscanf_r+0x2e2>
 801d902:	3301      	adds	r3, #1
 801d904:	6862      	ldr	r2, [r4, #4]
 801d906:	6023      	str	r3, [r4, #0]
 801d908:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d90a:	3a01      	subs	r2, #1
 801d90c:	3301      	adds	r3, #1
 801d90e:	6062      	str	r2, [r4, #4]
 801d910:	9345      	str	r3, [sp, #276]	@ 0x114
 801d912:	e753      	b.n	801d7bc <__ssvfiscanf_r+0x50>
 801d914:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d916:	4621      	mov	r1, r4
 801d918:	4630      	mov	r0, r6
 801d91a:	4798      	blx	r3
 801d91c:	2800      	cmp	r0, #0
 801d91e:	d0eb      	beq.n	801d8f8 <__ssvfiscanf_r+0x18c>
 801d920:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d922:	2800      	cmp	r0, #0
 801d924:	f040 808b 	bne.w	801da3e <__ssvfiscanf_r+0x2d2>
 801d928:	f04f 30ff 	mov.w	r0, #4294967295
 801d92c:	e08b      	b.n	801da46 <__ssvfiscanf_r+0x2da>
 801d92e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d930:	f042 0220 	orr.w	r2, r2, #32
 801d934:	9241      	str	r2, [sp, #260]	@ 0x104
 801d936:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d93c:	9241      	str	r2, [sp, #260]	@ 0x104
 801d93e:	2210      	movs	r2, #16
 801d940:	2b6e      	cmp	r3, #110	@ 0x6e
 801d942:	9242      	str	r2, [sp, #264]	@ 0x108
 801d944:	d902      	bls.n	801d94c <__ssvfiscanf_r+0x1e0>
 801d946:	e005      	b.n	801d954 <__ssvfiscanf_r+0x1e8>
 801d948:	2300      	movs	r3, #0
 801d94a:	9342      	str	r3, [sp, #264]	@ 0x108
 801d94c:	2303      	movs	r3, #3
 801d94e:	e002      	b.n	801d956 <__ssvfiscanf_r+0x1ea>
 801d950:	2308      	movs	r3, #8
 801d952:	9342      	str	r3, [sp, #264]	@ 0x108
 801d954:	2304      	movs	r3, #4
 801d956:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d958:	6863      	ldr	r3, [r4, #4]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	dd39      	ble.n	801d9d2 <__ssvfiscanf_r+0x266>
 801d95e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d960:	0659      	lsls	r1, r3, #25
 801d962:	d404      	bmi.n	801d96e <__ssvfiscanf_r+0x202>
 801d964:	6823      	ldr	r3, [r4, #0]
 801d966:	781a      	ldrb	r2, [r3, #0]
 801d968:	5cba      	ldrb	r2, [r7, r2]
 801d96a:	0712      	lsls	r2, r2, #28
 801d96c:	d438      	bmi.n	801d9e0 <__ssvfiscanf_r+0x274>
 801d96e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d970:	2b02      	cmp	r3, #2
 801d972:	dc47      	bgt.n	801da04 <__ssvfiscanf_r+0x298>
 801d974:	466b      	mov	r3, sp
 801d976:	4622      	mov	r2, r4
 801d978:	a941      	add	r1, sp, #260	@ 0x104
 801d97a:	4630      	mov	r0, r6
 801d97c:	f000 f86c 	bl	801da58 <_scanf_chars>
 801d980:	2801      	cmp	r0, #1
 801d982:	d064      	beq.n	801da4e <__ssvfiscanf_r+0x2e2>
 801d984:	2802      	cmp	r0, #2
 801d986:	f47f af19 	bne.w	801d7bc <__ssvfiscanf_r+0x50>
 801d98a:	e7c9      	b.n	801d920 <__ssvfiscanf_r+0x1b4>
 801d98c:	220a      	movs	r2, #10
 801d98e:	e7d7      	b.n	801d940 <__ssvfiscanf_r+0x1d4>
 801d990:	4629      	mov	r1, r5
 801d992:	4640      	mov	r0, r8
 801d994:	f000 fb02 	bl	801df9c <__sccl>
 801d998:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d99a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d99e:	9341      	str	r3, [sp, #260]	@ 0x104
 801d9a0:	4605      	mov	r5, r0
 801d9a2:	2301      	movs	r3, #1
 801d9a4:	e7d7      	b.n	801d956 <__ssvfiscanf_r+0x1ea>
 801d9a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d9a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d9ac:	9341      	str	r3, [sp, #260]	@ 0x104
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	e7d1      	b.n	801d956 <__ssvfiscanf_r+0x1ea>
 801d9b2:	2302      	movs	r3, #2
 801d9b4:	e7cf      	b.n	801d956 <__ssvfiscanf_r+0x1ea>
 801d9b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d9b8:	06c3      	lsls	r3, r0, #27
 801d9ba:	f53f aeff 	bmi.w	801d7bc <__ssvfiscanf_r+0x50>
 801d9be:	9b00      	ldr	r3, [sp, #0]
 801d9c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d9c2:	1d19      	adds	r1, r3, #4
 801d9c4:	9100      	str	r1, [sp, #0]
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	07c0      	lsls	r0, r0, #31
 801d9ca:	bf4c      	ite	mi
 801d9cc:	801a      	strhmi	r2, [r3, #0]
 801d9ce:	601a      	strpl	r2, [r3, #0]
 801d9d0:	e6f4      	b.n	801d7bc <__ssvfiscanf_r+0x50>
 801d9d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d9d4:	4621      	mov	r1, r4
 801d9d6:	4630      	mov	r0, r6
 801d9d8:	4798      	blx	r3
 801d9da:	2800      	cmp	r0, #0
 801d9dc:	d0bf      	beq.n	801d95e <__ssvfiscanf_r+0x1f2>
 801d9de:	e79f      	b.n	801d920 <__ssvfiscanf_r+0x1b4>
 801d9e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d9e2:	3201      	adds	r2, #1
 801d9e4:	9245      	str	r2, [sp, #276]	@ 0x114
 801d9e6:	6862      	ldr	r2, [r4, #4]
 801d9e8:	3a01      	subs	r2, #1
 801d9ea:	2a00      	cmp	r2, #0
 801d9ec:	6062      	str	r2, [r4, #4]
 801d9ee:	dd02      	ble.n	801d9f6 <__ssvfiscanf_r+0x28a>
 801d9f0:	3301      	adds	r3, #1
 801d9f2:	6023      	str	r3, [r4, #0]
 801d9f4:	e7b6      	b.n	801d964 <__ssvfiscanf_r+0x1f8>
 801d9f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d9f8:	4621      	mov	r1, r4
 801d9fa:	4630      	mov	r0, r6
 801d9fc:	4798      	blx	r3
 801d9fe:	2800      	cmp	r0, #0
 801da00:	d0b0      	beq.n	801d964 <__ssvfiscanf_r+0x1f8>
 801da02:	e78d      	b.n	801d920 <__ssvfiscanf_r+0x1b4>
 801da04:	2b04      	cmp	r3, #4
 801da06:	dc0f      	bgt.n	801da28 <__ssvfiscanf_r+0x2bc>
 801da08:	466b      	mov	r3, sp
 801da0a:	4622      	mov	r2, r4
 801da0c:	a941      	add	r1, sp, #260	@ 0x104
 801da0e:	4630      	mov	r0, r6
 801da10:	f000 f87c 	bl	801db0c <_scanf_i>
 801da14:	e7b4      	b.n	801d980 <__ssvfiscanf_r+0x214>
 801da16:	bf00      	nop
 801da18:	0801d6b9 	.word	0x0801d6b9
 801da1c:	0801d733 	.word	0x0801d733
 801da20:	08020939 	.word	0x08020939
 801da24:	080202f0 	.word	0x080202f0
 801da28:	4b0a      	ldr	r3, [pc, #40]	@ (801da54 <__ssvfiscanf_r+0x2e8>)
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	f43f aec6 	beq.w	801d7bc <__ssvfiscanf_r+0x50>
 801da30:	466b      	mov	r3, sp
 801da32:	4622      	mov	r2, r4
 801da34:	a941      	add	r1, sp, #260	@ 0x104
 801da36:	4630      	mov	r0, r6
 801da38:	f7fc ffae 	bl	801a998 <_scanf_float>
 801da3c:	e7a0      	b.n	801d980 <__ssvfiscanf_r+0x214>
 801da3e:	89a3      	ldrh	r3, [r4, #12]
 801da40:	065b      	lsls	r3, r3, #25
 801da42:	f53f af71 	bmi.w	801d928 <__ssvfiscanf_r+0x1bc>
 801da46:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801da4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da4e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801da50:	e7f9      	b.n	801da46 <__ssvfiscanf_r+0x2da>
 801da52:	bf00      	nop
 801da54:	0801a999 	.word	0x0801a999

0801da58 <_scanf_chars>:
 801da58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da5c:	4615      	mov	r5, r2
 801da5e:	688a      	ldr	r2, [r1, #8]
 801da60:	4680      	mov	r8, r0
 801da62:	460c      	mov	r4, r1
 801da64:	b932      	cbnz	r2, 801da74 <_scanf_chars+0x1c>
 801da66:	698a      	ldr	r2, [r1, #24]
 801da68:	2a00      	cmp	r2, #0
 801da6a:	bf14      	ite	ne
 801da6c:	f04f 32ff 	movne.w	r2, #4294967295
 801da70:	2201      	moveq	r2, #1
 801da72:	608a      	str	r2, [r1, #8]
 801da74:	6822      	ldr	r2, [r4, #0]
 801da76:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801db08 <_scanf_chars+0xb0>
 801da7a:	06d1      	lsls	r1, r2, #27
 801da7c:	bf5f      	itttt	pl
 801da7e:	681a      	ldrpl	r2, [r3, #0]
 801da80:	1d11      	addpl	r1, r2, #4
 801da82:	6019      	strpl	r1, [r3, #0]
 801da84:	6816      	ldrpl	r6, [r2, #0]
 801da86:	2700      	movs	r7, #0
 801da88:	69a0      	ldr	r0, [r4, #24]
 801da8a:	b188      	cbz	r0, 801dab0 <_scanf_chars+0x58>
 801da8c:	2801      	cmp	r0, #1
 801da8e:	d107      	bne.n	801daa0 <_scanf_chars+0x48>
 801da90:	682b      	ldr	r3, [r5, #0]
 801da92:	781a      	ldrb	r2, [r3, #0]
 801da94:	6963      	ldr	r3, [r4, #20]
 801da96:	5c9b      	ldrb	r3, [r3, r2]
 801da98:	b953      	cbnz	r3, 801dab0 <_scanf_chars+0x58>
 801da9a:	2f00      	cmp	r7, #0
 801da9c:	d031      	beq.n	801db02 <_scanf_chars+0xaa>
 801da9e:	e022      	b.n	801dae6 <_scanf_chars+0x8e>
 801daa0:	2802      	cmp	r0, #2
 801daa2:	d120      	bne.n	801dae6 <_scanf_chars+0x8e>
 801daa4:	682b      	ldr	r3, [r5, #0]
 801daa6:	781b      	ldrb	r3, [r3, #0]
 801daa8:	f819 3003 	ldrb.w	r3, [r9, r3]
 801daac:	071b      	lsls	r3, r3, #28
 801daae:	d41a      	bmi.n	801dae6 <_scanf_chars+0x8e>
 801dab0:	6823      	ldr	r3, [r4, #0]
 801dab2:	06da      	lsls	r2, r3, #27
 801dab4:	bf5e      	ittt	pl
 801dab6:	682b      	ldrpl	r3, [r5, #0]
 801dab8:	781b      	ldrbpl	r3, [r3, #0]
 801daba:	f806 3b01 	strbpl.w	r3, [r6], #1
 801dabe:	682a      	ldr	r2, [r5, #0]
 801dac0:	686b      	ldr	r3, [r5, #4]
 801dac2:	3201      	adds	r2, #1
 801dac4:	602a      	str	r2, [r5, #0]
 801dac6:	68a2      	ldr	r2, [r4, #8]
 801dac8:	3b01      	subs	r3, #1
 801daca:	3a01      	subs	r2, #1
 801dacc:	606b      	str	r3, [r5, #4]
 801dace:	3701      	adds	r7, #1
 801dad0:	60a2      	str	r2, [r4, #8]
 801dad2:	b142      	cbz	r2, 801dae6 <_scanf_chars+0x8e>
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	dcd7      	bgt.n	801da88 <_scanf_chars+0x30>
 801dad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801dadc:	4629      	mov	r1, r5
 801dade:	4640      	mov	r0, r8
 801dae0:	4798      	blx	r3
 801dae2:	2800      	cmp	r0, #0
 801dae4:	d0d0      	beq.n	801da88 <_scanf_chars+0x30>
 801dae6:	6823      	ldr	r3, [r4, #0]
 801dae8:	f013 0310 	ands.w	r3, r3, #16
 801daec:	d105      	bne.n	801dafa <_scanf_chars+0xa2>
 801daee:	68e2      	ldr	r2, [r4, #12]
 801daf0:	3201      	adds	r2, #1
 801daf2:	60e2      	str	r2, [r4, #12]
 801daf4:	69a2      	ldr	r2, [r4, #24]
 801daf6:	b102      	cbz	r2, 801dafa <_scanf_chars+0xa2>
 801daf8:	7033      	strb	r3, [r6, #0]
 801dafa:	6923      	ldr	r3, [r4, #16]
 801dafc:	443b      	add	r3, r7
 801dafe:	6123      	str	r3, [r4, #16]
 801db00:	2000      	movs	r0, #0
 801db02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db06:	bf00      	nop
 801db08:	08020939 	.word	0x08020939

0801db0c <_scanf_i>:
 801db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db10:	4698      	mov	r8, r3
 801db12:	4b74      	ldr	r3, [pc, #464]	@ (801dce4 <_scanf_i+0x1d8>)
 801db14:	460c      	mov	r4, r1
 801db16:	4682      	mov	sl, r0
 801db18:	4616      	mov	r6, r2
 801db1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801db1e:	b087      	sub	sp, #28
 801db20:	ab03      	add	r3, sp, #12
 801db22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801db26:	4b70      	ldr	r3, [pc, #448]	@ (801dce8 <_scanf_i+0x1dc>)
 801db28:	69a1      	ldr	r1, [r4, #24]
 801db2a:	4a70      	ldr	r2, [pc, #448]	@ (801dcec <_scanf_i+0x1e0>)
 801db2c:	2903      	cmp	r1, #3
 801db2e:	bf08      	it	eq
 801db30:	461a      	moveq	r2, r3
 801db32:	68a3      	ldr	r3, [r4, #8]
 801db34:	9201      	str	r2, [sp, #4]
 801db36:	1e5a      	subs	r2, r3, #1
 801db38:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801db3c:	bf88      	it	hi
 801db3e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801db42:	4627      	mov	r7, r4
 801db44:	bf82      	ittt	hi
 801db46:	eb03 0905 	addhi.w	r9, r3, r5
 801db4a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801db4e:	60a3      	strhi	r3, [r4, #8]
 801db50:	f857 3b1c 	ldr.w	r3, [r7], #28
 801db54:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801db58:	bf98      	it	ls
 801db5a:	f04f 0900 	movls.w	r9, #0
 801db5e:	6023      	str	r3, [r4, #0]
 801db60:	463d      	mov	r5, r7
 801db62:	f04f 0b00 	mov.w	fp, #0
 801db66:	6831      	ldr	r1, [r6, #0]
 801db68:	ab03      	add	r3, sp, #12
 801db6a:	7809      	ldrb	r1, [r1, #0]
 801db6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801db70:	2202      	movs	r2, #2
 801db72:	f7e2 fb2d 	bl	80001d0 <memchr>
 801db76:	b328      	cbz	r0, 801dbc4 <_scanf_i+0xb8>
 801db78:	f1bb 0f01 	cmp.w	fp, #1
 801db7c:	d159      	bne.n	801dc32 <_scanf_i+0x126>
 801db7e:	6862      	ldr	r2, [r4, #4]
 801db80:	b92a      	cbnz	r2, 801db8e <_scanf_i+0x82>
 801db82:	6822      	ldr	r2, [r4, #0]
 801db84:	2108      	movs	r1, #8
 801db86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801db8a:	6061      	str	r1, [r4, #4]
 801db8c:	6022      	str	r2, [r4, #0]
 801db8e:	6822      	ldr	r2, [r4, #0]
 801db90:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801db94:	6022      	str	r2, [r4, #0]
 801db96:	68a2      	ldr	r2, [r4, #8]
 801db98:	1e51      	subs	r1, r2, #1
 801db9a:	60a1      	str	r1, [r4, #8]
 801db9c:	b192      	cbz	r2, 801dbc4 <_scanf_i+0xb8>
 801db9e:	6832      	ldr	r2, [r6, #0]
 801dba0:	1c51      	adds	r1, r2, #1
 801dba2:	6031      	str	r1, [r6, #0]
 801dba4:	7812      	ldrb	r2, [r2, #0]
 801dba6:	f805 2b01 	strb.w	r2, [r5], #1
 801dbaa:	6872      	ldr	r2, [r6, #4]
 801dbac:	3a01      	subs	r2, #1
 801dbae:	2a00      	cmp	r2, #0
 801dbb0:	6072      	str	r2, [r6, #4]
 801dbb2:	dc07      	bgt.n	801dbc4 <_scanf_i+0xb8>
 801dbb4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801dbb8:	4631      	mov	r1, r6
 801dbba:	4650      	mov	r0, sl
 801dbbc:	4790      	blx	r2
 801dbbe:	2800      	cmp	r0, #0
 801dbc0:	f040 8085 	bne.w	801dcce <_scanf_i+0x1c2>
 801dbc4:	f10b 0b01 	add.w	fp, fp, #1
 801dbc8:	f1bb 0f03 	cmp.w	fp, #3
 801dbcc:	d1cb      	bne.n	801db66 <_scanf_i+0x5a>
 801dbce:	6863      	ldr	r3, [r4, #4]
 801dbd0:	b90b      	cbnz	r3, 801dbd6 <_scanf_i+0xca>
 801dbd2:	230a      	movs	r3, #10
 801dbd4:	6063      	str	r3, [r4, #4]
 801dbd6:	6863      	ldr	r3, [r4, #4]
 801dbd8:	4945      	ldr	r1, [pc, #276]	@ (801dcf0 <_scanf_i+0x1e4>)
 801dbda:	6960      	ldr	r0, [r4, #20]
 801dbdc:	1ac9      	subs	r1, r1, r3
 801dbde:	f000 f9dd 	bl	801df9c <__sccl>
 801dbe2:	f04f 0b00 	mov.w	fp, #0
 801dbe6:	68a3      	ldr	r3, [r4, #8]
 801dbe8:	6822      	ldr	r2, [r4, #0]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d03d      	beq.n	801dc6a <_scanf_i+0x15e>
 801dbee:	6831      	ldr	r1, [r6, #0]
 801dbf0:	6960      	ldr	r0, [r4, #20]
 801dbf2:	f891 c000 	ldrb.w	ip, [r1]
 801dbf6:	f810 000c 	ldrb.w	r0, [r0, ip]
 801dbfa:	2800      	cmp	r0, #0
 801dbfc:	d035      	beq.n	801dc6a <_scanf_i+0x15e>
 801dbfe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801dc02:	d124      	bne.n	801dc4e <_scanf_i+0x142>
 801dc04:	0510      	lsls	r0, r2, #20
 801dc06:	d522      	bpl.n	801dc4e <_scanf_i+0x142>
 801dc08:	f10b 0b01 	add.w	fp, fp, #1
 801dc0c:	f1b9 0f00 	cmp.w	r9, #0
 801dc10:	d003      	beq.n	801dc1a <_scanf_i+0x10e>
 801dc12:	3301      	adds	r3, #1
 801dc14:	f109 39ff 	add.w	r9, r9, #4294967295
 801dc18:	60a3      	str	r3, [r4, #8]
 801dc1a:	6873      	ldr	r3, [r6, #4]
 801dc1c:	3b01      	subs	r3, #1
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	6073      	str	r3, [r6, #4]
 801dc22:	dd1b      	ble.n	801dc5c <_scanf_i+0x150>
 801dc24:	6833      	ldr	r3, [r6, #0]
 801dc26:	3301      	adds	r3, #1
 801dc28:	6033      	str	r3, [r6, #0]
 801dc2a:	68a3      	ldr	r3, [r4, #8]
 801dc2c:	3b01      	subs	r3, #1
 801dc2e:	60a3      	str	r3, [r4, #8]
 801dc30:	e7d9      	b.n	801dbe6 <_scanf_i+0xda>
 801dc32:	f1bb 0f02 	cmp.w	fp, #2
 801dc36:	d1ae      	bne.n	801db96 <_scanf_i+0x8a>
 801dc38:	6822      	ldr	r2, [r4, #0]
 801dc3a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801dc3e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801dc42:	d1c4      	bne.n	801dbce <_scanf_i+0xc2>
 801dc44:	2110      	movs	r1, #16
 801dc46:	6061      	str	r1, [r4, #4]
 801dc48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801dc4c:	e7a2      	b.n	801db94 <_scanf_i+0x88>
 801dc4e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801dc52:	6022      	str	r2, [r4, #0]
 801dc54:	780b      	ldrb	r3, [r1, #0]
 801dc56:	f805 3b01 	strb.w	r3, [r5], #1
 801dc5a:	e7de      	b.n	801dc1a <_scanf_i+0x10e>
 801dc5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801dc60:	4631      	mov	r1, r6
 801dc62:	4650      	mov	r0, sl
 801dc64:	4798      	blx	r3
 801dc66:	2800      	cmp	r0, #0
 801dc68:	d0df      	beq.n	801dc2a <_scanf_i+0x11e>
 801dc6a:	6823      	ldr	r3, [r4, #0]
 801dc6c:	05d9      	lsls	r1, r3, #23
 801dc6e:	d50d      	bpl.n	801dc8c <_scanf_i+0x180>
 801dc70:	42bd      	cmp	r5, r7
 801dc72:	d909      	bls.n	801dc88 <_scanf_i+0x17c>
 801dc74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dc78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dc7c:	4632      	mov	r2, r6
 801dc7e:	4650      	mov	r0, sl
 801dc80:	4798      	blx	r3
 801dc82:	f105 39ff 	add.w	r9, r5, #4294967295
 801dc86:	464d      	mov	r5, r9
 801dc88:	42bd      	cmp	r5, r7
 801dc8a:	d028      	beq.n	801dcde <_scanf_i+0x1d2>
 801dc8c:	6822      	ldr	r2, [r4, #0]
 801dc8e:	f012 0210 	ands.w	r2, r2, #16
 801dc92:	d113      	bne.n	801dcbc <_scanf_i+0x1b0>
 801dc94:	702a      	strb	r2, [r5, #0]
 801dc96:	6863      	ldr	r3, [r4, #4]
 801dc98:	9e01      	ldr	r6, [sp, #4]
 801dc9a:	4639      	mov	r1, r7
 801dc9c:	4650      	mov	r0, sl
 801dc9e:	47b0      	blx	r6
 801dca0:	f8d8 3000 	ldr.w	r3, [r8]
 801dca4:	6821      	ldr	r1, [r4, #0]
 801dca6:	1d1a      	adds	r2, r3, #4
 801dca8:	f8c8 2000 	str.w	r2, [r8]
 801dcac:	f011 0f20 	tst.w	r1, #32
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	d00f      	beq.n	801dcd4 <_scanf_i+0x1c8>
 801dcb4:	6018      	str	r0, [r3, #0]
 801dcb6:	68e3      	ldr	r3, [r4, #12]
 801dcb8:	3301      	adds	r3, #1
 801dcba:	60e3      	str	r3, [r4, #12]
 801dcbc:	6923      	ldr	r3, [r4, #16]
 801dcbe:	1bed      	subs	r5, r5, r7
 801dcc0:	445d      	add	r5, fp
 801dcc2:	442b      	add	r3, r5
 801dcc4:	6123      	str	r3, [r4, #16]
 801dcc6:	2000      	movs	r0, #0
 801dcc8:	b007      	add	sp, #28
 801dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcce:	f04f 0b00 	mov.w	fp, #0
 801dcd2:	e7ca      	b.n	801dc6a <_scanf_i+0x15e>
 801dcd4:	07ca      	lsls	r2, r1, #31
 801dcd6:	bf4c      	ite	mi
 801dcd8:	8018      	strhmi	r0, [r3, #0]
 801dcda:	6018      	strpl	r0, [r3, #0]
 801dcdc:	e7eb      	b.n	801dcb6 <_scanf_i+0x1aa>
 801dcde:	2001      	movs	r0, #1
 801dce0:	e7f2      	b.n	801dcc8 <_scanf_i+0x1bc>
 801dce2:	bf00      	nop
 801dce4:	08020258 	.word	0x08020258
 801dce8:	08019e51 	.word	0x08019e51
 801dcec:	0801e20d 	.word	0x0801e20d
 801dcf0:	080204bc 	.word	0x080204bc

0801dcf4 <__sflush_r>:
 801dcf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcfc:	0716      	lsls	r6, r2, #28
 801dcfe:	4605      	mov	r5, r0
 801dd00:	460c      	mov	r4, r1
 801dd02:	d454      	bmi.n	801ddae <__sflush_r+0xba>
 801dd04:	684b      	ldr	r3, [r1, #4]
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	dc02      	bgt.n	801dd10 <__sflush_r+0x1c>
 801dd0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	dd48      	ble.n	801dda2 <__sflush_r+0xae>
 801dd10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd12:	2e00      	cmp	r6, #0
 801dd14:	d045      	beq.n	801dda2 <__sflush_r+0xae>
 801dd16:	2300      	movs	r3, #0
 801dd18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dd1c:	682f      	ldr	r7, [r5, #0]
 801dd1e:	6a21      	ldr	r1, [r4, #32]
 801dd20:	602b      	str	r3, [r5, #0]
 801dd22:	d030      	beq.n	801dd86 <__sflush_r+0x92>
 801dd24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dd26:	89a3      	ldrh	r3, [r4, #12]
 801dd28:	0759      	lsls	r1, r3, #29
 801dd2a:	d505      	bpl.n	801dd38 <__sflush_r+0x44>
 801dd2c:	6863      	ldr	r3, [r4, #4]
 801dd2e:	1ad2      	subs	r2, r2, r3
 801dd30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dd32:	b10b      	cbz	r3, 801dd38 <__sflush_r+0x44>
 801dd34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dd36:	1ad2      	subs	r2, r2, r3
 801dd38:	2300      	movs	r3, #0
 801dd3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd3c:	6a21      	ldr	r1, [r4, #32]
 801dd3e:	4628      	mov	r0, r5
 801dd40:	47b0      	blx	r6
 801dd42:	1c43      	adds	r3, r0, #1
 801dd44:	89a3      	ldrh	r3, [r4, #12]
 801dd46:	d106      	bne.n	801dd56 <__sflush_r+0x62>
 801dd48:	6829      	ldr	r1, [r5, #0]
 801dd4a:	291d      	cmp	r1, #29
 801dd4c:	d82b      	bhi.n	801dda6 <__sflush_r+0xb2>
 801dd4e:	4a2a      	ldr	r2, [pc, #168]	@ (801ddf8 <__sflush_r+0x104>)
 801dd50:	40ca      	lsrs	r2, r1
 801dd52:	07d6      	lsls	r6, r2, #31
 801dd54:	d527      	bpl.n	801dda6 <__sflush_r+0xb2>
 801dd56:	2200      	movs	r2, #0
 801dd58:	6062      	str	r2, [r4, #4]
 801dd5a:	04d9      	lsls	r1, r3, #19
 801dd5c:	6922      	ldr	r2, [r4, #16]
 801dd5e:	6022      	str	r2, [r4, #0]
 801dd60:	d504      	bpl.n	801dd6c <__sflush_r+0x78>
 801dd62:	1c42      	adds	r2, r0, #1
 801dd64:	d101      	bne.n	801dd6a <__sflush_r+0x76>
 801dd66:	682b      	ldr	r3, [r5, #0]
 801dd68:	b903      	cbnz	r3, 801dd6c <__sflush_r+0x78>
 801dd6a:	6560      	str	r0, [r4, #84]	@ 0x54
 801dd6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dd6e:	602f      	str	r7, [r5, #0]
 801dd70:	b1b9      	cbz	r1, 801dda2 <__sflush_r+0xae>
 801dd72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dd76:	4299      	cmp	r1, r3
 801dd78:	d002      	beq.n	801dd80 <__sflush_r+0x8c>
 801dd7a:	4628      	mov	r0, r5
 801dd7c:	f7fe fa14 	bl	801c1a8 <_free_r>
 801dd80:	2300      	movs	r3, #0
 801dd82:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd84:	e00d      	b.n	801dda2 <__sflush_r+0xae>
 801dd86:	2301      	movs	r3, #1
 801dd88:	4628      	mov	r0, r5
 801dd8a:	47b0      	blx	r6
 801dd8c:	4602      	mov	r2, r0
 801dd8e:	1c50      	adds	r0, r2, #1
 801dd90:	d1c9      	bne.n	801dd26 <__sflush_r+0x32>
 801dd92:	682b      	ldr	r3, [r5, #0]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d0c6      	beq.n	801dd26 <__sflush_r+0x32>
 801dd98:	2b1d      	cmp	r3, #29
 801dd9a:	d001      	beq.n	801dda0 <__sflush_r+0xac>
 801dd9c:	2b16      	cmp	r3, #22
 801dd9e:	d11e      	bne.n	801ddde <__sflush_r+0xea>
 801dda0:	602f      	str	r7, [r5, #0]
 801dda2:	2000      	movs	r0, #0
 801dda4:	e022      	b.n	801ddec <__sflush_r+0xf8>
 801dda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ddaa:	b21b      	sxth	r3, r3
 801ddac:	e01b      	b.n	801dde6 <__sflush_r+0xf2>
 801ddae:	690f      	ldr	r7, [r1, #16]
 801ddb0:	2f00      	cmp	r7, #0
 801ddb2:	d0f6      	beq.n	801dda2 <__sflush_r+0xae>
 801ddb4:	0793      	lsls	r3, r2, #30
 801ddb6:	680e      	ldr	r6, [r1, #0]
 801ddb8:	bf08      	it	eq
 801ddba:	694b      	ldreq	r3, [r1, #20]
 801ddbc:	600f      	str	r7, [r1, #0]
 801ddbe:	bf18      	it	ne
 801ddc0:	2300      	movne	r3, #0
 801ddc2:	eba6 0807 	sub.w	r8, r6, r7
 801ddc6:	608b      	str	r3, [r1, #8]
 801ddc8:	f1b8 0f00 	cmp.w	r8, #0
 801ddcc:	dde9      	ble.n	801dda2 <__sflush_r+0xae>
 801ddce:	6a21      	ldr	r1, [r4, #32]
 801ddd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ddd2:	4643      	mov	r3, r8
 801ddd4:	463a      	mov	r2, r7
 801ddd6:	4628      	mov	r0, r5
 801ddd8:	47b0      	blx	r6
 801ddda:	2800      	cmp	r0, #0
 801dddc:	dc08      	bgt.n	801ddf0 <__sflush_r+0xfc>
 801ddde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dde6:	81a3      	strh	r3, [r4, #12]
 801dde8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddf0:	4407      	add	r7, r0
 801ddf2:	eba8 0800 	sub.w	r8, r8, r0
 801ddf6:	e7e7      	b.n	801ddc8 <__sflush_r+0xd4>
 801ddf8:	20400001 	.word	0x20400001

0801ddfc <_fflush_r>:
 801ddfc:	b538      	push	{r3, r4, r5, lr}
 801ddfe:	690b      	ldr	r3, [r1, #16]
 801de00:	4605      	mov	r5, r0
 801de02:	460c      	mov	r4, r1
 801de04:	b913      	cbnz	r3, 801de0c <_fflush_r+0x10>
 801de06:	2500      	movs	r5, #0
 801de08:	4628      	mov	r0, r5
 801de0a:	bd38      	pop	{r3, r4, r5, pc}
 801de0c:	b118      	cbz	r0, 801de16 <_fflush_r+0x1a>
 801de0e:	6a03      	ldr	r3, [r0, #32]
 801de10:	b90b      	cbnz	r3, 801de16 <_fflush_r+0x1a>
 801de12:	f7fd f85b 	bl	801aecc <__sinit>
 801de16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d0f3      	beq.n	801de06 <_fflush_r+0xa>
 801de1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de20:	07d0      	lsls	r0, r2, #31
 801de22:	d404      	bmi.n	801de2e <_fflush_r+0x32>
 801de24:	0599      	lsls	r1, r3, #22
 801de26:	d402      	bmi.n	801de2e <_fflush_r+0x32>
 801de28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de2a:	f7fd fb2c 	bl	801b486 <__retarget_lock_acquire_recursive>
 801de2e:	4628      	mov	r0, r5
 801de30:	4621      	mov	r1, r4
 801de32:	f7ff ff5f 	bl	801dcf4 <__sflush_r>
 801de36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de38:	07da      	lsls	r2, r3, #31
 801de3a:	4605      	mov	r5, r0
 801de3c:	d4e4      	bmi.n	801de08 <_fflush_r+0xc>
 801de3e:	89a3      	ldrh	r3, [r4, #12]
 801de40:	059b      	lsls	r3, r3, #22
 801de42:	d4e1      	bmi.n	801de08 <_fflush_r+0xc>
 801de44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de46:	f7fd fb1f 	bl	801b488 <__retarget_lock_release_recursive>
 801de4a:	e7dd      	b.n	801de08 <_fflush_r+0xc>

0801de4c <fiprintf>:
 801de4c:	b40e      	push	{r1, r2, r3}
 801de4e:	b503      	push	{r0, r1, lr}
 801de50:	4601      	mov	r1, r0
 801de52:	ab03      	add	r3, sp, #12
 801de54:	4805      	ldr	r0, [pc, #20]	@ (801de6c <fiprintf+0x20>)
 801de56:	f853 2b04 	ldr.w	r2, [r3], #4
 801de5a:	6800      	ldr	r0, [r0, #0]
 801de5c:	9301      	str	r3, [sp, #4]
 801de5e:	f7fc faed 	bl	801a43c <_vfiprintf_r>
 801de62:	b002      	add	sp, #8
 801de64:	f85d eb04 	ldr.w	lr, [sp], #4
 801de68:	b003      	add	sp, #12
 801de6a:	4770      	bx	lr
 801de6c:	200002cc 	.word	0x200002cc

0801de70 <__swhatbuf_r>:
 801de70:	b570      	push	{r4, r5, r6, lr}
 801de72:	460c      	mov	r4, r1
 801de74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de78:	2900      	cmp	r1, #0
 801de7a:	b096      	sub	sp, #88	@ 0x58
 801de7c:	4615      	mov	r5, r2
 801de7e:	461e      	mov	r6, r3
 801de80:	da0d      	bge.n	801de9e <__swhatbuf_r+0x2e>
 801de82:	89a3      	ldrh	r3, [r4, #12]
 801de84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801de88:	f04f 0100 	mov.w	r1, #0
 801de8c:	bf14      	ite	ne
 801de8e:	2340      	movne	r3, #64	@ 0x40
 801de90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801de94:	2000      	movs	r0, #0
 801de96:	6031      	str	r1, [r6, #0]
 801de98:	602b      	str	r3, [r5, #0]
 801de9a:	b016      	add	sp, #88	@ 0x58
 801de9c:	bd70      	pop	{r4, r5, r6, pc}
 801de9e:	466a      	mov	r2, sp
 801dea0:	f000 f8f0 	bl	801e084 <_fstat_r>
 801dea4:	2800      	cmp	r0, #0
 801dea6:	dbec      	blt.n	801de82 <__swhatbuf_r+0x12>
 801dea8:	9901      	ldr	r1, [sp, #4]
 801deaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801deae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801deb2:	4259      	negs	r1, r3
 801deb4:	4159      	adcs	r1, r3
 801deb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801deba:	e7eb      	b.n	801de94 <__swhatbuf_r+0x24>

0801debc <__smakebuf_r>:
 801debc:	898b      	ldrh	r3, [r1, #12]
 801debe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dec0:	079d      	lsls	r5, r3, #30
 801dec2:	4606      	mov	r6, r0
 801dec4:	460c      	mov	r4, r1
 801dec6:	d507      	bpl.n	801ded8 <__smakebuf_r+0x1c>
 801dec8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801decc:	6023      	str	r3, [r4, #0]
 801dece:	6123      	str	r3, [r4, #16]
 801ded0:	2301      	movs	r3, #1
 801ded2:	6163      	str	r3, [r4, #20]
 801ded4:	b003      	add	sp, #12
 801ded6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ded8:	ab01      	add	r3, sp, #4
 801deda:	466a      	mov	r2, sp
 801dedc:	f7ff ffc8 	bl	801de70 <__swhatbuf_r>
 801dee0:	9f00      	ldr	r7, [sp, #0]
 801dee2:	4605      	mov	r5, r0
 801dee4:	4639      	mov	r1, r7
 801dee6:	4630      	mov	r0, r6
 801dee8:	f7fe fd0c 	bl	801c904 <_malloc_r>
 801deec:	b948      	cbnz	r0, 801df02 <__smakebuf_r+0x46>
 801deee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801def2:	059a      	lsls	r2, r3, #22
 801def4:	d4ee      	bmi.n	801ded4 <__smakebuf_r+0x18>
 801def6:	f023 0303 	bic.w	r3, r3, #3
 801defa:	f043 0302 	orr.w	r3, r3, #2
 801defe:	81a3      	strh	r3, [r4, #12]
 801df00:	e7e2      	b.n	801dec8 <__smakebuf_r+0xc>
 801df02:	89a3      	ldrh	r3, [r4, #12]
 801df04:	6020      	str	r0, [r4, #0]
 801df06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801df0a:	81a3      	strh	r3, [r4, #12]
 801df0c:	9b01      	ldr	r3, [sp, #4]
 801df0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801df12:	b15b      	cbz	r3, 801df2c <__smakebuf_r+0x70>
 801df14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df18:	4630      	mov	r0, r6
 801df1a:	f000 f8c5 	bl	801e0a8 <_isatty_r>
 801df1e:	b128      	cbz	r0, 801df2c <__smakebuf_r+0x70>
 801df20:	89a3      	ldrh	r3, [r4, #12]
 801df22:	f023 0303 	bic.w	r3, r3, #3
 801df26:	f043 0301 	orr.w	r3, r3, #1
 801df2a:	81a3      	strh	r3, [r4, #12]
 801df2c:	89a3      	ldrh	r3, [r4, #12]
 801df2e:	431d      	orrs	r5, r3
 801df30:	81a5      	strh	r5, [r4, #12]
 801df32:	e7cf      	b.n	801ded4 <__smakebuf_r+0x18>

0801df34 <_putc_r>:
 801df34:	b570      	push	{r4, r5, r6, lr}
 801df36:	460d      	mov	r5, r1
 801df38:	4614      	mov	r4, r2
 801df3a:	4606      	mov	r6, r0
 801df3c:	b118      	cbz	r0, 801df46 <_putc_r+0x12>
 801df3e:	6a03      	ldr	r3, [r0, #32]
 801df40:	b90b      	cbnz	r3, 801df46 <_putc_r+0x12>
 801df42:	f7fc ffc3 	bl	801aecc <__sinit>
 801df46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df48:	07d8      	lsls	r0, r3, #31
 801df4a:	d405      	bmi.n	801df58 <_putc_r+0x24>
 801df4c:	89a3      	ldrh	r3, [r4, #12]
 801df4e:	0599      	lsls	r1, r3, #22
 801df50:	d402      	bmi.n	801df58 <_putc_r+0x24>
 801df52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df54:	f7fd fa97 	bl	801b486 <__retarget_lock_acquire_recursive>
 801df58:	68a3      	ldr	r3, [r4, #8]
 801df5a:	3b01      	subs	r3, #1
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	60a3      	str	r3, [r4, #8]
 801df60:	da05      	bge.n	801df6e <_putc_r+0x3a>
 801df62:	69a2      	ldr	r2, [r4, #24]
 801df64:	4293      	cmp	r3, r2
 801df66:	db12      	blt.n	801df8e <_putc_r+0x5a>
 801df68:	b2eb      	uxtb	r3, r5
 801df6a:	2b0a      	cmp	r3, #10
 801df6c:	d00f      	beq.n	801df8e <_putc_r+0x5a>
 801df6e:	6823      	ldr	r3, [r4, #0]
 801df70:	1c5a      	adds	r2, r3, #1
 801df72:	6022      	str	r2, [r4, #0]
 801df74:	701d      	strb	r5, [r3, #0]
 801df76:	b2ed      	uxtb	r5, r5
 801df78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df7a:	07da      	lsls	r2, r3, #31
 801df7c:	d405      	bmi.n	801df8a <_putc_r+0x56>
 801df7e:	89a3      	ldrh	r3, [r4, #12]
 801df80:	059b      	lsls	r3, r3, #22
 801df82:	d402      	bmi.n	801df8a <_putc_r+0x56>
 801df84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df86:	f7fd fa7f 	bl	801b488 <__retarget_lock_release_recursive>
 801df8a:	4628      	mov	r0, r5
 801df8c:	bd70      	pop	{r4, r5, r6, pc}
 801df8e:	4629      	mov	r1, r5
 801df90:	4622      	mov	r2, r4
 801df92:	4630      	mov	r0, r6
 801df94:	f7fd f8db 	bl	801b14e <__swbuf_r>
 801df98:	4605      	mov	r5, r0
 801df9a:	e7ed      	b.n	801df78 <_putc_r+0x44>

0801df9c <__sccl>:
 801df9c:	b570      	push	{r4, r5, r6, lr}
 801df9e:	780b      	ldrb	r3, [r1, #0]
 801dfa0:	4604      	mov	r4, r0
 801dfa2:	2b5e      	cmp	r3, #94	@ 0x5e
 801dfa4:	bf0b      	itete	eq
 801dfa6:	784b      	ldrbeq	r3, [r1, #1]
 801dfa8:	1c4a      	addne	r2, r1, #1
 801dfaa:	1c8a      	addeq	r2, r1, #2
 801dfac:	2100      	movne	r1, #0
 801dfae:	bf08      	it	eq
 801dfb0:	2101      	moveq	r1, #1
 801dfb2:	3801      	subs	r0, #1
 801dfb4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801dfb8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801dfbc:	42a8      	cmp	r0, r5
 801dfbe:	d1fb      	bne.n	801dfb8 <__sccl+0x1c>
 801dfc0:	b90b      	cbnz	r3, 801dfc6 <__sccl+0x2a>
 801dfc2:	1e50      	subs	r0, r2, #1
 801dfc4:	bd70      	pop	{r4, r5, r6, pc}
 801dfc6:	f081 0101 	eor.w	r1, r1, #1
 801dfca:	54e1      	strb	r1, [r4, r3]
 801dfcc:	4610      	mov	r0, r2
 801dfce:	4602      	mov	r2, r0
 801dfd0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801dfd4:	2d2d      	cmp	r5, #45	@ 0x2d
 801dfd6:	d005      	beq.n	801dfe4 <__sccl+0x48>
 801dfd8:	2d5d      	cmp	r5, #93	@ 0x5d
 801dfda:	d016      	beq.n	801e00a <__sccl+0x6e>
 801dfdc:	2d00      	cmp	r5, #0
 801dfde:	d0f1      	beq.n	801dfc4 <__sccl+0x28>
 801dfe0:	462b      	mov	r3, r5
 801dfe2:	e7f2      	b.n	801dfca <__sccl+0x2e>
 801dfe4:	7846      	ldrb	r6, [r0, #1]
 801dfe6:	2e5d      	cmp	r6, #93	@ 0x5d
 801dfe8:	d0fa      	beq.n	801dfe0 <__sccl+0x44>
 801dfea:	42b3      	cmp	r3, r6
 801dfec:	dcf8      	bgt.n	801dfe0 <__sccl+0x44>
 801dfee:	3002      	adds	r0, #2
 801dff0:	461a      	mov	r2, r3
 801dff2:	3201      	adds	r2, #1
 801dff4:	4296      	cmp	r6, r2
 801dff6:	54a1      	strb	r1, [r4, r2]
 801dff8:	dcfb      	bgt.n	801dff2 <__sccl+0x56>
 801dffa:	1af2      	subs	r2, r6, r3
 801dffc:	3a01      	subs	r2, #1
 801dffe:	1c5d      	adds	r5, r3, #1
 801e000:	42b3      	cmp	r3, r6
 801e002:	bfa8      	it	ge
 801e004:	2200      	movge	r2, #0
 801e006:	18ab      	adds	r3, r5, r2
 801e008:	e7e1      	b.n	801dfce <__sccl+0x32>
 801e00a:	4610      	mov	r0, r2
 801e00c:	e7da      	b.n	801dfc4 <__sccl+0x28>

0801e00e <__submore>:
 801e00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e012:	460c      	mov	r4, r1
 801e014:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801e016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e01a:	4299      	cmp	r1, r3
 801e01c:	d11d      	bne.n	801e05a <__submore+0x4c>
 801e01e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801e022:	f7fe fc6f 	bl	801c904 <_malloc_r>
 801e026:	b918      	cbnz	r0, 801e030 <__submore+0x22>
 801e028:	f04f 30ff 	mov.w	r0, #4294967295
 801e02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e034:	63a3      	str	r3, [r4, #56]	@ 0x38
 801e036:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801e03a:	6360      	str	r0, [r4, #52]	@ 0x34
 801e03c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801e040:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801e044:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801e048:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801e04c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801e050:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801e054:	6020      	str	r0, [r4, #0]
 801e056:	2000      	movs	r0, #0
 801e058:	e7e8      	b.n	801e02c <__submore+0x1e>
 801e05a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801e05c:	0077      	lsls	r7, r6, #1
 801e05e:	463a      	mov	r2, r7
 801e060:	f7ff f998 	bl	801d394 <_realloc_r>
 801e064:	4605      	mov	r5, r0
 801e066:	2800      	cmp	r0, #0
 801e068:	d0de      	beq.n	801e028 <__submore+0x1a>
 801e06a:	eb00 0806 	add.w	r8, r0, r6
 801e06e:	4601      	mov	r1, r0
 801e070:	4632      	mov	r2, r6
 801e072:	4640      	mov	r0, r8
 801e074:	f7fd fa09 	bl	801b48a <memcpy>
 801e078:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801e07c:	f8c4 8000 	str.w	r8, [r4]
 801e080:	e7e9      	b.n	801e056 <__submore+0x48>
	...

0801e084 <_fstat_r>:
 801e084:	b538      	push	{r3, r4, r5, lr}
 801e086:	4d07      	ldr	r5, [pc, #28]	@ (801e0a4 <_fstat_r+0x20>)
 801e088:	2300      	movs	r3, #0
 801e08a:	4604      	mov	r4, r0
 801e08c:	4608      	mov	r0, r1
 801e08e:	4611      	mov	r1, r2
 801e090:	602b      	str	r3, [r5, #0]
 801e092:	f7eb fb3f 	bl	8009714 <_fstat>
 801e096:	1c43      	adds	r3, r0, #1
 801e098:	d102      	bne.n	801e0a0 <_fstat_r+0x1c>
 801e09a:	682b      	ldr	r3, [r5, #0]
 801e09c:	b103      	cbz	r3, 801e0a0 <_fstat_r+0x1c>
 801e09e:	6023      	str	r3, [r4, #0]
 801e0a0:	bd38      	pop	{r3, r4, r5, pc}
 801e0a2:	bf00      	nop
 801e0a4:	2000b1cc 	.word	0x2000b1cc

0801e0a8 <_isatty_r>:
 801e0a8:	b538      	push	{r3, r4, r5, lr}
 801e0aa:	4d06      	ldr	r5, [pc, #24]	@ (801e0c4 <_isatty_r+0x1c>)
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	4604      	mov	r4, r0
 801e0b0:	4608      	mov	r0, r1
 801e0b2:	602b      	str	r3, [r5, #0]
 801e0b4:	f7eb fb3e 	bl	8009734 <_isatty>
 801e0b8:	1c43      	adds	r3, r0, #1
 801e0ba:	d102      	bne.n	801e0c2 <_isatty_r+0x1a>
 801e0bc:	682b      	ldr	r3, [r5, #0]
 801e0be:	b103      	cbz	r3, 801e0c2 <_isatty_r+0x1a>
 801e0c0:	6023      	str	r3, [r4, #0]
 801e0c2:	bd38      	pop	{r3, r4, r5, pc}
 801e0c4:	2000b1cc 	.word	0x2000b1cc

0801e0c8 <_sbrk_r>:
 801e0c8:	b538      	push	{r3, r4, r5, lr}
 801e0ca:	4d06      	ldr	r5, [pc, #24]	@ (801e0e4 <_sbrk_r+0x1c>)
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	4604      	mov	r4, r0
 801e0d0:	4608      	mov	r0, r1
 801e0d2:	602b      	str	r3, [r5, #0]
 801e0d4:	f7eb fb46 	bl	8009764 <_sbrk>
 801e0d8:	1c43      	adds	r3, r0, #1
 801e0da:	d102      	bne.n	801e0e2 <_sbrk_r+0x1a>
 801e0dc:	682b      	ldr	r3, [r5, #0]
 801e0de:	b103      	cbz	r3, 801e0e2 <_sbrk_r+0x1a>
 801e0e0:	6023      	str	r3, [r4, #0]
 801e0e2:	bd38      	pop	{r3, r4, r5, pc}
 801e0e4:	2000b1cc 	.word	0x2000b1cc

0801e0e8 <abort>:
 801e0e8:	b508      	push	{r3, lr}
 801e0ea:	2006      	movs	r0, #6
 801e0ec:	f000 f8b8 	bl	801e260 <raise>
 801e0f0:	2001      	movs	r0, #1
 801e0f2:	f7eb fadb 	bl	80096ac <_exit>

0801e0f6 <_calloc_r>:
 801e0f6:	b570      	push	{r4, r5, r6, lr}
 801e0f8:	fba1 5402 	umull	r5, r4, r1, r2
 801e0fc:	b934      	cbnz	r4, 801e10c <_calloc_r+0x16>
 801e0fe:	4629      	mov	r1, r5
 801e100:	f7fe fc00 	bl	801c904 <_malloc_r>
 801e104:	4606      	mov	r6, r0
 801e106:	b928      	cbnz	r0, 801e114 <_calloc_r+0x1e>
 801e108:	4630      	mov	r0, r6
 801e10a:	bd70      	pop	{r4, r5, r6, pc}
 801e10c:	220c      	movs	r2, #12
 801e10e:	6002      	str	r2, [r0, #0]
 801e110:	2600      	movs	r6, #0
 801e112:	e7f9      	b.n	801e108 <_calloc_r+0x12>
 801e114:	462a      	mov	r2, r5
 801e116:	4621      	mov	r1, r4
 801e118:	f7fd f8c8 	bl	801b2ac <memset>
 801e11c:	e7f4      	b.n	801e108 <_calloc_r+0x12>

0801e11e <_malloc_usable_size_r>:
 801e11e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e122:	1f18      	subs	r0, r3, #4
 801e124:	2b00      	cmp	r3, #0
 801e126:	bfbc      	itt	lt
 801e128:	580b      	ldrlt	r3, [r1, r0]
 801e12a:	18c0      	addlt	r0, r0, r3
 801e12c:	4770      	bx	lr
	...

0801e130 <_strtoul_l.isra.0>:
 801e130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e134:	4e34      	ldr	r6, [pc, #208]	@ (801e208 <_strtoul_l.isra.0+0xd8>)
 801e136:	4686      	mov	lr, r0
 801e138:	460d      	mov	r5, r1
 801e13a:	4628      	mov	r0, r5
 801e13c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e140:	5d37      	ldrb	r7, [r6, r4]
 801e142:	f017 0708 	ands.w	r7, r7, #8
 801e146:	d1f8      	bne.n	801e13a <_strtoul_l.isra.0+0xa>
 801e148:	2c2d      	cmp	r4, #45	@ 0x2d
 801e14a:	d110      	bne.n	801e16e <_strtoul_l.isra.0+0x3e>
 801e14c:	782c      	ldrb	r4, [r5, #0]
 801e14e:	2701      	movs	r7, #1
 801e150:	1c85      	adds	r5, r0, #2
 801e152:	f033 0010 	bics.w	r0, r3, #16
 801e156:	d115      	bne.n	801e184 <_strtoul_l.isra.0+0x54>
 801e158:	2c30      	cmp	r4, #48	@ 0x30
 801e15a:	d10d      	bne.n	801e178 <_strtoul_l.isra.0+0x48>
 801e15c:	7828      	ldrb	r0, [r5, #0]
 801e15e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e162:	2858      	cmp	r0, #88	@ 0x58
 801e164:	d108      	bne.n	801e178 <_strtoul_l.isra.0+0x48>
 801e166:	786c      	ldrb	r4, [r5, #1]
 801e168:	3502      	adds	r5, #2
 801e16a:	2310      	movs	r3, #16
 801e16c:	e00a      	b.n	801e184 <_strtoul_l.isra.0+0x54>
 801e16e:	2c2b      	cmp	r4, #43	@ 0x2b
 801e170:	bf04      	itt	eq
 801e172:	782c      	ldrbeq	r4, [r5, #0]
 801e174:	1c85      	addeq	r5, r0, #2
 801e176:	e7ec      	b.n	801e152 <_strtoul_l.isra.0+0x22>
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d1f6      	bne.n	801e16a <_strtoul_l.isra.0+0x3a>
 801e17c:	2c30      	cmp	r4, #48	@ 0x30
 801e17e:	bf14      	ite	ne
 801e180:	230a      	movne	r3, #10
 801e182:	2308      	moveq	r3, #8
 801e184:	f04f 38ff 	mov.w	r8, #4294967295
 801e188:	2600      	movs	r6, #0
 801e18a:	fbb8 f8f3 	udiv	r8, r8, r3
 801e18e:	fb03 f908 	mul.w	r9, r3, r8
 801e192:	ea6f 0909 	mvn.w	r9, r9
 801e196:	4630      	mov	r0, r6
 801e198:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e19c:	f1bc 0f09 	cmp.w	ip, #9
 801e1a0:	d810      	bhi.n	801e1c4 <_strtoul_l.isra.0+0x94>
 801e1a2:	4664      	mov	r4, ip
 801e1a4:	42a3      	cmp	r3, r4
 801e1a6:	dd1e      	ble.n	801e1e6 <_strtoul_l.isra.0+0xb6>
 801e1a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 801e1ac:	d007      	beq.n	801e1be <_strtoul_l.isra.0+0x8e>
 801e1ae:	4580      	cmp	r8, r0
 801e1b0:	d316      	bcc.n	801e1e0 <_strtoul_l.isra.0+0xb0>
 801e1b2:	d101      	bne.n	801e1b8 <_strtoul_l.isra.0+0x88>
 801e1b4:	45a1      	cmp	r9, r4
 801e1b6:	db13      	blt.n	801e1e0 <_strtoul_l.isra.0+0xb0>
 801e1b8:	fb00 4003 	mla	r0, r0, r3, r4
 801e1bc:	2601      	movs	r6, #1
 801e1be:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e1c2:	e7e9      	b.n	801e198 <_strtoul_l.isra.0+0x68>
 801e1c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e1c8:	f1bc 0f19 	cmp.w	ip, #25
 801e1cc:	d801      	bhi.n	801e1d2 <_strtoul_l.isra.0+0xa2>
 801e1ce:	3c37      	subs	r4, #55	@ 0x37
 801e1d0:	e7e8      	b.n	801e1a4 <_strtoul_l.isra.0+0x74>
 801e1d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e1d6:	f1bc 0f19 	cmp.w	ip, #25
 801e1da:	d804      	bhi.n	801e1e6 <_strtoul_l.isra.0+0xb6>
 801e1dc:	3c57      	subs	r4, #87	@ 0x57
 801e1de:	e7e1      	b.n	801e1a4 <_strtoul_l.isra.0+0x74>
 801e1e0:	f04f 36ff 	mov.w	r6, #4294967295
 801e1e4:	e7eb      	b.n	801e1be <_strtoul_l.isra.0+0x8e>
 801e1e6:	1c73      	adds	r3, r6, #1
 801e1e8:	d106      	bne.n	801e1f8 <_strtoul_l.isra.0+0xc8>
 801e1ea:	2322      	movs	r3, #34	@ 0x22
 801e1ec:	f8ce 3000 	str.w	r3, [lr]
 801e1f0:	4630      	mov	r0, r6
 801e1f2:	b932      	cbnz	r2, 801e202 <_strtoul_l.isra.0+0xd2>
 801e1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e1f8:	b107      	cbz	r7, 801e1fc <_strtoul_l.isra.0+0xcc>
 801e1fa:	4240      	negs	r0, r0
 801e1fc:	2a00      	cmp	r2, #0
 801e1fe:	d0f9      	beq.n	801e1f4 <_strtoul_l.isra.0+0xc4>
 801e200:	b106      	cbz	r6, 801e204 <_strtoul_l.isra.0+0xd4>
 801e202:	1e69      	subs	r1, r5, #1
 801e204:	6011      	str	r1, [r2, #0]
 801e206:	e7f5      	b.n	801e1f4 <_strtoul_l.isra.0+0xc4>
 801e208:	08020939 	.word	0x08020939

0801e20c <_strtoul_r>:
 801e20c:	f7ff bf90 	b.w	801e130 <_strtoul_l.isra.0>

0801e210 <_raise_r>:
 801e210:	291f      	cmp	r1, #31
 801e212:	b538      	push	{r3, r4, r5, lr}
 801e214:	4605      	mov	r5, r0
 801e216:	460c      	mov	r4, r1
 801e218:	d904      	bls.n	801e224 <_raise_r+0x14>
 801e21a:	2316      	movs	r3, #22
 801e21c:	6003      	str	r3, [r0, #0]
 801e21e:	f04f 30ff 	mov.w	r0, #4294967295
 801e222:	bd38      	pop	{r3, r4, r5, pc}
 801e224:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e226:	b112      	cbz	r2, 801e22e <_raise_r+0x1e>
 801e228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e22c:	b94b      	cbnz	r3, 801e242 <_raise_r+0x32>
 801e22e:	4628      	mov	r0, r5
 801e230:	f000 f830 	bl	801e294 <_getpid_r>
 801e234:	4622      	mov	r2, r4
 801e236:	4601      	mov	r1, r0
 801e238:	4628      	mov	r0, r5
 801e23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e23e:	f000 b817 	b.w	801e270 <_kill_r>
 801e242:	2b01      	cmp	r3, #1
 801e244:	d00a      	beq.n	801e25c <_raise_r+0x4c>
 801e246:	1c59      	adds	r1, r3, #1
 801e248:	d103      	bne.n	801e252 <_raise_r+0x42>
 801e24a:	2316      	movs	r3, #22
 801e24c:	6003      	str	r3, [r0, #0]
 801e24e:	2001      	movs	r0, #1
 801e250:	e7e7      	b.n	801e222 <_raise_r+0x12>
 801e252:	2100      	movs	r1, #0
 801e254:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e258:	4620      	mov	r0, r4
 801e25a:	4798      	blx	r3
 801e25c:	2000      	movs	r0, #0
 801e25e:	e7e0      	b.n	801e222 <_raise_r+0x12>

0801e260 <raise>:
 801e260:	4b02      	ldr	r3, [pc, #8]	@ (801e26c <raise+0xc>)
 801e262:	4601      	mov	r1, r0
 801e264:	6818      	ldr	r0, [r3, #0]
 801e266:	f7ff bfd3 	b.w	801e210 <_raise_r>
 801e26a:	bf00      	nop
 801e26c:	200002cc 	.word	0x200002cc

0801e270 <_kill_r>:
 801e270:	b538      	push	{r3, r4, r5, lr}
 801e272:	4d07      	ldr	r5, [pc, #28]	@ (801e290 <_kill_r+0x20>)
 801e274:	2300      	movs	r3, #0
 801e276:	4604      	mov	r4, r0
 801e278:	4608      	mov	r0, r1
 801e27a:	4611      	mov	r1, r2
 801e27c:	602b      	str	r3, [r5, #0]
 801e27e:	f7eb fa05 	bl	800968c <_kill>
 801e282:	1c43      	adds	r3, r0, #1
 801e284:	d102      	bne.n	801e28c <_kill_r+0x1c>
 801e286:	682b      	ldr	r3, [r5, #0]
 801e288:	b103      	cbz	r3, 801e28c <_kill_r+0x1c>
 801e28a:	6023      	str	r3, [r4, #0]
 801e28c:	bd38      	pop	{r3, r4, r5, pc}
 801e28e:	bf00      	nop
 801e290:	2000b1cc 	.word	0x2000b1cc

0801e294 <_getpid_r>:
 801e294:	f7eb b9f2 	b.w	800967c <_getpid>

0801e298 <_init>:
 801e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e29a:	bf00      	nop
 801e29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e29e:	bc08      	pop	{r3}
 801e2a0:	469e      	mov	lr, r3
 801e2a2:	4770      	bx	lr

0801e2a4 <_fini>:
 801e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2a6:	bf00      	nop
 801e2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2aa:	bc08      	pop	{r3}
 801e2ac:	469e      	mov	lr, r3
 801e2ae:	4770      	bx	lr
